package com.google.auto.value;

import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.ExecutableElement;
import javax.lang.model.element.TypeElement;
import java.util.Collection;
import java.util.Map;

/**
 * An AutoValueExtension allows for extra functionality to be created during the generation
 * of an AutoValue class.
 *
 * Extensions are discovered at compile time using the {@link java.util.ServiceLoader} APIs,
 * allowing them to run without any additional annotations.
 *
 * Extensions can extend the AutoValue implementation by generating subclasses of the AutoValue
 * generated class. It's not guaranteed that an Extension's generated class will be the final
 * class in the inheritance hierarchy, unless it's {@link #mustBeAtEnd} method returns true,
 * and only one Extension at a time can return true for a given context.  Only generated classes
 * that will be the final class in the inheritance hierarchy can be final.
 *
 * Each Extension must also be sure to generate a constructor with arguments corresponding to
 * all properties in {@link com.google.auto.value.AutoValueExtension.Context#properties()}, in
 * order.  This constructor must have at least package visibility.
 */
public interface AutoValueExtension {

  /**
   * The context of the generation cycle.
   */
  public interface Context {

    /**
     * The processing environment of this generation cycle.
     *
     * @return The {@link javax.annotation.processing.ProcessingEnvironment} of this generation cycle.
     */
    ProcessingEnvironment processingEnvironment();

    /**
     * The package name of the classes to be generated.
     *
     * @return The package name of the classes to be generated.
     */
    String packageName();

    /**
     * The annotated class that this generation cycle is based on.
     *
     * @return The annotated class.
     */
    TypeElement autoValueClass();

    /**
     * The ordered collection of properties to be generated by AutoValue.
     *
     * @return The ordered collection of properties.
     */
    Map<String, ExecutableElement> properties();
  }

  /**
   * Determines whether this extension applies to the given context.
   *
   * @param context The {@link com.google.auto.value.AutoValueExtension.Context} of the code
   *                generation for this class.
   * @return True if this extension should be applied in the given context.
   */
  boolean applicable(Context context);

  /**
   * Denotes that the class generated by this Extension must be the final class
   * in the inheritance hierarchy.  Only one extension may be the final class, so
   * this should be used sparingly.
   *
   * @param context The {@link com.google.auto.value.AutoValueExtension.Context} of the code
   *                generation for this class.
   * @return True if the resulting class must be the final class in the inheritance hierarchy.
   */
  boolean mustBeAtEnd(Context context);

  /**
   * Generates the source code of the class named <code>className</code> to extend
   * <code>classToExtend</code>, with the original annotated class of
   * <code>classToImplement</code>.  The generated class should be final if <code>isFinal</code>
   * is true, otherwise it should be abstract.
   *
   * @param context The {@link com.google.auto.value.AutoValueExtension.Context} of the code
   *                generation for this class.
   * @param className The name of the resulting class. The returned code will be written to a
   *                  file named accordingly.
   * @param classToExtend The direct parent of the generated class. Could be the AutoValue
   *                      generated class, or a class generated as the result of another
   *                      extension.
   * @param isFinal True if this class is the last class in the chain, meaning it should be
   *                marked as final, otherwise it should be marked as abstract.
   * @return The source code of the generated class
   */
  String generateClass(Context context, String className, String classToExtend, boolean isFinal);
}
