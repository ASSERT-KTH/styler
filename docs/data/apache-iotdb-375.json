{
    "project_name": "apache-iotdb",
    "error_id": "375",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.tsfile.read.controller;\n\nimport org.apache.iotdb.tsfile.common.cache.LRUCache;\nimport org.apache.iotdb.tsfile.file.metadata.ChunkMetadata;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/375/MetadataQuerierByFileImpl.java\nindex dbe7f7b402c..d5fe15ea0ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/375/MetadataQuerierByFileImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.tsfile.read.controller;\n \n import org.apache.iotdb.tsfile.common.cache.LRUCache;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/375/MetadataQuerierByFileImpl.java\nindex dbe7f7b402c..5915099b20b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/375/MetadataQuerierByFileImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.tsfile.read.controller;\n \n import org.apache.iotdb.tsfile.common.cache.LRUCache;\n@@ -51,7 +52,9 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n \n   private TsFileSequenceReader tsFileReader;\n \n-  /** Constructor of MetadataQuerierByFileImpl. */\n+  /**\n+   * Constructor of MetadataQuerierByFileImpl.\n+   */\n   public MetadataQuerierByFileImpl(TsFileSequenceReader tsFileReader) throws IOException {\n     this.tsFileReader = tsFileReader;\n     this.fileMetaData = tsFileReader.readFileMetadata();\n@@ -244,9 +247,9 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n   /**\n    * Check the location of a given chunkGroupMetaData with respect to a space partition constraint.\n    *\n-   * @param chunkMetaData the given chunkMetaData\n+   * @param chunkMetaData          the given chunkMetaData\n    * @param spacePartitionStartPos the start position of the space partition\n-   * @param spacePartitionEndPos the end position of the space partition\n+   * @param spacePartitionEndPos   the end position of the space partition\n    * @return LocateStatus\n    */\n   public static LocateStatus checkLocateStatus(\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "54",
                    "severity": "warning",
                    "message": "'throws' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 27, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 29, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 27, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 25, expected level should be one of the following: 4, 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "164",
                    "severity": "warning",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "204",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "severity": "warning",
                    "message": "'ChunkMetadata' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/375/MetadataQuerierByFileImpl.java\nindex dbe7f7b402c..74c39ba526a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/375/MetadataQuerierByFileImpl.java\n@@ -27,7 +27,6 @@ import org.apache.iotdb.tsfile.read.TsFileSequenceReader;\n import org.apache.iotdb.tsfile.read.TsFileSequenceReader.LocateStatus;\n import org.apache.iotdb.tsfile.read.common.Path;\n import org.apache.iotdb.tsfile.read.common.TimeRange;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -43,25 +42,25 @@ import java.util.TreeMap;\n public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n \n   // number of cache entries (path -> List<ChunkMetadata>)\n-  private static final int CACHED_ENTRY_NUMBER = 1000;\n \n+  private static final int CACHED_ENTRY_NUMBER = 1000;\n   private TsFileMetadata fileMetaData;\n-\n   private LRUCache<Path, List<ChunkMetadata>> chunkMetaDataCache;\n-\n   private TsFileSequenceReader tsFileReader;\n \n   /** Constructor of MetadataQuerierByFileImpl. */\n-  public MetadataQuerierByFileImpl(TsFileSequenceReader tsFileReader) throws IOException {\n+\n+  public MetadataQuerierByFileImpl(TsFileSequenceReader tsFileReader)\n+    throws IOException {\n     this.tsFileReader = tsFileReader;\n     this.fileMetaData = tsFileReader.readFileMetadata();\n-    chunkMetaDataCache =\n-        new LRUCache<Path, List<ChunkMetadata>>(CACHED_ENTRY_NUMBER) {\n-          @Override\n-          public List<ChunkMetadata> loadObjectByKey(Path key) throws IOException {\n-            return loadChunkMetadata(key);\n-          }\n-        };\n+    chunkMetaDataCache = new LRUCache<Path, List<ChunkMetadata>>(CACHED_ENTRY_NUMBER) {\n+\n+                           @Override\n+                           public List<ChunkMetadata> loadObjectByKey(Path key) throws IOException {\n+                             return loadChunkMetadata(key);\n+                           }\n+                         };\n   }\n \n   @Override\n@@ -97,12 +96,9 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n       }\n       deviceMeasurementsMap.get(path.getDevice()).add(path.getMeasurement());\n     }\n-\n     Map<Path, List<ChunkMetadata>> tempChunkMetaDatas = new HashMap<>();\n-\n     int count = 0;\n     boolean enough = false;\n-\n     for (Map.Entry<String, Set<String>> deviceMeasurements : deviceMeasurementsMap.entrySet()) {\n       if (enough) {\n         break;\n@@ -115,9 +111,7 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n       if (Arrays.binarySearch(deviceNames, selectedDevice) < 0) {\n         continue;\n       }\n-\n-      List<TimeseriesMetadata> timeseriesMetaDataList =\n-          tsFileReader.readTimeseriesMetadata(selectedDevice, selectedMeasurements);\n+      List<TimeseriesMetadata> timeseriesMetaDataList = tsFileReader.readTimeseriesMetadata(selectedDevice, selectedMeasurements);\n       List<ChunkMetadata> chunkMetadataList = new ArrayList<>();\n       for (TimeseriesMetadata timeseriesMetadata : timeseriesMetaDataList) {\n         chunkMetadataList.addAll(tsFileReader.readChunkMetaDataList(timeseriesMetadata));\n@@ -147,7 +141,6 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n         }\n       }\n     }\n-\n     for (Map.Entry<Path, List<ChunkMetadata>> entry : tempChunkMetaDatas.entrySet()) {\n       chunkMetaDataCache.put(entry.getKey(), entry.getValue());\n     }\n@@ -155,8 +148,7 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n \n   @Override\n   public TSDataType getDataType(Path path) throws IOException {\n-    if (tsFileReader.getChunkMetadataList(path) == null\n-        || tsFileReader.getChunkMetadataList(path).isEmpty()) {\n+    if (tsFileReader.getChunkMetadataList(path) == null || tsFileReader.getChunkMetadataList(path).isEmpty()) {\n       return null;\n     }\n     return tsFileReader.getChunkMetadataList(path).get(0).getDataType();\n@@ -169,10 +161,9 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n   @Override\n   @SuppressWarnings(\"squid:S3776\") // Suppress high Cognitive Complexity warning\n   public List<TimeRange> convertSpace2TimePartition(\n-      List<Path> paths, long spacePartitionStartPos, long spacePartitionEndPos) throws IOException {\n+    List<Path> paths, long spacePartitionStartPos, long spacePartitionEndPos) throws IOException {\n     if (spacePartitionStartPos > spacePartitionEndPos) {\n-      throw new IllegalArgumentException(\n-          \"'spacePartitionStartPos' should not be larger than 'spacePartitionEndPos'.\");\n+      throw new IllegalArgumentException(\"'spacePartitionStartPos' should not be larger than 'spacePartitionEndPos'.\");\n     }\n \n     // (1) get timeRangesInCandidates and timeRangesBeforeCandidates by iterating\n@@ -181,55 +172,42 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n     ArrayList<TimeRange> timeRangesBeforeCandidates = new ArrayList<>();\n \n     // group measurements by device\n-\n     TreeMap<String, Set<String>> deviceMeasurementsMap = new TreeMap<>();\n     for (Path path : paths) {\n-      deviceMeasurementsMap\n-          .computeIfAbsent(path.getDevice(), key -> new HashSet<>())\n-          .add(path.getMeasurement());\n+      deviceMeasurementsMap.computeIfAbsent(path.getDevice(), key -> new HashSet<>()).add(path.getMeasurement());\n     }\n     for (Map.Entry<String, Set<String>> deviceMeasurements : deviceMeasurementsMap.entrySet()) {\n       String selectedDevice = deviceMeasurements.getKey();\n       Set<String> selectedMeasurements = deviceMeasurements.getValue();\n \n       // measurement -> ChunkMetadata list\n-      Map<String, List<ChunkMetadata>> seriesMetadatas =\n-          tsFileReader.readChunkMetadataInDevice(selectedDevice);\n-\n+      Map<String, List<ChunkMetadata>> seriesMetadatas = tsFileReader.readChunkMetadataInDevice(selectedDevice);\n       for (Entry<String, List<ChunkMetadata>> seriesMetadata : seriesMetadatas.entrySet()) {\n-\n         if (!selectedMeasurements.contains(seriesMetadata.getKey())) {\n           continue;\n         }\n-\n         for (ChunkMetadata chunkMetadata : seriesMetadata.getValue()) {\n-          LocateStatus location =\n-              checkLocateStatus(chunkMetadata, spacePartitionStartPos, spacePartitionEndPos);\n+          LocateStatus location = checkLocateStatus(chunkMetadata, spacePartitionStartPos, spacePartitionEndPos);\n           if (location == LocateStatus.after) {\n             break;\n           }\n-\n           if (location == LocateStatus.in) {\n-            timeRangesInCandidates.add(\n-                new TimeRange(chunkMetadata.getStartTime(), chunkMetadata.getEndTime()));\n+            timeRangesInCandidates.add(new TimeRange(chunkMetadata.getStartTime(), chunkMetadata.getEndTime()));\n           } else {\n-            timeRangesBeforeCandidates.add(\n-                new TimeRange(chunkMetadata.getStartTime(), chunkMetadata.getEndTime()));\n+            timeRangesBeforeCandidates.add(new TimeRange(chunkMetadata.getStartTime(), chunkMetadata.getEndTime()));\n           }\n         }\n       }\n     }\n \n     // (2) sort and merge the timeRangesInCandidates\n-    ArrayList<TimeRange> timeRangesIn =\n-        new ArrayList<>(TimeRange.sortAndMerge(timeRangesInCandidates));\n+    ArrayList<TimeRange> timeRangesIn = new ArrayList<>(TimeRange.sortAndMerge(timeRangesInCandidates));\n     if (timeRangesIn.isEmpty()) {\n       return Collections.emptyList(); // return an empty list\n     }\n \n     // (3) sort and merge the timeRangesBeforeCandidates\n-    ArrayList<TimeRange> timeRangesBefore =\n-        new ArrayList<>(TimeRange.sortAndMerge(timeRangesBeforeCandidates));\n+    ArrayList<TimeRange> timeRangesBefore = new ArrayList<>(TimeRange.sortAndMerge(timeRangesBeforeCandidates));\n \n     // (4) calculate the remaining time ranges\n     List<TimeRange> resTimeRanges = new ArrayList<>();\n@@ -237,7 +215,6 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n       ArrayList<TimeRange> remains = new ArrayList<>(in.getRemains(timeRangesBefore));\n       resTimeRanges.addAll(remains);\n     }\n-\n     return resTimeRanges;\n   }\n \n@@ -249,8 +226,9 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n    * @param spacePartitionEndPos the end position of the space partition\n    * @return LocateStatus\n    */\n+\n   public static LocateStatus checkLocateStatus(\n-      ChunkMetadata chunkMetaData, long spacePartitionStartPos, long spacePartitionEndPos) {\n+    ChunkMetadata chunkMetaData, long spacePartitionStartPos, long spacePartitionEndPos) {\n     long startOffsetOfChunk = chunkMetaData.getOffsetOfChunkHeader();\n     if (spacePartitionStartPos <= startOffsetOfChunk && startOffsetOfChunk < spacePartitionEndPos) {\n       return LocateStatus.in;\n@@ -265,4 +243,4 @@ public class MetadataQuerierByFileImpl implements IMetadataQuerier {\n   public void clear() {\n     chunkMetaDataCache.clear();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/375/MetadataQuerierByFileImpl.java\nindex dbe7f7b402c..d5fe15ea0ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/375/MetadataQuerierByFileImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.tsfile.read.controller;\n \n import org.apache.iotdb.tsfile.common.cache.LRUCache;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/375/MetadataQuerierByFileImpl.java\nindex dbe7f7b402c..d5fe15ea0ea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/375/MetadataQuerierByFileImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/375/MetadataQuerierByFileImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.tsfile.read.controller;\n \n import org.apache.iotdb.tsfile.common.cache.LRUCache;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}