{
    "project_name": "dzhw-metadatamanagement",
    "error_id": "98",
    "information": {
        "errors": [
            {
                "line": "20",
                "column": "74",
                "severity": "error",
                "message": "'}' at column 74 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(ValidInstrumentIdPattern constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "20",
                    "column": "74",
                    "severity": "error",
                    "message": "'}' at column 74 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/98/ValidInstrumentIdPatternValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/98/ValidInstrumentIdPatternValidator.java\nindex af5b7e57dc5..ec094d9741a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/98/ValidInstrumentIdPatternValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/98/ValidInstrumentIdPatternValidator.java\n@@ -17,7 +17,8 @@ public class ValidInstrumentIdPatternValidator\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(ValidInstrumentIdPattern constraintAnnotation) {}\n+  public void initialize(ValidInstrumentIdPattern constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "20",
                    "column": "74",
                    "severity": "error",
                    "message": "'}' at column 74 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/98/ValidInstrumentIdPatternValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/98/ValidInstrumentIdPatternValidator.java\nindex af5b7e57dc5..d6a37a24dd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/98/ValidInstrumentIdPatternValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/98/ValidInstrumentIdPatternValidator.java\n@@ -38,4 +38,4 @@ public class ValidInstrumentIdPatternValidator\n         + instrument.getNumber() + \"$\");\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "12",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 117).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'ConstraintValidatorContext' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/98/ValidInstrumentIdPatternValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/98/ValidInstrumentIdPatternValidator.java\nindex af5b7e57dc5..7eb70bc5a6d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/98/ValidInstrumentIdPatternValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/98/ValidInstrumentIdPatternValidator.java\n@@ -2,22 +2,25 @@ package eu.dzhw.fdz.metadatamanagement.instrumentmanagement.domain.validation;\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import eu.dzhw.fdz.metadatamanagement.instrumentmanagement.domain.Instrument;\n \n /**\n  * Validates the name of a id.\n  */\n-public class ValidInstrumentIdPatternValidator\n-    implements ConstraintValidator<ValidInstrumentIdPattern, Instrument> {\n+\n+\n+public class ValidInstrumentIdPatternValidator implements ConstraintValidator<ValidInstrumentIdPattern, Instrument> {\n \n   /*\n    * (non-Javadoc)\n    *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n+\n   @Override\n-  public void initialize(ValidInstrumentIdPattern constraintAnnotation) {}\n+  public void initialize(ValidInstrumentIdPattern constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n@@ -25,17 +28,19 @@ public class ValidInstrumentIdPatternValidator\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n+\n+\n   @Override\n-  public boolean isValid(Instrument instrument, ConstraintValidatorContext context) {\n+  public boolean isValid(Instrument instrument,\n+    ConstraintValidatorContext context) {\n \n     // check precondition\n-    if (instrument.getDataAcquisitionProjectId() == null || instrument.getId() == null\n+    if (instrument.getDataAcquisitionProjectId() == null\n+        || instrument.getId() == null\n         || instrument.getNumber() == null) {\n       return false;\n     }\n \n-    return instrument.getId().equals(\"ins-\" + instrument.getDataAcquisitionProjectId() + \"-ins\"\n-        + instrument.getNumber() + \"$\");\n+    return instrument.getId().equals(\"ins-\" + instrument.getDataAcquisitionProjectId() + \"-ins\" + instrument.getNumber() + \"$\");\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "20",
                    "column": "74",
                    "severity": "error",
                    "message": "'}' at column 74 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "20",
                    "column": "74",
                    "severity": "error",
                    "message": "'}' at column 74 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/98/ValidInstrumentIdPatternValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/98/ValidInstrumentIdPatternValidator.java\nindex af5b7e57dc5..6cf5984643a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/98/ValidInstrumentIdPatternValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/98/ValidInstrumentIdPatternValidator.java\n@@ -18,7 +18,6 @@ public class ValidInstrumentIdPatternValidator\n    */\n   @Override\n   public void initialize(ValidInstrumentIdPattern constraintAnnotation) {}\n-\n   /*\n    * (non-Javadoc)\n    *\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}