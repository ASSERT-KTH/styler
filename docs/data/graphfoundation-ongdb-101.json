{
    "project_name": "graphfoundation-ongdb",
    "error_id": "101",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "105",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "203",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "209",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "391",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "427",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "486",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "500",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "526",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "526",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "555",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "576",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "579",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "602",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "608",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "630",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "655",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "669",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "685",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "694",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "712",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "717",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "717",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "733",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "756",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "756",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "772",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "772",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "783",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "783",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "789",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "797",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "815",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "815",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "821",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "826",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "826",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "834",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "840",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "840",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "853",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "853",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "863",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "890",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "890",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "895",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/101/NodeRelationshipCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/101/NodeRelationshipCache.java\nindex e1a0205971a..a83b33e683f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/101/NodeRelationshipCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/101/NodeRelationshipCache.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.cache;\n \n import java.util.Arrays;\n@@ -47,857 +48,854 @@ import static org.neo4j.helpers.Numbers.unsignedShortToInt;\n  *   [NEXT,OUT_ID,OUT_DEGREE,IN_ID,IN_DEGREE,LOOP_ID,LOOP_DEGREE]\n  * - DEGREE < THRESHOLD: last seen relationship id for this node\n  * </pre>\n- *\n+ * <p>\n  * This class is designed to be thread safe if callers are coordinated such that different threads owns different\n  * parts of the main cache array, with the constraint that a thread which accesses item N must continue doing\n  * so in order to make further changes to N, if another thread accesses N the semantics will no longer hold.\n- *\n+ * <p>\n  * Since multiple threads are making changes external memory synchronization is also required in between\n  * a phase of making changes using {@link #getAndPutRelationship(long, int, Direction, long, boolean)} and e.g\n  * {@link #visitChangedNodes(NodeChangeVisitor, int)}.\n  */\n public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, AutoCloseable\n {\n-    private static final int CHUNK_SIZE = 1_000_000;\n-    private static final long EMPTY = -1;\n-    private static final long MAX_RELATIONSHIP_ID = (1L << 48/*6B*/) - 2/*reserving -1 as legal default value*/;\n-    // if count goes beyond this max count then count is redirected to bigCounts and index into that array\n-    // is stored as value in count offset\n-    static final int MAX_SMALL_COUNT = (1 << 29/*3 change bits*/) - 2/*reserving -1 as legal default value*/;\n-    // this max count is pessimistic in that it's what community format can hold, still pretty big.\n-    // we can make this as big as our storage needs them later on\n-    static final long MAX_COUNT = (1L << 35) - 1;\n-\n-    // Sizes and offsets of values in each sparse node ByteArray item\n-    private static final int ID_SIZE = 6;\n-    private static final int COUNT_SIZE = 4;\n-    private static final int ID_AND_COUNT_SIZE = ID_SIZE + COUNT_SIZE;\n-    private static final int SPARSE_ID_OFFSET = 0;\n-    private static final int SPARSE_COUNT_OFFSET = ID_SIZE;\n-\n-    // Masking for tracking changes per node\n-    private static final int DENSE_NODE_CHANGED_MASK = 0x80000000;\n-    private static final int SPARSE_NODE_CHANGED_MASK = 0x40000000;\n-    private static final int BIG_COUNT_MASK = 0x20000000;\n-    private static final int COUNT_FLAGS_MASKS = DENSE_NODE_CHANGED_MASK | SPARSE_NODE_CHANGED_MASK | BIG_COUNT_MASK;\n-    private static final int COUNT_MASK = ~COUNT_FLAGS_MASKS;\n-\n-    private static final int TYPE_SIZE = 2;\n-    public static final int GROUP_ENTRY_SIZE = TYPE_SIZE + ID_SIZE/*next*/ +\n-            ID_AND_COUNT_SIZE * Direction.values().length;\n-\n-    private ByteArray array;\n-    private byte[] chunkChangedArray;\n-    private final int denseNodeThreshold;\n-    private final RelGroupCache relGroupCache;\n-    private long highNodeId;\n-    // This cache participates in scans backwards and forwards, marking entities as changed in the process.\n-    // When going forward (forward==true) changes are marked with a set bit, a cleared bit when going bachwards.\n-    // This way there won't have to be a clearing of the change bits in between the scans.\n-    private volatile boolean forward = true;\n-    private final int chunkSize;\n-    private final NumberArrayFactory arrayFactory;\n-    private final LongArray bigCounts;\n-    private final AtomicInteger bigCountsCursor = new AtomicInteger();\n-    private long numberOfDenseNodes;\n-\n-    public NodeRelationshipCache( NumberArrayFactory arrayFactory, int denseNodeThreshold )\n-    {\n-        this( arrayFactory, denseNodeThreshold, CHUNK_SIZE, 0 );\n-    }\n-\n-    NodeRelationshipCache( NumberArrayFactory arrayFactory, int denseNodeThreshold, int chunkSize, long base )\n-    {\n-        this.arrayFactory = arrayFactory;\n-        this.chunkSize = chunkSize;\n-        this.denseNodeThreshold = denseNodeThreshold;\n-        this.bigCounts = arrayFactory.newDynamicLongArray( 1_000, 0 );\n-        this.relGroupCache = new RelGroupCache( arrayFactory, chunkSize, base );\n-    }\n-\n-    private static byte[] minusOneBytes( int length )\n-    {\n-        byte[] bytes = new byte[length];\n-        Arrays.fill( bytes, (byte) -1 );\n-        return bytes;\n-    }\n-\n-    /**\n-     * Increment relationship count for {@code nodeId}.\n-     * @param nodeId node to increment relationship count for.\n-     * @return count after the increment.\n+  private static final int CHUNK_SIZE = 1_000_000;\n+  private static final long EMPTY = -1;\n+  private static final long MAX_RELATIONSHIP_ID = (1L << 48/*6B*/) - 2/*reserving -1 as legal default value*/;\n+  // if count goes beyond this max count then count is redirected to bigCounts and index into that array\n+  // is stored as value in count offset\n+  static final int MAX_SMALL_COUNT = (1 << 29/*3 change bits*/) - 2/*reserving -1 as legal default value*/;\n+  // this max count is pessimistic in that it's what community format can hold, still pretty big.\n+  // we can make this as big as our storage needs them later on\n+  static final long MAX_COUNT = (1L << 35) - 1;\n+\n+  // Sizes and offsets of values in each sparse node ByteArray item\n+  private static final int ID_SIZE = 6;\n+  private static final int COUNT_SIZE = 4;\n+  private static final int ID_AND_COUNT_SIZE = ID_SIZE + COUNT_SIZE;\n+  private static final int SPARSE_ID_OFFSET = 0;\n+  private static final int SPARSE_COUNT_OFFSET = ID_SIZE;\n+\n+  // Masking for tracking changes per node\n+  private static final int DENSE_NODE_CHANGED_MASK = 0x80000000;\n+  private static final int SPARSE_NODE_CHANGED_MASK = 0x40000000;\n+  private static final int BIG_COUNT_MASK = 0x20000000;\n+  private static final int COUNT_FLAGS_MASKS = DENSE_NODE_CHANGED_MASK | SPARSE_NODE_CHANGED_MASK | BIG_COUNT_MASK;\n+  private static final int COUNT_MASK = ~COUNT_FLAGS_MASKS;\n+\n+  private static final int TYPE_SIZE = 2;\n+  public static final int GROUP_ENTRY_SIZE = TYPE_SIZE + ID_SIZE/*next*/ +\n+      ID_AND_COUNT_SIZE * Direction.values().length;\n+\n+  private ByteArray array;\n+  private byte[] chunkChangedArray;\n+  private final int denseNodeThreshold;\n+  private final RelGroupCache relGroupCache;\n+  private long highNodeId;\n+  // This cache participates in scans backwards and forwards, marking entities as changed in the process.\n+  // When going forward (forward==true) changes are marked with a set bit, a cleared bit when going bachwards.\n+  // This way there won't have to be a clearing of the change bits in between the scans.\n+  private volatile boolean forward = true;\n+  private final int chunkSize;\n+  private final NumberArrayFactory arrayFactory;\n+  private final LongArray bigCounts;\n+  private final AtomicInteger bigCountsCursor = new AtomicInteger();\n+  private long numberOfDenseNodes;\n+\n+  public NodeRelationshipCache(NumberArrayFactory arrayFactory, int denseNodeThreshold)\n+  {\n+    this(arrayFactory, denseNodeThreshold, CHUNK_SIZE, 0);\n+  }\n+\n+  NodeRelationshipCache(NumberArrayFactory arrayFactory, int denseNodeThreshold, int chunkSize, long base)\n+  {\n+    this.arrayFactory = arrayFactory;\n+    this.chunkSize = chunkSize;\n+    this.denseNodeThreshold = denseNodeThreshold;\n+    this.bigCounts = arrayFactory.newDynamicLongArray(1_000, 0);\n+    this.relGroupCache = new RelGroupCache(arrayFactory, chunkSize, base);\n+  }\n+\n+  private static byte[] minusOneBytes(int length)\n+  {\n+    byte[] bytes = new byte[length];\n+    Arrays.fill(bytes, (byte) -1);\n+    return bytes;\n+  }\n+\n+  /**\n+   * Increment relationship count for {@code nodeId}.\n+   *\n+   * @param nodeId node to increment relationship count for.\n+   * @return count after the increment.\n+   */\n+  public long incrementCount(long nodeId)\n+  {\n+    return incrementCount(array, nodeId, SPARSE_COUNT_OFFSET);\n+  }\n+\n+  /**\n+   * Should only be used by tests\n+   */\n+  public void setCount(long nodeId, long count, int typeId, Direction direction)\n+  {\n+    if (isDense(nodeId))\n+    {\n+      long relGroupId = all48Bits(array, nodeId, SPARSE_ID_OFFSET);\n+      relGroupCache.setCount(relGroupId, typeId, direction, count);\n+    } else\n+    {\n+      setCount(array, nodeId, SPARSE_COUNT_OFFSET, count);\n+    }\n+  }\n+\n+  /**\n+   * This method sets count (node degree, really). It's somewhat generic in that it accepts\n+   * array and offset to set the count into. This is due to there being multiple places where\n+   * we store counts. Simplest one is for sparse nodes, which live in the main\n+   * NodeRelationshipCache.array at the dedicated offset. Other counts live in RelGroupCache.array\n+   * which contain three counts, one for each direction. That's covered by array and offset,\n+   * the count field works the same in all those scenarios. It's an integer which happens to have\n+   * some other flags at msb, so it's the 29 lsb bits which represents the count. 2^29 is merely\n+   * 1/2bn and so the count field has its 30th bit marking whether or not it's a \"big count\",\n+   * if it is then the 29 count bits instead point to an array index/slot into bigCounts array\n+   * which has much bigger space per count. This is of course quite rare, but nice to support.\n+   *\n+   * <pre>\n+   * \"small\" count, i.e. < 2^29\n+   * [  0c,cccc][cccc,cccc][cccc,cccc][cccc,cccc]\n+   *    \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   *    \u2502       bits containing actual count\n+   *  0 marking that this is a small count\n+   *\n+   * \"big\" count, i.e. >= 2^29\n+   * [  1i,iiii][iiii,iiii][iiii,iiii][iiii,iiii]\n+   *    \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n+   *    \u2502    bits containing array index into bigCounts array which contains the actual count\n+   *  1 marking that this is a big count\n+   * </pre>\n+   * <p>\n+   * so the bigCounts array is shared between all different types of counts, because big counts are so rare\n+   *\n+   * @param array  {@link ByteArray} to set count in\n+   * @param index  node id, i.e. array index\n+   * @param offset offset on that array index (a ByteArray feature)\n+   * @param count  count to set at this position\n+   */\n+  private void setCount(ByteArray array, long index, int offset, long count)\n+  {\n+    assertValidCount(index, count);\n+\n+    if (count > MAX_SMALL_COUNT)\n+    {\n+      int rawCount = array.getInt(index, offset);\n+      int slot;\n+      if (rawCount == -1 || !isBigCount(rawCount))\n+      {\n+        // Allocate a slot in the bigCounts array\n+        slot = bigCountsCursor.getAndIncrement();\n+        array.setInt(index, offset, BIG_COUNT_MASK | slot);\n+      } else\n+      {\n+        slot = countValue(rawCount);\n+      }\n+      bigCounts.set(slot, count);\n+    } else\n+    {   // We can simply set it\n+      array.setInt(index, offset, toIntExact(count));\n+    }\n+  }\n+\n+  private static void assertValidCount(long nodeId, long count)\n+  {\n+    if (count > MAX_COUNT)\n+    {\n+      // Meaning there are bits outside of this mask, meaning this value is too big\n+      throw new IllegalStateException(\"Tried to increment count of node id \" + nodeId + \" to \" + count +\n+          \", which is too big in one single import\");\n+    }\n+  }\n+\n+  private static boolean isBigCount(int storedCount)\n+  {\n+    return (storedCount & BIG_COUNT_MASK) != 0;\n+  }\n+\n+  /**\n+   * Called by the one calling {@link #incrementCount(long)} after all nodes have been added.\n+   * Done like this since currently it's just overhead trying to maintain a high id in the face\n+   * of current updates, whereas it's much simpler to do this from the code incrementing the counts.\n+   *\n+   * @param nodeCount high node id in the store, e.g. the highest node id + 1\n+   */\n+  public void setNodeCount(long nodeCount)\n+  {\n+    if (nodeCount - 1 > BigIdTracker.MAX_ID)\n+    {\n+      throw new IllegalArgumentException(format(\"Invalid number of nodes %d. Max is %d\", nodeCount, BigIdTracker.MAX_ID));\n+    }\n+\n+    this.highNodeId = nodeCount;\n+    this.array = arrayFactory.newByteArray(highNodeId, minusOneBytes(ID_AND_COUNT_SIZE));\n+    this.chunkChangedArray = new byte[chunkOf(nodeCount) + 1];\n+  }\n+\n+  public long getHighNodeId()\n+  {\n+    return this.highNodeId;\n+  }\n+\n+  /**\n+   * @see #setCount(ByteArray, long, int, long) setCount for description on how bigCounts work\n+   */\n+  private long getCount(ByteArray array, long index, int offset)\n+  {\n+    int rawCount = array.getInt(index, offset);\n+    int count = countValue(rawCount);\n+    if (count == COUNT_MASK)\n+    {\n+      // All bits 1, i.e. default initialized field\n+      return 0;\n+    }\n+\n+    if (isBigCount(rawCount))\n+    {\n+      // 'count' means index into bigCounts in this context\n+      return bigCounts.get(count);\n+    }\n+\n+    return count;\n+  }\n+\n+  private static int countValue(int rawCount)\n+  {\n+    return rawCount & COUNT_MASK;\n+  }\n+\n+  private long incrementCount(ByteArray array, long index, int offset)\n+  {\n+    array = array.at(index);\n+    long count = getCount(array, index, offset) + 1;\n+    setCount(array, index, offset, count);\n+    return count;\n+  }\n+\n+  /**\n+   * @param nodeId node to check whether dense or not.\n+   * @return whether or not the given {@code nodeId} is dense. A node is sparse if it has less relationships,\n+   * e.g. has had less calls to {@link #incrementCount(long)}, then the given dense node threshold.\n+   */\n+  public boolean isDense(long nodeId)\n+  {\n+    return isDense(array, nodeId);\n+  }\n+\n+  private boolean isDense(ByteArray array, long nodeId)\n+  {\n+    if (denseNodeThreshold == EMPTY)\n+    {   // We haven't initialized the rel group cache yet\n+      return false;\n+    }\n+\n+    return getCount(array, nodeId, SPARSE_COUNT_OFFSET) >= denseNodeThreshold;\n+  }\n+\n+  /**\n+   * Puts a relationship id to be the head of a relationship chain. If the node is sparse then\n+   * the head is set directly in the cache, else if dense which head to update will depend on\n+   * the {@code direction}.\n+   *\n+   * @param nodeId         node to update relationship head for.\n+   * @param typeId         relationship type id.\n+   * @param direction      {@link Direction} this node represents for this relationship.\n+   * @param firstRelId     the relationship id which is now the head of this chain.\n+   * @param incrementCount as side-effect also increment count for this chain.\n+   * @return the previous head of the updated relationship chain.\n+   */\n+  public long getAndPutRelationship(long nodeId, int typeId, Direction direction, long firstRelId,\n+                                    boolean incrementCount)\n+  {\n+    if (firstRelId > MAX_RELATIONSHIP_ID)\n+    {\n+      throw new IllegalArgumentException(\"Illegal relationship id, max is \" + MAX_RELATIONSHIP_ID);\n+    }\n+\n+    /*\n+     * OK so the story about counting goes: there's an initial pass for counting number of relationships\n+     * per node, globally, not per type/direction. After that the relationship group cache is initialized\n+     * and the relationship stage is executed where next pointers are constructed. That forward pass should\n+     * not increment the global count, but it should increment the type/direction counts.\n      */\n-    public long incrementCount( long nodeId )\n-    {\n-        return incrementCount( array, nodeId, SPARSE_COUNT_OFFSET );\n-    }\n-\n-    /**\n-     * Should only be used by tests\n-     */\n-    public void setCount( long nodeId, long count, int typeId, Direction direction )\n-    {\n-        if ( isDense( nodeId ) )\n-        {\n-            long relGroupId = all48Bits( array, nodeId, SPARSE_ID_OFFSET );\n-            relGroupCache.setCount( relGroupId, typeId, direction, count );\n-        }\n-        else\n-        {\n-            setCount( array, nodeId, SPARSE_COUNT_OFFSET, count );\n-        }\n-    }\n \n+    ByteArray array = this.array.at(nodeId);\n+    long existingId = all48Bits(array, nodeId, SPARSE_ID_OFFSET);\n+    boolean dense = isDense(array, nodeId);\n+    boolean wasChanged = markAsChanged(array, nodeId, changeMask(dense));\n+    markChunkAsChanged(nodeId, dense);\n+    if (dense)\n+    {\n+      if (existingId == EMPTY)\n+      {\n+        existingId = relGroupCache.allocate(typeId);\n+        setRelationshipId(array, nodeId, existingId);\n+      }\n+      return relGroupCache.getAndPutRelationship(existingId, typeId, direction, firstRelId, incrementCount);\n+    }\n+\n+    // Don't increment count for sparse node since that has already been done in a previous pass\n+    setRelationshipId(array, nodeId, firstRelId);\n+    return wasChanged ? EMPTY : existingId;\n+  }\n+\n+  private void markChunkAsChanged(long nodeId, boolean dense)\n+  {\n+    byte mask = chunkChangeMask(dense);\n+    if (!chunkHasChange(nodeId, mask))\n+    {\n+      int chunk = chunkOf(nodeId);\n+      if ((chunkChangedArray[chunk] & mask) == 0)\n+      {\n+        // Multiple threads may update this chunk array, synchronized performance-wise is fine on change since\n+        // it'll only happen at most a couple of times for each chunk (1M).\n+        synchronized (chunkChangedArray)\n+        {\n+          chunkChangedArray[chunk] |= mask;\n+        }\n+      }\n+    }\n+  }\n+\n+  long calculateNumberOfDenseNodes()\n+  {\n+    long count = 0;\n+    for (long i = 0; i < highNodeId; i++)\n+    {\n+      if (isDense(i))\n+      {\n+        count++;\n+      }\n+    }\n+    return count;\n+  }\n+\n+  private int chunkOf(long nodeId)\n+  {\n+    return toIntExact(nodeId / chunkSize);\n+  }\n+\n+  private static byte chunkChangeMask(boolean dense)\n+  {\n+    return (byte) (1 << (dense ? 1 : 0));\n+  }\n+\n+  private boolean markAsChanged(ByteArray array, long nodeId, int mask)\n+  {\n+    int bits = array.getInt(nodeId, SPARSE_COUNT_OFFSET);\n+    boolean changeBitIsSet = (bits & mask) != 0;\n+    boolean changeBitWasFlipped = changeBitIsSet != forward;\n+    if (changeBitWasFlipped)\n+    {\n+      bits ^= mask; // flip the mask bit\n+      array.setInt(nodeId, SPARSE_COUNT_OFFSET, bits);\n+    }\n+    return changeBitWasFlipped;\n+  }\n+\n+  private boolean nodeIsChanged(ByteArray array, long nodeId, long mask)\n+  {\n+    int bits = array.getInt(nodeId, SPARSE_COUNT_OFFSET);\n+\n+    // The values in the cache are initialized with -1, i.e. all bits set, i.e. also the\n+    // change bits set. For nodes that gets at least one call to incrementCount these will be\n+    // set properly to reflect the count, e.g. 1, 2, 3, a.s.o. Nodes that won't get any call\n+    // to incrementCount will not see any changes to them either, so for this matter we check\n+    // if the count field is -1 as a whole and if so we can tell we've just run into such a node\n+    // and we can safely say it hasn't been changed.\n+    if (bits == 0xFFFFFFFF)\n+    {\n+      return false;\n+    }\n+    boolean changeBitIsSet = (bits & mask) != 0;\n+    return changeBitIsSet == forward;\n+  }\n+\n+  private static void setRelationshipId(ByteArray array, long nodeId, long firstRelId)\n+  {\n+    array.set6ByteLong(nodeId, SPARSE_ID_OFFSET, firstRelId);\n+  }\n+\n+  private static long getRelationshipId(ByteArray array, long nodeId)\n+  {\n+    return array.get6ByteLong(nodeId, SPARSE_ID_OFFSET);\n+  }\n+\n+  private static long all48Bits(ByteArray array, long index, int offset)\n+  {\n+    return all48Bits(array.get6ByteLong(index, offset));\n+  }\n+\n+  private static long all48Bits(long raw)\n+  {\n+    return raw == -1L ? raw : raw & 0xFFFFFFFFFFFFL;\n+  }\n+\n+  /**\n+   * Used when setting node nextRel fields. Gets the first relationship for this node,\n+   * or the relationship group id. As a side effect this method also creates a relationship group\n+   * if this node is dense, and returns that relationship group record id.\n+   *\n+   * @param nodeId  id to get first relationship for.\n+   * @param visitor {@link GroupVisitor} which will be notified with data about group to be created.\n+   *                This visitor is expected to create the group.\n+   * @return the first relationship if node is sparse, or the result of {@link GroupVisitor} if dense.\n+   */\n+  public long getFirstRel(long nodeId, GroupVisitor visitor)\n+  {\n+    assert forward : \"This should only be done at forward scan\";\n+\n+    ByteArray array = this.array.at(nodeId);\n+    long id = getRelationshipId(array, nodeId);\n+    if (id != EMPTY && isDense(array, nodeId))\n+    {   // Indirection into rel group cache\n+      return relGroupCache.visitGroup(nodeId, id, visitor);\n+    }\n+\n+    return id;\n+  }\n+\n+  /**\n+   * First a note about tracking which nodes have been updated with new relationships by calls to\n+   * {@link #getAndPutRelationship(long, int, Direction, long, boolean)}:\n+   * <p>\n+   * We use two high bits of the count field in the \"main\" array to mark whether or not a change\n+   * have been made to a node. One bit for a sparse node and one for a dense. Sparse and dense nodes\n+   * now have different import cycles. When importing the relationships, all relationships are imported,\n+   * one type at a time, but only dense nodes and relationship chains for dense nodes are updated\n+   * for every type. After all types have been imported the sparse chains and nodes are updated in one pass.\n+   * <p>\n+   * Tells this cache which direction it's about to observe changes for. If {@code true} then changes\n+   * marked as the change-bit set and an unset change-bit means a change is the first one for that node.\n+   * {@code false} is the opposite. This is so that there won't need to be any clearing of the cache\n+   * in between forward and backward linking, since the cache can be rather large.\n+   *\n+   * @param forward    {@code true} if going forward and having change marked as a set bit, otherwise\n+   *                   change is marked with an unset bit.\n+   * @param denseNodes whether or not this is about dense nodes. If so then some additional cache\n+   *                   preparation work needs to be done.\n+   */\n+  public void setForwardScan(boolean forward, boolean denseNodes)\n+  {\n+    if (this.forward == forward)\n+    {\n+      return;\n+    }\n+\n+    // There's some additional preparations to do for dense nodes between each pass,\n+    // this is because that piece of memory is reused.\n+    if (denseNodes)\n+    {\n+      if (forward)\n+      {\n+        // Clear relationship group cache and references to it\n+        visitChangedNodes((nodeId, array) -> setRelationshipId(array, nodeId, EMPTY),\n+            NodeType.NODE_TYPE_DENSE);\n+        clearChangedChunks(true);\n+        relGroupCache.clear();\n+      } else\n+      {\n+        // Keep the relationship group cache entries, but clear all relationship chain heads\n+        relGroupCache.clearRelationshipIds();\n+      }\n+    }\n+    this.forward = forward;\n+  }\n+\n+  /**\n+   * Returns the count (degree) of the requested relationship chain. If node is sparse then the single count\n+   * for this node is returned, otherwise if the node is dense the count for the chain for the specific\n+   * direction is returned.\n+   * <p>\n+   * For dense nodes the count will be reset after returned here. This is so that the same memory area\n+   * can be used for the next type import.\n+   *\n+   * @param nodeId    node to get count for.\n+   * @param typeId    relationship type id to get count for.\n+   * @param direction {@link Direction} to get count for.\n+   * @return count (degree) of the requested relationship chain.\n+   */\n+  public long getCount(long nodeId, int typeId, Direction direction)\n+  {\n+    ByteArray array = this.array.at(nodeId);\n+    boolean dense = isDense(array, nodeId);\n+    if (dense)\n+    {   // Indirection into rel group cache\n+      long id = getRelationshipId(array, nodeId);\n+      return id == EMPTY ? 0 : relGroupCache.getAndResetCount(id, typeId, direction);\n+    }\n+\n+    return getCount(array, nodeId, SPARSE_COUNT_OFFSET);\n+  }\n+\n+  public interface GroupVisitor\n+  {\n     /**\n-     * This method sets count (node degree, really). It's somewhat generic in that it accepts\n-     * array and offset to set the count into. This is due to there being multiple places where\n-     * we store counts. Simplest one is for sparse nodes, which live in the main\n-     * NodeRelationshipCache.array at the dedicated offset. Other counts live in RelGroupCache.array\n-     * which contain three counts, one for each direction. That's covered by array and offset,\n-     * the count field works the same in all those scenarios. It's an integer which happens to have\n-     * some other flags at msb, so it's the 29 lsb bits which represents the count. 2^29 is merely\n-     * 1/2bn and so the count field has its 30th bit marking whether or not it's a \"big count\",\n-     * if it is then the 29 count bits instead point to an array index/slot into bigCounts array\n-     * which has much bigger space per count. This is of course quite rare, but nice to support.\n-     *\n-     * <pre>\n-     * \"small\" count, i.e. < 2^29\n-     * [  0c,cccc][cccc,cccc][cccc,cccc][cccc,cccc]\n-     *    \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-     *    \u2502       bits containing actual count\n-     *  0 marking that this is a small count\n-     *\n-     * \"big\" count, i.e. >= 2^29\n-     * [  1i,iiii][iiii,iiii][iiii,iiii][iiii,iiii]\n-     *    \u2502\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n-     *    \u2502    bits containing array index into bigCounts array which contains the actual count\n-     *  1 marking that this is a big count\n-     * </pre>\n-     *\n-     * so the bigCounts array is shared between all different types of counts, because big counts are so rare\n+     * Visits with data required to create a relationship group.\n+     * Type can be decided on the outside since there'll be only one type per node.\n      *\n-     * @param array {@link ByteArray} to set count in\n-     * @param index node id, i.e. array index\n-     * @param offset offset on that array index (a ByteArray feature)\n-     * @param count count to set at this position\n+     * @param nodeId node id.\n+     * @param typeId relationship type id.\n+     * @param out    first outgoing relationship id.\n+     * @param in     first incoming relationship id.\n+     * @param loop   first loop relationship id.\n+     * @return the created relationship group id.\n      */\n-    private void setCount( ByteArray array, long index, int offset, long count )\n-    {\n-        assertValidCount( index, count );\n+    long visit(long nodeId, int typeId, long out, long in, long loop);\n+  }\n \n-        if ( count > MAX_SMALL_COUNT )\n-        {\n-            int rawCount = array.getInt( index, offset );\n-            int slot;\n-            if ( rawCount == -1 || !isBigCount( rawCount ) )\n-            {\n-                // Allocate a slot in the bigCounts array\n-                slot = bigCountsCursor.getAndIncrement();\n-                array.setInt( index, offset, BIG_COUNT_MASK | slot );\n-            }\n-            else\n-            {\n-                slot = countValue( rawCount );\n-            }\n-            bigCounts.set( slot, count );\n-        }\n-        else\n-        {   // We can simply set it\n-            array.setInt( index, offset, toIntExact( count ) );\n-        }\n-    }\n+  public static final GroupVisitor NO_GROUP_VISITOR = (nodeId, typeId, out, in, loop) -> -1;\n \n-    private static void assertValidCount( long nodeId, long count )\n-    {\n-        if ( count > MAX_COUNT )\n-        {\n-            // Meaning there are bits outside of this mask, meaning this value is too big\n-            throw new IllegalStateException( \"Tried to increment count of node id \" + nodeId + \" to \" + count +\n-                    \", which is too big in one single import\" );\n-        }\n-    }\n+  private class RelGroupCache implements AutoCloseable, MemoryStatsVisitor.Visitable\n+  {\n+    private static final int TYPE_OFFSET = 0;\n+    private static final int NEXT_OFFSET = TYPE_SIZE;\n+    private static final int BASE_IDS_OFFSET = NEXT_OFFSET + ID_SIZE;\n \n-    private static boolean isBigCount( int storedCount )\n-    {\n-        return (storedCount & BIG_COUNT_MASK) != 0;\n-    }\n+    // Used for testing high id values. Should always be zero in production\n+    private final byte[] DEFAULT_VALUE = minusOneBytes(GROUP_ENTRY_SIZE);\n+    private final long chunkSize;\n+    private final long base;\n+    private final ByteArray array;\n+    private final AtomicLong nextFreeId;\n \n-    /**\n-     * Called by the one calling {@link #incrementCount(long)} after all nodes have been added.\n-     * Done like this since currently it's just overhead trying to maintain a high id in the face\n-     * of current updates, whereas it's much simpler to do this from the code incrementing the counts.\n-     *\n-     * @param nodeCount high node id in the store, e.g. the highest node id + 1\n-     */\n-    public void setNodeCount( long nodeCount )\n+    RelGroupCache(NumberArrayFactory arrayFactory, long chunkSize, long base)\n     {\n-        if ( nodeCount - 1 > BigIdTracker.MAX_ID )\n-        {\n-            throw new IllegalArgumentException( format( \"Invalid number of nodes %d. Max is %d\", nodeCount, BigIdTracker.MAX_ID ) );\n-        }\n-\n-        this.highNodeId = nodeCount;\n-        this.array = arrayFactory.newByteArray( highNodeId, minusOneBytes( ID_AND_COUNT_SIZE ) );\n-        this.chunkChangedArray = new byte[chunkOf( nodeCount ) + 1];\n+      this.chunkSize = chunkSize;\n+      this.base = base;\n+      assert chunkSize > 0;\n+      this.array = arrayFactory.newDynamicByteArray(chunkSize, DEFAULT_VALUE);\n+      this.nextFreeId = new AtomicLong(base);\n     }\n \n-    public long getHighNodeId()\n+    private void clearIndex(ByteArray array, long relGroupId)\n     {\n-        return this.highNodeId;\n+      array.set(relGroupId, DEFAULT_VALUE);\n     }\n \n-    /**\n-     * @see #setCount(ByteArray, long, int, long) setCount for description on how bigCounts work\n-     */\n-    private long getCount( ByteArray array, long index, int offset )\n+    long getAndResetCount(long relGroupIndex, int typeId, Direction direction)\n     {\n-        int rawCount = array.getInt( index, offset );\n-        int count = countValue( rawCount );\n-        if ( count == COUNT_MASK )\n-        {\n-            // All bits 1, i.e. default initialized field\n-            return 0;\n-        }\n-\n-        if ( isBigCount( rawCount ) )\n+      long index = rebase(relGroupIndex);\n+      while (index != EMPTY)\n+      {\n+        ByteArray array = this.array.at(index);\n+        if (getTypeId(array, index) == typeId)\n         {\n-            // 'count' means index into bigCounts in this context\n-            return bigCounts.get( count );\n+          int offset = countOffset(direction);\n+          long count = NodeRelationshipCache.this.getCount(array, index, offset);\n+          NodeRelationshipCache.this.setCount(array, index, offset, 0);\n+          return count;\n         }\n-\n-        return count;\n-    }\n-\n-    private static int countValue( int rawCount )\n-    {\n-        return rawCount & COUNT_MASK;\n+        index = getNext(array, index);\n+      }\n+      return 0;\n     }\n \n-    private long incrementCount( ByteArray array, long index, int offset )\n+    void setCount(long relGroupIndex, int typeId, Direction direction, long count)\n     {\n-        array = array.at( index );\n-        long count = getCount( array, index, offset ) + 1;\n-        setCount( array, index, offset, count );\n-        return count;\n-    }\n-\n-    /**\n-     * @param nodeId node to check whether dense or not.\n-     * @return whether or not the given {@code nodeId} is dense. A node is sparse if it has less relationships,\n-     * e.g. has had less calls to {@link #incrementCount(long)}, then the given dense node threshold.\n-     */\n-    public boolean isDense( long nodeId )\n-    {\n-        return isDense( array, nodeId );\n-    }\n-\n-    private boolean isDense( ByteArray array, long nodeId )\n-    {\n-        if ( denseNodeThreshold == EMPTY )\n-        {   // We haven't initialized the rel group cache yet\n-            return false;\n-        }\n-\n-        return getCount( array, nodeId, SPARSE_COUNT_OFFSET ) >= denseNodeThreshold;\n-    }\n-\n-    /**\n-     * Puts a relationship id to be the head of a relationship chain. If the node is sparse then\n-     * the head is set directly in the cache, else if dense which head to update will depend on\n-     * the {@code direction}.\n-     *\n-     * @param nodeId node to update relationship head for.\n-     * @param typeId relationship type id.\n-     * @param direction {@link Direction} this node represents for this relationship.\n-     * @param firstRelId the relationship id which is now the head of this chain.\n-     * @param incrementCount as side-effect also increment count for this chain.\n-     * @return the previous head of the updated relationship chain.\n-     */\n-    public long getAndPutRelationship( long nodeId, int typeId, Direction direction, long firstRelId,\n-            boolean incrementCount )\n-    {\n-        if ( firstRelId > MAX_RELATIONSHIP_ID )\n+      long index = rebase(relGroupIndex);\n+      while (index != EMPTY)\n+      {\n+        ByteArray array = this.array.at(index);\n+        if (getTypeId(array, index) == typeId)\n         {\n-            throw new IllegalArgumentException( \"Illegal relationship id, max is \" + MAX_RELATIONSHIP_ID );\n-        }\n-\n-        /*\n-         * OK so the story about counting goes: there's an initial pass for counting number of relationships\n-         * per node, globally, not per type/direction. After that the relationship group cache is initialized\n-         * and the relationship stage is executed where next pointers are constructed. That forward pass should\n-         * not increment the global count, but it should increment the type/direction counts.\n-         */\n-\n-        ByteArray array = this.array.at( nodeId );\n-        long existingId = all48Bits( array, nodeId, SPARSE_ID_OFFSET );\n-        boolean dense = isDense( array, nodeId );\n-        boolean wasChanged = markAsChanged( array, nodeId, changeMask( dense ) );\n-        markChunkAsChanged( nodeId, dense );\n-        if ( dense )\n-        {\n-            if ( existingId == EMPTY )\n-            {\n-                existingId = relGroupCache.allocate( typeId );\n-                setRelationshipId( array, nodeId, existingId );\n-            }\n-            return relGroupCache.getAndPutRelationship( existingId, typeId, direction, firstRelId, incrementCount );\n-        }\n-\n-        // Don't increment count for sparse node since that has already been done in a previous pass\n-        setRelationshipId( array, nodeId, firstRelId );\n-        return wasChanged ? EMPTY : existingId;\n-    }\n-\n-    private void markChunkAsChanged( long nodeId, boolean dense )\n-    {\n-        byte mask = chunkChangeMask( dense );\n-        if ( !chunkHasChange( nodeId, mask ) )\n-        {\n-            int chunk = chunkOf( nodeId );\n-            if ( (chunkChangedArray[chunk] & mask) == 0 )\n-            {\n-                // Multiple threads may update this chunk array, synchronized performance-wise is fine on change since\n-                // it'll only happen at most a couple of times for each chunk (1M).\n-                synchronized ( chunkChangedArray )\n-                {\n-                    chunkChangedArray[chunk] |= mask;\n-                }\n-            }\n+          NodeRelationshipCache.this.setCount(array, index, countOffset(direction), count);\n+          break;\n         }\n+        index = getNext(array, index);\n+      }\n     }\n \n-    long calculateNumberOfDenseNodes()\n+    long getNext(ByteArray array, long index)\n     {\n-        long count = 0;\n-        for ( long i = 0; i < highNodeId; i++ )\n-        {\n-            if ( isDense( i ) )\n-            {\n-                count++;\n-            }\n-        }\n-        return count;\n+      return all48Bits(array, index, NEXT_OFFSET);\n     }\n \n-    private int chunkOf( long nodeId )\n+    int getTypeId(ByteArray array, long index)\n     {\n-        return toIntExact( nodeId / chunkSize );\n+      return unsignedShortToInt(array.getShort(index, TYPE_OFFSET));\n     }\n \n-    private static byte chunkChangeMask( boolean dense )\n+    /**\n+     * Compensate for test value of index (to avoid allocating all your RAM)\n+     */\n+    private long rebase(long index)\n     {\n-        return (byte) (1 << (dense ? 1 : 0));\n+      return index - base;\n     }\n \n-    private boolean markAsChanged( ByteArray array, long nodeId, int mask )\n+    private long nextFreeId()\n     {\n-        int bits = array.getInt( nodeId, SPARSE_COUNT_OFFSET );\n-        boolean changeBitIsSet = (bits & mask) != 0;\n-        boolean changeBitWasFlipped = changeBitIsSet != forward;\n-        if ( changeBitWasFlipped )\n-        {\n-            bits ^= mask; // flip the mask bit\n-            array.setInt( nodeId, SPARSE_COUNT_OFFSET, bits );\n-        }\n-        return changeBitWasFlipped;\n+      return nextFreeId.getAndIncrement();\n     }\n \n-    private boolean nodeIsChanged( ByteArray array, long nodeId, long mask )\n+    private long visitGroup(long nodeId, long relGroupIndex, GroupVisitor visitor)\n     {\n-        int bits = array.getInt( nodeId, SPARSE_COUNT_OFFSET );\n-\n-        // The values in the cache are initialized with -1, i.e. all bits set, i.e. also the\n-        // change bits set. For nodes that gets at least one call to incrementCount these will be\n-        // set properly to reflect the count, e.g. 1, 2, 3, a.s.o. Nodes that won't get any call\n-        // to incrementCount will not see any changes to them either, so for this matter we check\n-        // if the count field is -1 as a whole and if so we can tell we've just run into such a node\n-        // and we can safely say it hasn't been changed.\n-        if ( bits == 0xFFFFFFFF )\n-        {\n-            return false;\n+      long currentIndex = rebase(relGroupIndex);\n+      long first = EMPTY;\n+      while (currentIndex != EMPTY)\n+      {\n+        ByteArray array = this.array.at(currentIndex);\n+        long out = all48Bits(array, currentIndex, idOffset(Direction.OUTGOING));\n+        int typeId = getTypeId(array, currentIndex);\n+        long in = all48Bits(array, currentIndex, idOffset(Direction.INCOMING));\n+        long loop = all48Bits(array, currentIndex, idOffset(Direction.BOTH));\n+        long next = getNext(array, currentIndex);\n+        long nextId = out == EMPTY && in == EMPTY && loop == EMPTY\n+            ? EMPTY\n+            : visitor.visit(nodeId, typeId, out, in, loop);\n+        if (first == EMPTY)\n+        {   // This is the one we return\n+          first = nextId;\n         }\n-        boolean changeBitIsSet = (bits & mask) != 0;\n-        return changeBitIsSet == forward;\n+        currentIndex = next;\n+      }\n+      return first;\n     }\n \n-    private static void setRelationshipId( ByteArray array, long nodeId, long firstRelId )\n+    private int idOffset(Direction direction)\n     {\n-        array.set6ByteLong( nodeId, SPARSE_ID_OFFSET, firstRelId );\n+      return BASE_IDS_OFFSET + (direction.ordinal() * ID_AND_COUNT_SIZE);\n     }\n \n-    private static long getRelationshipId( ByteArray array, long nodeId )\n+    private int countOffset(Direction direction)\n     {\n-        return array.get6ByteLong( nodeId, SPARSE_ID_OFFSET );\n+      return idOffset(direction) + ID_SIZE;\n     }\n \n-    private static long all48Bits( ByteArray array, long index, int offset )\n+    long allocate(int typeId)\n     {\n-        return all48Bits( array.get6ByteLong( index, offset ) );\n+      long index = nextFreeId();\n+      long rebasedIndex = rebase(index);\n+      ByteArray array = this.array.at(rebasedIndex);\n+      clearIndex(array, rebasedIndex);\n+      short shortTypeId = safeCastIntToUnsignedShort(typeId);\n+      array.setShort(rebasedIndex, TYPE_OFFSET, shortTypeId);\n+      return index;\n     }\n \n-    private static long all48Bits( long raw )\n+    private long getAndPutRelationship(long relGroupIndex, int typeId, Direction direction,\n+                                       long relId, boolean incrementCount)\n     {\n-        return raw == -1L ? raw : raw & 0xFFFFFFFFFFFFL;\n+      long index = rebase(relGroupIndex);\n+      index = findOrAllocateIndex(index, typeId);\n+      ByteArray array = this.array.at(index);\n+      int directionOffset = idOffset(direction);\n+      long previousId = all48Bits(array, index, directionOffset);\n+      array.set6ByteLong(index, directionOffset, relId);\n+      if (incrementCount)\n+      {\n+        incrementCount(array, index, countOffset(direction));\n+      }\n+      return previousId;\n     }\n \n-    /**\n-     * Used when setting node nextRel fields. Gets the first relationship for this node,\n-     * or the relationship group id. As a side effect this method also creates a relationship group\n-     * if this node is dense, and returns that relationship group record id.\n-     *\n-     * @param nodeId id to get first relationship for.\n-     * @param visitor {@link GroupVisitor} which will be notified with data about group to be created.\n-     * This visitor is expected to create the group.\n-     * @return the first relationship if node is sparse, or the result of {@link GroupVisitor} if dense.\n-     */\n-    public long getFirstRel( long nodeId, GroupVisitor visitor )\n+    private void clearRelationshipIds(ByteArray array, long index)\n     {\n-        assert forward : \"This should only be done at forward scan\";\n-\n-        ByteArray array = this.array.at( nodeId );\n-        long id = getRelationshipId( array, nodeId );\n-        if ( id != EMPTY && isDense( array, nodeId ) )\n-        {   // Indirection into rel group cache\n-            return relGroupCache.visitGroup( nodeId, id, visitor );\n-        }\n-\n-        return id;\n+      array.set6ByteLong(index, idOffset(Direction.OUTGOING), EMPTY);\n+      array.set6ByteLong(index, idOffset(Direction.INCOMING), EMPTY);\n+      array.set6ByteLong(index, idOffset(Direction.BOTH), EMPTY);\n     }\n \n-    /**\n-     * First a note about tracking which nodes have been updated with new relationships by calls to\n-     * {@link #getAndPutRelationship(long, int, Direction, long, boolean)}:\n-     *\n-     * We use two high bits of the count field in the \"main\" array to mark whether or not a change\n-     * have been made to a node. One bit for a sparse node and one for a dense. Sparse and dense nodes\n-     * now have different import cycles. When importing the relationships, all relationships are imported,\n-     * one type at a time, but only dense nodes and relationship chains for dense nodes are updated\n-     * for every type. After all types have been imported the sparse chains and nodes are updated in one pass.\n-     *\n-     * Tells this cache which direction it's about to observe changes for. If {@code true} then changes\n-     * marked as the change-bit set and an unset change-bit means a change is the first one for that node.\n-     * {@code false} is the opposite. This is so that there won't need to be any clearing of the cache\n-     * in between forward and backward linking, since the cache can be rather large.\n-     *\n-     * @param forward {@code true} if going forward and having change marked as a set bit, otherwise\n-     * change is marked with an unset bit.\n-     * @param denseNodes whether or not this is about dense nodes. If so then some additional cache\n-     * preparation work needs to be done.\n-     */\n-    public void setForwardScan( boolean forward, boolean denseNodes )\n+    private long findOrAllocateIndex(long index, int typeId)\n     {\n-        if ( this.forward == forward )\n+      long lastIndex = index;\n+      ByteArray array = this.array.at(index);\n+      while (index != EMPTY)\n+      {\n+        lastIndex = index;\n+        array = this.array.at(index);\n+        int candidateTypeId = getTypeId(array, index);\n+        if (candidateTypeId == typeId)\n         {\n-            return;\n+          return index;\n         }\n+        index = getNext(array, index);\n+      }\n \n-        // There's some additional preparations to do for dense nodes between each pass,\n-        // this is because that piece of memory is reused.\n-        if ( denseNodes )\n-        {\n-            if ( forward )\n-            {\n-                // Clear relationship group cache and references to it\n-                visitChangedNodes( ( nodeId, array ) -> setRelationshipId( array, nodeId, EMPTY ),\n-                        NodeType.NODE_TYPE_DENSE );\n-                clearChangedChunks( true );\n-                relGroupCache.clear();\n-            }\n-            else\n-            {\n-                // Keep the relationship group cache entries, but clear all relationship chain heads\n-                relGroupCache.clearRelationshipIds();\n-            }\n-        }\n-        this.forward = forward;\n-    }\n-\n-    /**\n-     * Returns the count (degree) of the requested relationship chain. If node is sparse then the single count\n-     * for this node is returned, otherwise if the node is dense the count for the chain for the specific\n-     * direction is returned.\n-     *\n-     * For dense nodes the count will be reset after returned here. This is so that the same memory area\n-     * can be used for the next type import.\n-     *\n-     * @param nodeId node to get count for.\n-     * @param typeId relationship type id to get count for.\n-     * @param direction {@link Direction} to get count for.\n-     * @return count (degree) of the requested relationship chain.\n-     */\n-    public long getCount( long nodeId, int typeId, Direction direction )\n-    {\n-        ByteArray array = this.array.at( nodeId );\n-        boolean dense = isDense( array, nodeId );\n-        if ( dense )\n-        {   // Indirection into rel group cache\n-            long id = getRelationshipId( array, nodeId );\n-            return id == EMPTY ? 0 : relGroupCache.getAndResetCount( id, typeId, direction );\n-        }\n-\n-        return getCount( array, nodeId, SPARSE_COUNT_OFFSET );\n-    }\n-\n-    public interface GroupVisitor\n-    {\n-        /**\n-         * Visits with data required to create a relationship group.\n-         * Type can be decided on the outside since there'll be only one type per node.\n-         *\n-         * @param nodeId node id.\n-         * @param typeId relationship type id.\n-         * @param out first outgoing relationship id.\n-         * @param in first incoming relationship id.\n-         * @param loop first loop relationship id.\n-         * @return the created relationship group id.\n-         */\n-        long visit( long nodeId, int typeId, long out, long in, long loop );\n-    }\n-\n-    public static final GroupVisitor NO_GROUP_VISITOR = ( nodeId, typeId, out, in, loop ) -> -1;\n-\n-    private class RelGroupCache implements AutoCloseable, MemoryStatsVisitor.Visitable\n-    {\n-        private static final int TYPE_OFFSET = 0;\n-        private static final int NEXT_OFFSET = TYPE_SIZE;\n-        private static final int BASE_IDS_OFFSET = NEXT_OFFSET + ID_SIZE;\n-\n-        // Used for testing high id values. Should always be zero in production\n-        private final byte[] DEFAULT_VALUE = minusOneBytes( GROUP_ENTRY_SIZE );\n-        private final long chunkSize;\n-        private final long base;\n-        private final ByteArray array;\n-        private final AtomicLong nextFreeId;\n-\n-        RelGroupCache( NumberArrayFactory arrayFactory, long chunkSize, long base )\n-        {\n-            this.chunkSize = chunkSize;\n-            this.base = base;\n-            assert chunkSize > 0;\n-            this.array = arrayFactory.newDynamicByteArray( chunkSize, DEFAULT_VALUE );\n-            this.nextFreeId = new AtomicLong( base );\n-        }\n-\n-        private void clearIndex( ByteArray array, long relGroupId )\n-        {\n-            array.set( relGroupId, DEFAULT_VALUE );\n-        }\n-\n-        long getAndResetCount( long relGroupIndex, int typeId, Direction direction )\n-        {\n-            long index = rebase( relGroupIndex );\n-            while ( index != EMPTY )\n-            {\n-                ByteArray array = this.array.at( index );\n-                if ( getTypeId( array, index ) == typeId )\n-                {\n-                    int offset = countOffset( direction );\n-                    long count = NodeRelationshipCache.this.getCount( array, index, offset );\n-                    NodeRelationshipCache.this.setCount( array, index, offset, 0 );\n-                    return count;\n-                }\n-                index = getNext( array, index );\n-            }\n-            return 0;\n-        }\n-\n-        void setCount( long relGroupIndex, int typeId, Direction direction, long count )\n-        {\n-            long index = rebase( relGroupIndex );\n-            while ( index != EMPTY )\n-            {\n-                ByteArray array = this.array.at( index );\n-                if ( getTypeId( array, index ) == typeId )\n-                {\n-                    NodeRelationshipCache.this.setCount( array, index, countOffset( direction ), count );\n-                    break;\n-                }\n-                index = getNext( array, index );\n-            }\n-        }\n-\n-        long getNext( ByteArray array, long index )\n-        {\n-            return all48Bits( array, index, NEXT_OFFSET );\n-        }\n-\n-        int getTypeId( ByteArray array, long index )\n-        {\n-            return unsignedShortToInt( array.getShort( index, TYPE_OFFSET ) );\n-        }\n-\n-        /**\n-         * Compensate for test value of index (to avoid allocating all your RAM)\n-         */\n-        private long rebase( long index )\n-        {\n-            return index - base;\n-        }\n-\n-        private long nextFreeId()\n-        {\n-            return nextFreeId.getAndIncrement();\n-        }\n-\n-        private long visitGroup( long nodeId, long relGroupIndex, GroupVisitor visitor )\n-        {\n-            long currentIndex = rebase( relGroupIndex );\n-            long first = EMPTY;\n-            while ( currentIndex != EMPTY )\n-            {\n-                ByteArray array = this.array.at( currentIndex );\n-                long out = all48Bits( array, currentIndex, idOffset( Direction.OUTGOING ) );\n-                int typeId = getTypeId( array, currentIndex );\n-                long in = all48Bits( array, currentIndex, idOffset( Direction.INCOMING ) );\n-                long loop = all48Bits( array, currentIndex, idOffset( Direction.BOTH ) );\n-                long next = getNext( array, currentIndex );\n-                long nextId = out == EMPTY && in == EMPTY && loop == EMPTY\n-                        ? EMPTY\n-                        : visitor.visit( nodeId, typeId, out, in, loop );\n-                if ( first == EMPTY )\n-                {   // This is the one we return\n-                    first = nextId;\n-                }\n-                currentIndex = next;\n-            }\n-            return first;\n-        }\n-\n-        private int idOffset( Direction direction )\n-        {\n-            return BASE_IDS_OFFSET + (direction.ordinal() * ID_AND_COUNT_SIZE);\n-        }\n-\n-        private int countOffset( Direction direction )\n-        {\n-            return idOffset( direction ) + ID_SIZE;\n-        }\n-\n-        long allocate( int typeId )\n-        {\n-            long index = nextFreeId();\n-            long rebasedIndex = rebase( index );\n-            ByteArray array = this.array.at( rebasedIndex );\n-            clearIndex( array, rebasedIndex );\n-            short shortTypeId = safeCastIntToUnsignedShort( typeId );\n-            array.setShort( rebasedIndex, TYPE_OFFSET, shortTypeId );\n-            return index;\n-        }\n-\n-        private long getAndPutRelationship( long relGroupIndex, int typeId, Direction direction,\n-                long relId, boolean incrementCount )\n-        {\n-            long index = rebase( relGroupIndex );\n-            index = findOrAllocateIndex( index, typeId );\n-            ByteArray array = this.array.at( index );\n-            int directionOffset = idOffset( direction );\n-            long previousId = all48Bits( array, index, directionOffset );\n-            array.set6ByteLong( index, directionOffset, relId );\n-            if ( incrementCount )\n-            {\n-                incrementCount( array, index, countOffset( direction ) );\n-            }\n-            return previousId;\n-        }\n-\n-        private void clearRelationshipIds( ByteArray array, long index )\n-        {\n-            array.set6ByteLong( index, idOffset( Direction.OUTGOING ), EMPTY );\n-            array.set6ByteLong( index, idOffset( Direction.INCOMING ), EMPTY );\n-            array.set6ByteLong( index, idOffset( Direction.BOTH ), EMPTY );\n-        }\n-\n-        private long findOrAllocateIndex( long index, int typeId )\n-        {\n-            long lastIndex = index;\n-            ByteArray array = this.array.at( index );\n-            while ( index != EMPTY )\n-            {\n-                lastIndex = index;\n-                array = this.array.at( index );\n-                int candidateTypeId = getTypeId( array, index );\n-                if ( candidateTypeId == typeId )\n-                {\n-                    return index;\n-                }\n-                index = getNext( array, index );\n-            }\n-\n-            // No such found, create at the end\n-            long newIndex = allocate( typeId );\n-            array.set6ByteLong( lastIndex, NEXT_OFFSET, newIndex );\n-            return newIndex;\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            if ( array != null )\n-            {\n-                array.close();\n-            }\n-        }\n-\n-        @Override\n-        public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-        {\n-            nullSafeMemoryStatsVisitor( array, visitor );\n-        }\n-\n-        public void clear()\n-        {\n-            nextFreeId.set( base );\n-        }\n-\n-        public void clearRelationshipIds()\n-        {\n-            long highId = rebase( nextFreeId.get() );\n-            for ( long i = 0; i < highId; )\n-            {\n-                ByteArray chunk = array.at( i );\n-                for ( int j = 0; j < chunkSize && i < highId; j++, i++ )\n-                {\n-                    clearRelationshipIds( chunk, i );\n-                }\n-            }\n-        }\n+      // No such found, create at the end\n+      long newIndex = allocate(typeId);\n+      array.set6ByteLong(lastIndex, NEXT_OFFSET, newIndex);\n+      return newIndex;\n     }\n \n     @Override\n-    public String toString()\n-    {\n-        return array.toString();\n-    }\n-\n     public void close()\n     {\n-        if ( array != null )\n-        {\n-            array.close();\n-        }\n-        if ( relGroupCache != null )\n-        {\n-            relGroupCache.close();\n-        }\n+      if (array != null)\n+      {\n+        array.close();\n+      }\n     }\n \n     @Override\n-    public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-    {\n-        nullSafeMemoryStatsVisitor( array, visitor );\n-        relGroupCache.acceptMemoryStatsVisitor( visitor );\n-    }\n-\n-    static void nullSafeMemoryStatsVisitor( MemoryStatsVisitor.Visitable visitable, MemoryStatsVisitor visitor )\n+    public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n     {\n-        if ( visitable != null )\n-        {\n-            visitable.acceptMemoryStatsVisitor( visitor );\n-        }\n+      nullSafeMemoryStatsVisitor(array, visitor);\n     }\n \n-    private static int changeMask( boolean dense )\n+    public void clear()\n     {\n-        return dense ? DENSE_NODE_CHANGED_MASK : SPARSE_NODE_CHANGED_MASK;\n+      nextFreeId.set(base);\n     }\n \n-    @FunctionalInterface\n-    public interface NodeChangeVisitor\n+    public void clearRelationshipIds()\n     {\n-        void change( long nodeId, ByteArray array );\n-    }\n-\n-    /**\n-     * Efficiently visits changed nodes, e.g. nodes that have had any relationship chain updated by\n-     * {@link #getAndPutRelationship(long, int, Direction, long, boolean)}.\n-     *\n-     * @param visitor {@link NodeChangeVisitor} which will be notified about all changes.\n-     * @param nodeTypes which types to visit (dense/sparse).\n-     */\n-    public void visitChangedNodes( NodeChangeVisitor visitor, int nodeTypes )\n-    {\n-        long denseMask = changeMask( true );\n-        long sparseMask = changeMask( false );\n-        byte denseChunkMask = chunkChangeMask( true );\n-        byte sparseChunkMask = chunkChangeMask( false );\n-        for ( long nodeId = 0; nodeId < highNodeId; )\n+      long highId = rebase(nextFreeId.get());\n+      for (long i = 0; i < highId; )\n+      {\n+        ByteArray chunk = array.at(i);\n+        for (int j = 0; j < chunkSize && i < highId; j++, i++)\n         {\n-            boolean chunkHasChanged =\n-                    (NodeType.isDense( nodeTypes ) && chunkHasChange( nodeId, denseChunkMask )) ||\n-                    (NodeType.isSparse( nodeTypes ) && chunkHasChange( nodeId, sparseChunkMask ));\n-            if ( !chunkHasChanged )\n-            {\n-                nodeId += chunkSize;\n-                continue;\n-            }\n-\n-            ByteArray subArray = array.at( nodeId );\n-            long subArrayLength = subArray.length();\n-            for ( int i = 0; i < subArrayLength && nodeId < highNodeId; i++, nodeId++ )\n-            {\n-                boolean nodeHasChanged =\n-                        (NodeType.isDense( nodeTypes ) && nodeIsChanged( subArray, nodeId, denseMask )) ||\n-                        (NodeType.isSparse( nodeTypes ) && nodeIsChanged( subArray, nodeId, sparseMask ));\n-\n-                if ( nodeHasChanged && NodeType.matchesDense( nodeTypes, isDense( array, nodeId ) ) )\n-                {\n-                    visitor.change( nodeId, subArray );\n-                }\n-            }\n+          clearRelationshipIds(chunk, i);\n         }\n+      }\n     }\n+  }\n \n-    /**\n-     * Clears the high-level change marks.\n-     *\n-     * @param denseNodes {@code true} for clearing marked dense nodes, {@code false} for clearing marked sparse nodes.\n-     */\n-    private void clearChangedChunks( boolean denseNodes )\n-    {\n-        // Executed by a single thread, so no synchronized required\n-        byte chunkMask = chunkChangeMask( denseNodes );\n-        for ( int i = 0; i < chunkChangedArray.length; i++ )\n-        {\n-            chunkChangedArray[i] &= ~chunkMask;\n-        }\n-    }\n-\n-    private boolean chunkHasChange( long nodeId, byte chunkMask )\n-    {\n-        int chunkId = chunkOf( nodeId );\n-        return (chunkChangedArray[chunkId] & chunkMask) != 0;\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return array.toString();\n+  }\n \n-    public long calculateMaxMemoryUsage( long numberOfRelationships )\n+  public void close()\n+  {\n+    if (array != null)\n     {\n-        return calculateMaxMemoryUsage( numberOfDenseNodes, numberOfRelationships );\n+      array.close();\n     }\n-\n-    public static long calculateMaxMemoryUsage( long numberOfDenseNodes, long numberOfRelationships )\n+    if (relGroupCache != null)\n     {\n-        long maxDenseNodesForThisType = min( numberOfDenseNodes, numberOfRelationships * 2/*nodes/rel*/ );\n-        return maxDenseNodesForThisType * NodeRelationshipCache.GROUP_ENTRY_SIZE;\n+      relGroupCache.close();\n     }\n+  }\n \n-    public void countingCompleted()\n-    {\n-        numberOfDenseNodes = calculateNumberOfDenseNodes();\n-    }\n+  @Override\n+  public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+  {\n+    nullSafeMemoryStatsVisitor(array, visitor);\n+    relGroupCache.acceptMemoryStatsVisitor(visitor);\n+  }\n \n-    public long getNumberOfDenseNodes()\n+  static void nullSafeMemoryStatsVisitor(MemoryStatsVisitor.Visitable visitable, MemoryStatsVisitor visitor)\n+  {\n+    if (visitable != null)\n     {\n-        return numberOfDenseNodes;\n+      visitable.acceptMemoryStatsVisitor(visitor);\n     }\n+  }\n \n-    public MemoryStatsVisitor.Visitable memoryEstimation( long numberOfNodes )\n-    {\n-        return new MemoryStatsVisitor.Visitable()\n-        {\n-            @Override\n-            public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-            {\n-                visitor.offHeapUsage( ID_AND_COUNT_SIZE * numberOfNodes );\n-            }\n-        };\n-    }\n+  private static int changeMask(boolean dense)\n+  {\n+    return dense ? DENSE_NODE_CHANGED_MASK : SPARSE_NODE_CHANGED_MASK;\n+  }\n+\n+  @FunctionalInterface\n+  public interface NodeChangeVisitor\n+  {\n+    void change(long nodeId, ByteArray array);\n+  }\n+\n+  /**\n+   * Efficiently visits changed nodes, e.g. nodes that have had any relationship chain updated by\n+   * {@link #getAndPutRelationship(long, int, Direction, long, boolean)}.\n+   *\n+   * @param visitor   {@link NodeChangeVisitor} which will be notified about all changes.\n+   * @param nodeTypes which types to visit (dense/sparse).\n+   */\n+  public void visitChangedNodes(NodeChangeVisitor visitor, int nodeTypes)\n+  {\n+    long denseMask = changeMask(true);\n+    long sparseMask = changeMask(false);\n+    byte denseChunkMask = chunkChangeMask(true);\n+    byte sparseChunkMask = chunkChangeMask(false);\n+    for (long nodeId = 0; nodeId < highNodeId; )\n+    {\n+      boolean chunkHasChanged =\n+          (NodeType.isDense(nodeTypes) && chunkHasChange(nodeId, denseChunkMask)) ||\n+              (NodeType.isSparse(nodeTypes) && chunkHasChange(nodeId, sparseChunkMask));\n+      if (!chunkHasChanged)\n+      {\n+        nodeId += chunkSize;\n+        continue;\n+      }\n+\n+      ByteArray subArray = array.at(nodeId);\n+      long subArrayLength = subArray.length();\n+      for (int i = 0; i < subArrayLength && nodeId < highNodeId; i++, nodeId++)\n+      {\n+        boolean nodeHasChanged =\n+            (NodeType.isDense(nodeTypes) && nodeIsChanged(subArray, nodeId, denseMask)) ||\n+                (NodeType.isSparse(nodeTypes) && nodeIsChanged(subArray, nodeId, sparseMask));\n+\n+        if (nodeHasChanged && NodeType.matchesDense(nodeTypes, isDense(array, nodeId)))\n+        {\n+          visitor.change(nodeId, subArray);\n+        }\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Clears the high-level change marks.\n+   *\n+   * @param denseNodes {@code true} for clearing marked dense nodes, {@code false} for clearing marked sparse nodes.\n+   */\n+  private void clearChangedChunks(boolean denseNodes)\n+  {\n+    // Executed by a single thread, so no synchronized required\n+    byte chunkMask = chunkChangeMask(denseNodes);\n+    for (int i = 0; i < chunkChangedArray.length; i++)\n+    {\n+      chunkChangedArray[i] &= ~chunkMask;\n+    }\n+  }\n+\n+  private boolean chunkHasChange(long nodeId, byte chunkMask)\n+  {\n+    int chunkId = chunkOf(nodeId);\n+    return (chunkChangedArray[chunkId] & chunkMask) != 0;\n+  }\n+\n+  public long calculateMaxMemoryUsage(long numberOfRelationships)\n+  {\n+    return calculateMaxMemoryUsage(numberOfDenseNodes, numberOfRelationships);\n+  }\n+\n+  public static long calculateMaxMemoryUsage(long numberOfDenseNodes, long numberOfRelationships)\n+  {\n+    long maxDenseNodesForThisType = min(numberOfDenseNodes, numberOfRelationships * 2/*nodes/rel*/);\n+    return maxDenseNodesForThisType * NodeRelationshipCache.GROUP_ENTRY_SIZE;\n+  }\n+\n+  public void countingCompleted()\n+  {\n+    numberOfDenseNodes = calculateNumberOfDenseNodes();\n+  }\n+\n+  public long getNumberOfDenseNodes()\n+  {\n+    return numberOfDenseNodes;\n+  }\n+\n+  public MemoryStatsVisitor.Visitable memoryEstimation(long numberOfNodes)\n+  {\n+    return new MemoryStatsVisitor.Visitable()\n+    {\n+      @Override\n+      public void acceptMemoryStatsVisitor(MemoryStatsVisitor visitor)\n+      {\n+        visitor.offHeapUsage(ID_AND_COUNT_SIZE * numberOfNodes);\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 1311
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "57",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "65",
                    "column": "57",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "68",
                    "column": "43",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "68",
                    "column": "43",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "39",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "71",
                    "column": "39",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "73",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "84",
                    "column": "99",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "88",
                    "column": "95",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "195",
                    "column": "33",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "199",
                    "column": "60",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "219",
                    "column": "93",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "225",
                    "column": "29",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "238",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "278",
                    "column": "24",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "365",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "369",
                    "column": "17",
                    "severity": "error",
                    "message": "'synchronized' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "369",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "393",
                    "column": "34",
                    "severity": "error",
                    "message": "'/' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "398",
                    "column": "26",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "398",
                    "column": "26",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "404",
                    "column": "40",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "430",
                    "column": "40",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "451",
                    "column": "39",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "467",
                    "column": "23",
                    "severity": "error",
                    "message": "':' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "470",
                    "column": "25",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "569",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "602",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "602",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "622",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "622",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "663",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "663",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "43",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "671",
                    "column": "57",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "685",
                    "column": "59",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "731",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "731",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "777",
                    "column": "47",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "824",
                    "severity": "error",
                    "message": "Annotation 'FunctionalInterface' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "827",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "845",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "845",
                    "column": "70",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "845",
                    "column": "114",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "845",
                    "column": "149",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "854",
                    "column": "48",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "856",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 205).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "856",
                    "column": "73",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "856",
                    "column": "121",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "856",
                    "column": "156",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "857",
                    "column": "36",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "884",
                    "column": "45",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "894",
                    "column": "87",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "895",
                    "column": "40",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "915",
                    "column": "48",
                    "severity": "error",
                    "message": "'*' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/101/NodeRelationshipCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/101/NodeRelationshipCache.java\nindex e1a0205971a..440ef347eef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/101/NodeRelationshipCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/101/NodeRelationshipCache.java\n@@ -22,15 +22,16 @@ package org.neo4j.unsafe.impl.batchimport.cache;\n import java.util.Arrays;\n import java.util.concurrent.atomic.AtomicInteger;\n import java.util.concurrent.atomic.AtomicLong;\n-\n import org.neo4j.graphdb.Direction;\n import org.neo4j.unsafe.impl.batchimport.cache.idmapping.string.BigIdTracker;\n-\n import static java.lang.Long.min;\n+\n import static java.lang.Math.toIntExact;\n+\n import static java.lang.String.format;\n \n import static org.neo4j.helpers.Numbers.safeCastIntToUnsignedShort;\n+\n import static org.neo4j.helpers.Numbers.unsignedShortToInt;\n \n /**\n@@ -56,17 +57,18 @@ import static org.neo4j.helpers.Numbers.unsignedShortToInt;\n  * a phase of making changes using {@link #getAndPutRelationship(long, int, Direction, long, boolean)} and e.g\n  * {@link #visitChangedNodes(NodeChangeVisitor, int)}.\n  */\n+\n public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, AutoCloseable\n {\n     private static final int CHUNK_SIZE = 1_000_000;\n-    private static final long EMPTY = -1;\n-    private static final long MAX_RELATIONSHIP_ID = (1L << 48/*6B*/) - 2/*reserving -1 as legal default value*/;\n+    private static final long EMPTY = - 1;\n+    private static final long MAX_RELATIONSHIP_ID = ( 1L<<48/*6B*/) - 2/*reserving -1 as legal default value*/;\n     // if count goes beyond this max count then count is redirected to bigCounts and index into that array\n     // is stored as value in count offset\n-    static final int MAX_SMALL_COUNT = (1 << 29/*3 change bits*/) - 2/*reserving -1 as legal default value*/;\n+    static final int MAX_SMALL_COUNT = ( 1<<29/*3 change bits*/) - 2/*reserving -1 as legal default value*/;\n     // this max count is pessimistic in that it's what community format can hold, still pretty big.\n     // we can make this as big as our storage needs them later on\n-    static final long MAX_COUNT = (1L << 35) - 1;\n+    static final long MAX_COUNT = ( 1L<<35) - 1;\n \n     // Sizes and offsets of values in each sparse node ByteArray item\n     private static final int ID_SIZE = 6;\n@@ -79,13 +81,11 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n     private static final int DENSE_NODE_CHANGED_MASK = 0x80000000;\n     private static final int SPARSE_NODE_CHANGED_MASK = 0x40000000;\n     private static final int BIG_COUNT_MASK = 0x20000000;\n-    private static final int COUNT_FLAGS_MASKS = DENSE_NODE_CHANGED_MASK | SPARSE_NODE_CHANGED_MASK | BIG_COUNT_MASK;\n-    private static final int COUNT_MASK = ~COUNT_FLAGS_MASKS;\n-\n+    private static final int COUNT_FLAGS_MASKS = DENSE_NODE_CHANGED_MASK| SPARSE_NODE_CHANGED_MASK| BIG_COUNT_MASK;\n+    private static final int COUNT_MASK = ~ COUNT_FLAGS_MASKS;\n     private static final int TYPE_SIZE = 2;\n-    public static final int GROUP_ENTRY_SIZE = TYPE_SIZE + ID_SIZE/*next*/ +\n-            ID_AND_COUNT_SIZE * Direction.values().length;\n \n+    public static final int GROUP_ENTRY_SIZE = TYPE_SIZE + ID_SIZE/*next*/ + ID_AND_COUNT_SIZE* Direction.values().length;\n     private ByteArray array;\n     private byte[] chunkChangedArray;\n     private final int denseNodeThreshold;\n@@ -118,7 +118,8 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n     private static byte[] minusOneBytes( int length )\n     {\n         byte[] bytes = new byte[length];\n-        Arrays.fill( bytes, (byte) -1 );\n+        Arrays.fill( bytes, (byte)\n+- 1 );\n         return bytes;\n     }\n \n@@ -127,6 +128,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      * @param nodeId node to increment relationship count for.\n      * @return count after the increment.\n      */\n+\n     public long incrementCount( long nodeId )\n     {\n         return incrementCount( array, nodeId, SPARSE_COUNT_OFFSET );\n@@ -135,6 +137,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n     /**\n      * Should only be used by tests\n      */\n+\n     public void setCount( long nodeId, long count, int typeId, Direction direction )\n     {\n         if ( isDense( nodeId ) )\n@@ -181,24 +184,25 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      * @param offset offset on that array index (a ByteArray feature)\n      * @param count count to set at this position\n      */\n+\n     private void setCount( ByteArray array, long index, int offset, long count )\n     {\n         assertValidCount( index, count );\n-\n         if ( count > MAX_SMALL_COUNT )\n         {\n             int rawCount = array.getInt( index, offset );\n             int slot;\n-            if ( rawCount == -1 || !isBigCount( rawCount ) )\n+            if ( rawCount == - 1|| ! isBigCount( rawCount ) )\n             {\n                 // Allocate a slot in the bigCounts array\n                 slot = bigCountsCursor.getAndIncrement();\n-                array.setInt( index, offset, BIG_COUNT_MASK | slot );\n+                array.setInt( index, offset, BIG_COUNT_MASK| slot );\n             }\n             else\n             {\n                 slot = countValue( rawCount );\n             }\n+\n             bigCounts.set( slot, count );\n         }\n         else\n@@ -212,14 +216,13 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n         if ( count > MAX_COUNT )\n         {\n             // Meaning there are bits outside of this mask, meaning this value is too big\n-            throw new IllegalStateException( \"Tried to increment count of node id \" + nodeId + \" to \" + count +\n-                    \", which is too big in one single import\" );\n+            throw new IllegalStateException( \"Tried to increment count of node id \" + nodeId+ \" to \" + count + \", which is too big in one single import\" );\n         }\n     }\n \n     private static boolean isBigCount( int storedCount )\n     {\n-        return (storedCount & BIG_COUNT_MASK) != 0;\n+        return ( storedCount& BIG_COUNT_MASK) != 0;\n     }\n \n     /**\n@@ -229,9 +232,10 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      *\n      * @param nodeCount high node id in the store, e.g. the highest node id + 1\n      */\n+\n     public void setNodeCount( long nodeCount )\n     {\n-        if ( nodeCount - 1 > BigIdTracker.MAX_ID )\n+        if ( nodeCount - 1> BigIdTracker.MAX_ID )\n         {\n             throw new IllegalArgumentException( format( \"Invalid number of nodes %d. Max is %d\", nodeCount, BigIdTracker.MAX_ID ) );\n         }\n@@ -249,6 +253,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n     /**\n      * @see #setCount(ByteArray, long, int, long) setCount for description on how bigCounts work\n      */\n+\n     private long getCount( ByteArray array, long index, int offset )\n     {\n         int rawCount = array.getInt( index, offset );\n@@ -270,7 +275,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n \n     private static int countValue( int rawCount )\n     {\n-        return rawCount & COUNT_MASK;\n+        return rawCount& COUNT_MASK;\n     }\n \n     private long incrementCount( ByteArray array, long index, int offset )\n@@ -286,6 +291,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      * @return whether or not the given {@code nodeId} is dense. A node is sparse if it has less relationships,\n      * e.g. has had less calls to {@link #incrementCount(long)}, then the given dense node threshold.\n      */\n+\n     public boolean isDense( long nodeId )\n     {\n         return isDense( array, nodeId );\n@@ -313,8 +319,8 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      * @param incrementCount as side-effect also increment count for this chain.\n      * @return the previous head of the updated relationship chain.\n      */\n-    public long getAndPutRelationship( long nodeId, int typeId, Direction direction, long firstRelId,\n-            boolean incrementCount )\n+\n+    public long getAndPutRelationship( long nodeId, int typeId, Direction direction, long firstRelId, boolean incrementCount )\n     {\n         if ( firstRelId > MAX_RELATIONSHIP_ID )\n         {\n@@ -340,10 +346,12 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n                 existingId = relGroupCache.allocate( typeId );\n                 setRelationshipId( array, nodeId, existingId );\n             }\n+\n             return relGroupCache.getAndPutRelationship( existingId, typeId, direction, firstRelId, incrementCount );\n         }\n \n         // Don't increment count for sparse node since that has already been done in a previous pass\n+\n         setRelationshipId( array, nodeId, firstRelId );\n         return wasChanged ? EMPTY : existingId;\n     }\n@@ -351,14 +359,14 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n     private void markChunkAsChanged( long nodeId, boolean dense )\n     {\n         byte mask = chunkChangeMask( dense );\n-        if ( !chunkHasChange( nodeId, mask ) )\n+        if ( ! chunkHasChange( nodeId, mask ) )\n         {\n             int chunk = chunkOf( nodeId );\n-            if ( (chunkChangedArray[chunk] & mask) == 0 )\n+            if ( ( chunkChangedArray[ chunk]& mask) == 0 )\n             {\n                 // Multiple threads may update this chunk array, synchronized performance-wise is fine on change since\n                 // it'll only happen at most a couple of times for each chunk (1M).\n-                synchronized ( chunkChangedArray )\n+                synchronized( chunkChangedArray)\n                 {\n                     chunkChangedArray[chunk] |= mask;\n                 }\n@@ -376,29 +384,31 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n                 count++;\n             }\n         }\n+\n         return count;\n     }\n \n     private int chunkOf( long nodeId )\n     {\n-        return toIntExact( nodeId / chunkSize );\n+        return toIntExact( nodeId/ chunkSize );\n     }\n \n     private static byte chunkChangeMask( boolean dense )\n     {\n-        return (byte) (1 << (dense ? 1 : 0));\n+        return (byte) ( 1<<( dense ? 1 : 0));\n     }\n \n     private boolean markAsChanged( ByteArray array, long nodeId, int mask )\n     {\n         int bits = array.getInt( nodeId, SPARSE_COUNT_OFFSET );\n-        boolean changeBitIsSet = (bits & mask) != 0;\n+        boolean changeBitIsSet = ( bits& mask) != 0;\n         boolean changeBitWasFlipped = changeBitIsSet != forward;\n         if ( changeBitWasFlipped )\n         {\n             bits ^= mask; // flip the mask bit\n             array.setInt( nodeId, SPARSE_COUNT_OFFSET, bits );\n         }\n+\n         return changeBitWasFlipped;\n     }\n \n@@ -416,7 +426,8 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n         {\n             return false;\n         }\n-        boolean changeBitIsSet = (bits & mask) != 0;\n+\n+        boolean changeBitIsSet = ( bits& mask) != 0;\n         return changeBitIsSet == forward;\n     }\n \n@@ -437,7 +448,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n \n     private static long all48Bits( long raw )\n     {\n-        return raw == -1L ? raw : raw & 0xFFFFFFFFFFFFL;\n+        return raw == - 1L ? raw : raw& 0xFFFFFFFFFFFFL;\n     }\n \n     /**\n@@ -450,13 +461,13 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      * This visitor is expected to create the group.\n      * @return the first relationship if node is sparse, or the result of {@link GroupVisitor} if dense.\n      */\n+\n     public long getFirstRel( long nodeId, GroupVisitor visitor )\n     {\n-        assert forward : \"This should only be done at forward scan\";\n-\n+        assert forward: \"This should only be done at forward scan\";\n         ByteArray array = this.array.at( nodeId );\n         long id = getRelationshipId( array, nodeId );\n-        if ( id != EMPTY && isDense( array, nodeId ) )\n+        if ( id != EMPTY&& isDense( array, nodeId ) )\n         {   // Indirection into rel group cache\n             return relGroupCache.visitGroup( nodeId, id, visitor );\n         }\n@@ -484,6 +495,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      * @param denseNodes whether or not this is about dense nodes. If so then some additional cache\n      * preparation work needs to be done.\n      */\n+\n     public void setForwardScan( boolean forward, boolean denseNodes )\n     {\n         if ( this.forward == forward )\n@@ -493,13 +505,13 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n \n         // There's some additional preparations to do for dense nodes between each pass,\n         // this is because that piece of memory is reused.\n+\n         if ( denseNodes )\n         {\n             if ( forward )\n             {\n                 // Clear relationship group cache and references to it\n-                visitChangedNodes( ( nodeId, array ) -> setRelationshipId( array, nodeId, EMPTY ),\n-                        NodeType.NODE_TYPE_DENSE );\n+                visitChangedNodes( ( nodeId, array ) -> setRelationshipId( array, nodeId, EMPTY ), NodeType.NODE_TYPE_DENSE );\n                 clearChangedChunks( true );\n                 relGroupCache.clear();\n             }\n@@ -509,6 +521,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n                 relGroupCache.clearRelationshipIds();\n             }\n         }\n+\n         this.forward = forward;\n     }\n \n@@ -525,6 +538,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      * @param direction {@link Direction} to get count for.\n      * @return count (degree) of the requested relationship chain.\n      */\n+\n     public long getCount( long nodeId, int typeId, Direction direction )\n     {\n         ByteArray array = this.array.at( nodeId );\n@@ -539,7 +553,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n     }\n \n     public interface GroupVisitor\n-    {\n+{\n         /**\n          * Visits with data required to create a relationship group.\n          * Type can be decided on the outside since there'll be only one type per node.\n@@ -551,11 +565,10 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n          * @param loop first loop relationship id.\n          * @return the created relationship group id.\n          */\n-        long visit( long nodeId, int typeId, long out, long in, long loop );\n-    }\n-\n-    public static final GroupVisitor NO_GROUP_VISITOR = ( nodeId, typeId, out, in, loop ) -> -1;\n+   long visit( long nodeId, int typeId, long out, long in, long loop )\n+   ;}\n \n+    public static final GroupVisitor NO_GROUP_VISITOR = ( nodeId, typeId, out, in, loop ) -> - 1;\n     private class RelGroupCache implements AutoCloseable, MemoryStatsVisitor.Visitable\n     {\n         private static final int TYPE_OFFSET = 0;\n@@ -586,7 +599,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n         long getAndResetCount( long relGroupIndex, int typeId, Direction direction )\n         {\n             long index = rebase( relGroupIndex );\n-            while ( index != EMPTY )\n+            while( index != EMPTY)\n             {\n                 ByteArray array = this.array.at( index );\n                 if ( getTypeId( array, index ) == typeId )\n@@ -596,15 +609,17 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n                     NodeRelationshipCache.this.setCount( array, index, offset, 0 );\n                     return count;\n                 }\n+\n                 index = getNext( array, index );\n             }\n+\n             return 0;\n         }\n \n         void setCount( long relGroupIndex, int typeId, Direction direction, long count )\n         {\n             long index = rebase( relGroupIndex );\n-            while ( index != EMPTY )\n+            while( index != EMPTY)\n             {\n                 ByteArray array = this.array.at( index );\n                 if ( getTypeId( array, index ) == typeId )\n@@ -612,6 +627,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n                     NodeRelationshipCache.this.setCount( array, index, countOffset( direction ), count );\n                     break;\n                 }\n+\n                 index = getNext( array, index );\n             }\n         }\n@@ -629,6 +645,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n         /**\n          * Compensate for test value of index (to avoid allocating all your RAM)\n          */\n+\n         private long rebase( long index )\n         {\n             return index - base;\n@@ -643,7 +660,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n         {\n             long currentIndex = rebase( relGroupIndex );\n             long first = EMPTY;\n-            while ( currentIndex != EMPTY )\n+            while( currentIndex != EMPTY)\n             {\n                 ByteArray array = this.array.at( currentIndex );\n                 long out = all48Bits( array, currentIndex, idOffset( Direction.OUTGOING ) );\n@@ -651,21 +668,21 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n                 long in = all48Bits( array, currentIndex, idOffset( Direction.INCOMING ) );\n                 long loop = all48Bits( array, currentIndex, idOffset( Direction.BOTH ) );\n                 long next = getNext( array, currentIndex );\n-                long nextId = out == EMPTY && in == EMPTY && loop == EMPTY\n-                        ? EMPTY\n-                        : visitor.visit( nodeId, typeId, out, in, loop );\n+                long nextId = out == EMPTY&& in == EMPTY&& loop == EMPTY ? EMPTY : visitor.visit( nodeId, typeId, out, in, loop );\n                 if ( first == EMPTY )\n                 {   // This is the one we return\n                     first = nextId;\n                 }\n+\n                 currentIndex = next;\n             }\n+\n             return first;\n         }\n \n         private int idOffset( Direction direction )\n         {\n-            return BASE_IDS_OFFSET + (direction.ordinal() * ID_AND_COUNT_SIZE);\n+            return BASE_IDS_OFFSET + ( direction.ordinal()* ID_AND_COUNT_SIZE);\n         }\n \n         private int countOffset( Direction direction )\n@@ -684,8 +701,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n             return index;\n         }\n \n-        private long getAndPutRelationship( long relGroupIndex, int typeId, Direction direction,\n-                long relId, boolean incrementCount )\n+        private long getAndPutRelationship( long relGroupIndex, int typeId, Direction direction, long relId, boolean incrementCount )\n         {\n             long index = rebase( relGroupIndex );\n             index = findOrAllocateIndex( index, typeId );\n@@ -697,6 +713,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n             {\n                 incrementCount( array, index, countOffset( direction ) );\n             }\n+\n             return previousId;\n         }\n \n@@ -711,7 +728,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n         {\n             long lastIndex = index;\n             ByteArray array = this.array.at( index );\n-            while ( index != EMPTY )\n+            while( index != EMPTY)\n             {\n                 lastIndex = index;\n                 array = this.array.at( index );\n@@ -720,10 +737,12 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n                 {\n                     return index;\n                 }\n+\n                 index = getNext( array, index );\n             }\n \n             // No such found, create at the end\n+\n             long newIndex = allocate( typeId );\n             array.set6ByteLong( lastIndex, NEXT_OFFSET, newIndex );\n             return newIndex;\n@@ -755,7 +774,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n             for ( long i = 0; i < highId; )\n             {\n                 ByteArray chunk = array.at( i );\n-                for ( int j = 0; j < chunkSize && i < highId; j++, i++ )\n+                for ( int j = 0; j < chunkSize&& i < highId; j++, i++ )\n                 {\n                     clearRelationshipIds( chunk, i );\n                 }\n@@ -775,6 +794,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n         {\n             array.close();\n         }\n+\n         if ( relGroupCache != null )\n         {\n             relGroupCache.close();\n@@ -801,11 +821,10 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n         return dense ? DENSE_NODE_CHANGED_MASK : SPARSE_NODE_CHANGED_MASK;\n     }\n \n-    @FunctionalInterface\n-    public interface NodeChangeVisitor\n-    {\n-        void change( long nodeId, ByteArray array );\n-    }\n+    @FunctionalInterface public interface NodeChangeVisitor\n+{\n+   void change( long nodeId, ByteArray array )\n+   ;}\n \n     /**\n      * Efficiently visits changed nodes, e.g. nodes that have had any relationship chain updated by\n@@ -814,6 +833,7 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      * @param visitor {@link NodeChangeVisitor} which will be notified about all changes.\n      * @param nodeTypes which types to visit (dense/sparse).\n      */\n+\n     public void visitChangedNodes( NodeChangeVisitor visitor, int nodeTypes )\n     {\n         long denseMask = changeMask( true );\n@@ -822,10 +842,8 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n         byte sparseChunkMask = chunkChangeMask( false );\n         for ( long nodeId = 0; nodeId < highNodeId; )\n         {\n-            boolean chunkHasChanged =\n-                    (NodeType.isDense( nodeTypes ) && chunkHasChange( nodeId, denseChunkMask )) ||\n-                    (NodeType.isSparse( nodeTypes ) && chunkHasChange( nodeId, sparseChunkMask ));\n-            if ( !chunkHasChanged )\n+            boolean chunkHasChanged = ( NodeType.isDense( nodeTypes )&& chunkHasChange( nodeId, denseChunkMask ))|| ( NodeType.isSparse( nodeTypes )&& chunkHasChange( nodeId, sparseChunkMask ));\n+            if ( ! chunkHasChanged )\n             {\n                 nodeId += chunkSize;\n                 continue;\n@@ -833,13 +851,10 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n \n             ByteArray subArray = array.at( nodeId );\n             long subArrayLength = subArray.length();\n-            for ( int i = 0; i < subArrayLength && nodeId < highNodeId; i++, nodeId++ )\n+            for ( int i = 0; i < subArrayLength&& nodeId < highNodeId; i++, nodeId++ )\n             {\n-                boolean nodeHasChanged =\n-                        (NodeType.isDense( nodeTypes ) && nodeIsChanged( subArray, nodeId, denseMask )) ||\n-                        (NodeType.isSparse( nodeTypes ) && nodeIsChanged( subArray, nodeId, sparseMask ));\n-\n-                if ( nodeHasChanged && NodeType.matchesDense( nodeTypes, isDense( array, nodeId ) ) )\n+                boolean nodeHasChanged = ( NodeType.isDense( nodeTypes )&& nodeIsChanged( subArray, nodeId, denseMask ))|| ( NodeType.isSparse( nodeTypes )&& nodeIsChanged( subArray, nodeId, sparseMask ));\n+                if ( nodeHasChanged&& NodeType.matchesDense( nodeTypes, isDense( array, nodeId ) ) )\n                 {\n                     visitor.change( nodeId, subArray );\n                 }\n@@ -852,20 +867,21 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n      *\n      * @param denseNodes {@code true} for clearing marked dense nodes, {@code false} for clearing marked sparse nodes.\n      */\n+\n     private void clearChangedChunks( boolean denseNodes )\n     {\n         // Executed by a single thread, so no synchronized required\n         byte chunkMask = chunkChangeMask( denseNodes );\n         for ( int i = 0; i < chunkChangedArray.length; i++ )\n         {\n-            chunkChangedArray[i] &= ~chunkMask;\n+            chunkChangedArray[i] &= ~ chunkMask;\n         }\n     }\n \n     private boolean chunkHasChange( long nodeId, byte chunkMask )\n     {\n         int chunkId = chunkOf( nodeId );\n-        return (chunkChangedArray[chunkId] & chunkMask) != 0;\n+        return ( chunkChangedArray[ chunkId]& chunkMask) != 0;\n     }\n \n     public long calculateMaxMemoryUsage( long numberOfRelationships )\n@@ -875,8 +891,8 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n \n     public static long calculateMaxMemoryUsage( long numberOfDenseNodes, long numberOfRelationships )\n     {\n-        long maxDenseNodesForThisType = min( numberOfDenseNodes, numberOfRelationships * 2/*nodes/rel*/ );\n-        return maxDenseNodesForThisType * NodeRelationshipCache.GROUP_ENTRY_SIZE;\n+        long maxDenseNodesForThisType = min( numberOfDenseNodes, numberOfRelationships* 2/*nodes/rel*/ );\n+        return maxDenseNodesForThisType* NodeRelationshipCache.GROUP_ENTRY_SIZE;\n     }\n \n     public void countingCompleted()\n@@ -891,13 +907,13 @@ public class NodeRelationshipCache implements MemoryStatsVisitor.Visitable, Auto\n \n     public MemoryStatsVisitor.Visitable memoryEstimation( long numberOfNodes )\n     {\n-        return new MemoryStatsVisitor.Visitable()\n-        {\n-            @Override\n-            public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n-            {\n-                visitor.offHeapUsage( ID_AND_COUNT_SIZE * numberOfNodes );\n-            }\n-        };\n+        return new MemoryStatsVisitor. Visitable()\n+{\n+    @Override\n+    public void acceptMemoryStatsVisitor( MemoryStatsVisitor visitor )\n+    {\n+        visitor.offHeapUsage( ID_AND_COUNT_SIZE* numberOfNodes );\n+    }\n+};\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 115
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}