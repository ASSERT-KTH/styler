{
    "project_name": "neo4j-neo4j",
    "error_id": "2789",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "136",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2789/EventSourceMessageBodyWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2789/EventSourceMessageBodyWriter.java\nindex bb1b1bdccdf..665fe2e1c6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2789/EventSourceMessageBodyWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2789/EventSourceMessageBodyWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.http.cypher.format.output.eventsource;\n \n import java.io.OutputStream;\n@@ -36,38 +37,38 @@ import org.neo4j.server.http.cypher.format.api.OutputEventSource;\n import org.neo4j.server.http.cypher.format.jolt.JoltCodec;\n \n @Provider\n-@Produces( {EventSourceMessageBodyWriter.JSON_JOLT_MIME_TYPE_VALUE_WITH_QUALITY, } )\n+@Produces({EventSourceMessageBodyWriter.JSON_JOLT_MIME_TYPE_VALUE_WITH_QUALITY,})\n public class EventSourceMessageBodyWriter implements MessageBodyWriter<OutputEventSource>\n {\n     public static final String JSON_JOLT_MIME_TYPE_VALUE = \"application/vnd.neo4j.jolt+json-seq\";\n     public static final String JSON_JOLT_MIME_TYPE_VALUE_WITH_QUALITY = JSON_JOLT_MIME_TYPE_VALUE + \";qs=0.5\";\n-    public static final MediaType JSON_JOLT_MIME_TYPE = MediaType.valueOf( JSON_JOLT_MIME_TYPE_VALUE );\n+    public static final MediaType JSON_JOLT_MIME_TYPE = MediaType.valueOf(JSON_JOLT_MIME_TYPE_VALUE);\n \n     @Override\n-    public boolean isWriteable( Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType )\n+    public boolean isWriteable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n     {\n-        return OutputEventSource.class.isAssignableFrom( type );\n+        return OutputEventSource.class.isAssignableFrom(type);\n     }\n \n     @Override\n-    public void writeTo( OutputEventSource outputEventSource, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n-                         MultivaluedMap<String,Object> httpHeaders, OutputStream output ) throws WebApplicationException\n+    public void writeTo(OutputEventSource outputEventSource, Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n+                        MultivaluedMap<String, Object> httpHeaders, OutputStream output) throws WebApplicationException\n     {\n         var transaction = outputEventSource.getTransactionHandle();\n         var parameters = outputEventSource.getParameters();\n-        var joltStrictModeEnabled = isJoltStrictModeEnabled( httpHeaders );\n+        var joltStrictModeEnabled = isJoltStrictModeEnabled(httpHeaders);\n \n         var jsonFactory = DefaultJsonFactory.INSTANCE.get();\n-        var serializer = new EventSourceSerializer( transaction, parameters, JoltCodec.class, joltStrictModeEnabled, jsonFactory, output );\n+        var serializer = new EventSourceSerializer(transaction, parameters, JoltCodec.class, joltStrictModeEnabled, jsonFactory, output);\n \n-        outputEventSource.produceEvents( serializer::handleEvent );\n+        outputEventSource.produceEvents(serializer::handleEvent);\n     }\n \n-    private boolean isJoltStrictModeEnabled( MultivaluedMap<String,Object> httpHeaders )\n+    private boolean isJoltStrictModeEnabled(MultivaluedMap<String, Object> httpHeaders)\n     {\n         Predicate<MediaType> isStrictJolt =\n-                s -> s.isCompatible( JSON_JOLT_MIME_TYPE ) && Boolean.parseBoolean( s.getParameters().getOrDefault( \"strict\", Boolean.FALSE.toString() ) );\n-        return httpHeaders.containsKey( HttpHeaders.CONTENT_TYPE ) &&\n-               httpHeaders.get( HttpHeaders.CONTENT_TYPE ).stream().map( MediaType.class::cast ).anyMatch( isStrictJolt );\n+          s -> s.isCompatible(JSON_JOLT_MIME_TYPE) && Boolean.parseBoolean(s.getParameters().getOrDefault(\"strict\", Boolean.FALSE.toString()));\n+        return httpHeaders.containsKey(HttpHeaders.CONTENT_TYPE) &&\n+          httpHeaders.get(HttpHeaders.CONTENT_TYPE).stream().map(MediaType.class::cast).anyMatch(isStrictJolt);\n     }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}