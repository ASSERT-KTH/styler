{
    "project_name": "Activiti-Activiti",
    "error_id": "857",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.runtime.api.impl;\n\nimport java.util.List;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/857/MappingAwareActivityBehaviorFactory.java\nindex e4e9f555d84..c60d0d8671f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/857/MappingAwareActivityBehaviorFactory.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/857/MappingAwareActivityBehaviorFactory.java\nindex e4e9f555d84..e5a591ae78b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/857/MappingAwareActivityBehaviorFactory.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n@@ -48,23 +49,23 @@ public class MappingAwareActivityBehaviorFactory extends DefaultActivityBehavior\n     @Override\n     public UserTaskActivityBehavior createUserTaskActivityBehavior(UserTask userTask) {\n         return new MappingAwareUserTaskBehavior(userTask,\n-                                                variablesMappingProvider);\n+                variablesMappingProvider);\n     }\n \n     @Override\n     protected CallActivityBehavior createCallActivityBehavior(Expression expression, List<MapExceptionEntry> mapExceptions) {\n         return new MappingAwareCallActivityBehavior(expression,\n-                                                    mapExceptions,\n-                                                    variablesMappingProvider,\n-                                                    processVariablesInitiator);\n+                mapExceptions,\n+                variablesMappingProvider,\n+                processVariablesInitiator);\n     }\n \n     @Override\n     protected CallActivityBehavior createCallActivityBehavior(String calledElement,\n                                                               List<MapExceptionEntry> mapExceptions) {\n         return new MappingAwareCallActivityBehavior(calledElement,\n-                                                    mapExceptions,\n-                                                    variablesMappingProvider,\n-                                                    processVariablesInitiator);\n+                mapExceptions,\n+                variablesMappingProvider,\n+                processVariablesInitiator);\n     }\n }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/857/MappingAwareActivityBehaviorFactory.java\nindex e4e9f555d84..83bc2231194 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/857/MappingAwareActivityBehaviorFactory.java\n@@ -16,7 +16,6 @@\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n-\n import org.activiti.bpmn.model.MapExceptionEntry;\n import org.activiti.bpmn.model.UserTask;\n import org.activiti.engine.delegate.Expression;\n@@ -30,41 +29,39 @@ import org.activiti.spring.process.ProcessVariablesInitiator;\n /**\n  * Default implementation of the {@link ActivityBehaviorFactory}. Used when no custom {@link ActivityBehaviorFactory} is injected on the {@link ProcessEngineConfigurationImpl}.\n  */\n-public class MappingAwareActivityBehaviorFactory extends DefaultActivityBehaviorFactory {\n \n-    private VariablesMappingProvider variablesMappingProvider;\n \n-    private ProcessVariablesInitiator processVariablesInitiator;\n+public class MappingAwareActivityBehaviorFactory extends DefaultActivityBehaviorFactory {\n+\n+  private VariablesMappingProvider variablesMappingProvider;\n \n-    public MappingAwareActivityBehaviorFactory(VariablesMappingProvider variablesMappingProvider,\n-                                               ProcessVariablesInitiator processVariablesInitiator) {\n-        super();\n-        this.variablesMappingProvider = variablesMappingProvider;\n-        this.processVariablesInitiator = processVariablesInitiator;\n+  private ProcessVariablesInitiator processVariablesInitiator;\n \n-        this.setMessagePayloadMappingProviderFactory(new JsonMessagePayloadMappingProviderFactory(variablesMappingProvider));\n-    }\n+  public MappingAwareActivityBehaviorFactory(VariablesMappingProvider variablesMappingProvider, ProcessVariablesInitiator processVariablesInitiator) {\n+    super();\n+    this.variablesMappingProvider = variablesMappingProvider;\n+    this.processVariablesInitiator = processVariablesInitiator;\n+    this.setMessagePayloadMappingProviderFactory(new JsonMessagePayloadMappingProviderFactory(variablesMappingProvider));\n+  }\n \n-    @Override\n-    public UserTaskActivityBehavior createUserTaskActivityBehavior(UserTask userTask) {\n-        return new MappingAwareUserTaskBehavior(userTask,\n-                                                variablesMappingProvider);\n-    }\n+  @Override\n+  public UserTaskActivityBehavior createUserTaskActivityBehavior(UserTask userTask) {\n+    return new MappingAwareUserTaskBehavior(userTask, variablesMappingProvider);\n+  }\n \n-    @Override\n-    protected CallActivityBehavior createCallActivityBehavior(Expression expression, List<MapExceptionEntry> mapExceptions) {\n-        return new MappingAwareCallActivityBehavior(expression,\n-                                                    mapExceptions,\n-                                                    variablesMappingProvider,\n-                                                    processVariablesInitiator);\n-    }\n+  @Override\n+  protected CallActivityBehavior createCallActivityBehavior(Expression expression, List<MapExceptionEntry> mapExceptions) {\n+    return new MappingAwareCallActivityBehavior(expression,\n+                                                mapExceptions,\n+                                                variablesMappingProvider,\n+                                                processVariablesInitiator);\n+  }\n \n-    @Override\n-    protected CallActivityBehavior createCallActivityBehavior(String calledElement,\n-                                                              List<MapExceptionEntry> mapExceptions) {\n-        return new MappingAwareCallActivityBehavior(calledElement,\n-                                                    mapExceptions,\n-                                                    variablesMappingProvider,\n-                                                    processVariablesInitiator);\n-    }\n-}\n+  @Override\n+  protected CallActivityBehavior createCallActivityBehavior(String calledElement, List<MapExceptionEntry> mapExceptions) {\n+    return new MappingAwareCallActivityBehavior(calledElement,\n+                                                mapExceptions,\n+                                                variablesMappingProvider,\n+                                                processVariablesInitiator);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/857/MappingAwareActivityBehaviorFactory.java\nindex e4e9f555d84..c60d0d8671f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/857/MappingAwareActivityBehaviorFactory.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/857/MappingAwareActivityBehaviorFactory.java\nindex e4e9f555d84..c60d0d8671f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/857/MappingAwareActivityBehaviorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/857/MappingAwareActivityBehaviorFactory.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}