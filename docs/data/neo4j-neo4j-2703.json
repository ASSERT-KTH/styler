{
    "project_name": "neo4j-neo4j",
    "error_id": "2703",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "143",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "80",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2703/IndexSamplingJobTracker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2703/IndexSamplingJobTracker.java\nindex 073d90c6098..0d99321c155 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2703/IndexSamplingJobTracker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2703/IndexSamplingJobTracker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index.sampling;\n \n import java.util.HashSet;\n@@ -35,64 +36,61 @@ class IndexSamplingJobTracker\n {\n     private final JobScheduler jobScheduler;\n     private final Set<Long> executingJobs;\n-    private final Lock lock = new ReentrantLock( true );\n+    private final Lock lock = new ReentrantLock(true);\n     private final Condition allJobsFinished = lock.newCondition();\n     private final String databaseName;\n \n     private boolean stopped;\n \n-    IndexSamplingJobTracker( JobScheduler jobScheduler, String databaseName )\n+    IndexSamplingJobTracker(JobScheduler jobScheduler, String databaseName)\n     {\n         this.jobScheduler = jobScheduler;\n         this.executingJobs = new HashSet<>();\n         this.databaseName = databaseName;\n     }\n \n-    JobHandle scheduleSamplingJob( final IndexSamplingJob samplingJob )\n+    JobHandle scheduleSamplingJob(final IndexSamplingJob samplingJob)\n     {\n         lock.lock();\n         try\n         {\n-            if ( stopped )\n+            if (stopped)\n             {\n                 return JobHandle.EMPTY;\n             }\n \n             long indexId = samplingJob.indexId();\n-            if ( executingJobs.contains( indexId ) )\n+            if (executingJobs.contains(indexId))\n             {\n                 return JobHandle.EMPTY;\n             }\n \n-            executingJobs.add( indexId );\n-            var monitoringParams = new JobMonitoringParams( Subject.SYSTEM, databaseName, \"Sampling of index '\" + samplingJob.indexName() + \"'\" );\n-            return jobScheduler.schedule( Group.INDEX_SAMPLING, monitoringParams, () ->\n+            executingJobs.add(indexId);\n+            var monitoringParams = new JobMonitoringParams(Subject.SYSTEM, databaseName, \"Sampling of index '\" + samplingJob.indexName() + \"'\");\n+            return jobScheduler.schedule(Group.INDEX_SAMPLING, monitoringParams, () ->\n             {\n                 try\n                 {\n                     samplingJob.run();\n-                }\n-                finally\n+                } finally\n                 {\n-                    samplingJobCompleted( samplingJob );\n+                    samplingJobCompleted(samplingJob);\n                 }\n-            } );\n-        }\n-        finally\n+            });\n+        } finally\n         {\n             lock.unlock();\n         }\n     }\n \n-    private void samplingJobCompleted( IndexSamplingJob samplingJob )\n+    private void samplingJobCompleted(IndexSamplingJob samplingJob)\n     {\n         lock.lock();\n         try\n         {\n-            executingJobs.remove( samplingJob.indexId() );\n+            executingJobs.remove(samplingJob.indexId());\n             allJobsFinished.signalAll();\n-        }\n-        finally\n+        } finally\n         {\n             lock.unlock();\n         }\n@@ -105,12 +103,11 @@ class IndexSamplingJobTracker\n         {\n             stopped = true;\n \n-            while ( !executingJobs.isEmpty() )\n+            while (!executingJobs.isEmpty())\n             {\n                 allJobsFinished.awaitUninterruptibly();\n             }\n-        }\n-        finally\n+        } finally\n         {\n             lock.unlock();\n         }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}