{
    "project_name": "neo4j-neo4j",
    "error_id": "2283",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "166",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2283/MultiReadable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2283/MultiReadable.java\nindex a5a6d8a578c..c63e9f28a46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2283/MultiReadable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2283/MultiReadable.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.csv.reader;\n \n import java.io.IOException;\n@@ -27,21 +28,21 @@ import org.neo4j.collection.RawIterator;\n  * Joins multiple {@link CharReadable} into one. There will never be one read which reads from multiple sources.\n  * If the end of one source is reached those (smaller amount of) characters are returned as one read and the next\n  * read will start reading from the new source.\n- *\n+ * <p>\n  * Newline will be injected in between two sources, even if the former doesn't end with such. This to not have the\n  * last line in the former and first in the latter to look like one long line, if reading characters off of this\n  * reader character by character (w/o knowing that there are multiple sources underneath).\n  */\n public class MultiReadable implements CharReadable\n {\n-    private final RawIterator<CharReadable,IOException> actual;\n+    private final RawIterator<CharReadable, IOException> actual;\n \n     private CharReadable current = CharReadable.EMPTY;\n     private boolean requiresNewLine;\n     private long previousPosition;\n     private float previousCompressionRatio = 1f;\n \n-    public MultiReadable( RawIterator<CharReadable,IOException> readers )\n+    public MultiReadable(RawIterator<CharReadable, IOException> readers)\n     {\n         this.actual = readers;\n     }\n@@ -54,7 +55,7 @@ public class MultiReadable implements CharReadable\n \n     private void closeCurrent() throws IOException\n     {\n-        if ( current != null )\n+        if (current != null)\n         {\n             current.close();\n         }\n@@ -80,9 +81,9 @@ public class MultiReadable implements CharReadable\n \n     private boolean goToNextSource() throws IOException\n     {\n-        if ( actual.hasNext() )\n+        if (actual.hasNext())\n         {\n-            if ( current != null )\n+            if (current != null)\n             {\n                 long sourceLength = current.position();\n                 float sourceCompressionRatio = current.compressionRatio();\n@@ -97,29 +98,29 @@ public class MultiReadable implements CharReadable\n     }\n \n     @Override\n-    public SectionedCharBuffer read( SectionedCharBuffer buffer, int from ) throws IOException\n+    public SectionedCharBuffer read(SectionedCharBuffer buffer, int from) throws IOException\n     {\n-        while ( true )\n+        while (true)\n         {\n-            current.read( buffer, from );\n-            if ( buffer.hasAvailable() )\n+            current.read(buffer, from);\n+            if (buffer.hasAvailable())\n             {\n                 // OK we read something from the current reader\n-                checkNewLineRequirement( buffer.array(), buffer.front() - 1);\n+                checkNewLineRequirement(buffer.array(), buffer.front() - 1);\n                 return buffer;\n             }\n \n             // Even if there's no line-ending at the end of this source we should introduce one\n             // otherwise the last line of this source and the first line of the next source will\n             // look like one long line.\n-            if ( requiresNewLine )\n+            if (requiresNewLine)\n             {\n-                buffer.append( '\\n' );\n+                buffer.append('\\n');\n                 requiresNewLine = false;\n                 return buffer;\n             }\n \n-            if ( !goToNextSource() )\n+            if (!goToNextSource())\n             {\n                 break;\n             }\n@@ -128,22 +129,22 @@ public class MultiReadable implements CharReadable\n         return buffer;\n     }\n \n-    private void checkNewLineRequirement( char[] array, int lastIndex )\n+    private void checkNewLineRequirement(char[] array, int lastIndex)\n     {\n         char lastChar = array[lastIndex];\n         requiresNewLine = lastChar != '\\n' && lastChar != '\\r';\n     }\n \n     @Override\n-    public int read( char[] into, int offset, int length ) throws IOException\n+    public int read(char[] into, int offset, int length) throws IOException\n     {\n         int totalRead = 0;\n-        while ( totalRead < length )\n+        while (totalRead < length)\n         {\n-            int read = current.read( into, offset + totalRead, length - totalRead );\n-            if ( read == -1 )\n+            int read = current.read(into, offset + totalRead, length - totalRead);\n+            if (read == -1)\n             {\n-                if ( totalRead > 0 )\n+                if (totalRead > 0)\n                 {\n                     // Something has been read, but we couldn't fulfill the request with the current source.\n                     // Return what we've read so far so that we don't mix multiple sources into the same read,\n@@ -151,22 +152,21 @@ public class MultiReadable implements CharReadable\n                     return totalRead;\n                 }\n \n-                if ( !goToNextSource() )\n+                if (!goToNextSource())\n                 {\n                     break;\n                 }\n \n-                if ( requiresNewLine )\n+                if (requiresNewLine)\n                 {\n                     into[offset + totalRead] = '\\n';\n                     totalRead++;\n                     requiresNewLine = false;\n                 }\n-            }\n-            else if ( read > 0 )\n+            } else if (read > 0)\n             {\n                 totalRead += read;\n-                checkNewLineRequirement( into, offset + totalRead - 1 );\n+                checkNewLineRequirement(into, offset + totalRead - 1);\n             }\n         }\n         return totalRead;\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2283/MultiReadable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2283/MultiReadable.java\nindex a5a6d8a578c..46df67bf8d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2283/MultiReadable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2283/MultiReadable.java\n@@ -177,4 +177,4 @@ public class MultiReadable implements CharReadable\n     {\n         return current.length();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}