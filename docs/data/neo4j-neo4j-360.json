{
    "project_name": "neo4j-neo4j",
    "error_id": "360",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/360/SlotSelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/360/SlotSelector.java\nindex 28eb2ed6351..4bc7c42ac89 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/360/SlotSelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/360/SlotSelector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.util.Arrays;\n@@ -34,36 +35,36 @@ public interface SlotSelector\n {\n     SlotSelector nullInstance = new NullInstance();\n \n-    void validateSatisfied( InstanceSelector<IndexProvider> instances );\n+    void validateSatisfied(InstanceSelector<IndexProvider> instances);\n \n     /**\n      * Selects a slot to use based on the given values. The values can be anything that can yield a {@link ValueCategory value category},\n      * which is what the {@code groupOf} function extracts from each value.\n      *\n-     * @param <V> type of value to extract {@link ValueCategory} from.\n-     * @param values values, something which can yield a {@link ValueCategory}.\n+     * @param <V>        type of value to extract {@link ValueCategory} from.\n+     * @param values     values, something which can yield a {@link ValueCategory}.\n      * @param categoryOf {@link Function} to get {@link ValueCategory} for the given values.\n      * @return {@link IndexSlot} or {@code null} if no single slot could be selected. This means that all slots are needed.\n      */\n-    <V> IndexSlot selectSlot( V[] values, Function<V,ValueCategory> categoryOf );\n+    <V> IndexSlot selectSlot(V[] values, Function<V, ValueCategory> categoryOf);\n \n     /**\n      * Standard utility method for typical implementation of {@link SlotSelector#validateSatisfied(InstanceSelector)}.\n      *\n-     * @param instances instances to validate.\n+     * @param instances  instances to validate.\n      * @param aliveIndex slots to ensure have been initialized with non-empty instances.\n      */\n-    static void validateSelectorInstances( InstanceSelector<IndexProvider> instances, IndexSlot... aliveIndex )\n+    static void validateSelectorInstances(InstanceSelector<IndexProvider> instances, IndexSlot... aliveIndex)\n     {\n-        for ( IndexSlot indexSlot : IndexSlot.values() )\n+        for (IndexSlot indexSlot : IndexSlot.values())\n         {\n-            boolean expected = contains( aliveIndex, indexSlot );\n-            boolean actual = instances.select( indexSlot ) != IndexProvider.EMPTY;\n-            if ( expected != actual )\n+            boolean expected = contains(aliveIndex, indexSlot);\n+            boolean actual = instances.select(indexSlot) != IndexProvider.EMPTY;\n+            if (expected != actual)\n             {\n                 throw new IllegalArgumentException(\n-                        String.format( \"Only indexes expected to be separated from IndexProvider.EMPTY are %s but was %s\",\n-                                Arrays.toString( aliveIndex ), instances ) );\n+                  String.format(\"Only indexes expected to be separated from IndexProvider.EMPTY are %s but was %s\",\n+                    Arrays.toString(aliveIndex), instances));\n             }\n         }\n     }\n@@ -71,14 +72,14 @@ public interface SlotSelector\n     class NullInstance implements SlotSelector\n     {\n         @Override\n-        public void validateSatisfied( InstanceSelector<IndexProvider> instances )\n+        public void validateSatisfied(InstanceSelector<IndexProvider> instances)\n         {   // no-op\n         }\n \n         @Override\n-        public <V> IndexSlot selectSlot( V[] values, Function<V,ValueCategory> categoryOf )\n+        public <V> IndexSlot selectSlot(V[] values, Function<V, ValueCategory> categoryOf)\n         {\n-            throw new UnsupportedOperationException( \"NullInstance cannot select a slot for you. Please use the real deal.\" );\n+            throw new UnsupportedOperationException(\"NullInstance cannot select a slot for you. Please use the real deal.\");\n         }\n     }\n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}