{
    "project_name": "h2database-h2database",
    "error_id": "201",
    "information": {
        "errors": [
            {
                "line": "224",
                "column": "45",
                "severity": "warning",
                "message": "')' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "        if (x == 0) {\n            return 1;\n        } else if (x < 0 || x > 0x4000_0000 ) {\n            throw new IllegalArgumentException(\"Argument out of range\"\n                    + \" [0x0-0x40000000]. Argument was: \" + x);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/201/MathUtils.java\nindex eff05cb3f3d..1a42261c3ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/201/MathUtils.java\n@@ -221,7 +221,7 @@ public class MathUtils {\n     public static int nextPowerOf2(int x) throws IllegalArgumentException {\n         if (x == 0) {\n             return 1;\n-        } else if (x < 0 || x > 0x4000_0000 ) {\n+        } else if (x < 0 || x > 0x4000_0000) {\n             throw new IllegalArgumentException(\"Argument out of range\"\n                     + \" [0x0-0x40000000]. Argument was: \" + x);\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/201/MathUtils.java\nindex eff05cb3f3d..108d5cc3d7c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/201/MathUtils.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.util;\n \n import java.io.ByteArrayOutputStream;\n@@ -39,7 +40,7 @@ public class MathUtils {\n      * operations are done: 0 stays 0; values 1..8 results in 8, 9..16 results\n      * in 16, and so on.\n      *\n-     * @param x the value to be rounded\n+     * @param x                 the value to be rounded\n      * @param blockSizePowerOf2 the block size\n      * @return the rounded value\n      */\n@@ -53,7 +54,7 @@ public class MathUtils {\n      * operations are done: 0 stays 0; values 1..8 results in 8, 9..16 results\n      * in 16, and so on.\n      *\n-     * @param x the value to be rounded\n+     * @param x                 the value to be rounded\n      * @param blockSizePowerOf2 the block size\n      * @return the rounded value\n      */\n@@ -221,7 +222,7 @@ public class MathUtils {\n     public static int nextPowerOf2(int x) throws IllegalArgumentException {\n         if (x == 0) {\n             return 1;\n-        } else if (x < 0 || x > 0x4000_0000 ) {\n+        } else if (x < 0 || x > 0x4000_0000) {\n             throw new IllegalArgumentException(\"Argument out of range\"\n                     + \" [0x0-0x40000000]. Argument was: \" + x);\n         }\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "224",
                    "column": "45",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/201/MathUtils.java\nindex eff05cb3f3d..17939a21d61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/201/MathUtils.java\n@@ -325,4 +325,4 @@ public class MathUtils {\n         return getSecureRandom().nextInt(lowerThan);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/201/MathUtils.java\nindex eff05cb3f3d..aa3e255e6bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/201/MathUtils.java\n@@ -16,20 +16,27 @@ import java.util.concurrent.ThreadLocalRandom;\n /**\n  * This is a utility class with mathematical helper functions.\n  */\n+\n+\n public class MathUtils {\n \n     /**\n      * The secure random object.\n      */\n+\n+\n     static SecureRandom secureRandom;\n \n     /**\n      * True if the secure random object is seeded.\n      */\n+\n+\n     static volatile boolean seeded;\n \n     private MathUtils() {\n         // utility class\n+\n     }\n \n \n@@ -43,6 +50,8 @@ public class MathUtils {\n      * @param blockSizePowerOf2 the block size\n      * @return the rounded value\n      */\n+\n+\n     public static int roundUpInt(int x, int blockSizePowerOf2) {\n         return (x + blockSizePowerOf2 - 1) & (-blockSizePowerOf2);\n     }\n@@ -57,6 +66,8 @@ public class MathUtils {\n      * @param blockSizePowerOf2 the block size\n      * @return the rounded value\n      */\n+\n+\n     public static long roundUpLong(long x, long blockSizePowerOf2) {\n         return (x + blockSizePowerOf2 - 1) & (-blockSizePowerOf2);\n     }\n@@ -74,20 +85,19 @@ public class MathUtils {\n             // On some systems, secureRandom.generateSeed() is very slow.\n             // In this case it is initialized using our own seed implementation\n             // and afterwards (in the thread) using the regular algorithm.\n-            Runnable runnable = () -> {\n-                try {\n-                    SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n-                    byte[] seed = sr.generateSeed(20);\n-                    synchronized (secureRandom) {\n-                        secureRandom.setSeed(seed);\n-                        seeded = true;\n-                    }\n-                } catch (Exception e) {\n+            Runnable runnable = ()-> {\n+                                    try {\n+                                        SecureRandom sr = SecureRandom.getInstance(\"SHA1PRNG\");\n+                                        byte[] seed = sr.generateSeed(20);\n+                                        synchronized (secureRandom) {\n+                                            secureRandom.setSeed(seed);\n+                                            seeded = true;\n+                                        }\n+                                    } catch (Exception e) {\n                     // NoSuchAlgorithmException\n-                    warn(\"SecureRandom\", e);\n-                }\n-            };\n-\n+                                        warn(\"SecureRandom\", e);\n+                                    }\n+                                };\n             try {\n                 Thread t = new Thread(runnable, \"Generate Seed\");\n                 // let the process terminate even if generating the seed is\n@@ -113,7 +123,6 @@ public class MathUtils {\n                 runnable.run();\n                 generateAlternativeSeed();\n             }\n-\n         } catch (Exception e) {\n             // NoSuchAlgorithmException\n             warn(\"SecureRandom\", e);\n@@ -127,6 +136,8 @@ public class MathUtils {\n      *\n      * @return the seed\n      */\n+\n+\n     public static byte[] generateAlternativeSeed() {\n         try {\n             ByteArrayOutputStream bout = new ByteArrayOutputStream();\n@@ -157,17 +168,12 @@ public class MathUtils {\n             // host name and ip addresses (if any)\n             try {\n                 // workaround for the Google App Engine: don't use InetAddress\n-                Class<?> inetAddressClass = Class.forName(\n-                        \"java.net.InetAddress\");\n-                Object localHost = inetAddressClass.getMethod(\n-                        \"getLocalHost\").invoke(null);\n-                String hostName = inetAddressClass.getMethod(\n-                        \"getHostName\").invoke(localHost).toString();\n+                Class<?> inetAddressClass = Class.forName(\"java.net.InetAddress\");\n+                Object localHost = inetAddressClass.getMethod(\"getLocalHost\").invoke(null);\n+                String hostName = inetAddressClass.getMethod(\"getHostName\").invoke(localHost).toString();\n                 out.writeUTF(hostName);\n-                Object[] list = (Object[]) inetAddressClass.getMethod(\n-                        \"getAllByName\", String.class).invoke(null, hostName);\n-                Method getAddress = inetAddressClass.getMethod(\n-                        \"getAddress\");\n+                Object[] list = (Object[]) inetAddressClass.getMethod(\"getAllByName\", String.class).invoke(null, hostName);\n+                Method getAddress = inetAddressClass.getMethod(\"getAddress\");\n                 for (Object o : list) {\n                     out.write((byte[]) getAddress.invoke(o));\n                 }\n@@ -175,6 +181,7 @@ public class MathUtils {\n                 // on some system, InetAddress is not supported\n                 // on some system, InetAddress.getLocalHost() doesn't work\n                 // for some reason (incorrect configuration)\n+\n             }\n \n             // timing (a second thread is already running usually)\n@@ -186,7 +193,6 @@ public class MathUtils {\n                 }\n                 out.writeInt(i);\n             }\n-\n             out.close();\n             return bout.toByteArray();\n         } catch (IOException e) {\n@@ -202,6 +208,8 @@ public class MathUtils {\n      * @param s the message to print\n      * @param t the stack trace\n      */\n+\n+\n     static void warn(String s, Throwable t) {\n         // not a fatal problem, but maybe reduced security\n         System.out.println(\"Warning: \" + s);\n@@ -218,12 +226,13 @@ public class MathUtils {\n      * @return the next power of two value\n      * @throws IllegalArgumentException if x < 0 or x > 0x40000000\n      */\n+\n+\n     public static int nextPowerOf2(int x) throws IllegalArgumentException {\n         if (x == 0) {\n             return 1;\n-        } else if (x < 0 || x > 0x4000_0000 ) {\n-            throw new IllegalArgumentException(\"Argument out of range\"\n-                    + \" [0x0-0x40000000]. Argument was: \" + x);\n+        } else if (x < 0 || x > 0x4000_0000) {\n+            throw new IllegalArgumentException(\"Argument out of range\" + \" [0x0-0x40000000]. Argument was: \" + x);\n         }\n         x--;\n         x |= x >> 1;\n@@ -242,12 +251,14 @@ public class MathUtils {\n      * @param l the value to convert\n      * @return the converted int value\n      */\n+\n+\n     public static int convertLongToInt(long l) {\n         if (l <= Integer.MIN_VALUE) {\n             return Integer.MIN_VALUE;\n         } else if (l >= Integer.MAX_VALUE) {\n             return Integer.MAX_VALUE;\n-        } else {\n+                                               } else {\n             return (int) l;\n         }\n     }\n@@ -260,12 +271,14 @@ public class MathUtils {\n      * @param i the value to convert\n      * @return the converted short value\n      */\n+\n+\n     public static short convertIntToShort(int i) {\n         if (i <= Short.MIN_VALUE) {\n             return Short.MIN_VALUE;\n         } else if (i >= Short.MAX_VALUE) {\n             return Short.MAX_VALUE;\n-        } else {\n+                                                 } else {\n             return (short) i;\n         }\n     }\n@@ -275,6 +288,8 @@ public class MathUtils {\n      *\n      * @return the random long value\n      */\n+\n+\n     public static long secureRandomLong() {\n         return getSecureRandom().nextLong();\n     }\n@@ -284,6 +299,8 @@ public class MathUtils {\n      *\n      * @param bytes the target array\n      */\n+\n+\n     public static void randomBytes(byte[] bytes) {\n         ThreadLocalRandom.current().nextBytes(bytes);\n     }\n@@ -294,6 +311,8 @@ public class MathUtils {\n      * @param len the number of bytes\n      * @return the random bytes\n      */\n+\n+\n     public static byte[] secureRandomBytes(int len) {\n         if (len <= 0) {\n             len = 1;\n@@ -310,6 +329,8 @@ public class MathUtils {\n      * @param lowerThan the value returned will be lower than this value\n      * @return the random long value\n      */\n+\n+\n     public static int randomInt(int lowerThan) {\n         return ThreadLocalRandom.current().nextInt(lowerThan);\n     }\n@@ -321,8 +342,10 @@ public class MathUtils {\n      * @param lowerThan the value returned will be lower than this value\n      * @return the random long value\n      */\n+\n+\n     public static int secureRandomInt(int lowerThan) {\n         return getSecureRandom().nextInt(lowerThan);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 63
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/201/MathUtils.java\nindex eff05cb3f3d..1a42261c3ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/201/MathUtils.java\n@@ -221,7 +221,7 @@ public class MathUtils {\n     public static int nextPowerOf2(int x) throws IllegalArgumentException {\n         if (x == 0) {\n             return 1;\n-        } else if (x < 0 || x > 0x4000_0000 ) {\n+        } else if (x < 0 || x > 0x4000_0000) {\n             throw new IllegalArgumentException(\"Argument out of range\"\n                     + \" [0x0-0x40000000]. Argument was: \" + x);\n         }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/201/MathUtils.java\nindex eff05cb3f3d..1a42261c3ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/201/MathUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/201/MathUtils.java\n@@ -221,7 +221,7 @@ public class MathUtils {\n     public static int nextPowerOf2(int x) throws IllegalArgumentException {\n         if (x == 0) {\n             return 1;\n-        } else if (x < 0 || x > 0x4000_0000 ) {\n+        } else if (x < 0 || x > 0x4000_0000) {\n             throw new IllegalArgumentException(\"Argument out of range\"\n                     + \" [0x0-0x40000000]. Argument was: \" + x);\n         }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}