{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2599",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2599/Path.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2599/Path.java\nindex 76f1d98aea6..3c0516ecd73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2599/Path.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2599/Path.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.util.Iterator;\n@@ -25,110 +26,113 @@ import java.util.Iterator;\n  * Represents a path in the graph. A path starts with a node followed by\n  * pairs of {@link Relationship} and {@link Node} objects. The shortest path\n  * is of length 0. Such a path contains only one node and no relationships.\n- *\n+ * <p>\n  * During a traversal {@link Path} instances are emitted where the current\n  * position of the traverser is represented by each such path. The current\n  * node in such a traversal is reached via {@link Path#endNode()}.\n  */\n public interface Path extends Iterable<PropertyContainer>\n {\n-    /**\n-     * Returns the start node of this path. It's also the first node returned\n-     * from the {@link #nodes()} iterable.\n-     * @return the start node.\n-     */\n-    Node startNode();\n+  /**\n+   * Returns the start node of this path. It's also the first node returned\n+   * from the {@link #nodes()} iterable.\n+   *\n+   * @return the start node.\n+   */\n+  Node startNode();\n \n-    /**\n-     * Returns the end node of this path. It's also the last node returned\n-     * from {@link #nodes()} iterable. If the {@link #length()} of this path\n-     * is 0 the end node returned by this method is the same as the start node.\n-     *\n-     * If a path is emitted from a traverser the end node is the current node\n-     * where the traverser is at the moment.\n-     *\n-     * @return the end node.\n-     */\n-    Node endNode();\n+  /**\n+   * Returns the end node of this path. It's also the last node returned\n+   * from {@link #nodes()} iterable. If the {@link #length()} of this path\n+   * is 0 the end node returned by this method is the same as the start node.\n+   * <p>\n+   * If a path is emitted from a traverser the end node is the current node\n+   * where the traverser is at the moment.\n+   *\n+   * @return the end node.\n+   */\n+  Node endNode();\n \n-    /**\n-     * Returns the last {@link Relationship} in this path.\n-     *\n-     * @return the last {@link Relationship} in this path, or <code>null</code>\n-     *         if this path contains no {@link Relationship}s.\n-     */\n-    Relationship lastRelationship();\n+  /**\n+   * Returns the last {@link Relationship} in this path.\n+   *\n+   * @return the last {@link Relationship} in this path, or <code>null</code>\n+   * if this path contains no {@link Relationship}s.\n+   */\n+  Relationship lastRelationship();\n \n-    /**\n-     * Returns all the relationships in between the nodes which this path\n-     * consists of. For a path with {@link #length()} 0 this will be an\n-     * empty {@link Iterable}.\n-     * @return the relationships in this path.\n-     */\n-    Iterable<Relationship> relationships();\n+  /**\n+   * Returns all the relationships in between the nodes which this path\n+   * consists of. For a path with {@link #length()} 0 this will be an\n+   * empty {@link Iterable}.\n+   *\n+   * @return the relationships in this path.\n+   */\n+  Iterable<Relationship> relationships();\n \n-    /**\n-     * Returns all the relationships in between the nodes which this path\n-     * consists of in reverse order, i.e. starting from the {@link #lastRelationship()}\n-     * going backwards towards the first relationship in the path.\n-     * For a path with {@link #length()} 0 this will be an empty {@link Iterable}.\n-     * @return the relationships in this path in reverse order.\n-     */\n-    Iterable<Relationship> reverseRelationships();\n+  /**\n+   * Returns all the relationships in between the nodes which this path\n+   * consists of in reverse order, i.e. starting from the {@link #lastRelationship()}\n+   * going backwards towards the first relationship in the path.\n+   * For a path with {@link #length()} 0 this will be an empty {@link Iterable}.\n+   *\n+   * @return the relationships in this path in reverse order.\n+   */\n+  Iterable<Relationship> reverseRelationships();\n \n-    /**\n-     * Returns all the nodes in this path starting from the start node going\n-     * forward towards the end node. The first node is the same as\n-     * {@link #startNode()} and the last node is the same as {@link #endNode()}.\n-     * In between those nodes there can be an arbitrary number of nodes. The\n-     * shortest path possible is just one node, where also the the start node is\n-     * the same as the end node.\n-     *\n-     * @return the nodes in this path.\n-     */\n-    Iterable<Node> nodes();\n+  /**\n+   * Returns all the nodes in this path starting from the start node going\n+   * forward towards the end node. The first node is the same as\n+   * {@link #startNode()} and the last node is the same as {@link #endNode()}.\n+   * In between those nodes there can be an arbitrary number of nodes. The\n+   * shortest path possible is just one node, where also the the start node is\n+   * the same as the end node.\n+   *\n+   * @return the nodes in this path.\n+   */\n+  Iterable<Node> nodes();\n \n-    /**\n-     * Returns all the nodes in this path in reversed order, i.e. starting from the\n-     * end node going backwards instead of from the start node going forwards.\n-     * The first node is the same as {@link #endNode()} and the last node is the\n-     * same as {@link #startNode()}. In between those nodes there can be an arbitrary\n-     * number of nodes. The shortest path possible is just one node, where also the\n-     * the start node is the same as the end node.\n-     *\n-     * @return the nodes in this path starting from the end node going backwards\n-     * towards the start node.\n-     */\n-    Iterable<Node> reverseNodes();\n+  /**\n+   * Returns all the nodes in this path in reversed order, i.e. starting from the\n+   * end node going backwards instead of from the start node going forwards.\n+   * The first node is the same as {@link #endNode()} and the last node is the\n+   * same as {@link #startNode()}. In between those nodes there can be an arbitrary\n+   * number of nodes. The shortest path possible is just one node, where also the\n+   * the start node is the same as the end node.\n+   *\n+   * @return the nodes in this path starting from the end node going backwards\n+   * towards the start node.\n+   */\n+  Iterable<Node> reverseNodes();\n \n-    /**\n-     * Returns the length of this path. That is the number of relationships\n-     * (which is the same as the number of nodes minus one). The shortest path\n-     * possible is of length 0.\n-     *\n-     * @return the length (i.e. the number of relationships) in the path.\n-     */\n-    int length();\n+  /**\n+   * Returns the length of this path. That is the number of relationships\n+   * (which is the same as the number of nodes minus one). The shortest path\n+   * possible is of length 0.\n+   *\n+   * @return the length (i.e. the number of relationships) in the path.\n+   */\n+  int length();\n \n-    /**\n-     * Returns a natural string representation of this path.\n-     *\n-     * The string representation shows the nodes with relationships\n-     * (and their directions) in between them.\n-     *\n-     * @return A string representation of the path.\n-     */\n-    @Override\n-    String toString();\n+  /**\n+   * Returns a natural string representation of this path.\n+   * <p>\n+   * The string representation shows the nodes with relationships\n+   * (and their directions) in between them.\n+   *\n+   * @return A string representation of the path.\n+   */\n+  @Override\n+  String toString();\n \n-    /**\n-     * Iterates through both the {@link Node}s and {@link Relationship}s of this\n-     * path in order. Interleaving {@link Node}s with {@link Relationship}s,\n-     * starting and ending with a {@link Node} (the {@link #startNode()} and\n-     * {@link #endNode()} respectively).\n-     *\n-     * @see Iterable#iterator()\n-     */\n-    @Override\n-    Iterator<PropertyContainer> iterator();\n+  /**\n+   * Iterates through both the {@link Node}s and {@link Relationship}s of this\n+   * path in order. Interleaving {@link Node}s with {@link Relationship}s,\n+   * starting and ending with a {@link Node} (the {@link #startNode()} and\n+   * {@link #endNode()} respectively).\n+   *\n+   * @see Iterable#iterator()\n+   */\n+  @Override\n+  Iterator<PropertyContainer> iterator();\n }\n",
            "diff_size": 95
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2599/Path.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2599/Path.java\nindex 76f1d98aea6..97bdd799c68 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2599/Path.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2599/Path.java\n@@ -131,4 +131,4 @@ public interface Path extends Iterable<PropertyContainer>\n      */\n     @Override\n     Iterator<PropertyContainer> iterator();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}