{
    "project_name": "graphfoundation-ongdb",
    "error_id": "118",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "142",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/118/SimpleBitSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/118/SimpleBitSet.java\nindex 770cfb2397a..2d4610f4f21 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/118/SimpleBitSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/118/SimpleBitSet.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.collection;\n \n import java.util.Arrays;\n@@ -44,162 +45,161 @@ import org.neo4j.collection.primitive.PrimitiveIntIterator;\n  */\n public class SimpleBitSet extends StampedLock implements PrimitiveIntIterable\n {\n-    private long lastCheckPointKey;\n-    private long[] data;\n-\n-    public SimpleBitSet( int size )\n+  private long lastCheckPointKey;\n+  private long[] data;\n+\n+  public SimpleBitSet(int size)\n+  {\n+    int initialCapacity = size / 64;\n+    int capacity = 1;\n+    while (capacity < initialCapacity)\n     {\n-        int initialCapacity = size / 64;\n-        int capacity = 1;\n-        while ( capacity < initialCapacity )\n-        {\n-            capacity <<= 1;\n-        }\n-        long stamp = writeLock();\n-        data = new long[capacity];\n-        unlockWrite( stamp );\n+      capacity <<= 1;\n     }\n-\n-    public boolean contains( int key )\n+    long stamp = writeLock();\n+    data = new long[capacity];\n+    unlockWrite(stamp);\n+  }\n+\n+  public boolean contains(int key)\n+  {\n+    int idx = key >>> 6;\n+    boolean result;\n+    long stamp;\n+    do\n     {\n-        int idx = key >>> 6;\n-        boolean result;\n-        long stamp;\n-        do\n-        {\n-            stamp = tryOptimisticRead();\n-            result = data.length > idx && (data[idx] & ((1L << (key & 63)))) != 0;\n-        }\n-        while ( !validate( stamp ) );\n-        return result;\n+      stamp = tryOptimisticRead();\n+      result = data.length > idx && (data[idx] & ((1L << (key & 63)))) != 0;\n     }\n-\n-    public void put( int key )\n+    while (!validate(stamp));\n+    return result;\n+  }\n+\n+  public void put(int key)\n+  {\n+    long stamp = writeLock();\n+    int idx = key >>> 6;\n+    ensureCapacity(idx);\n+    data[idx] = data[idx] | (1L << (key & 63));\n+    unlockWrite(stamp);\n+  }\n+\n+  public void put(SimpleBitSet other)\n+  {\n+    long stamp = writeLock();\n+    ensureCapacity(other.data.length - 1);\n+    for (int i = 0; i < data.length && i < other.data.length; i++)\n     {\n-        long stamp = writeLock();\n-        int idx = key >>> 6;\n-        ensureCapacity( idx );\n-        data[idx] = data[idx] | (1L << (key & 63));\n-        unlockWrite( stamp );\n+      data[i] = data[i] | other.data[i];\n     }\n-\n-    public void put( SimpleBitSet other )\n+    unlockWrite(stamp);\n+  }\n+\n+  public void remove(int key)\n+  {\n+    long stamp = writeLock();\n+    int idx = key >>> 6;\n+    if (data.length > idx)\n     {\n-        long stamp = writeLock();\n-        ensureCapacity( other.data.length - 1 );\n-        for ( int i = 0; i < data.length && i < other.data.length; i++ )\n-        {\n-            data[i] = data[i] | other.data[i];\n-        }\n-        unlockWrite( stamp );\n+      data[idx] = data[idx] & ~(1L << (key & 63));\n     }\n+    unlockWrite(stamp);\n+  }\n \n-    public void remove( int key )\n+  public void remove(SimpleBitSet other)\n+  {\n+    long stamp = writeLock();\n+    for (int i = 0; i < data.length; i++)\n     {\n-        long stamp = writeLock();\n-        int idx = key >>> 6;\n-        if ( data.length > idx )\n-        {\n-            data[idx] = data[idx] & ~(1L << (key & 63));\n-        }\n-        unlockWrite( stamp );\n+      data[i] = data[i] & ~other.data[i];\n     }\n+    unlockWrite(stamp);\n+  }\n \n-    public void remove( SimpleBitSet other )\n+  public long checkPointAndPut(long checkPoint, int key)\n+  {\n+    // We only need to clear the bit set if it was modified since the last check point\n+    if (!validate(checkPoint) || key != lastCheckPointKey)\n     {\n-        long stamp = writeLock();\n-        for ( int i = 0; i < data.length; i++ )\n-        {\n-            data[i] = data[i] & ~other.data[i];\n-        }\n-        unlockWrite( stamp );\n+      long stamp = writeLock();\n+      int idx = key >>> 6;\n+      if (idx < data.length)\n+      {\n+        Arrays.fill(data, 0);\n+      } else\n+      {\n+        int len = data.length;\n+        len = findNewLength(idx, len);\n+        data = new long[len];\n+      }\n+      data[idx] = data[idx] | (1L << (key & 63));\n+      lastCheckPointKey = key;\n+      checkPoint = tryConvertToOptimisticRead(stamp);\n     }\n+    return checkPoint;\n+  }\n \n-    public long checkPointAndPut( long checkPoint, int key )\n+  private int findNewLength(int idx, int len)\n+  {\n+    while (len <= idx)\n     {\n-        // We only need to clear the bit set if it was modified since the last check point\n-        if ( !validate( checkPoint ) || key != lastCheckPointKey )\n-        {\n-            long stamp = writeLock();\n-            int idx = key >>> 6;\n-            if ( idx < data.length )\n-            {\n-                Arrays.fill( data, 0 );\n-            }\n-            else\n-            {\n-                int len = data.length;\n-                len = findNewLength( idx, len );\n-                data = new long[len];\n-            }\n-            data[idx] = data[idx] | (1L << (key & 63));\n-            lastCheckPointKey = key;\n-            checkPoint = tryConvertToOptimisticRead( stamp );\n-        }\n-        return checkPoint;\n+      len *= 2;\n     }\n+    return len;\n+  }\n \n-    private int findNewLength( int idx, int len )\n+  public int size()\n+  {\n+    int size = 0;\n+    for (long s : data)\n     {\n-        while ( len <= idx )\n-        {\n-            len *= 2;\n-        }\n-        return len;\n+      size += Long.bitCount(s);\n     }\n-\n-    public int size()\n+    return size;\n+  }\n+\n+  private void ensureCapacity(int arrayIndex)\n+  {\n+    data = Arrays.copyOf(data, findNewLength(arrayIndex, data.length));\n+  }\n+\n+  //\n+  // Views\n+  //\n+\n+  @Override\n+  public PrimitiveIntIterator iterator()\n+  {\n+    return new PrimitiveIntIterator()\n     {\n-        int size = 0;\n-        for ( long s : data )\n+      private int next;\n+      private final int size = data.length * 64;\n+\n+      {\n+        // Prefetch first\n+        while (next < size && !contains(next))\n         {\n-            size += Long.bitCount( s );\n+          next++;\n         }\n-        return size;\n-    }\n-\n-    private void ensureCapacity( int arrayIndex )\n-    {\n-        data = Arrays.copyOf( data, findNewLength( arrayIndex, data.length ) );\n-    }\n-\n-    //\n-    // Views\n-    //\n-\n-    @Override\n-    public PrimitiveIntIterator iterator()\n-    {\n-        return new PrimitiveIntIterator()\n+      }\n+\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return next < size;\n+      }\n+\n+      @Override\n+      public int next()\n+      {\n+        int current = next;\n+        next++;\n+        while (next < size && !contains(next))\n         {\n-            private int next;\n-            private final int size = data.length * 64;\n-\n-            {\n-                // Prefetch first\n-                while ( next < size && !contains( next ) )\n-                {\n-                    next++;\n-                }\n-            }\n-\n-            @Override\n-            public boolean hasNext()\n-            {\n-                return next < size;\n-            }\n-\n-            @Override\n-            public int next()\n-            {\n-                int current = next;\n-                next++;\n-                while ( next < size && !contains( next ) )\n-                {\n-                    next++;\n-                }\n-                return current;\n-            }\n-        };\n-    }\n+          next++;\n+        }\n+        return current;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 215
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "33",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "102",
                    "column": "25",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "202",
                    "column": "43",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/118/SimpleBitSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/118/SimpleBitSet.java\nindex 770cfb2397a..d46190203bb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/118/SimpleBitSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/118/SimpleBitSet.java\n@@ -68,7 +68,7 @@ public class SimpleBitSet extends StampedLock implements PrimitiveIntIterable\n         do\n         {\n             stamp = tryOptimisticRead();\n-            result = data.length > idx && (data[idx] & ((1L << (key & 63)))) != 0;\n+            result = data.length> idx && (data[idx] & (( 1L << ( key & 63 ) ))) != 0;\n         }\n         while ( !validate( stamp ) );\n         return result;\n@@ -79,7 +79,7 @@ public class SimpleBitSet extends StampedLock implements PrimitiveIntIterable\n         long stamp = writeLock();\n         int idx = key >>> 6;\n         ensureCapacity( idx );\n-        data[idx] = data[idx] | (1L << (key & 63));\n+        data[idx] = data[idx] | ( 1L << ( key & 63 ));\n         unlockWrite( stamp );\n     }\n \n@@ -91,18 +91,20 @@ public class SimpleBitSet extends StampedLock implements PrimitiveIntIterable\n         {\n             data[i] = data[i] | other.data[i];\n         }\n-        unlockWrite( stamp );\n+\n+unlockWrite( stamp );\n     }\n \n     public void remove( int key )\n     {\n         long stamp = writeLock();\n         int idx = key >>> 6;\n-        if ( data.length > idx )\n+        if ( data.length> idx )\n         {\n-            data[idx] = data[idx] & ~(1L << (key & 63));\n+            data[idx] = data[idx] & ~( 1L << ( key & 63 ));\n         }\n-        unlockWrite( stamp );\n+\n+unlockWrite( stamp );\n     }\n \n     public void remove( SimpleBitSet other )\n@@ -112,7 +114,8 @@ public class SimpleBitSet extends StampedLock implements PrimitiveIntIterable\n         {\n             data[i] = data[i] & ~other.data[i];\n         }\n-        unlockWrite( stamp );\n+\n+unlockWrite( stamp );\n     }\n \n     public long checkPointAndPut( long checkPoint, int key )\n@@ -132,11 +135,13 @@ public class SimpleBitSet extends StampedLock implements PrimitiveIntIterable\n                 len = findNewLength( idx, len );\n                 data = new long[len];\n             }\n-            data[idx] = data[idx] | (1L << (key & 63));\n+\n+data[idx] = data[idx] | ( 1L << ( key & 63 ));\n             lastCheckPointKey = key;\n             checkPoint = tryConvertToOptimisticRead( stamp );\n         }\n-        return checkPoint;\n+\n+return checkPoint;\n     }\n \n     private int findNewLength( int idx, int len )\n@@ -145,7 +150,8 @@ public class SimpleBitSet extends StampedLock implements PrimitiveIntIterable\n         {\n             len *= 2;\n         }\n-        return len;\n+\n+return len;\n     }\n \n     public int size()\n@@ -155,7 +161,8 @@ public class SimpleBitSet extends StampedLock implements PrimitiveIntIterable\n         {\n             size += Long.bitCount( s );\n         }\n-        return size;\n+\n+return size;\n     }\n \n     private void ensureCapacity( int arrayIndex )\n@@ -192,14 +199,14 @@ public class SimpleBitSet extends StampedLock implements PrimitiveIntIterable\n             @Override\n             public int next()\n             {\n-                int current = next;\n-                next++;\n+                int current = next; next++;\n                 while ( next < size && !contains( next ) )\n                 {\n                     next++;\n                 }\n-                return current;\n+\n+return current;\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}