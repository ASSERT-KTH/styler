{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4335",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4335/IndexBackedConstraintDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4335/IndexBackedConstraintDescriptor.java\nindex 0083b4862c6..8495a74e8e3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4335/IndexBackedConstraintDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4335/IndexBackedConstraintDescriptor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.schema.constaints;\n \n import org.neo4j.internal.kernel.api.TokenNameLookup;\n@@ -28,35 +29,35 @@ import org.neo4j.kernel.api.schema.index.SchemaIndexDescriptorFactory;\n \n public abstract class IndexBackedConstraintDescriptor extends ConstraintDescriptor implements LabelSchemaSupplier\n {\n-    private final LabelSchemaDescriptor schema;\n-\n-    IndexBackedConstraintDescriptor( Type type, LabelSchemaDescriptor schema )\n-    {\n-        super( type );\n-        this.schema = schema;\n-    }\n-\n-    @Override\n-    public LabelSchemaDescriptor schema()\n-    {\n-        return schema;\n-    }\n-\n-    public SchemaIndexDescriptor ownedIndexDescriptor()\n-    {\n-        return SchemaIndexDescriptorFactory.uniqueForSchema( schema );\n-    }\n-\n-    @Override\n-    public String prettyPrint( TokenNameLookup tokenNameLookup )\n-    {\n-        String labelName = escapeLabelOrRelTyp( tokenNameLookup.labelGetName( schema.getLabelId() ) );\n-        String nodeName = labelName.toLowerCase();\n-        String properties = SchemaUtil.niceProperties( tokenNameLookup, schema.getPropertyIds(), nodeName + \".\",\n-                schema().getPropertyIds().length > 1 );\n-        return String.format( \"CONSTRAINT ON ( %s:%s ) ASSERT %s IS %s\", nodeName, labelName, properties,\n-                constraintTypeText() );\n-    }\n-\n-    protected abstract String constraintTypeText();\n+  private final LabelSchemaDescriptor schema;\n+\n+  IndexBackedConstraintDescriptor(Type type, LabelSchemaDescriptor schema)\n+  {\n+    super(type);\n+    this.schema = schema;\n+  }\n+\n+  @Override\n+  public LabelSchemaDescriptor schema()\n+  {\n+    return schema;\n+  }\n+\n+  public SchemaIndexDescriptor ownedIndexDescriptor()\n+  {\n+    return SchemaIndexDescriptorFactory.uniqueForSchema(schema);\n+  }\n+\n+  @Override\n+  public String prettyPrint(TokenNameLookup tokenNameLookup)\n+  {\n+    String labelName = escapeLabelOrRelTyp(tokenNameLookup.labelGetName(schema.getLabelId()));\n+    String nodeName = labelName.toLowerCase();\n+    String properties = SchemaUtil.niceProperties(tokenNameLookup, schema.getPropertyIds(), nodeName + \".\",\n+        schema().getPropertyIds().length > 1);\n+    return String.format(\"CONSTRAINT ON ( %s:%s ) ASSERT %s IS %s\", nodeName, labelName, properties,\n+        constraintTypeText());\n+  }\n+\n+  protected abstract String constraintTypeText();\n }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "49",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4335/IndexBackedConstraintDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4335/IndexBackedConstraintDescriptor.java\nindex 0083b4862c6..47f821b103c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4335/IndexBackedConstraintDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4335/IndexBackedConstraintDescriptor.java\n@@ -53,10 +53,10 @@ public abstract class IndexBackedConstraintDescriptor extends ConstraintDescript\n         String labelName = escapeLabelOrRelTyp( tokenNameLookup.labelGetName( schema.getLabelId() ) );\n         String nodeName = labelName.toLowerCase();\n         String properties = SchemaUtil.niceProperties( tokenNameLookup, schema.getPropertyIds(), nodeName + \".\",\n-                schema().getPropertyIds().length > 1 );\n-        return String.format( \"CONSTRAINT ON ( %s:%s ) ASSERT %s IS %s\", nodeName, labelName, properties,\n+                schema().getPropertyIds().length> 1 );\n+return String.format( \"CONSTRAINT ON ( %s:%s ) ASSERT %s IS %s\", nodeName, labelName, properties,\n                 constraintTypeText() );\n     }\n \n     protected abstract String constraintTypeText();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}