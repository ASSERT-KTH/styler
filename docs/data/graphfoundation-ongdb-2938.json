{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2938",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "124",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2938/Result.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2938/Result.java\nindex a09230c5463..a5d6bc193e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2938/Result.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2938/Result.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb;\n \n import java.io.PrintWriter;\n@@ -77,191 +78,193 @@ import java.util.Map;\n  * distinguish between these cases the {@link QueryExecutionType} {@linkplain #getQueryExecutionType() of this result}\n  * can be queried.\n  */\n-public interface Result extends ResourceIterator<Map<String,Object>>\n+public interface Result extends ResourceIterator<Map<String, Object>>\n {\n-    /**\n-     * Indicates what kind of query execution produced this result.\n-     *\n-     * @return an object that indicates what kind of query was executed to produce this result.\n-     */\n-    QueryExecutionType getQueryExecutionType();\n+  /**\n+   * Indicates what kind of query execution produced this result.\n+   *\n+   * @return an object that indicates what kind of query was executed to produce this result.\n+   */\n+  QueryExecutionType getQueryExecutionType();\n \n-    /**\n-     * The exact names used to represent each column in the result set.\n-     *\n-     * @return List of the column names.\n-     */\n-    List<String> columns();\n+  /**\n+   * The exact names used to represent each column in the result set.\n+   *\n+   * @return List of the column names.\n+   */\n+  List<String> columns();\n \n-    /**\n-     * Returns an iterator with the result objects from a single column of the result set. This method is best used for\n-     * single column results.\n-     * <p>\n-     * <strong>To ensure that any resources, including transactions bound to it, are properly closed, the iterator must\n-     * either be fully exhausted, or the {@link org.neo4j.graphdb.ResourceIterator#close() close()} method must be\n-     * called.</strong>\n-     * <p>\n-     * As an example, if we are only interested in a column {@code n} that contains node values, we can extract it like\n-     * this:\n-     * <pre><code>\n-     *     try ( ResourceIterator&lt;Node&gt; nodes = result.columnAs( \"n\" ) )\n-     *     {\n-     *         while ( nodes.hasNext() )\n-     *         {\n-     *             Node node = nodes.next();\n-     *             // Do some work with the 'node' instance.\n-     *         }\n-     *     }\n-     * </code></pre>\n-     *\n-     * @param name exact name of the column, as it appeared in the original query\n-     * @param <T> desired type cast for the result objects\n-     * @return an iterator of the result objects, possibly empty\n-     * @throws ClassCastException when the result object can not be cast to the requested type\n-     * @throws org.neo4j.graphdb.NotFoundException when the column name does not appear in the original query\n-     */\n-    <T> ResourceIterator<T> columnAs( String name );\n+  /**\n+   * Returns an iterator with the result objects from a single column of the result set. This method is best used for\n+   * single column results.\n+   * <p>\n+   * <strong>To ensure that any resources, including transactions bound to it, are properly closed, the iterator must\n+   * either be fully exhausted, or the {@link org.neo4j.graphdb.ResourceIterator#close() close()} method must be\n+   * called.</strong>\n+   * <p>\n+   * As an example, if we are only interested in a column {@code n} that contains node values, we can extract it like\n+   * this:\n+   * <pre><code>\n+   *     try ( ResourceIterator&lt;Node&gt; nodes = result.columnAs( \"n\" ) )\n+   *     {\n+   *         while ( nodes.hasNext() )\n+   *         {\n+   *             Node node = nodes.next();\n+   *             // Do some work with the 'node' instance.\n+   *         }\n+   *     }\n+   * </code></pre>\n+   *\n+   * @param name exact name of the column, as it appeared in the original query\n+   * @param <T>  desired type cast for the result objects\n+   * @return an iterator of the result objects, possibly empty\n+   * @throws ClassCastException                  when the result object can not be cast to the requested type\n+   * @throws org.neo4j.graphdb.NotFoundException when the column name does not appear in the original query\n+   */\n+  <T> ResourceIterator<T> columnAs(String name);\n \n-    /**\n-     * Denotes there being more rows available in this result. These rows must either be consumed, by invoking\n-     * {@link #next()}, or the result has to be {@link #close() closed}.\n-     *\n-     * @return {@code true} if there is more rows available in this result, {@code false} otherwise.\n-     */\n-    @Override\n-    boolean hasNext();\n+  /**\n+   * Denotes there being more rows available in this result. These rows must either be consumed, by invoking\n+   * {@link #next()}, or the result has to be {@link #close() closed}.\n+   *\n+   * @return {@code true} if there is more rows available in this result, {@code false} otherwise.\n+   */\n+  @Override\n+  boolean hasNext();\n \n-    /**\n-     * Returns the next row in this result.\n-     *\n-     * @return the next row in this result.\n-     */\n-    @Override\n-    Map<String,Object> next();\n+  /**\n+   * Returns the next row in this result.\n+   *\n+   * @return the next row in this result.\n+   */\n+  @Override\n+  Map<String, Object> next();\n \n-    /**\n-     * Closes the result, freeing up any resources held by the result.\n-     * <p>\n-     * This is an idempotent operation, invoking it multiple times has the same effect as invoking it exactly once.\n-     * It is thus safe (and even encouraged, for style and simplicity) to invoke this method even after consuming all\n-     * rows in the result through the {@link #next() next-method}.\n-     */\n-    @Override\n-    void close();\n+  /**\n+   * Closes the result, freeing up any resources held by the result.\n+   * <p>\n+   * This is an idempotent operation, invoking it multiple times has the same effect as invoking it exactly once.\n+   * It is thus safe (and even encouraged, for style and simplicity) to invoke this method even after consuming all\n+   * rows in the result through the {@link #next() next-method}.\n+   */\n+  @Override\n+  void close();\n \n-    /**\n-     * Statistics about the effects of the query.\n-     *\n-     * @return statistics about the effects of the query.\n-     */\n-    QueryStatistics getQueryStatistics();\n+  /**\n+   * Statistics about the effects of the query.\n+   *\n+   * @return statistics about the effects of the query.\n+   */\n+  QueryStatistics getQueryStatistics();\n \n-    /**\n-     * Returns a description of the query plan used to produce this result.\n-     * <p>\n-     * Retrieving a description of the execution plan that was executed is always possible, regardless of whether the\n-     * query requested a plan or not. For implementing a client with the ability to present the plan to the user, it is\n-     * useful to be able to tell if the query requested a description of the plan or not. For these purposes the\n-     * {@link QueryExecutionType#requestedExecutionPlanDescription()}-method is used.\n-     * <p>\n-     * Being able to invoke this method, regardless of whether the user requested the plan or not is useful for\n-     * purposes of debugging queries in applications.\n-     *\n-     * @return a description of the query plan used to produce this result.\n-     */\n-    ExecutionPlanDescription getExecutionPlanDescription();\n+  /**\n+   * Returns a description of the query plan used to produce this result.\n+   * <p>\n+   * Retrieving a description of the execution plan that was executed is always possible, regardless of whether the\n+   * query requested a plan or not. For implementing a client with the ability to present the plan to the user, it is\n+   * useful to be able to tell if the query requested a description of the plan or not. For these purposes the\n+   * {@link QueryExecutionType#requestedExecutionPlanDescription()}-method is used.\n+   * <p>\n+   * Being able to invoke this method, regardless of whether the user requested the plan or not is useful for\n+   * purposes of debugging queries in applications.\n+   *\n+   * @return a description of the query plan used to produce this result.\n+   */\n+  ExecutionPlanDescription getExecutionPlanDescription();\n \n-    /**\n-     * Provides a textual representation of the query result.\n-     * <p><b>\n-     * The execution result represented by this object will be consumed in its entirety after this method is called.\n-     * Calling any of the other iterating methods on it should not be expected to return any results.\n-     * </b></p>\n-     *\n-     * @return the execution result formatted as a string\n-     */\n-    String resultAsString();\n+  /**\n+   * Provides a textual representation of the query result.\n+   * <p><b>\n+   * The execution result represented by this object will be consumed in its entirety after this method is called.\n+   * Calling any of the other iterating methods on it should not be expected to return any results.\n+   * </b></p>\n+   *\n+   * @return the execution result formatted as a string\n+   */\n+  String resultAsString();\n \n-    /**\n-     * Provides a textual representation of the query result to the provided {@link java.io.PrintWriter}.\n-     * <p><b>\n-     * The execution result represented by this object will be consumed in its entirety after this method is called.\n-     * Calling any of the other iterating methods on it should not be expected to return any results.\n-     * </b></p>\n-     *\n-     * @param writer the {@link java.io.PrintWriter} to receive the textual representation of the query result.\n-     */\n-    void writeAsStringTo( PrintWriter writer );\n+  /**\n+   * Provides a textual representation of the query result to the provided {@link java.io.PrintWriter}.\n+   * <p><b>\n+   * The execution result represented by this object will be consumed in its entirety after this method is called.\n+   * Calling any of the other iterating methods on it should not be expected to return any results.\n+   * </b></p>\n+   *\n+   * @param writer the {@link java.io.PrintWriter} to receive the textual representation of the query result.\n+   */\n+  void writeAsStringTo(PrintWriter writer);\n \n-    /** Removing rows from the result is not supported. */\n-    @Override\n-    void remove();\n+  /**\n+   * Removing rows from the result is not supported.\n+   */\n+  @Override\n+  void remove();\n \n-    /**\n-     * Provides notifications about the query producing this result.\n-     * <p>\n-     * Notifications can be warnings about problematic queries or other valuable information that can be\n-     * presented in a client.\n-     *\n-     * @return an iterable of all notifications created when running the query.\n-     */\n-    Iterable<Notification> getNotifications();\n+  /**\n+   * Provides notifications about the query producing this result.\n+   * <p>\n+   * Notifications can be warnings about problematic queries or other valuable information that can be\n+   * presented in a client.\n+   *\n+   * @return an iterable of all notifications created when running the query.\n+   */\n+  Iterable<Notification> getNotifications();\n \n-    /**\n-     * Visits all rows in this Result by iterating over them.\n-     * <p>\n-     * This is an alternative to using the iterator form of Result. Using the visitor is better from a object\n-     * creation perspective.\n-     *\n-     * @param visitor the ResultVisitor instance that will see the results of the visit.\n-     * @param <VisitationException> the type of the exception that might get thrown\n-     * @throws VisitationException if the {@code visit(ResultRow)} method of {@link ResultVisitor} throws such an\n-     * exception.\n-     */\n-    <VisitationException extends Exception> void accept( ResultVisitor<VisitationException> visitor )\n-            throws VisitationException;\n+  /**\n+   * Visits all rows in this Result by iterating over them.\n+   * <p>\n+   * This is an alternative to using the iterator form of Result. Using the visitor is better from a object\n+   * creation perspective.\n+   *\n+   * @param visitor               the ResultVisitor instance that will see the results of the visit.\n+   * @param <VisitationException> the type of the exception that might get thrown\n+   * @throws VisitationException if the {@code visit(ResultRow)} method of {@link ResultVisitor} throws such an\n+   *                             exception.\n+   */\n+  <VisitationException extends Exception> void accept(ResultVisitor<VisitationException> visitor)\n+      throws VisitationException;\n \n-    /**\n-     * Describes a row of a result. The contents of this object is only stable during the\n-     * call to the {@code visit(ResultRow)} method of {@link ResultVisitor}.\n-     * The data it contains can change between calls to the {@code visit(ResultRow)} method.\n-     * Instances of this type should thus not be saved\n-     * for later use, or shared with other threads, rather the content should be copied.\n-     */\n-    interface ResultRow\n-    {\n-        // TODO: Type safe getters for collections and maps?\n-        Node getNode( String key );\n+  /**\n+   * Describes a row of a result. The contents of this object is only stable during the\n+   * call to the {@code visit(ResultRow)} method of {@link ResultVisitor}.\n+   * The data it contains can change between calls to the {@code visit(ResultRow)} method.\n+   * Instances of this type should thus not be saved\n+   * for later use, or shared with other threads, rather the content should be copied.\n+   */\n+  interface ResultRow\n+  {\n+    // TODO: Type safe getters for collections and maps?\n+    Node getNode(String key);\n \n-        Relationship getRelationship( String key );\n+    Relationship getRelationship(String key);\n \n-        Object get( String key );\n+    Object get(String key);\n \n-        String getString( String key );\n+    String getString(String key);\n \n-        Number getNumber( String key );\n+    Number getNumber(String key);\n \n-        Boolean getBoolean( String key );\n+    Boolean getBoolean(String key);\n \n-        Path getPath( String key );\n-    }\n+    Path getPath(String key);\n+  }\n \n+  /**\n+   * This is the visitor interface you need to implement to use the {@link Result#accept(ResultVisitor)} method.\n+   */\n+  interface ResultVisitor<VisitationException extends Exception>\n+  {\n     /**\n-     * This is the visitor interface you need to implement to use the {@link Result#accept(ResultVisitor)} method.\n+     * Visits the specified row.\n+     *\n+     * @param row the row to visit. The row object is only guaranteed to be stable until flow of control has\n+     *            returned from this method.\n+     * @return true if the next row should also be visited. Returning false will terminate the iteration of\n+     * result rows.\n+     * @throws VisitationException if there is a problem in the execution of this method. This exception will close\n+     *                             the result being visited, and the exception will propagate out through the\n+     *                             {@linkplain #accept(ResultVisitor) accept method}.\n      */\n-    interface ResultVisitor<VisitationException extends Exception>\n-    {\n-        /**\n-         * Visits the specified row.\n-         *\n-         * @param row the row to visit. The row object is only guaranteed to be stable until flow of control has\n-         * returned from this method.\n-         * @return true if the next row should also be visited. Returning false will terminate the iteration of\n-         * result rows.\n-         * @throws VisitationException if there is a problem in the execution of this method. This exception will close\n-         * the result being visited, and the exception will propagate out through the\n-         * {@linkplain #accept(ResultVisitor) accept method}.\n-         */\n-        boolean visit( ResultRow row ) throws VisitationException;\n-    }\n+    boolean visit(ResultRow row) throws VisitationException;\n+  }\n }\n",
            "diff_size": 180
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2938/Result.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2938/Result.java\nindex a09230c5463..8def16061b5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2938/Result.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2938/Result.java\n@@ -218,10 +218,9 @@ public interface Result extends ResourceIterator<Map<String,Object>>\n      * @throws VisitationException if the {@code visit(ResultRow)} method of {@link ResultVisitor} throws such an\n      * exception.\n      */\n-    <VisitationException extends Exception> void accept( ResultVisitor<VisitationException> visitor )\n-            throws VisitationException;\n+    <VisitationException extends Exception> void accept( ResultVisitor<VisitationException> visitor ) throws VisitationException;\n \n-    /**\n+/**\n      * Describes a row of a result. The contents of this object is only stable during the\n      * call to the {@code visit(ResultRow)} method of {@link ResultVisitor}.\n      * The data it contains can change between calls to the {@code visit(ResultRow)} method.\n@@ -232,18 +231,12 @@ public interface Result extends ResourceIterator<Map<String,Object>>\n     {\n         // TODO: Type safe getters for collections and maps?\n         Node getNode( String key );\n-\n-        Relationship getRelationship( String key );\n-\n-        Object get( String key );\n-\n-        String getString( String key );\n-\n-        Number getNumber( String key );\n-\n-        Boolean getBoolean( String key );\n-\n-        Path getPath( String key );\n+Relationship getRelationship( String key );\n+Object get( String key );\n+String getString( String key );\n+Number getNumber( String key );\n+Boolean getBoolean( String key );\n+Path getPath( String key );\n     }\n \n     /**\n@@ -264,4 +257,4 @@ public interface Result extends ResourceIterator<Map<String,Object>>\n          */\n         boolean visit( ResultRow row ) throws VisitationException;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}