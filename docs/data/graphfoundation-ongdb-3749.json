{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3749",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3749/FusionIndexBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3749/FusionIndexBase.java\nindex e153521f523..cfe64fc97d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3749/FusionIndexBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3749/FusionIndexBase.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.util.Arrays;\n@@ -36,83 +37,82 @@ import org.neo4j.values.storable.ValueGroup;\n  */\n public abstract class FusionIndexBase<T>\n {\n-    static Function<Value,ValueGroup> GROUP_OF = Value::valueGroup;\n+  static Function<Value, ValueGroup> GROUP_OF = Value::valueGroup;\n \n-    final SlotSelector slotSelector;\n-    final InstanceSelector<T> instanceSelector;\n+  final SlotSelector slotSelector;\n+  final InstanceSelector<T> instanceSelector;\n \n-    FusionIndexBase( SlotSelector slotSelector, InstanceSelector<T> instanceSelector )\n-    {\n-        this.slotSelector = slotSelector;\n-        this.instanceSelector = instanceSelector;\n-    }\n+  FusionIndexBase(SlotSelector slotSelector, InstanceSelector<T> instanceSelector)\n+  {\n+    this.slotSelector = slotSelector;\n+    this.instanceSelector = instanceSelector;\n+  }\n \n-    /**\n-     * See {@link #forAll(ThrowingConsumer, Object[])}\n-     *\n-     * Method for calling a lambda function on many objects when it is expected that the function might\n-     * throw an exception. First exception will be thrown and subsequent will be suppressed.\n-     *\n-     * For example, in FusionIndexAccessor:\n-     * <pre>\n-     *    public void drop() throws IOException\n-     *    {\n-     *        forAll( IndexAccessor::drop, accessorList );\n-     *    }\n-     * </pre>\n-     *\n-     * @param consumer lambda function to call on each object passed\n-     * @param subjects {@link Iterable} of objects to call the function on\n-     * @param <E> the type of exception anticipated, inferred from the lambda\n-     * @throws E if consumption fails with this exception\n-     */\n-    public static <T, E extends Exception> void forAll( ThrowingConsumer<T,E> consumer, Iterable<T> subjects ) throws E\n+  /**\n+   * See {@link #forAll(ThrowingConsumer, Object[])}\n+   * <p>\n+   * Method for calling a lambda function on many objects when it is expected that the function might\n+   * throw an exception. First exception will be thrown and subsequent will be suppressed.\n+   * <p>\n+   * For example, in FusionIndexAccessor:\n+   * <pre>\n+   *    public void drop() throws IOException\n+   *    {\n+   *        forAll( IndexAccessor::drop, accessorList );\n+   *    }\n+   * </pre>\n+   *\n+   * @param consumer lambda function to call on each object passed\n+   * @param subjects {@link Iterable} of objects to call the function on\n+   * @param <E>      the type of exception anticipated, inferred from the lambda\n+   * @throws E if consumption fails with this exception\n+   */\n+  public static <T, E extends Exception> void forAll(ThrowingConsumer<T, E> consumer, Iterable<T> subjects) throws E\n+  {\n+    E exception = null;\n+    for (T instance : subjects)\n     {\n-        E exception = null;\n-        for ( T instance : subjects )\n-        {\n-            exception = consume( exception, consumer, instance );\n-        }\n-        if ( exception != null )\n-        {\n-            throw exception;\n-        }\n+      exception = consume(exception, consumer, instance);\n     }\n-\n-    /**\n-     * See {@link #forAll(ThrowingConsumer, Iterable)}\n-     *\n-     * Method for calling a lambda function on many objects when it is expected that the function might\n-     * throw an exception. First exception will be thrown and subsequent will be suppressed.\n-     *\n-     * For example, in FusionIndexAccessor:\n-     * <pre>\n-     *    public void drop() throws IOException\n-     *    {\n-     *        forAll( IndexAccessor::drop, firstAccessor, secondAccessor, thirdAccessor );\n-     *    }\n-     * </pre>\n-     *\n-     * @param consumer lambda function to call on each object passed\n-     * @param subjects varargs array of objects to call the function on\n-     * @param <E> the type of exception anticipated, inferred from the lambda\n-     * @throws E if consumption fails with this exception\n-     */\n-    public static <T, E extends Exception> void forAll( ThrowingConsumer<T,E> consumer, T[] subjects ) throws E\n+    if (exception != null)\n     {\n-        forAll( consumer, Arrays.asList( subjects ) );\n+      throw exception;\n     }\n+  }\n+\n+  /**\n+   * See {@link #forAll(ThrowingConsumer, Iterable)}\n+   * <p>\n+   * Method for calling a lambda function on many objects when it is expected that the function might\n+   * throw an exception. First exception will be thrown and subsequent will be suppressed.\n+   * <p>\n+   * For example, in FusionIndexAccessor:\n+   * <pre>\n+   *    public void drop() throws IOException\n+   *    {\n+   *        forAll( IndexAccessor::drop, firstAccessor, secondAccessor, thirdAccessor );\n+   *    }\n+   * </pre>\n+   *\n+   * @param consumer lambda function to call on each object passed\n+   * @param subjects varargs array of objects to call the function on\n+   * @param <E>      the type of exception anticipated, inferred from the lambda\n+   * @throws E if consumption fails with this exception\n+   */\n+  public static <T, E extends Exception> void forAll(ThrowingConsumer<T, E> consumer, T[] subjects) throws E\n+  {\n+    forAll(consumer, Arrays.asList(subjects));\n+  }\n \n-    private static <E extends Exception, T> E consume( E exception, ThrowingConsumer<T,E> consumer, T instance )\n+  private static <E extends Exception, T> E consume(E exception, ThrowingConsumer<T, E> consumer, T instance)\n+  {\n+    try\n+    {\n+      consumer.accept(instance);\n+    } catch (Exception e)\n     {\n-        try\n-        {\n-            consumer.accept( instance );\n-        }\n-        catch ( Exception e )\n-        {\n-            exception = Exceptions.chain( exception, (E) e );\n-        }\n-        return exception;\n+      exception = Exceptions.chain(exception, (E) e);\n     }\n+    return exception;\n+  }\n }\n",
            "diff_size": 105
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3749/FusionIndexBase.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3749/FusionIndexBase.java\nindex e153521f523..6d46d152cf1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3749/FusionIndexBase.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3749/FusionIndexBase.java\n@@ -73,7 +73,8 @@ public abstract class FusionIndexBase<T>\n         {\n             exception = consume( exception, consumer, instance );\n         }\n-        if ( exception != null )\n+\n+if ( exception != null )\n         {\n             throw exception;\n         }\n@@ -113,6 +114,7 @@ public abstract class FusionIndexBase<T>\n         {\n             exception = Exceptions.chain( exception, (E) e );\n         }\n-        return exception;\n+\n+return exception;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}