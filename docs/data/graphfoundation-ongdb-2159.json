{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2159",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "63",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "84",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "84",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "122",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "146",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "179",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2159/ConsistencyCheckTool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2159/ConsistencyCheckTool.java\nindex 77f56f6cd1f..5bfe9153daf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2159/ConsistencyCheckTool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2159/ConsistencyCheckTool.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency;\n \n import java.io.File;\n@@ -49,188 +50,182 @@ import static org.neo4j.helpers.collection.MapUtil.stringMap;\n \n public class ConsistencyCheckTool\n {\n-    private static final String CONFIG = \"config\";\n-    private static final String VERBOSE = \"v\";\n+  private static final String CONFIG = \"config\";\n+  private static final String VERBOSE = \"v\";\n \n-    public static void main( String[] args )\n+  public static void main(String[] args)\n+  {\n+    try\n+    {\n+      System.err.println(\"WARNING: ConsistencyCheckTool is deprecated and support for it will be\" +\n+          \"removed in a future version of Neo4j. Please use neo4j-admin check-consistency.\");\n+      runConsistencyCheckTool(args, System.out, System.err);\n+    } catch (ToolFailureException e)\n     {\n-        try\n-        {\n-            System.err.println(\"WARNING: ConsistencyCheckTool is deprecated and support for it will be\" +\n-                    \"removed in a future version of Neo4j. Please use neo4j-admin check-consistency.\");\n-            runConsistencyCheckTool( args, System.out, System.err );\n-        }\n-        catch ( ToolFailureException e )\n-        {\n-            e.exitTool();\n-        }\n+      e.exitTool();\n     }\n-\n-    public static ConsistencyCheckService.Result runConsistencyCheckTool( String[] args, PrintStream outStream,\n-                                                                          PrintStream errStream )\n-            throws ToolFailureException\n+  }\n+\n+  public static ConsistencyCheckService.Result runConsistencyCheckTool(String[] args, PrintStream outStream,\n+                                                                       PrintStream errStream)\n+      throws ToolFailureException\n+  {\n+    FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction();\n+    try\n+    {\n+      ConsistencyCheckTool tool =\n+          new ConsistencyCheckTool(new ConsistencyCheckService(), fileSystem, outStream, errStream);\n+      return tool.run(args);\n+    } finally\n     {\n-        FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction();\n-        try\n-        {\n-            ConsistencyCheckTool tool =\n-                    new ConsistencyCheckTool( new ConsistencyCheckService(), fileSystem, outStream, errStream );\n-            return tool.run( args );\n-        }\n-        finally\n-        {\n-            try\n-            {\n-                fileSystem.close();\n-            }\n-            catch ( IOException e )\n-            {\n-                System.err.print( \"Failure during file system shutdown.\" );\n-            }\n-        }\n+      try\n+      {\n+        fileSystem.close();\n+      } catch (IOException e)\n+      {\n+        System.err.print(\"Failure during file system shutdown.\");\n+      }\n     }\n-\n-    private final ConsistencyCheckService consistencyCheckService;\n-    private final PrintStream systemOut;\n-    private final PrintStream systemError;\n-    private final FileSystemAbstraction fs;\n-\n-    ConsistencyCheckTool( ConsistencyCheckService consistencyCheckService, FileSystemAbstraction fs,\n-            PrintStream systemOut, PrintStream systemError )\n+  }\n+\n+  private final ConsistencyCheckService consistencyCheckService;\n+  private final PrintStream systemOut;\n+  private final PrintStream systemError;\n+  private final FileSystemAbstraction fs;\n+\n+  ConsistencyCheckTool(ConsistencyCheckService consistencyCheckService, FileSystemAbstraction fs,\n+                       PrintStream systemOut, PrintStream systemError)\n+  {\n+    this.consistencyCheckService = consistencyCheckService;\n+    this.fs = fs;\n+    this.systemOut = systemOut;\n+    this.systemError = systemError;\n+  }\n+\n+  ConsistencyCheckService.Result run(String... args) throws ToolFailureException\n+  {\n+    Args arguments = Args.withFlags(VERBOSE).parse(args);\n+\n+    File storeDir = determineStoreDirectory(arguments);\n+    Config tuningConfiguration = readConfiguration(arguments);\n+    boolean verbose = isVerbose(arguments);\n+\n+    checkDbState(storeDir, tuningConfiguration);\n+\n+    ZoneId logTimeZone = tuningConfiguration.get(GraphDatabaseSettings.db_timezone).getZoneId();\n+    LogProvider logProvider = FormattedLogProvider.withZoneId(logTimeZone).toOutputStream(systemOut);\n+    try\n+    {\n+      return consistencyCheckService.runFullConsistencyCheck(storeDir, tuningConfiguration,\n+          ProgressMonitorFactory.textual(systemError), logProvider, fs, verbose,\n+          new ConsistencyFlags(tuningConfiguration));\n+    } catch (ConsistencyCheckIncompleteException e)\n     {\n-        this.consistencyCheckService = consistencyCheckService;\n-        this.fs = fs;\n-        this.systemOut = systemOut;\n-        this.systemError = systemError;\n+      throw new ToolFailureException(\"Check aborted due to exception\", e);\n     }\n+  }\n \n-    ConsistencyCheckService.Result run( String... args ) throws ToolFailureException\n+  private boolean isVerbose(Args arguments)\n+  {\n+    return arguments.getBoolean(VERBOSE, false, true);\n+  }\n+\n+  private void checkDbState(File storeDir, Config tuningConfiguration) throws ToolFailureException\n+  {\n+    try (PageCache pageCache = ConfigurableStandalonePageCacheFactory.createPageCache(fs, tuningConfiguration))\n+    {\n+      RecoveryRequiredChecker requiredChecker = new RecoveryRequiredChecker(fs, pageCache,\n+          tuningConfiguration, new Monitors());\n+      if (requiredChecker.isRecoveryRequiredAt(storeDir))\n+      {\n+        throw new ToolFailureException(Strings.joinAsLines(\n+            \"Active logical log detected, this might be a source of inconsistencies.\",\n+            \"Please recover database before running the consistency check.\",\n+            \"To perform recovery please start database and perform clean shutdown.\"));\n+      }\n+    } catch (IOException e)\n     {\n-        Args arguments = Args.withFlags( VERBOSE ).parse( args );\n-\n-        File storeDir = determineStoreDirectory( arguments );\n-        Config tuningConfiguration = readConfiguration( arguments );\n-        boolean verbose = isVerbose( arguments );\n-\n-        checkDbState( storeDir, tuningConfiguration );\n-\n-        ZoneId logTimeZone = tuningConfiguration.get( GraphDatabaseSettings.db_timezone ).getZoneId();\n-        LogProvider logProvider = FormattedLogProvider.withZoneId( logTimeZone ).toOutputStream( systemOut );\n-        try\n-        {\n-            return consistencyCheckService.runFullConsistencyCheck( storeDir, tuningConfiguration,\n-                    ProgressMonitorFactory.textual( systemError ), logProvider, fs, verbose,\n-                    new ConsistencyFlags( tuningConfiguration ) );\n-        }\n-        catch ( ConsistencyCheckIncompleteException e )\n-        {\n-            throw new ToolFailureException( \"Check aborted due to exception\", e );\n-        }\n+      systemError.printf(\"Failure when checking for recovery state: '%s', continuing as normal.%n\", e);\n     }\n+  }\n \n-    private boolean isVerbose( Args arguments )\n+  private File determineStoreDirectory(Args arguments) throws ToolFailureException\n+  {\n+    List<String> unprefixedArguments = arguments.orphans();\n+    if (unprefixedArguments.size() != 1)\n     {\n-        return arguments.getBoolean( VERBOSE, false, true );\n+      throw new ToolFailureException(usage());\n     }\n-\n-    private void checkDbState( File storeDir, Config tuningConfiguration ) throws ToolFailureException\n+    File storeDir = new File(unprefixedArguments.get(0));\n+    if (!storeDir.isDirectory())\n     {\n-        try ( PageCache pageCache = ConfigurableStandalonePageCacheFactory.createPageCache( fs, tuningConfiguration ) )\n-        {\n-            RecoveryRequiredChecker requiredChecker = new RecoveryRequiredChecker( fs, pageCache,\n-                    tuningConfiguration, new Monitors() );\n-            if ( requiredChecker.isRecoveryRequiredAt( storeDir ) )\n-            {\n-                throw new ToolFailureException( Strings.joinAsLines(\n-                        \"Active logical log detected, this might be a source of inconsistencies.\",\n-                        \"Please recover database before running the consistency check.\",\n-                        \"To perform recovery please start database and perform clean shutdown.\" ) );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            systemError.printf( \"Failure when checking for recovery state: '%s', continuing as normal.%n\", e );\n-        }\n+      throw new ToolFailureException(\n+          Strings.joinAsLines(String.format(\"'%s' is not a directory\", storeDir)) + usage());\n     }\n+    return storeDir;\n+  }\n \n-    private File determineStoreDirectory( Args arguments ) throws ToolFailureException\n+  private Config readConfiguration(Args arguments) throws ToolFailureException\n+  {\n+    Map<String, String> specifiedConfig = stringMap();\n+\n+    String configFilePath = arguments.get(CONFIG, null);\n+    if (configFilePath != null)\n     {\n-        List<String> unprefixedArguments = arguments.orphans();\n-        if ( unprefixedArguments.size() != 1 )\n-        {\n-            throw new ToolFailureException( usage() );\n-        }\n-        File storeDir = new File( unprefixedArguments.get( 0 ) );\n-        if ( !storeDir.isDirectory() )\n-        {\n-            throw new ToolFailureException(\n-                    Strings.joinAsLines( String.format( \"'%s' is not a directory\", storeDir ) ) + usage() );\n-        }\n-        return storeDir;\n+      File configFile = new File(configFilePath);\n+      try\n+      {\n+        specifiedConfig = MapUtil.load(configFile);\n+      } catch (IOException e)\n+      {\n+        throw new ToolFailureException(String.format(\"Could not read configuration file [%s]\",\n+            configFilePath), e);\n+      }\n     }\n-\n-    private Config readConfiguration( Args arguments ) throws ToolFailureException\n+    return Config.defaults(specifiedConfig);\n+  }\n+\n+  private String usage()\n+  {\n+    return joinAsLines(\n+        jarUsage(getClass(), \" [-config <neo4j.conf>] [-v] <storedir>\"),\n+        \"WHERE:   -config <filename>  Is the location of an optional properties file\",\n+        \"                             containing tuning parameters for the consistency check.\",\n+        \"         -v                  Produce execution output.\",\n+        \"         <storedir>          Is the path to the store to check.\"\n+    );\n+  }\n+\n+  public static class ToolFailureException extends Exception\n+  {\n+    ToolFailureException(String message)\n     {\n-        Map<String,String> specifiedConfig = stringMap();\n-\n-        String configFilePath = arguments.get( CONFIG, null );\n-        if ( configFilePath != null )\n-        {\n-            File configFile = new File( configFilePath );\n-            try\n-            {\n-                specifiedConfig = MapUtil.load( configFile );\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new ToolFailureException( String.format( \"Could not read configuration file [%s]\",\n-                        configFilePath ), e );\n-            }\n-        }\n-        return Config.defaults( specifiedConfig );\n+      super(message);\n     }\n \n-    private String usage()\n+    ToolFailureException(String message, Throwable cause)\n     {\n-        return joinAsLines(\n-                jarUsage( getClass(), \" [-config <neo4j.conf>] [-v] <storedir>\" ),\n-                \"WHERE:   -config <filename>  Is the location of an optional properties file\",\n-                \"                             containing tuning parameters for the consistency check.\",\n-                \"         -v                  Produce execution output.\",\n-                \"         <storedir>          Is the path to the store to check.\"\n-        );\n+      super(message, cause);\n     }\n \n-    public static class ToolFailureException extends Exception\n+    public void exitTool()\n     {\n-        ToolFailureException( String message )\n-        {\n-            super( message );\n-        }\n-\n-        ToolFailureException( String message, Throwable cause )\n-        {\n-            super( message, cause );\n-        }\n-\n-        public void exitTool()\n-        {\n-            printErrorMessage();\n-            exit();\n-        }\n-\n-        public void printErrorMessage()\n-        {\n-            System.err.println( getMessage() );\n-            if ( getCause() != null )\n-            {\n-                getCause().printStackTrace( System.err );\n-            }\n-        }\n+      printErrorMessage();\n+      exit();\n     }\n \n-    private static void exit()\n+    public void printErrorMessage()\n     {\n-        System.exit( 1 );\n+      System.err.println(getMessage());\n+      if (getCause() != null)\n+      {\n+        getCause().printStackTrace(System.err);\n+      }\n     }\n+  }\n+\n+  private static void exit()\n+  {\n+    System.exit(1);\n+  }\n }\n",
            "diff_size": 253
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 285).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 388).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2159/ConsistencyCheckTool.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2159/ConsistencyCheckTool.java\nindex 77f56f6cd1f..eaca989c18e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2159/ConsistencyCheckTool.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2159/ConsistencyCheckTool.java\n@@ -56,9 +56,9 @@ public class ConsistencyCheckTool\n     {\n         try\n         {\n-            System.err.println(\"WARNING: ConsistencyCheckTool is deprecated and support for it will be\" +\n-                    \"removed in a future version of Neo4j. Please use neo4j-admin check-consistency.\");\n-            runConsistencyCheckTool( args, System.out, System.err );\n+            System.err.println( \"WARNING: ConsistencyCheckTool is deprecated and support for it will be\" + \"removed in a future version of Neo4j. Please use neo4j-admin check-consistency.\" );\n+\n+runConsistencyCheckTool( args, System.out, System.err );\n         }\n         catch ( ToolFailureException e )\n         {\n@@ -66,16 +66,13 @@ public class ConsistencyCheckTool\n         }\n     }\n \n-    public static ConsistencyCheckService.Result runConsistencyCheckTool( String[] args, PrintStream outStream,\n-                                                                          PrintStream errStream )\n-            throws ToolFailureException\n-    {\n+    public static ConsistencyCheckService.Result runConsistencyCheckTool( String[] args, PrintStream outStream, PrintStream errStream ) throws ToolFailureException\n+{\n         FileSystemAbstraction fileSystem = new DefaultFileSystemAbstraction();\n         try\n         {\n-            ConsistencyCheckTool tool =\n-                    new ConsistencyCheckTool( new ConsistencyCheckService(), fileSystem, outStream, errStream );\n-            return tool.run( args );\n+            ConsistencyCheckTool tool = new ConsistencyCheckTool( new ConsistencyCheckService(), fileSystem, outStream, errStream );\n+return tool.run( args );\n         }\n         finally\n         {\n@@ -107,21 +104,18 @@ public class ConsistencyCheckTool\n     ConsistencyCheckService.Result run( String... args ) throws ToolFailureException\n     {\n         Args arguments = Args.withFlags( VERBOSE ).parse( args );\n-\n-        File storeDir = determineStoreDirectory( arguments );\n+File storeDir = determineStoreDirectory( arguments );\n         Config tuningConfiguration = readConfiguration( arguments );\n         boolean verbose = isVerbose( arguments );\n \n         checkDbState( storeDir, tuningConfiguration );\n-\n-        ZoneId logTimeZone = tuningConfiguration.get( GraphDatabaseSettings.db_timezone ).getZoneId();\n+ZoneId logTimeZone = tuningConfiguration.get( GraphDatabaseSettings.db_timezone ).getZoneId();\n         LogProvider logProvider = FormattedLogProvider.withZoneId( logTimeZone ).toOutputStream( systemOut );\n         try\n         {\n             return consistencyCheckService.runFullConsistencyCheck( storeDir, tuningConfiguration,\n-                    ProgressMonitorFactory.textual( systemError ), logProvider, fs, verbose,\n-                    new ConsistencyFlags( tuningConfiguration ) );\n-        }\n+                    ProgressMonitorFactory.textual( systemError ), logProvider, fs, verbose, new ConsistencyFlags( tuningConfiguration ) );\n+    }\n         catch ( ConsistencyCheckIncompleteException e )\n         {\n             throw new ToolFailureException( \"Check aborted due to exception\", e );\n@@ -139,13 +133,10 @@ public class ConsistencyCheckTool\n         {\n             RecoveryRequiredChecker requiredChecker = new RecoveryRequiredChecker( fs, pageCache,\n                     tuningConfiguration, new Monitors() );\n-            if ( requiredChecker.isRecoveryRequiredAt( storeDir ) )\n+if ( requiredChecker.isRecoveryRequiredAt( storeDir ) )\n             {\n-                throw new ToolFailureException( Strings.joinAsLines(\n-                        \"Active logical log detected, this might be a source of inconsistencies.\",\n-                        \"Please recover database before running the consistency check.\",\n-                        \"To perform recovery please start database and perform clean shutdown.\" ) );\n-            }\n+                throw new ToolFailureException( Strings.joinAsLines( \"Active logical log detected, this might be a source of inconsistencies.\", \"Please recover database before running the consistency check.\", \"To perform recovery please start database and perform clean shutdown.\" ) );\n+    }\n         }\n         catch ( IOException e )\n         {\n@@ -160,20 +151,20 @@ public class ConsistencyCheckTool\n         {\n             throw new ToolFailureException( usage() );\n         }\n-        File storeDir = new File( unprefixedArguments.get( 0 ) );\n+\n+File storeDir = new File( unprefixedArguments.get( 0 ) );\n         if ( !storeDir.isDirectory() )\n         {\n-            throw new ToolFailureException(\n-                    Strings.joinAsLines( String.format( \"'%s' is not a directory\", storeDir ) ) + usage() );\n+            throw new ToolFailureException( Strings.joinAsLines( String.format( \"'%s' is not a directory\", storeDir ) ) + usage() );\n         }\n-        return storeDir;\n+\n+return storeDir;\n     }\n \n     private Config readConfiguration( Args arguments ) throws ToolFailureException\n     {\n         Map<String,String> specifiedConfig = stringMap();\n-\n-        String configFilePath = arguments.get( CONFIG, null );\n+String configFilePath = arguments.get( CONFIG, null );\n         if ( configFilePath != null )\n         {\n             File configFile = new File( configFilePath );\n@@ -185,20 +176,14 @@ public class ConsistencyCheckTool\n             {\n                 throw new ToolFailureException( String.format( \"Could not read configuration file [%s]\",\n                         configFilePath ), e );\n-            }\n+    }\n         }\n         return Config.defaults( specifiedConfig );\n     }\n \n     private String usage()\n     {\n-        return joinAsLines(\n-                jarUsage( getClass(), \" [-config <neo4j.conf>] [-v] <storedir>\" ),\n-                \"WHERE:   -config <filename>  Is the location of an optional properties file\",\n-                \"                             containing tuning parameters for the consistency check.\",\n-                \"         -v                  Produce execution output.\",\n-                \"         <storedir>          Is the path to the store to check.\"\n-        );\n+        return joinAsLines( jarUsage( getClass(), \" [-config <neo4j.conf>] [-v] <storedir>\" ), \"WHERE:   -config <filename>  Is the location of an optional properties file\", \"                             containing tuning parameters for the consistency check.\", \"         -v                  Produce execution output.\", \"         <storedir>          Is the path to the store to check.\" );\n     }\n \n     public static class ToolFailureException extends Exception\n@@ -233,4 +218,4 @@ public class ConsistencyCheckTool\n     {\n         System.exit( 1 );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}