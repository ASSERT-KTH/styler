{
    "project_name": "eclipse-kura",
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "45",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class TelitHe910 extends TelitModem implements HspaCellularModem {\n\n\tprivate static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n\n\t/**\n\t * TelitHe910 modem constructor",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "47",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/26/TelitHe910.java\nindex 24aca2cf21e..e66525b932f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/26/TelitHe910.java\n@@ -42,7 +42,7 @@ import org.slf4j.LoggerFactory;\n  */\n public class TelitHe910 extends TelitModem implements HspaCellularModem {\n \n-\tprivate static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n+    private static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n \n \t/**\n \t * TelitHe910 modem constructor\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/26/TelitHe910.java\nindex 24aca2cf21e..d76e11eecaf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/26/TelitHe910.java\n@@ -9,6 +9,7 @@\n  * Contributors:\n  *     Eurotech\n  *******************************************************************************/\n+\n package org.eclipse.kura.net.admin.modem.telit.he910;\n \n import java.io.IOException;\n@@ -42,467 +43,467 @@ import org.slf4j.LoggerFactory;\n  */\n public class TelitHe910 extends TelitModem implements HspaCellularModem {\n \n-\tprivate static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n-\n-\t/**\n-\t * TelitHe910 modem constructor\n-\t *\n-\t * @param usbDevice         - modem USB device as {@link UsbModemDevice}\n-\t * @param platform          - hardware platform as {@link String}\n-\t * @param connectionFactory - connection factory {@link ConnectionFactory}\n-\t */\n-\tpublic TelitHe910(ModemDevice device, String platform, ConnectionFactory connectionFactory) {\n-\n-\t\tsuper(device, platform, connectionFactory);\n-\n-\t\ttry {\n-\t\t\tString atPort = getAtPort();\n-\t\t\tString gpsPort = getGpsPort();\n-\t\t\tif (atPort != null && (atPort.equals(getDataPort()) || atPort.equals(gpsPort))) {\n-\t\t\t\tthis.serialNumber = getSerialNumber();\n-\t\t\t\tthis.imsi = getMobileSubscriberIdentity();\n-\t\t\t\tthis.iccid = getIntegratedCirquitCardId();\n+    private static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n+\n+    /**\n+     * TelitHe910 modem constructor\n+     *\n+     * @param usbDevice         - modem USB device as {@link UsbModemDevice}\n+     * @param platform          - hardware platform as {@link String}\n+     * @param connectionFactory - connection factory {@link ConnectionFactory}\n+     */\n+    public TelitHe910(ModemDevice device, String platform, ConnectionFactory connectionFactory) {\n+\n+        super(device, platform, connectionFactory);\n+\n+        try {\n+            String atPort = getAtPort();\n+            String gpsPort = getGpsPort();\n+            if (atPort != null && (atPort.equals(getDataPort()) || atPort.equals(gpsPort))) {\n+                this.serialNumber = getSerialNumber();\n+                this.imsi = getMobileSubscriberIdentity();\n+                this.iccid = getIntegratedCirquitCardId();\n                 this.model = getModel();\n-\t\t\t\tthis.manufacturer = getManufacturer();\n-\t\t\t\tthis.revisionId = getRevisionID();\n-\t\t\t\tthis.gpsSupported = isGpsSupported();\n-\t\t\t\tthis.rssi = getSignalStrength();\n-\n-\t\t\t\tlogger.trace(\"{} :: Serial Number={}\", getClass().getName(), this.serialNumber);\n-\t\t\t\tlogger.trace(\"{} :: IMSI={}\", getClass().getName(), this.imsi);\n-\t\t\t\tlogger.trace(\"{} :: ICCID={}\", getClass().getName(), this.iccid);\n-\t\t\t\tlogger.trace(\"{} :: Model={}\", getClass().getName(), this.model);\n-\t\t\t\tlogger.trace(\"{} :: Manufacturer={}\", getClass().getName(), this.manufacturer);\n-\t\t\t\tlogger.trace(\"{} :: Revision ID={}\", getClass().getName(), this.revisionId);\n-\t\t\t\tlogger.trace(\"{} :: GPS Supported={}\", getClass().getName(), this.gpsSupported);\n-\t\t\t\tlogger.trace(\"{} :: RSSI={}\", getClass().getName(), this.rssi);\n-\t\t\t}\n-\t\t} catch (KuraException e) {\n-\t\t\tlogger.error(\"Failed to initialize TelitHe910\", e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTelitSimCardReady() throws KuraException {\n-\t\tboolean simReady = false;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tCommConnection commAtConnection = null;\n-\t\t\ttry {\n-\t\t\t\tString port = getUnusedAtPort();\n-\t\t\t\tlogger.debug(\"sendCommand getSimStatus :: {} command to port {}\",\n-\t\t\t\t\t\tTelitHe910AtCommands.GET_SIM_STATUS.getCommand(), port);\n-\n-\t\t\t\tcommAtConnection = openSerialPort(port);\n-\t\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t\t}\n-\n-\t\t\t\tsimReady = isSimCardReady(commAtConnection);\n-\t\t\t\tif (!simReady) {\n-\t\t\t\t\tsimReady = simultateInsertSimCard(commAtConnection);\n-\t\t\t\t}\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t} finally {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t}\n-\t\t}\n-\t\treturn simReady;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isSimCardReady() throws KuraException {\n-\t\treturn isTelitSimCardReady();\n-\t}\n-\n-\t@Override\n-\tpublic ModemRegistrationStatus getRegistrationStatus() throws KuraException {\n-\n-\t\tModemRegistrationStatus modemRegistrationStatus = ModemRegistrationStatus.UNKNOWN;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getRegistrationStatus :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand());\n-\t\t\tbyte[] reply;\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(\n-\t\t\t\t\t\tTelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII),\n-\t\t\t\t\t\t1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n-\t\t\tif (reply != null) {\n-\t\t\t\tString sRegStatus = getResponseString(reply);\n-\t\t\t\tString[] regStatusSplit = sRegStatus.split(\",\");\n-\t\t\t\tif (regStatusSplit.length >= 2) {\n-\t\t\t\t\tint status = Integer.parseInt(regStatusSplit[1]);\n-\t\t\t\t\tswitch (status) {\n-\t\t\t\t\tcase 0:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.NOT_REGISTERED;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 1:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.REGISTERED_HOME;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 3:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.REGISTRATION_DENIED;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 5:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.REGISTERED_ROAMING;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn modemRegistrationStatus;\n-\t}\n-\n-\t@Override\n-\tpublic long getCallTxCounter() throws KuraException {\n-\n-\t\tlong txCnt = 0;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n-\t\t\tbyte[] reply;\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand()\n-\t\t\t\t\t\t.getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n-\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\tif (reply != null) {\n-\t\t\t\tString[] splitPdp;\n-\t\t\t\tString[] splitData;\n-\t\t\t\tString sDataVolume = this.getResponseString(reply);\n-\t\t\t\tsplitPdp = sDataVolume.split(\"#GDATAVOL:\");\n-\t\t\t\tif (splitPdp.length > 1) {\n-\t\t\t\t\tfor (String pdp : splitPdp) {\n-\t\t\t\t\t\tif (pdp.trim().length() > 0) {\n-\t\t\t\t\t\t\tsplitData = pdp.trim().split(\",\");\n-\t\t\t\t\t\t\tif (splitData.length >= 4) {\n-\t\t\t\t\t\t\t\tint pdpNo = Integer.parseInt(splitData[0]);\n-\t\t\t\t\t\t\t\tif (pdpNo == Integer.valueOf(getContextId())) {\n-\t\t\t\t\t\t\t\t\ttxCnt = Integer.parseInt(splitData[2]);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn txCnt;\n-\t}\n-\n-\t@Override\n-\tpublic long getCallRxCounter() throws KuraException {\n-\t\tlong rxCnt = 0;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n-\t\t\tbyte[] reply;\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand()\n-\t\t\t\t\t\t.getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n-\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\tif (reply != null) {\n-\t\t\t\tString[] splitPdp;\n-\t\t\t\tString[] splitData;\n-\t\t\t\tString sDataVolume = this.getResponseString(reply);\n-\t\t\t\tsplitPdp = sDataVolume.split(\"#GDATAVOL:\");\n-\t\t\t\tif (splitPdp.length > 1) {\n-\t\t\t\t\tfor (String pdp : splitPdp) {\n-\t\t\t\t\t\tif (pdp.trim().length() > 0) {\n-\t\t\t\t\t\t\tsplitData = pdp.trim().split(\",\");\n-\t\t\t\t\t\t\tif (splitData.length >= 4) {\n-\t\t\t\t\t\t\t\tint pdpNo = Integer.parseInt(splitData[0]);\n-\t\t\t\t\t\t\t\tif (pdpNo == Integer.valueOf(getContextId())) {\n-\t\t\t\t\t\t\t\t\trxCnt = Integer.parseInt(splitData[3]);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn rxCnt;\n-\t}\n-\n-\t@Override\n-\tpublic List<ModemPdpContext> getPdpContextInfo() throws KuraException {\n-\t\tsynchronized (this.atLock) {\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\ttry {\n-\t\t\t\treturn getPdpContextInfo(commAtConnection);\n-\t\t\t} finally {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic String getServiceType() throws KuraException {\n-\t\tString serviceType = null;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getMobileStationClass :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand());\n-\t\t\tbyte[] reply;\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(\n-\t\t\t\t\t\tTelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand().getBytes(StandardCharsets.US_ASCII),\n-\t\t\t\t\t\t1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n-\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\tif (reply != null) {\n-\t\t\t\tString sCgclass = this.getResponseString(reply);\n-\t\t\t\tif (sCgclass.startsWith(\"+CGCLASS:\")) {\n-\t\t\t\t\tsCgclass = sCgclass.substring(\"+CGCLASS:\".length()).trim();\n-\t\t\t\t\tif (\"\\\"A\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"UMTS\";\n-\t\t\t\t\t} else if (\"\\\"B\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"GSM/GPRS\";\n-\t\t\t\t\t} else if (\"\\\"CG\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"GPRS\";\n-\t\t\t\t\t} else if (\"\\\"CC\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"GSM\";\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn serviceType;\n-\t}\n-\n-\t@Override\n-\tpublic List<ModemTechnologyType> getTechnologyTypes() throws KuraException {\n-\n-\t\tList<ModemTechnologyType> modemTechnologyTypes;\n-\t\tModemDevice device = getModemDevice();\n-\t\tif (device == null) {\n-\t\t\tthrow new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No modem device\");\n-\t\t}\n-\t\tif (device instanceof UsbModemDevice) {\n-\t\t\tSupportedUsbModemInfo usbModemInfo = SupportedUsbModemsInfo.getModem((UsbModemDevice) device);\n-\t\t\tif (usbModemInfo != null) {\n-\t\t\t\tmodemTechnologyTypes = usbModemInfo.getTechnologyTypes();\n-\t\t\t} else {\n-\t\t\t\tthrow new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No usbModemInfo available\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"Unsupported modem device\");\n-\t\t}\n-\t\treturn modemTechnologyTypes;\n-\t}\n-\n-\tprotected String getUnusedAtPort() throws KuraException {\n-\t\tString port;\n-\t\tif (isGpsEnabled() && getAtPort().equals(getGpsPort()) && !getAtPort().equals(getDataPort())) {\n-\t\t\tport = getDataPort();\n-\t\t} else {\n-\t\t\tport = getAtPort();\n-\t\t}\n-\t\treturn port;\n-\t}\n-\n-\tprotected List<ModemPdpContext> getPdpContextInfo(CommConnection comm) throws KuraException {\n-\t\tList<ModemPdpContext> pdpContextInfo = new ArrayList<>();\n-\t\tbyte[] reply;\n-\t\tif (!isAtReachable(comm)) {\n-\t\t\tcloseSerialPort(comm);\n-\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t}\n-\t\ttry {\n-\t\t\treply = comm.sendCommand(formGetPdpContextAtCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t}\n-\t\tif (reply != null) {\n-\t\t\tString sreply = this.getResponseString(reply);\n-\t\t\tScanner scanner = new Scanner(sreply);\n-\t\t\twhile (scanner.hasNextLine()) {\n-\t\t\t\tString[] tokens = scanner.nextLine().split(\",\");\n-\t\t\t\tif (!tokens[0].startsWith(\"+CGDCONT:\")) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tint contextNo = Integer.parseInt(tokens[0].substring(\"+CGDCONT:\".length()).trim());\n-\t\t\t\tModemPdpContextType pdpType = ModemPdpContextType\n-\t\t\t\t\t\t.getContextType(tokens[1].substring(1, tokens[1].length() - 1));\n-\t\t\t\tString apn = tokens[2].substring(1, tokens[2].length() - 1);\n-\t\t\t\tModemPdpContext modemPdpContext = new ModemPdpContext(contextNo, pdpType, apn);\n-\t\t\t\tpdpContextInfo.add(modemPdpContext);\n-\t\t\t}\n-\t\t\tscanner.close();\n-\t\t}\n-\t\treturn pdpContextInfo;\n-\t}\n-\n-\tprotected boolean isSimCardReady(CommConnection comm) throws KuraException, IOException {\n-\t\tboolean simReady = false;\n-\t\tbyte[] reply = comm.sendCommand(\n-\t\t\t\tTelitHe910AtCommands.GET_SIM_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\tif (reply != null) {\n-\t\t\tString simStatus = getResponseString(reply);\n-\t\t\tString[] simStatusSplit = simStatus.split(\",\");\n-\t\t\tif (simStatusSplit.length > 1 && Integer.valueOf(simStatusSplit[1]) > 0) {\n-\t\t\t\tsimReady = true;\n-\t\t\t}\n-\t\t}\n-\t\treturn simReady;\n-\t}\n-\n-\tprotected boolean simultateInsertSimCard(CommConnection comm) throws KuraException, IOException {\n-\t\tboolean simReady = false;\n-\t\tbyte[] reply = comm.sendCommand(\n-\t\t\t\tTelitHe910AtCommands.SIMULATE_SIM_NOT_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n-\t\t\t\t100);\n-\t\tif (reply != null) {\n-\t\t\tsleep(5000);\n-\t\t\treply = comm.sendCommand(\n-\t\t\t\t\tTelitHe910AtCommands.SIMULATE_SIM_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n-\t\t\t\t\t100);\n-\t\t\tif (reply != null) {\n-\t\t\t\tsleep(1000);\n-\t\t\t\tsimReady = isSimCardReady(comm);\n-\t\t\t}\n-\t\t}\n-\t\treturn simReady;\n-\t}\n-\n-\tprotected boolean execCommand(CommConnection comm, byte[] command, int timeout) throws KuraException, IOException {\n-\t\tboolean ok;\n-\t\tbyte[] reply = comm.sendCommand(command, timeout, 100);\n-\t\tif (reply != null) {\n-\t\t\tok = new String(reply, StandardCharsets.US_ASCII).contains(\"OK\");\n-\t\t} else {\n-\t\t\tthrow new KuraException(KuraErrorCode.TIMED_OUT);\n-\t\t}\n-\t\treturn ok;\n-\t}\n-\n-\tprotected String formSetPdpContextAtCommand() {\n-\t\tString result = null;\n-\t\tList<NetConfig> configs = getConfiguration();\n-\t\tfor (NetConfig config : configs) {\n-\t\t\tif (config instanceof ModemConfig) {\n-\t\t\t\tModemConfig modemConfig = (ModemConfig) config;\n-\t\t\t\t// a little bit silly\n-\t\t\t\tString cid = parseContextIdFromDialString(modemConfig.getDialString());\n-\t\t\t\tString apn = modemConfig.getApn();\n-\t\t\t\tString pdpType = modemConfig.getPdpType().name();\n-\t\t\t\tStringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand()).append(\"=\")\n-\t\t\t\t\t\t.append(cid).append(\",\").append('\"').append(pdpType).append('\"').append(\",\").append('\"')\n-\t\t\t\t\t\t.append(apn).append('\"').append(\"\\r\\n\");\n-\t\t\t\tresult = sb.toString();\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\tprotected String parseContextIdFromDialString(String dialString) {\n-\t\tint start = dialString.lastIndexOf('*');\n-\t\treturn dialString.substring(start + 1, dialString.length() - 1);\n-\t}\n-\n-\tprotected ModemPdpContext getConfigPdpContext() {\n-\t\tModemPdpContext result = null;\n-\t\tList<NetConfig> configs = getConfiguration();\n-\t\tfor (NetConfig config : configs) {\n-\t\t\tif (config instanceof ModemConfig) {\n-\t\t\t\tModemConfig modemConfig = (ModemConfig) config;\n-\t\t\t\t// a little bit silly\n-\t\t\t\tint cid = Integer.parseInt(parseContextIdFromDialString(modemConfig.getDialString()));\n-\t\t\t\tString apn = modemConfig.getApn();\n-\t\t\t\tPdpType pdpType = modemConfig.getPdpType();\n-\n-\t\t\t\tModemPdpContextType modemPdpType;\n-\t\t\t\tswitch (pdpType) {\n-\t\t\t\tcase IP:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.IP;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase IPv6:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.IPV6;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase PPP:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.PPP;\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.IPV4IPV6;\n-\t\t\t\t}\n-\n-\t\t\t\tresult = new ModemPdpContext(cid, modemPdpType, apn);\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\tprotected String getContextId() {\n-\t\tString cid = null;\n-\t\tList<NetConfig> configs = getConfiguration();\n-\t\tfor (NetConfig config : configs) {\n-\t\t\tif (config instanceof ModemConfig) {\n-\t\t\t\tModemConfig modemConfig = (ModemConfig) config;\n-\t\t\t\t// a little bit silly\n-\t\t\t\tcid = parseContextIdFromDialString(modemConfig.getDialString());\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\treturn cid;\n-\t}\n-\n-\tprotected String formGetPdpContextAtCommand() {\n-\t\tStringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand());\n-\t\tsb.append(\"?\\r\\n\");\n-\t\treturn sb.toString();\n-\t}\n-\n-\t@Override\n-\tpublic boolean hasDiversityAntenna() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isDiversityEnabled() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void enableDiversity() throws KuraException {\n+                this.manufacturer = getManufacturer();\n+                this.revisionId = getRevisionID();\n+                this.gpsSupported = isGpsSupported();\n+                this.rssi = getSignalStrength();\n+\n+                logger.trace(\"{} :: Serial Number={}\", getClass().getName(), this.serialNumber);\n+                logger.trace(\"{} :: IMSI={}\", getClass().getName(), this.imsi);\n+                logger.trace(\"{} :: ICCID={}\", getClass().getName(), this.iccid);\n+                logger.trace(\"{} :: Model={}\", getClass().getName(), this.model);\n+                logger.trace(\"{} :: Manufacturer={}\", getClass().getName(), this.manufacturer);\n+                logger.trace(\"{} :: Revision ID={}\", getClass().getName(), this.revisionId);\n+                logger.trace(\"{} :: GPS Supported={}\", getClass().getName(), this.gpsSupported);\n+                logger.trace(\"{} :: RSSI={}\", getClass().getName(), this.rssi);\n+            }\n+        } catch (KuraException e) {\n+            logger.error(\"Failed to initialize TelitHe910\", e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isTelitSimCardReady() throws KuraException {\n+        boolean simReady = false;\n+        synchronized (this.atLock) {\n+            CommConnection commAtConnection = null;\n+            try {\n+                String port = getUnusedAtPort();\n+                logger.debug(\"sendCommand getSimStatus :: {} command to port {}\",\n+                    TelitHe910AtCommands.GET_SIM_STATUS.getCommand(), port);\n+\n+                commAtConnection = openSerialPort(port);\n+                if (!isAtReachable(commAtConnection)) {\n+                    throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+                }\n+\n+                simReady = isSimCardReady(commAtConnection);\n+                if (!simReady) {\n+                    simReady = simultateInsertSimCard(commAtConnection);\n+                }\n+            } catch (IOException e) {\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            } finally {\n+                closeSerialPort(commAtConnection);\n+            }\n+        }\n+        return simReady;\n+    }\n+\n+    @Override\n+    public boolean isSimCardReady() throws KuraException {\n+        return isTelitSimCardReady();\n+    }\n+\n+    @Override\n+    public ModemRegistrationStatus getRegistrationStatus() throws KuraException {\n+\n+        ModemRegistrationStatus modemRegistrationStatus = ModemRegistrationStatus.UNKNOWN;\n+        synchronized (this.atLock) {\n+            logger.debug(\"sendCommand getRegistrationStatus :: {}\",\n+                TelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand());\n+            byte[] reply;\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            if (!isAtReachable(commAtConnection)) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+            }\n+            try {\n+                reply = commAtConnection.sendCommand(\n+                    TelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII),\n+                    1000, 100);\n+            } catch (IOException e) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            }\n+            if (reply != null) {\n+                String sRegStatus = getResponseString(reply);\n+                String[] regStatusSplit = sRegStatus.split(\",\");\n+                if (regStatusSplit.length >= 2) {\n+                    int status = Integer.parseInt(regStatusSplit[1]);\n+                    switch (status) {\n+                        case 0:\n+                            modemRegistrationStatus = ModemRegistrationStatus.NOT_REGISTERED;\n+                            break;\n+                        case 1:\n+                            modemRegistrationStatus = ModemRegistrationStatus.REGISTERED_HOME;\n+                            break;\n+                        case 3:\n+                            modemRegistrationStatus = ModemRegistrationStatus.REGISTRATION_DENIED;\n+                            break;\n+                        case 5:\n+                            modemRegistrationStatus = ModemRegistrationStatus.REGISTERED_ROAMING;\n+                            break;\n+                        default:\n+                            break;\n+                    }\n+                }\n+            }\n+        }\n+        return modemRegistrationStatus;\n+    }\n+\n+    @Override\n+    public long getCallTxCounter() throws KuraException {\n+\n+        long txCnt = 0;\n+        synchronized (this.atLock) {\n+            logger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n+                TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n+            byte[] reply;\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            if (!isAtReachable(commAtConnection)) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+            }\n+            try {\n+                reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand()\n+                    .getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+            } catch (IOException e) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            }\n+            closeSerialPort(commAtConnection);\n+            if (reply != null) {\n+                String[] splitPdp;\n+                String[] splitData;\n+                String sDataVolume = this.getResponseString(reply);\n+                splitPdp = sDataVolume.split(\"#GDATAVOL:\");\n+                if (splitPdp.length > 1) {\n+                    for (String pdp : splitPdp) {\n+                        if (pdp.trim().length() > 0) {\n+                            splitData = pdp.trim().split(\",\");\n+                            if (splitData.length >= 4) {\n+                                int pdpNo = Integer.parseInt(splitData[0]);\n+                                if (pdpNo == Integer.valueOf(getContextId())) {\n+                                    txCnt = Integer.parseInt(splitData[2]);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return txCnt;\n+    }\n+\n+    @Override\n+    public long getCallRxCounter() throws KuraException {\n+        long rxCnt = 0;\n+        synchronized (this.atLock) {\n+            logger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n+                TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n+            byte[] reply;\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            if (!isAtReachable(commAtConnection)) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+            }\n+            try {\n+                reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand()\n+                    .getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+            } catch (IOException e) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            }\n+            closeSerialPort(commAtConnection);\n+            if (reply != null) {\n+                String[] splitPdp;\n+                String[] splitData;\n+                String sDataVolume = this.getResponseString(reply);\n+                splitPdp = sDataVolume.split(\"#GDATAVOL:\");\n+                if (splitPdp.length > 1) {\n+                    for (String pdp : splitPdp) {\n+                        if (pdp.trim().length() > 0) {\n+                            splitData = pdp.trim().split(\",\");\n+                            if (splitData.length >= 4) {\n+                                int pdpNo = Integer.parseInt(splitData[0]);\n+                                if (pdpNo == Integer.valueOf(getContextId())) {\n+                                    rxCnt = Integer.parseInt(splitData[3]);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return rxCnt;\n+    }\n+\n+    @Override\n+    public List<ModemPdpContext> getPdpContextInfo() throws KuraException {\n+        synchronized (this.atLock) {\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            try {\n+                return getPdpContextInfo(commAtConnection);\n+            } finally {\n+                closeSerialPort(commAtConnection);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String getServiceType() throws KuraException {\n+        String serviceType = null;\n+        synchronized (this.atLock) {\n+            logger.debug(\"sendCommand getMobileStationClass :: {}\",\n+                TelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand());\n+            byte[] reply;\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            if (!isAtReachable(commAtConnection)) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+            }\n+            try {\n+                reply = commAtConnection.sendCommand(\n+                    TelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand().getBytes(StandardCharsets.US_ASCII),\n+                    1000, 100);\n+            } catch (IOException e) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            }\n+            closeSerialPort(commAtConnection);\n+            if (reply != null) {\n+                String sCgclass = this.getResponseString(reply);\n+                if (sCgclass.startsWith(\"+CGCLASS:\")) {\n+                    sCgclass = sCgclass.substring(\"+CGCLASS:\".length()).trim();\n+                    if (\"\\\"A\\\"\".equals(sCgclass)) {\n+                        serviceType = \"UMTS\";\n+                    } else if (\"\\\"B\\\"\".equals(sCgclass)) {\n+                        serviceType = \"GSM/GPRS\";\n+                    } else if (\"\\\"CG\\\"\".equals(sCgclass)) {\n+                        serviceType = \"GPRS\";\n+                    } else if (\"\\\"CC\\\"\".equals(sCgclass)) {\n+                        serviceType = \"GSM\";\n+                    }\n+                }\n+            }\n+        }\n+\n+        return serviceType;\n+    }\n+\n+    @Override\n+    public List<ModemTechnologyType> getTechnologyTypes() throws KuraException {\n+\n+        List<ModemTechnologyType> modemTechnologyTypes;\n+        ModemDevice device = getModemDevice();\n+        if (device == null) {\n+            throw new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No modem device\");\n+        }\n+        if (device instanceof UsbModemDevice) {\n+            SupportedUsbModemInfo usbModemInfo = SupportedUsbModemsInfo.getModem((UsbModemDevice) device);\n+            if (usbModemInfo != null) {\n+                modemTechnologyTypes = usbModemInfo.getTechnologyTypes();\n+            } else {\n+                throw new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No usbModemInfo available\");\n+            }\n+        } else {\n+            throw new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"Unsupported modem device\");\n+        }\n+        return modemTechnologyTypes;\n+    }\n+\n+    protected String getUnusedAtPort() throws KuraException {\n+        String port;\n+        if (isGpsEnabled() && getAtPort().equals(getGpsPort()) && !getAtPort().equals(getDataPort())) {\n+            port = getDataPort();\n+        } else {\n+            port = getAtPort();\n+        }\n+        return port;\n+    }\n+\n+    protected List<ModemPdpContext> getPdpContextInfo(CommConnection comm) throws KuraException {\n+        List<ModemPdpContext> pdpContextInfo = new ArrayList<>();\n+        byte[] reply;\n+        if (!isAtReachable(comm)) {\n+            closeSerialPort(comm);\n+            throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+        }\n+        try {\n+            reply = comm.sendCommand(formGetPdpContextAtCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+        } catch (IOException e) {\n+            throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+        }\n+        if (reply != null) {\n+            String sreply = this.getResponseString(reply);\n+            Scanner scanner = new Scanner(sreply);\n+            while (scanner.hasNextLine()) {\n+                String[] tokens = scanner.nextLine().split(\",\");\n+                if (!tokens[0].startsWith(\"+CGDCONT:\")) {\n+                    continue;\n+                }\n+                int contextNo = Integer.parseInt(tokens[0].substring(\"+CGDCONT:\".length()).trim());\n+                ModemPdpContextType pdpType = ModemPdpContextType\n+                    .getContextType(tokens[1].substring(1, tokens[1].length() - 1));\n+                String apn = tokens[2].substring(1, tokens[2].length() - 1);\n+                ModemPdpContext modemPdpContext = new ModemPdpContext(contextNo, pdpType, apn);\n+                pdpContextInfo.add(modemPdpContext);\n+            }\n+            scanner.close();\n+        }\n+        return pdpContextInfo;\n+    }\n+\n+    protected boolean isSimCardReady(CommConnection comm) throws KuraException, IOException {\n+        boolean simReady = false;\n+        byte[] reply = comm.sendCommand(\n+            TelitHe910AtCommands.GET_SIM_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+        if (reply != null) {\n+            String simStatus = getResponseString(reply);\n+            String[] simStatusSplit = simStatus.split(\",\");\n+            if (simStatusSplit.length > 1 && Integer.valueOf(simStatusSplit[1]) > 0) {\n+                simReady = true;\n+            }\n+        }\n+        return simReady;\n+    }\n+\n+    protected boolean simultateInsertSimCard(CommConnection comm) throws KuraException, IOException {\n+        boolean simReady = false;\n+        byte[] reply = comm.sendCommand(\n+            TelitHe910AtCommands.SIMULATE_SIM_NOT_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n+            100);\n+        if (reply != null) {\n+            sleep(5000);\n+            reply = comm.sendCommand(\n+                TelitHe910AtCommands.SIMULATE_SIM_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n+                100);\n+            if (reply != null) {\n+                sleep(1000);\n+                simReady = isSimCardReady(comm);\n+            }\n+        }\n+        return simReady;\n+    }\n+\n+    protected boolean execCommand(CommConnection comm, byte[] command, int timeout) throws KuraException, IOException {\n+        boolean ok;\n+        byte[] reply = comm.sendCommand(command, timeout, 100);\n+        if (reply != null) {\n+            ok = new String(reply, StandardCharsets.US_ASCII).contains(\"OK\");\n+        } else {\n+            throw new KuraException(KuraErrorCode.TIMED_OUT);\n+        }\n+        return ok;\n+    }\n+\n+    protected String formSetPdpContextAtCommand() {\n+        String result = null;\n+        List<NetConfig> configs = getConfiguration();\n+        for (NetConfig config : configs) {\n+            if (config instanceof ModemConfig) {\n+                ModemConfig modemConfig = (ModemConfig) config;\n+                // a little bit silly\n+                String cid = parseContextIdFromDialString(modemConfig.getDialString());\n+                String apn = modemConfig.getApn();\n+                String pdpType = modemConfig.getPdpType().name();\n+                StringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand()).append(\"=\")\n+                    .append(cid).append(\",\").append('\"').append(pdpType).append('\"').append(\",\").append('\"')\n+                    .append(apn).append('\"').append(\"\\r\\n\");\n+                result = sb.toString();\n+                break;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    protected String parseContextIdFromDialString(String dialString) {\n+        int start = dialString.lastIndexOf('*');\n+        return dialString.substring(start + 1, dialString.length() - 1);\n+    }\n+\n+    protected ModemPdpContext getConfigPdpContext() {\n+        ModemPdpContext result = null;\n+        List<NetConfig> configs = getConfiguration();\n+        for (NetConfig config : configs) {\n+            if (config instanceof ModemConfig) {\n+                ModemConfig modemConfig = (ModemConfig) config;\n+                // a little bit silly\n+                int cid = Integer.parseInt(parseContextIdFromDialString(modemConfig.getDialString()));\n+                String apn = modemConfig.getApn();\n+                PdpType pdpType = modemConfig.getPdpType();\n+\n+                ModemPdpContextType modemPdpType;\n+                switch (pdpType) {\n+                    case IP:\n+                        modemPdpType = ModemPdpContextType.IP;\n+                        break;\n+                    case IPv6:\n+                        modemPdpType = ModemPdpContextType.IPV6;\n+                        break;\n+                    case PPP:\n+                        modemPdpType = ModemPdpContextType.PPP;\n+                        break;\n+                    default:\n+                        modemPdpType = ModemPdpContextType.IPV4IPV6;\n+                }\n+\n+                result = new ModemPdpContext(cid, modemPdpType, apn);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    protected String getContextId() {\n+        String cid = null;\n+        List<NetConfig> configs = getConfiguration();\n+        for (NetConfig config : configs) {\n+            if (config instanceof ModemConfig) {\n+                ModemConfig modemConfig = (ModemConfig) config;\n+                // a little bit silly\n+                cid = parseContextIdFromDialString(modemConfig.getDialString());\n+                break;\n+            }\n+        }\n+        return cid;\n+    }\n+\n+    protected String formGetPdpContextAtCommand() {\n+        StringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand());\n+        sb.append(\"?\\r\\n\");\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public boolean hasDiversityAntenna() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isDiversityEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void enableDiversity() throws KuraException {\n         throw new KuraException(KuraErrorCode.OPERATION_NOT_SUPPORTED);\n-\t}\n+    }\n \n-\t@Override\n-\tpublic void disableDiversity() throws KuraException {\n+    @Override\n+    public void disableDiversity() throws KuraException {\n         throw new KuraException(KuraErrorCode.OPERATION_NOT_SUPPORTED);\n-\t}\n+    }\n }\n",
            "diff_size": 460
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "47",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "406",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/26/TelitHe910.java\nindex 24aca2cf21e..6edb0d92282 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/26/TelitHe910.java\n@@ -42,7 +42,7 @@ import org.slf4j.LoggerFactory;\n  */\n public class TelitHe910 extends TelitModem implements HspaCellularModem {\n \n-\tprivate static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n+    private static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n \n \t/**\n \t * TelitHe910 modem constructor\n@@ -52,18 +52,17 @@ public class TelitHe910 extends TelitModem implements HspaCellularModem {\n \t * @param connectionFactory - connection factory {@link ConnectionFactory}\n \t */\n \tpublic TelitHe910(ModemDevice device, String platform, ConnectionFactory connectionFactory) {\n-\n-\t\tsuper(device, platform, connectionFactory);\n+    super(device, platform, connectionFactory);\n \n \t\ttry {\n-\t\t\tString atPort = getAtPort();\n+    String atPort = getAtPort();\n \t\t\tString gpsPort = getGpsPort();\n \t\t\tif (atPort != null && (atPort.equals(getDataPort()) || atPort.equals(gpsPort))) {\n-\t\t\t\tthis.serialNumber = getSerialNumber();\n+    this.serialNumber = getSerialNumber();\n \t\t\t\tthis.imsi = getMobileSubscriberIdentity();\n \t\t\t\tthis.iccid = getIntegratedCirquitCardId();\n-                this.model = getModel();\n-\t\t\t\tthis.manufacturer = getManufacturer();\n+this.model = getModel();\n+this.manufacturer = getManufacturer();\n \t\t\t\tthis.revisionId = getRevisionID();\n \t\t\t\tthis.gpsSupported = isGpsSupported();\n \t\t\t\tthis.rssi = getSignalStrength();\n@@ -76,370 +75,354 @@ public class TelitHe910 extends TelitModem implements HspaCellularModem {\n \t\t\t\tlogger.trace(\"{} :: Revision ID={}\", getClass().getName(), this.revisionId);\n \t\t\t\tlogger.trace(\"{} :: GPS Supported={}\", getClass().getName(), this.gpsSupported);\n \t\t\t\tlogger.trace(\"{} :: RSSI={}\", getClass().getName(), this.rssi);\n-\t\t\t}\n-\t\t} catch (KuraException e) {\n-\t\t\tlogger.error(\"Failed to initialize TelitHe910\", e);\n-\t\t}\n-\t}\n+    }\n+    } catch (KuraException e) {\n+    logger.error(\"Failed to initialize TelitHe910\", e);\n+    }\n+    }\n \n \t@Override\n \tpublic boolean isTelitSimCardReady() throws KuraException {\n-\t\tboolean simReady = false;\n+    boolean simReady = false;\n \t\tsynchronized (this.atLock) {\n-\t\t\tCommConnection commAtConnection = null;\n+    CommConnection commAtConnection = null;\n \t\t\ttry {\n-\t\t\t\tString port = getUnusedAtPort();\n-\t\t\t\tlogger.debug(\"sendCommand getSimStatus :: {} command to port {}\",\n-\t\t\t\t\t\tTelitHe910AtCommands.GET_SIM_STATUS.getCommand(), port);\n-\n-\t\t\t\tcommAtConnection = openSerialPort(port);\n+    String port = getUnusedAtPort();\n+\t\t\t\tlogger.debug(\"sendCommand getSimStatus :: {} command to port {}\", TelitHe910AtCommands.GET_SIM_STATUS.getCommand(), port);\n+commAtConnection = openSerialPort(port);\n \t\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t\t}\n+    throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+    }\n \n \t\t\t\tsimReady = isSimCardReady(commAtConnection);\n \t\t\t\tif (!simReady) {\n-\t\t\t\t\tsimReady = simultateInsertSimCard(commAtConnection);\n-\t\t\t\t}\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t} finally {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t}\n-\t\t}\n+    simReady = simultateInsertSimCard(commAtConnection);\n+    }\n+    } catch (IOException e) {\n+    throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+    } finally {\n+    closeSerialPort(commAtConnection);\n+    }\n+    }\n \t\treturn simReady;\n-\t}\n+    }\n \n \t@Override\n \tpublic boolean isSimCardReady() throws KuraException {\n-\t\treturn isTelitSimCardReady();\n-\t}\n+    return isTelitSimCardReady();\n+    }\n \n \t@Override\n \tpublic ModemRegistrationStatus getRegistrationStatus() throws KuraException {\n-\n-\t\tModemRegistrationStatus modemRegistrationStatus = ModemRegistrationStatus.UNKNOWN;\n+    ModemRegistrationStatus modemRegistrationStatus = ModemRegistrationStatus.UNKNOWN;\n \t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getRegistrationStatus :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand());\n-\t\t\tbyte[] reply;\n+    logger.debug(\"sendCommand getRegistrationStatus :: {}\", TelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand());\n+byte[] reply;\n \t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n \t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n+    closeSerialPort(commAtConnection);\n \t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n+    }\n \t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(\n-\t\t\t\t\t\tTelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII),\n+    reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII),\n \t\t\t\t\t\t1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n+    } catch (IOException e) {\n+    closeSerialPort(commAtConnection);\n \t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n+    }\n \t\t\tif (reply != null) {\n-\t\t\t\tString sRegStatus = getResponseString(reply);\n+    String sRegStatus = getResponseString(reply);\n \t\t\t\tString[] regStatusSplit = sRegStatus.split(\",\");\n \t\t\t\tif (regStatusSplit.length >= 2) {\n-\t\t\t\t\tint status = Integer.parseInt(regStatusSplit[1]);\n+    int status = Integer.parseInt(regStatusSplit[1]);\n \t\t\t\t\tswitch (status) {\n \t\t\t\t\tcase 0:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.NOT_REGISTERED;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 1:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.REGISTERED_HOME;\n+    modemRegistrationStatus = ModemRegistrationStatus.NOT_REGISTERED;\n \t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 3:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.REGISTRATION_DENIED;\n+    case 1:\n+    modemRegistrationStatus = ModemRegistrationStatus.REGISTERED_HOME;\n \t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 5:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.REGISTERED_ROAMING;\n+    case 3:\n+    modemRegistrationStatus = ModemRegistrationStatus.REGISTRATION_DENIED;\n \t\t\t\t\t\tbreak;\n-\t\t\t\t\tdefault:\n+    case 5:\n+    modemRegistrationStatus = ModemRegistrationStatus.REGISTERED_ROAMING;\n \t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    default:\n+    break;\n+    }\n+    }\n+    }\n+    }\n \t\treturn modemRegistrationStatus;\n-\t}\n+    }\n \n \t@Override\n \tpublic long getCallTxCounter() throws KuraException {\n-\n-\t\tlong txCnt = 0;\n+    long txCnt = 0;\n \t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n-\t\t\tbyte[] reply;\n+    logger.debug(\"sendCommand getGprsSessionDataVolume :: {}\", TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n+byte[] reply;\n \t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n \t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n+    closeSerialPort(commAtConnection);\n \t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n+    }\n \t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand()\n-\t\t\t\t\t\t.getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n+    reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+    } catch (IOException e) {\n+    closeSerialPort(commAtConnection);\n \t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n+    }\n \t\t\tcloseSerialPort(commAtConnection);\n \t\t\tif (reply != null) {\n-\t\t\t\tString[] splitPdp;\n+    String[] splitPdp;\n \t\t\t\tString[] splitData;\n \t\t\t\tString sDataVolume = this.getResponseString(reply);\n \t\t\t\tsplitPdp = sDataVolume.split(\"#GDATAVOL:\");\n \t\t\t\tif (splitPdp.length > 1) {\n-\t\t\t\t\tfor (String pdp : splitPdp) {\n-\t\t\t\t\t\tif (pdp.trim().length() > 0) {\n-\t\t\t\t\t\t\tsplitData = pdp.trim().split(\",\");\n+    for (String pdp : splitPdp) {\n+    if (pdp.trim().length() > 0) {\n+    splitData = pdp.trim().split(\",\");\n \t\t\t\t\t\t\tif (splitData.length >= 4) {\n-\t\t\t\t\t\t\t\tint pdpNo = Integer.parseInt(splitData[0]);\n+    int pdpNo = Integer.parseInt(splitData[0]);\n \t\t\t\t\t\t\t\tif (pdpNo == Integer.valueOf(getContextId())) {\n-\t\t\t\t\t\t\t\t\ttxCnt = Integer.parseInt(splitData[2]);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    txCnt = Integer.parseInt(splitData[2]);\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n \t\treturn txCnt;\n-\t}\n+    }\n \n \t@Override\n \tpublic long getCallRxCounter() throws KuraException {\n-\t\tlong rxCnt = 0;\n+    long rxCnt = 0;\n \t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n-\t\t\tbyte[] reply;\n+    logger.debug(\"sendCommand getGprsSessionDataVolume :: {}\", TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n+byte[] reply;\n \t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n \t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n+    closeSerialPort(commAtConnection);\n \t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n+    }\n \t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand()\n-\t\t\t\t\t\t.getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n+    reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+    } catch (IOException e) {\n+    closeSerialPort(commAtConnection);\n \t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n+    }\n \t\t\tcloseSerialPort(commAtConnection);\n \t\t\tif (reply != null) {\n-\t\t\t\tString[] splitPdp;\n+    String[] splitPdp;\n \t\t\t\tString[] splitData;\n \t\t\t\tString sDataVolume = this.getResponseString(reply);\n \t\t\t\tsplitPdp = sDataVolume.split(\"#GDATAVOL:\");\n \t\t\t\tif (splitPdp.length > 1) {\n-\t\t\t\t\tfor (String pdp : splitPdp) {\n-\t\t\t\t\t\tif (pdp.trim().length() > 0) {\n-\t\t\t\t\t\t\tsplitData = pdp.trim().split(\",\");\n+    for (String pdp : splitPdp) {\n+    if (pdp.trim().length() > 0) {\n+    splitData = pdp.trim().split(\",\");\n \t\t\t\t\t\t\tif (splitData.length >= 4) {\n-\t\t\t\t\t\t\t\tint pdpNo = Integer.parseInt(splitData[0]);\n+    int pdpNo = Integer.parseInt(splitData[0]);\n \t\t\t\t\t\t\t\tif (pdpNo == Integer.valueOf(getContextId())) {\n-\t\t\t\t\t\t\t\t\trxCnt = Integer.parseInt(splitData[3]);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    rxCnt = Integer.parseInt(splitData[3]);\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n+    }\n \t\treturn rxCnt;\n-\t}\n+    }\n \n \t@Override\n \tpublic List<ModemPdpContext> getPdpContextInfo() throws KuraException {\n-\t\tsynchronized (this.atLock) {\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n+    synchronized (this.atLock) {\n+    CommConnection commAtConnection = openSerialPort(getAtPort());\n \t\t\ttry {\n-\t\t\t\treturn getPdpContextInfo(commAtConnection);\n-\t\t\t} finally {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t}\n-\t\t}\n-\t}\n+    return getPdpContextInfo(commAtConnection);\n+    } finally {\n+    closeSerialPort(commAtConnection);\n+    }\n+    }\n+    }\n \n \t@Override\n \tpublic String getServiceType() throws KuraException {\n-\t\tString serviceType = null;\n+    String serviceType = null;\n \t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getMobileStationClass :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand());\n-\t\t\tbyte[] reply;\n+    logger.debug(\"sendCommand getMobileStationClass :: {}\", TelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand());\n+byte[] reply;\n \t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n \t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n+    closeSerialPort(commAtConnection);\n \t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n+    }\n \t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(\n-\t\t\t\t\t\tTelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand().getBytes(StandardCharsets.US_ASCII),\n+    reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand().getBytes(StandardCharsets.US_ASCII),\n \t\t\t\t\t\t1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n+    } catch (IOException e) {\n+    closeSerialPort(commAtConnection);\n \t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n+    }\n \t\t\tcloseSerialPort(commAtConnection);\n \t\t\tif (reply != null) {\n-\t\t\t\tString sCgclass = this.getResponseString(reply);\n+    String sCgclass = this.getResponseString(reply);\n \t\t\t\tif (sCgclass.startsWith(\"+CGCLASS:\")) {\n-\t\t\t\t\tsCgclass = sCgclass.substring(\"+CGCLASS:\".length()).trim();\n+    sCgclass = sCgclass.substring(\"+CGCLASS:\".length()).trim();\n \t\t\t\t\tif (\"\\\"A\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"UMTS\";\n-\t\t\t\t\t} else if (\"\\\"B\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"GSM/GPRS\";\n-\t\t\t\t\t} else if (\"\\\"CG\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"GPRS\";\n-\t\t\t\t\t} else if (\"\\\"CC\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"GSM\";\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    serviceType = \"UMTS\";\n+    } else if (\"\\\"B\\\"\".equals(sCgclass)) {\n+    serviceType = \"GSM/GPRS\";\n+    } else if (\"\\\"CG\\\"\".equals(sCgclass)) {\n+    serviceType = \"GPRS\";\n+    } else if (\"\\\"CC\\\"\".equals(sCgclass)) {\n+    serviceType = \"GSM\";\n+    }\n+    }\n+    }\n+    }\n \n \t\treturn serviceType;\n-\t}\n+    }\n \n \t@Override\n \tpublic List<ModemTechnologyType> getTechnologyTypes() throws KuraException {\n \n-\t\tList<ModemTechnologyType> modemTechnologyTypes;\n+    List<ModemTechnologyType> modemTechnologyTypes;\n \t\tModemDevice device = getModemDevice();\n \t\tif (device == null) {\n-\t\t\tthrow new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No modem device\");\n-\t\t}\n+    throw new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No modem device\");\n+    }\n \t\tif (device instanceof UsbModemDevice) {\n-\t\t\tSupportedUsbModemInfo usbModemInfo = SupportedUsbModemsInfo.getModem((UsbModemDevice) device);\n+    SupportedUsbModemInfo usbModemInfo = SupportedUsbModemsInfo.getModem((UsbModemDevice) device);\n \t\t\tif (usbModemInfo != null) {\n-\t\t\t\tmodemTechnologyTypes = usbModemInfo.getTechnologyTypes();\n-\t\t\t} else {\n-\t\t\t\tthrow new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No usbModemInfo available\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"Unsupported modem device\");\n-\t\t}\n+    modemTechnologyTypes = usbModemInfo.getTechnologyTypes();\n+    } else {\n+    throw new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No usbModemInfo available\");\n+    }\n+    } else {\n+    throw new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"Unsupported modem device\");\n+    }\n \t\treturn modemTechnologyTypes;\n-\t}\n+    }\n \n \tprotected String getUnusedAtPort() throws KuraException {\n-\t\tString port;\n+    String port;\n \t\tif (isGpsEnabled() && getAtPort().equals(getGpsPort()) && !getAtPort().equals(getDataPort())) {\n-\t\t\tport = getDataPort();\n-\t\t} else {\n-\t\t\tport = getAtPort();\n-\t\t}\n+    port = getDataPort();\n+    } else {\n+    port = getAtPort();\n+    }\n \t\treturn port;\n-\t}\n+    }\n \n \tprotected List<ModemPdpContext> getPdpContextInfo(CommConnection comm) throws KuraException {\n-\t\tList<ModemPdpContext> pdpContextInfo = new ArrayList<>();\n+\n+    List<ModemPdpContext> pdpContextInfo = new ArrayList<>();\n \t\tbyte[] reply;\n \t\tif (!isAtReachable(comm)) {\n-\t\t\tcloseSerialPort(comm);\n+    closeSerialPort(comm);\n \t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t}\n+    }\n \t\ttry {\n-\t\t\treply = comm.sendCommand(formGetPdpContextAtCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t}\n+    reply = comm.sendCommand(formGetPdpContextAtCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+    } catch (IOException e) {\n+    throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+    }\n \t\tif (reply != null) {\n-\t\t\tString sreply = this.getResponseString(reply);\n+    String sreply = this.getResponseString(reply);\n \t\t\tScanner scanner = new Scanner(sreply);\n \t\t\twhile (scanner.hasNextLine()) {\n-\t\t\t\tString[] tokens = scanner.nextLine().split(\",\");\n+    String[] tokens = scanner.nextLine().split(\",\");\n \t\t\t\tif (!tokens[0].startsWith(\"+CGDCONT:\")) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n+    continue;\n+    }\n \t\t\t\tint contextNo = Integer.parseInt(tokens[0].substring(\"+CGDCONT:\".length()).trim());\n-\t\t\t\tModemPdpContextType pdpType = ModemPdpContextType\n-\t\t\t\t\t\t.getContextType(tokens[1].substring(1, tokens[1].length() - 1));\n-\t\t\t\tString apn = tokens[2].substring(1, tokens[2].length() - 1);\n+\t\t\t\tModemPdpContextType pdpType = ModemPdpContextType.getContextType(tokens[1].substring(1, tokens[1].length() - 1));\n+String apn = tokens[2].substring(1, tokens[2].length() - 1);\n \t\t\t\tModemPdpContext modemPdpContext = new ModemPdpContext(contextNo, pdpType, apn);\n \t\t\t\tpdpContextInfo.add(modemPdpContext);\n-\t\t\t}\n+    }\n \t\t\tscanner.close();\n-\t\t}\n+    }\n \t\treturn pdpContextInfo;\n-\t}\n+    }\n \n \tprotected boolean isSimCardReady(CommConnection comm) throws KuraException, IOException {\n-\t\tboolean simReady = false;\n-\t\tbyte[] reply = comm.sendCommand(\n-\t\t\t\tTelitHe910AtCommands.GET_SIM_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\tif (reply != null) {\n-\t\t\tString simStatus = getResponseString(reply);\n+    boolean simReady = false;\n+\t\tbyte[] reply = comm.sendCommand(TelitHe910AtCommands.GET_SIM_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+if (reply != null) {\n+    String simStatus = getResponseString(reply);\n \t\t\tString[] simStatusSplit = simStatus.split(\",\");\n \t\t\tif (simStatusSplit.length > 1 && Integer.valueOf(simStatusSplit[1]) > 0) {\n-\t\t\t\tsimReady = true;\n-\t\t\t}\n-\t\t}\n+    simReady = true;\n+    }\n+    }\n \t\treturn simReady;\n-\t}\n+    }\n \n \tprotected boolean simultateInsertSimCard(CommConnection comm) throws KuraException, IOException {\n-\t\tboolean simReady = false;\n-\t\tbyte[] reply = comm.sendCommand(\n-\t\t\t\tTelitHe910AtCommands.SIMULATE_SIM_NOT_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n+    boolean simReady = false;\n+\t\tbyte[] reply = comm.sendCommand(TelitHe910AtCommands.SIMULATE_SIM_NOT_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n \t\t\t\t100);\n-\t\tif (reply != null) {\n-\t\t\tsleep(5000);\n-\t\t\treply = comm.sendCommand(\n-\t\t\t\t\tTelitHe910AtCommands.SIMULATE_SIM_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n+if (reply != null) {\n+    sleep(5000);\n+\t\t\treply = comm.sendCommand(TelitHe910AtCommands.SIMULATE_SIM_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n \t\t\t\t\t100);\n-\t\t\tif (reply != null) {\n-\t\t\t\tsleep(1000);\n+if (reply != null) {\n+    sleep(1000);\n \t\t\t\tsimReady = isSimCardReady(comm);\n-\t\t\t}\n-\t\t}\n+    }\n+    }\n \t\treturn simReady;\n-\t}\n+    }\n \n \tprotected boolean execCommand(CommConnection comm, byte[] command, int timeout) throws KuraException, IOException {\n-\t\tboolean ok;\n+    boolean ok;\n \t\tbyte[] reply = comm.sendCommand(command, timeout, 100);\n \t\tif (reply != null) {\n-\t\t\tok = new String(reply, StandardCharsets.US_ASCII).contains(\"OK\");\n-\t\t} else {\n-\t\t\tthrow new KuraException(KuraErrorCode.TIMED_OUT);\n-\t\t}\n+    ok = new String(reply, StandardCharsets.US_ASCII).contains(\"OK\");\n+    } else {\n+    throw new KuraException(KuraErrorCode.TIMED_OUT);\n+    }\n \t\treturn ok;\n-\t}\n+    }\n \n \tprotected String formSetPdpContextAtCommand() {\n-\t\tString result = null;\n+    String result = null;\n \t\tList<NetConfig> configs = getConfiguration();\n \t\tfor (NetConfig config : configs) {\n-\t\t\tif (config instanceof ModemConfig) {\n-\t\t\t\tModemConfig modemConfig = (ModemConfig) config;\n+    if (config instanceof ModemConfig) {\n+    ModemConfig modemConfig = (ModemConfig) config;\n \t\t\t\t// a little bit silly\n \t\t\t\tString cid = parseContextIdFromDialString(modemConfig.getDialString());\n \t\t\t\tString apn = modemConfig.getApn();\n \t\t\t\tString pdpType = modemConfig.getPdpType().name();\n-\t\t\t\tStringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand()).append(\"=\")\n-\t\t\t\t\t\t.append(cid).append(\",\").append('\"').append(pdpType).append('\"').append(\",\").append('\"')\n+\t\t\t\tStringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand()).append(\"=\").append(cid).append(\",\").append('\"').append(pdpType).append('\"').append(\",\").append('\"')\n \t\t\t\t\t\t.append(apn).append('\"').append(\"\\r\\n\");\n-\t\t\t\tresult = sb.toString();\n+result = sb.toString();\n \t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n+    }\n+    }\n \t\treturn result;\n-\t}\n+    }\n \n \tprotected String parseContextIdFromDialString(String dialString) {\n-\t\tint start = dialString.lastIndexOf('*');\n+    int start = dialString.lastIndexOf('*');\n \t\treturn dialString.substring(start + 1, dialString.length() - 1);\n-\t}\n+    }\n \n \tprotected ModemPdpContext getConfigPdpContext() {\n-\t\tModemPdpContext result = null;\n+    ModemPdpContext result = null;\n \t\tList<NetConfig> configs = getConfiguration();\n \t\tfor (NetConfig config : configs) {\n-\t\t\tif (config instanceof ModemConfig) {\n-\t\t\t\tModemConfig modemConfig = (ModemConfig) config;\n+    if (config instanceof ModemConfig) {\n+    ModemConfig modemConfig = (ModemConfig) config;\n \t\t\t\t// a little bit silly\n \t\t\t\tint cid = Integer.parseInt(parseContextIdFromDialString(modemConfig.getDialString()));\n \t\t\t\tString apn = modemConfig.getApn();\n@@ -448,61 +431,61 @@ public class TelitHe910 extends TelitModem implements HspaCellularModem {\n \t\t\t\tModemPdpContextType modemPdpType;\n \t\t\t\tswitch (pdpType) {\n \t\t\t\tcase IP:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.IP;\n+    modemPdpType = ModemPdpContextType.IP;\n \t\t\t\t\tbreak;\n-\t\t\t\tcase IPv6:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.IPV6;\n+    case IPv6:\n+    modemPdpType = ModemPdpContextType.IPV6;\n \t\t\t\t\tbreak;\n-\t\t\t\tcase PPP:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.PPP;\n+    case PPP:\n+    modemPdpType = ModemPdpContextType.PPP;\n \t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.IPV4IPV6;\n-\t\t\t\t}\n+    default:\n+    modemPdpType = ModemPdpContextType.IPV4IPV6;\n+    }\n \n \t\t\t\tresult = new ModemPdpContext(cid, modemPdpType, apn);\n-\t\t\t}\n-\t\t}\n+    }\n+    }\n \t\treturn result;\n-\t}\n+    }\n \n \tprotected String getContextId() {\n-\t\tString cid = null;\n+    String cid = null;\n \t\tList<NetConfig> configs = getConfiguration();\n \t\tfor (NetConfig config : configs) {\n-\t\t\tif (config instanceof ModemConfig) {\n-\t\t\t\tModemConfig modemConfig = (ModemConfig) config;\n+    if (config instanceof ModemConfig) {\n+    ModemConfig modemConfig = (ModemConfig) config;\n \t\t\t\t// a little bit silly\n \t\t\t\tcid = parseContextIdFromDialString(modemConfig.getDialString());\n \t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n+    }\n+    }\n \t\treturn cid;\n-\t}\n+    }\n \n \tprotected String formGetPdpContextAtCommand() {\n-\t\tStringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand());\n+    StringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand());\n \t\tsb.append(\"?\\r\\n\");\n \t\treturn sb.toString();\n-\t}\n+    }\n \n \t@Override\n \tpublic boolean hasDiversityAntenna() {\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \t@Override\n \tpublic boolean isDiversityEnabled() {\n-\t\treturn false;\n-\t}\n+    return false;\n+    }\n \n \t@Override\n \tpublic void enableDiversity() throws KuraException {\n-        throw new KuraException(KuraErrorCode.OPERATION_NOT_SUPPORTED);\n-\t}\n+    throw new KuraException(KuraErrorCode.OPERATION_NOT_SUPPORTED);\n+    }\n \n \t@Override\n \tpublic void disableDiversity() throws KuraException {\n-        throw new KuraException(KuraErrorCode.OPERATION_NOT_SUPPORTED);\n-\t}\n-}\n+    throw new KuraException(KuraErrorCode.OPERATION_NOT_SUPPORTED);\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 252
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "224",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "282",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "423",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 239).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/26/TelitHe910.java\nindex 24aca2cf21e..da9ee23a820 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/26/TelitHe910.java\n@@ -16,7 +16,6 @@ import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Scanner;\n-\n import org.eclipse.kura.KuraErrorCode;\n import org.eclipse.kura.KuraException;\n import org.eclipse.kura.comm.CommConnection;\n@@ -40,469 +39,467 @@ import org.slf4j.LoggerFactory;\n /**\n  * Defines Telit HE910 modem\n  */\n+\n public class TelitHe910 extends TelitModem implements HspaCellularModem {\n \n-\tprivate static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n-\n-\t/**\n-\t * TelitHe910 modem constructor\n-\t *\n-\t * @param usbDevice         - modem USB device as {@link UsbModemDevice}\n-\t * @param platform          - hardware platform as {@link String}\n-\t * @param connectionFactory - connection factory {@link ConnectionFactory}\n-\t */\n-\tpublic TelitHe910(ModemDevice device, String platform, ConnectionFactory connectionFactory) {\n-\n-\t\tsuper(device, platform, connectionFactory);\n-\n-\t\ttry {\n-\t\t\tString atPort = getAtPort();\n-\t\t\tString gpsPort = getGpsPort();\n-\t\t\tif (atPort != null && (atPort.equals(getDataPort()) || atPort.equals(gpsPort))) {\n-\t\t\t\tthis.serialNumber = getSerialNumber();\n-\t\t\t\tthis.imsi = getMobileSubscriberIdentity();\n-\t\t\t\tthis.iccid = getIntegratedCirquitCardId();\n+    private static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n+\n+    /**\n+     * TelitHe910 modem constructor\n+     *\n+     * @param usbDevice         - modem USB device as {@link UsbModemDevice}\n+     * @param platform          - hardware platform as {@link String}\n+     * @param connectionFactory - connection factory {@link ConnectionFactory}\n+     */\n+\n+    public TelitHe910(ModemDevice device, String platform, ConnectionFactory connectionFactory) {\n+        super(device, platform, connectionFactory);\n+\n+        try {\n+            String atPort = getAtPort();\n+            String gpsPort = getGpsPort();\n+            if (atPort != null && (atPort.equals(getDataPort()) || atPort.equals(gpsPort))) {\n+                this.serialNumber = getSerialNumber();\n+                this.imsi = getMobileSubscriberIdentity();\n+                this.iccid = getIntegratedCirquitCardId();\n                 this.model = getModel();\n-\t\t\t\tthis.manufacturer = getManufacturer();\n-\t\t\t\tthis.revisionId = getRevisionID();\n-\t\t\t\tthis.gpsSupported = isGpsSupported();\n-\t\t\t\tthis.rssi = getSignalStrength();\n-\n-\t\t\t\tlogger.trace(\"{} :: Serial Number={}\", getClass().getName(), this.serialNumber);\n-\t\t\t\tlogger.trace(\"{} :: IMSI={}\", getClass().getName(), this.imsi);\n-\t\t\t\tlogger.trace(\"{} :: ICCID={}\", getClass().getName(), this.iccid);\n-\t\t\t\tlogger.trace(\"{} :: Model={}\", getClass().getName(), this.model);\n-\t\t\t\tlogger.trace(\"{} :: Manufacturer={}\", getClass().getName(), this.manufacturer);\n-\t\t\t\tlogger.trace(\"{} :: Revision ID={}\", getClass().getName(), this.revisionId);\n-\t\t\t\tlogger.trace(\"{} :: GPS Supported={}\", getClass().getName(), this.gpsSupported);\n-\t\t\t\tlogger.trace(\"{} :: RSSI={}\", getClass().getName(), this.rssi);\n-\t\t\t}\n-\t\t} catch (KuraException e) {\n-\t\t\tlogger.error(\"Failed to initialize TelitHe910\", e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isTelitSimCardReady() throws KuraException {\n-\t\tboolean simReady = false;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tCommConnection commAtConnection = null;\n-\t\t\ttry {\n-\t\t\t\tString port = getUnusedAtPort();\n-\t\t\t\tlogger.debug(\"sendCommand getSimStatus :: {} command to port {}\",\n-\t\t\t\t\t\tTelitHe910AtCommands.GET_SIM_STATUS.getCommand(), port);\n-\n-\t\t\t\tcommAtConnection = openSerialPort(port);\n-\t\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t\t}\n-\n-\t\t\t\tsimReady = isSimCardReady(commAtConnection);\n-\t\t\t\tif (!simReady) {\n-\t\t\t\t\tsimReady = simultateInsertSimCard(commAtConnection);\n-\t\t\t\t}\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t} finally {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t}\n-\t\t}\n-\t\treturn simReady;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isSimCardReady() throws KuraException {\n-\t\treturn isTelitSimCardReady();\n-\t}\n-\n-\t@Override\n-\tpublic ModemRegistrationStatus getRegistrationStatus() throws KuraException {\n-\n-\t\tModemRegistrationStatus modemRegistrationStatus = ModemRegistrationStatus.UNKNOWN;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getRegistrationStatus :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand());\n-\t\t\tbyte[] reply;\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(\n-\t\t\t\t\t\tTelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII),\n-\t\t\t\t\t\t1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n-\t\t\tif (reply != null) {\n-\t\t\t\tString sRegStatus = getResponseString(reply);\n-\t\t\t\tString[] regStatusSplit = sRegStatus.split(\",\");\n-\t\t\t\tif (regStatusSplit.length >= 2) {\n-\t\t\t\t\tint status = Integer.parseInt(regStatusSplit[1]);\n-\t\t\t\t\tswitch (status) {\n-\t\t\t\t\tcase 0:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.NOT_REGISTERED;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 1:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.REGISTERED_HOME;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 3:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.REGISTRATION_DENIED;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tcase 5:\n-\t\t\t\t\t\tmodemRegistrationStatus = ModemRegistrationStatus.REGISTERED_ROAMING;\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\tdefault:\n-\t\t\t\t\t\tbreak;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn modemRegistrationStatus;\n-\t}\n-\n-\t@Override\n-\tpublic long getCallTxCounter() throws KuraException {\n-\n-\t\tlong txCnt = 0;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n-\t\t\tbyte[] reply;\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand()\n-\t\t\t\t\t\t.getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n-\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\tif (reply != null) {\n-\t\t\t\tString[] splitPdp;\n-\t\t\t\tString[] splitData;\n-\t\t\t\tString sDataVolume = this.getResponseString(reply);\n-\t\t\t\tsplitPdp = sDataVolume.split(\"#GDATAVOL:\");\n-\t\t\t\tif (splitPdp.length > 1) {\n-\t\t\t\t\tfor (String pdp : splitPdp) {\n-\t\t\t\t\t\tif (pdp.trim().length() > 0) {\n-\t\t\t\t\t\t\tsplitData = pdp.trim().split(\",\");\n-\t\t\t\t\t\t\tif (splitData.length >= 4) {\n-\t\t\t\t\t\t\t\tint pdpNo = Integer.parseInt(splitData[0]);\n-\t\t\t\t\t\t\t\tif (pdpNo == Integer.valueOf(getContextId())) {\n-\t\t\t\t\t\t\t\t\ttxCnt = Integer.parseInt(splitData[2]);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn txCnt;\n-\t}\n-\n-\t@Override\n-\tpublic long getCallRxCounter() throws KuraException {\n-\t\tlong rxCnt = 0;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n-\t\t\tbyte[] reply;\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand()\n-\t\t\t\t\t\t.getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n-\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\tif (reply != null) {\n-\t\t\t\tString[] splitPdp;\n-\t\t\t\tString[] splitData;\n-\t\t\t\tString sDataVolume = this.getResponseString(reply);\n-\t\t\t\tsplitPdp = sDataVolume.split(\"#GDATAVOL:\");\n-\t\t\t\tif (splitPdp.length > 1) {\n-\t\t\t\t\tfor (String pdp : splitPdp) {\n-\t\t\t\t\t\tif (pdp.trim().length() > 0) {\n-\t\t\t\t\t\t\tsplitData = pdp.trim().split(\",\");\n-\t\t\t\t\t\t\tif (splitData.length >= 4) {\n-\t\t\t\t\t\t\t\tint pdpNo = Integer.parseInt(splitData[0]);\n-\t\t\t\t\t\t\t\tif (pdpNo == Integer.valueOf(getContextId())) {\n-\t\t\t\t\t\t\t\t\trxCnt = Integer.parseInt(splitData[3]);\n-\t\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn rxCnt;\n-\t}\n-\n-\t@Override\n-\tpublic List<ModemPdpContext> getPdpContextInfo() throws KuraException {\n-\t\tsynchronized (this.atLock) {\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\ttry {\n-\t\t\t\treturn getPdpContextInfo(commAtConnection);\n-\t\t\t} finally {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic String getServiceType() throws KuraException {\n-\t\tString serviceType = null;\n-\t\tsynchronized (this.atLock) {\n-\t\t\tlogger.debug(\"sendCommand getMobileStationClass :: {}\",\n-\t\t\t\t\tTelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand());\n-\t\t\tbyte[] reply;\n-\t\t\tCommConnection commAtConnection = openSerialPort(getAtPort());\n-\t\t\tif (!isAtReachable(commAtConnection)) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\treply = commAtConnection.sendCommand(\n-\t\t\t\t\t\tTelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand().getBytes(StandardCharsets.US_ASCII),\n-\t\t\t\t\t\t1000, 100);\n-\t\t\t} catch (IOException e) {\n-\t\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t\t}\n-\t\t\tcloseSerialPort(commAtConnection);\n-\t\t\tif (reply != null) {\n-\t\t\t\tString sCgclass = this.getResponseString(reply);\n-\t\t\t\tif (sCgclass.startsWith(\"+CGCLASS:\")) {\n-\t\t\t\t\tsCgclass = sCgclass.substring(\"+CGCLASS:\".length()).trim();\n-\t\t\t\t\tif (\"\\\"A\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"UMTS\";\n-\t\t\t\t\t} else if (\"\\\"B\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"GSM/GPRS\";\n-\t\t\t\t\t} else if (\"\\\"CG\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"GPRS\";\n-\t\t\t\t\t} else if (\"\\\"CC\\\"\".equals(sCgclass)) {\n-\t\t\t\t\t\tserviceType = \"GSM\";\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn serviceType;\n-\t}\n-\n-\t@Override\n-\tpublic List<ModemTechnologyType> getTechnologyTypes() throws KuraException {\n-\n-\t\tList<ModemTechnologyType> modemTechnologyTypes;\n-\t\tModemDevice device = getModemDevice();\n-\t\tif (device == null) {\n-\t\t\tthrow new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No modem device\");\n-\t\t}\n-\t\tif (device instanceof UsbModemDevice) {\n-\t\t\tSupportedUsbModemInfo usbModemInfo = SupportedUsbModemsInfo.getModem((UsbModemDevice) device);\n-\t\t\tif (usbModemInfo != null) {\n-\t\t\t\tmodemTechnologyTypes = usbModemInfo.getTechnologyTypes();\n-\t\t\t} else {\n-\t\t\t\tthrow new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No usbModemInfo available\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"Unsupported modem device\");\n-\t\t}\n-\t\treturn modemTechnologyTypes;\n-\t}\n-\n-\tprotected String getUnusedAtPort() throws KuraException {\n-\t\tString port;\n-\t\tif (isGpsEnabled() && getAtPort().equals(getGpsPort()) && !getAtPort().equals(getDataPort())) {\n-\t\t\tport = getDataPort();\n-\t\t} else {\n-\t\t\tport = getAtPort();\n-\t\t}\n-\t\treturn port;\n-\t}\n-\n-\tprotected List<ModemPdpContext> getPdpContextInfo(CommConnection comm) throws KuraException {\n-\t\tList<ModemPdpContext> pdpContextInfo = new ArrayList<>();\n-\t\tbyte[] reply;\n-\t\tif (!isAtReachable(comm)) {\n-\t\t\tcloseSerialPort(comm);\n-\t\t\tthrow new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n-\t\t}\n-\t\ttry {\n-\t\t\treply = comm.sendCommand(formGetPdpContextAtCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\t} catch (IOException e) {\n-\t\t\tthrow new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n-\t\t}\n-\t\tif (reply != null) {\n-\t\t\tString sreply = this.getResponseString(reply);\n-\t\t\tScanner scanner = new Scanner(sreply);\n-\t\t\twhile (scanner.hasNextLine()) {\n-\t\t\t\tString[] tokens = scanner.nextLine().split(\",\");\n-\t\t\t\tif (!tokens[0].startsWith(\"+CGDCONT:\")) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tint contextNo = Integer.parseInt(tokens[0].substring(\"+CGDCONT:\".length()).trim());\n-\t\t\t\tModemPdpContextType pdpType = ModemPdpContextType\n-\t\t\t\t\t\t.getContextType(tokens[1].substring(1, tokens[1].length() - 1));\n-\t\t\t\tString apn = tokens[2].substring(1, tokens[2].length() - 1);\n-\t\t\t\tModemPdpContext modemPdpContext = new ModemPdpContext(contextNo, pdpType, apn);\n-\t\t\t\tpdpContextInfo.add(modemPdpContext);\n-\t\t\t}\n-\t\t\tscanner.close();\n-\t\t}\n-\t\treturn pdpContextInfo;\n-\t}\n-\n-\tprotected boolean isSimCardReady(CommConnection comm) throws KuraException, IOException {\n-\t\tboolean simReady = false;\n-\t\tbyte[] reply = comm.sendCommand(\n-\t\t\t\tTelitHe910AtCommands.GET_SIM_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n-\t\tif (reply != null) {\n-\t\t\tString simStatus = getResponseString(reply);\n-\t\t\tString[] simStatusSplit = simStatus.split(\",\");\n-\t\t\tif (simStatusSplit.length > 1 && Integer.valueOf(simStatusSplit[1]) > 0) {\n-\t\t\t\tsimReady = true;\n-\t\t\t}\n-\t\t}\n-\t\treturn simReady;\n-\t}\n-\n-\tprotected boolean simultateInsertSimCard(CommConnection comm) throws KuraException, IOException {\n-\t\tboolean simReady = false;\n-\t\tbyte[] reply = comm.sendCommand(\n-\t\t\t\tTelitHe910AtCommands.SIMULATE_SIM_NOT_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n-\t\t\t\t100);\n-\t\tif (reply != null) {\n-\t\t\tsleep(5000);\n-\t\t\treply = comm.sendCommand(\n-\t\t\t\t\tTelitHe910AtCommands.SIMULATE_SIM_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000,\n-\t\t\t\t\t100);\n-\t\t\tif (reply != null) {\n-\t\t\t\tsleep(1000);\n-\t\t\t\tsimReady = isSimCardReady(comm);\n-\t\t\t}\n-\t\t}\n-\t\treturn simReady;\n-\t}\n-\n-\tprotected boolean execCommand(CommConnection comm, byte[] command, int timeout) throws KuraException, IOException {\n-\t\tboolean ok;\n-\t\tbyte[] reply = comm.sendCommand(command, timeout, 100);\n-\t\tif (reply != null) {\n-\t\t\tok = new String(reply, StandardCharsets.US_ASCII).contains(\"OK\");\n-\t\t} else {\n-\t\t\tthrow new KuraException(KuraErrorCode.TIMED_OUT);\n-\t\t}\n-\t\treturn ok;\n-\t}\n-\n-\tprotected String formSetPdpContextAtCommand() {\n-\t\tString result = null;\n-\t\tList<NetConfig> configs = getConfiguration();\n-\t\tfor (NetConfig config : configs) {\n-\t\t\tif (config instanceof ModemConfig) {\n-\t\t\t\tModemConfig modemConfig = (ModemConfig) config;\n-\t\t\t\t// a little bit silly\n-\t\t\t\tString cid = parseContextIdFromDialString(modemConfig.getDialString());\n-\t\t\t\tString apn = modemConfig.getApn();\n-\t\t\t\tString pdpType = modemConfig.getPdpType().name();\n-\t\t\t\tStringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand()).append(\"=\")\n-\t\t\t\t\t\t.append(cid).append(\",\").append('\"').append(pdpType).append('\"').append(\",\").append('\"')\n-\t\t\t\t\t\t.append(apn).append('\"').append(\"\\r\\n\");\n-\t\t\t\tresult = sb.toString();\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\tprotected String parseContextIdFromDialString(String dialString) {\n-\t\tint start = dialString.lastIndexOf('*');\n-\t\treturn dialString.substring(start + 1, dialString.length() - 1);\n-\t}\n-\n-\tprotected ModemPdpContext getConfigPdpContext() {\n-\t\tModemPdpContext result = null;\n-\t\tList<NetConfig> configs = getConfiguration();\n-\t\tfor (NetConfig config : configs) {\n-\t\t\tif (config instanceof ModemConfig) {\n-\t\t\t\tModemConfig modemConfig = (ModemConfig) config;\n-\t\t\t\t// a little bit silly\n-\t\t\t\tint cid = Integer.parseInt(parseContextIdFromDialString(modemConfig.getDialString()));\n-\t\t\t\tString apn = modemConfig.getApn();\n-\t\t\t\tPdpType pdpType = modemConfig.getPdpType();\n-\n-\t\t\t\tModemPdpContextType modemPdpType;\n-\t\t\t\tswitch (pdpType) {\n-\t\t\t\tcase IP:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.IP;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase IPv6:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.IPV6;\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase PPP:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.PPP;\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tmodemPdpType = ModemPdpContextType.IPV4IPV6;\n-\t\t\t\t}\n-\n-\t\t\t\tresult = new ModemPdpContext(cid, modemPdpType, apn);\n-\t\t\t}\n-\t\t}\n-\t\treturn result;\n-\t}\n-\n-\tprotected String getContextId() {\n-\t\tString cid = null;\n-\t\tList<NetConfig> configs = getConfiguration();\n-\t\tfor (NetConfig config : configs) {\n-\t\t\tif (config instanceof ModemConfig) {\n-\t\t\t\tModemConfig modemConfig = (ModemConfig) config;\n-\t\t\t\t// a little bit silly\n-\t\t\t\tcid = parseContextIdFromDialString(modemConfig.getDialString());\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t}\n-\t\treturn cid;\n-\t}\n-\n-\tprotected String formGetPdpContextAtCommand() {\n-\t\tStringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand());\n-\t\tsb.append(\"?\\r\\n\");\n-\t\treturn sb.toString();\n-\t}\n-\n-\t@Override\n-\tpublic boolean hasDiversityAntenna() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isDiversityEnabled() {\n-\t\treturn false;\n-\t}\n-\n-\t@Override\n-\tpublic void enableDiversity() throws KuraException {\n+                this.manufacturer = getManufacturer();\n+                this.revisionId = getRevisionID();\n+                this.gpsSupported = isGpsSupported();\n+                this.rssi = getSignalStrength();\n+                logger.trace(\"{} :: Serial Number={}\", getClass().getName(), this.serialNumber);\n+                logger.trace(\"{} :: IMSI={}\", getClass().getName(), this.imsi);\n+                logger.trace(\"{} :: ICCID={}\", getClass().getName(), this.iccid);\n+                logger.trace(\"{} :: Model={}\", getClass().getName(), this.model);\n+                logger.trace(\"{} :: Manufacturer={}\", getClass().getName(), this.manufacturer);\n+                logger.trace(\"{} :: Revision ID={}\", getClass().getName(), this.revisionId);\n+                logger.trace(\"{} :: GPS Supported={}\", getClass().getName(), this.gpsSupported);\n+                logger.trace(\"{} :: RSSI={}\", getClass().getName(), this.rssi);\n+            }\n+        } catch (KuraException e) {\n+            logger.error(\"Failed to initialize TelitHe910\", e);\n+        }\n+    }\n+\n+    @Override\n+    public boolean isTelitSimCardReady() throws KuraException {\n+        boolean simReady = false;\n+        synchronized (this.atLock) {\n+            CommConnection commAtConnection = null;\n+            try {\n+                String port = getUnusedAtPort();\n+                logger.debug(\"sendCommand getSimStatus :: {} command to port {}\",\n+                             TelitHe910AtCommands.GET_SIM_STATUS.getCommand(),\n+                             port);\n+                commAtConnection = openSerialPort(port);\n+\n+                if (!isAtReachable(commAtConnection)) {\n+                    throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+                }\n+                simReady = isSimCardReady(commAtConnection);\n+\n+                if (!simReady) {\n+                    simReady = simultateInsertSimCard(commAtConnection);\n+                }\n+            } catch (IOException e) {\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            } finally {\n+                closeSerialPort(commAtConnection);\n+            }\n+        }\n+        return simReady;\n+    }\n+\n+    @Override\n+    public boolean isSimCardReady() throws KuraException {\n+        return isTelitSimCardReady();\n+    }\n+\n+    @Override\n+    public ModemRegistrationStatus getRegistrationStatus() throws KuraException {\n+        ModemRegistrationStatus modemRegistrationStatus = ModemRegistrationStatus.UNKNOWN;\n+        synchronized (this.atLock) {\n+            logger.debug(\"sendCommand getRegistrationStatus :: {}\",\n+                         TelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand());\n+            byte[] reply;\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            if (!isAtReachable(commAtConnection)) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+            }\n+\n+            try {\n+                reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_REGISTRATION_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+            } catch (IOException e) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            }\n+            if (reply != null) {\n+                String sRegStatus = getResponseString(reply);\n+                String[] regStatusSplit = sRegStatus.split(\",\");\n+                if (regStatusSplit.length >= 2) {\n+                    int status = Integer.parseInt(regStatusSplit[1]);\n+                    switch (status) {\n+                    case 0:\n+                        modemRegistrationStatus = ModemRegistrationStatus.NOT_REGISTERED;\n+                        break;\n+                    case 1:\n+                        modemRegistrationStatus = ModemRegistrationStatus.REGISTERED_HOME;\n+                        break;\n+                    case 3:\n+                        modemRegistrationStatus = ModemRegistrationStatus.REGISTRATION_DENIED;\n+                        break;\n+                    case 5:\n+                        modemRegistrationStatus = ModemRegistrationStatus.REGISTERED_ROAMING;\n+                        break;\n+                    default:\n+                        break;\n+                    }\n+                }\n+            }\n+        }\n+        return modemRegistrationStatus;\n+    }\n+\n+    @Override\n+    public long getCallTxCounter() throws KuraException {\n+        long txCnt = 0;\n+        synchronized (this.atLock) {\n+            logger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n+                         TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n+            byte[] reply;\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            if (!isAtReachable(commAtConnection)) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+            }\n+\n+            try {\n+                reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+            } catch (IOException e) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            }\n+            closeSerialPort(commAtConnection);\n+\n+            if (reply != null) {\n+                String[] splitPdp;\n+                String[] splitData;\n+                String sDataVolume = this.getResponseString(reply);\n+                splitPdp = sDataVolume.split(\"#GDATAVOL:\");\n+\n+                if (splitPdp.length > 1) {\n+                    for (String pdp : splitPdp) {\n+                        if (pdp.trim().length() > 0) {\n+                            splitData = pdp.trim().split(\",\");\n+\n+                            if (splitData.length >= 4) {\n+                                int pdpNo = Integer.parseInt(splitData[0]);\n+                                if (pdpNo == Integer.valueOf(getContextId())) {\n+                                    txCnt = Integer.parseInt(splitData[2]);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return txCnt;\n+    }\n+\n+    @Override\n+    public long getCallRxCounter() throws KuraException {\n+        long rxCnt = 0;\n+        synchronized (this.atLock) {\n+            logger.debug(\"sendCommand getGprsSessionDataVolume :: {}\",\n+                         TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand());\n+            byte[] reply;\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            if (!isAtReachable(commAtConnection)) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+            }\n+\n+            try {\n+                reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_GPRS_SESSION_DATA_VOLUME.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+            } catch (IOException e) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            }\n+            closeSerialPort(commAtConnection);\n+\n+            if (reply != null) {\n+                String[] splitPdp;\n+                String[] splitData;\n+                String sDataVolume = this.getResponseString(reply);\n+                splitPdp = sDataVolume.split(\"#GDATAVOL:\");\n+\n+                if (splitPdp.length > 1) {\n+                    for (String pdp : splitPdp) {\n+                        if (pdp.trim().length() > 0) {\n+                            splitData = pdp.trim().split(\",\");\n+\n+                            if (splitData.length >= 4) {\n+                                int pdpNo = Integer.parseInt(splitData[0]);\n+                                if (pdpNo == Integer.valueOf(getContextId())) {\n+                                    rxCnt = Integer.parseInt(splitData[3]);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+        return rxCnt;\n+    }\n+\n+    @Override\n+    public List<ModemPdpContext> getPdpContextInfo() throws KuraException {\n+        synchronized (this.atLock) {\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            try {\n+                return getPdpContextInfo(commAtConnection);\n+            } finally {\n+                closeSerialPort(commAtConnection);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public String getServiceType() throws KuraException {\n+        String serviceType = null;\n+        synchronized (this.atLock) {\n+            logger.debug(\"sendCommand getMobileStationClass :: {}\",\n+                         TelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand());\n+            byte[] reply;\n+            CommConnection commAtConnection = openSerialPort(getAtPort());\n+            if (!isAtReachable(commAtConnection)) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+            }\n+\n+            try {\n+                reply = commAtConnection.sendCommand(TelitHe910AtCommands.GET_MOBILE_STATION_CLASS.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+            } catch (IOException e) {\n+                closeSerialPort(commAtConnection);\n+                throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+            }\n+            closeSerialPort(commAtConnection);\n+\n+            if (reply != null) {\n+                String sCgclass = this.getResponseString(reply);\n+                if (sCgclass.startsWith(\"+CGCLASS:\")) {\n+                    sCgclass = sCgclass.substring(\"+CGCLASS:\".length()).trim();\n+\n+                    if (\"\\\"A\\\"\".equals(sCgclass)) {\n+                        serviceType = \"UMTS\";\n+                    } else if (\"\\\"B\\\"\".equals(sCgclass)) {\n+                        serviceType = \"GSM/GPRS\";\n+                    } else if (\"\\\"CG\\\"\".equals(sCgclass)) {\n+                               serviceType = \"GPRS\";\n+                    } else if (\"\\\"CC\\\"\".equals(sCgclass)) {\n+                               serviceType = \"GSM\";\n+                           }\n+                }\n+            }\n+        }\n+        return serviceType;\n+    }\n+\n+    @Override\n+    public List<ModemTechnologyType> getTechnologyTypes() throws KuraException {\n+        List<ModemTechnologyType> modemTechnologyTypes;\n+        ModemDevice device = getModemDevice();\n+        if (device == null) {\n+            throw new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No modem device\");\n+        }\n+        if (device instanceof UsbModemDevice) {\n+            SupportedUsbModemInfo usbModemInfo = SupportedUsbModemsInfo.getModem((UsbModemDevice) device);\n+            if (usbModemInfo != null) {\n+                modemTechnologyTypes = usbModemInfo.getTechnologyTypes();\n+            } else {\n+                throw new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"No usbModemInfo available\");\n+            }\n+        } else {\n+            throw new KuraException(KuraErrorCode.UNAVAILABLE_DEVICE, \"Unsupported modem device\");\n+        }\n+        return modemTechnologyTypes;\n+    }\n+\n+    protected String getUnusedAtPort() throws KuraException {\n+        String port;\n+        if (isGpsEnabled() && getAtPort().equals(getGpsPort())\n+                && !getAtPort().equals(getDataPort())) {\n+            port = getDataPort();\n+        } else {\n+            port = getAtPort();\n+        }\n+        return port;\n+    }\n+\n+    protected List<ModemPdpContext> getPdpContextInfo(CommConnection comm) throws KuraException {\n+        List<ModemPdpContext> pdpContextInfo = new ArrayList<>();\n+        byte[] reply;\n+        if (!isAtReachable(comm)) {\n+            closeSerialPort(comm);\n+            throw new KuraException(KuraErrorCode.NOT_CONNECTED, MODEM_NOT_AVAILABLE_FOR_AT_CMDS_MSG);\n+        }\n+\n+        try {\n+            reply = comm.sendCommand(formGetPdpContextAtCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+        } catch (IOException e) {\n+            throw new KuraException(KuraErrorCode.CONNECTION_FAILED, e);\n+        }\n+        if (reply != null) {\n+            String sreply = this.getResponseString(reply);\n+            Scanner scanner = new Scanner(sreply);\n+            while (scanner.hasNextLine()) {\n+                String[] tokens = scanner.nextLine().split(\",\");\n+                if (!tokens[0].startsWith(\"+CGDCONT:\")) {\n+                    continue;\n+                }\n+\n+\n+                int contextNo = Integer.parseInt(tokens[0].substring(\"+CGDCONT:\".length()).trim());\n+                ModemPdpContextType pdpType = ModemPdpContextType.getContextType(tokens[1].substring(1, tokens[1].length() - 1));\n+                String apn = tokens[2].substring(1, tokens[2].length() - 1);\n+                ModemPdpContext modemPdpContext = new ModemPdpContext(contextNo, pdpType, apn);\n+                pdpContextInfo.add(modemPdpContext);\n+            }\n+            scanner.close();\n+        }\n+        return pdpContextInfo;\n+    }\n+\n+    protected boolean isSimCardReady(CommConnection comm) throws KuraException, IOException {\n+        boolean simReady = false;\n+        byte[] reply = comm.sendCommand(TelitHe910AtCommands.GET_SIM_STATUS.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+        if (reply != null) {\n+            String simStatus = getResponseString(reply);\n+            String[] simStatusSplit = simStatus.split(\",\");\n+            if (simStatusSplit.length > 1 && Integer.valueOf(simStatusSplit[1]) > 0) {\n+                simReady = true;\n+            }\n+        }\n+        return simReady;\n+    }\n+\n+    protected boolean simultateInsertSimCard(CommConnection comm) throws KuraException, IOException {\n+        boolean simReady = false;\n+        byte[] reply = comm.sendCommand(TelitHe910AtCommands.SIMULATE_SIM_NOT_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+        if (reply != null) {\n+            sleep(5000);\n+            reply = comm.sendCommand(TelitHe910AtCommands.SIMULATE_SIM_INSERTED.getCommand().getBytes(StandardCharsets.US_ASCII), 1000, 100);\n+\n+            if (reply != null) {\n+                sleep(1000);\n+                simReady = isSimCardReady(comm);\n+            }\n+        }\n+        return simReady;\n+    }\n+\n+    protected boolean execCommand(CommConnection comm, byte[] command, int timeout) throws KuraException, IOException {\n+        boolean ok;\n+        byte[] reply = comm.sendCommand(command, timeout, 100);\n+        if (reply != null) {\n+            ok = new String(reply, StandardCharsets.US_ASCII).contains(\"OK\");\n+        } else {\n+            throw new KuraException(KuraErrorCode.TIMED_OUT);\n+        }\n+        return ok;\n+    }\n+\n+    protected String formSetPdpContextAtCommand() {\n+        String result = null;\n+        List<NetConfig> configs = getConfiguration();\n+        for (NetConfig config : configs) {\n+            if (config instanceof ModemConfig) {\n+                ModemConfig modemConfig = (ModemConfig) config;\n+                // a little bit silly\n+                String cid = parseContextIdFromDialString(modemConfig.getDialString());\n+                String apn = modemConfig.getApn();\n+                String pdpType = modemConfig.getPdpType().name();\n+                StringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand()).append(\"=\").append(cid).append(\",\").append('\"').append(pdpType).append('\"').append(\",\").append('\"').append(apn).append('\"').append(\"\\r\\n\");\n+                result = sb.toString();\n+                break;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    protected String parseContextIdFromDialString(String dialString) {\n+        int start = dialString.lastIndexOf('*');\n+        return dialString.substring(start + 1, dialString.length() - 1);\n+    }\n+\n+    protected ModemPdpContext getConfigPdpContext() {\n+        ModemPdpContext result = null;\n+        List<NetConfig> configs = getConfiguration();\n+        for (NetConfig config : configs) {\n+            if (config instanceof ModemConfig) {\n+                ModemConfig modemConfig = (ModemConfig) config;\n+                // a little bit silly\n+                int cid = Integer.parseInt(parseContextIdFromDialString(modemConfig.getDialString()));\n+                String apn = modemConfig.getApn();\n+                PdpType pdpType = modemConfig.getPdpType();\n+                ModemPdpContextType modemPdpType;\n+                switch (pdpType) {\n+                case IP:\n+                    modemPdpType = ModemPdpContextType.IP;\n+                    break;\n+                case IPv6:\n+                    modemPdpType = ModemPdpContextType.IPV6;\n+                    break;\n+                case PPP:\n+                    modemPdpType = ModemPdpContextType.PPP;\n+                    break;\n+                default:\n+                    modemPdpType = ModemPdpContextType.IPV4IPV6;\n+                }\n+                result = new ModemPdpContext(cid, modemPdpType, apn);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    protected String getContextId() {\n+        String cid = null;\n+        List<NetConfig> configs = getConfiguration();\n+        for (NetConfig config : configs) {\n+            if (config instanceof ModemConfig) {\n+                ModemConfig modemConfig = (ModemConfig) config;\n+                // a little bit silly\n+                cid = parseContextIdFromDialString(modemConfig.getDialString());\n+                break;\n+            }\n+        }\n+        return cid;\n+    }\n+\n+    protected String formGetPdpContextAtCommand() {\n+        StringBuilder sb = new StringBuilder(TelitHe910AtCommands.PDP_CONTEXT.getCommand());\n+        sb.append(\"?\\r\\n\");\n+        return sb.toString();\n+    }\n+\n+    @Override\n+    public boolean hasDiversityAntenna() {\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean isDiversityEnabled() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void enableDiversity() throws KuraException {\n         throw new KuraException(KuraErrorCode.OPERATION_NOT_SUPPORTED);\n-\t}\n+    }\n \n-\t@Override\n-\tpublic void disableDiversity() throws KuraException {\n+    @Override\n+    public void disableDiversity() throws KuraException {\n         throw new KuraException(KuraErrorCode.OPERATION_NOT_SUPPORTED);\n-\t}\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 462
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "47",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/26/TelitHe910.java\nindex 24aca2cf21e..e66525b932f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/26/TelitHe910.java\n@@ -42,7 +42,7 @@ import org.slf4j.LoggerFactory;\n  */\n public class TelitHe910 extends TelitModem implements HspaCellularModem {\n \n-\tprivate static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n+    private static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n \n \t/**\n \t * TelitHe910 modem constructor\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "47",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/26/TelitHe910.java\nindex 24aca2cf21e..185de34acee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/26/TelitHe910.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/26/TelitHe910.java\n@@ -42,7 +42,7 @@ import org.slf4j.LoggerFactory;\n  */\n public class TelitHe910 extends TelitModem implements HspaCellularModem {\n \n-\tprivate static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n+private static final Logger logger = LoggerFactory.getLogger(TelitHe910.class);\n \n \t/**\n \t * TelitHe910 modem constructor\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}