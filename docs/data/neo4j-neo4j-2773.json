{
    "project_name": "neo4j-neo4j",
    "error_id": "2773",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2773/SocketAddressParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2773/SocketAddressParser.java\nindex 5d0c0b91eef..a96c59b640a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2773/SocketAddressParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2773/SocketAddressParser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.configuration.helpers;\n \n import java.util.function.BiFunction;\n@@ -28,111 +29,111 @@ import static java.lang.String.format;\n \n public class SocketAddressParser\n {\n-    private static final Pattern hostnamePortPatternExt = Pattern.compile( \"\\\\[(?<hostname>[^\\\\s]+)]:(?<port>\\\\d+)\" );\n-    private static final Pattern hostnamePortPattern = Pattern.compile( \"(?<hostname>[^\\\\s]*([^:\\\\s]|::)):(?<port>\\\\d+)\" );\n-    private static final Pattern hostnamePattern = Pattern.compile( \"(?<hostname>[^\\\\s]+)\" );\n-    private static final Pattern portPattern = Pattern.compile( \":(?<port>\\\\d+)\" );\n+    private static final Pattern hostnamePortPatternExt = Pattern.compile(\"\\\\[(?<hostname>[^\\\\s]+)]:(?<port>\\\\d+)\");\n+    private static final Pattern hostnamePortPattern = Pattern.compile(\"(?<hostname>[^\\\\s]*([^:\\\\s]|::)):(?<port>\\\\d+)\");\n+    private static final Pattern hostnamePattern = Pattern.compile(\"(?<hostname>[^\\\\s]+)\");\n+    private static final Pattern portPattern = Pattern.compile(\":(?<port>\\\\d+)\");\n \n     public static <T extends SocketAddress> T deriveSocketAddress(\n-            String settingName, String settingValue, String defaultHostname, int defaultPort,\n-            BiFunction<String,Integer,T> constructor )\n+      String settingName, String settingValue, String defaultHostname, int defaultPort,\n+      BiFunction<String, Integer, T> constructor)\n     {\n-        if ( settingValue == null )\n+        if (settingValue == null)\n         {\n-            return constructor.apply( defaultHostname, defaultPort );\n+            return constructor.apply(defaultHostname, defaultPort);\n         }\n \n         settingValue = settingValue.trim();\n \n         T socketAddress;\n-        if ( (socketAddress = matchHostnamePort( settingValue, constructor )) != null )\n+        if ((socketAddress = matchHostnamePort(settingValue, constructor)) != null)\n         {\n             return socketAddress;\n         }\n \n-        if ( (socketAddress = matchPort( settingValue, defaultHostname, constructor )) != null )\n+        if ((socketAddress = matchPort(settingValue, defaultHostname, constructor)) != null)\n         {\n             return socketAddress;\n         }\n \n-        throw new IllegalArgumentException( format(\n-                \"Setting \\\"%s\\\" must be in the format \" +\n-                \"\\\"hostname:port\\\" or \\\":port\\\". \\\"%s\\\" does not conform to these formats\",\n-                settingName, settingValue ) );\n+        throw new IllegalArgumentException(format(\n+          \"Setting \\\"%s\\\" must be in the format \" +\n+            \"\\\"hostname:port\\\" or \\\":port\\\". \\\"%s\\\" does not conform to these formats\",\n+          settingName, settingValue));\n     }\n \n-    public static <T extends SocketAddress> T socketAddress( String settingValue,\n-            BiFunction<String,Integer,T> constructor )\n+    public static <T extends SocketAddress> T socketAddress(String settingValue,\n+                                                            BiFunction<String, Integer, T> constructor)\n     {\n-        if ( settingValue == null )\n+        if (settingValue == null)\n         {\n-            throw new IllegalArgumentException( \"Cannot parse socket address from null\" );\n+            throw new IllegalArgumentException(\"Cannot parse socket address from null\");\n         }\n \n         settingValue = settingValue.trim();\n \n         T socketAddress;\n-        if ( (socketAddress = matchHostnamePort( settingValue, constructor )) != null )\n+        if ((socketAddress = matchHostnamePort(settingValue, constructor)) != null)\n         {\n             return socketAddress;\n         }\n \n-        if ( (socketAddress = matchPort( settingValue, null, constructor )) != null )\n+        if ((socketAddress = matchPort(settingValue, null, constructor)) != null)\n         {\n             return socketAddress;\n         }\n \n-        if ( (socketAddress = matchHostname( settingValue, constructor )) != null )\n+        if ((socketAddress = matchHostname(settingValue, constructor)) != null)\n         {\n             return socketAddress;\n         }\n \n-        throw new IllegalArgumentException( format(\n-                \"Configured socket address must be in the format \" +\n-                \"\\\"hostname:port\\\". \\\"%s\\\" does not conform to this format\", settingValue ) );\n+        throw new IllegalArgumentException(format(\n+          \"Configured socket address must be in the format \" +\n+            \"\\\"hostname:port\\\". \\\"%s\\\" does not conform to this format\", settingValue));\n     }\n \n-    private static <T extends SocketAddress> T matchHostname( String settingValue, BiFunction<String,Integer,T> constructor )\n+    private static <T extends SocketAddress> T matchHostname(String settingValue, BiFunction<String, Integer, T> constructor)\n     {\n-        Matcher hostnameMatcher = hostnamePattern.matcher( settingValue );\n-        if ( hostnameMatcher.matches() )\n+        Matcher hostnameMatcher = hostnamePattern.matcher(settingValue);\n+        if (hostnameMatcher.matches())\n         {\n-            String hostname = hostnameMatcher.group( \"hostname\" );\n-            return constructor.apply( hostname, -1 );\n+            String hostname = hostnameMatcher.group(\"hostname\");\n+            return constructor.apply(hostname, -1);\n         }\n         return null;\n     }\n \n-    private static <T extends SocketAddress> T matchHostnamePort( String settingValue,\n-            BiFunction<String,Integer,T> constructor )\n+    private static <T extends SocketAddress> T matchHostnamePort(String settingValue,\n+                                                                 BiFunction<String, Integer, T> constructor)\n     {\n-        Matcher hostnamePortWithBracketsMatcher = hostnamePortPatternExt.matcher( settingValue );\n-        if ( hostnamePortWithBracketsMatcher.matches() )\n+        Matcher hostnamePortWithBracketsMatcher = hostnamePortPatternExt.matcher(settingValue);\n+        if (hostnamePortWithBracketsMatcher.matches())\n         {\n-            String hostname = hostnamePortWithBracketsMatcher.group( \"hostname\" );\n-            int port = parseInt( hostnamePortWithBracketsMatcher.group( \"port\" ) );\n-            return constructor.apply( hostname, port );\n+            String hostname = hostnamePortWithBracketsMatcher.group(\"hostname\");\n+            int port = parseInt(hostnamePortWithBracketsMatcher.group(\"port\"));\n+            return constructor.apply(hostname, port);\n         }\n \n-        Matcher hostnamePortMatcher = hostnamePortPattern.matcher( settingValue );\n-        if ( hostnamePortMatcher.matches() )\n+        Matcher hostnamePortMatcher = hostnamePortPattern.matcher(settingValue);\n+        if (hostnamePortMatcher.matches())\n         {\n-            String hostname = hostnamePortMatcher.group( \"hostname\" );\n-            int port = parseInt( hostnamePortMatcher.group( \"port\" ) );\n-            return constructor.apply( hostname, port );\n+            String hostname = hostnamePortMatcher.group(\"hostname\");\n+            int port = parseInt(hostnamePortMatcher.group(\"port\"));\n+            return constructor.apply(hostname, port);\n         }\n \n         return null;\n     }\n \n-    private static <T extends SocketAddress> T matchPort( String settingValue, String defaultHostname,\n-            BiFunction<String,Integer,T> constructor )\n+    private static <T extends SocketAddress> T matchPort(String settingValue, String defaultHostname,\n+                                                         BiFunction<String, Integer, T> constructor)\n     {\n-        Matcher portMatcher = portPattern.matcher( settingValue );\n-        if ( portMatcher.matches() )\n+        Matcher portMatcher = portPattern.matcher(settingValue);\n+        if (portMatcher.matches())\n         {\n-            int port = parseInt( portMatcher.group( \"port\" ) );\n-            return constructor.apply( defaultHostname, port );\n+            int port = parseInt(portMatcher.group(\"port\"));\n+            return constructor.apply(defaultHostname, port);\n         }\n \n         return null;\n",
            "diff_size": 48
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}