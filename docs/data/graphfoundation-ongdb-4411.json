{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4411",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "6",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "134",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4411/CypherService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4411/CypherService.java\nindex 9878903226b..7a578524063 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4411/CypherService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4411/CypherService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.web;\n \n import java.util.HashMap;\n@@ -45,110 +46,106 @@ import org.neo4j.udc.UsageData;\n import static org.neo4j.udc.UsageDataKeys.Features.http_cypher_endpoint;\n import static org.neo4j.udc.UsageDataKeys.features;\n \n-@Path( \"/cypher\" )\n+@Path(\"/cypher\")\n public class CypherService\n {\n \n-    private static final String PARAMS_KEY = \"params\";\n-    private static final String QUERY_KEY = \"query\";\n-\n-    private static final String INCLUDE_STATS_PARAM = \"includeStats\";\n-    private static final String INCLUDE_PLAN_PARAM = \"includePlan\";\n-    private static final String PROFILE_PARAM = \"profile\";\n-\n-    private final GraphDatabaseService database;\n-    private final CypherExecutor cypherExecutor;\n-    private final UsageData usage;\n-    private final OutputFormat output;\n-    private final InputFormat input;\n-\n-    public CypherService( @Context GraphDatabaseService database, @Context CypherExecutor cypherExecutor,\n-            @Context InputFormat input, @Context OutputFormat output, @Context UsageData usage )\n+  private static final String PARAMS_KEY = \"params\";\n+  private static final String QUERY_KEY = \"query\";\n+\n+  private static final String INCLUDE_STATS_PARAM = \"includeStats\";\n+  private static final String INCLUDE_PLAN_PARAM = \"includePlan\";\n+  private static final String PROFILE_PARAM = \"profile\";\n+\n+  private final GraphDatabaseService database;\n+  private final CypherExecutor cypherExecutor;\n+  private final UsageData usage;\n+  private final OutputFormat output;\n+  private final InputFormat input;\n+\n+  public CypherService(@Context GraphDatabaseService database, @Context CypherExecutor cypherExecutor,\n+                       @Context InputFormat input, @Context OutputFormat output, @Context UsageData usage)\n+  {\n+    this.database = database;\n+    this.cypherExecutor = cypherExecutor;\n+    this.input = input;\n+    this.output = output;\n+    this.usage = usage;\n+  }\n+\n+  public OutputFormat getOutputFormat()\n+  {\n+    return output;\n+  }\n+\n+  @POST\n+  @SuppressWarnings({\"unchecked\", \"ParameterCanBeLocal\"})\n+  public Response cypher(String body,\n+                         @Context HttpServletRequest request,\n+                         @QueryParam(INCLUDE_STATS_PARAM) boolean includeStats,\n+                         @QueryParam(INCLUDE_PLAN_PARAM) boolean includePlan,\n+                         @QueryParam(PROFILE_PARAM) boolean profile) throws BadInputException\n+  {\n+\n+    usage.get(features).flag(http_cypher_endpoint);\n+    Map<String, Object> command = input.readMap(body);\n+\n+    if (!command.containsKey(QUERY_KEY))\n     {\n-        this.database = database;\n-        this.cypherExecutor = cypherExecutor;\n-        this.input = input;\n-        this.output = output;\n-        this.usage = usage;\n+      return output.badRequest(new InvalidArgumentsException(\"You have to provide the 'query' parameter.\"));\n     }\n \n-    public OutputFormat getOutputFormat()\n+    String query = (String) command.get(QUERY_KEY);\n+    Map<String, Object> params;\n+    try\n     {\n-        return output;\n+      params = (Map<String, Object>) (command.containsKey(PARAMS_KEY) && command.get(PARAMS_KEY) != null ?\n+          command.get(PARAMS_KEY) :\n+          new HashMap<String, Object>());\n+    } catch (ClassCastException e)\n+    {\n+      return output.badRequest(new IllegalArgumentException(\"Parameters must be a JSON map\"));\n     }\n \n-    @POST\n-    @SuppressWarnings( {\"unchecked\", \"ParameterCanBeLocal\"} )\n-    public Response cypher( String body,\n-                           @Context HttpServletRequest request,\n-                           @QueryParam( INCLUDE_STATS_PARAM ) boolean includeStats,\n-                           @QueryParam( INCLUDE_PLAN_PARAM ) boolean includePlan,\n-                           @QueryParam( PROFILE_PARAM ) boolean profile ) throws BadInputException\n+    try\n     {\n-\n-        usage.get( features ).flag( http_cypher_endpoint );\n-        Map<String,Object> command = input.readMap( body );\n-\n-        if ( !command.containsKey( QUERY_KEY ) )\n-        {\n-            return output.badRequest( new InvalidArgumentsException( \"You have to provide the 'query' parameter.\" ) );\n-        }\n-\n-        String query = (String) command.get( QUERY_KEY );\n-        Map<String, Object> params;\n-        try\n-        {\n-            params = (Map<String, Object>) (command.containsKey( PARAMS_KEY ) && command.get( PARAMS_KEY ) != null ?\n-                    command.get( PARAMS_KEY ) :\n-                    new HashMap<String, Object>());\n-        }\n-        catch ( ClassCastException e )\n-        {\n-            return output.badRequest( new IllegalArgumentException( \"Parameters must be a JSON map\" ) );\n-        }\n-\n-        try\n-        {\n-            QueryExecutionEngine executionEngine = cypherExecutor.getExecutionEngine();\n-            boolean periodicCommitQuery = executionEngine.isPeriodicCommit( query );\n-            CommitOnSuccessfulStatusCodeRepresentationWriteHandler handler =\n-                    (CommitOnSuccessfulStatusCodeRepresentationWriteHandler) output.getRepresentationWriteHandler();\n-            if ( periodicCommitQuery )\n-            {\n-                handler.closeTransaction();\n-            }\n-\n-            TransactionalContext tc = cypherExecutor.createTransactionContext( query, params, request );\n-\n-            Result result;\n-            if ( profile )\n-            {\n-                result = executionEngine.profileQuery( query, params, tc );\n-                includePlan = true;\n-            }\n-            else\n-            {\n-                result = executionEngine.executeQuery( query, params, tc );\n-                includePlan = result.getQueryExecutionType().requestedExecutionPlanDescription();\n-            }\n-\n-            if ( periodicCommitQuery )\n-            {\n-                handler.setTransaction( database.beginTx() );\n-            }\n-\n-            return output.ok( new CypherResultRepresentation( result, includeStats, includePlan ) );\n-        }\n-        catch ( Throwable e )\n-        {\n-            if ( e.getCause() instanceof CypherException )\n-            {\n-                return output.badRequest( e.getCause() );\n-            }\n-            else\n-            {\n-                return output.badRequest( e );\n-            }\n-        }\n+      QueryExecutionEngine executionEngine = cypherExecutor.getExecutionEngine();\n+      boolean periodicCommitQuery = executionEngine.isPeriodicCommit(query);\n+      CommitOnSuccessfulStatusCodeRepresentationWriteHandler handler =\n+          (CommitOnSuccessfulStatusCodeRepresentationWriteHandler) output.getRepresentationWriteHandler();\n+      if (periodicCommitQuery)\n+      {\n+        handler.closeTransaction();\n+      }\n+\n+      TransactionalContext tc = cypherExecutor.createTransactionContext(query, params, request);\n+\n+      Result result;\n+      if (profile)\n+      {\n+        result = executionEngine.profileQuery(query, params, tc);\n+        includePlan = true;\n+      } else\n+      {\n+        result = executionEngine.executeQuery(query, params, tc);\n+        includePlan = result.getQueryExecutionType().requestedExecutionPlanDescription();\n+      }\n+\n+      if (periodicCommitQuery)\n+      {\n+        handler.setTransaction(database.beginTx());\n+      }\n+\n+      return output.ok(new CypherResultRepresentation(result, includeStats, includePlan));\n+    } catch (Throwable e)\n+    {\n+      if (e.getCause() instanceof CypherException)\n+      {\n+        return output.badRequest(e.getCause());\n+      } else\n+      {\n+        return output.badRequest(e);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 130
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4411/CypherService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4411/CypherService.java\nindex 9878903226b..16012c43fd5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4411/CypherService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4411/CypherService.java\n@@ -48,15 +48,13 @@ import static org.neo4j.udc.UsageDataKeys.features;\n @Path( \"/cypher\" )\n public class CypherService\n {\n-\n     private static final String PARAMS_KEY = \"params\";\n     private static final String QUERY_KEY = \"query\";\n \n     private static final String INCLUDE_STATS_PARAM = \"includeStats\";\n     private static final String INCLUDE_PLAN_PARAM = \"includePlan\";\n     private static final String PROFILE_PARAM = \"profile\";\n-\n-    private final GraphDatabaseService database;\n+private final GraphDatabaseService database;\n     private final CypherExecutor cypherExecutor;\n     private final UsageData usage;\n     private final OutputFormat output;\n@@ -79,29 +77,24 @@ public class CypherService\n \n     @POST\n     @SuppressWarnings( {\"unchecked\", \"ParameterCanBeLocal\"} )\n-    public Response cypher( String body,\n-                           @Context HttpServletRequest request,\n+    public Response cypher( String body, @Context HttpServletRequest request,\n                            @QueryParam( INCLUDE_STATS_PARAM ) boolean includeStats,\n                            @QueryParam( INCLUDE_PLAN_PARAM ) boolean includePlan,\n                            @QueryParam( PROFILE_PARAM ) boolean profile ) throws BadInputException\n-    {\n-\n-        usage.get( features ).flag( http_cypher_endpoint );\n+{\n+    usage.get( features ).flag( http_cypher_endpoint );\n         Map<String,Object> command = input.readMap( body );\n-\n-        if ( !command.containsKey( QUERY_KEY ) )\n+if ( !command.containsKey( QUERY_KEY ) )\n         {\n             return output.badRequest( new InvalidArgumentsException( \"You have to provide the 'query' parameter.\" ) );\n         }\n \n         String query = (String) command.get( QUERY_KEY );\n-        Map<String, Object> params;\n+        Map<String,Object> params;\n         try\n         {\n-            params = (Map<String, Object>) (command.containsKey( PARAMS_KEY ) && command.get( PARAMS_KEY ) != null ?\n-                    command.get( PARAMS_KEY ) :\n-                    new HashMap<String, Object>());\n-        }\n+            params = (Map<String, Object>) (command.containsKey( PARAMS_KEY ) && command.get( PARAMS_KEY ) != null ? command.get( PARAMS_KEY ) : new HashMap<String, Object>() );\n+    }\n         catch ( ClassCastException e )\n         {\n             return output.badRequest( new IllegalArgumentException( \"Parameters must be a JSON map\" ) );\n@@ -111,16 +104,14 @@ public class CypherService\n         {\n             QueryExecutionEngine executionEngine = cypherExecutor.getExecutionEngine();\n             boolean periodicCommitQuery = executionEngine.isPeriodicCommit( query );\n-            CommitOnSuccessfulStatusCodeRepresentationWriteHandler handler =\n-                    (CommitOnSuccessfulStatusCodeRepresentationWriteHandler) output.getRepresentationWriteHandler();\n-            if ( periodicCommitQuery )\n+            CommitOnSuccessfulStatusCodeRepresentationWriteHandler handler = (CommitOnSuccessfulStatusCodeRepresentationWriteHandler) output.getRepresentationWriteHandler();\n+if ( periodicCommitQuery )\n             {\n                 handler.closeTransaction();\n             }\n \n             TransactionalContext tc = cypherExecutor.createTransactionContext( query, params, request );\n-\n-            Result result;\n+Result result;\n             if ( profile )\n             {\n                 result = executionEngine.profileQuery( query, params, tc );\n@@ -151,4 +142,4 @@ public class CypherService\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}