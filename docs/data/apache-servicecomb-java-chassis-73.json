{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "73",
    "information": {
        "errors": [
            {
                "line": "177",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 135).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "          } else {\n            throw new IllegalStateException(\"schemaId [\" + schemaId\n                + \"] exists in service center, but the content does not match the local content that means there are interface change \"\n                + \"and you need to increment microservice version before deploying. \"\n                + \"Or you can configure service_description.environment=\"\n                + ServiceCombConstants.DEVELOPMENT_SERVICECOMB_ENV",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/73/MicroserviceRegisterTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/73/MicroserviceRegisterTask.java\nindex 497c014d1ad..9339a831ed6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/73/MicroserviceRegisterTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/73/MicroserviceRegisterTask.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.servicecomb.serviceregistry.task;\n \n import java.util.HashSet;\n@@ -174,7 +175,8 @@ public class MicroserviceRegisterTask extends AbstractRegisterTask {\n             }\n           } else {\n             throw new IllegalStateException(\"schemaId [\" + schemaId\n-                + \"] exists in service center, but the content does not match the local content that means there are interface change \"\n+                +\n+                \"] exists in service center, but the content does not match the local content that means there are interface change \"\n                 + \"and you need to increment microservice version before deploying. \"\n                 + \"Or you can configure service_description.environment=\"\n                 + ServiceCombConstants.DEVELOPMENT_SERVICECOMB_ENV\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/73/MicroserviceRegisterTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/73/MicroserviceRegisterTask.java\nindex 497c014d1ad..562b3c5ca15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/73/MicroserviceRegisterTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/73/MicroserviceRegisterTask.java\n@@ -199,4 +199,4 @@ public class MicroserviceRegisterTask extends AbstractRegisterTask {\n     }\n     return schema;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 211).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 345).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 234).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 430).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/73/MicroserviceRegisterTask.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/73/MicroserviceRegisterTask.java\nindex 497c014d1ad..0848b7e2545 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/73/MicroserviceRegisterTask.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/73/MicroserviceRegisterTask.java\n@@ -20,7 +20,6 @@ import java.util.HashSet;\n import java.util.List;\n import java.util.Map.Entry;\n import java.util.Set;\n-\n import org.apache.servicecomb.foundation.common.base.ServiceCombConstants;\n import org.apache.servicecomb.serviceregistry.api.registry.Microservice;\n import org.apache.servicecomb.serviceregistry.api.response.GetSchemaResponse;\n@@ -28,7 +27,6 @@ import org.apache.servicecomb.serviceregistry.client.ServiceRegistryClient;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.StringUtils;\n-\n import com.google.common.base.Charsets;\n import com.google.common.eventbus.EventBus;\n import com.google.common.eventbus.Subscribe;\n@@ -69,50 +67,36 @@ public class MicroserviceRegisterTask extends AbstractRegisterTask {\n   @Override\n   protected boolean doRegister() {\n     LOGGER.info(\"running microservice register task.\");\n+\n     String serviceId = srClient.getMicroserviceId(microservice.getAppId(),\n-        microservice.getServiceName(),\n-        microservice.getVersion(),\n-        microservice.getEnvironment());\n+microservice.getServiceName(),\n+microservice.getVersion(),\n+microservice.getEnvironment());\n     if (!StringUtils.isEmpty(serviceId)) {\n       // \u5df2\u7ecf\u6ce8\u518c\u8fc7\u4e86\uff0c\u4e0d\u9700\u8981\u91cd\u65b0\u6ce8\u518c\n       microservice.setServiceId(serviceId);\n-      LOGGER.info(\n-          \"Microservice exists in service center, no need to register. id={} appId={}, name={}, version={}\",\n-          serviceId,\n-          microservice.getAppId(),\n-          microservice.getServiceName(),\n-          microservice.getVersion());\n-\n+      LOGGER.info(\"Microservice exists in service center, no need to register. id={} appId={}, name={}, version={}\", serviceId, microservice.getAppId(), microservice.getServiceName(), microservice.getVersion());\n       if (!checkSchemaIdSet()) {\n         return false;\n       }\n     } else {\n       serviceId = srClient.registerMicroservice(microservice);\n       if (StringUtils.isEmpty(serviceId)) {\n-        LOGGER.error(\n-            \"Registry microservice failed. appId={}, name={}, version={}\",\n-            microservice.getAppId(),\n-            microservice.getServiceName(),\n-            microservice.getVersion());\n+        LOGGER.error(\"Registry microservice failed. appId={}, name={}, version={}\",\n+microservice.getAppId(),\n+microservice.getServiceName(),\n+microservice.getVersion());\n         return false;\n       }\n \n       schemaIdSetMatch = true;\n       // \u91cd\u65b0\u6ce8\u518c\u670d\u52a1\u573a\u666f\u4e0b\uff0cinstanceId\u4e0d\u5e94\u8be5\u7f13\u5b58\n       microservice.getInstance().setInstanceId(null);\n-\n-      LOGGER.info(\n-          \"Registry Microservice successfully. id={} appId={}, name={}, version={}, schemaIds={}\",\n-          serviceId,\n-          microservice.getAppId(),\n-          microservice.getServiceName(),\n-          microservice.getVersion(),\n-          microservice.getSchemas());\n+      LOGGER.info(\"Registry Microservice successfully. id={} appId={}, name={}, version={}, schemaIds={}\", serviceId, microservice.getAppId(), microservice.getServiceName(), microservice.getVersion(), microservice.getSchemas());\n     }\n \n     microservice.setServiceId(serviceId);\n     microservice.getInstance().setServiceId(microservice.getServiceId());\n-\n     return registerSchemas();\n   }\n \n@@ -122,30 +106,16 @@ public class MicroserviceRegisterTask extends AbstractRegisterTask {\n       LOGGER.error(\"Error to get microservice from service center when check schema set\");\n       return false;\n     }\n+\n     Set<String> existSchemas = new HashSet<>(existMicroservice.getSchemas());\n     Set<String> localSchemas = new HashSet<>(microservice.getSchemas());\n     schemaIdSetMatch = existSchemas.equals(localSchemas);\n-\n     if (!schemaIdSetMatch) {\n-      LOGGER.error(\n-          \"SchemaIds is different between local and service center. Please change microservice version. \"\n-              + \"id={} appId={}, name={}, version={}, local schemaIds={}, service center schemaIds={}\",\n-          microservice.getServiceId(),\n-          microservice.getAppId(),\n-          microservice.getServiceName(),\n-          microservice.getVersion(),\n-          localSchemas,\n-          existSchemas);\n+      LOGGER.error(\"SchemaIds is different between local and service center. Please change microservice version. \" + \"id={} appId={}, name={}, version={}, local schemaIds={}, service center schemaIds={}\", microservice.getServiceId(), microservice.getAppId(), microservice.getServiceName(), microservice.getVersion(), localSchemas, existSchemas);\n       return true;\n     }\n \n-    LOGGER.info(\n-        \"SchemaIds is equals to service center. id={} appId={}, name={}, version={}, schemaIds={}\",\n-        microservice.getServiceId(),\n-        microservice.getAppId(),\n-        microservice.getServiceName(),\n-        microservice.getVersion(),\n-        localSchemas);\n+    LOGGER.info(\"SchemaIds is equals to service center. id={} appId={}, name={}, version={}, schemaIds={}\", microservice.getServiceId(), microservice.getAppId(), microservice.getServiceName(), microservice.getVersion(), localSchemas);\n     return true;\n   }\n \n@@ -163,22 +133,18 @@ public class MicroserviceRegisterTask extends AbstractRegisterTask {\n         }\n       } else {\n         String curSchemaSummary = existSchema.getSummary();\n-        String schemaSummary = Hashing.sha256().newHasher().putString(content, Charsets.UTF_8).hash().toString();\n+        String schemaSummary = Hashing.sha256().newHasher()\n+                                               .putString(content, Charsets.UTF_8)\n+                                               .hash()\n+                                               .toString();\n         if (!schemaSummary.equals(curSchemaSummary)) {\n           if (microservice.getEnvironment().equalsIgnoreCase(ServiceCombConstants.DEVELOPMENT_SERVICECOMB_ENV)) {\n-            LOGGER.info(\n-                \"schemaId [{}]'s content changes and the current environment is {}, so re-register it!\",\n-                schemaId, ServiceCombConstants.DEVELOPMENT_SERVICECOMB_ENV);\n+            LOGGER.info(\"schemaId [{}]'s content changes and the current environment is {}, so re-register it!\", schemaId, ServiceCombConstants.DEVELOPMENT_SERVICECOMB_ENV);\n             if (!srClient.registerSchema(microservice.getServiceId(), schemaId, content)) {\n               return false;\n             }\n           } else {\n-            throw new IllegalStateException(\"schemaId [\" + schemaId\n-                + \"] exists in service center, but the content does not match the local content that means there are interface change \"\n-                + \"and you need to increment microservice version before deploying. \"\n-                + \"Or you can configure service_description.environment=\"\n-                + ServiceCombConstants.DEVELOPMENT_SERVICECOMB_ENV\n-                + \" to work in development environment and ignore this error\");\n+            throw new IllegalStateException(\"schemaId [\" + schemaId + \"] exists in service center, but the content does not match the local content that means there are interface change \" + \"and you need to increment microservice version before deploying. \" + \"Or you can configure service_description.environment=\" + ServiceCombConstants.DEVELOPMENT_SERVICECOMB_ENV + \" to work in development environment and ignore this error\");\n           }\n         }\n       }\n@@ -190,6 +156,7 @@ public class MicroserviceRegisterTask extends AbstractRegisterTask {\n     if (schemas == null || schemas.isEmpty()) {\n       return null;\n     }\n+\n     GetSchemaResponse schema = null;\n     for (GetSchemaResponse tempSchema : schemas) {\n       if (tempSchema.getSchemaId().equals(schemaId)) {\n@@ -199,4 +166,4 @@ public class MicroserviceRegisterTask extends AbstractRegisterTask {\n     }\n     return schema;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 60
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}