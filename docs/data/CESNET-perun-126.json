{
    "project_name": "CESNET-perun",
    "error_id": "126",
    "information": {
        "errors": [
            {
                "line": "142",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t\t\t\t// Get service users for user\n\t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" +\n\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n\t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/126/AuthzResolverImpl.java\nindex 50e39a838cc..50d2083d1a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/126/AuthzResolverImpl.java\n@@ -140,7 +140,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t\t\t// Get service users for user\n \t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n \t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+\t\t\t\t\t\t\t\t\"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n \t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n \t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n \t\t\t\t}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/126/AuthzResolverImpl.java\nindex 50e39a838cc..91bdfb7f563 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/126/AuthzResolverImpl.java\n@@ -48,870 +48,874 @@ import java.util.regex.Pattern;\n \n public class AuthzResolverImpl implements AuthzResolverImplApi {\n \n-\tfinal static Logger log = LoggerFactory.getLogger(FacilitiesManagerImpl.class);\n-\n-\tprivate PerunRolesLoader perunRolesLoader;\n-\tprivate static PerunPoliciesContainer perunPoliciesContainer = new PerunPoliciesContainer();\n-\n-\t//http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n-\tprivate static JdbcPerunTemplate jdbc;\n-\n-\tprivate final static Pattern patternForExtractingPerunBean = Pattern.compile(\"^pb_([a-z_]+)_id$\");\n-\n-\tprivate final static String authzRoleMappingSelectQuery = \" authz.user_id as authz_user_id, authz.role_id as authz_role_id,\" +\n-\t\t\"authz.authorized_group_id as authz_authorized_group_id, authz.vo_id as pb_vo_id, authz.group_id as pb_group_id, \" +\n-\t\t\"authz.facility_id as pb_facility_id, authz.member_id as pb_member_id, authz.resource_id as pb_resource_id, \" +\n-\t\t\"authz.service_id as pb_service_id, authz.security_team_id as pb_security_team_id, \" +\n-\t\t\"authz.sponsored_user_id as pb_sponsored_user_id\";\n-\n-\tprivate static final Pattern columnNamesPattern = Pattern.compile(\"^[_0-9a-zA-Z]+$\");\n-\n-\tprivate static final RowMapper<String> AUTHZROLE_MAPPER_FOR_ATTRIBUTES = (rs, i) -> rs.getString(\"name\").toUpperCase();\n-\n-\tprivate static final RowMapper<Pair<String, Map<String, Set<Integer>>>> AUTHZROLE_MAPPER = (rs, i) -> {\n-\t\ttry {\n-\t\t\tMap<String, Set<Integer>> perunBeans = null;\n-\t\t\tString role = rs.getString(\"role_name\").toUpperCase();\n-\n-\t\t\t// Iterate through all returned columns and try to extract PerunBean name from the labels\n-\t\t\tfor (int j = rs.getMetaData().getColumnCount(); j > 0; j--) {\n-\t\t\t\tMatcher matcher = patternForExtractingPerunBean.matcher(rs.getMetaData().getColumnLabel(j).toLowerCase());\n-\t\t\t\tif (matcher.find()) {\n-\t\t\t\t\tString perunBeanName = matcher.group(1);\n-\t\t\t\t\tint id = rs.getInt(j);\n-\t\t\t\t\tif (!rs.wasNull()) {\n-\t\t\t\t\t\t// We have to make first letters o words uppercase\n-\t\t\t\t\t\tString className = convertUnderScoreCaseToCamelCase(perunBeanName);\n-\n-\t\t\t\t\t\tif (perunBeans == null) {\n-\t\t\t\t\t\t\tperunBeans = new HashMap<>();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tperunBeans.computeIfAbsent(className, k -> new HashSet<>());\n-\t\t\t\t\t\tperunBeans.get(className).add(id);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treturn new Pair<>(role, perunBeans);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t};\n-\n-\tprivate static String convertUnderScoreCaseToCamelCase(String name) {\n-\t\tboolean nextIsCapital = true;\n-\t\tStringBuilder nameBuilder = new StringBuilder();\n-\t\tfor (char c : name.toCharArray()) {\n-\t\t\tif (c == '_') {\n-\t\t\t\tnextIsCapital = true;\n-\t\t\t} else {\n-\t\t\t\tif (nextIsCapital) {\n-\t\t\t\t\tc = Character.toUpperCase(c);\n-\t\t\t\t\tnextIsCapital = false;\n-\t\t\t\t}\n-\t\t\t\tnameBuilder.append(c);\n-\t\t\t}\n-\t\t}\n-\t\treturn nameBuilder.toString();\n-\t}\n-\n-\tpublic AuthzResolverImpl(DataSource perunPool) {\n-\t\tjdbc = new JdbcPerunTemplate(perunPool);\n-\t\tjdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t}\n-\n-\t@Override\n-\tpublic AuthzRoles getRoles(User user) {\n-\t\tAuthzRoles authzRoles = new AuthzRoles();\n-\n-\t\tif (user != null) {\n-\t\t\ttry {\n-\t\t\t\t// Get roles from Authz table\n-\t\t\t\tList<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \"\n-\t\t\t\t\t\t+ \"(select groups.id from groups join groups_members on groups.id=groups_members.group_id join members on \"\n-\t\t\t\t\t\t+ \"members.id=groups_members.member_id join users on users.id=members.user_id where users.id=?)\", AUTHZROLE_MAPPER, user.getId(), user.getId());\n-\n-\t\t\t\tfor (Pair<String, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n-\t\t\t\t\tauthzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n-\t\t\t\t}\n-\n-\t\t\t\t// Get service users for user\n-\t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n-\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n-\t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n-\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n-\t\t\t\t}\n-\n-\t\t\t\t// Get members for user\n-\t\t\t\tList<Integer> authzMember = jdbc.query(\"select members.id as id from members where members.user_id=?\",\n-\t\t\t\t\t\tUtils.ID_MAPPER ,user.getId());\n-\t\t\t\tfor (Integer memberId : authzMember) {\n-\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, Member.class, memberId);\n-\t\t\t\t}\n-\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn authzRoles;\n-\t}\n-\n-\t@Override\n-\tpublic AuthzRoles getRoles(Group group) {\n-\t\tAuthzRoles authzRoles = new AuthzRoles();\n-\n-\t\tif (group != null) {\n-\t\t\ttry {\n-\t\t\t\t// Get roles from Authz table\n-\t\t\t\tList<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\",\n-\t\t\t\tAUTHZROLE_MAPPER, group.getId());\n-\n-\t\t\t\tfor (Pair<String, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n-\t\t\t\t\tauthzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n-\t\t\t\t}\n-\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn authzRoles;\n-\t}\n-\n-\t/**\n-\t * Load all authorization components to the database and to the PerunPoliciesContainer\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic void initialize() {\n-\t\tif (BeansUtils.isPerunReadOnly()) log.debug(\"Loading authzresolver manager init in readOnly version.\");\n-\n-\t\tthis.perunRolesLoader.loadPerunRoles(jdbc);\n-\t\tperunPoliciesContainer.setPerunPolicies(this.perunRolesLoader.loadPerunPolicies());\n-\t\tperunPoliciesContainer.setRolesManagementRules(this.perunRolesLoader.loadPerunRolesManagement());\n-\t}\n-\n-\tpublic static Map<String, Set<ActionType>> getRolesWhichCanWorkWithAttribute(ActionType actionType, AttributeDefinition attrDef) {\n-\t\tString actType = actionType.getActionType().toLowerCase() + \"%\";\n-\t\ttry {\n-\t\t\tList<Pair<String, ActionType>> pairs = jdbc.query(\"select distinct roles.name, action_types.action_type from attributes_authz \" +\n-\t\t\t\t\t\t\t\"join roles on attributes_authz.role_id=roles.id \" +\n-\t\t\t\t\t\t\t\"join action_types on attributes_authz.action_type_id=action_types.id \" +\n-\t\t\t\t\t\t\t\"where attributes_authz.attr_id=? and action_types.action_type like ?\",\n-\t\t\t\t\t(rs, arg1) -> new Pair<>(rs.getString(\"name\").toUpperCase(), ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())),\n-\t\t\t\t\tattrDef.getId(), actType);\n-\n-\t\t\tMap<String, Set<ActionType>> result = new HashMap<>();\n-\t\t\tfor (Pair<String, ActionType> pair : pairs) {\n-\t\t\t\tif (result.containsKey(pair.getLeft())) {\n-\t\t\t\t\tresult.get(pair.getLeft()).add(pair.getRight());\n-\t\t\t\t} else {\n-\t\t\t\t\tSet<ActionType> rights = new HashSet<>();\n-\t\t\t\t\trights.add(pair.getRight());\n-\t\t\t\t\tresult.put(pair.getLeft(), rights);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn result;\n-\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new HashMap<>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllUserAuthz(PerunSession sess, User user) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where user_id=?\", user.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where sponsored_user_id=?\", sponsoredUser.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForVo(PerunSession sess, Vo vo) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where vo_id=?\", vo.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForGroup(PerunSession sess, Group group) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where group_id=?\", group.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForFacility(PerunSession sess, Facility facility) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where facility_id=?\", facility.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForResource(PerunSession sess, Resource resource) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where resource_id=?\", resource.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForService(PerunSession sess, Service service) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where service_id=?\", service.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where security_team_id=?\", securityTeam.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Facility facility, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.FACILITYADMIN.toLowerCase(), facility.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the facility \" + facility, e, user, facility);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Facility facility, Group group) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.FACILITYADMIN.toLowerCase(), facility.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the facility \" + facility, e, group, facility);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Facility facility, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and facility_id=? and role_id=(select id from roles where name=?)\", user.getId(), facility.getId(), Role.FACILITYADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the facility \" + facility);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Facility facility, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and facility_id=? and role_id=(select id from roles where name=?)\", group.getId(), facility.getId(), Role.FACILITYADMIN.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the facility \" + facility);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Resource resource, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", user.getId(), Role.RESOURCEADMIN.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the resource \" + resource, e, user, resource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Resource resource, Group group) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", group.getId(), Role.RESOURCEADMIN.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the resource \" + resource, e, group, resource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Resource resource, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), Role.RESOURCEADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Resource resource, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), Role.RESOURCEADMIN.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, User sponsoredUser, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SPONSOR.toLowerCase(), sponsoredUser.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, user, sponsoredUser);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, User sponsoredUser, Group group) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SPONSOR.toLowerCase(), sponsoredUser.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, group, sponsoredUser);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, User sponsoredUser, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", user.getId(), sponsoredUser.getId(), Role.SPONSOR.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, User sponsoredUser, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", group.getId(), sponsoredUser.getId(), Role.SPONSOR.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\t// Add GROUPADMIN role + groupId and voId\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\tuser.getId(), Role.GROUPADMIN.toLowerCase(), group.getId(), group.getVoId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in group \" + group, e, user, group);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\tauthorizedGroup.getId(), Role.GROUPADMIN.toLowerCase(), group.getId(), group.getVoId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already group admin in group \" + group, e, authorizedGroup, group);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tuser.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tauthorizedGroup.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\t\tRole.SECURITYADMIN.toLowerCase(), securityTeam.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in securityTeam \" + securityTeam, e, user, securityTeam);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", group.getId(),\n-\t\t\t\t\tRole.SECURITYADMIN.toLowerCase(), securityTeam.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin in securityTeam \" + securityTeam, e, group, securityTeam);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", user.getId(), securityTeam.getId(), Role.SECURITYADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the security team \" + securityTeam);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", group.getId(), securityTeam.getId(), Role.SECURITYADMIN.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the security team \" + securityTeam);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeUserPerunAdmin(PerunSession sess, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNADMIN.toLowerCase());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already perun admin\", e, user, Role.PERUNADMIN);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeUserPerunObserver(PerunSession sess, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNOBSERVER.toLowerCase());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already perun observer\", e, user, Role.PERUNOBSERVER);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeAuthorizedGroupPerunObserver(PerunSession sess, Group authorizedGroup) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id) values (?, (select id from roles where name=?))\", authorizedGroup.getId(), Role.PERUNOBSERVER.toLowerCase());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already perun observer\", e, authorizedGroup, Role.PERUNOBSERVER);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removePerunObserverFromAuthorizedGroup(PerunSession sess, Group authorizedGroup) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and role_id=(select id from roles where name=?)\", authorizedGroup.getId(), Role.PERUNOBSERVER.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not perun observer.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removePerunAdmin(PerunSession sess, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun admin.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removePerunObserver(PerunSession sess, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNOBSERVER.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun observer.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeUserCabinetAdmin(PerunSession sess, User user) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.CABINETADMIN.toLowerCase());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeCabinetAdmin(PerunSession sess, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.CABINETADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not cabinet admin.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addVoRole(PerunSession sess, String role, Vo vo, User user) throws AlreadyAdminException {\n-\t\tif(!Arrays.asList(Role.SPONSOR,Role.TOPGROUPCREATOR,Role.VOADMIN,Role.VOOBSERVER).contains(role)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on VO\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, vo_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\t\trole.toLowerCase(), vo.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in vo \" + vo, e, user, vo, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addVoRole(PerunSession sess, String role, Vo vo, Group group) throws AlreadyAdminException {\n-\t\tif(!Arrays.asList(Role.SPONSOR,Role.TOPGROUPCREATOR,Role.VOADMIN,Role.VOOBSERVER).contains(role)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on VO\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (role_id, vo_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\trole.toLowerCase(), vo.getId(), group.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \"+role+\" in vo \" + vo, e, group, vo, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeVoRole(PerunSession sess, String role, Vo vo, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and vo_id=? and role_id=(select id from roles where name=?)\", user.getId(), vo.getId(), role.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not \"+role+\" in the vo \" + vo);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeVoRole(PerunSession sess, String role, Vo vo, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and vo_id=? and role_id=(select id from roles where name=?)\", group.getId(), vo.getId(), role.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \"+role+\" in the vo \" + vo);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@SuppressWarnings(\"ConstantConditions\")\n-\t@Override\n-\tpublic boolean isUserInRoleForVo(PerunSession session, User user, String role, Vo vo) {\n-\t\t// COUNT(*) should never return NULL\n-\t\treturn jdbc.queryForObject(\n-\t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tuser.getId(), role.toLowerCase(), vo.getId()) > 0;\n-\t}\n-\n-\t@SuppressWarnings(\"ConstantConditions\")\n-\t@Override\n-\tpublic boolean isGroupInRoleForVo(PerunSession session, Group group, String role, Vo vo) {\n-\t\t// COUNT(*) should never return NULL\n-\t\treturn jdbc.queryForObject(\n-\t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tgroup.getId(), role.toLowerCase(), vo.getId()) > 0;\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getVoIdsForGroupInRole(PerunSession sess, Group group, String role) {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and authorized_group_id=? and vo_id is not NULL\",\n-\t\t\t\t\tnew SingleColumnRowMapper<>(Integer.class), role.toLowerCase(), group.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getVoIdsForUserInRole(PerunSession sess, User user, String role) {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and user_id=? and vo_id is not NULL\",\n-\t\t\t\t\tnew SingleColumnRowMapper<>(Integer.class), role.toLowerCase(), user.getId() );\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addResourceRole(PerunSession sess, User user, String role, Resource resource) throws AlreadyAdminException {\n-\t\tif (!role.equals(Role.RESOURCESELFSERVICE)) {\n-\t\t\tthrow new InternalErrorException(\"Role \" + role + \" cannot be set on resource.\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", user.getId(),\n-\t\t\t\trole.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in resource \" + resource, e, user, resource, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addResourceRole(PerunSession sess, Group group, String role, Resource resource) throws AlreadyAdminException {\n-\t\tif (!role.equals(Role.RESOURCESELFSERVICE)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on resource.\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id, vo_id, facility_id) values ((select id from roles where name=?), ?, ?, ?, ?)\",\n-\t\t\t\trole.toLowerCase(), resource.getId(), group.getId(), resource.getVoId(), resource.getFacilityId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \"+role+\" in resource \" + resource, e, group, resource, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\t@Override\n-\tpublic void removeResourceRole(PerunSession sess, String role, Resource resource, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), role.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not \"+role+\" in the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeResourceRole(PerunSession sess, String role, Resource resource, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), role.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \"+role+\" in the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\tpublic void setPerunRolesLoader(PerunRolesLoader perunRolesLoader) {\n-\t\tthis.perunRolesLoader = perunRolesLoader;\n-\t}\n-\n-\t@Override\n-\tpublic boolean roleExists(String role) {\n-\t\tif (role == null) return false;\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select count(*) from roles where name=?\", role.toLowerCase());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void loadAuthorizationComponents() {\n-\t\tthis.perunRolesLoader.loadPerunRoles(jdbc);\n-\t\tperunPoliciesContainer.setPerunPolicies(this.perunRolesLoader.loadPerunPolicies());\n-\t\tperunPoliciesContainer.setRolesManagementRules(this.perunRolesLoader.loadPerunRolesManagement());\n-\t}\n-\n-\t/**\n-\t * Get PerunPolicy for the policy name from the PerunPoliciesContainer\n-\t *\n-\t * @param policyName for which will be the policy fetched\n-\t * @return PerunPolicy for the role name\n-\t * @throws PolicyNotExistsException of there is no policy for the policy name\n-\t */\n-\tpublic static PerunPolicy getPerunPolicy(String policyName) throws PolicyNotExistsException {\n-\t\treturn perunPoliciesContainer.getPerunPolicy(policyName);\n-\t}\n-\n-\t/**\n-\t * Get the policy according the policy name and all its inlcuded policies (without cycle).\n-\t *\n-\t * @param policyName from which will be the policies fetched\n-\t * @return list of policies\n-\t * @throws PolicyNotExistsException if policy or some included policies does not exists in PerunPoliciesContainer\n-\t */\n-\tpublic static List<PerunPolicy> fetchPolicyWithAllIncludedPolicies(String policyName) throws PolicyNotExistsException {\n-\t\treturn perunPoliciesContainer.fetchPolicyWithAllIncludedPolicies(policyName);\n-\t}\n-\n-\t/**\n-\t * Return all loaded perun policies.\n-\t *\n-\t * @return all loaded policies\n-\t */\n-\tpublic static List<PerunPolicy> getAllPolicies() {\n-\t\treturn new ArrayList<>(perunPoliciesContainer.getAllPolicies());\n-\t}\n-\n-\t/**\n-\t * Get RoleManagementRules for the role name from the PerunPoliciesContainer\n-\t *\n-\t * @param roleName for which will be the rules fetched\n-\t * @return RoleManagementRules for the role name\n-\t * @throws PolicyNotExistsException of there are no rules for the role name\n-\t */\n-\tpublic static RoleManagementRules getRoleManagementRules(String roleName) throws RoleManagementRulesNotExistsException {\n-\t\treturn perunPoliciesContainer.getRoleManagementRules(roleName);\n-\t}\n-\n-\t@Override\n-\tpublic Integer getRoleId(String role) {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"SELECT id FROM roles WHERE name=?\", role.toLowerCase());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleAlreadySetException {\n-\t\tString query = prepareQueryToSetRole(mappingOfValues);\n-\n-\t\ttry {\n-\t\t\tjdbc.update(query);\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new RoleAlreadySetException(role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException {\n-\t\tString query = prepareQueryToUnsetRole(mappingOfValues);\n-\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(query)) {\n-\t\t\t\tthrow new RoleNotSetException(role);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Create query to set role according to the mapping of values\n-\t *\n-\t * @param mappingOfValues from which will be the query created\n-\t * @return sql query\n-\t */\n-\tprivate String prepareQueryToSetRole(Map<String, Integer> mappingOfValues) {\n-\t\tString columnsFromMapping;\n-\t\tString valuesFromMapping;\n-\t\tList<String> columnNames = new ArrayList<>();\n-\t\tList<String> columnValues = new ArrayList<>();\n-\n-\t\tfor (String columnName: mappingOfValues.keySet()) {\n-\n-\t\t\tif (columnName == null || mappingOfValues.get(columnName) == null) {\n-\t\t\t\tthrow new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to unset a role.\");\n-\t\t\t}\n-\n-\t\t\tMatcher matcher = columnNamesPattern.matcher(columnName);\n-\t\t\tif (!matcher.matches()) {\n-\t\t\t\tthrow new InternalErrorException(\"Cannot create a query to set a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n-\t\t\t}\n-\t\t\tcolumnNames.add(columnName);\n-\t\t\tcolumnValues.add(mappingOfValues.get(columnName).toString());\n-\t\t}\n-\n-\t\tcolumnsFromMapping = StringUtils.join(columnNames, \",\");\n-\t\tvaluesFromMapping = StringUtils.join(columnValues, \",\");\n-\n-\t\treturn \"insert into authz (\" + columnsFromMapping + \") values (\" + valuesFromMapping + \")\";\n-\t}\n-\n-\t/**\n-\t * Create query to unset role according to the mapping of values\n-\t *\n-\t * @param mappingOfValues from which will be the query created\n-\t * @return sql query\n-\t */\n-\tprivate String prepareQueryToUnsetRole(Map<String, Integer> mappingOfValues) {\n-\t\tString mappingAsString;\n-\t\tList<String> listofConditions = new ArrayList<>();\n-\n-\t\tfor (String columnName: mappingOfValues.keySet()) {\n-\n-\t\t\tif (columnName == null || mappingOfValues.get(columnName) == null) {\n-\t\t\t\tthrow new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to set a role.\");\n-\t\t\t}\n-\n-\t\t\tMatcher matcher = columnNamesPattern.matcher(columnName);\n-\t\t\tif (!matcher.matches()) {\n-\t\t\t\tthrow new InternalErrorException(\"Cannot create a query to unset a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n-\t\t\t}\n-\t\t\tString condition = columnName + \"=\" + mappingOfValues.get(columnName).toString();\n-\t\t\tlistofConditions.add(condition);\n-\t\t}\n-\n-\t\tmappingAsString = StringUtils.join(listofConditions, \" and \");\n-\n-\t\treturn \"delete from authz where \" + mappingAsString;\n-\t}\n+    final static Logger log = LoggerFactory.getLogger(FacilitiesManagerImpl.class);\n+\n+    private PerunRolesLoader perunRolesLoader;\n+    private static PerunPoliciesContainer perunPoliciesContainer = new PerunPoliciesContainer();\n+\n+    //http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n+    private static JdbcPerunTemplate jdbc;\n+\n+    private final static Pattern patternForExtractingPerunBean = Pattern.compile(\"^pb_([a-z_]+)_id$\");\n+\n+    private final static String authzRoleMappingSelectQuery = \" authz.user_id as authz_user_id, authz.role_id as authz_role_id,\" +\n+            \"authz.authorized_group_id as authz_authorized_group_id, authz.vo_id as pb_vo_id, authz.group_id as pb_group_id, \" +\n+            \"authz.facility_id as pb_facility_id, authz.member_id as pb_member_id, authz.resource_id as pb_resource_id, \" +\n+            \"authz.service_id as pb_service_id, authz.security_team_id as pb_security_team_id, \" +\n+            \"authz.sponsored_user_id as pb_sponsored_user_id\";\n+\n+    private static final Pattern columnNamesPattern = Pattern.compile(\"^[_0-9a-zA-Z]+$\");\n+\n+    private static final RowMapper<String> AUTHZROLE_MAPPER_FOR_ATTRIBUTES = (rs, i) -> rs.getString(\"name\").toUpperCase();\n+\n+    private static final RowMapper<Pair<String, Map<String, Set<Integer>>>> AUTHZROLE_MAPPER = (rs, i) -> {\n+        try {\n+            Map<String, Set<Integer>> perunBeans = null;\n+            String role = rs.getString(\"role_name\").toUpperCase();\n+\n+            // Iterate through all returned columns and try to extract PerunBean name from the labels\n+            for (int j = rs.getMetaData().getColumnCount(); j > 0; j--) {\n+                Matcher matcher = patternForExtractingPerunBean.matcher(rs.getMetaData().getColumnLabel(j).toLowerCase());\n+                if (matcher.find()) {\n+                    String perunBeanName = matcher.group(1);\n+                    int id = rs.getInt(j);\n+                    if (!rs.wasNull()) {\n+                        // We have to make first letters o words uppercase\n+                        String className = convertUnderScoreCaseToCamelCase(perunBeanName);\n+\n+                        if (perunBeans == null) {\n+                            perunBeans = new HashMap<>();\n+                        }\n+                        perunBeans.computeIfAbsent(className, k -> new HashSet<>());\n+                        perunBeans.get(className).add(id);\n+                    }\n+                }\n+            }\n+\n+            return new Pair<>(role, perunBeans);\n+\n+        } catch (Exception e) {\n+            throw new InternalErrorException(e);\n+        }\n+    };\n+\n+    private static String convertUnderScoreCaseToCamelCase(String name) {\n+        boolean nextIsCapital = true;\n+        StringBuilder nameBuilder = new StringBuilder();\n+        for (char c : name.toCharArray()) {\n+            if (c == '_') {\n+                nextIsCapital = true;\n+            } else {\n+                if (nextIsCapital) {\n+                    c = Character.toUpperCase(c);\n+                    nextIsCapital = false;\n+                }\n+                nameBuilder.append(c);\n+            }\n+        }\n+        return nameBuilder.toString();\n+    }\n+\n+    public AuthzResolverImpl(DataSource perunPool) {\n+        jdbc = new JdbcPerunTemplate(perunPool);\n+        jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+    }\n+\n+    @Override\n+    public AuthzRoles getRoles(User user) {\n+        AuthzRoles authzRoles = new AuthzRoles();\n+\n+        if (user != null) {\n+            try {\n+                // Get roles from Authz table\n+                List<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n+                        + \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \"\n+                        + \"(select groups.id from groups join groups_members on groups.id=groups_members.group_id join members on \"\n+                        + \"members.id=groups_members.member_id join users on users.id=members.user_id where users.id=?)\", AUTHZROLE_MAPPER, user.getId(), user.getId());\n+\n+                for (Pair<String, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n+                    authzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n+                }\n+\n+                // Get service users for user\n+                List<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n+                        \"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" +\n+                        \"and specific_user_users.type=?\", Utils.ID_MAPPER, user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+                for (Integer serviceUserId : authzServiceUsers) {\n+                    authzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n+                }\n+\n+                // Get members for user\n+                List<Integer> authzMember = jdbc.query(\"select members.id as id from members where members.user_id=?\",\n+                        Utils.ID_MAPPER, user.getId());\n+                for (Integer memberId : authzMember) {\n+                    authzRoles.putAuthzRole(Role.SELF, Member.class, memberId);\n+                }\n+\n+            } catch (RuntimeException e) {\n+                throw new InternalErrorException(e);\n+            }\n+        }\n+\n+        return authzRoles;\n+    }\n+\n+    @Override\n+    public AuthzRoles getRoles(Group group) {\n+        AuthzRoles authzRoles = new AuthzRoles();\n+\n+        if (group != null) {\n+            try {\n+                // Get roles from Authz table\n+                List<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n+                                + \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\",\n+                        AUTHZROLE_MAPPER, group.getId());\n+\n+                for (Pair<String, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n+                    authzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n+                }\n+\n+            } catch (RuntimeException e) {\n+                throw new InternalErrorException(e);\n+            }\n+        }\n+\n+        return authzRoles;\n+    }\n+\n+    /**\n+     * Load all authorization components to the database and to the PerunPoliciesContainer\n+     *\n+     * @throws InternalErrorException\n+     */\n+    public void initialize() {\n+        if (BeansUtils.isPerunReadOnly()) {\n+            log.debug(\"Loading authzresolver manager init in readOnly version.\");\n+        }\n+\n+        this.perunRolesLoader.loadPerunRoles(jdbc);\n+        perunPoliciesContainer.setPerunPolicies(this.perunRolesLoader.loadPerunPolicies());\n+        perunPoliciesContainer.setRolesManagementRules(this.perunRolesLoader.loadPerunRolesManagement());\n+    }\n+\n+    public static Map<String, Set<ActionType>> getRolesWhichCanWorkWithAttribute(ActionType actionType, AttributeDefinition attrDef) {\n+        String actType = actionType.getActionType().toLowerCase() + \"%\";\n+        try {\n+            List<Pair<String, ActionType>> pairs = jdbc.query(\"select distinct roles.name, action_types.action_type from attributes_authz \" +\n+                            \"join roles on attributes_authz.role_id=roles.id \" +\n+                            \"join action_types on attributes_authz.action_type_id=action_types.id \" +\n+                            \"where attributes_authz.attr_id=? and action_types.action_type like ?\",\n+                    (rs, arg1) -> new Pair<>(rs.getString(\"name\").toUpperCase(), ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())),\n+                    attrDef.getId(), actType);\n+\n+            Map<String, Set<ActionType>> result = new HashMap<>();\n+            for (Pair<String, ActionType> pair : pairs) {\n+                if (result.containsKey(pair.getLeft())) {\n+                    result.get(pair.getLeft()).add(pair.getRight());\n+                } else {\n+                    Set<ActionType> rights = new HashSet<>();\n+                    rights.add(pair.getRight());\n+                    result.put(pair.getLeft(), rights);\n+                }\n+            }\n+            return result;\n+\n+        } catch (EmptyResultDataAccessException e) {\n+            return new HashMap<>();\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllUserAuthz(PerunSession sess, User user) {\n+        try {\n+            jdbc.update(\"delete from authz where user_id=?\", user.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) {\n+        try {\n+            jdbc.update(\"delete from authz where sponsored_user_id=?\", sponsoredUser.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForVo(PerunSession sess, Vo vo) {\n+        try {\n+            jdbc.update(\"delete from authz where vo_id=?\", vo.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForGroup(PerunSession sess, Group group) {\n+        try {\n+            jdbc.update(\"delete from authz where group_id=?\", group.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForFacility(PerunSession sess, Facility facility) {\n+        try {\n+            jdbc.update(\"delete from authz where facility_id=?\", facility.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForResource(PerunSession sess, Resource resource) {\n+        try {\n+            jdbc.update(\"delete from authz where resource_id=?\", resource.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForService(PerunSession sess, Service service) {\n+        try {\n+            jdbc.update(\"delete from authz where service_id=?\", service.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) {\n+        try {\n+            jdbc.update(\"delete from authz where security_team_id=?\", securityTeam.getId());\n+        } catch (RuntimeException err) {\n+            throw new InternalErrorException(err);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Facility facility, User user) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.FACILITYADMIN.toLowerCase(), facility.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the facility \" + facility, e, user, facility);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Facility facility, Group group) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.FACILITYADMIN.toLowerCase(), facility.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the facility \" + facility, e, group, facility);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Facility facility, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and facility_id=? and role_id=(select id from roles where name=?)\", user.getId(), facility.getId(), Role.FACILITYADMIN.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the facility \" + facility);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Facility facility, Group group) throws GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and facility_id=? and role_id=(select id from roles where name=?)\", group.getId(), facility.getId(), Role.FACILITYADMIN.toLowerCase())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the facility \" + facility);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Resource resource, User user) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", user.getId(), Role.RESOURCEADMIN.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the resource \" + resource, e, user, resource);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Resource resource, Group group) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", group.getId(), Role.RESOURCEADMIN.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the resource \" + resource, e, group, resource);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Resource resource, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), Role.RESOURCEADMIN.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the resource \" + resource);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Resource resource, Group group) throws GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), Role.RESOURCEADMIN.toLowerCase())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the resource \" + resource);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, User sponsoredUser, User user) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SPONSOR.toLowerCase(), sponsoredUser.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, user, sponsoredUser);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, User sponsoredUser, Group group) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SPONSOR.toLowerCase(), sponsoredUser.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, group, sponsoredUser);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, User sponsoredUser, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", user.getId(), sponsoredUser.getId(), Role.SPONSOR.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, User sponsoredUser, Group group) throws GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", group.getId(), sponsoredUser.getId(), Role.SPONSOR.toLowerCase())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Group group, User user) throws AlreadyAdminException {\n+        try {\n+            // Add GROUPADMIN role + groupId and voId\n+            jdbc.update(\"insert into authz (user_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n+                    user.getId(), Role.GROUPADMIN.toLowerCase(), group.getId(), group.getVoId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in group \" + group, e, user, group);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n+                    authorizedGroup.getId(), Role.GROUPADMIN.toLowerCase(), group.getId(), group.getVoId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already group admin in group \" + group, e, authorizedGroup, group);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Group group, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n+                    user.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n+                    authorizedGroup.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n+                throw new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n+                    Role.SECURITYADMIN.toLowerCase(), securityTeam.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in securityTeam \" + securityTeam, e, user, securityTeam);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", group.getId(),\n+                    Role.SECURITYADMIN.toLowerCase(), securityTeam.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin in securityTeam \" + securityTeam, e, group, securityTeam);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", user.getId(), securityTeam.getId(), Role.SECURITYADMIN.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the security team \" + securityTeam);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", group.getId(), securityTeam.getId(), Role.SECURITYADMIN.toLowerCase())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the security team \" + securityTeam);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void makeUserPerunAdmin(PerunSession sess, User user) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNADMIN.toLowerCase());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already perun admin\", e, user, Role.PERUNADMIN);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void makeUserPerunObserver(PerunSession sess, User user) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNOBSERVER.toLowerCase());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already perun observer\", e, user, Role.PERUNOBSERVER);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void makeAuthorizedGroupPerunObserver(PerunSession sess, Group authorizedGroup) throws AlreadyAdminException {\n+        try {\n+            jdbc.update(\"insert into authz (authorized_group_id, role_id) values (?, (select id from roles where name=?))\", authorizedGroup.getId(), Role.PERUNOBSERVER.toLowerCase());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already perun observer\", e, authorizedGroup, Role.PERUNOBSERVER);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removePerunObserverFromAuthorizedGroup(PerunSession sess, Group authorizedGroup) throws GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and role_id=(select id from roles where name=?)\", authorizedGroup.getId(), Role.PERUNOBSERVER.toLowerCase())) {\n+                throw new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not perun observer.\");\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removePerunAdmin(PerunSession sess, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun admin.\");\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removePerunObserver(PerunSession sess, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNOBSERVER.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun observer.\");\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void makeUserCabinetAdmin(PerunSession sess, User user) {\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.CABINETADMIN.toLowerCase());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeCabinetAdmin(PerunSession sess, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.CABINETADMIN.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not cabinet admin.\");\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addVoRole(PerunSession sess, String role, Vo vo, User user) throws AlreadyAdminException {\n+        if (!Arrays.asList(Role.SPONSOR, Role.TOPGROUPCREATOR, Role.VOADMIN, Role.VOOBSERVER).contains(role)) {\n+            throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on VO\");\n+        }\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, vo_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n+                    role.toLowerCase(), vo.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \" + role + \" in vo \" + vo, e, user, vo, role);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addVoRole(PerunSession sess, String role, Vo vo, Group group) throws AlreadyAdminException {\n+        if (!Arrays.asList(Role.SPONSOR, Role.TOPGROUPCREATOR, Role.VOADMIN, Role.VOOBSERVER).contains(role)) {\n+            throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on VO\");\n+        }\n+        try {\n+            jdbc.update(\"insert into authz (role_id, vo_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\",\n+                    role.toLowerCase(), vo.getId(), group.getId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \" + role + \" in vo \" + vo, e, group, vo, role);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeVoRole(PerunSession sess, String role, Vo vo, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and vo_id=? and role_id=(select id from roles where name=?)\", user.getId(), vo.getId(), role.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not \" + role + \" in the vo \" + vo);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeVoRole(PerunSession sess, String role, Vo vo, Group group) throws GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and vo_id=? and role_id=(select id from roles where name=?)\", group.getId(), vo.getId(), role.toLowerCase())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \" + role + \" in the vo \" + vo);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Override\n+    public boolean isUserInRoleForVo(PerunSession session, User user, String role, Vo vo) {\n+        // COUNT(*) should never return NULL\n+        return jdbc.queryForObject(\n+                \"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n+                        \"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class,\n+                user.getId(), role.toLowerCase(), vo.getId()) > 0;\n+    }\n+\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Override\n+    public boolean isGroupInRoleForVo(PerunSession session, Group group, String role, Vo vo) {\n+        // COUNT(*) should never return NULL\n+        return jdbc.queryForObject(\n+                \"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n+                        \"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class,\n+                group.getId(), role.toLowerCase(), vo.getId()) > 0;\n+    }\n+\n+    @Override\n+    public List<Integer> getVoIdsForGroupInRole(PerunSession sess, Group group, String role) {\n+        try {\n+            return jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and authorized_group_id=? and vo_id is not NULL\",\n+                    new SingleColumnRowMapper<>(Integer.class), role.toLowerCase(), group.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public List<Integer> getVoIdsForUserInRole(PerunSession sess, User user, String role) {\n+        try {\n+            return jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and user_id=? and vo_id is not NULL\",\n+                    new SingleColumnRowMapper<>(Integer.class), role.toLowerCase(), user.getId());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addResourceRole(PerunSession sess, User user, String role, Resource resource) throws AlreadyAdminException {\n+        if (!role.equals(Role.RESOURCESELFSERVICE)) {\n+            throw new InternalErrorException(\"Role \" + role + \" cannot be set on resource.\");\n+        }\n+        try {\n+            jdbc.update(\"insert into authz (user_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", user.getId(),\n+                    role.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \" + role + \" in resource \" + resource, e, user, resource, role);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void addResourceRole(PerunSession sess, Group group, String role, Resource resource) throws AlreadyAdminException {\n+        if (!role.equals(Role.RESOURCESELFSERVICE)) {\n+            throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on resource.\");\n+        }\n+        try {\n+            jdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id, vo_id, facility_id) values ((select id from roles where name=?), ?, ?, ?, ?)\",\n+                    role.toLowerCase(), resource.getId(), group.getId(), resource.getVoId(), resource.getFacilityId());\n+        } catch (DataIntegrityViolationException e) {\n+            throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \" + role + \" in resource \" + resource, e, group, resource, role);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void removeResourceRole(PerunSession sess, String role, Resource resource, User user) throws UserNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), role.toLowerCase())) {\n+                throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not \" + role + \" in the resource \" + resource);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void removeResourceRole(PerunSession sess, String role, Resource resource, Group group) throws GroupNotAdminException {\n+        try {\n+            if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), role.toLowerCase())) {\n+                throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \" + role + \" in the resource \" + resource);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+\n+    public void setPerunRolesLoader(PerunRolesLoader perunRolesLoader) {\n+        this.perunRolesLoader = perunRolesLoader;\n+    }\n+\n+    @Override\n+    public boolean roleExists(String role) {\n+        if (role == null) {\n+            return false;\n+        }\n+        try {\n+            return 1 == jdbc.queryForInt(\"select count(*) from roles where name=?\", role.toLowerCase());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void loadAuthorizationComponents() {\n+        this.perunRolesLoader.loadPerunRoles(jdbc);\n+        perunPoliciesContainer.setPerunPolicies(this.perunRolesLoader.loadPerunPolicies());\n+        perunPoliciesContainer.setRolesManagementRules(this.perunRolesLoader.loadPerunRolesManagement());\n+    }\n+\n+    /**\n+     * Get PerunPolicy for the policy name from the PerunPoliciesContainer\n+     *\n+     * @param policyName for which will be the policy fetched\n+     * @return PerunPolicy for the role name\n+     * @throws PolicyNotExistsException of there is no policy for the policy name\n+     */\n+    public static PerunPolicy getPerunPolicy(String policyName) throws PolicyNotExistsException {\n+        return perunPoliciesContainer.getPerunPolicy(policyName);\n+    }\n+\n+    /**\n+     * Get the policy according the policy name and all its inlcuded policies (without cycle).\n+     *\n+     * @param policyName from which will be the policies fetched\n+     * @return list of policies\n+     * @throws PolicyNotExistsException if policy or some included policies does not exists in PerunPoliciesContainer\n+     */\n+    public static List<PerunPolicy> fetchPolicyWithAllIncludedPolicies(String policyName) throws PolicyNotExistsException {\n+        return perunPoliciesContainer.fetchPolicyWithAllIncludedPolicies(policyName);\n+    }\n+\n+    /**\n+     * Return all loaded perun policies.\n+     *\n+     * @return all loaded policies\n+     */\n+    public static List<PerunPolicy> getAllPolicies() {\n+        return new ArrayList<>(perunPoliciesContainer.getAllPolicies());\n+    }\n+\n+    /**\n+     * Get RoleManagementRules for the role name from the PerunPoliciesContainer\n+     *\n+     * @param roleName for which will be the rules fetched\n+     * @return RoleManagementRules for the role name\n+     * @throws PolicyNotExistsException of there are no rules for the role name\n+     */\n+    public static RoleManagementRules getRoleManagementRules(String roleName) throws RoleManagementRulesNotExistsException {\n+        return perunPoliciesContainer.getRoleManagementRules(roleName);\n+    }\n+\n+    @Override\n+    public Integer getRoleId(String role) {\n+        try {\n+            return jdbc.queryForInt(\"SELECT id FROM roles WHERE name=?\", role.toLowerCase());\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void setRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleAlreadySetException {\n+        String query = prepareQueryToSetRole(mappingOfValues);\n+\n+        try {\n+            jdbc.update(query);\n+        } catch (DataIntegrityViolationException e) {\n+            throw new RoleAlreadySetException(role);\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    @Override\n+    public void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException {\n+        String query = prepareQueryToUnsetRole(mappingOfValues);\n+\n+        try {\n+            if (0 == jdbc.update(query)) {\n+                throw new RoleNotSetException(role);\n+            }\n+        } catch (RuntimeException e) {\n+            throw new InternalErrorException(e);\n+        }\n+    }\n+\n+    /**\n+     * Create query to set role according to the mapping of values\n+     *\n+     * @param mappingOfValues from which will be the query created\n+     * @return sql query\n+     */\n+    private String prepareQueryToSetRole(Map<String, Integer> mappingOfValues) {\n+        String columnsFromMapping;\n+        String valuesFromMapping;\n+        List<String> columnNames = new ArrayList<>();\n+        List<String> columnValues = new ArrayList<>();\n+\n+        for (String columnName : mappingOfValues.keySet()) {\n+\n+            if (columnName == null || mappingOfValues.get(columnName) == null) {\n+                throw new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to unset a role.\");\n+            }\n+\n+            Matcher matcher = columnNamesPattern.matcher(columnName);\n+            if (!matcher.matches()) {\n+                throw new InternalErrorException(\"Cannot create a query to set a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n+            }\n+            columnNames.add(columnName);\n+            columnValues.add(mappingOfValues.get(columnName).toString());\n+        }\n+\n+        columnsFromMapping = StringUtils.join(columnNames, \",\");\n+        valuesFromMapping = StringUtils.join(columnValues, \",\");\n+\n+        return \"insert into authz (\" + columnsFromMapping + \") values (\" + valuesFromMapping + \")\";\n+    }\n+\n+    /**\n+     * Create query to unset role according to the mapping of values\n+     *\n+     * @param mappingOfValues from which will be the query created\n+     * @return sql query\n+     */\n+    private String prepareQueryToUnsetRole(Map<String, Integer> mappingOfValues) {\n+        String mappingAsString;\n+        List<String> listofConditions = new ArrayList<>();\n+\n+        for (String columnName : mappingOfValues.keySet()) {\n+\n+            if (columnName == null || mappingOfValues.get(columnName) == null) {\n+                throw new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to set a role.\");\n+            }\n+\n+            Matcher matcher = columnNamesPattern.matcher(columnName);\n+            if (!matcher.matches()) {\n+                throw new InternalErrorException(\"Cannot create a query to unset a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n+            }\n+            String condition = columnName + \"=\" + mappingOfValues.get(columnName).toString();\n+            listofConditions.add(condition);\n+        }\n+\n+        mappingAsString = StringUtils.join(listofConditions, \" and \");\n+\n+        return \"delete from authz where \" + mappingAsString;\n+    }\n }\n",
            "diff_size": 870
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/naturalize/126/AuthzResolverImpl.java\nindex 50e39a838cc..0a1a71d4f5b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/naturalize/126/AuthzResolverImpl.java\n@@ -129,7 +129,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t\ttry {\n \t\t\t\t// Get roles from Authz table\n \t\t\t\tList<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \"\n++ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \"\n \t\t\t\t\t\t+ \"(select groups.id from groups join groups_members on groups.id=groups_members.group_id join members on \"\n \t\t\t\t\t\t+ \"members.id=groups_members.member_id join users on users.id=members.user_id where users.id=?)\", AUTHZROLE_MAPPER, user.getId(), user.getId());\n \n@@ -139,16 +139,15 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \n \t\t\t\t// Get service users for user\n \t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n-\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n-\t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n+\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" + \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+for (Integer serviceUserId : authzServiceUsers) {\n \t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n \t\t\t\t}\n \n \t\t\t\t// Get members for user\n \t\t\t\tList<Integer> authzMember = jdbc.query(\"select members.id as id from members where members.user_id=?\",\n \t\t\t\t\t\tUtils.ID_MAPPER ,user.getId());\n-\t\t\t\tfor (Integer memberId : authzMember) {\n+for (Integer memberId : authzMember) {\n \t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, Member.class, memberId);\n \t\t\t\t}\n \n@@ -168,8 +167,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t\ttry {\n \t\t\t\t// Get roles from Authz table\n \t\t\t\tList<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\",\n-\t\t\t\tAUTHZROLE_MAPPER, group.getId());\n+\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\", AUTHZROLE_MAPPER, group.getId());\n \n \t\t\t\tfor (Pair<String, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n \t\t\t\t\tauthzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n@@ -203,7 +201,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t\t\t\t\t\t\"join roles on attributes_authz.role_id=roles.id \" +\n \t\t\t\t\t\t\t\"join action_types on attributes_authz.action_type_id=action_types.id \" +\n \t\t\t\t\t\t\t\"where attributes_authz.attr_id=? and action_types.action_type like ?\",\n-\t\t\t\t\t(rs, arg1) -> new Pair<>(rs.getString(\"name\").toUpperCase(), ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())),\n+(rs, arg1) -> new Pair<>(rs.getString(\"name\").toUpperCase(), ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())),\n \t\t\t\t\tattrDef.getId(), actType);\n \n \t\t\tMap<String, Set<ActionType>> result = new HashMap<>();\n@@ -457,9 +455,8 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t@Override\n \tpublic void removeAdmin(PerunSession sess, Group group, User user) throws UserNotAdminException {\n \t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tuser.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n+\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\", user.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n+\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n \t\t\t}\n \t\t} catch (RuntimeException e) {\n \t\t\tthrow new InternalErrorException(e);\n@@ -469,9 +466,8 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t@Override\n \tpublic void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws GroupNotAdminException {\n \t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tauthorizedGroup.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n+\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\", authorizedGroup.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n+\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n \t\t\t}\n \t\t} catch (RuntimeException e) {\n \t\t\tthrow new InternalErrorException(e);\n@@ -668,8 +664,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t// COUNT(*) should never return NULL\n \t\treturn jdbc.queryForObject(\n \t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tuser.getId(), role.toLowerCase(), vo.getId()) > 0;\n+\t\t\t\t\t\t\"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class, user.getId(), role.toLowerCase(), vo.getId()) > 0;\n \t}\n \n \t@SuppressWarnings(\"ConstantConditions\")\n@@ -678,8 +673,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t// COUNT(*) should never return NULL\n \t\treturn jdbc.queryForObject(\n \t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tgroup.getId(), role.toLowerCase(), vo.getId()) > 0;\n+\t\t\t\t\t\t\"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class, group.getId(), role.toLowerCase(), vo.getId()) > 0;\n \t}\n \n \t@Override\n@@ -723,8 +717,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on resource.\");\n \t\t}\n \t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id, vo_id, facility_id) values ((select id from roles where name=?), ?, ?, ?, ?)\",\n-\t\t\t\trole.toLowerCase(), resource.getId(), group.getId(), resource.getVoId(), resource.getFacilityId());\n+\t\t\tjdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id, vo_id, facility_id) values ((select id from roles where name=?), ?, ?, ?, ?)\", role.toLowerCase(), resource.getId(), group.getId(), resource.getVoId(), resource.getFacilityId());\n \t\t} catch (DataIntegrityViolationException e) {\n \t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \"+role+\" in resource \" + resource, e, group, resource, role);\n \t\t} catch (RuntimeException e) {\n@@ -914,4 +907,4 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \n \t\treturn \"delete from authz where \" + mappingAsString;\n \t}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/126/AuthzResolverImpl.java\nindex 50e39a838cc..6c9be66e76a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/126/AuthzResolverImpl.java\n@@ -34,7 +34,6 @@ import org.springframework.dao.EmptyResultDataAccessException;\n import org.springframework.jdbc.core.JdbcPerunTemplate;\n import org.springframework.jdbc.core.RowMapper;\n import org.springframework.jdbc.core.SingleColumnRowMapper;\n-\n import javax.sql.DataSource;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -46,872 +45,832 @@ import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n+\n public class AuthzResolverImpl implements AuthzResolverImplApi {\n \n-\tfinal static Logger log = LoggerFactory.getLogger(FacilitiesManagerImpl.class);\n-\n-\tprivate PerunRolesLoader perunRolesLoader;\n-\tprivate static PerunPoliciesContainer perunPoliciesContainer = new PerunPoliciesContainer();\n-\n-\t//http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n-\tprivate static JdbcPerunTemplate jdbc;\n-\n-\tprivate final static Pattern patternForExtractingPerunBean = Pattern.compile(\"^pb_([a-z_]+)_id$\");\n-\n-\tprivate final static String authzRoleMappingSelectQuery = \" authz.user_id as authz_user_id, authz.role_id as authz_role_id,\" +\n-\t\t\"authz.authorized_group_id as authz_authorized_group_id, authz.vo_id as pb_vo_id, authz.group_id as pb_group_id, \" +\n-\t\t\"authz.facility_id as pb_facility_id, authz.member_id as pb_member_id, authz.resource_id as pb_resource_id, \" +\n-\t\t\"authz.service_id as pb_service_id, authz.security_team_id as pb_security_team_id, \" +\n-\t\t\"authz.sponsored_user_id as pb_sponsored_user_id\";\n-\n-\tprivate static final Pattern columnNamesPattern = Pattern.compile(\"^[_0-9a-zA-Z]+$\");\n-\n-\tprivate static final RowMapper<String> AUTHZROLE_MAPPER_FOR_ATTRIBUTES = (rs, i) -> rs.getString(\"name\").toUpperCase();\n-\n-\tprivate static final RowMapper<Pair<String, Map<String, Set<Integer>>>> AUTHZROLE_MAPPER = (rs, i) -> {\n-\t\ttry {\n-\t\t\tMap<String, Set<Integer>> perunBeans = null;\n-\t\t\tString role = rs.getString(\"role_name\").toUpperCase();\n-\n-\t\t\t// Iterate through all returned columns and try to extract PerunBean name from the labels\n-\t\t\tfor (int j = rs.getMetaData().getColumnCount(); j > 0; j--) {\n-\t\t\t\tMatcher matcher = patternForExtractingPerunBean.matcher(rs.getMetaData().getColumnLabel(j).toLowerCase());\n-\t\t\t\tif (matcher.find()) {\n-\t\t\t\t\tString perunBeanName = matcher.group(1);\n-\t\t\t\t\tint id = rs.getInt(j);\n-\t\t\t\t\tif (!rs.wasNull()) {\n-\t\t\t\t\t\t// We have to make first letters o words uppercase\n-\t\t\t\t\t\tString className = convertUnderScoreCaseToCamelCase(perunBeanName);\n-\n-\t\t\t\t\t\tif (perunBeans == null) {\n-\t\t\t\t\t\t\tperunBeans = new HashMap<>();\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tperunBeans.computeIfAbsent(className, k -> new HashSet<>());\n-\t\t\t\t\t\tperunBeans.get(className).add(id);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\treturn new Pair<>(role, perunBeans);\n-\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t};\n-\n-\tprivate static String convertUnderScoreCaseToCamelCase(String name) {\n-\t\tboolean nextIsCapital = true;\n-\t\tStringBuilder nameBuilder = new StringBuilder();\n-\t\tfor (char c : name.toCharArray()) {\n-\t\t\tif (c == '_') {\n-\t\t\t\tnextIsCapital = true;\n-\t\t\t} else {\n-\t\t\t\tif (nextIsCapital) {\n-\t\t\t\t\tc = Character.toUpperCase(c);\n-\t\t\t\t\tnextIsCapital = false;\n-\t\t\t\t}\n-\t\t\t\tnameBuilder.append(c);\n-\t\t\t}\n-\t\t}\n-\t\treturn nameBuilder.toString();\n-\t}\n-\n-\tpublic AuthzResolverImpl(DataSource perunPool) {\n-\t\tjdbc = new JdbcPerunTemplate(perunPool);\n-\t\tjdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n-\t}\n-\n-\t@Override\n-\tpublic AuthzRoles getRoles(User user) {\n-\t\tAuthzRoles authzRoles = new AuthzRoles();\n-\n-\t\tif (user != null) {\n-\t\t\ttry {\n-\t\t\t\t// Get roles from Authz table\n-\t\t\t\tList<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \"\n-\t\t\t\t\t\t+ \"(select groups.id from groups join groups_members on groups.id=groups_members.group_id join members on \"\n-\t\t\t\t\t\t+ \"members.id=groups_members.member_id join users on users.id=members.user_id where users.id=?)\", AUTHZROLE_MAPPER, user.getId(), user.getId());\n-\n-\t\t\t\tfor (Pair<String, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n-\t\t\t\t\tauthzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n-\t\t\t\t}\n-\n-\t\t\t\t// Get service users for user\n-\t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n-\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n-\t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n-\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n-\t\t\t\t}\n-\n-\t\t\t\t// Get members for user\n-\t\t\t\tList<Integer> authzMember = jdbc.query(\"select members.id as id from members where members.user_id=?\",\n-\t\t\t\t\t\tUtils.ID_MAPPER ,user.getId());\n-\t\t\t\tfor (Integer memberId : authzMember) {\n-\t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, Member.class, memberId);\n-\t\t\t\t}\n-\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn authzRoles;\n-\t}\n-\n-\t@Override\n-\tpublic AuthzRoles getRoles(Group group) {\n-\t\tAuthzRoles authzRoles = new AuthzRoles();\n-\n-\t\tif (group != null) {\n-\t\t\ttry {\n-\t\t\t\t// Get roles from Authz table\n-\t\t\t\tList<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery\n-\t\t\t\t+ \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\",\n-\t\t\t\tAUTHZROLE_MAPPER, group.getId());\n-\n-\t\t\t\tfor (Pair<String, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n-\t\t\t\t\tauthzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n-\t\t\t\t}\n-\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\tthrow new InternalErrorException(e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn authzRoles;\n-\t}\n-\n-\t/**\n-\t * Load all authorization components to the database and to the PerunPoliciesContainer\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tpublic void initialize() {\n-\t\tif (BeansUtils.isPerunReadOnly()) log.debug(\"Loading authzresolver manager init in readOnly version.\");\n-\n-\t\tthis.perunRolesLoader.loadPerunRoles(jdbc);\n-\t\tperunPoliciesContainer.setPerunPolicies(this.perunRolesLoader.loadPerunPolicies());\n-\t\tperunPoliciesContainer.setRolesManagementRules(this.perunRolesLoader.loadPerunRolesManagement());\n-\t}\n-\n-\tpublic static Map<String, Set<ActionType>> getRolesWhichCanWorkWithAttribute(ActionType actionType, AttributeDefinition attrDef) {\n-\t\tString actType = actionType.getActionType().toLowerCase() + \"%\";\n-\t\ttry {\n-\t\t\tList<Pair<String, ActionType>> pairs = jdbc.query(\"select distinct roles.name, action_types.action_type from attributes_authz \" +\n-\t\t\t\t\t\t\t\"join roles on attributes_authz.role_id=roles.id \" +\n-\t\t\t\t\t\t\t\"join action_types on attributes_authz.action_type_id=action_types.id \" +\n-\t\t\t\t\t\t\t\"where attributes_authz.attr_id=? and action_types.action_type like ?\",\n-\t\t\t\t\t(rs, arg1) -> new Pair<>(rs.getString(\"name\").toUpperCase(), ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())),\n-\t\t\t\t\tattrDef.getId(), actType);\n-\n-\t\t\tMap<String, Set<ActionType>> result = new HashMap<>();\n-\t\t\tfor (Pair<String, ActionType> pair : pairs) {\n-\t\t\t\tif (result.containsKey(pair.getLeft())) {\n-\t\t\t\t\tresult.get(pair.getLeft()).add(pair.getRight());\n-\t\t\t\t} else {\n-\t\t\t\t\tSet<ActionType> rights = new HashSet<>();\n-\t\t\t\t\trights.add(pair.getRight());\n-\t\t\t\t\tresult.put(pair.getLeft(), rights);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn result;\n-\n-\t\t} catch (EmptyResultDataAccessException e) {\n-\t\t\treturn new HashMap<>();\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllUserAuthz(PerunSession sess, User user) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where user_id=?\", user.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where sponsored_user_id=?\", sponsoredUser.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForVo(PerunSession sess, Vo vo) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where vo_id=?\", vo.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForGroup(PerunSession sess, Group group) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where group_id=?\", group.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForFacility(PerunSession sess, Facility facility) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where facility_id=?\", facility.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForResource(PerunSession sess, Resource resource) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where resource_id=?\", resource.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForService(PerunSession sess, Service service) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where service_id=?\", service.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"delete from authz where security_team_id=?\", securityTeam.getId());\n-\t\t} catch (RuntimeException err) {\n-\t\t\tthrow new InternalErrorException(err);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Facility facility, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.FACILITYADMIN.toLowerCase(), facility.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the facility \" + facility, e, user, facility);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Facility facility, Group group) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.FACILITYADMIN.toLowerCase(), facility.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the facility \" + facility, e, group, facility);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Facility facility, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and facility_id=? and role_id=(select id from roles where name=?)\", user.getId(), facility.getId(), Role.FACILITYADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the facility \" + facility);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Facility facility, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and facility_id=? and role_id=(select id from roles where name=?)\", group.getId(), facility.getId(), Role.FACILITYADMIN.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the facility \" + facility);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Resource resource, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", user.getId(), Role.RESOURCEADMIN.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the resource \" + resource, e, user, resource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Resource resource, Group group) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", group.getId(), Role.RESOURCEADMIN.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the resource \" + resource, e, group, resource);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Resource resource, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), Role.RESOURCEADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Resource resource, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), Role.RESOURCEADMIN.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, User sponsoredUser, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SPONSOR.toLowerCase(), sponsoredUser.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, user, sponsoredUser);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, User sponsoredUser, Group group) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SPONSOR.toLowerCase(), sponsoredUser.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser, e, group, sponsoredUser);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, User sponsoredUser, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", user.getId(), sponsoredUser.getId(), Role.SPONSOR.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, User sponsoredUser, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", group.getId(), sponsoredUser.getId(), Role.SPONSOR.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\t// Add GROUPADMIN role + groupId and voId\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\tuser.getId(), Role.GROUPADMIN.toLowerCase(), group.getId(), group.getVoId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in group \" + group, e, user, group);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\tauthorizedGroup.getId(), Role.GROUPADMIN.toLowerCase(), group.getId(), group.getVoId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already group admin in group \" + group, e, authorizedGroup, group);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tuser.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\",\n-\t\t\t\t\t\tauthorizedGroup.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\t\tRole.SECURITYADMIN.toLowerCase(), securityTeam.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in securityTeam \" + securityTeam, e, user, securityTeam);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", group.getId(),\n-\t\t\t\t\tRole.SECURITYADMIN.toLowerCase(), securityTeam.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin in securityTeam \" + securityTeam, e, group, securityTeam);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", user.getId(), securityTeam.getId(), Role.SECURITYADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the security team \" + securityTeam);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", group.getId(), securityTeam.getId(), Role.SECURITYADMIN.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the security team \" + securityTeam);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeUserPerunAdmin(PerunSession sess, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNADMIN.toLowerCase());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already perun admin\", e, user, Role.PERUNADMIN);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeUserPerunObserver(PerunSession sess, User user) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNOBSERVER.toLowerCase());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already perun observer\", e, user, Role.PERUNOBSERVER);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeAuthorizedGroupPerunObserver(PerunSession sess, Group authorizedGroup) throws AlreadyAdminException {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (authorized_group_id, role_id) values (?, (select id from roles where name=?))\", authorizedGroup.getId(), Role.PERUNOBSERVER.toLowerCase());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already perun observer\", e, authorizedGroup, Role.PERUNOBSERVER);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removePerunObserverFromAuthorizedGroup(PerunSession sess, Group authorizedGroup) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and role_id=(select id from roles where name=?)\", authorizedGroup.getId(), Role.PERUNOBSERVER.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not perun observer.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removePerunAdmin(PerunSession sess, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun admin.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removePerunObserver(PerunSession sess, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNOBSERVER.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun observer.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void makeUserCabinetAdmin(PerunSession sess, User user) {\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.CABINETADMIN.toLowerCase());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeCabinetAdmin(PerunSession sess, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.CABINETADMIN.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not cabinet admin.\");\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addVoRole(PerunSession sess, String role, Vo vo, User user) throws AlreadyAdminException {\n-\t\tif(!Arrays.asList(Role.SPONSOR,Role.TOPGROUPCREATOR,Role.VOADMIN,Role.VOOBSERVER).contains(role)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on VO\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, vo_id) values (?, (select id from roles where name=?), ?)\", user.getId(),\n-\t\t\t\t\trole.toLowerCase(), vo.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in vo \" + vo, e, user, vo, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addVoRole(PerunSession sess, String role, Vo vo, Group group) throws AlreadyAdminException {\n-\t\tif(!Arrays.asList(Role.SPONSOR,Role.TOPGROUPCREATOR,Role.VOADMIN,Role.VOOBSERVER).contains(role)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on VO\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (role_id, vo_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\",\n-\t\t\t\t\trole.toLowerCase(), vo.getId(), group.getId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \"+role+\" in vo \" + vo, e, group, vo, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeVoRole(PerunSession sess, String role, Vo vo, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and vo_id=? and role_id=(select id from roles where name=?)\", user.getId(), vo.getId(), role.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not \"+role+\" in the vo \" + vo);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeVoRole(PerunSession sess, String role, Vo vo, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and vo_id=? and role_id=(select id from roles where name=?)\", group.getId(), vo.getId(), role.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \"+role+\" in the vo \" + vo);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@SuppressWarnings(\"ConstantConditions\")\n-\t@Override\n-\tpublic boolean isUserInRoleForVo(PerunSession session, User user, String role, Vo vo) {\n-\t\t// COUNT(*) should never return NULL\n-\t\treturn jdbc.queryForObject(\n-\t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tuser.getId(), role.toLowerCase(), vo.getId()) > 0;\n-\t}\n-\n-\t@SuppressWarnings(\"ConstantConditions\")\n-\t@Override\n-\tpublic boolean isGroupInRoleForVo(PerunSession session, Group group, String role, Vo vo) {\n-\t\t// COUNT(*) should never return NULL\n-\t\treturn jdbc.queryForObject(\n-\t\t\t\t\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" +\n-\t\t\t\t\t\t\"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\",\tInteger.class,\n-\t\t\t\tgroup.getId(), role.toLowerCase(), vo.getId()) > 0;\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getVoIdsForGroupInRole(PerunSession sess, Group group, String role) {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and authorized_group_id=? and vo_id is not NULL\",\n-\t\t\t\t\tnew SingleColumnRowMapper<>(Integer.class), role.toLowerCase(), group.getId());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic List<Integer> getVoIdsForUserInRole(PerunSession sess, User user, String role) {\n-\t\ttry {\n-\t\t\treturn jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and user_id=? and vo_id is not NULL\",\n-\t\t\t\t\tnew SingleColumnRowMapper<>(Integer.class), role.toLowerCase(), user.getId() );\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addResourceRole(PerunSession sess, User user, String role, Resource resource) throws AlreadyAdminException {\n-\t\tif (!role.equals(Role.RESOURCESELFSERVICE)) {\n-\t\t\tthrow new InternalErrorException(\"Role \" + role + \" cannot be set on resource.\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (user_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", user.getId(),\n-\t\t\t\trole.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \"+role+\" in resource \" + resource, e, user, resource, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void addResourceRole(PerunSession sess, Group group, String role, Resource resource) throws AlreadyAdminException {\n-\t\tif (!role.equals(Role.RESOURCESELFSERVICE)) {\n-\t\t\tthrow new IllegalArgumentException(\"Role \"+role+\" cannot be set on resource.\");\n-\t\t}\n-\t\ttry {\n-\t\t\tjdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id, vo_id, facility_id) values ((select id from roles where name=?), ?, ?, ?, ?)\",\n-\t\t\t\trole.toLowerCase(), resource.getId(), group.getId(), resource.getVoId(), resource.getFacilityId());\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \"+role+\" in resource \" + resource, e, group, resource, role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\t@Override\n-\tpublic void removeResourceRole(PerunSession sess, String role, Resource resource, User user) throws UserNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), role.toLowerCase())) {\n-\t\t\t\tthrow new UserNotAdminException(\"User id=\" + user.getId() + \" is not \"+role+\" in the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void removeResourceRole(PerunSession sess, String role, Resource resource, Group group) throws GroupNotAdminException {\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), role.toLowerCase())) {\n-\t\t\t\tthrow new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \"+role+\" in the resource \" + resource);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\n-\tpublic void setPerunRolesLoader(PerunRolesLoader perunRolesLoader) {\n-\t\tthis.perunRolesLoader = perunRolesLoader;\n-\t}\n-\n-\t@Override\n-\tpublic boolean roleExists(String role) {\n-\t\tif (role == null) return false;\n-\t\ttry {\n-\t\t\treturn 1 == jdbc.queryForInt(\"select count(*) from roles where name=?\", role.toLowerCase());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void loadAuthorizationComponents() {\n-\t\tthis.perunRolesLoader.loadPerunRoles(jdbc);\n-\t\tperunPoliciesContainer.setPerunPolicies(this.perunRolesLoader.loadPerunPolicies());\n-\t\tperunPoliciesContainer.setRolesManagementRules(this.perunRolesLoader.loadPerunRolesManagement());\n-\t}\n-\n-\t/**\n-\t * Get PerunPolicy for the policy name from the PerunPoliciesContainer\n-\t *\n-\t * @param policyName for which will be the policy fetched\n-\t * @return PerunPolicy for the role name\n-\t * @throws PolicyNotExistsException of there is no policy for the policy name\n-\t */\n-\tpublic static PerunPolicy getPerunPolicy(String policyName) throws PolicyNotExistsException {\n-\t\treturn perunPoliciesContainer.getPerunPolicy(policyName);\n-\t}\n-\n-\t/**\n-\t * Get the policy according the policy name and all its inlcuded policies (without cycle).\n-\t *\n-\t * @param policyName from which will be the policies fetched\n-\t * @return list of policies\n-\t * @throws PolicyNotExistsException if policy or some included policies does not exists in PerunPoliciesContainer\n-\t */\n-\tpublic static List<PerunPolicy> fetchPolicyWithAllIncludedPolicies(String policyName) throws PolicyNotExistsException {\n-\t\treturn perunPoliciesContainer.fetchPolicyWithAllIncludedPolicies(policyName);\n-\t}\n-\n-\t/**\n-\t * Return all loaded perun policies.\n-\t *\n-\t * @return all loaded policies\n-\t */\n-\tpublic static List<PerunPolicy> getAllPolicies() {\n-\t\treturn new ArrayList<>(perunPoliciesContainer.getAllPolicies());\n-\t}\n-\n-\t/**\n-\t * Get RoleManagementRules for the role name from the PerunPoliciesContainer\n-\t *\n-\t * @param roleName for which will be the rules fetched\n-\t * @return RoleManagementRules for the role name\n-\t * @throws PolicyNotExistsException of there are no rules for the role name\n-\t */\n-\tpublic static RoleManagementRules getRoleManagementRules(String roleName) throws RoleManagementRulesNotExistsException {\n-\t\treturn perunPoliciesContainer.getRoleManagementRules(roleName);\n-\t}\n-\n-\t@Override\n-\tpublic Integer getRoleId(String role) {\n-\t\ttry {\n-\t\t\treturn jdbc.queryForInt(\"SELECT id FROM roles WHERE name=?\", role.toLowerCase());\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void setRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleAlreadySetException {\n-\t\tString query = prepareQueryToSetRole(mappingOfValues);\n-\n-\t\ttry {\n-\t\t\tjdbc.update(query);\n-\t\t} catch (DataIntegrityViolationException e) {\n-\t\t\tthrow new RoleAlreadySetException(role);\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException {\n-\t\tString query = prepareQueryToUnsetRole(mappingOfValues);\n-\n-\t\ttry {\n-\t\t\tif (0 == jdbc.update(query)) {\n-\t\t\t\tthrow new RoleNotSetException(role);\n-\t\t\t}\n-\t\t} catch (RuntimeException e) {\n-\t\t\tthrow new InternalErrorException(e);\n-\t\t}\n-\t}\n-\n-\t/**\n-\t * Create query to set role according to the mapping of values\n-\t *\n-\t * @param mappingOfValues from which will be the query created\n-\t * @return sql query\n-\t */\n-\tprivate String prepareQueryToSetRole(Map<String, Integer> mappingOfValues) {\n-\t\tString columnsFromMapping;\n-\t\tString valuesFromMapping;\n-\t\tList<String> columnNames = new ArrayList<>();\n-\t\tList<String> columnValues = new ArrayList<>();\n-\n-\t\tfor (String columnName: mappingOfValues.keySet()) {\n-\n-\t\t\tif (columnName == null || mappingOfValues.get(columnName) == null) {\n-\t\t\t\tthrow new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to unset a role.\");\n-\t\t\t}\n-\n-\t\t\tMatcher matcher = columnNamesPattern.matcher(columnName);\n-\t\t\tif (!matcher.matches()) {\n-\t\t\t\tthrow new InternalErrorException(\"Cannot create a query to set a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n-\t\t\t}\n-\t\t\tcolumnNames.add(columnName);\n-\t\t\tcolumnValues.add(mappingOfValues.get(columnName).toString());\n-\t\t}\n-\n-\t\tcolumnsFromMapping = StringUtils.join(columnNames, \",\");\n-\t\tvaluesFromMapping = StringUtils.join(columnValues, \",\");\n-\n-\t\treturn \"insert into authz (\" + columnsFromMapping + \") values (\" + valuesFromMapping + \")\";\n-\t}\n-\n-\t/**\n-\t * Create query to unset role according to the mapping of values\n-\t *\n-\t * @param mappingOfValues from which will be the query created\n-\t * @return sql query\n-\t */\n-\tprivate String prepareQueryToUnsetRole(Map<String, Integer> mappingOfValues) {\n-\t\tString mappingAsString;\n-\t\tList<String> listofConditions = new ArrayList<>();\n-\n-\t\tfor (String columnName: mappingOfValues.keySet()) {\n-\n-\t\t\tif (columnName == null || mappingOfValues.get(columnName) == null) {\n-\t\t\t\tthrow new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to set a role.\");\n-\t\t\t}\n-\n-\t\t\tMatcher matcher = columnNamesPattern.matcher(columnName);\n-\t\t\tif (!matcher.matches()) {\n-\t\t\t\tthrow new InternalErrorException(\"Cannot create a query to unset a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n-\t\t\t}\n-\t\t\tString condition = columnName + \"=\" + mappingOfValues.get(columnName).toString();\n-\t\t\tlistofConditions.add(condition);\n-\t\t}\n-\n-\t\tmappingAsString = StringUtils.join(listofConditions, \" and \");\n-\n-\t\treturn \"delete from authz where \" + mappingAsString;\n-\t}\n-}\n+ final static Logger log = LoggerFactory.getLogger(FacilitiesManagerImpl.class);\n+ private PerunRolesLoader perunRolesLoader;\n+ private static PerunPoliciesContainer perunPoliciesContainer = new PerunPoliciesContainer();\n+\n+ //http://static.springsource.org/spring/docs/3.0.x/spring-framework-reference/html/jdbc.html\n+ private static JdbcPerunTemplate jdbc;\n+ private final static Pattern patternForExtractingPerunBean = Pattern.compile(\"^pb_([a-z_]+)_id$\");\n+ private final static String authzRoleMappingSelectQuery = \" authz.user_id as authz_user_id, authz.role_id as authz_role_id,\" + \"authz.authorized_group_id as authz_authorized_group_id, authz.vo_id as pb_vo_id, authz.group_id as pb_group_id, \" + \"authz.facility_id as pb_facility_id, authz.member_id as pb_member_id, authz.resource_id as pb_resource_id, \" + \"authz.service_id as pb_service_id, authz.security_team_id as pb_security_team_id, \" + \"authz.sponsored_user_id as pb_sponsored_user_id\";\n+ private static final Pattern columnNamesPattern = Pattern.compile(\"^[_0-9a-zA-Z]+$\");\n+ private static final RowMapper<String> AUTHZROLE_MAPPER_FOR_ATTRIBUTES = (rs,i)->rs.getString(\"name\").toUpperCase();\n+ private static final RowMapper<Pair<String, Map<String, Set<Integer>>>> AUTHZROLE_MAPPER = (rs,i)-> {\n+                                                                                             try {\n+                                                                                              Map<String, Set<Integer>> perunBeans = null;\n+                                                                                              String role = rs.getString(\"role_name\").toUpperCase();\n+\n+   // Iterate through all returned columns and try to extract PerunBean name from the labels\n+                                                                                              for (int j = rs.getMetaData().getColumnCount(); j > 0; j--) {\n+                                                                                               Matcher matcher = patternForExtractingPerunBean.matcher(rs.getMetaData().getColumnLabel(j).toLowerCase());\n+                                                                                               if (matcher.find()) {\n+                                                                                                String perunBeanName = matcher.group(1);\n+                                                                                                int id = rs.getInt(j);\n+                                                                                                if (!rs.wasNull()) {\n+      // We have to make first letters o words uppercase\n+                                                                                                 String className = convertUnderScoreCaseToCamelCase(perunBeanName);\n+                                                                                                 if (perunBeans == null) {\n+                                                                                                  perunBeans = new HashMap<>();\n+                                                                                                 }\n+                                                                                                 perunBeans.computeIfAbsent(className, k-> new HashSet<>());\n+                                                                                                 perunBeans.get(className).add(id);\n+                                                                                                }\n+                                                                                               }\n+                                                                                              }\n+\n+                                                                                              return new Pair<>(role, perunBeans);\n+                                                                                             } catch (Exception e) {\n+                                                                                              throw new InternalErrorException(e);\n+                                                                                             }\n+                                                                                            };\n+ private static String convertUnderScoreCaseToCamelCase(String name) {\n+\n+  boolean nextIsCapital = true;\n+  StringBuilder nameBuilder = new StringBuilder();\n+  for (char c : name.toCharArray()) {\n+   if (c == '_') {\n+    nextIsCapital = true;\n+   } else {\n+    if (nextIsCapital) {\n+     c = Character.toUpperCase(c);\n+     nextIsCapital = false;\n+    }\n+    nameBuilder.append(c);\n+   }\n+  }\n+\n+  return nameBuilder.toString();\n+ }\n+\n+\n+ public AuthzResolverImpl(DataSource perunPool) {\n+  jdbc = new JdbcPerunTemplate(perunPool);\n+  jdbc.setQueryTimeout(BeansUtils.getCoreConfig().getQueryTimeout());\n+ }\n+\n+ @Override\n+ public AuthzRoles getRoles(User user) {\n+  AuthzRoles authzRoles = new AuthzRoles();\n+  if (user != null) {\n+   try {\n+    // Get roles from Authz table\n+    List<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery + \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.user_id=? or authorized_group_id in \" + \"(select groups.id from groups join groups_members on groups.id=groups_members.group_id join members on \" + \"members.id=groups_members.member_id join users on users.id=members.user_id where users.id=?)\", AUTHZROLE_MAPPER, user.getId(), user.getId());\n+    for (Pair<String, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n+     authzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n+    }\n+\n+    // Get service users for user\n+    List<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" + \"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" + \"and specific_user_users.type=?\", Utils.ID_MAPPER, user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+    for (Integer serviceUserId : authzServiceUsers) {\n+     authzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n+    }\n+\n+    // Get members for user\n+    List<Integer> authzMember = jdbc.query(\"select members.id as id from members where members.user_id=?\", Utils.ID_MAPPER, user.getId());\n+    for (Integer memberId : authzMember) {\n+     authzRoles.putAuthzRole(Role.SELF, Member.class, memberId);\n+    }\n+   } catch (RuntimeException e) {\n+    throw new InternalErrorException(e);\n+   }\n+  }\n+\n+  return authzRoles;\n+ }\n+\n+ @Override\n+ public AuthzRoles getRoles(Group group) {\n+  AuthzRoles authzRoles = new AuthzRoles();\n+  if (group != null) {\n+   try {\n+    // Get roles from Authz table\n+    List<Pair<String, Map<String, Set<Integer>>>> authzRolesPairs = jdbc.query(\"select \" + authzRoleMappingSelectQuery + \", roles.name as role_name from authz left join roles on authz.role_id=roles.id where authz.authorized_group_id=?\", AUTHZROLE_MAPPER, group.getId());\n+    for (Pair<String, Map<String, Set<Integer>>> pair : authzRolesPairs) {\n+     authzRoles.putAuthzRoles(pair.getLeft(), pair.getRight());\n+    }\n+   } catch (RuntimeException e) {\n+    throw new InternalErrorException(e);\n+   }\n+  }\n+\n+  return authzRoles;\n+ }\n+\n+ /**\n+  * Load all authorization components to the database and to the PerunPoliciesContainer\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+ public void initialize() {\n+  if (BeansUtils.isPerunReadOnly()) log.debug(\"Loading authzresolver manager init in readOnly version.\");\n+  this.perunRolesLoader.loadPerunRoles(jdbc);\n+  perunPoliciesContainer.setPerunPolicies(this.perunRolesLoader.loadPerunPolicies());\n+  perunPoliciesContainer.setRolesManagementRules(this.perunRolesLoader.loadPerunRolesManagement());\n+ }\n+\n+ public static Map<String, Set<ActionType>> getRolesWhichCanWorkWithAttribute(ActionType actionType, AttributeDefinition attrDef) {\n+  String actType = actionType.getActionType().toLowerCase() + \"%\";\n+  try {\n+   List<Pair<String, ActionType>> pairs = jdbc.query(\"select distinct roles.name, action_types.action_type from attributes_authz \" + \"join roles on attributes_authz.role_id=roles.id \" + \"join action_types on attributes_authz.action_type_id=action_types.id \" + \"where attributes_authz.attr_id=? and action_types.action_type like ?\", (rs,arg1)-> new Pair<>(rs.getString(\"name\").toUpperCase(), ActionType.valueOf(rs.getString(\"action_type\").toUpperCase())), attrDef.getId(), actType);\n+   Map<String, Set<ActionType>> result = new HashMap<>();\n+   for (Pair<String, ActionType> pair : pairs) {\n+    if (result.containsKey(pair.getLeft())) {\n+     result.get(pair.getLeft()).add(pair.getRight());\n+    } else {\n+     Set<ActionType> rights = new HashSet<>();\n+     rights.add(pair.getRight());\n+     result.put(pair.getLeft(), rights);\n+    }\n+   }\n+\n+   return result;\n+  } catch (EmptyResultDataAccessException e) {\n+   return new HashMap<>();\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllUserAuthz(PerunSession sess, User user) {\n+  try {\n+   jdbc.update(\"delete from authz where user_id=?\", user.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllSponsoredUserAuthz(PerunSession sess, User sponsoredUser) {\n+  try {\n+   jdbc.update(\"delete from authz where sponsored_user_id=?\", sponsoredUser.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForVo(PerunSession sess, Vo vo) {\n+  try {\n+   jdbc.update(\"delete from authz where vo_id=?\", vo.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForGroup(PerunSession sess, Group group) {\n+  try {\n+   jdbc.update(\"delete from authz where group_id=?\", group.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForFacility(PerunSession sess, Facility facility) {\n+  try {\n+   jdbc.update(\"delete from authz where facility_id=?\", facility.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForResource(PerunSession sess, Resource resource) {\n+  try {\n+   jdbc.update(\"delete from authz where resource_id=?\", resource.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForService(PerunSession sess, Service service) {\n+  try {\n+   jdbc.update(\"delete from authz where service_id=?\", service.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAllAuthzForSecurityTeam(PerunSession sess, SecurityTeam securityTeam) {\n+  try {\n+   jdbc.update(\"delete from authz where security_team_id=?\", securityTeam.getId());\n+  } catch (RuntimeException err) {\n+   throw new InternalErrorException(err);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Facility facility, User user) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.FACILITYADMIN.toLowerCase(), facility.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the facility \" + facility, e, user, facility);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Facility facility, Group group) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, facility_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.FACILITYADMIN.toLowerCase(), facility.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the facility \" + facility, e, group, facility);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Facility facility, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and facility_id=? and role_id=(select id from roles where name=?)\", user.getId(), facility.getId(), Role.FACILITYADMIN.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the facility \" + facility);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Facility facility, Group group) throws GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and facility_id=? and role_id=(select id from roles where name=?)\", group.getId(), facility.getId(), Role.FACILITYADMIN.toLowerCase())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the facility \" + facility);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Resource resource, User user) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", user.getId(), Role.RESOURCEADMIN.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin of the resource \" + resource, e, user, resource);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Resource resource, Group group) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", group.getId(), Role.RESOURCEADMIN.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin of the resource \" + resource, e, group, resource);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Resource resource, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), Role.RESOURCEADMIN.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the resource \" + resource);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Resource resource, Group group) throws GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), Role.RESOURCEADMIN.toLowerCase())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the resource \" + resource);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, User sponsoredUser, User user) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SPONSOR.toLowerCase(), sponsoredUser.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser,\n+e,\n+user,\n+sponsoredUser);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, User sponsoredUser, Group group) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, sponsored_user_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SPONSOR.toLowerCase(), sponsoredUser.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already sponsor of the sponsoredUser \" + sponsoredUser,\n+e,\n+group,\n+sponsoredUser);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, User sponsoredUser, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", user.getId(), sponsoredUser.getId(), Role.SPONSOR.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, User sponsoredUser, Group group) throws GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and sponsored_user_id=? and role_id=(select id from roles where name=?)\", group.getId(), sponsoredUser.getId(), Role.SPONSOR.toLowerCase())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not sponsor of the sponsored user \" + sponsoredUser);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Group group, User user) throws AlreadyAdminException {\n+  try {\n+   // Add GROUPADMIN role + groupId and voId\n+   jdbc.update(\"insert into authz (user_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\", user.getId(), Role.GROUPADMIN.toLowerCase(), group.getId(), group.getVoId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in group \" + group, e, user, group);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, Group group, Group authorizedGroup) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, group_id, vo_id) values (?, (select id from roles where name=?), ?, ?)\", authorizedGroup.getId(), Role.GROUPADMIN.toLowerCase(), group.getId(), group.getVoId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already group admin in group \" + group, e, authorizedGroup, group);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Group group, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and group_id=? and role_id=(select id from roles where name=?)\", user.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the group \" + group);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, Group group, Group authorizedGroup) throws GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and group_id=? and role_id=(select id from roles where name=?)\", authorizedGroup.getId(), group.getId(), Role.GROUPADMIN.toLowerCase())) {\n+    throw new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not admin of the group \" + group);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", user.getId(), Role.SECURITYADMIN.toLowerCase(), securityTeam.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already admin in securityTeam \" + securityTeam, e, user, securityTeam);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id, security_team_id) values (?, (select id from roles where name=?), ?)\", group.getId(), Role.SECURITYADMIN.toLowerCase(), securityTeam.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already admin in securityTeam \" + securityTeam, e, group, securityTeam);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, SecurityTeam securityTeam, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", user.getId(), securityTeam.getId(), Role.SECURITYADMIN.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not admin of the security team \" + securityTeam);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeAdmin(PerunSession sess, SecurityTeam securityTeam, Group group) throws GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and security_team_id=? and role_id=(select id from roles where name=?)\", group.getId(), securityTeam.getId(), Role.SECURITYADMIN.toLowerCase())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not admin of the security team \" + securityTeam);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void makeUserPerunAdmin(PerunSession sess, User user) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNADMIN.toLowerCase());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already perun admin\", e, user, Role.PERUNADMIN);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void makeUserPerunObserver(PerunSession sess, User user) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.PERUNOBSERVER.toLowerCase());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already perun observer\", e, user, Role.PERUNOBSERVER);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void makeAuthorizedGroupPerunObserver(PerunSession sess, Group authorizedGroup) throws AlreadyAdminException {\n+  try {\n+   jdbc.update(\"insert into authz (authorized_group_id, role_id) values (?, (select id from roles where name=?))\", authorizedGroup.getId(), Role.PERUNOBSERVER.toLowerCase());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + authorizedGroup.getId() + \" is already perun observer\", e, authorizedGroup, Role.PERUNOBSERVER);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removePerunObserverFromAuthorizedGroup(PerunSession sess, Group authorizedGroup) throws GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and role_id=(select id from roles where name=?)\", authorizedGroup.getId(), Role.PERUNOBSERVER.toLowerCase())) {\n+    throw new GroupNotAdminException(\"Group id=\" + authorizedGroup.getId() + \" is not perun observer.\");\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removePerunAdmin(PerunSession sess, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNADMIN.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun admin.\");\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removePerunObserver(PerunSession sess, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.PERUNOBSERVER.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not perun observer.\");\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void makeUserCabinetAdmin(PerunSession sess, User user) {\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id) values (?, (select id from roles where name=?))\", user.getId(), Role.CABINETADMIN.toLowerCase());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeCabinetAdmin(PerunSession sess, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and role_id=(select id from roles where name=?)\", user.getId(), Role.CABINETADMIN.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not cabinet admin.\");\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addVoRole(PerunSession sess, String role, Vo vo, User user) throws AlreadyAdminException {\n+  if (!Arrays.asList(Role.SPONSOR, Role.TOPGROUPCREATOR, Role.VOADMIN, Role.VOOBSERVER).contains(role)) {\n+   throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on VO\");\n+  }\n+\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, vo_id) values (?, (select id from roles where name=?), ?)\", user.getId(), role.toLowerCase(), vo.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \" + role + \" in vo \" + vo, e, user, vo, role);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addVoRole(PerunSession sess, String role, Vo vo, Group group) throws AlreadyAdminException {\n+  if (!Arrays.asList(Role.SPONSOR, Role.TOPGROUPCREATOR, Role.VOADMIN, Role.VOOBSERVER).contains(role)) {\n+   throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on VO\");\n+  }\n+\n+  try {\n+   jdbc.update(\"insert into authz (role_id, vo_id, authorized_group_id) values ((select id from roles where name=?), ?, ?)\", role.toLowerCase(), vo.getId(), group.getId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \" + role + \" in vo \" + vo, e, group, vo, role);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeVoRole(PerunSession sess, String role, Vo vo, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and vo_id=? and role_id=(select id from roles where name=?)\", user.getId(), vo.getId(), role.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not \" + role + \" in the vo \" + vo);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeVoRole(PerunSession sess, String role, Vo vo, Group group) throws GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and vo_id=? and role_id=(select id from roles where name=?)\", group.getId(), vo.getId(), role.toLowerCase())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \" + role + \" in the vo \" + vo);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @SuppressWarnings(\"ConstantConditions\")\n+ @Override\n+ public boolean isUserInRoleForVo(PerunSession session, User user, String role, Vo vo) {\n+  // COUNT(*) should never return NULL\n+  return jdbc.queryForObject(\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" + \"WHERE authz.user_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class, user.getId(), role.toLowerCase(), vo.getId()) > 0;\n+ }\n+\n+ @SuppressWarnings(\"ConstantConditions\")\n+ @Override\n+ public boolean isGroupInRoleForVo(PerunSession session, Group group, String role, Vo vo) {\n+  // COUNT(*) should never return NULL\n+  return jdbc.queryForObject(\"SELECT COUNT(*) FROM authz JOIN roles ON (authz.role_id=roles.id) \" + \"WHERE authz.authorized_group_id=? AND roles.name=? AND authz.vo_id=?\", Integer.class, group.getId(), role.toLowerCase(), vo.getId()) > 0;\n+ }\n+\n+ @Override\n+ public List<Integer> getVoIdsForGroupInRole(PerunSession sess, Group group, String role) {\n+  try {\n+   return jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and authorized_group_id=? and vo_id is not NULL\", new SingleColumnRowMapper<>(Integer.class), role.toLowerCase(), group.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public List<Integer> getVoIdsForUserInRole(PerunSession sess, User user, String role) {\n+  try {\n+   return jdbc.query(\"SELECT vo_id FROM authz WHERE role_id=(select id from roles where name=?) and user_id=? and vo_id is not NULL\", new SingleColumnRowMapper<>(Integer.class), role.toLowerCase(), user.getId());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addResourceRole(PerunSession sess, User user, String role, Resource resource) throws AlreadyAdminException {\n+  if (!role.equals(Role.RESOURCESELFSERVICE)) {\n+   throw new InternalErrorException(\"Role \" + role + \" cannot be set on resource.\");\n+  }\n+\n+  try {\n+   jdbc.update(\"insert into authz (user_id, role_id, resource_id, vo_id, facility_id) values (?, (select id from roles where name=?), ?, ?, ?)\", user.getId(), role.toLowerCase(), resource.getId(), resource.getVoId(), resource.getFacilityId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"User id=\" + user.getId() + \" is already \" + role + \" in resource \" + resource, e, user, resource, role);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void addResourceRole(PerunSession sess, Group group, String role, Resource resource) throws AlreadyAdminException {\n+  if (!role.equals(Role.RESOURCESELFSERVICE)) {\n+   throw new IllegalArgumentException(\"Role \" + role + \" cannot be set on resource.\");\n+  }\n+\n+  try {\n+   jdbc.update(\"insert into authz (role_id, resource_id, authorized_group_id, vo_id, facility_id) values ((select id from roles where name=?), ?, ?, ?, ?)\", role.toLowerCase(), resource.getId(), group.getId(), resource.getVoId(), resource.getFacilityId());\n+  } catch (DataIntegrityViolationException e) {\n+   throw new AlreadyAdminException(\"Group id=\" + group.getId() + \" is already \" + role + \" in resource \" + resource, e, group, resource, role);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeResourceRole(PerunSession sess, String role, Resource resource, User user) throws UserNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where user_id=? and resource_id=? and role_id=(select id from roles where name=?)\", user.getId(), resource.getId(), role.toLowerCase())) {\n+    throw new UserNotAdminException(\"User id=\" + user.getId() + \" is not \" + role + \" in the resource \" + resource);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void removeResourceRole(PerunSession sess, String role, Resource resource, Group group) throws GroupNotAdminException {\n+  try {\n+   if (0 == jdbc.update(\"delete from authz where authorized_group_id=? and resource_id=? and role_id=(select id from roles where name=?)\", group.getId(), resource.getId(), role.toLowerCase())) {\n+    throw new GroupNotAdminException(\"Group id=\" + group.getId() + \" is not \" + role + \" in the resource \" + resource);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ public void setPerunRolesLoader(PerunRolesLoader perunRolesLoader) {\n+  this.perunRolesLoader = perunRolesLoader;\n+ }\n+\n+ @Override\n+ public boolean roleExists(String role) {\n+  if (role == null)\n+   return false;\n+\n+  try {\n+   return 1 == jdbc.queryForInt(\"select count(*) from roles where name=?\", role.toLowerCase());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void loadAuthorizationComponents() {\n+  this.perunRolesLoader.loadPerunRoles(jdbc);\n+  perunPoliciesContainer.setPerunPolicies(this.perunRolesLoader.loadPerunPolicies());\n+  perunPoliciesContainer.setRolesManagementRules(this.perunRolesLoader.loadPerunRolesManagement());\n+ }\n+\n+ /**\n+  * Get PerunPolicy for the policy name from the PerunPoliciesContainer\n+  *\n+  * @param policyName for which will be the policy fetched\n+  * @return PerunPolicy for the role name\n+  * @throws PolicyNotExistsException of there is no policy for the policy name\n+  */\n+\n+ public static PerunPolicy getPerunPolicy(String policyName) throws PolicyNotExistsException {\n+  return perunPoliciesContainer.getPerunPolicy(policyName);\n+ }\n+\n+ /**\n+  * Get the policy according the policy name and all its inlcuded policies (without cycle).\n+  *\n+  * @param policyName from which will be the policies fetched\n+  * @return list of policies\n+  * @throws PolicyNotExistsException if policy or some included policies does not exists in PerunPoliciesContainer\n+  */\n+\n+ public static List<PerunPolicy> fetchPolicyWithAllIncludedPolicies(String policyName) throws PolicyNotExistsException {\n+  return perunPoliciesContainer.fetchPolicyWithAllIncludedPolicies(policyName);\n+ }\n+\n+ /**\n+  * Return all loaded perun policies.\n+  *\n+  * @return all loaded policies\n+  */\n+\n+ public static List<PerunPolicy> getAllPolicies() {\n+  return new ArrayList<>(perunPoliciesContainer.getAllPolicies());\n+ }\n+\n+ /**\n+  * Get RoleManagementRules for the role name from the PerunPoliciesContainer\n+  *\n+  * @param roleName for which will be the rules fetched\n+  * @return RoleManagementRules for the role name\n+  * @throws PolicyNotExistsException of there are no rules for the role name\n+  */\n+\n+ public static RoleManagementRules getRoleManagementRules(String roleName) throws RoleManagementRulesNotExistsException {\n+  return perunPoliciesContainer.getRoleManagementRules(roleName);\n+ }\n+\n+ @Override\n+ public Integer getRoleId(String role) {\n+  try {\n+   return jdbc.queryForInt(\"SELECT id FROM roles WHERE name=?\", role.toLowerCase());\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void setRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleAlreadySetException {\n+  String query = prepareQueryToSetRole(mappingOfValues);\n+  try {\n+   jdbc.update(query);\n+  } catch (DataIntegrityViolationException e) {\n+   throw new RoleAlreadySetException(role);\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ @Override\n+ public void unsetRole(PerunSession sess, Map<String, Integer> mappingOfValues, String role) throws RoleNotSetException {\n+  String query = prepareQueryToUnsetRole(mappingOfValues);\n+  try {\n+   if (0 == jdbc.update(query)) {\n+    throw new RoleNotSetException(role);\n+   }\n+  } catch (RuntimeException e) {\n+   throw new InternalErrorException(e);\n+  }\n+ }\n+\n+ /**\n+  * Create query to set role according to the mapping of values\n+  *\n+  * @param mappingOfValues from which will be the query created\n+  * @return sql query\n+  */\n+\n+\n+ private String prepareQueryToSetRole(Map<String, Integer> mappingOfValues) {\n+  String columnsFromMapping;\n+  String valuesFromMapping;\n+  List<String> columnNames = new ArrayList<>();\n+  List<String> columnValues = new ArrayList<>();\n+  for (String columnName : mappingOfValues.keySet()) {\n+   if (columnName == null || mappingOfValues.get(columnName) == null) {\n+    throw new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to unset a role.\");\n+   }\n+   Matcher matcher = columnNamesPattern.matcher(columnName);\n+   if (!matcher.matches()) {\n+    throw new InternalErrorException(\"Cannot create a query to set a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n+   }\n+   columnNames.add(columnName);\n+   columnValues.add(mappingOfValues.get(columnName).toString());\n+  }\n+  columnsFromMapping = StringUtils.join(columnNames, \",\");\n+  valuesFromMapping = StringUtils.join(columnValues, \",\");\n+  return \"insert into authz (\" + columnsFromMapping + \") values (\" + valuesFromMapping + \")\";\n+ }\n+\n+ /**\n+  * Create query to unset role according to the mapping of values\n+  *\n+  * @param mappingOfValues from which will be the query created\n+  * @return sql query\n+  */\n+\n+\n+ private String prepareQueryToUnsetRole(Map<String, Integer> mappingOfValues) {\n+  String mappingAsString;\n+  List<String> listofConditions = new ArrayList<>();\n+  for (String columnName : mappingOfValues.keySet()) {\n+   if (columnName == null || mappingOfValues.get(columnName) == null) {\n+    throw new InternalErrorException(\"Column name and its value cannot be null in the mapping of values, while trying to set a role.\");\n+   }\n+   Matcher matcher = columnNamesPattern.matcher(columnName);\n+   if (!matcher.matches()) {\n+    throw new InternalErrorException(\"Cannot create a query to unset a role, because column name: \" + columnName + \" contains forbidden characters. Allowed are only [1-9a-zA-Z_].\");\n+   }\n+   String condition = columnName + \"=\" + mappingOfValues.get(columnName).toString();\n+   listofConditions.add(condition);\n+  }\n+  mappingAsString = StringUtils.join(listofConditions, \" and \");\n+  return \"delete from authz where \" + mappingAsString;\n+ }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 869
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/126/AuthzResolverImpl.java\nindex 50e39a838cc..6b4c4ba2cc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/126/AuthzResolverImpl.java\n@@ -139,8 +139,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \n \t\t\t\t// Get service users for user\n \t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n-\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+\t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" +  \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n \t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n \t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n \t\t\t\t}\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/126/AuthzResolverImpl.java\nindex 50e39a838cc..50d2083d1a6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/126/AuthzResolverImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/126/AuthzResolverImpl.java\n@@ -140,7 +140,7 @@ public class AuthzResolverImpl implements AuthzResolverImplApi {\n \t\t\t\t// Get service users for user\n \t\t\t\tList<Integer> authzServiceUsers = jdbc.query(\"select specific_user_users.specific_user_id as id from users, \" +\n \t\t\t\t\t\t\"specific_user_users where users.id=specific_user_users.user_id and specific_user_users.status=0 and users.id=? \" +\n-\t\t\t\t        \"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n+\t\t\t\t\t\t\t\t\"and specific_user_users.type=?\", Utils.ID_MAPPER ,user.getId(), SpecificUserType.SERVICE.getSpecificUserType());\n \t\t\t\tfor (Integer serviceUserId : authzServiceUsers) {\n \t\t\t\t\tauthzRoles.putAuthzRole(Role.SELF, User.class, serviceUserId);\n \t\t\t\t}\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}