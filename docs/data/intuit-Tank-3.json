{
    "project_name": "intuit-Tank",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "85",
                "column": "9",
                "severity": "warning",
                "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "        if (fileName.startsWith(\"/%2F/\")) { // Absolute path\n            fileName = fileName.substring(4);\n        }\n        else if (fileName.startsWith(\"/\")) { // All others\n            fileName = fileName.substring(1);\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/3/URLFileLocation.java\nindex 205ff930889..082b1a966c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/3/URLFileLocation.java\n@@ -82,8 +82,7 @@ class URLFileLocation extends FileLocation {\n         String fileName = url.getPath();\n         if (fileName.startsWith(\"/%2F/\")) { // Absolute path\n             fileName = fileName.substring(4);\n-        }\n-        else if (fileName.startsWith(\"/\")) { // All others\n+        } else if (fileName.startsWith(\"/\")) { // All others\n             fileName = fileName.substring(1);\n         }\n         return fileName;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/3/URLFileLocation.java\nindex 205ff930889..d7dae48d29b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/3/URLFileLocation.java\n@@ -20,6 +20,7 @@\n  * License along with this library; if not, write to the Free Software\n  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.\n  */\n+\n package org.fife.ui.rsyntaxtextarea;\n \n import java.io.InputStream;\n@@ -29,138 +30,134 @@ import java.net.URL;\n \n /**\n  * The location of a file at a (remote) URL.\n- * \n+ *\n  * @author Robert Futrell\n  * @version 1.0\n  */\n class URLFileLocation extends FileLocation {\n \n-    /**\n-     * URL of the remote file.\n-     */\n-    private URL url;\n-\n-    /**\n-     * A prettied-up full path of the URL (password removed, etc.).\n-     */\n-    private String fileFullPath;\n-\n-    /**\n-     * A prettied-up filename (leading slash, and possibly \"<code>%2F</code>\", removed).\n-     */\n-    private String fileName;\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @param url\n-     *            The URL of the file.\n-     */\n-    URLFileLocation(URL url) {\n-        this.url = url;\n-        fileFullPath = createFileFullPath();\n-        fileName = createFileName();\n-    }\n-\n-    /**\n-     * Creates a \"prettied-up\" URL to use. This will be stripped of sensitive information such as passwords.\n-     * \n-     * @return The full path to use.\n-     */\n-    private String createFileFullPath() {\n-        String fullPath = url.toString();\n-        fullPath = fullPath.replaceFirst(\"://([^:]+)(?:.+)@\", \"://$1@\");\n-        return fullPath;\n-    }\n-\n-    /**\n-     * Creates the \"prettied-up\" filename to use.\n-     * \n-     * @return The base name of the file of this URL.\n-     */\n-    private String createFileName() {\n-        String fileName = url.getPath();\n-        if (fileName.startsWith(\"/%2F/\")) { // Absolute path\n-            fileName = fileName.substring(4);\n-        }\n-        else if (fileName.startsWith(\"/\")) { // All others\n-            fileName = fileName.substring(1);\n-        }\n-        return fileName;\n-    }\n-\n-    /**\n-     * Returns the last time this file was modified, or {@link TextEditorPane#LAST_MODIFIED_UNKNOWN} if this value\n-     * cannot be computed (such as for a remote file).\n-     * \n-     * @return The last time this file was modified. This will always be {@link TextEditorPane#LAST_MODIFIED_UNKNOWN}\n-     *         for URL's.\n-     */\n-    protected long getActualLastModified() {\n-        return TextEditorPane.LAST_MODIFIED_UNKNOWN;\n-    }\n-\n-    /**\n-     * Returns the full path of the URL. This will be stripped of sensitive information such as passwords.\n-     * \n-     * @return The full path of the URL.\n-     * @see #getFileName()\n-     */\n-    public String getFileFullPath() {\n-        return fileFullPath;\n-    }\n-\n-    /**\n-     * Returns the name of the file.\n-     * \n-     * @return The name of the file.\n-     * @see #getFileFullPath()\n-     */\n-    public String getFileName() {\n-        return fileName;\n-    }\n-\n-    /**\n-     * Opens an input stream for reading from this file.\n-     * \n-     * @return The input stream.\n-     * @throws IOException\n-     *             If the file does not exist, or some other IO error occurs.\n-     */\n-    protected InputStream getInputStream() throws IOException {\n-        return url.openStream();\n-    }\n-\n-    /**\n-     * Opens an output stream for writing this file.\n-     * \n-     * @return An output stream.\n-     * @throws IOException\n-     *             If an IO error occurs.\n-     */\n-    protected OutputStream getOutputStream() throws IOException {\n-        return url.openConnection().getOutputStream();\n-    }\n-\n-    /**\n-     * Returns whether this file location is a local file.\n-     * \n-     * @return Whether this is a local file.\n-     * @see #isLocalAndExists()\n-     */\n-    public boolean isLocal() {\n-        return \"file\".equalsIgnoreCase(url.getProtocol());\n-    }\n-\n-    /**\n-     * Returns whether this file location is a local file and already exists. This method always returns\n-     * <code>false</code> since we cannot check this value easily.\n-     * \n-     * @return <code>false</code> always.\n-     * @see #isLocal()\n-     */\n-    public boolean isLocalAndExists() {\n-        return false;\n+  /**\n+   * URL of the remote file.\n+   */\n+  private URL url;\n+\n+  /**\n+   * A prettied-up full path of the URL (password removed, etc.).\n+   */\n+  private String fileFullPath;\n+\n+  /**\n+   * A prettied-up filename (leading slash, and possibly \"<code>%2F</code>\", removed).\n+   */\n+  private String fileName;\n+\n+  /**\n+   * Constructor.\n+   *\n+   * @param url The URL of the file.\n+   */\n+  URLFileLocation(URL url) {\n+    this.url = url;\n+    fileFullPath = createFileFullPath();\n+    fileName = createFileName();\n+  }\n+\n+  /**\n+   * Creates a \"prettied-up\" URL to use. This will be stripped of sensitive information such as passwords.\n+   *\n+   * @return The full path to use.\n+   */\n+  private String createFileFullPath() {\n+    String fullPath = url.toString();\n+    fullPath = fullPath.replaceFirst(\"://([^:]+)(?:.+)@\", \"://$1@\");\n+    return fullPath;\n+  }\n+\n+  /**\n+   * Creates the \"prettied-up\" filename to use.\n+   *\n+   * @return The base name of the file of this URL.\n+   */\n+  private String createFileName() {\n+    String fileName = url.getPath();\n+    if (fileName.startsWith(\"/%2F/\")) { // Absolute path\n+      fileName = fileName.substring(4);\n+    } else if (fileName.startsWith(\"/\")) { // All others\n+      fileName = fileName.substring(1);\n     }\n+    return fileName;\n+  }\n+\n+  /**\n+   * Returns the last time this file was modified, or {@link TextEditorPane#LAST_MODIFIED_UNKNOWN} if this value\n+   * cannot be computed (such as for a remote file).\n+   *\n+   * @return The last time this file was modified. This will always be {@link TextEditorPane#LAST_MODIFIED_UNKNOWN}\n+   * for URL's.\n+   */\n+  protected long getActualLastModified() {\n+    return TextEditorPane.LAST_MODIFIED_UNKNOWN;\n+  }\n+\n+  /**\n+   * Returns the full path of the URL. This will be stripped of sensitive information such as passwords.\n+   *\n+   * @return The full path of the URL.\n+   * @see #getFileName()\n+   */\n+  public String getFileFullPath() {\n+    return fileFullPath;\n+  }\n+\n+  /**\n+   * Returns the name of the file.\n+   *\n+   * @return The name of the file.\n+   * @see #getFileFullPath()\n+   */\n+  public String getFileName() {\n+    return fileName;\n+  }\n+\n+  /**\n+   * Opens an input stream for reading from this file.\n+   *\n+   * @return The input stream.\n+   * @throws IOException If the file does not exist, or some other IO error occurs.\n+   */\n+  protected InputStream getInputStream() throws IOException {\n+    return url.openStream();\n+  }\n+\n+  /**\n+   * Opens an output stream for writing this file.\n+   *\n+   * @return An output stream.\n+   * @throws IOException If an IO error occurs.\n+   */\n+  protected OutputStream getOutputStream() throws IOException {\n+    return url.openConnection().getOutputStream();\n+  }\n+\n+  /**\n+   * Returns whether this file location is a local file.\n+   *\n+   * @return Whether this is a local file.\n+   * @see #isLocalAndExists()\n+   */\n+  public boolean isLocal() {\n+    return \"file\".equalsIgnoreCase(url.getProtocol());\n+  }\n+\n+  /**\n+   * Returns whether this file location is a local file and already exists. This method always returns\n+   * <code>false</code> since we cannot check this value easily.\n+   *\n+   * @return <code>false</code> always.\n+   * @see #isLocal()\n+   */\n+  public boolean isLocalAndExists() {\n+    return false;\n+  }\n \n }\n\\ No newline at end of file\n",
            "diff_size": 202
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/3/URLFileLocation.java\nindex 205ff930889..61157ac61c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/3/URLFileLocation.java\n@@ -22,6 +22,8 @@\n  */\n package org.fife.ui.rsyntaxtextarea;\n \n+\n+\n import java.io.InputStream;\n import java.io.IOException;\n import java.io.OutputStream;\n@@ -33,11 +35,14 @@ import java.net.URL;\n  * @author Robert Futrell\n  * @version 1.0\n  */\n+\n+\n class URLFileLocation extends FileLocation {\n \n     /**\n      * URL of the remote file.\n      */\n+\n     private URL url;\n \n     /**\n@@ -56,6 +61,7 @@ class URLFileLocation extends FileLocation {\n      * @param url\n      *            The URL of the file.\n      */\n+\n     URLFileLocation(URL url) {\n         this.url = url;\n         fileFullPath = createFileFullPath();\n@@ -67,6 +73,7 @@ class URLFileLocation extends FileLocation {\n      * \n      * @return The full path to use.\n      */\n+\n     private String createFileFullPath() {\n         String fullPath = url.toString();\n         fullPath = fullPath.replaceFirst(\"://([^:]+)(?:.+)@\", \"://$1@\");\n@@ -78,12 +85,12 @@ class URLFileLocation extends FileLocation {\n      * \n      * @return The base name of the file of this URL.\n      */\n+\n     private String createFileName() {\n         String fileName = url.getPath();\n         if (fileName.startsWith(\"/%2F/\")) { // Absolute path\n             fileName = fileName.substring(4);\n-        }\n-        else if (fileName.startsWith(\"/\")) { // All others\n+        } else if (fileName.startsWith(\"/\")) { // All others\n             fileName = fileName.substring(1);\n         }\n         return fileName;\n@@ -96,6 +103,8 @@ class URLFileLocation extends FileLocation {\n      * @return The last time this file was modified. This will always be {@link TextEditorPane#LAST_MODIFIED_UNKNOWN}\n      *         for URL's.\n      */\n+\n+\n     protected long getActualLastModified() {\n         return TextEditorPane.LAST_MODIFIED_UNKNOWN;\n     }\n@@ -106,6 +115,8 @@ class URLFileLocation extends FileLocation {\n      * @return The full path of the URL.\n      * @see #getFileName()\n      */\n+\n+\n     public String getFileFullPath() {\n         return fileFullPath;\n     }\n@@ -116,6 +127,8 @@ class URLFileLocation extends FileLocation {\n      * @return The name of the file.\n      * @see #getFileFullPath()\n      */\n+\n+\n     public String getFileName() {\n         return fileName;\n     }\n@@ -127,6 +140,8 @@ class URLFileLocation extends FileLocation {\n      * @throws IOException\n      *             If the file does not exist, or some other IO error occurs.\n      */\n+\n+\n     protected InputStream getInputStream() throws IOException {\n         return url.openStream();\n     }\n@@ -138,6 +153,8 @@ class URLFileLocation extends FileLocation {\n      * @throws IOException\n      *             If an IO error occurs.\n      */\n+\n+\n     protected OutputStream getOutputStream() throws IOException {\n         return url.openConnection().getOutputStream();\n     }\n@@ -148,6 +165,8 @@ class URLFileLocation extends FileLocation {\n      * @return Whether this is a local file.\n      * @see #isLocalAndExists()\n      */\n+\n+\n     public boolean isLocal() {\n         return \"file\".equalsIgnoreCase(url.getProtocol());\n     }\n@@ -159,8 +178,9 @@ class URLFileLocation extends FileLocation {\n      * @return <code>false</code> always.\n      * @see #isLocal()\n      */\n+\n+\n     public boolean isLocalAndExists() {\n         return false;\n     }\n-\n }\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/3/URLFileLocation.java\nindex 205ff930889..082b1a966c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/3/URLFileLocation.java\n@@ -82,8 +82,7 @@ class URLFileLocation extends FileLocation {\n         String fileName = url.getPath();\n         if (fileName.startsWith(\"/%2F/\")) { // Absolute path\n             fileName = fileName.substring(4);\n-        }\n-        else if (fileName.startsWith(\"/\")) { // All others\n+        } else if (fileName.startsWith(\"/\")) { // All others\n             fileName = fileName.substring(1);\n         }\n         return fileName;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/3/URLFileLocation.java\nindex 205ff930889..082b1a966c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/3/URLFileLocation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/3/URLFileLocation.java\n@@ -82,8 +82,7 @@ class URLFileLocation extends FileLocation {\n         String fileName = url.getPath();\n         if (fileName.startsWith(\"/%2F/\")) { // Absolute path\n             fileName = fileName.substring(4);\n-        }\n-        else if (fileName.startsWith(\"/\")) { // All others\n+        } else if (fileName.startsWith(\"/\")) { // All others\n             fileName = fileName.substring(1);\n         }\n         return fileName;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}