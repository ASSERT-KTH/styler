{
    "project_name": "neo4j-neo4j",
    "error_id": "1796",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1796/TextArrayType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1796/TextArrayType.java\nindex 3d518f5148c..2afd9c0aad6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1796/TextArrayType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1796/TextArrayType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.Arrays;\n@@ -47,132 +48,132 @@ class TextArrayType extends AbstractArrayType<String>\n     // long3 (isHighest)\n     // byteArrayArray\n \n-    TextArrayType( byte typeId )\n+    TextArrayType(byte typeId)\n     {\n-        super( ValueGroup.TEXT_ARRAY, typeId, ( o1, o2, i ) -> TextType.compare(\n-                        o1.byteArrayArray[i], o1.long0Array[i], o1.long2, o1.long3,\n-                        o2.byteArrayArray[i], o2.long0Array[i], o2.long2, o2.long3 ),\n-                ( k, i ) -> asValueRaw( k.byteArrayArray[i], k.long0Array[i] ),\n-                ( c, k, i ) -> TextType.put( c, k.byteArrayArray[i], k.long0Array[i], 0 ),\n-                null, String[]::new, ValueWriter.ArrayType.STRING );\n+        super(ValueGroup.TEXT_ARRAY, typeId, (o1, o2, i) -> TextType.compare(\n+          o1.byteArrayArray[i], o1.long0Array[i], o1.long2, o1.long3,\n+          o2.byteArrayArray[i], o2.long0Array[i], o2.long2, o2.long3),\n+          (k, i) -> asValueRaw(k.byteArrayArray[i], k.long0Array[i]),\n+          (c, k, i) -> TextType.put(c, k.byteArrayArray[i], k.long0Array[i], 0),\n+          null, String[]::new, ValueWriter.ArrayType.STRING);\n     }\n \n     @Override\n-    int valueSize( GenericKey state )\n+    int valueSize(GenericKey state)\n     {\n         int stringArraySize = 0;\n-        for ( int i = 0; i < state.arrayLength; i++ )\n+        for (int i = 0; i < state.arrayLength; i++)\n         {\n-            stringArraySize += TextType.textKeySize( state.long0Array[i] );\n+            stringArraySize += TextType.textKeySize(state.long0Array[i]);\n         }\n         return SIZE_ARRAY_LENGTH + stringArraySize;\n     }\n \n     @Override\n-    void copyValue( GenericKey to, GenericKey from, int length )\n+    void copyValue(GenericKey to, GenericKey from, int length)\n     {\n         to.long1 = FALSE;\n         to.long2 = from.long2;\n         to.long3 = from.long3;\n-        initializeArray( to, length, null );\n-        System.arraycopy( from.long0Array, 0, to.long0Array, 0, length );\n-        for ( int i = 0; i < length; i++ )\n+        initializeArray(to, length, null);\n+        System.arraycopy(from.long0Array, 0, to.long0Array, 0, length);\n+        for (int i = 0; i < length; i++)\n         {\n             short targetLength = (short) from.long0Array[i];\n-            to.byteArrayArray[i] = ensureBigEnough( to.byteArrayArray[i], targetLength );\n-            System.arraycopy( from.byteArrayArray[i], 0, to.byteArrayArray[i], 0, targetLength );\n+            to.byteArrayArray[i] = ensureBigEnough(to.byteArrayArray[i], targetLength);\n+            System.arraycopy(from.byteArrayArray[i], 0, to.byteArrayArray[i], 0, targetLength);\n         }\n     }\n \n     @Override\n-    void initializeArray( GenericKey key, int length, ValueWriter.ArrayType arrayType )\n+    void initializeArray(GenericKey key, int length, ValueWriter.ArrayType arrayType)\n     {\n-        key.long0Array = ensureBigEnough( key.long0Array, length );\n-        key.byteArrayArray = ensureBigEnough( key.byteArrayArray, length );\n+        key.long0Array = ensureBigEnough(key.long0Array, length);\n+        key.byteArrayArray = ensureBigEnough(key.byteArrayArray, length);\n         // long1 (bytesDereferenced) - Not needed because we never leak bytes from string array\n         // long2 (ignoreLength) - Not needed because kept on 'global' level for full array\n         // long3 (isHighest) - Not needed because kept on 'global' level for full array\n-        setCharType( key, arrayType == ValueWriter.ArrayType.CHAR );\n+        setCharType(key, arrayType == ValueWriter.ArrayType.CHAR);\n     }\n \n     @Override\n-    void putValue( PageCursor cursor, GenericKey state )\n+    void putValue(PageCursor cursor, GenericKey state)\n     {\n-        short typeMarker = (short) (isCharValueType( state.long2 ) ? CHAR_TYPE_LENGTH_MARKER : 0);\n-        putArrayHeader( cursor, (short) (toNonNegativeShortExact( state.arrayLength ) | typeMarker) );\n-        putArrayItems( cursor, state, arrayElementWriter );\n+        short typeMarker = (short) (isCharValueType(state.long2) ? CHAR_TYPE_LENGTH_MARKER : 0);\n+        putArrayHeader(cursor, (short) (toNonNegativeShortExact(state.arrayLength) | typeMarker));\n+        putArrayItems(cursor, state, arrayElementWriter);\n     }\n \n     @Override\n-    boolean readValue( PageCursor cursor, int size, GenericKey into )\n+    boolean readValue(PageCursor cursor, int size, GenericKey into)\n     {\n         short rawLength = cursor.getShort();\n         short length = (short) (rawLength & ~CHAR_TYPE_LENGTH_MARKER);\n-        if ( !setArrayLengthWhenReading( into, cursor, length ) )\n+        if (!setArrayLengthWhenReading(into, cursor, length))\n         {\n             return false;\n         }\n         boolean isCharType = (rawLength & CHAR_TYPE_LENGTH_MARKER) != 0;\n-        into.beginArray( into.arrayLength, isCharType ? ValueWriter.ArrayType.CHAR : ValueWriter.ArrayType.STRING );\n-        for ( int i = 0; i < into.arrayLength; i++ )\n+        into.beginArray(into.arrayLength, isCharType ? ValueWriter.ArrayType.CHAR : ValueWriter.ArrayType.STRING);\n+        for (int i = 0; i < into.arrayLength; i++)\n         {\n             short bytesLength = cursor.getShort();\n-            if ( bytesLength < 0 || bytesLength > size )\n+            if (bytesLength < 0 || bytesLength > size)\n             {\n-                setCursorException( cursor, \"non-valid bytes length, \" + bytesLength );\n+                setCursorException(cursor, \"non-valid bytes length, \" + bytesLength);\n                 return false;\n             }\n \n-            into.byteArrayArray[i] = ensureBigEnough( into.byteArrayArray[i], bytesLength );\n+            into.byteArrayArray[i] = ensureBigEnough(into.byteArrayArray[i], bytesLength);\n             into.long0Array[i] = bytesLength;\n-            cursor.getBytes( into.byteArrayArray[i], 0, bytesLength );\n+            cursor.getBytes(into.byteArrayArray[i], 0, bytesLength);\n         }\n         into.endArray();\n         return true;\n     }\n \n     @Override\n-    Value asValue( GenericKey state )\n+    Value asValue(GenericKey state)\n     {\n         // no need to set bytes dereferenced because byte[][] owned by this class will be deserialized into String objects.\n-        if ( isCharValueType( state.long2 ) )\n+        if (isCharValueType(state.long2))\n         {\n             // this is a char[]\n-            return charArrayAsValue( state );\n+            return charArrayAsValue(state);\n         }\n         // this is a String[]\n-        return super.asValue( state );\n+        return super.asValue(state);\n     }\n \n-    private Value charArrayAsValue( GenericKey state )\n+    private Value charArrayAsValue(GenericKey state)\n     {\n         char[] chars = new char[state.arrayLength];\n-        for ( int i = 0; i < state.arrayLength; i++ )\n+        for (int i = 0; i < state.arrayLength; i++)\n         {\n-            chars[i] = textAsChar( state.byteArrayArray[i] );\n+            chars[i] = textAsChar(state.byteArrayArray[i]);\n         }\n-        return Values.charArray( chars );\n+        return Values.charArray(chars);\n     }\n \n-    static String asValueRaw( byte[] byteArray, long long0 )\n+    static String asValueRaw(byte[] byteArray, long long0)\n     {\n-        return byteArray == null ? null : UTF8.decode( byteArray, 0, (int) long0 );\n+        return byteArray == null ? null : UTF8.decode(byteArray, 0, (int) long0);\n     }\n \n-    void write( GenericKey state, int offset, byte[] bytes )\n+    void write(GenericKey state, int offset, byte[] bytes)\n     {\n         state.byteArrayArray[offset] = bytes;\n         state.long0Array[offset] = bytes.length;\n     }\n \n     @Override\n-    protected void addTypeSpecificDetails( StringJoiner joiner, GenericKey state )\n+    protected void addTypeSpecificDetails(StringJoiner joiner, GenericKey state)\n     {\n-        joiner.add( \"long1=\" + state.long1 );\n-        joiner.add( \"long2=\" + state.long2 );\n-        joiner.add( \"long3=\" + state.long3 );\n-        joiner.add( \"long0Array=\" + Arrays.toString( state.long0Array ) );\n-        joiner.add( \"byteArrayArray=\" + Arrays.deepToString( state.byteArrayArray ) );\n-        super.addTypeSpecificDetails( joiner, state );\n+        joiner.add(\"long1=\" + state.long1);\n+        joiner.add(\"long2=\" + state.long2);\n+        joiner.add(\"long3=\" + state.long3);\n+        joiner.add(\"long0Array=\" + Arrays.toString(state.long0Array));\n+        joiner.add(\"byteArrayArray=\" + Arrays.deepToString(state.byteArrayArray));\n+        super.addTypeSpecificDetails(joiner, state);\n     }\n }\n",
            "diff_size": 51
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}