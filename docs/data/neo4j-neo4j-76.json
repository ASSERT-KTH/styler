{
    "project_name": "neo4j-neo4j",
    "error_id": "76",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/76/DatabaseEntityCounters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/76/DatabaseEntityCounters.java\nindex db2fe62da10..38a635803f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/76/DatabaseEntityCounters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/76/DatabaseEntityCounters.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.stats;\n \n import org.neo4j.counts.CountsAccessor;\n@@ -32,7 +33,7 @@ public class DatabaseEntityCounters implements StoreEntityCounters\n     private final IdGeneratorFactory idGeneratorFactory;\n     private final CountsAccessor countsAccessor;\n \n-    public DatabaseEntityCounters( IdGeneratorFactory idGeneratorFactory, CountsAccessor countsAccessor )\n+    public DatabaseEntityCounters(IdGeneratorFactory idGeneratorFactory, CountsAccessor countsAccessor)\n     {\n         this.idGeneratorFactory = idGeneratorFactory;\n         this.countsAccessor = countsAccessor;\n@@ -41,36 +42,36 @@ public class DatabaseEntityCounters implements StoreEntityCounters\n     @Override\n     public long nodes()\n     {\n-        return idGeneratorFactory.get( IdType.NODE ).getNumberOfIdsInUse();\n+        return idGeneratorFactory.get(IdType.NODE).getNumberOfIdsInUse();\n     }\n \n     @Override\n     public long relationships()\n     {\n-        return idGeneratorFactory.get( IdType.RELATIONSHIP ).getNumberOfIdsInUse();\n+        return idGeneratorFactory.get(IdType.RELATIONSHIP).getNumberOfIdsInUse();\n     }\n \n     @Override\n     public long properties()\n     {\n-        return idGeneratorFactory.get( IdType.PROPERTY ).getNumberOfIdsInUse();\n+        return idGeneratorFactory.get(IdType.PROPERTY).getNumberOfIdsInUse();\n     }\n \n     @Override\n     public long relationshipTypes()\n     {\n-        return idGeneratorFactory.get( IdType.RELATIONSHIP_TYPE_TOKEN ).getNumberOfIdsInUse();\n+        return idGeneratorFactory.get(IdType.RELATIONSHIP_TYPE_TOKEN).getNumberOfIdsInUse();\n     }\n \n     @Override\n-    public long allNodesCountStore( PageCursorTracer cursorTracer )\n+    public long allNodesCountStore(PageCursorTracer cursorTracer)\n     {\n-        return countsAccessor.nodeCount( ANY_LABEL, cursorTracer );\n+        return countsAccessor.nodeCount(ANY_LABEL, cursorTracer);\n     }\n \n     @Override\n-    public long allRelationshipsCountStore( PageCursorTracer cursorTracer )\n+    public long allRelationshipsCountStore(PageCursorTracer cursorTracer)\n     {\n-        return countsAccessor.relationshipCount( ANY_LABEL, ANY_RELATIONSHIP_TYPE, ANY_LABEL, cursorTracer );\n+        return countsAccessor.relationshipCount(ANY_LABEL, ANY_RELATIONSHIP_TYPE, ANY_LABEL, cursorTracer);\n     }\n }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}