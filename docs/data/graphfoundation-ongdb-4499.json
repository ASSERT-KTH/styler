{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4499",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4499/LogEntryParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4499/LogEntryParser.java\nindex c169414269b..3e098306f33 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4499/LogEntryParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4499/LogEntryParser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.entry;\n \n import java.io.IOException;\n@@ -30,32 +31,32 @@ import org.neo4j.storageengine.api.CommandReaderFactory;\n  * Reads and parses the next {@link LogEntry} from {@link ReadableClosableChannel}, given the {@link LogEntryVersion}.\n  *\n  * @param <T> Specific type of {@link LogEntry} returned from\n- * {@link #parse(LogEntryVersion, ReadableClosableChannel, LogPositionMarker, CommandReaderFactory)}.\n+ *            {@link #parse(LogEntryVersion, ReadableClosableChannel, LogPositionMarker, CommandReaderFactory)}.\n  */\n public interface LogEntryParser<T extends LogEntry>\n {\n-    /**\n-     * Parses the next {@link LogEntry} read from the {@code channel}.\n-     *\n-     * @param version {@link LogEntryVersion} this log entry is determined to be of.\n-     * @param channel {@link ReadableClosableChannel} to read the data from.\n-     * @param marker {@link LogPositionMarker} marking the position in the {@code channel} that is the\n-     * start of this entry.\n-     * @param commandReaderFactory {@link CommandReaderFactory} for retrieving a {@link CommandReader}\n-     * for reading commands from, for log entry types that need that.\n-     * @return the next {@link LogEntry} read and parsed from the {@code channel}.\n-     * @throws IOException I/O error from channel or if data was read past the end of the channel.\n-     */\n-    T parse( LogEntryVersion version, ReadableClosableChannel channel,\n-             LogPositionMarker marker, CommandReaderFactory commandReaderFactory ) throws IOException;\n+  /**\n+   * Parses the next {@link LogEntry} read from the {@code channel}.\n+   *\n+   * @param version              {@link LogEntryVersion} this log entry is determined to be of.\n+   * @param channel              {@link ReadableClosableChannel} to read the data from.\n+   * @param marker               {@link LogPositionMarker} marking the position in the {@code channel} that is the\n+   *                             start of this entry.\n+   * @param commandReaderFactory {@link CommandReaderFactory} for retrieving a {@link CommandReader}\n+   *                             for reading commands from, for log entry types that need that.\n+   * @return the next {@link LogEntry} read and parsed from the {@code channel}.\n+   * @throws IOException I/O error from channel or if data was read past the end of the channel.\n+   */\n+  T parse(LogEntryVersion version, ReadableClosableChannel channel,\n+          LogPositionMarker marker, CommandReaderFactory commandReaderFactory) throws IOException;\n \n-    /**\n-     * @return code representing the type of log entry.\n-     */\n-    byte byteCode();\n+  /**\n+   * @return code representing the type of log entry.\n+   */\n+  byte byteCode();\n \n-    /**\n-     * @return whether or not entries parsed by this parser should be skipped, like an empty entry.\n-     */\n-    boolean skip();\n+  /**\n+   * @return whether or not entries parsed by this parser should be skipped, like an empty entry.\n+   */\n+  boolean skip();\n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4499/LogEntryParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4499/LogEntryParser.java\nindex c169414269b..17726ff700e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4499/LogEntryParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4499/LogEntryParser.java\n@@ -46,10 +46,9 @@ public interface LogEntryParser<T extends LogEntry>\n      * @return the next {@link LogEntry} read and parsed from the {@code channel}.\n      * @throws IOException I/O error from channel or if data was read past the end of the channel.\n      */\n-    T parse( LogEntryVersion version, ReadableClosableChannel channel,\n-             LogPositionMarker marker, CommandReaderFactory commandReaderFactory ) throws IOException;\n+    T parse( LogEntryVersion version, ReadableClosableChannel channel, LogPositionMarker marker, CommandReaderFactory commandReaderFactory ) throws IOException;\n \n-    /**\n+/**\n      * @return code representing the type of log entry.\n      */\n     byte byteCode();\n@@ -58,4 +57,4 @@ public interface LogEntryParser<T extends LogEntry>\n      * @return whether or not entries parsed by this parser should be skipped, like an empty entry.\n      */\n     boolean skip();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}