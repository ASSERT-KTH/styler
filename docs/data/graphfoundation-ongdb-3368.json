{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3368",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3368/StreamFilesRecursive.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3368/StreamFilesRecursive.java\nindex 4e61f3b7810..0e1a87b9f3b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3368/StreamFilesRecursive.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3368/StreamFilesRecursive.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.fs;\n \n import java.io.File;\n@@ -28,57 +29,56 @@ import static java.util.stream.Collectors.toList;\n \n public class StreamFilesRecursive\n {\n-    private StreamFilesRecursive()\n-    {\n-        //This is a helper class, do not instantiate it.\n-    }\n+  private StreamFilesRecursive()\n+  {\n+    //This is a helper class, do not instantiate it.\n+  }\n \n-    /**\n-     * Static implementation of {@link FileSystemAbstraction#streamFilesRecursive(File)} that does not require\n-     * any external state, other than what is presented through the given {@link FileSystemAbstraction}.\n-     *\n-     * Return a stream of {@link FileHandle file handles} for every file in the given directory, and its\n-     * sub-directories.\n-     * <p>\n-     * Alternatively, if the {@link File} given as an argument refers to a file instead of a directory, then a stream\n-     * will be returned with a file handle for just that file.\n-     * <p>\n-     * The stream is based on a snapshot of the file tree, so changes made to the tree using the returned file handles\n-     * will not be reflected in the stream.\n-     * <p>\n-     * No directories will be returned. Only files. If a file handle ends up leaving a directory empty through a\n-     * rename or a delete, then the empty directory will automatically be deleted as well.\n-     * Likewise, if a file is moved to a path where not all of the directories in the path exists, then those missing\n-     * directories will be created prior to the file rename.\n-     *\n-     * @param directory The base directory to start streaming files from, or the specific individual file to stream.\n-     * @param fs The {@link FileSystemAbstraction} to use for manipulating files.\n-     * @return A {@link Stream} of {@link FileHandle}s\n-     * @throws IOException If an I/O error occurs, possibly with the canonicalisation of the paths.\n-     */\n-    public static Stream<FileHandle> streamFilesRecursive( File directory, FileSystemAbstraction fs ) throws IOException\n-    {\n-        File canonicalizedDirectory = directory.getCanonicalFile();\n-        // We grab a snapshot of the file tree to avoid seeing the same file twice or more due to renames.\n-        List<File> snapshot = streamFilesRecursiveInner( canonicalizedDirectory, fs ).collect( toList() );\n-        return snapshot.stream().map( f -> new WrappingFileHandle( f, canonicalizedDirectory, fs ) );\n-    }\n+  /**\n+   * Static implementation of {@link FileSystemAbstraction#streamFilesRecursive(File)} that does not require\n+   * any external state, other than what is presented through the given {@link FileSystemAbstraction}.\n+   * <p>\n+   * Return a stream of {@link FileHandle file handles} for every file in the given directory, and its\n+   * sub-directories.\n+   * <p>\n+   * Alternatively, if the {@link File} given as an argument refers to a file instead of a directory, then a stream\n+   * will be returned with a file handle for just that file.\n+   * <p>\n+   * The stream is based on a snapshot of the file tree, so changes made to the tree using the returned file handles\n+   * will not be reflected in the stream.\n+   * <p>\n+   * No directories will be returned. Only files. If a file handle ends up leaving a directory empty through a\n+   * rename or a delete, then the empty directory will automatically be deleted as well.\n+   * Likewise, if a file is moved to a path where not all of the directories in the path exists, then those missing\n+   * directories will be created prior to the file rename.\n+   *\n+   * @param directory The base directory to start streaming files from, or the specific individual file to stream.\n+   * @param fs        The {@link FileSystemAbstraction} to use for manipulating files.\n+   * @return A {@link Stream} of {@link FileHandle}s\n+   * @throws IOException If an I/O error occurs, possibly with the canonicalisation of the paths.\n+   */\n+  public static Stream<FileHandle> streamFilesRecursive(File directory, FileSystemAbstraction fs) throws IOException\n+  {\n+    File canonicalizedDirectory = directory.getCanonicalFile();\n+    // We grab a snapshot of the file tree to avoid seeing the same file twice or more due to renames.\n+    List<File> snapshot = streamFilesRecursiveInner(canonicalizedDirectory, fs).collect(toList());\n+    return snapshot.stream().map(f -> new WrappingFileHandle(f, canonicalizedDirectory, fs));\n+  }\n \n-    private static Stream<File> streamFilesRecursiveInner( File directory, FileSystemAbstraction fs )\n+  private static Stream<File> streamFilesRecursiveInner(File directory, FileSystemAbstraction fs)\n+  {\n+    File[] files = fs.listFiles(directory);\n+    if (files == null)\n+    {\n+      if (!fs.fileExists(directory))\n+      {\n+        return Stream.empty();\n+      }\n+      return Stream.of(directory);\n+    } else\n     {\n-        File[] files = fs.listFiles( directory );\n-        if ( files == null )\n-        {\n-            if ( !fs.fileExists( directory ) )\n-            {\n-                return Stream.empty();\n-            }\n-            return Stream.of( directory );\n-        }\n-        else\n-        {\n-            return Stream.of( files )\n-                    .flatMap( f -> fs.isDirectory( f ) ? streamFilesRecursiveInner( f, fs ) : Stream.of( f ) );\n-        }\n+      return Stream.of(files)\n+          .flatMap(f -> fs.isDirectory(f) ? streamFilesRecursiveInner(f, fs) : Stream.of(f));\n     }\n+  }\n }\n",
            "diff_size": 61
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3368/StreamFilesRecursive.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3368/StreamFilesRecursive.java\nindex 4e61f3b7810..d58ac58266d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3368/StreamFilesRecursive.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3368/StreamFilesRecursive.java\n@@ -73,12 +73,12 @@ public class StreamFilesRecursive\n             {\n                 return Stream.empty();\n             }\n-            return Stream.of( directory );\n+\n+return Stream.of( directory );\n         }\n         else\n         {\n-            return Stream.of( files )\n-                    .flatMap( f -> fs.isDirectory( f ) ? streamFilesRecursiveInner( f, fs ) : Stream.of( f ) );\n-        }\n+            return Stream.of( files ).flatMap( f -> fs.isDirectory( f ) ? streamFilesRecursiveInner( f, fs ) : Stream.of( f ) );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}