{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "972",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.admingui.servlet;\n\nimport gov.hhs.fha.nhinc.admingui.util.GUIConstants;\nimport gov.hhs.fha.nhinc.admingui.util.HelperUtil;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/972/CustomServletListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/972/CustomServletListener.java\nindex ad56b555e06..0129c8ffb49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/972/CustomServletListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/972/CustomServletListener.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.servlet;\n \n import gov.hhs.fha.nhinc.admingui.util.GUIConstants;\n@@ -41,23 +42,23 @@ import org.slf4j.LoggerFactory;\n  * @author mpnguyen\n  */\n public class CustomServletListener extends StartupServletContextListener {\n-    private static final Logger LOG = LoggerFactory.getLogger(CustomServletListener.class);\n+  private static final Logger LOG = LoggerFactory.getLogger(CustomServletListener.class);\n \n-    @Override\n-    public void contextInitialized(ServletContextEvent servletContextEvent) {\n-        LOG.trace(\"Calling Custom contextInitialized\");\n-        String secret = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_SECRET, null);\n-        String algorithm = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_ALGORITHM, null);\n-        String paddingMode = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_ALGORITHM_PADDING, null);\n-        String ivHash = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_ALGORITHM_IV, null);\n-        ServletContext context = servletContextEvent.getServletContext();\n-        if (secret != null && algorithm != null && paddingMode != null && ivHash != null) {\n-            context.setInitParameter(StateUtils.INIT_SECRET, secret);\n-            context.setInitParameter(StateUtils.INIT_ALGORITHM, algorithm);\n-            context.setInitParameter(StateUtils.INIT_ALGORITHM_PARAM, paddingMode);\n-            context.setInitParameter(StateUtils.INIT_ALGORITHM_IV, ivHash);\n-        }\n-        super.contextInitialized(servletContextEvent);\n+  @Override\n+  public void contextInitialized(ServletContextEvent servletContextEvent) {\n+    LOG.trace(\"Calling Custom contextInitialized\");\n+    String secret = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_SECRET, null);\n+    String algorithm = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_ALGORITHM, null);\n+    String paddingMode = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_ALGORITHM_PADDING, null);\n+    String ivHash = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_ALGORITHM_IV, null);\n+    ServletContext context = servletContextEvent.getServletContext();\n+    if (secret != null && algorithm != null && paddingMode != null && ivHash != null) {\n+      context.setInitParameter(StateUtils.INIT_SECRET, secret);\n+      context.setInitParameter(StateUtils.INIT_ALGORITHM, algorithm);\n+      context.setInitParameter(StateUtils.INIT_ALGORITHM_PARAM, paddingMode);\n+      context.setInitParameter(StateUtils.INIT_ALGORITHM_IV, ivHash);\n     }\n+    super.contextInitialized(servletContextEvent);\n+  }\n \n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/972/CustomServletListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/972/CustomServletListener.java\nindex ad56b555e06..02fd2a775a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/972/CustomServletListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/972/CustomServletListener.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.servlet;\n \n import gov.hhs.fha.nhinc.admingui.util.GUIConstants;\n@@ -60,4 +61,4 @@ public class CustomServletListener extends StartupServletContextListener {\n         super.contextInitialized(servletContextEvent);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "59",
                    "column": "48",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/972/CustomServletListener.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/972/CustomServletListener.java\nindex ad56b555e06..f368771176e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/972/CustomServletListener.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/972/CustomServletListener.java\n@@ -40,9 +40,14 @@ import org.slf4j.LoggerFactory;\n  *\n  * @author mpnguyen\n  */\n-public class CustomServletListener extends StartupServletContextListener {\n+\n+\n+public class CustomServletListener extends\n+    StartupServletContextListener {\n+\n     private static final Logger LOG = LoggerFactory.getLogger(CustomServletListener.class);\n \n+\n     @Override\n     public void contextInitialized(ServletContextEvent servletContextEvent) {\n         LOG.trace(\"Calling Custom contextInitialized\");\n@@ -51,7 +56,7 @@ public class CustomServletListener extends StartupServletContextListener {\n         String paddingMode = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_ALGORITHM_PADDING, null);\n         String ivHash = HelperUtil.readPropertyAdminGui(GUIConstants.JSF_ALGORITHM_IV, null);\n         ServletContext context = servletContextEvent.getServletContext();\n-        if (secret != null && algorithm != null && paddingMode != null && ivHash != null) {\n+        if (secret != null && algorithm != null&& paddingMode != null && ivHash != null) {\n             context.setInitParameter(StateUtils.INIT_SECRET, secret);\n             context.setInitParameter(StateUtils.INIT_ALGORITHM, algorithm);\n             context.setInitParameter(StateUtils.INIT_ALGORITHM_PARAM, paddingMode);\n@@ -60,4 +65,4 @@ public class CustomServletListener extends StartupServletContextListener {\n         super.contextInitialized(servletContextEvent);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}