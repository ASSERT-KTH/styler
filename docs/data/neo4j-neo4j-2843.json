{
    "project_name": "neo4j-neo4j",
    "error_id": "2843",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "66",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "69",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2843/AbstractExtensions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2843/AbstractExtensions.java\nindex aeedc374b6e..2e0e03eabd3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2843/AbstractExtensions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2843/AbstractExtensions.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.extension;\n \n import java.lang.reflect.ParameterizedType;\n@@ -42,34 +43,32 @@ public abstract class AbstractExtensions extends DependencyResolver.Adapter impl\n     private final LifeSupport life = new LifeSupport();\n     private final ExtensionFailureStrategy extensionFailureStrategy;\n \n-    AbstractExtensions( ExtensionContext extensionContext, Iterable<ExtensionFactory<?>> extensionFactories, Dependencies dependencies,\n-            ExtensionFailureStrategy extensionFailureStrategy, ExtensionType extensionType )\n+    AbstractExtensions(ExtensionContext extensionContext, Iterable<ExtensionFactory<?>> extensionFactories, Dependencies dependencies,\n+                       ExtensionFailureStrategy extensionFailureStrategy, ExtensionType extensionType)\n     {\n         this.extensionContext = extensionContext;\n         this.extensionFailureStrategy = extensionFailureStrategy;\n-        this.extensionFactories = stream( extensionFactories ).filter( e -> e.getExtensionType() == extensionType ).collect( toList() );\n+        this.extensionFactories = stream(extensionFactories).filter(e -> e.getExtensionType() == extensionType).collect(toList());\n         this.dependencies = dependencies;\n     }\n \n     @Override\n     public void init()\n     {\n-        for ( ExtensionFactory<?> extensionFactory : extensionFactories )\n+        for (ExtensionFactory<?> extensionFactory : extensionFactories)\n         {\n             try\n             {\n-                Object extensionDependencies = getExtensionDependencies( extensionFactory );\n-                Lifecycle dependency = newInstance( extensionContext, extensionFactory, extensionDependencies );\n-                Objects.requireNonNull( dependency, extensionFactory + \" returned a null extension.\" );\n-                life.add( dependencies.satisfyDependency( dependency ) );\n-            }\n-            catch ( UnsatisfiedDependencyException exception )\n+                Object extensionDependencies = getExtensionDependencies(extensionFactory);\n+                Lifecycle dependency = newInstance(extensionContext, extensionFactory, extensionDependencies);\n+                Objects.requireNonNull(dependency, extensionFactory + \" returned a null extension.\");\n+                life.add(dependencies.satisfyDependency(dependency));\n+            } catch (UnsatisfiedDependencyException exception)\n             {\n-                extensionFailureStrategy.handle( extensionFactory, exception );\n-            }\n-            catch ( Throwable throwable )\n+                extensionFailureStrategy.handle(extensionFactory, exception);\n+            } catch (Throwable throwable)\n             {\n-                extensionFailureStrategy.handle( extensionFactory, throwable );\n+                extensionFailureStrategy.handle(extensionFactory, throwable);\n             }\n         }\n \n@@ -95,28 +94,28 @@ public abstract class AbstractExtensions extends DependencyResolver.Adapter impl\n     }\n \n     @Override\n-    public <T> T resolveDependency( Class<T> type, SelectionStrategy selector )\n+    public <T> T resolveDependency(Class<T> type, SelectionStrategy selector)\n     {\n-        Iterable<T> typeDependencies = resolveTypeDependencies( type );\n-        return selector.select( type, typeDependencies );\n+        Iterable<T> typeDependencies = resolveTypeDependencies(type);\n+        return selector.select(type, typeDependencies);\n     }\n \n     @Override\n-    public <T> Iterable<T> resolveTypeDependencies( Class<T> type )\n+    public <T> Iterable<T> resolveTypeDependencies(Class<T> type)\n     {\n-        return life.getLifecycleInstances().stream().filter( type::isInstance ).map( type::cast ).collect( toList() );\n+        return life.getLifecycleInstances().stream().filter(type::isInstance).map(type::cast).collect(toList());\n     }\n \n     @Override\n-    public boolean containsDependency( Class<?> type )\n+    public boolean containsDependency(Class<?> type)\n     {\n-        return life.getLifecycleInstances().stream().anyMatch( type::isInstance );\n+        return life.getLifecycleInstances().stream().anyMatch(type::isInstance);\n     }\n \n-    private Object getExtensionDependencies( ExtensionFactory<?> factory )\n+    private Object getExtensionDependencies(ExtensionFactory<?> factory)\n     {\n         Class<?> factoryType = factory.getClass();\n-        while ( !(factoryType.getGenericSuperclass() instanceof ParameterizedType) )\n+        while (!(factoryType.getGenericSuperclass() instanceof ParameterizedType))\n         {\n             factoryType = factoryType.getSuperclass();\n         }\n@@ -124,9 +123,9 @@ public abstract class AbstractExtensions extends DependencyResolver.Adapter impl\n         return DependenciesProxy.dependencies(dependencies, configurationClass);\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private static <T> Lifecycle newInstance( ExtensionContext extensionContext, ExtensionFactory<T> factory, Object dependencies )\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T> Lifecycle newInstance(ExtensionContext extensionContext, ExtensionFactory<T> factory, Object dependencies)\n     {\n-        return factory.newInstance( extensionContext, (T)dependencies );\n+        return factory.newInstance(extensionContext, (T) dependencies);\n     }\n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}