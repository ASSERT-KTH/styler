{
    "project_name": "wso2-attic-commons",
    "error_id": "195",
    "information": {
        "errors": [
            {
                "line": "47",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 128).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    protected BpelRuntimeContext getBpelRuntimeContext() {\n        BpelRuntimeContext nativeApi = (BpelRuntimeContext) JacobVPU.activeJacobThread().getExtension(BpelRuntimeContext.class);\n        assert nativeApi != null;\n        return nativeApi;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/195/BpelJacobRunnable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/195/BpelJacobRunnable.java\nindex c92146a901a..364b0842d68 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/195/BpelJacobRunnable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/195/BpelJacobRunnable.java\n@@ -44,7 +44,7 @@ public abstract class BpelJacobRunnable extends JacobRunnable {\n     private static final Log __log = LogFactory.getLog(BpelJacobRunnable.class);\n \n     protected BpelRuntimeContext getBpelRuntimeContext() {\n-        BpelRuntimeContext nativeApi = (BpelRuntimeContext) JacobVPU.activeJacobThread().getExtension(BpelRuntimeContext.class);\n+BpelRuntimeContext nativeApi = (BpelRuntimeContext) JacobVPU.activeJacobThread().getExtension(BpelRuntimeContext.class);\n         assert nativeApi != null;\n         return nativeApi;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/195/BpelJacobRunnable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/195/BpelJacobRunnable.java\nindex c92146a901a..4fb82795f69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/195/BpelJacobRunnable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/195/BpelJacobRunnable.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.bpel.runtime;\n \n import org.apache.commons.logging.Log;\n@@ -36,73 +37,76 @@ import javax.xml.namespace.QName;\n  * Base class extended by all BPEL-related abstractions. Provides methods for\n  * manipulating the BPEL database, creating faults, and accessing the native\n  * facilities.\n- *\n+ * <p>\n  * Created on Jan 12, 2004 at 5:41:27 PM.\n+ *\n  * @author Maciej Szefler\n  */\n public abstract class BpelJacobRunnable extends JacobRunnable {\n-    private static final Log __log = LogFactory.getLog(BpelJacobRunnable.class);\n+  private static final Log __log = LogFactory.getLog(BpelJacobRunnable.class);\n \n-    protected BpelRuntimeContext getBpelRuntimeContext() {\n-        BpelRuntimeContext nativeApi = (BpelRuntimeContext) JacobVPU.activeJacobThread().getExtension(BpelRuntimeContext.class);\n-        assert nativeApi != null;\n-        return nativeApi;\n-    }\n+  protected BpelRuntimeContext getBpelRuntimeContext() {\n+    BpelRuntimeContext nativeApi =\n+      (BpelRuntimeContext) JacobVPU.activeJacobThread().getExtension(BpelRuntimeContext.class);\n+    assert nativeApi != null;\n+    return nativeApi;\n+  }\n \n-    protected Log log() {\n-        return __log;\n-    }\n+  protected Log log() {\n+    return __log;\n+  }\n \n-    protected final FaultData createFault(QName fault, Element faultMsg, OVarType faultType, OBase location){\n-        return new FaultData(fault, faultMsg, faultType, location);\n-    }\n+  protected final FaultData createFault(QName fault, Element faultMsg, OVarType faultType, OBase location) {\n+    return new FaultData(fault, faultMsg, faultType, location);\n+  }\n \n-    protected final FaultData createFault(QName fault, OBase location, String faultExplanation) {\n-        return new FaultData(fault, location,faultExplanation);\n-    }\n+  protected final FaultData createFault(QName fault, OBase location, String faultExplanation) {\n+    return new FaultData(fault, location, faultExplanation);\n+  }\n \n-    protected final FaultData createFault(QName fault, OBase location){\n-        return createFault(fault, location, null);\n-    }\n+  protected final FaultData createFault(QName fault, OBase location) {\n+    return createFault(fault, location, null);\n+  }\n \n \n-    protected JacobRunnable createChild(ActivityInfo childInfo, ScopeFrame scopeFrame, LinkFrame linkFrame) {\n-        return new ACTIVITYGUARD(childInfo, scopeFrame, linkFrame);\n-    }\n+  protected JacobRunnable createChild(ActivityInfo childInfo, ScopeFrame scopeFrame, LinkFrame linkFrame) {\n+    return new ACTIVITYGUARD(childInfo, scopeFrame, linkFrame);\n+  }\n \n-    protected void initializeCorrelation(CorrelationSetInstance cset, VariableInstance variable)\n-            throws FaultException {\n-        if (__log.isDebugEnabled()) {\n-          __log.debug(\"Initializing correlation set \" + cset.declaration.name);\n-        }\n-        // if correlation set is already initialized,\n-        // then skip\n-        if (getBpelRuntimeContext().isCorrelationInitialized(cset)) {\n-          // if already set, we ignore\n-            if (__log.isDebugEnabled()) {\n-                __log.debug(\"OCorrelation set \" + cset + \" is already set: ignoring\");\n-            }\n-\n-            return;\n-        }\n-\n-        String[] propNames = new String[cset.declaration.properties.size()];\n-        String[] propValues = new String[cset.declaration.properties.size()];\n-\n-        for (int i = 0; i < cset.declaration.properties.size(); ++i) {\n-            OProcess.OProperty property = cset.declaration.properties.get(i);\n-            propValues[i] = getBpelRuntimeContext().readProperty(variable, property);\n-            propNames[i] = property.name.toString();\n-            if (__log.isDebugEnabled())\n-              __log.debug(\"Setting correlation property \" + propNames[i] + \"=\" + propValues[i]);\n-        }\n-\n-        CorrelationKey ckeyVal = new CorrelationKey(cset.declaration.name, propValues);\n-        getBpelRuntimeContext().writeCorrelation(cset,ckeyVal);\n+  protected void initializeCorrelation(CorrelationSetInstance cset, VariableInstance variable)\n+    throws FaultException {\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(\"Initializing correlation set \" + cset.declaration.name);\n+    }\n+    // if correlation set is already initialized,\n+    // then skip\n+    if (getBpelRuntimeContext().isCorrelationInitialized(cset)) {\n+      // if already set, we ignore\n+      if (__log.isDebugEnabled()) {\n+        __log.debug(\"OCorrelation set \" + cset + \" is already set: ignoring\");\n+      }\n+\n+      return;\n     }\n \n-    protected long genMonotonic() {\n-        return getBpelRuntimeContext().genId();\n+    String[] propNames = new String[cset.declaration.properties.size()];\n+    String[] propValues = new String[cset.declaration.properties.size()];\n+\n+    for (int i = 0; i < cset.declaration.properties.size(); ++i) {\n+      OProcess.OProperty property = cset.declaration.properties.get(i);\n+      propValues[i] = getBpelRuntimeContext().readProperty(variable, property);\n+      propNames[i] = property.name.toString();\n+      if (__log.isDebugEnabled()) {\n+        __log.debug(\"Setting correlation property \" + propNames[i] + \"=\" + propValues[i]);\n+      }\n     }\n \n+    CorrelationKey ckeyVal = new CorrelationKey(cset.declaration.name, propValues);\n+    getBpelRuntimeContext().writeCorrelation(cset, ckeyVal);\n+  }\n+\n+  protected long genMonotonic() {\n+    return getBpelRuntimeContext().genId();\n+  }\n+\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/195/BpelJacobRunnable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/195/BpelJacobRunnable.java\nindex c92146a901a..364b0842d68 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/195/BpelJacobRunnable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/195/BpelJacobRunnable.java\n@@ -44,7 +44,7 @@ public abstract class BpelJacobRunnable extends JacobRunnable {\n     private static final Log __log = LogFactory.getLog(BpelJacobRunnable.class);\n \n     protected BpelRuntimeContext getBpelRuntimeContext() {\n-        BpelRuntimeContext nativeApi = (BpelRuntimeContext) JacobVPU.activeJacobThread().getExtension(BpelRuntimeContext.class);\n+BpelRuntimeContext nativeApi = (BpelRuntimeContext) JacobVPU.activeJacobThread().getExtension(BpelRuntimeContext.class);\n         assert nativeApi != null;\n         return nativeApi;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/195/BpelJacobRunnable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/195/BpelJacobRunnable.java\nindex c92146a901a..badf770e5c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/195/BpelJacobRunnable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/195/BpelJacobRunnable.java\n@@ -44,7 +44,8 @@ public abstract class BpelJacobRunnable extends JacobRunnable {\n     private static final Log __log = LogFactory.getLog(BpelJacobRunnable.class);\n \n     protected BpelRuntimeContext getBpelRuntimeContext() {\n-        BpelRuntimeContext nativeApi = (BpelRuntimeContext) JacobVPU.activeJacobThread().getExtension(BpelRuntimeContext.class);\n+        BpelRuntimeContext nativeApi = (BpelRuntimeContext) JacobVPU.\n+            activeJacobThread().getExtension(BpelRuntimeContext.class);\n         assert nativeApi != null;\n         return nativeApi;\n     }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}