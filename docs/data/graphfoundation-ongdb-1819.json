{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1819",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1819/IndexRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1819/IndexRepresentation.java\nindex de0b725f2ee..ac0bbaae905 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1819/IndexRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1819/IndexRepresentation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.repr;\n \n import java.util.Map;\n@@ -25,42 +26,42 @@ import org.neo4j.server.rest.domain.URIHelper;\n \n public abstract class IndexRepresentation extends MappingRepresentation implements EntityRepresentation\n {\n-    private final String name;\n-    private final Map<String, String> type;\n+  private final String name;\n+  private final Map<String, String> type;\n \n-    public IndexRepresentation( String name, Map<String, String> type )\n-    {\n-        super( RepresentationType.INDEX );\n-        this.name = name;\n-        this.type = type;\n-    }\n+  public IndexRepresentation(String name, Map<String, String> type)\n+  {\n+    super(RepresentationType.INDEX);\n+    this.name = name;\n+    this.type = type;\n+  }\n \n-    @Override\n-    protected void serialize( final MappingSerializer serializer )\n+  @Override\n+  protected void serialize(final MappingSerializer serializer)\n+  {\n+    serializer.putRelativeUriTemplate(\"template\", path() + \"{key}/{value}\");\n+    for (Map.Entry<String, String> pair : type.entrySet())\n     {\n-        serializer.putRelativeUriTemplate( \"template\", path() + \"{key}/{value}\" );\n-        for ( Map.Entry<String, String> pair : type.entrySet() )\n-        {\n-            serializer.putString( pair.getKey(), pair.getValue() );\n-        }\n+      serializer.putString(pair.getKey(), pair.getValue());\n     }\n+  }\n \n-    public String relativeUriFor( String key, String value, long entityId )\n-    {\n-        return path() + URIHelper.encode( key ) + \"/\" + URIHelper.encode( value ) + \"/\" + Long.toString( entityId );\n-    }\n+  public String relativeUriFor(String key, String value, long entityId)\n+  {\n+    return path() + URIHelper.encode(key) + \"/\" + URIHelper.encode(value) + \"/\" + Long.toString(entityId);\n+  }\n \n-    @Override\n-    public ValueRepresentation selfUri()\n-    {\n-        return ValueRepresentation.uri( path() );\n-    }\n+  @Override\n+  public ValueRepresentation selfUri()\n+  {\n+    return ValueRepresentation.uri(path());\n+  }\n \n-    protected String path()\n-    {\n-        return \"index/\" + propertyContainerType() + \"/\" + URIHelper.encode(name) + \"/\";\n-    }\n+  protected String path()\n+  {\n+    return \"index/\" + propertyContainerType() + \"/\" + URIHelper.encode(name) + \"/\";\n+  }\n \n-    protected abstract String propertyContainerType();\n+  protected abstract String propertyContainerType();\n \n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1819/IndexRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1819/IndexRepresentation.java\nindex de0b725f2ee..4aa453d42a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1819/IndexRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1819/IndexRepresentation.java\n@@ -26,9 +26,9 @@ import org.neo4j.server.rest.domain.URIHelper;\n public abstract class IndexRepresentation extends MappingRepresentation implements EntityRepresentation\n {\n     private final String name;\n-    private final Map<String, String> type;\n+    private final Map<String,String> type;\n \n-    public IndexRepresentation( String name, Map<String, String> type )\n+    public IndexRepresentation( String name, Map<String,String> type )\n     {\n         super( RepresentationType.INDEX );\n         this.name = name;\n@@ -39,7 +39,7 @@ public abstract class IndexRepresentation extends MappingRepresentation implemen\n     protected void serialize( final MappingSerializer serializer )\n     {\n         serializer.putRelativeUriTemplate( \"template\", path() + \"{key}/{value}\" );\n-        for ( Map.Entry<String, String> pair : type.entrySet() )\n+        for ( Map.Entry<String,String> pair : type.entrySet() )\n         {\n             serializer.putString( pair.getKey(), pair.getValue() );\n         }\n@@ -62,5 +62,4 @@ public abstract class IndexRepresentation extends MappingRepresentation implemen\n     }\n \n     protected abstract String propertyContainerType();\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1819/IndexRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1819/IndexRepresentation.java\nindex de0b725f2ee..e91b0a859be 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1819/IndexRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1819/IndexRepresentation.java\n@@ -20,15 +20,14 @@\n package org.neo4j.server.rest.repr;\n \n import java.util.Map;\n-\n import org.neo4j.server.rest.domain.URIHelper;\n \n public abstract class IndexRepresentation extends MappingRepresentation implements EntityRepresentation\n {\n     private final String name;\n-    private final Map<String, String> type;\n+    private final Map<String,String> type;\n \n-    public IndexRepresentation( String name, Map<String, String> type )\n+    public IndexRepresentation( String name, Map<String,String> type )\n     {\n         super( RepresentationType.INDEX );\n         this.name = name;\n@@ -39,7 +38,8 @@ public abstract class IndexRepresentation extends MappingRepresentation implemen\n     protected void serialize( final MappingSerializer serializer )\n     {\n         serializer.putRelativeUriTemplate( \"template\", path() + \"{key}/{value}\" );\n-        for ( Map.Entry<String, String> pair : type.entrySet() )\n+        for( Map.Entry<String,String> pair : type.entrySet()\n+        )\n         {\n             serializer.putString( pair.getKey(), pair.getValue() );\n         }\n@@ -58,9 +58,9 @@ public abstract class IndexRepresentation extends MappingRepresentation implemen\n \n     protected String path()\n     {\n-        return \"index/\" + propertyContainerType() + \"/\" + URIHelper.encode(name) + \"/\";\n+        return \"index/\" + propertyContainerType() + \"/\" + URIHelper.encode( name ) + \"/\";\n     }\n \n-    protected abstract String propertyContainerType();\n-\n-}\n+    protected abstract String propertyContainerType()\n+    ;\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}