{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2232",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "119",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2232/BackupStrategyWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2232/BackupStrategyWrapper.java\nindex 2ccd083057a..4cf201880e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2232/BackupStrategyWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2232/BackupStrategyWrapper.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.backup.impl;\n \n import java.io.IOException;\n@@ -35,161 +36,159 @@ import org.neo4j.logging.LogProvider;\n  */\n class BackupStrategyWrapper\n {\n-    private final BackupStrategy backupStrategy;\n-    private final BackupCopyService backupCopyService;\n-    private final BackupRecoveryService backupRecoveryService;\n-    private final Log log;\n-\n-    private final PageCache pageCache;\n-    private final Config config;\n-\n-    BackupStrategyWrapper( BackupStrategy backupStrategy, BackupCopyService backupCopyService, PageCache pageCache, Config config,\n-            BackupRecoveryService backupRecoveryService, LogProvider logProvider )\n+  private final BackupStrategy backupStrategy;\n+  private final BackupCopyService backupCopyService;\n+  private final BackupRecoveryService backupRecoveryService;\n+  private final Log log;\n+\n+  private final PageCache pageCache;\n+  private final Config config;\n+\n+  BackupStrategyWrapper(BackupStrategy backupStrategy, BackupCopyService backupCopyService, PageCache pageCache, Config config,\n+                        BackupRecoveryService backupRecoveryService, LogProvider logProvider)\n+  {\n+    this.backupStrategy = backupStrategy;\n+    this.backupCopyService = backupCopyService;\n+    this.pageCache = pageCache;\n+    this.config = config;\n+    this.backupRecoveryService = backupRecoveryService;\n+    this.log = logProvider.getLog(BackupStrategyWrapper.class);\n+  }\n+\n+  /**\n+   * Try to do a backup using the given strategy (ex. BackupProtocol). This covers all stages (starting with incremental and falling back to a a full backup).\n+   * The end result of this method will either be a successful backup or any other return type with the reason why the backup wasn't successful\n+   *\n+   * @param onlineBackupContext the command line arguments, configuration, flags\n+   * @return the ultimate outcome of trying to do a backup with the given strategy\n+   */\n+  Fallible<BackupStrategyOutcome> doBackup(OnlineBackupContext onlineBackupContext)\n+  {\n+    LifeSupport lifeSupport = new LifeSupport();\n+    lifeSupport.add(backupStrategy);\n+    lifeSupport.start();\n+    Fallible<BackupStrategyOutcome> state = performBackupWithoutLifecycle(onlineBackupContext);\n+    lifeSupport.shutdown();\n+    return state;\n+  }\n+\n+  private Fallible<BackupStrategyOutcome> performBackupWithoutLifecycle(\n+      OnlineBackupContext onlineBackupContext)\n+  {\n+    Path backupLocation = onlineBackupContext.getResolvedLocationFromName();\n+    Path userSpecifiedBackupLocation = onlineBackupContext.getResolvedLocationFromName();\n+    OptionalHostnamePort userSpecifiedAddress = onlineBackupContext.getRequiredArguments().getAddress();\n+    log.debug(\"User specified address is %s:%s\", userSpecifiedAddress.getHostname().toString(), userSpecifiedAddress.getPort().toString());\n+    Config config = onlineBackupContext.getConfig();\n+\n+    boolean previousBackupExists = backupCopyService.backupExists(backupLocation);\n+    if (previousBackupExists)\n     {\n-        this.backupStrategy = backupStrategy;\n-        this.backupCopyService = backupCopyService;\n-        this.pageCache = pageCache;\n-        this.config = config;\n-        this.backupRecoveryService = backupRecoveryService;\n-        this.log = logProvider.getLog( BackupStrategyWrapper.class );\n+      log.info(\"Previous backup found, trying incremental backup.\");\n+      Fallible<BackupStageOutcome> state =\n+          backupStrategy.performIncrementalBackup(userSpecifiedBackupLocation, config, userSpecifiedAddress);\n+      boolean fullBackupWontWork = BackupStageOutcome.WRONG_PROTOCOL.equals(state.getState());\n+      boolean incrementalWasSuccessful = BackupStageOutcome.SUCCESS.equals(state.getState());\n+\n+      if (fullBackupWontWork || incrementalWasSuccessful)\n+      {\n+        clearIdFiles(backupLocation);\n+        return describeOutcome(state);\n+      }\n+      if (!onlineBackupContext.getRequiredArguments().isFallbackToFull())\n+      {\n+        return describeOutcome(state);\n+      }\n     }\n-\n-    /**\n-     * Try to do a backup using the given strategy (ex. BackupProtocol). This covers all stages (starting with incremental and falling back to a a full backup).\n-     * The end result of this method will either be a successful backup or any other return type with the reason why the backup wasn't successful\n-     *\n-     * @param onlineBackupContext the command line arguments, configuration, flags\n-     * @return the ultimate outcome of trying to do a backup with the given strategy\n-     */\n-    Fallible<BackupStrategyOutcome> doBackup( OnlineBackupContext onlineBackupContext )\n+    if (onlineBackupContext.getRequiredArguments().isFallbackToFull())\n     {\n-        LifeSupport lifeSupport = new LifeSupport();\n-        lifeSupport.add( backupStrategy );\n-        lifeSupport.start();\n-        Fallible<BackupStrategyOutcome> state = performBackupWithoutLifecycle( onlineBackupContext );\n-        lifeSupport.shutdown();\n-        return state;\n+      if (!previousBackupExists)\n+      {\n+        log.info(\"Previous backup not found, a new full backup will be performed.\");\n+      }\n+      return describeOutcome(fullBackupWithTemporaryFolderResolutions(onlineBackupContext));\n     }\n+    return new Fallible<>(BackupStrategyOutcome.INCORRECT_STRATEGY, null);\n+  }\n \n-    private Fallible<BackupStrategyOutcome> performBackupWithoutLifecycle(\n-            OnlineBackupContext onlineBackupContext )\n+  private void clearIdFiles(Path backupLocation)\n+  {\n+    try\n     {\n-        Path backupLocation = onlineBackupContext.getResolvedLocationFromName();\n-        Path userSpecifiedBackupLocation = onlineBackupContext.getResolvedLocationFromName();\n-        OptionalHostnamePort userSpecifiedAddress = onlineBackupContext.getRequiredArguments().getAddress();\n-        log.debug( \"User specified address is %s:%s\", userSpecifiedAddress.getHostname().toString(), userSpecifiedAddress.getPort().toString() );\n-        Config config = onlineBackupContext.getConfig();\n-\n-        boolean previousBackupExists = backupCopyService.backupExists( backupLocation );\n-        if ( previousBackupExists )\n-        {\n-            log.info( \"Previous backup found, trying incremental backup.\" );\n-            Fallible<BackupStageOutcome> state =\n-                    backupStrategy.performIncrementalBackup( userSpecifiedBackupLocation, config, userSpecifiedAddress );\n-            boolean fullBackupWontWork = BackupStageOutcome.WRONG_PROTOCOL.equals( state.getState() );\n-            boolean incrementalWasSuccessful = BackupStageOutcome.SUCCESS.equals( state.getState() );\n-\n-            if ( fullBackupWontWork || incrementalWasSuccessful )\n-            {\n-                clearIdFiles( backupLocation );\n-                return describeOutcome( state );\n-            }\n-            if ( !onlineBackupContext.getRequiredArguments().isFallbackToFull() )\n-            {\n-                return describeOutcome( state );\n-            }\n-        }\n-        if ( onlineBackupContext.getRequiredArguments().isFallbackToFull() )\n-        {\n-            if ( !previousBackupExists )\n-            {\n-                log.info( \"Previous backup not found, a new full backup will be performed.\" );\n-            }\n-            return describeOutcome( fullBackupWithTemporaryFolderResolutions( onlineBackupContext ) );\n-        }\n-        return new Fallible<>( BackupStrategyOutcome.INCORRECT_STRATEGY, null );\n+      backupCopyService.clearIdFiles(backupLocation);\n+    } catch (IOException e)\n+    {\n+      log.warn(\"Failed to delete some or all id files.\", e);\n     }\n-\n-    private void clearIdFiles( Path backupLocation )\n+  }\n+\n+  /**\n+   * This will perform a full backup with some directory renaming if necessary.\n+   * <p>\n+   * If there is no existing backup, then no renaming will occur.\n+   * Otherwise the full backup will be done into a temporary directory and renaming\n+   * will occur if everything was successful.\n+   * </p>\n+   *\n+   * @param onlineBackupContext command line arguments, config etc.\n+   * @return outcome of full backup\n+   */\n+  private Fallible<BackupStageOutcome> fullBackupWithTemporaryFolderResolutions(\n+      OnlineBackupContext onlineBackupContext)\n+  {\n+    Path userSpecifiedBackupLocation = onlineBackupContext.getResolvedLocationFromName();\n+    Path temporaryFullBackupLocation = backupCopyService.findAnAvailableLocationForNewFullBackup(userSpecifiedBackupLocation);\n+\n+    OptionalHostnamePort address = onlineBackupContext.getRequiredArguments().getAddress();\n+    Fallible<BackupStageOutcome> state = backupStrategy.performFullBackup(temporaryFullBackupLocation, config, address);\n+\n+    // NOTE temporaryFullBackupLocation can be equal to desired\n+    boolean aBackupAlreadyExisted = userSpecifiedBackupLocation.equals(temporaryFullBackupLocation);\n+\n+    if (BackupStageOutcome.SUCCESS.equals(state.getState()))\n     {\n+      backupRecoveryService.recoverWithDatabase(temporaryFullBackupLocation, pageCache, config);\n+      if (!aBackupAlreadyExisted)\n+      {\n         try\n         {\n-            backupCopyService.clearIdFiles( backupLocation );\n-        }\n-        catch ( IOException e )\n+          renameTemporaryBackupToExpected(temporaryFullBackupLocation, userSpecifiedBackupLocation);\n+        } catch (IOException e)\n         {\n-            log.warn( \"Failed to delete some or all id files.\", e );\n+          return new Fallible<>(BackupStageOutcome.UNRECOVERABLE_FAILURE, e);\n         }\n+      }\n+      clearIdFiles(userSpecifiedBackupLocation);\n     }\n-\n-    /**\n-     * This will perform a full backup with some directory renaming if necessary.\n-     * <p>\n-     * If there is no existing backup, then no renaming will occur.\n-     * Otherwise the full backup will be done into a temporary directory and renaming\n-     * will occur if everything was successful.\n-     * </p>\n-     *\n-     * @param onlineBackupContext command line arguments, config etc.\n-     * @return outcome of full backup\n-     */\n-    private Fallible<BackupStageOutcome> fullBackupWithTemporaryFolderResolutions(\n-            OnlineBackupContext onlineBackupContext )\n+    return state;\n+  }\n+\n+  private void renameTemporaryBackupToExpected(Path temporaryFullBackupLocation, Path userSpecifiedBackupLocation) throws IOException\n+  {\n+    Path newBackupLocationForPreExistingBackup = backupCopyService.findNewBackupLocationForBrokenExisting(userSpecifiedBackupLocation);\n+    backupCopyService.moveBackupLocation(userSpecifiedBackupLocation, newBackupLocationForPreExistingBackup);\n+    backupCopyService.moveBackupLocation(temporaryFullBackupLocation, userSpecifiedBackupLocation);\n+  }\n+\n+  private Fallible<BackupStrategyOutcome> describeOutcome(Fallible<BackupStageOutcome> strategyStageOutcome)\n+  {\n+    BackupStageOutcome stageOutcome = strategyStageOutcome.getState();\n+    if (stageOutcome == BackupStageOutcome.SUCCESS)\n     {\n-        Path userSpecifiedBackupLocation = onlineBackupContext.getResolvedLocationFromName();\n-        Path temporaryFullBackupLocation = backupCopyService.findAnAvailableLocationForNewFullBackup( userSpecifiedBackupLocation );\n-\n-        OptionalHostnamePort address = onlineBackupContext.getRequiredArguments().getAddress();\n-        Fallible<BackupStageOutcome> state = backupStrategy.performFullBackup( temporaryFullBackupLocation, config, address );\n-\n-        // NOTE temporaryFullBackupLocation can be equal to desired\n-        boolean aBackupAlreadyExisted = userSpecifiedBackupLocation.equals( temporaryFullBackupLocation );\n-\n-        if ( BackupStageOutcome.SUCCESS.equals( state.getState() ) )\n-        {\n-            backupRecoveryService.recoverWithDatabase( temporaryFullBackupLocation, pageCache, config );\n-            if ( !aBackupAlreadyExisted )\n-            {\n-                try\n-                {\n-                    renameTemporaryBackupToExpected( temporaryFullBackupLocation, userSpecifiedBackupLocation );\n-                }\n-                catch ( IOException e )\n-                {\n-                    return new Fallible<>( BackupStageOutcome.UNRECOVERABLE_FAILURE, e );\n-                }\n-            }\n-            clearIdFiles( userSpecifiedBackupLocation );\n-        }\n-        return state;\n+      return new Fallible<>(BackupStrategyOutcome.SUCCESS, null);\n     }\n-\n-    private void renameTemporaryBackupToExpected( Path temporaryFullBackupLocation, Path userSpecifiedBackupLocation ) throws IOException\n+    if (stageOutcome == BackupStageOutcome.WRONG_PROTOCOL)\n     {\n-        Path newBackupLocationForPreExistingBackup = backupCopyService.findNewBackupLocationForBrokenExisting( userSpecifiedBackupLocation );\n-        backupCopyService.moveBackupLocation( userSpecifiedBackupLocation, newBackupLocationForPreExistingBackup );\n-        backupCopyService.moveBackupLocation( temporaryFullBackupLocation, userSpecifiedBackupLocation );\n+      return new Fallible<>(BackupStrategyOutcome.INCORRECT_STRATEGY, strategyStageOutcome.getCause().orElse(null));\n     }\n-\n-    private Fallible<BackupStrategyOutcome> describeOutcome( Fallible<BackupStageOutcome> strategyStageOutcome )\n+    if (stageOutcome == BackupStageOutcome.FAILURE)\n     {\n-        BackupStageOutcome stageOutcome = strategyStageOutcome.getState();\n-        if ( stageOutcome == BackupStageOutcome.SUCCESS )\n-        {\n-            return new Fallible<>( BackupStrategyOutcome.SUCCESS, null );\n-        }\n-        if ( stageOutcome == BackupStageOutcome.WRONG_PROTOCOL )\n-        {\n-            return new Fallible<>( BackupStrategyOutcome.INCORRECT_STRATEGY, strategyStageOutcome.getCause().orElse( null ) );\n-        }\n-        if ( stageOutcome == BackupStageOutcome.FAILURE )\n-        {\n-            return new Fallible<>( BackupStrategyOutcome.CORRECT_STRATEGY_FAILED, strategyStageOutcome.getCause().orElse( null ) );\n-        }\n-        if ( stageOutcome == BackupStageOutcome.UNRECOVERABLE_FAILURE )\n-        {\n-            return new Fallible<>( BackupStrategyOutcome.ABSOLUTE_FAILURE, strategyStageOutcome.getCause().orElse( null ) );\n-        }\n-        throw new RuntimeException( \"Not all enums covered: \" + stageOutcome );\n+      return new Fallible<>(BackupStrategyOutcome.CORRECT_STRATEGY_FAILED, strategyStageOutcome.getCause().orElse(null));\n+    }\n+    if (stageOutcome == BackupStageOutcome.UNRECOVERABLE_FAILURE)\n+    {\n+      return new Fallible<>(BackupStrategyOutcome.ABSOLUTE_FAILURE, strategyStageOutcome.getCause().orElse(null));\n     }\n+    throw new RuntimeException(\"Not all enums covered: \" + stageOutcome);\n+  }\n }\n",
            "diff_size": 219
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2232/BackupStrategyWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2232/BackupStrategyWrapper.java\nindex 2ccd083057a..5aca60f5037 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2232/BackupStrategyWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2232/BackupStrategyWrapper.java\n@@ -71,8 +71,7 @@ class BackupStrategyWrapper\n         return state;\n     }\n \n-    private Fallible<BackupStrategyOutcome> performBackupWithoutLifecycle(\n-            OnlineBackupContext onlineBackupContext )\n+    private Fallible<BackupStrategyOutcome> performBackupWithoutLifecycle( OnlineBackupContext onlineBackupContext )\n     {\n         Path backupLocation = onlineBackupContext.getResolvedLocationFromName();\n         Path userSpecifiedBackupLocation = onlineBackupContext.getResolvedLocationFromName();\n@@ -84,17 +83,16 @@ class BackupStrategyWrapper\n         if ( previousBackupExists )\n         {\n             log.info( \"Previous backup found, trying incremental backup.\" );\n-            Fallible<BackupStageOutcome> state =\n-                    backupStrategy.performIncrementalBackup( userSpecifiedBackupLocation, config, userSpecifiedAddress );\n-            boolean fullBackupWontWork = BackupStageOutcome.WRONG_PROTOCOL.equals( state.getState() );\n+            Fallible<BackupStageOutcome> state = backupStrategy.performIncrementalBackup( userSpecifiedBackupLocation, config, userSpecifiedAddress );\n+    boolean fullBackupWontWork = BackupStageOutcome.WRONG_PROTOCOL.equals( state.getState() );\n             boolean incrementalWasSuccessful = BackupStageOutcome.SUCCESS.equals( state.getState() );\n-\n-            if ( fullBackupWontWork || incrementalWasSuccessful )\n+if ( fullBackupWontWork || incrementalWasSuccessful )\n             {\n                 clearIdFiles( backupLocation );\n                 return describeOutcome( state );\n             }\n-            if ( !onlineBackupContext.getRequiredArguments().isFallbackToFull() )\n+\n+if ( !onlineBackupContext.getRequiredArguments().isFallbackToFull() )\n             {\n                 return describeOutcome( state );\n             }\n@@ -105,7 +103,8 @@ class BackupStrategyWrapper\n             {\n                 log.info( \"Previous backup not found, a new full backup will be performed.\" );\n             }\n-            return describeOutcome( fullBackupWithTemporaryFolderResolutions( onlineBackupContext ) );\n+\n+return describeOutcome( fullBackupWithTemporaryFolderResolutions( onlineBackupContext ) );\n         }\n         return new Fallible<>( BackupStrategyOutcome.INCORRECT_STRATEGY, null );\n     }\n@@ -133,19 +132,16 @@ class BackupStrategyWrapper\n      * @param onlineBackupContext command line arguments, config etc.\n      * @return outcome of full backup\n      */\n-    private Fallible<BackupStageOutcome> fullBackupWithTemporaryFolderResolutions(\n-            OnlineBackupContext onlineBackupContext )\n+    private Fallible<BackupStageOutcome> fullBackupWithTemporaryFolderResolutions( OnlineBackupContext onlineBackupContext )\n     {\n         Path userSpecifiedBackupLocation = onlineBackupContext.getResolvedLocationFromName();\n         Path temporaryFullBackupLocation = backupCopyService.findAnAvailableLocationForNewFullBackup( userSpecifiedBackupLocation );\n-\n-        OptionalHostnamePort address = onlineBackupContext.getRequiredArguments().getAddress();\n+OptionalHostnamePort address = onlineBackupContext.getRequiredArguments().getAddress();\n         Fallible<BackupStageOutcome> state = backupStrategy.performFullBackup( temporaryFullBackupLocation, config, address );\n \n         // NOTE temporaryFullBackupLocation can be equal to desired\n         boolean aBackupAlreadyExisted = userSpecifiedBackupLocation.equals( temporaryFullBackupLocation );\n-\n-        if ( BackupStageOutcome.SUCCESS.equals( state.getState() ) )\n+if ( BackupStageOutcome.SUCCESS.equals( state.getState() ) )\n         {\n             backupRecoveryService.recoverWithDatabase( temporaryFullBackupLocation, pageCache, config );\n             if ( !aBackupAlreadyExisted )\n@@ -159,9 +155,11 @@ class BackupStrategyWrapper\n                     return new Fallible<>( BackupStageOutcome.UNRECOVERABLE_FAILURE, e );\n                 }\n             }\n-            clearIdFiles( userSpecifiedBackupLocation );\n+\n+clearIdFiles( userSpecifiedBackupLocation );\n         }\n-        return state;\n+\n+return state;\n     }\n \n     private void renameTemporaryBackupToExpected( Path temporaryFullBackupLocation, Path userSpecifiedBackupLocation ) throws IOException\n@@ -178,18 +176,21 @@ class BackupStrategyWrapper\n         {\n             return new Fallible<>( BackupStrategyOutcome.SUCCESS, null );\n         }\n-        if ( stageOutcome == BackupStageOutcome.WRONG_PROTOCOL )\n+\n+if ( stageOutcome == BackupStageOutcome.WRONG_PROTOCOL )\n         {\n             return new Fallible<>( BackupStrategyOutcome.INCORRECT_STRATEGY, strategyStageOutcome.getCause().orElse( null ) );\n         }\n-        if ( stageOutcome == BackupStageOutcome.FAILURE )\n+\n+if ( stageOutcome == BackupStageOutcome.FAILURE )\n         {\n             return new Fallible<>( BackupStrategyOutcome.CORRECT_STRATEGY_FAILED, strategyStageOutcome.getCause().orElse( null ) );\n         }\n-        if ( stageOutcome == BackupStageOutcome.UNRECOVERABLE_FAILURE )\n+\n+if ( stageOutcome == BackupStageOutcome.UNRECOVERABLE_FAILURE )\n         {\n             return new Fallible<>( BackupStrategyOutcome.ABSOLUTE_FAILURE, strategyStageOutcome.getCause().orElse( null ) );\n         }\n         throw new RuntimeException( \"Not all enums covered: \" + stageOutcome );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}