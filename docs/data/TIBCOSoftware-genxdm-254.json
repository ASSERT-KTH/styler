{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "254",
    "information": {
        "errors": [
            {
                "line": "18",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public final class SampleResolver implements Resolver\n{\n\tfinal URI baseURI;\n\n\tpublic SampleResolver(final URI baseURI)\n\t{",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "20",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/254/SampleResolver.java\nindex 973d56a9379..005ae1b2a93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/254/SampleResolver.java\n@@ -15,7 +15,7 @@ import org.genxdm.io.Resolver;\n \r\n public final class SampleResolver implements Resolver\r\n {\r\n-\tfinal URI baseURI;\r\n+final URI baseURI;\r\n \r\n \tpublic SampleResolver(final URI baseURI)\r\n \t{\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/254/SampleResolver.java\nindex 973d56a9379..9c024e774f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/254/SampleResolver.java\n@@ -13,81 +13,66 @@ import org.genxdm.exceptions.PreCondition;\n import org.genxdm.io.Resolved;\r\n import org.genxdm.io.Resolver;\r\n \r\n-public final class SampleResolver implements Resolver\r\n-{\r\n-\tfinal URI baseURI;\r\n+public final class SampleResolver implements Resolver {\r\n+    final URI baseURI;\r\n \r\n-\tpublic SampleResolver(final URI baseURI)\r\n-\t{\r\n-\t\tthis.baseURI = PreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\r\n-\t}\r\n+    public SampleResolver(final URI baseURI) {\r\n+        this.baseURI = PreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\r\n+    }\r\n \r\n-\t/**\r\n-\t * Convert a URI relative to a base URI into an input source.\r\n-\t * <p/>\r\n-\t * This default implementation requires that neither parameter be null, and performs the expected action to retrieve\r\n-\t * the input source (which may involve network access).\r\n-\t * \r\n-\t * @param baseURI\r\n-\t *            the base URI against which the target is to be resolved; must not be null\r\n-\t * @param location\r\n-\t *            the URI to resolve; must not be null\r\n-\t * @return a pair of InputStream and resolved URI.\r\n-\t */\r\n-\tpublic Resolved<InputStream> resolveInputStream(final URI location) throws IOException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(location, \"uri\");\r\n-\t\tif (location.isAbsolute())\r\n-\t\t{\r\n-\t\t\treturn retrieve(location, location);\r\n-\t\t}\r\n-\t\telse\r\n-\t\t{\r\n-\t\t\tPreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\r\n+    /**\r\n+     * Convert a URI relative to a base URI into an input source.\r\n+     * <p/>\r\n+     * This default implementation requires that neither parameter be null, and performs the expected action to retrieve\r\n+     * the input source (which may involve network access).\r\n+     *\r\n+     * @param baseURI  the base URI against which the target is to be resolved; must not be null\r\n+     * @param location the URI to resolve; must not be null\r\n+     * @return a pair of InputStream and resolved URI.\r\n+     */\r\n+    public Resolved<InputStream> resolveInputStream(final URI location) throws IOException {\r\n+        PreCondition.assertArgumentNotNull(location, \"uri\");\r\n+        if (location.isAbsolute()) {\r\n+            return retrieve(location, location);\r\n+        } else {\r\n+            PreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\r\n \r\n-\t\t\tfinal URI base = baseURI.normalize();\r\n-\t\t\tfinal URI resolved = base.resolve(location);\r\n+            final URI base = baseURI.normalize();\r\n+            final URI resolved = base.resolve(location);\r\n \r\n-\t\t\treturn retrieve(location, resolved);\r\n-\t\t}\r\n-\t}\r\n+            return retrieve(location, resolved);\r\n+        }\r\n+    }\r\n \r\n-\tprivate Resolved<InputStream> retrieve(final URI location, final URI uri) throws IOException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(uri, \"uri\");\r\n+    private Resolved<InputStream> retrieve(final URI location, final URI uri) throws IOException {\r\n+        PreCondition.assertArgumentNotNull(uri, \"uri\");\r\n \r\n-\t\tfinal URL toRetrieve;\r\n+        final URL toRetrieve;\r\n \r\n-\t\tif (!uri.isAbsolute()) // assume local file\r\n-\t\t{\r\n-\t\t\tfinal File canonFile = new File(uri.toString()).getCanonicalFile();\r\n-\t\t\ttoRetrieve = canonFile.toURI().toURL();\r\n-\t\t}\r\n-\t\telse\r\n-\t\t{\r\n-\t\t\ttoRetrieve = uri.toURL();\r\n-\t\t}\r\n+        if (!uri.isAbsolute()) // assume local file\r\n+        {\r\n+            final File canonFile = new File(uri.toString()).getCanonicalFile();\r\n+            toRetrieve = canonFile.toURI().toURL();\r\n+        } else {\r\n+            toRetrieve = uri.toURL();\r\n+        }\r\n \r\n-\t\tif (toRetrieve == null)\r\n-\t\t{\r\n-\t\t\tthrow new FileNotFoundException(uri.toString());\r\n-\t\t}\r\n+        if (toRetrieve == null) {\r\n+            throw new FileNotFoundException(uri.toString());\r\n+        }\r\n \r\n-\t\tfinal InputStream stream = toRetrieve.openStream();\r\n-\t\tif (stream == null)\r\n-\t\t{\r\n-\t\t\tthrow new FileNotFoundException(toRetrieve.toString());\r\n-\t\t}\r\n-\t\ttry\r\n-\t\t{\r\n-\t\t\treturn new Resolved<InputStream>(location, stream, toRetrieve.toURI());\r\n-\t\t}\r\n-\t\tcatch (final URISyntaxException e)\r\n-\t\t{\r\n-\t\t\tthrow new AssertionError(e);\r\n-\t\t}\r\n-\t}\r\n-\tpublic Resolved<Reader> resolveReader(URI location) throws IOException {\r\n-\t\tthrow new UnsupportedOperationException(\"resolverReader\");\r\n-\t}\r\n+        final InputStream stream = toRetrieve.openStream();\r\n+        if (stream == null) {\r\n+            throw new FileNotFoundException(toRetrieve.toString());\r\n+        }\r\n+        try {\r\n+            return new Resolved<InputStream>(location, stream, toRetrieve.toURI());\r\n+        } catch (final URISyntaxException e) {\r\n+            throw new AssertionError(e);\r\n+        }\r\n+    }\r\n+\r\n+    public Resolved<Reader> resolveReader(URI location) throws IOException {\r\n+        throw new UnsupportedOperationException(\"resolverReader\");\r\n+    }\r\n }\r\n",
            "diff_size": 68
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "20",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/254/SampleResolver.java\nindex 973d56a9379..9d917af5afd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/254/SampleResolver.java\n@@ -14,13 +14,13 @@ import org.genxdm.io.Resolved;\n import org.genxdm.io.Resolver;\r\n \r\n public final class SampleResolver implements Resolver\r\n-{\r\n-\tfinal URI baseURI;\r\n+{\n+    final URI baseURI;\r\n \r\n \tpublic SampleResolver(final URI baseURI)\r\n-\t{\r\n-\t\tthis.baseURI = PreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\r\n-\t}\r\n+\t{\n+    this.baseURI = PreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\n+    }\r\n \r\n \t/**\r\n \t * Convert a URI relative to a base URI into an input source.\r\n@@ -35,59 +35,59 @@ public final class SampleResolver implements Resolver\n \t * @return a pair of InputStream and resolved URI.\r\n \t */\r\n \tpublic Resolved<InputStream> resolveInputStream(final URI location) throws IOException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(location, \"uri\");\r\n+\t{\n+    PreCondition.assertArgumentNotNull(location, \"uri\");\r\n \t\tif (location.isAbsolute())\r\n-\t\t{\r\n-\t\t\treturn retrieve(location, location);\r\n-\t\t}\r\n+\t\t{\n+    return retrieve(location, location);\n+    }\r\n \t\telse\r\n-\t\t{\r\n-\t\t\tPreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\r\n+\t\t{\n+    PreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\r\n \r\n \t\t\tfinal URI base = baseURI.normalize();\r\n \t\t\tfinal URI resolved = base.resolve(location);\r\n \r\n-\t\t\treturn retrieve(location, resolved);\r\n-\t\t}\r\n-\t}\r\n+\t\t\treturn retrieve(location, resolved);\n+    }\n+    }\r\n \r\n \tprivate Resolved<InputStream> retrieve(final URI location, final URI uri) throws IOException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(uri, \"uri\");\r\n+\t{\n+    PreCondition.assertArgumentNotNull(uri, \"uri\");\r\n \r\n \t\tfinal URL toRetrieve;\r\n \r\n \t\tif (!uri.isAbsolute()) // assume local file\r\n-\t\t{\r\n-\t\t\tfinal File canonFile = new File(uri.toString()).getCanonicalFile();\r\n-\t\t\ttoRetrieve = canonFile.toURI().toURL();\r\n-\t\t}\r\n+\t\t{\n+    final File canonFile = new File(uri.toString()).getCanonicalFile();\r\n+\t\t\ttoRetrieve = canonFile.toURI().toURL();\n+    }\r\n \t\telse\r\n-\t\t{\r\n-\t\t\ttoRetrieve = uri.toURL();\r\n-\t\t}\r\n+\t\t{\n+    toRetrieve = uri.toURL();\n+    }\r\n \r\n \t\tif (toRetrieve == null)\r\n-\t\t{\r\n-\t\t\tthrow new FileNotFoundException(uri.toString());\r\n-\t\t}\r\n+\t\t{\n+    throw new FileNotFoundException(uri.toString());\n+    }\r\n \r\n \t\tfinal InputStream stream = toRetrieve.openStream();\r\n \t\tif (stream == null)\r\n-\t\t{\r\n-\t\t\tthrow new FileNotFoundException(toRetrieve.toString());\r\n-\t\t}\r\n+\t\t{\n+    throw new FileNotFoundException(toRetrieve.toString());\n+    }\r\n \t\ttry\r\n-\t\t{\r\n-\t\t\treturn new Resolved<InputStream>(location, stream, toRetrieve.toURI());\r\n-\t\t}\r\n+\t\t{\n+    return new Resolved<InputStream>(location, stream, toRetrieve.toURI());\n+    }\r\n \t\tcatch (final URISyntaxException e)\r\n-\t\t{\r\n-\t\t\tthrow new AssertionError(e);\r\n-\t\t}\r\n-\t}\r\n-\tpublic Resolved<Reader> resolveReader(URI location) throws IOException {\r\n-\t\tthrow new UnsupportedOperationException(\"resolverReader\");\r\n-\t}\r\n-}\r\n+\t\t{\n+    throw new AssertionError(e);\n+    }\n+    }\r\n+\tpublic Resolved<Reader> resolveReader(URI location) throws IOException {\n+    throw new UnsupportedOperationException(\"resolverReader\");\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 41
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/254/SampleResolver.java\nindex 973d56a9379..a217b59d03d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/254/SampleResolver.java\n@@ -1,93 +1,95 @@\n-package org.genxdm.samples.performance.bridges;\r\n+package org.genxdm.samples.performance.bridges;\n+\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Reader;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import org.genxdm.exceptions.PreCondition;\n+import org.genxdm.io.Resolved;\n+import org.genxdm.io.Resolver;\n+\n+public final class SampleResolver implements Resolver\n+{\n+    final URI baseURI;\n+\n+    public SampleResolver(final URI baseURI)\n+    {\n+        this.baseURI = PreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\n+    }\r\n \r\n-import java.io.File;\r\n-import java.io.FileNotFoundException;\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.io.Reader;\r\n-import java.net.URI;\r\n-import java.net.URISyntaxException;\r\n-import java.net.URL;\r\n-\r\n-import org.genxdm.exceptions.PreCondition;\r\n-import org.genxdm.io.Resolved;\r\n-import org.genxdm.io.Resolver;\r\n-\r\n-public final class SampleResolver implements Resolver\r\n-{\r\n-\tfinal URI baseURI;\r\n-\r\n-\tpublic SampleResolver(final URI baseURI)\r\n-\t{\r\n-\t\tthis.baseURI = PreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Convert a URI relative to a base URI into an input source.\r\n-\t * <p/>\r\n-\t * This default implementation requires that neither parameter be null, and performs the expected action to retrieve\r\n-\t * the input source (which may involve network access).\r\n-\t * \r\n-\t * @param baseURI\r\n-\t *            the base URI against which the target is to be resolved; must not be null\r\n-\t * @param location\r\n-\t *            the URI to resolve; must not be null\r\n-\t * @return a pair of InputStream and resolved URI.\r\n-\t */\r\n-\tpublic Resolved<InputStream> resolveInputStream(final URI location) throws IOException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(location, \"uri\");\r\n-\t\tif (location.isAbsolute())\r\n-\t\t{\r\n-\t\t\treturn retrieve(location, location);\r\n-\t\t}\r\n-\t\telse\r\n-\t\t{\r\n-\t\t\tPreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\r\n-\r\n-\t\t\tfinal URI base = baseURI.normalize();\r\n-\t\t\tfinal URI resolved = base.resolve(location);\r\n-\r\n-\t\t\treturn retrieve(location, resolved);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tprivate Resolved<InputStream> retrieve(final URI location, final URI uri) throws IOException\r\n-\t{\r\n-\t\tPreCondition.assertArgumentNotNull(uri, \"uri\");\r\n-\r\n-\t\tfinal URL toRetrieve;\r\n-\r\n-\t\tif (!uri.isAbsolute()) // assume local file\r\n-\t\t{\r\n-\t\t\tfinal File canonFile = new File(uri.toString()).getCanonicalFile();\r\n-\t\t\ttoRetrieve = canonFile.toURI().toURL();\r\n-\t\t}\r\n-\t\telse\r\n-\t\t{\r\n-\t\t\ttoRetrieve = uri.toURL();\r\n-\t\t}\r\n-\r\n-\t\tif (toRetrieve == null)\r\n-\t\t{\r\n-\t\t\tthrow new FileNotFoundException(uri.toString());\r\n-\t\t}\r\n-\r\n-\t\tfinal InputStream stream = toRetrieve.openStream();\r\n-\t\tif (stream == null)\r\n-\t\t{\r\n-\t\t\tthrow new FileNotFoundException(toRetrieve.toString());\r\n-\t\t}\r\n-\t\ttry\r\n-\t\t{\r\n-\t\t\treturn new Resolved<InputStream>(location, stream, toRetrieve.toURI());\r\n-\t\t}\r\n-\t\tcatch (final URISyntaxException e)\r\n-\t\t{\r\n-\t\t\tthrow new AssertionError(e);\r\n-\t\t}\r\n-\t}\r\n-\tpublic Resolved<Reader> resolveReader(URI location) throws IOException {\r\n-\t\tthrow new UnsupportedOperationException(\"resolverReader\");\r\n-\t}\r\n-}\r\n+    /**\r\n+     * Convert a URI relative to a base URI into an input source.\r\n+     * <p/>\r\n+     * This default implementation requires that neither parameter be null, and performs the expected action to retrieve\r\n+     * the input source (which may involve network access).\r\n+     * \r\n+     * @param baseURI\r\n+     *            the base URI against which the target is to be resolved; must not be null\r\n+     * @param location\r\n+     *            the URI to resolve; must not be null\r\n+     * @return a pair of InputStream and resolved URI.\r\n+     */\n+\n+    public Resolved<InputStream> resolveInputStream(final URI location)\n+        throws IOException\n+    {\n+        PreCondition.assertArgumentNotNull(location, \"uri\");\n+        if (location.isAbsolute())\n+        {\n+            return retrieve(location, location);\n+        }\n+        else\n+        {\n+            PreCondition.assertArgumentNotNull(baseURI, \"baseURI\");\n+\n+            final URI base = baseURI.normalize();\n+            final URI resolved = base.resolve(location);\n+            return retrieve(location, resolved);\n+        }\n+    }\n+\n+    private Resolved<InputStream> retrieve(final URI location, final URI uri)\n+        throws IOException\n+    {\n+        PreCondition.assertArgumentNotNull(uri, \"uri\");\n+\n+        final URL toRetrieve;\n+        if (!uri.isAbsolute()) // assume local file\n+        {\n+            final File canonFile = new File(uri.toString()).getCanonicalFile();\n+            toRetrieve = canonFile.toURI().toURL();\n+        }\n+        else\n+        {\n+            toRetrieve = uri.toURL();\n+        }\n+        if (toRetrieve == null)\n+        {\n+            throw new FileNotFoundException(uri.toString());\n+        }\n+\n+        final InputStream stream = toRetrieve.openStream();\n+        if (stream == null)\n+        {\n+            throw new FileNotFoundException(toRetrieve.toString());\n+        }\n+        try\n+        {\n+            return new Resolved<InputStream>(location, stream, toRetrieve.toURI());\n+        }\n+        catch (final URISyntaxException e)\n+        {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n+    public Resolved<Reader> resolveReader(URI location)\n+        throws IOException\n+    {\n+        throw new UnsupportedOperationException(\"resolverReader\");\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 113
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "20",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/254/SampleResolver.java\nindex 973d56a9379..005ae1b2a93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/254/SampleResolver.java\n@@ -15,7 +15,7 @@ import org.genxdm.io.Resolver;\n \r\n public final class SampleResolver implements Resolver\r\n {\r\n-\tfinal URI baseURI;\r\n+final URI baseURI;\r\n \r\n \tpublic SampleResolver(final URI baseURI)\r\n \t{\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "20",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/254/SampleResolver.java\nindex 973d56a9379..7fe63e13995 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/254/SampleResolver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/254/SampleResolver.java\n@@ -15,7 +15,7 @@ import org.genxdm.io.Resolver;\n \r\n public final class SampleResolver implements Resolver\r\n {\r\n-\tfinal URI baseURI;\r\n+    final URI baseURI;\r\n \r\n \tpublic SampleResolver(final URI baseURI)\r\n \t{\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}