{
    "project_name": "Chaklader-Object-Oriented-Design",
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "58",
                "column": "48",
                "severity": "error",
                "message": "'}' at column 48 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "    for (int i = 0; i < 3; i++) {\n      executorService.execute(() -> {\n        while (inventory.addItem(new Item())) {};\n      });\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "58",
                    "column": "48",
                    "severity": "error",
                    "message": "'}' at column 48 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/11/App.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/intellij/11/App.java\nindex c814f98bc58..e5ecbd928a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/11/App.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/intellij/11/App.java\n@@ -1,17 +1,17 @@\n /**\n  * The MIT License\n  * Copyright (c) 2014-2016 Ilkka Sepp\u00e4l\u00e4\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -30,7 +30,7 @@ import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n \n /**\n- * \n+ *\n  * Double Checked Locking is a concurrency design pattern used to reduce the overhead of acquiring a\n  * lock by first testing the locking criterion (the \"lock hint\") without actually acquiring the\n  * lock. Only if the locking criterion check indicates that locking is required does the actual\n@@ -39,7 +39,7 @@ import java.util.concurrent.TimeUnit;\n  * In {@link Inventory} we store the items with a given size. However, we do not store more items\n  * than the inventory size. To address concurrent access problems we use double checked locking to\n  * add item to inventory. In this method, the thread which gets the lock first adds the item.\n- * \n+ *\n  */\n public class App {\n \n@@ -47,7 +47,7 @@ public class App {\n \n   /**\n    * Program entry point\n-   * \n+   *\n    * @param args command line args\n    */\n   public static void main(String[] args) {\n@@ -55,7 +55,9 @@ public class App {\n     ExecutorService executorService = Executors.newFixedThreadPool(3);\n     for (int i = 0; i < 3; i++) {\n       executorService.execute(() -> {\n-        while (inventory.addItem(new Item())) {};\n+        while (inventory.addItem(new Item())) {\n+        }\n+        ;\n       });\n     }\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "58",
                    "column": "48",
                    "severity": "error",
                    "message": "'}' at column 48 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/11/App.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/naturalize/11/App.java\nindex c814f98bc58..9f8e7f5d7c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/11/App.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/naturalize/11/App.java\n@@ -66,4 +66,4 @@ public class App {\n       LOGGER.error(\"Error waiting for ExecutorService shutdown\");\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/11/App.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/codebuff/11/App.java\nindex c814f98bc58..d693df7c9e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/errored/1/11/App.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Chaklader-Object-Oriented-Design/codebuff/11/App.java\n@@ -24,7 +24,6 @@ package com.iluwatar.doublechecked.locking;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n import java.util.concurrent.TimeUnit;\n@@ -41,6 +40,8 @@ import java.util.concurrent.TimeUnit;\n  * add item to inventory. In this method, the thread which gets the lock first adds the item.\n  * \n  */\n+\n+\n public class App {\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(App.class);\n@@ -50,12 +51,16 @@ public class App {\n    * \n    * @param args command line args\n    */\n+\n+\n   public static void main(String[] args) {\n     final Inventory inventory = new Inventory(1000);\n     ExecutorService executorService = Executors.newFixedThreadPool(3);\n     for (int i = 0; i < 3; i++) {\n       executorService.execute(() -> {\n-        while (inventory.addItem(new Item())) {};\n+        while (inventory.addItem(new Item())) {\n+        }\n+        ;\n       });\n     }\n \n@@ -66,4 +71,4 @@ public class App {\n       LOGGER.error(\"Error waiting for ExecutorService shutdown\");\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "58",
                    "column": "48",
                    "severity": "error",
                    "message": "'}' at column 48 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "58",
                    "column": "48",
                    "severity": "error",
                    "message": "'}' at column 48 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}