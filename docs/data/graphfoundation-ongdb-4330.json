{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4330",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "15",
                    "severity": "error",
                    "message": "'}' at column 15 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "194",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "209",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4330/SchemaStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4330/SchemaStorage.java\nindex 252bdef757d..bf55bb4abde 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4330/SchemaStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4330/SchemaStorage.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.util.Collection;\n@@ -40,194 +41,192 @@ import org.neo4j.storageengine.api.schema.SchemaRule;\n \n public class SchemaStorage implements SchemaRuleAccess\n {\n-    private final RecordStore<DynamicRecord> schemaStore;\n-\n-    public SchemaStorage( RecordStore<DynamicRecord> schemaStore )\n-    {\n-        this.schemaStore = schemaStore;\n-    }\n-\n-    /**\n-     * Find the IndexRule that matches the given IndexDescriptor.\n-     *\n-     * @return  the matching IndexRule, or null if no matching IndexRule was found\n-     * @throws  IllegalStateException if more than one matching rule.\n-     * @param descriptor the target IndexDescriptor\n-     */\n-    public IndexRule indexGetForSchema( final SchemaIndexDescriptor descriptor )\n-    {\n-        Iterator<IndexRule> rules = loadAllSchemaRules( descriptor::isSame, IndexRule.class, false );\n-\n-        IndexRule foundRule = null;\n-\n-        while ( rules.hasNext() )\n-        {\n-            IndexRule candidate = rules.next();\n-            if ( foundRule != null )\n-            {\n-                throw new IllegalStateException( String.format(\n-                        \"Found more than one matching index rule, %s and %s\", foundRule, candidate ) );\n-            }\n-            foundRule = candidate;\n-        }\n-\n-        return foundRule;\n-    }\n-\n-    public Iterator<IndexRule> indexesGetAll()\n+  private final RecordStore<DynamicRecord> schemaStore;\n+\n+  public SchemaStorage(RecordStore<DynamicRecord> schemaStore)\n+  {\n+    this.schemaStore = schemaStore;\n+  }\n+\n+  /**\n+   * Find the IndexRule that matches the given IndexDescriptor.\n+   *\n+   * @param descriptor the target IndexDescriptor\n+   * @return the matching IndexRule, or null if no matching IndexRule was found\n+   * @throws IllegalStateException if more than one matching rule.\n+   */\n+  public IndexRule indexGetForSchema(final SchemaIndexDescriptor descriptor)\n+  {\n+    Iterator<IndexRule> rules = loadAllSchemaRules(descriptor::isSame, IndexRule.class, false);\n+\n+    IndexRule foundRule = null;\n+\n+    while (rules.hasNext())\n     {\n-        return loadAllSchemaRules( Predicates.alwaysTrue(), IndexRule.class, false );\n+      IndexRule candidate = rules.next();\n+      if (foundRule != null)\n+      {\n+        throw new IllegalStateException(String.format(\n+            \"Found more than one matching index rule, %s and %s\", foundRule, candidate));\n+      }\n+      foundRule = candidate;\n     }\n \n-    public Iterator<ConstraintRule> constraintsGetAll()\n+    return foundRule;\n+  }\n+\n+  public Iterator<IndexRule> indexesGetAll()\n+  {\n+    return loadAllSchemaRules(Predicates.alwaysTrue(), IndexRule.class, false);\n+  }\n+\n+  public Iterator<ConstraintRule> constraintsGetAll()\n+  {\n+    return loadAllSchemaRules(Predicates.alwaysTrue(), ConstraintRule.class, false);\n+  }\n+\n+  public Iterator<ConstraintRule> constraintsGetAllIgnoreMalformed()\n+  {\n+    return loadAllSchemaRules(Predicates.alwaysTrue(), ConstraintRule.class, true);\n+  }\n+\n+  public Iterator<ConstraintRule> constraintsGetForRelType(int relTypeId)\n+  {\n+    return loadAllSchemaRules(rule -> SchemaDescriptorPredicates.hasRelType(rule, relTypeId),\n+        ConstraintRule.class, false);\n+  }\n+\n+  public Iterator<ConstraintRule> constraintsGetForLabel(int labelId)\n+  {\n+    return loadAllSchemaRules(rule -> SchemaDescriptorPredicates.hasLabel(rule, labelId),\n+        ConstraintRule.class, false);\n+  }\n+\n+  public Iterator<ConstraintRule> constraintsGetForSchema(SchemaDescriptor schemaDescriptor)\n+  {\n+    return loadAllSchemaRules(SchemaDescriptor.equalTo(schemaDescriptor), ConstraintRule.class, false);\n+  }\n+\n+  /**\n+   * Get the constraint rule that matches the given ConstraintDescriptor\n+   *\n+   * @param descriptor the ConstraintDescriptor to match\n+   * @return the matching ConstrainRule\n+   * @throws SchemaRuleNotFoundException  if no ConstraintRule matches the given descriptor\n+   * @throws DuplicateSchemaRuleException if two or more ConstraintRules match the given descriptor\n+   */\n+  public ConstraintRule constraintsGetSingle(final ConstraintDescriptor descriptor)\n+      throws SchemaRuleNotFoundException, DuplicateSchemaRuleException\n+  {\n+    Iterator<ConstraintRule> rules = loadAllSchemaRules(descriptor::isSame, ConstraintRule.class, false);\n+\n+    if (!rules.hasNext())\n     {\n-        return loadAllSchemaRules( Predicates.alwaysTrue(), ConstraintRule.class, false );\n+      throw new SchemaRuleNotFoundException(SchemaRule.Kind.map(descriptor), descriptor.schema());\n     }\n \n-    public Iterator<ConstraintRule> constraintsGetAllIgnoreMalformed()\n-    {\n-        return loadAllSchemaRules( Predicates.alwaysTrue(), ConstraintRule.class, true );\n-    }\n+    ConstraintRule rule = rules.next();\n \n-    public Iterator<ConstraintRule> constraintsGetForRelType( int relTypeId )\n+    if (rules.hasNext())\n     {\n-        return loadAllSchemaRules( rule -> SchemaDescriptorPredicates.hasRelType( rule, relTypeId ),\n-                ConstraintRule.class, false );\n+      throw new DuplicateSchemaRuleException(SchemaRule.Kind.map(descriptor), descriptor.schema());\n     }\n-\n-    public Iterator<ConstraintRule> constraintsGetForLabel( int labelId )\n+    return rule;\n+  }\n+\n+  public Iterator<SchemaRule> loadAllSchemaRules()\n+  {\n+    return loadAllSchemaRules(Predicates.alwaysTrue(), SchemaRule.class, false);\n+  }\n+\n+  @Override\n+  public SchemaRule loadSingleSchemaRule(long ruleId) throws MalformedSchemaRuleException\n+  {\n+    Collection<DynamicRecord> records;\n+    try\n     {\n-        return loadAllSchemaRules( rule -> SchemaDescriptorPredicates.hasLabel( rule, labelId ),\n-                ConstraintRule.class, false );\n-    }\n-\n-    public Iterator<ConstraintRule> constraintsGetForSchema( SchemaDescriptor schemaDescriptor )\n+      records = schemaStore.getRecords(ruleId, RecordLoad.NORMAL);\n+    } catch (Exception e)\n     {\n-        return loadAllSchemaRules( SchemaDescriptor.equalTo( schemaDescriptor ), ConstraintRule.class, false );\n+      throw new MalformedSchemaRuleException(e.getMessage(), e);\n     }\n-\n-    /**\n-     * Get the constraint rule that matches the given ConstraintDescriptor\n-     * @param descriptor the ConstraintDescriptor to match\n-     * @return the matching ConstrainRule\n-     * @throws SchemaRuleNotFoundException if no ConstraintRule matches the given descriptor\n-     * @throws DuplicateSchemaRuleException if two or more ConstraintRules match the given descriptor\n-     */\n-    public ConstraintRule constraintsGetSingle( final ConstraintDescriptor descriptor )\n-            throws SchemaRuleNotFoundException, DuplicateSchemaRuleException\n+    return SchemaStore.readSchemaRule(ruleId, records, newRecordBuffer());\n+  }\n+\n+  /**\n+   * Scans the schema store and loads all {@link SchemaRule rules} in it. This method is written with the assumption\n+   * that there's no id reuse on schema records.\n+   *\n+   * @param predicate       filter when loading.\n+   * @param returnType      type of {@link SchemaRule} to load.\n+   * @param ignoreMalformed whether or not to ignore inconsistent records (used in concsistency checking).\n+   * @return {@link Iterator} of the loaded schema rules, lazily loaded when advancing the iterator.\n+   */\n+  <ReturnType extends SchemaRule> Iterator<ReturnType> loadAllSchemaRules(\n+      final Predicate<ReturnType> predicate,\n+      final Class<ReturnType> returnType,\n+      final boolean ignoreMalformed)\n+  {\n+    return new PrefetchingIterator<ReturnType>()\n     {\n-        Iterator<ConstraintRule> rules = loadAllSchemaRules( descriptor::isSame, ConstraintRule.class, false );\n-\n-        if ( !rules.hasNext() )\n-        {\n-            throw new SchemaRuleNotFoundException( SchemaRule.Kind.map( descriptor ), descriptor.schema() );\n-        }\n-\n-        ConstraintRule rule = rules.next();\n-\n-        if ( rules.hasNext() )\n+      private final long highestId = schemaStore.getHighestPossibleIdInUse();\n+      private long currentId = 1; /*record 0 contains the block size*/\n+      private final byte[] scratchData = newRecordBuffer();\n+      private final DynamicRecord record = schemaStore.newRecord();\n+\n+      @Override\n+      protected ReturnType fetchNextOrNull()\n+      {\n+        while (currentId <= highestId)\n         {\n-            throw new DuplicateSchemaRuleException( SchemaRule.Kind.map( descriptor ), descriptor.schema() );\n-        }\n-        return rule;\n-    }\n-\n-    public Iterator<SchemaRule> loadAllSchemaRules()\n-    {\n-        return loadAllSchemaRules( Predicates.alwaysTrue(), SchemaRule.class, false );\n-    }\n-\n-    @Override\n-    public SchemaRule loadSingleSchemaRule( long ruleId ) throws MalformedSchemaRuleException\n-    {\n-        Collection<DynamicRecord> records;\n-        try\n-        {\n-            records = schemaStore.getRecords( ruleId, RecordLoad.NORMAL );\n-        }\n-        catch ( Exception e )\n-        {\n-            throw new MalformedSchemaRuleException( e.getMessage(), e );\n-        }\n-        return SchemaStore.readSchemaRule( ruleId, records, newRecordBuffer() );\n-    }\n-\n-    /**\n-     * Scans the schema store and loads all {@link SchemaRule rules} in it. This method is written with the assumption\n-     * that there's no id reuse on schema records.\n-     *\n-     * @param predicate filter when loading.\n-     * @param returnType type of {@link SchemaRule} to load.\n-     * @param ignoreMalformed whether or not to ignore inconsistent records (used in concsistency checking).\n-     * @return {@link Iterator} of the loaded schema rules, lazily loaded when advancing the iterator.\n-     */\n-    <ReturnType extends SchemaRule> Iterator<ReturnType> loadAllSchemaRules(\n-            final Predicate<ReturnType> predicate,\n-            final Class<ReturnType> returnType,\n-            final boolean ignoreMalformed )\n-    {\n-        return new PrefetchingIterator<ReturnType>()\n-        {\n-            private final long highestId = schemaStore.getHighestPossibleIdInUse();\n-            private long currentId = 1; /*record 0 contains the block size*/\n-            private final byte[] scratchData = newRecordBuffer();\n-            private final DynamicRecord record = schemaStore.newRecord();\n-\n-            @Override\n-            protected ReturnType fetchNextOrNull()\n+          long id = currentId++;\n+          schemaStore.getRecord(id, record, RecordLoad.FORCE);\n+          if (record.inUse() && record.isStartRecord())\n+          {\n+            // It may be that concurrently to our reading there's a transaction dropping the schema rule\n+            // that we're reading and that rule may have spanned multiple dynamic records.\n+            try\n             {\n-                while ( currentId <= highestId )\n+              Collection<DynamicRecord> records;\n+              try\n+              {\n+                records = schemaStore.getRecords(id, RecordLoad.NORMAL);\n+              } catch (InvalidRecordException e)\n+              {\n+                // This may have been due to a concurrent drop of this rule.\n+                continue;\n+              }\n+\n+              SchemaRule schemaRule = SchemaStore.readSchemaRule(id, records, scratchData);\n+              if (returnType.isInstance(schemaRule))\n+              {\n+                ReturnType returnRule = returnType.cast(schemaRule);\n+                if (predicate.test(returnRule))\n                 {\n-                    long id = currentId++;\n-                    schemaStore.getRecord( id, record, RecordLoad.FORCE );\n-                    if ( record.inUse() && record.isStartRecord() )\n-                    {\n-                        // It may be that concurrently to our reading there's a transaction dropping the schema rule\n-                        // that we're reading and that rule may have spanned multiple dynamic records.\n-                        try\n-                        {\n-                            Collection<DynamicRecord> records;\n-                            try\n-                            {\n-                                records = schemaStore.getRecords( id, RecordLoad.NORMAL );\n-                            }\n-                            catch ( InvalidRecordException e )\n-                            {\n-                                // This may have been due to a concurrent drop of this rule.\n-                                continue;\n-                            }\n-\n-                            SchemaRule schemaRule = SchemaStore.readSchemaRule( id, records, scratchData );\n-                            if ( returnType.isInstance( schemaRule ) )\n-                            {\n-                                ReturnType returnRule = returnType.cast( schemaRule );\n-                                if ( predicate.test( returnRule ) )\n-                                {\n-                                    return returnRule;\n-                                }\n-                            }\n-                        }\n-                        catch ( MalformedSchemaRuleException e )\n-                        {\n-                            if ( !ignoreMalformed )\n-                            {\n-                                throw new RuntimeException( e );\n-                            }\n-                        }\n-                    }\n+                  return returnRule;\n                 }\n-                return null;\n+              }\n+            } catch (MalformedSchemaRuleException e)\n+            {\n+              if (!ignoreMalformed)\n+              {\n+                throw new RuntimeException(e);\n+              }\n             }\n-        };\n-    }\n-\n-    public long newRuleId()\n-    {\n-        return schemaStore.nextId();\n-    }\n-\n-    private byte[] newRecordBuffer()\n-    {\n-        return new byte[schemaStore.getRecordSize() * 4];\n-    }\n+          }\n+        }\n+        return null;\n+      }\n+    };\n+  }\n+\n+  public long newRuleId()\n+  {\n+    return schemaStore.nextId();\n+  }\n+\n+  private byte[] newRecordBuffer()\n+  {\n+    return new byte[schemaStore.getRecordSize() * 4];\n+  }\n }\n",
            "diff_size": 270
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4330/SchemaStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4330/SchemaStorage.java\nindex 252bdef757d..4c87dc9027a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4330/SchemaStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4330/SchemaStorage.java\n@@ -57,18 +57,17 @@ public class SchemaStorage implements SchemaRuleAccess\n     public IndexRule indexGetForSchema( final SchemaIndexDescriptor descriptor )\n     {\n         Iterator<IndexRule> rules = loadAllSchemaRules( descriptor::isSame, IndexRule.class, false );\n-\n-        IndexRule foundRule = null;\n+IndexRule foundRule = null;\n \n         while ( rules.hasNext() )\n         {\n             IndexRule candidate = rules.next();\n             if ( foundRule != null )\n             {\n-                throw new IllegalStateException( String.format(\n-                        \"Found more than one matching index rule, %s and %s\", foundRule, candidate ) );\n+                throw new IllegalStateException( String.format( \"Found more than one matching index rule, %s and %s\", foundRule, candidate ) );\n             }\n-            foundRule = candidate;\n+\n+foundRule = candidate;\n         }\n \n         return foundRule;\n@@ -91,14 +90,12 @@ public class SchemaStorage implements SchemaRuleAccess\n \n     public Iterator<ConstraintRule> constraintsGetForRelType( int relTypeId )\n     {\n-        return loadAllSchemaRules( rule -> SchemaDescriptorPredicates.hasRelType( rule, relTypeId ),\n-                ConstraintRule.class, false );\n+        return loadAllSchemaRules( rule -> SchemaDescriptorPredicates.hasRelType( rule, relTypeId ), ConstraintRule.class, false );\n     }\n \n     public Iterator<ConstraintRule> constraintsGetForLabel( int labelId )\n     {\n-        return loadAllSchemaRules( rule -> SchemaDescriptorPredicates.hasLabel( rule, labelId ),\n-                ConstraintRule.class, false );\n+        return loadAllSchemaRules( rule -> SchemaDescriptorPredicates.hasLabel( rule, labelId ), ConstraintRule.class, false );\n     }\n \n     public Iterator<ConstraintRule> constraintsGetForSchema( SchemaDescriptor schemaDescriptor )\n@@ -113,23 +110,21 @@ public class SchemaStorage implements SchemaRuleAccess\n      * @throws SchemaRuleNotFoundException if no ConstraintRule matches the given descriptor\n      * @throws DuplicateSchemaRuleException if two or more ConstraintRules match the given descriptor\n      */\n-    public ConstraintRule constraintsGetSingle( final ConstraintDescriptor descriptor )\n-            throws SchemaRuleNotFoundException, DuplicateSchemaRuleException\n-    {\n+    public ConstraintRule constraintsGetSingle( final ConstraintDescriptor descriptor ) throws SchemaRuleNotFoundException, DuplicateSchemaRuleException\n+{\n         Iterator<ConstraintRule> rules = loadAllSchemaRules( descriptor::isSame, ConstraintRule.class, false );\n-\n-        if ( !rules.hasNext() )\n+if ( !rules.hasNext() )\n         {\n             throw new SchemaRuleNotFoundException( SchemaRule.Kind.map( descriptor ), descriptor.schema() );\n         }\n \n         ConstraintRule rule = rules.next();\n-\n-        if ( rules.hasNext() )\n+if ( rules.hasNext() )\n         {\n             throw new DuplicateSchemaRuleException( SchemaRule.Kind.map( descriptor ), descriptor.schema() );\n         }\n-        return rule;\n+\n+return rule;\n     }\n \n     public Iterator<SchemaRule> loadAllSchemaRules()\n@@ -149,7 +144,8 @@ public class SchemaStorage implements SchemaRuleAccess\n         {\n             throw new MalformedSchemaRuleException( e.getMessage(), e );\n         }\n-        return SchemaStore.readSchemaRule( ruleId, records, newRecordBuffer() );\n+\n+return SchemaStore.readSchemaRule( ruleId, records, newRecordBuffer() );\n     }\n \n     /**\n@@ -161,10 +157,7 @@ public class SchemaStorage implements SchemaRuleAccess\n      * @param ignoreMalformed whether or not to ignore inconsistent records (used in concsistency checking).\n      * @return {@link Iterator} of the loaded schema rules, lazily loaded when advancing the iterator.\n      */\n-    <ReturnType extends SchemaRule> Iterator<ReturnType> loadAllSchemaRules(\n-            final Predicate<ReturnType> predicate,\n-            final Class<ReturnType> returnType,\n-            final boolean ignoreMalformed )\n+    <ReturnType extends SchemaRule> Iterator<ReturnType> loadAllSchemaRules( final Predicate<ReturnType> predicate, final Class<ReturnType> returnType, final boolean ignoreMalformed )\n     {\n         return new PrefetchingIterator<ReturnType>()\n         {\n@@ -230,4 +223,4 @@ public class SchemaStorage implements SchemaRuleAccess\n     {\n         return new byte[schemaStore.getRecordSize() * 4];\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}