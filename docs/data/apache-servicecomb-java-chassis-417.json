{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "417",
    "information": {
        "errors": [
            {
                "line": "63",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static final JavaType OBJECT_TYPE = SimpleType.constructUnsafe(Object.class);\n\n  // This configuration is used for temporary use only. Do not use it if you are sure how it works. And may be deleted in future.\n  private static boolean decodeAsObject = DynamicPropertyFactory.getInstance()\n      .getBooleanProperty(\"servicecomb.rest.parameter.decodeAsObject\", false).get();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/417/BodyProcessorCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/417/BodyProcessorCreator.java\nindex 5d92d3dddff..738c94ef145 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/417/BodyProcessorCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/417/BodyProcessorCreator.java\n@@ -155,7 +155,7 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n      * Deserialize body object into body buffer, according to the Content-Type.\n      *\n      * @param contentType the Content-Type of request\n-     * @param arg body param object\n+     * @param arg         body param object\n      * @return the deserialized body buffer\n      * @throws IOException\n      */\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/417/BodyProcessorCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/417/BodyProcessorCreator.java\nindex 5d92d3dddff..58b9f75f86a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/417/BodyProcessorCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/417/BodyProcessorCreator.java\n@@ -124,9 +124,7 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n         return IOUtils.toString(inputStream, StandardCharsets.UTF_8);\n       }\n       try {\n-        ObjectReader reader = serialViewClass != null\n-            ? RestObjectMapperFactory.getRestObjectMapper().readerWithView(serialViewClass)\n-            : RestObjectMapperFactory.getRestObjectMapper().reader();\n+        ObjectReader reader = serialViewClass != null ? RestObjectMapperFactory.getRestObjectMapper().readerWithView(serialViewClass) : RestObjectMapperFactory.getRestObjectMapper().reader();\n         if (decodeAsObject) {\n           return reader.forType(OBJECT_TYPE).readValue(inputStream);\n         }\n@@ -246,7 +244,8 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n \n     JavaType targetType =\n         genericParamType == null ? null : TypeFactory.defaultInstance().constructType(genericParamType);\n-    boolean rawJson = SwaggerUtils.isRawJsonType(parameter);\n+\n+boolean rawJson = SwaggerUtils.isRawJsonType(parameter);\n     if (rawJson) {\n       return new RawJsonBodyProcessor(targetType, (String) parameter.getVendorExtensions()\n           .get(SwaggerConst.EXT_JSON_VIEW), isString, parameter.getRequired());\n@@ -255,4 +254,4 @@ public class BodyProcessorCreator implements ParamValueProcessorCreator {\n     return new BodyProcessor(targetType, (String) parameter.getVendorExtensions()\n         .get(SwaggerConst.EXT_JSON_VIEW), isString, parameter.getRequired());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}