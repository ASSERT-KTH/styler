{
    "project_name": "h2database-h2database",
    "error_id": "190",
    "information": {
        "errors": [
            {
                "line": "375",
                "column": "11",
                "severity": "warning",
                "message": "'catch' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                }\n            }\n        } catch(Throwable another) {\n            if (e == null) {\n                try {\n                    e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/190/TraceObject.java\nindex 02e995e4d38..e6396e65bba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/190/TraceObject.java\n@@ -372,7 +372,7 @@ public abstract class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/190/TraceObject.java\nindex 02e995e4d38..e5766bb6a72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/190/TraceObject.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.message;\n \n import java.math.BigDecimal;\n@@ -101,9 +102,9 @@ public abstract class TraceObject {\n     private static final int LAST = SQLXML + 1;\n     private static final AtomicIntegerArray ID = new AtomicIntegerArray(LAST);\n \n-    private static final String[] PREFIX = { \"call\", \"conn\", \"dbMeta\", \"prep\",\n+    private static final String[] PREFIX = {\"call\", \"conn\", \"dbMeta\", \"prep\",\n             \"rs\", \"rsMeta\", \"sp\", \"ex\", \"stat\", \"blob\", \"clob\", \"pMeta\", \"ds\",\n-            \"xads\", \"xares\", \"xid\", \"ar\", \"sqlxml\" };\n+            \"xads\", \"xares\", \"xid\", \"ar\", \"sqlxml\"};\n \n     private static final SQLException SQL_OOME = DbException.SQL_OOME;\n \n@@ -119,8 +120,8 @@ public abstract class TraceObject {\n      * Set the options to use when writing trace message.\n      *\n      * @param trace the trace object\n-     * @param type the trace object type\n-     * @param id the trace object id\n+     * @param type  the trace object type\n+     * @param id    the trace object id\n      */\n     protected void setTrace(Trace trace, int type, int id) {\n         this.trace = trace;\n@@ -175,14 +176,15 @@ public abstract class TraceObject {\n      * className prefixId = objectName.value.\n      *\n      * @param className the class name of the result\n-     * @param newType the prefix type\n-     * @param newId the trace object id of the created object\n-     * @param value the value to assign this new object to\n+     * @param newType   the prefix type\n+     * @param newId     the trace object id of the created object\n+     * @param value     the value to assign this new object to\n      */\n     protected void debugCodeAssign(String className, int newType, int newId,\n-            String value) {\n+                                   String value) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(className + ' ' + PREFIX[newType] + newId + \" = \" + getTraceObjectName() + '.' + value\n+            trace.debugCode(className + ' ' + PREFIX[newType] + newId + \" = \" +\n+                    getTraceObjectName() + '.' + value\n                     + ';');\n         }\n     }\n@@ -205,11 +207,13 @@ public abstract class TraceObject {\n      * value.\n      *\n      * @param methodName the method name\n-     * @param param one single long parameter\n+     * @param param      one single long parameter\n      */\n     protected void debugCodeCall(String methodName, long param) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + '.' + methodName + '(' + param + \");\");\n+            trace.debugCode(\n+                    getTraceObjectName() + '.' + methodName + '(' + param +\n+                            \");\");\n         }\n     }\n \n@@ -219,11 +223,12 @@ public abstract class TraceObject {\n      * string.\n      *\n      * @param methodName the method name\n-     * @param param one single string parameter\n+     * @param param      one single string parameter\n      */\n     protected void debugCodeCall(String methodName, String param) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + '.' + methodName + '(' + quote(param) + \");\");\n+            trace.debugCode(getTraceObjectName() + '.' + methodName + '(' +\n+                    quote(param) + \");\");\n         }\n     }\n \n@@ -312,7 +317,8 @@ public abstract class TraceObject {\n         }\n         StringBuilder builder = new StringBuilder(x.length * 2 + 45)\n                 .append(\"org.h2.util.StringUtils.convertHexToBytes(\\\"\");\n-        return StringUtils.convertBytesToHex(builder, x).append(\"\\\")\").toString();\n+        return StringUtils.convertBytesToHex(builder, x).append(\"\\\")\")\n+                .toString();\n     }\n \n     /**\n@@ -372,10 +378,11 @@ public abstract class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n-                    e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n+                    e = new SQLException(\"GeneralError\", \"HY000\",\n+                            ErrorCode.GENERAL_ERROR_1, ex);\n                 } catch (OutOfMemoryError | NoClassDefFoundError ignored) {\n                     return SQL_OOME;\n                 }\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/190/TraceObject.java\nindex 02e995e4d38..7a1077620b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/190/TraceObject.java\n@@ -372,7 +372,7 @@ public abstract class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n@@ -399,4 +399,4 @@ public abstract class TraceObject {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/190/TraceObject.java\nindex 02e995e4d38..25da09db567 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/codebuff/190/TraceObject.java\n@@ -9,109 +9,157 @@ import java.math.BigDecimal;\n import java.sql.SQLException;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicIntegerArray;\n-\n import org.h2.api.ErrorCode;\n import org.h2.util.StringUtils;\n \n /**\n  * The base class for objects that can print trace information about themselves.\n  */\n+\n+\n public abstract class TraceObject {\n \n     /**\n      * The trace type id  for callable statements.\n      */\n+\n+\n     protected static final int CALLABLE_STATEMENT = 0;\n \n     /**\n      * The trace type id  for connections.\n      */\n+\n+\n     protected static final int CONNECTION = 1;\n \n     /**\n      * The trace type id  for database meta data objects.\n      */\n+\n+\n     protected static final int DATABASE_META_DATA = 2;\n \n     /**\n      * The trace type id  for prepared statements.\n      */\n+\n+\n     protected static final int PREPARED_STATEMENT = 3;\n \n     /**\n      * The trace type id  for result sets.\n      */\n+\n+\n     protected static final int RESULT_SET = 4;\n \n     /**\n      * The trace type id  for result set meta data objects.\n      */\n+\n+\n     protected static final int RESULT_SET_META_DATA = 5;\n \n     /**\n      * The trace type id  for savepoint objects.\n      */\n+\n+\n     protected static final int SAVEPOINT = 6;\n \n     /**\n      * The trace type id  for statements.\n      */\n+\n+\n     protected static final int STATEMENT = 8;\n \n     /**\n      * The trace type id  for blobs.\n      */\n+\n+\n     protected static final int BLOB = 9;\n \n     /**\n      * The trace type id  for clobs.\n      */\n+\n+\n     protected static final int CLOB = 10;\n \n     /**\n      * The trace type id  for parameter meta data objects.\n      */\n+\n+\n     protected static final int PARAMETER_META_DATA = 11;\n \n     /**\n      * The trace type id  for data sources.\n      */\n+\n+\n     protected static final int DATA_SOURCE = 12;\n \n     /**\n      * The trace type id  for XA data sources.\n      */\n+\n+\n     protected static final int XA_DATA_SOURCE = 13;\n \n     /**\n      * The trace type id  for transaction ids.\n      */\n+\n+\n     protected static final int XID = 15;\n \n     /**\n      * The trace type id  for array objects.\n      */\n+\n+\n     protected static final int ARRAY = 16;\n \n     /**\n      * The trace type id  for SQLXML objects.\n      */\n-    protected static final int SQLXML = 17;\n \n+\n+    protected static final int SQLXML = 17;\n     private static final int LAST = SQLXML + 1;\n     private static final AtomicIntegerArray ID = new AtomicIntegerArray(LAST);\n-\n-    private static final String[] PREFIX = { \"call\", \"conn\", \"dbMeta\", \"prep\",\n-            \"rs\", \"rsMeta\", \"sp\", \"ex\", \"stat\", \"blob\", \"clob\", \"pMeta\", \"ds\",\n-            \"xads\", \"xares\", \"xid\", \"ar\", \"sqlxml\" };\n-\n+    private static final String[] PREFIX = {\n+        \"call\",\n+        \"conn\",\n+        \"dbMeta\",\n+        \"prep\",\n+        \"rs\",\n+        \"rsMeta\",\n+        \"sp\",\n+        \"ex\",\n+        \"stat\",\n+        \"blob\",\n+        \"clob\",\n+        \"pMeta\",\n+        \"ds\",\n+        \"xads\",\n+        \"xares\",\n+        \"xid\",\n+        \"ar\",\n+        \"sqlxml\"\n+    };\n     private static final SQLException SQL_OOME = DbException.SQL_OOME;\n \n     /**\n      * The trace module used by this object.\n      */\n-    protected Trace trace;\n \n+\n+    protected Trace trace;\n     private int traceType;\n     private int id;\n \n@@ -122,6 +170,8 @@ public abstract class TraceObject {\n      * @param type the trace object type\n      * @param id the trace object id\n      */\n+\n+\n     protected void setTrace(Trace trace, int type, int id) {\n         this.trace = trace;\n         this.traceType = type;\n@@ -131,6 +181,8 @@ public abstract class TraceObject {\n     /**\n      * INTERNAL\n      */\n+\n+\n     public int getTraceId() {\n         return id;\n     }\n@@ -138,6 +190,8 @@ public abstract class TraceObject {\n     /**\n      * INTERNAL\n      */\n+\n+\n     public String getTraceObjectName() {\n         return PREFIX[traceType] + id;\n     }\n@@ -148,6 +202,8 @@ public abstract class TraceObject {\n      * @param type the object type\n      * @return the new trace object id\n      */\n+\n+\n     protected static int getNextId(int type) {\n         return ID.getAndIncrement(type);\n     }\n@@ -157,6 +213,8 @@ public abstract class TraceObject {\n      *\n      * @return true if it is\n      */\n+\n+\n     protected boolean isDebugEnabled() {\n         return trace.isDebugEnabled();\n     }\n@@ -166,6 +224,8 @@ public abstract class TraceObject {\n      *\n      * @return true if it is\n      */\n+\n+\n     protected boolean isInfoEnabled() {\n         return trace.isInfoEnabled();\n     }\n@@ -179,11 +239,12 @@ public abstract class TraceObject {\n      * @param newId the trace object id of the created object\n      * @param value the value to assign this new object to\n      */\n-    protected void debugCodeAssign(String className, int newType, int newId,\n-            String value) {\n+\n+\n+    protected void debugCodeAssign(String className, int newType, int newId, String value) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(className + ' ' + PREFIX[newType] + newId + \" = \" + getTraceObjectName() + '.' + value\n-                    + ';');\n+            trace.debugCode(className + ' ' + PREFIX[newType] + newId + \" = \"\n+            + getTraceObjectName() + '.' + value + ';');\n         }\n     }\n \n@@ -193,6 +254,8 @@ public abstract class TraceObject {\n      *\n      * @param methodName the method name\n      */\n+\n+\n     protected void debugCodeCall(String methodName) {\n         if (trace.isDebugEnabled()) {\n             trace.debugCode(getTraceObjectName() + '.' + methodName + \"();\");\n@@ -207,6 +270,8 @@ public abstract class TraceObject {\n      * @param methodName the method name\n      * @param param one single long parameter\n      */\n+\n+\n     protected void debugCodeCall(String methodName, long param) {\n         if (trace.isDebugEnabled()) {\n             trace.debugCode(getTraceObjectName() + '.' + methodName + '(' + param + \");\");\n@@ -221,6 +286,8 @@ public abstract class TraceObject {\n      * @param methodName the method name\n      * @param param one single string parameter\n      */\n+\n+\n     protected void debugCodeCall(String methodName, String param) {\n         if (trace.isDebugEnabled()) {\n             trace.debugCode(getTraceObjectName() + '.' + methodName + '(' + quote(param) + \");\");\n@@ -232,6 +299,8 @@ public abstract class TraceObject {\n      *\n      * @param text the trace text\n      */\n+\n+\n     protected void debugCode(String text) {\n         if (trace.isDebugEnabled()) {\n             trace.debugCode(getTraceObjectName() + '.' + text);\n@@ -244,6 +313,8 @@ public abstract class TraceObject {\n      * @param s the string to convert\n      * @return the Java string literal\n      */\n+\n+\n     protected static String quote(String s) {\n         return StringUtils.quoteJavaString(s);\n     }\n@@ -254,6 +325,8 @@ public abstract class TraceObject {\n      * @param x the time to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteTime(java.sql.Time x) {\n         if (x == null) {\n             return \"null\";\n@@ -267,6 +340,8 @@ public abstract class TraceObject {\n      * @param x the timestamp to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteTimestamp(java.sql.Timestamp x) {\n         if (x == null) {\n             return \"null\";\n@@ -280,6 +355,8 @@ public abstract class TraceObject {\n      * @param x the date to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteDate(java.sql.Date x) {\n         if (x == null) {\n             return \"null\";\n@@ -293,6 +370,8 @@ public abstract class TraceObject {\n      * @param x the big decimal to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteBigDecimal(BigDecimal x) {\n         if (x == null) {\n             return \"null\";\n@@ -306,12 +385,13 @@ public abstract class TraceObject {\n      * @param x the byte array to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteBytes(byte[] x) {\n         if (x == null) {\n             return \"null\";\n         }\n-        StringBuilder builder = new StringBuilder(x.length * 2 + 45)\n-                .append(\"org.h2.util.StringUtils.convertHexToBytes(\\\"\");\n+        StringBuilder builder = new StringBuilder(x.length * 2 + 45).append(\"org.h2.util.StringUtils.convertHexToBytes(\\\"\");\n         return StringUtils.convertBytesToHex(builder, x).append(\"\\\")\").toString();\n     }\n \n@@ -322,6 +402,8 @@ public abstract class TraceObject {\n      * @param s the string array to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteArray(String[] s) {\n         return StringUtils.quoteJavaStringArray(s);\n     }\n@@ -332,6 +414,8 @@ public abstract class TraceObject {\n      * @param s the int array to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteIntArray(int[] s) {\n         return StringUtils.quoteJavaIntArray(s);\n     }\n@@ -342,6 +426,8 @@ public abstract class TraceObject {\n      * @param map the map to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteMap(Map<String, Class<?>> map) {\n         if (map == null) {\n             return \"null\";\n@@ -358,6 +444,8 @@ public abstract class TraceObject {\n      * @param ex the exception\n      * @return the SQL exception object\n      */\n+\n+\n     protected SQLException logAndConvert(Throwable ex) {\n         SQLException e = null;\n         try {\n@@ -372,7 +460,7 @@ public abstract class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n@@ -391,6 +479,8 @@ public abstract class TraceObject {\n      * @param message the message\n      * @return the SQL exception\n      */\n+\n+\n     protected SQLException unsupported(String message) {\n         try {\n             throw DbException.getUnsupportedException(message);\n@@ -399,4 +489,4 @@ public abstract class TraceObject {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 110
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/190/TraceObject.java\nindex 02e995e4d38..e6396e65bba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/190/TraceObject.java\n@@ -372,7 +372,7 @@ public abstract class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/190/TraceObject.java\nindex 02e995e4d38..e6396e65bba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/190/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/190/TraceObject.java\n@@ -372,7 +372,7 @@ public abstract class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}