{
    "project_name": "Roboy-roboy_dialog",
    "error_id": "13",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "43",
                "severity": "error",
                "message": "'{' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "  }\n\n  private static final String[] numbers = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n      \"nine\", \"ten\" };\n\n  @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler/13/DALAnalyzer.java\nindex 69efaadbedd..3ac2581f1ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler/13/DALAnalyzer.java\n@@ -23,7 +23,7 @@ public class DALAnalyzer extends LanguageAnalyzer {\n     return buf.toString();\n   }\n \n-  private static final String[] numbers = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n+  private static final String[] numbers = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n       \"nine\", \"ten\" };\n \n   @Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/intellij/13/DALAnalyzer.java\nindex 69efaadbedd..cdd314a3013 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/intellij/13/DALAnalyzer.java\n@@ -11,111 +11,120 @@ import edu.stanford.nlp.sempre.LanguageInfo;\n  * @author sidaw\n  */\n public class DALAnalyzer extends LanguageAnalyzer {\n-  // Stanford tokenizer doesn't break hyphens.\n-  // Replace hypens with spaces for utterances like\n-  // \"Spanish-speaking countries\" but not for \"2012-03-28\".\n-  public static String breakHyphens(String utterance) {\n-    StringBuilder buf = new StringBuilder(utterance);\n-    for (int i = 0; i < buf.length(); i++) {\n-      if (buf.charAt(i) == '-' && (i + 1 < buf.length() && Character.isLetter(buf.charAt(i + 1))))\n-        buf.setCharAt(i, ' ');\n+    // Stanford tokenizer doesn't break hyphens.\n+    // Replace hypens with spaces for utterances like\n+    // \"Spanish-speaking countries\" but not for \"2012-03-28\".\n+    public static String breakHyphens(String utterance) {\n+        StringBuilder buf = new StringBuilder(utterance);\n+        for (int i = 0; i < buf.length(); i++) {\n+            if (buf.charAt(i) == '-' && (i + 1 < buf.length() && Character.isLetter(buf.charAt(i + 1)))) {\n+                buf.setCharAt(i, ' ');\n+            }\n+        }\n+        return buf.toString();\n     }\n-    return buf.toString();\n-  }\n \n-  private static final String[] numbers = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n-      \"nine\", \"ten\" };\n+    private static final String[] numbers = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n+        \"nine\", \"ten\"};\n \n-  @Override\n-  public LanguageInfo analyze(String utterance) {\n-    LanguageInfo languageInfo = new LanguageInfo();\n+    @Override\n+    public LanguageInfo analyze(String utterance) {\n+        LanguageInfo languageInfo = new LanguageInfo();\n \n-    // Clear these so that analyze can hypothetically be called\n-    // multiple times.\n-    languageInfo.tokens.clear();\n-    languageInfo.posTags.clear();\n-    languageInfo.nerTags.clear();\n-    languageInfo.nerValues.clear();\n-    languageInfo.lemmaTokens.clear();\n+        // Clear these so that analyze can hypothetically be called\n+        // multiple times.\n+        languageInfo.tokens.clear();\n+        languageInfo.posTags.clear();\n+        languageInfo.nerTags.clear();\n+        languageInfo.nerValues.clear();\n+        languageInfo.lemmaTokens.clear();\n \n-    // Break hyphens\n-    utterance = breakHyphens(utterance);\n+        // Break hyphens\n+        utterance = breakHyphens(utterance);\n \n-    // Default analysis - create tokens crudely\n-    StringBuilder buf = new StringBuilder();\n-    for (int i = 0; i < utterance.length(); i++) {\n-      char c = utterance.charAt(i);\n-      // Put whitespace around certain characters.\n-      boolean boundaryBefore = !(i - 1 >= 0) || utterance.charAt(i - 1) == ' ';\n-      boolean boundaryAfter = !(i + 1 < utterance.length()) || utterance.charAt(i + 1) == ' ';\n-      boolean separate = false;\n-      if (c == '.') // Break off period if already space around it (to preserve\n-                    // numbers like 3.5)\n-        separate = boundaryBefore || boundaryAfter;\n-      else if (c == '=') // separate all >, =, < except >=, <=\n-        separate = !(i - 1 >= 0) || ((utterance.charAt(i - 1) != '>' && utterance.charAt(i - 1) != '<'));\n-      else if (c == '>' || c == '<')\n-        separate = !(i + 1 < utterance.length())\n-            || ((utterance.charAt(i + 1) != '=' && utterance.charAt(i + 1) != '='));\n-      else\n-        separate = (\",?'\\\"[];{}+-\".indexOf(c) != -1);\n+        // Default analysis - create tokens crudely\n+        StringBuilder buf = new StringBuilder();\n+        for (int i = 0; i < utterance.length(); i++) {\n+            char c = utterance.charAt(i);\n+            // Put whitespace around certain characters.\n+            boolean boundaryBefore = !(i - 1 >= 0) || utterance.charAt(i - 1) == ' ';\n+            boolean boundaryAfter = !(i + 1 < utterance.length()) || utterance.charAt(i + 1) == ' ';\n+            boolean separate = false;\n+            if (c == '.') // Break off period if already space around it (to preserve\n+            // numbers like 3.5)\n+            {\n+                separate = boundaryBefore || boundaryAfter;\n+            } else if (c == '=') // separate all >, =, < except >=, <=\n+            {\n+                separate = !(i - 1 >= 0) || ((utterance.charAt(i - 1) != '>' && utterance.charAt(i - 1) != '<'));\n+            } else if (c == '>' || c == '<') {\n+                separate = !(i + 1 < utterance.length())\n+                    || ((utterance.charAt(i + 1) != '=' && utterance.charAt(i + 1) != '='));\n+            } else {\n+                separate = (\",?'\\\"[];{}+-\".indexOf(c) != -1);\n+            }\n \n-      if (separate)\n-        buf.append(' ');\n-      // Convert quotes\n-      if (c == '\"')\n-        buf.append(boundaryBefore ? \"``\" : \"''\");\n-      else if (c == '\\'')\n-        buf.append(boundaryBefore ? \"`\" : \"'\");\n-      else if (c == '>' || c == '<') {\n-        buf.append(' ');\n-        buf.append(c);\n-      } else if (c == '=') {\n-        buf.append(c);\n-        buf.append(' ');\n-      } else\n-        buf.append(c);\n-      if (separate)\n-        buf.append(' ');\n-    }\n-    utterance = buf.toString().trim();\n-    if (!utterance.equals(\"\")) {\n-      String[] tokens = utterance.split(\"\\\\s+\");\n-      for (String token : tokens) {\n-        String lemma = token;\n-        if (token.endsWith(\"s\") && token.length() > 1)\n-          lemma = token.substring(0, token.length() - 1);\n+            if (separate) {\n+                buf.append(' ');\n+            }\n+            // Convert quotes\n+            if (c == '\"') {\n+                buf.append(boundaryBefore ? \"``\" : \"''\");\n+            } else if (c == '\\'') {\n+                buf.append(boundaryBefore ? \"`\" : \"'\");\n+            } else if (c == '>' || c == '<') {\n+                buf.append(' ');\n+                buf.append(c);\n+            } else if (c == '=') {\n+                buf.append(c);\n+                buf.append(' ');\n+            } else {\n+                buf.append(c);\n+            }\n+            if (separate) {\n+                buf.append(' ');\n+            }\n+        }\n+        utterance = buf.toString().trim();\n+        if (!utterance.equals(\"\")) {\n+            String[] tokens = utterance.split(\"\\\\s+\");\n+            for (String token : tokens) {\n+                String lemma = token;\n+                if (token.endsWith(\"s\") && token.length() > 1) {\n+                    lemma = token.substring(0, token.length() - 1);\n+                }\n \n-        languageInfo.tokens.add(LanguageAnalyzer.opts.lowerCaseTokens ? token.toLowerCase() : token);\n-        languageInfo.lemmaTokens.add(LanguageAnalyzer.opts.lowerCaseTokens ? lemma.toLowerCase() : lemma);\n+                languageInfo.tokens.add(LanguageAnalyzer.opts.lowerCaseTokens ? token.toLowerCase() : token);\n+                languageInfo.lemmaTokens.add(LanguageAnalyzer.opts.lowerCaseTokens ? lemma.toLowerCase() : lemma);\n \n-        // Is it a written out number?\n-        int x = Arrays.asList(numbers).indexOf(token);\n-        if (x != -1) {\n-          languageInfo.posTags.add(\"CD\");\n-          languageInfo.nerTags.add(\"NUMBER\");\n-          languageInfo.nerValues.add(x + \"\");\n-          continue;\n-        }\n+                // Is it a written out number?\n+                int x = Arrays.asList(numbers).indexOf(token);\n+                if (x != -1) {\n+                    languageInfo.posTags.add(\"CD\");\n+                    languageInfo.nerTags.add(\"NUMBER\");\n+                    languageInfo.nerValues.add(x + \"\");\n+                    continue;\n+                }\n \n-        try {\n-          Double.parseDouble(token);\n-          languageInfo.posTags.add(\"CD\");\n-          languageInfo.nerTags.add(\"NUMBER\");\n-          languageInfo.nerValues.add(token);\n-        } catch (NumberFormatException e) {\n-          // Guess that capitalized nouns are proper\n-          if (Character.isUpperCase(token.charAt(0)))\n-            languageInfo.posTags.add(\"NNP\");\n-          else if (token.equals(\"'\") || token.equals(\"\\\"\") || token.equals(\"''\") || token.equals(\"``\"))\n-            languageInfo.posTags.add(\"''\");\n-          else\n-            languageInfo.posTags.add(\"UNK\");\n-          languageInfo.nerTags.add(\"UNK\");\n-          languageInfo.nerValues.add(\"UNK\");\n+                try {\n+                    Double.parseDouble(token);\n+                    languageInfo.posTags.add(\"CD\");\n+                    languageInfo.nerTags.add(\"NUMBER\");\n+                    languageInfo.nerValues.add(token);\n+                } catch (NumberFormatException e) {\n+                    // Guess that capitalized nouns are proper\n+                    if (Character.isUpperCase(token.charAt(0))) {\n+                        languageInfo.posTags.add(\"NNP\");\n+                    } else if (token.equals(\"'\") || token.equals(\"\\\"\") || token.equals(\"''\") || token.equals(\"``\")) {\n+                        languageInfo.posTags.add(\"''\");\n+                    } else {\n+                        languageInfo.posTags.add(\"UNK\");\n+                    }\n+                    languageInfo.nerTags.add(\"UNK\");\n+                    languageInfo.nerValues.add(\"UNK\");\n+                }\n+            }\n         }\n-      }\n+        return languageInfo;\n     }\n-    return languageInfo;\n-  }\n }\n",
            "diff_size": 108
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/codebuff/13/DALAnalyzer.java\nindex 69efaadbedd..a138ad0e0d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/codebuff/13/DALAnalyzer.java\n@@ -1,7 +1,6 @@\n package edu.stanford.nlp.sempre.interactive;\n \n import java.util.Arrays;\n-\n import edu.stanford.nlp.sempre.LanguageAnalyzer;\n import edu.stanford.nlp.sempre.LanguageInfo;\n \n@@ -10,6 +9,8 @@ import edu.stanford.nlp.sempre.LanguageInfo;\n  *\n  * @author sidaw\n  */\n+\n+\n public class DALAnalyzer extends LanguageAnalyzer {\n   // Stanford tokenizer doesn't break hyphens.\n   // Replace hypens with spaces for utterances like\n@@ -23,9 +24,7 @@ public class DALAnalyzer extends LanguageAnalyzer {\n     return buf.toString();\n   }\n \n-  private static final String[] numbers = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n-      \"nine\", \"ten\" };\n-\n+  private static final String[] numbers = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"ten\"};\n   @Override\n   public LanguageInfo analyze(String utterance) {\n     LanguageInfo languageInfo = new LanguageInfo();\n@@ -42,6 +41,7 @@ public class DALAnalyzer extends LanguageAnalyzer {\n     utterance = breakHyphens(utterance);\n \n     // Default analysis - create tokens crudely\n+\n     StringBuilder buf = new StringBuilder();\n     for (int i = 0; i < utterance.length(); i++) {\n       char c = utterance.charAt(i);\n@@ -55,11 +55,9 @@ public class DALAnalyzer extends LanguageAnalyzer {\n       else if (c == '=') // separate all >, =, < except >=, <=\n         separate = !(i - 1 >= 0) || ((utterance.charAt(i - 1) != '>' && utterance.charAt(i - 1) != '<'));\n       else if (c == '>' || c == '<')\n-        separate = !(i + 1 < utterance.length())\n-            || ((utterance.charAt(i + 1) != '=' && utterance.charAt(i + 1) != '='));\n+        separate = !(i + 1 < utterance.length()) || ((utterance.charAt(i + 1) != '=' && utterance.charAt(i + 1) != '='));\n       else\n         separate = (\",?'\\\"[];{}+-\".indexOf(c) != -1);\n-\n       if (separate)\n         buf.append(' ');\n       // Convert quotes\n@@ -68,13 +66,12 @@ public class DALAnalyzer extends LanguageAnalyzer {\n       else if (c == '\\'')\n         buf.append(boundaryBefore ? \"`\" : \"'\");\n       else if (c == '>' || c == '<') {\n-        buf.append(' ');\n-        buf.append(c);\n-      } else if (c == '=') {\n-        buf.append(c);\n-        buf.append(' ');\n-      } else\n-        buf.append(c);\n+      buf.append(' ');\n+      buf.append(c);\n+           } else if (c == '=') {\n+             buf.append(c);\n+             buf.append(' ');\n+           } else buf.append(c);\n       if (separate)\n         buf.append(' ');\n     }\n@@ -85,7 +82,6 @@ public class DALAnalyzer extends LanguageAnalyzer {\n         String lemma = token;\n         if (token.endsWith(\"s\") && token.length() > 1)\n           lemma = token.substring(0, token.length() - 1);\n-\n         languageInfo.tokens.add(LanguageAnalyzer.opts.lowerCaseTokens ? token.toLowerCase() : token);\n         languageInfo.lemmaTokens.add(LanguageAnalyzer.opts.lowerCaseTokens ? lemma.toLowerCase() : lemma);\n \n@@ -118,4 +114,4 @@ public class DALAnalyzer extends LanguageAnalyzer {\n     }\n     return languageInfo;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_random/13/DALAnalyzer.java\nindex 69efaadbedd..3ac2581f1ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_random/13/DALAnalyzer.java\n@@ -23,7 +23,7 @@ public class DALAnalyzer extends LanguageAnalyzer {\n     return buf.toString();\n   }\n \n-  private static final String[] numbers = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n+  private static final String[] numbers = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n       \"nine\", \"ten\" };\n \n   @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_three_grams/13/DALAnalyzer.java\nindex 69efaadbedd..3ac2581f1ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/13/DALAnalyzer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_three_grams/13/DALAnalyzer.java\n@@ -23,7 +23,7 @@ public class DALAnalyzer extends LanguageAnalyzer {\n     return buf.toString();\n   }\n \n-  private static final String[] numbers = { \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n+  private static final String[] numbers = {\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\",\n       \"nine\", \"ten\" };\n \n   @Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}