{
    "project_name": "graphfoundation-ongdb",
    "error_id": "629",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "83",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "112",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/629/PropertyChain.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/629/PropertyChain.java\nindex f94a4a3a4e8..6f4eb18837a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/629/PropertyChain.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/629/PropertyChain.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import java.util.Iterator;\n@@ -32,89 +33,87 @@ import org.neo4j.kernel.impl.store.record.PropertyRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n \n public class PropertyChain<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-        implements RecordField<RECORD,REPORT>, ComparativeRecordChecker<RECORD, PropertyRecord, REPORT>\n+    implements RecordField<RECORD, REPORT>, ComparativeRecordChecker<RECORD, PropertyRecord, REPORT>\n {\n-    private final Function<RECORD,MandatoryProperties.Check<RECORD,REPORT>> mandatoryProperties;\n+  private final Function<RECORD, MandatoryProperties.Check<RECORD, REPORT>> mandatoryProperties;\n \n-    public PropertyChain( Function<RECORD,MandatoryProperties.Check<RECORD,REPORT>> mandatoryProperties )\n-    {\n-        this.mandatoryProperties = mandatoryProperties;\n-    }\n+  public PropertyChain(Function<RECORD, MandatoryProperties.Check<RECORD, REPORT>> mandatoryProperties)\n+  {\n+    this.mandatoryProperties = mandatoryProperties;\n+  }\n \n-    @Override\n-    public void checkConsistency( RECORD record, CheckerEngine<RECORD, REPORT> engine,\n-                                  RecordAccess records )\n+  @Override\n+  public void checkConsistency(RECORD record, CheckerEngine<RECORD, REPORT> engine,\n+                               RecordAccess records)\n+  {\n+    if (!Record.NO_NEXT_PROPERTY.is(record.getNextProp()))\n     {\n-        if ( !Record.NO_NEXT_PROPERTY.is( record.getNextProp() ) )\n-        {\n-            // Check the whole chain here instead of scattered during multiple checks.\n-            // This type of check obviously favors chains with good locality, performance-wise.\n-            Iterator<PropertyRecord> props = records.rawPropertyChain( record.getNextProp() );\n-            PropertyRecord firstProp = props.next();\n-            if ( !Record.NO_PREVIOUS_PROPERTY.is( firstProp.getPrevProp() ) )\n-            {\n-                engine.report().propertyNotFirstInChain( firstProp );\n-            }\n+      // Check the whole chain here instead of scattered during multiple checks.\n+      // This type of check obviously favors chains with good locality, performance-wise.\n+      Iterator<PropertyRecord> props = records.rawPropertyChain(record.getNextProp());\n+      PropertyRecord firstProp = props.next();\n+      if (!Record.NO_PREVIOUS_PROPERTY.is(firstProp.getPrevProp()))\n+      {\n+        engine.report().propertyNotFirstInChain(firstProp);\n+      }\n \n-            try ( PrimitiveIntSet keys = Primitive.intSet();\n-                  MandatoryProperties.Check<RECORD,REPORT> mandatory = mandatoryProperties.apply( record ) )\n-            {\n-                checkChainItem( firstProp, engine, keys, mandatory );\n+      try (PrimitiveIntSet keys = Primitive.intSet();\n+           MandatoryProperties.Check<RECORD, REPORT> mandatory = mandatoryProperties.apply(record))\n+      {\n+        checkChainItem(firstProp, engine, keys, mandatory);\n \n-                // Check the whole chain here. We also take the opportunity to check mandatory property constraints.\n-                while ( props.hasNext() )\n-                {\n-                    checkChainItem( props.next(), engine, keys, mandatory );\n-                }\n-            }\n+        // Check the whole chain here. We also take the opportunity to check mandatory property constraints.\n+        while (props.hasNext())\n+        {\n+          checkChainItem(props.next(), engine, keys, mandatory);\n         }\n+      }\n     }\n+  }\n \n-    private void checkChainItem( PropertyRecord property, CheckerEngine<RECORD,REPORT> engine,\n-            PrimitiveIntSet keys, MandatoryProperties.Check<RECORD,REPORT> mandatory )\n+  private void checkChainItem(PropertyRecord property, CheckerEngine<RECORD, REPORT> engine,\n+                              PrimitiveIntSet keys, MandatoryProperties.Check<RECORD, REPORT> mandatory)\n+  {\n+    if (!property.inUse())\n     {\n-        if ( !property.inUse() )\n-        {\n-            engine.report().propertyNotInUse( property );\n-        }\n-        else\n+      engine.report().propertyNotInUse(property);\n+    } else\n+    {\n+      int[] keysInRecord = ChainCheck.keys(property);\n+      if (mandatory != null)\n+      {\n+        mandatory.receive(keysInRecord);\n+      }\n+      for (int key : keysInRecord)\n+      {\n+        if (!keys.add(key))\n         {\n-            int[] keysInRecord = ChainCheck.keys( property );\n-            if ( mandatory != null )\n-            {\n-                mandatory.receive( keysInRecord );\n-            }\n-            for ( int key : keysInRecord )\n-            {\n-                if ( !keys.add( key ) )\n-                {\n-                    engine.report().propertyKeyNotUniqueInChain();\n-                }\n-            }\n+          engine.report().propertyKeyNotUniqueInChain();\n         }\n+      }\n     }\n+  }\n \n-    @Override\n-    public long valueFrom( RECORD record )\n-    {\n-        return record.getNextProp();\n-    }\n+  @Override\n+  public long valueFrom(RECORD record)\n+  {\n+    return record.getNextProp();\n+  }\n \n-    @Override\n-    public void checkReference( RECORD record, PropertyRecord property, CheckerEngine<RECORD, REPORT> engine,\n-                                RecordAccess records )\n+  @Override\n+  public void checkReference(RECORD record, PropertyRecord property, CheckerEngine<RECORD, REPORT> engine,\n+                             RecordAccess records)\n+  {\n+    if (!property.inUse())\n     {\n-        if ( !property.inUse() )\n-        {\n-            engine.report().propertyNotInUse( property );\n-        }\n-        else\n-        {\n-            if ( !Record.NO_PREVIOUS_PROPERTY.is( property.getPrevProp() ) )\n-            {\n-                engine.report().propertyNotFirstInChain( property );\n-            }\n-            new ChainCheck<RECORD, REPORT>().checkReference( record, property, engine, records );\n-        }\n+      engine.report().propertyNotInUse(property);\n+    } else\n+    {\n+      if (!Record.NO_PREVIOUS_PROPERTY.is(property.getPrevProp()))\n+      {\n+        engine.report().propertyNotFirstInChain(property);\n+      }\n+      new ChainCheck<RECORD, REPORT>().checkReference(record, property, engine, records);\n     }\n+  }\n }\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/629/PropertyChain.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/629/PropertyChain.java\nindex f94a4a3a4e8..fd96fa7eb53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/629/PropertyChain.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/629/PropertyChain.java\n@@ -31,8 +31,7 @@ import org.neo4j.kernel.impl.store.record.PrimitiveRecord;\n import org.neo4j.kernel.impl.store.record.PropertyRecord;\n import org.neo4j.kernel.impl.store.record.Record;\n \n-public class PropertyChain<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport>\n-        implements RecordField<RECORD,REPORT>, ComparativeRecordChecker<RECORD, PropertyRecord, REPORT>\n+public class PropertyChain<RECORD extends PrimitiveRecord, REPORT extends ConsistencyReport.PrimitiveConsistencyReport> implements RecordField<RECORD,REPORT>, ComparativeRecordChecker<RECORD, PropertyRecord, REPORT>\n {\n     private final Function<RECORD,MandatoryProperties.Check<RECORD,REPORT>> mandatoryProperties;\n \n@@ -42,9 +41,8 @@ public class PropertyChain<RECORD extends PrimitiveRecord, REPORT extends Consis\n     }\n \n     @Override\n-    public void checkConsistency( RECORD record, CheckerEngine<RECORD, REPORT> engine,\n-                                  RecordAccess records )\n-    {\n+    public void checkConsistency( RECORD record, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n+{\n         if ( !Record.NO_NEXT_PROPERTY.is( record.getNextProp() ) )\n         {\n             // Check the whole chain here instead of scattered during multiple checks.\n@@ -57,8 +55,8 @@ public class PropertyChain<RECORD extends PrimitiveRecord, REPORT extends Consis\n             }\n \n             try ( PrimitiveIntSet keys = Primitive.intSet();\n-                  MandatoryProperties.Check<RECORD,REPORT> mandatory = mandatoryProperties.apply( record ) )\n-            {\n+MandatoryProperties.Check<RECORD,REPORT> mandatory = mandatoryProperties.apply( record ) )\n+{\n                 checkChainItem( firstProp, engine, keys, mandatory );\n \n                 // Check the whole chain here. We also take the opportunity to check mandatory property constraints.\n@@ -101,9 +99,8 @@ public class PropertyChain<RECORD extends PrimitiveRecord, REPORT extends Consis\n     }\n \n     @Override\n-    public void checkReference( RECORD record, PropertyRecord property, CheckerEngine<RECORD, REPORT> engine,\n-                                RecordAccess records )\n-    {\n+    public void checkReference( RECORD record, PropertyRecord property, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n+{\n         if ( !property.inUse() )\n         {\n             engine.report().propertyNotInUse( property );\n@@ -117,4 +114,4 @@ public class PropertyChain<RECORD extends PrimitiveRecord, REPORT extends Consis\n             new ChainCheck<RECORD, REPORT>().checkReference( record, property, engine, records );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}