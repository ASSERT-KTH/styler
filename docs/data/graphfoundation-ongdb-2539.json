{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2539",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "167",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "277",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "280",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "283",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "292",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "308",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "320",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "333",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "345",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "350",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "359",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "364",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "367",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "376",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "381",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "381",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "384",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "387",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "398",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "403",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "403",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "406",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "406",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "420",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "420",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "422",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "425",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "425",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "428",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "433",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "468",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "515",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "530",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "559",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "574",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "585",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "596",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "603",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "614",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "617",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "619",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "624",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "640",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "642",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "642",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "658",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "663",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "663",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "686",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "717",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "717",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "730",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "730",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "744",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "744",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "746",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "746",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "750",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "757",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "759",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "765",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "765",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "767",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "767",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "775",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "781",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "781",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "783",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "784",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2539/PackStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2539/PackStream.java\nindex 0954ae6981f..c5928ecf5dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2539/PackStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2539/PackStream.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v1.packstream;\n \n import java.io.IOException;\n@@ -96,717 +97,691 @@ import org.neo4j.bolt.v1.packstream.utf8.UTF8Encoder;\n public class PackStream\n {\n \n-    public static final byte TINY_STRING = (byte) 0x80;\n-    public static final byte TINY_LIST = (byte) 0x90;\n-    public static final byte TINY_MAP = (byte) 0xA0;\n-    public static final byte TINY_STRUCT = (byte) 0xB0;\n-    public static final byte NULL = (byte) 0xC0;\n-    public static final byte FLOAT_64 = (byte) 0xC1;\n-    public static final byte FALSE = (byte) 0xC2;\n-    public static final byte TRUE = (byte) 0xC3;\n-    public static final byte RESERVED_C4 = (byte) 0xC4;\n-    public static final byte RESERVED_C5 = (byte) 0xC5;\n-    public static final byte RESERVED_C6 = (byte) 0xC6;\n-    public static final byte RESERVED_C7 = (byte) 0xC7;\n-    public static final byte INT_8 = (byte) 0xC8;\n-    public static final byte INT_16 = (byte) 0xC9;\n-    public static final byte INT_32 = (byte) 0xCA;\n-    public static final byte INT_64 = (byte) 0xCB;\n-    public static final byte BYTES_8 = (byte) 0xCC;\n-    public static final byte BYTES_16 = (byte) 0xCD;\n-    public static final byte BYTES_32 = (byte) 0xCE;\n-    public static final byte RESERVED_CF = (byte) 0xCF;\n-    public static final byte STRING_8 = (byte) 0xD0;\n-    public static final byte STRING_16 = (byte) 0xD1;\n-    public static final byte STRING_32 = (byte) 0xD2;\n-    public static final byte RESERVED_D3 = (byte) 0xD3;\n-    public static final byte LIST_8 = (byte) 0xD4;\n-    public static final byte LIST_16 = (byte) 0xD5;\n-    public static final byte LIST_32 = (byte) 0xD6;\n-    public static final byte LIST_STREAM = (byte) 0xD7;\n-    public static final byte MAP_8 = (byte) 0xD8;\n-    public static final byte MAP_16 = (byte) 0xD9;\n-    public static final byte MAP_32 = (byte) 0xDA;\n-    public static final byte MAP_STREAM = (byte) 0xDB;\n-    public static final byte STRUCT_8 = (byte) 0xDC;\n-    public static final byte STRUCT_16 = (byte) 0xDD;\n-    public static final byte RESERVED_DE = (byte) 0xDE;\n-    public static final byte END_OF_STREAM = (byte) 0xDF;\n-    public static final byte RESERVED_E0 = (byte) 0xE0;\n-    public static final byte RESERVED_E1 = (byte) 0xE1;\n-    public static final byte RESERVED_E2 = (byte) 0xE2;\n-    public static final byte RESERVED_E3 = (byte) 0xE3;\n-    public static final byte RESERVED_E4 = (byte) 0xE4;\n-    public static final byte RESERVED_E5 = (byte) 0xE5;\n-    public static final byte RESERVED_E6 = (byte) 0xE6;\n-    public static final byte RESERVED_E7 = (byte) 0xE7;\n-    public static final byte RESERVED_E8 = (byte) 0xE8;\n-    public static final byte RESERVED_E9 = (byte) 0xE9;\n-    public static final byte RESERVED_EA = (byte) 0xEA;\n-    public static final byte RESERVED_EB = (byte) 0xEB;\n-    public static final byte RESERVED_EC = (byte) 0xEC;\n-    public static final byte RESERVED_ED = (byte) 0xED;\n-    public static final byte RESERVED_EE = (byte) 0xEE;\n-    public static final byte RESERVED_EF = (byte) 0xEF;\n-\n-    public static final long UNKNOWN_SIZE = -1;\n-\n-    private static final long PLUS_2_TO_THE_31 = 2147483648L;\n-    private static final long PLUS_2_TO_THE_15 = 32768L;\n-    private static final long PLUS_2_TO_THE_7 = 128L;\n-    private static final long MINUS_2_TO_THE_4 = -16L;\n-    private static final long MINUS_2_TO_THE_7 = -128L;\n-    private static final long MINUS_2_TO_THE_15 = -32768L;\n-    private static final long MINUS_2_TO_THE_31 = -2147483648L;\n-\n-    private PackStream()\n-    {\n-    }\n-\n-    private static PackType type( byte markerByte )\n-    {\n-        final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-\n-        switch ( markerHighNibble )\n-        {\n-        case TINY_STRING:\n-            return PackType.STRING;\n-        case TINY_LIST:\n-            return PackType.LIST;\n-        case TINY_MAP:\n-            return PackType.MAP;\n-        case TINY_STRUCT:\n-            return PackType.STRUCT;\n-        default:\n-            break;\n-        }\n-\n-        if ( markerByte >= MINUS_2_TO_THE_4 )\n-        {\n-            return PackType.INTEGER;\n-        }\n-\n-        switch ( markerByte )\n-        {\n-        case NULL:\n-            return PackType.NULL;\n-        case TRUE:\n-        case FALSE:\n-            return PackType.BOOLEAN;\n-        case FLOAT_64:\n-            return PackType.FLOAT;\n-        case BYTES_8:\n-        case BYTES_16:\n-        case BYTES_32:\n-            return PackType.BYTES;\n-        case STRING_8:\n-        case STRING_16:\n-        case STRING_32:\n-            return PackType.STRING;\n-        case LIST_8:\n-        case LIST_16:\n-        case LIST_32:\n-        case LIST_STREAM:\n-            return PackType.LIST;\n-        case MAP_8:\n-        case MAP_16:\n-        case MAP_32:\n-        case MAP_STREAM:\n-            return PackType.MAP;\n-        case STRUCT_8:\n-        case STRUCT_16:\n-            return PackType.STRUCT;\n-        case END_OF_STREAM:\n-            return PackType.END_OF_STREAM;\n-        case INT_8:\n-        case INT_16:\n-        case INT_32:\n-        case INT_64:\n-            return PackType.INTEGER;\n-        default:\n-            return PackType.RESERVED;\n-        }\n+  public static final byte TINY_STRING = (byte) 0x80;\n+  public static final byte TINY_LIST = (byte) 0x90;\n+  public static final byte TINY_MAP = (byte) 0xA0;\n+  public static final byte TINY_STRUCT = (byte) 0xB0;\n+  public static final byte NULL = (byte) 0xC0;\n+  public static final byte FLOAT_64 = (byte) 0xC1;\n+  public static final byte FALSE = (byte) 0xC2;\n+  public static final byte TRUE = (byte) 0xC3;\n+  public static final byte RESERVED_C4 = (byte) 0xC4;\n+  public static final byte RESERVED_C5 = (byte) 0xC5;\n+  public static final byte RESERVED_C6 = (byte) 0xC6;\n+  public static final byte RESERVED_C7 = (byte) 0xC7;\n+  public static final byte INT_8 = (byte) 0xC8;\n+  public static final byte INT_16 = (byte) 0xC9;\n+  public static final byte INT_32 = (byte) 0xCA;\n+  public static final byte INT_64 = (byte) 0xCB;\n+  public static final byte BYTES_8 = (byte) 0xCC;\n+  public static final byte BYTES_16 = (byte) 0xCD;\n+  public static final byte BYTES_32 = (byte) 0xCE;\n+  public static final byte RESERVED_CF = (byte) 0xCF;\n+  public static final byte STRING_8 = (byte) 0xD0;\n+  public static final byte STRING_16 = (byte) 0xD1;\n+  public static final byte STRING_32 = (byte) 0xD2;\n+  public static final byte RESERVED_D3 = (byte) 0xD3;\n+  public static final byte LIST_8 = (byte) 0xD4;\n+  public static final byte LIST_16 = (byte) 0xD5;\n+  public static final byte LIST_32 = (byte) 0xD6;\n+  public static final byte LIST_STREAM = (byte) 0xD7;\n+  public static final byte MAP_8 = (byte) 0xD8;\n+  public static final byte MAP_16 = (byte) 0xD9;\n+  public static final byte MAP_32 = (byte) 0xDA;\n+  public static final byte MAP_STREAM = (byte) 0xDB;\n+  public static final byte STRUCT_8 = (byte) 0xDC;\n+  public static final byte STRUCT_16 = (byte) 0xDD;\n+  public static final byte RESERVED_DE = (byte) 0xDE;\n+  public static final byte END_OF_STREAM = (byte) 0xDF;\n+  public static final byte RESERVED_E0 = (byte) 0xE0;\n+  public static final byte RESERVED_E1 = (byte) 0xE1;\n+  public static final byte RESERVED_E2 = (byte) 0xE2;\n+  public static final byte RESERVED_E3 = (byte) 0xE3;\n+  public static final byte RESERVED_E4 = (byte) 0xE4;\n+  public static final byte RESERVED_E5 = (byte) 0xE5;\n+  public static final byte RESERVED_E6 = (byte) 0xE6;\n+  public static final byte RESERVED_E7 = (byte) 0xE7;\n+  public static final byte RESERVED_E8 = (byte) 0xE8;\n+  public static final byte RESERVED_E9 = (byte) 0xE9;\n+  public static final byte RESERVED_EA = (byte) 0xEA;\n+  public static final byte RESERVED_EB = (byte) 0xEB;\n+  public static final byte RESERVED_EC = (byte) 0xEC;\n+  public static final byte RESERVED_ED = (byte) 0xED;\n+  public static final byte RESERVED_EE = (byte) 0xEE;\n+  public static final byte RESERVED_EF = (byte) 0xEF;\n+\n+  public static final long UNKNOWN_SIZE = -1;\n+\n+  private static final long PLUS_2_TO_THE_31 = 2147483648L;\n+  private static final long PLUS_2_TO_THE_15 = 32768L;\n+  private static final long PLUS_2_TO_THE_7 = 128L;\n+  private static final long MINUS_2_TO_THE_4 = -16L;\n+  private static final long MINUS_2_TO_THE_7 = -128L;\n+  private static final long MINUS_2_TO_THE_15 = -32768L;\n+  private static final long MINUS_2_TO_THE_31 = -2147483648L;\n+\n+  private PackStream()\n+  {\n+  }\n+\n+  private static PackType type(byte markerByte)\n+  {\n+    final byte markerHighNibble = (byte) (markerByte & 0xF0);\n+\n+    switch (markerHighNibble)\n+    {\n+      case TINY_STRING:\n+        return PackType.STRING;\n+      case TINY_LIST:\n+        return PackType.LIST;\n+      case TINY_MAP:\n+        return PackType.MAP;\n+      case TINY_STRUCT:\n+        return PackType.STRUCT;\n+      default:\n+        break;\n     }\n \n-    public static class Packer\n+    if (markerByte >= MINUS_2_TO_THE_4)\n     {\n-        private static final char PACKED_CHAR_START_CHAR = (char) 32;\n-        private static final char PACKED_CHAR_END_CHAR = (char) 126;\n-        private static final String[] PACKED_CHARS = prePackChars();\n-        private UTF8Encoder utf8 = UTF8Encoder.fastestAvailableEncoder();\n-\n-        protected PackOutput out;\n+      return PackType.INTEGER;\n+    }\n \n-        public Packer( PackOutput out )\n-        {\n-            this.out = out;\n-        }\n+    switch (markerByte)\n+    {\n+      case NULL:\n+        return PackType.NULL;\n+      case TRUE:\n+      case FALSE:\n+        return PackType.BOOLEAN;\n+      case FLOAT_64:\n+        return PackType.FLOAT;\n+      case BYTES_8:\n+      case BYTES_16:\n+      case BYTES_32:\n+        return PackType.BYTES;\n+      case STRING_8:\n+      case STRING_16:\n+      case STRING_32:\n+        return PackType.STRING;\n+      case LIST_8:\n+      case LIST_16:\n+      case LIST_32:\n+      case LIST_STREAM:\n+        return PackType.LIST;\n+      case MAP_8:\n+      case MAP_16:\n+      case MAP_32:\n+      case MAP_STREAM:\n+        return PackType.MAP;\n+      case STRUCT_8:\n+      case STRUCT_16:\n+        return PackType.STRUCT;\n+      case END_OF_STREAM:\n+        return PackType.END_OF_STREAM;\n+      case INT_8:\n+      case INT_16:\n+      case INT_32:\n+      case INT_64:\n+        return PackType.INTEGER;\n+      default:\n+        return PackType.RESERVED;\n+    }\n+  }\n \n-        private static String[] prePackChars()\n-        {\n-            int size = PACKED_CHAR_END_CHAR + 1 - PACKED_CHAR_START_CHAR;\n-            String[] packedChars = new String[size];\n-            for ( int i = 0; i < size; i++ )\n-            {\n-                packedChars[i] = String.valueOf( (char) (i + PACKED_CHAR_START_CHAR) );\n-            }\n-            return packedChars;\n-        }\n+  public static class Packer\n+  {\n+    private static final char PACKED_CHAR_START_CHAR = (char) 32;\n+    private static final char PACKED_CHAR_END_CHAR = (char) 126;\n+    private static final String[] PACKED_CHARS = prePackChars();\n+    private UTF8Encoder utf8 = UTF8Encoder.fastestAvailableEncoder();\n \n-        public void flush() throws IOException\n-        {\n-            out.flush();\n-        }\n+    protected PackOutput out;\n \n-        public void packNull() throws IOException\n-        {\n-            out.writeByte( NULL );\n-        }\n+    public Packer(PackOutput out)\n+    {\n+      this.out = out;\n+    }\n \n-        public void pack( boolean value ) throws IOException\n-        {\n-            out.writeByte( value ? TRUE : FALSE );\n-        }\n+    private static String[] prePackChars()\n+    {\n+      int size = PACKED_CHAR_END_CHAR + 1 - PACKED_CHAR_START_CHAR;\n+      String[] packedChars = new String[size];\n+      for (int i = 0; i < size; i++)\n+      {\n+        packedChars[i] = String.valueOf((char) (i + PACKED_CHAR_START_CHAR));\n+      }\n+      return packedChars;\n+    }\n \n-        public void pack( long value ) throws IOException\n-        {\n-            if ( value >= MINUS_2_TO_THE_4 && value < PLUS_2_TO_THE_7 )\n-            {\n-                out.writeByte( (byte) value );\n-            }\n-            else if ( value >= MINUS_2_TO_THE_7 && value < MINUS_2_TO_THE_4 )\n-            {\n-                out.writeByte( INT_8 ).writeByte( (byte) value );\n-            }\n-            else if ( value >= MINUS_2_TO_THE_15 && value < PLUS_2_TO_THE_15 )\n-            {\n-                out.writeByte( INT_16 ).writeShort( (short) value );\n-            }\n-            else if ( value >= MINUS_2_TO_THE_31 && value < PLUS_2_TO_THE_31 )\n-            {\n-                out.writeByte( INT_32 ).writeInt( (int) value );\n-            }\n-            else\n-            {\n-                out.writeByte( INT_64 ).writeLong( value );\n-            }\n-        }\n+    public void flush() throws IOException\n+    {\n+      out.flush();\n+    }\n \n-        public void pack( double value ) throws IOException\n-        {\n-            out.writeByte( FLOAT_64 ).writeDouble( value );\n-        }\n+    public void packNull() throws IOException\n+    {\n+      out.writeByte(NULL);\n+    }\n \n-        public void pack( char character ) throws IOException\n-        {\n-            if ( character >= PACKED_CHAR_START_CHAR && character <= PACKED_CHAR_END_CHAR )\n-            {\n-                pack( PACKED_CHARS[character - PACKED_CHAR_START_CHAR] );\n-            }\n-            else\n-            {\n-                pack( String.valueOf( character ) );\n-            }\n-        }\n+    public void pack(boolean value) throws IOException\n+    {\n+      out.writeByte(value ? TRUE : FALSE);\n+    }\n \n-        public void pack( byte[] value ) throws IOException\n-        {\n-            if ( value == null )\n-            {\n-                packNull();\n-            }\n-            else\n-            {\n-                packBytesHeader( value.length );\n-                out.writeBytes( value, 0, value.length );\n-            }\n-        }\n+    public void pack(long value) throws IOException\n+    {\n+      if (value >= MINUS_2_TO_THE_4 && value < PLUS_2_TO_THE_7)\n+      {\n+        out.writeByte((byte) value);\n+      } else if (value >= MINUS_2_TO_THE_7 && value < MINUS_2_TO_THE_4)\n+      {\n+        out.writeByte(INT_8).writeByte((byte) value);\n+      } else if (value >= MINUS_2_TO_THE_15 && value < PLUS_2_TO_THE_15)\n+      {\n+        out.writeByte(INT_16).writeShort((short) value);\n+      } else if (value >= MINUS_2_TO_THE_31 && value < PLUS_2_TO_THE_31)\n+      {\n+        out.writeByte(INT_32).writeInt((int) value);\n+      } else\n+      {\n+        out.writeByte(INT_64).writeLong(value);\n+      }\n+    }\n \n-        public void pack( String value ) throws IOException\n-        {\n-            if ( value == null )\n-            {\n-                packNull();\n-            }\n-            else\n-            {\n-                ByteBuffer encoded = utf8.encode( value );\n-                packStringHeader( encoded.remaining() );\n-                out.writeBytes( encoded );\n-            }\n-        }\n+    public void pack(double value) throws IOException\n+    {\n+      out.writeByte(FLOAT_64).writeDouble(value);\n+    }\n \n-        public void packUTF8( byte[] bytes, int offset, int length ) throws IOException\n-        {\n-            if ( bytes == null )\n-            {\n-                packNull();\n-            }\n-            else\n-            {\n-                packStringHeader( length );\n-                out.writeBytes( bytes, offset, length );\n-            }\n-        }\n+    public void pack(char character) throws IOException\n+    {\n+      if (character >= PACKED_CHAR_START_CHAR && character <= PACKED_CHAR_END_CHAR)\n+      {\n+        pack(PACKED_CHARS[character - PACKED_CHAR_START_CHAR]);\n+      } else\n+      {\n+        pack(String.valueOf(character));\n+      }\n+    }\n \n-        protected void packBytesHeader( int size ) throws IOException\n-        {\n-            if ( size <= Byte.MAX_VALUE )\n-            {\n-                out.writeShort( (short) (BYTES_8 << 8 | size) );\n-            }\n-            else if ( size <= Short.MAX_VALUE )\n-            {\n-                out.writeByte( BYTES_16 ).writeShort( (short) size );\n-            }\n-            else\n-            {\n-                out.writeByte( BYTES_32 ).writeInt( size );\n-            }\n-        }\n+    public void pack(byte[] value) throws IOException\n+    {\n+      if (value == null)\n+      {\n+        packNull();\n+      } else\n+      {\n+        packBytesHeader(value.length);\n+        out.writeBytes(value, 0, value.length);\n+      }\n+    }\n \n-        private void packStringHeader( int size ) throws IOException\n-        {\n-            if ( size < 0x10 )\n-            {\n-                out.writeByte( (byte) (TINY_STRING | size) );\n-            }\n-            else if ( size <= Byte.MAX_VALUE )\n-            {\n-                out.writeShort( (short) (STRING_8 << 8 | size) );\n-            }\n-            else if ( size <= Short.MAX_VALUE )\n-            {\n-                out.writeByte( STRING_16 ).writeShort( (short) size );\n-            }\n-            else\n-            {\n-                out.writeByte( STRING_32 ).writeInt( size );\n-            }\n-        }\n+    public void pack(String value) throws IOException\n+    {\n+      if (value == null)\n+      {\n+        packNull();\n+      } else\n+      {\n+        ByteBuffer encoded = utf8.encode(value);\n+        packStringHeader(encoded.remaining());\n+        out.writeBytes(encoded);\n+      }\n+    }\n \n-        public void packListHeader( int size ) throws IOException\n-        {\n-            if ( size < 0x10 )\n-            {\n-                out.writeByte( (byte) (TINY_LIST | size) );\n-            }\n-            else if ( size <= Byte.MAX_VALUE )\n-            {\n-                out.writeShort( (short) (LIST_8 << 8 | size) );\n-            }\n-            else if ( size <= Short.MAX_VALUE )\n-            {\n-                out.writeByte( LIST_16 ).writeShort( (short) size );\n-            }\n-            else\n-            {\n-                out.writeByte( LIST_32 ).writeInt( size );\n-            }\n-        }\n+    public void packUTF8(byte[] bytes, int offset, int length) throws IOException\n+    {\n+      if (bytes == null)\n+      {\n+        packNull();\n+      } else\n+      {\n+        packStringHeader(length);\n+        out.writeBytes(bytes, offset, length);\n+      }\n+    }\n \n-        public void packListStreamHeader() throws IOException\n-        {\n-            out.writeByte( LIST_STREAM );\n-        }\n+    protected void packBytesHeader(int size) throws IOException\n+    {\n+      if (size <= Byte.MAX_VALUE)\n+      {\n+        out.writeShort((short) (BYTES_8 << 8 | size));\n+      } else if (size <= Short.MAX_VALUE)\n+      {\n+        out.writeByte(BYTES_16).writeShort((short) size);\n+      } else\n+      {\n+        out.writeByte(BYTES_32).writeInt(size);\n+      }\n+    }\n \n-        public void packMapHeader( int size ) throws IOException\n-        {\n-            if ( size < 0x10 )\n-            {\n-                out.writeByte( (byte) (TINY_MAP | size) );\n-            }\n-            else if ( size <= Byte.MAX_VALUE )\n-            {\n-                out.writeShort( (short) (MAP_8 << 8 | size) );\n-            }\n-            else if ( size <= Short.MAX_VALUE )\n-            {\n-                out.writeByte( MAP_16 ).writeShort( (short) size );\n-            }\n-            else\n-            {\n-                out.writeByte( MAP_32 ).writeInt( size );\n-            }\n-        }\n+    private void packStringHeader(int size) throws IOException\n+    {\n+      if (size < 0x10)\n+      {\n+        out.writeByte((byte) (TINY_STRING | size));\n+      } else if (size <= Byte.MAX_VALUE)\n+      {\n+        out.writeShort((short) (STRING_8 << 8 | size));\n+      } else if (size <= Short.MAX_VALUE)\n+      {\n+        out.writeByte(STRING_16).writeShort((short) size);\n+      } else\n+      {\n+        out.writeByte(STRING_32).writeInt(size);\n+      }\n+    }\n \n-        public void packMapStreamHeader() throws IOException\n-        {\n-            out.writeByte( MAP_STREAM );\n-        }\n+    public void packListHeader(int size) throws IOException\n+    {\n+      if (size < 0x10)\n+      {\n+        out.writeByte((byte) (TINY_LIST | size));\n+      } else if (size <= Byte.MAX_VALUE)\n+      {\n+        out.writeShort((short) (LIST_8 << 8 | size));\n+      } else if (size <= Short.MAX_VALUE)\n+      {\n+        out.writeByte(LIST_16).writeShort((short) size);\n+      } else\n+      {\n+        out.writeByte(LIST_32).writeInt(size);\n+      }\n+    }\n \n-        public void packStructHeader( int size, byte signature ) throws IOException\n-        {\n-            if ( size < 0x10 )\n-            {\n-                out.writeShort( (short) ((byte) (TINY_STRUCT | size) << 8 | (signature & 0xFF)) );\n-            }\n-            else if ( size <= Byte.MAX_VALUE )\n-            {\n-                out.writeByte( STRUCT_8 ).writeByte( (byte) size ).writeByte( signature );\n-            }\n-            else if ( size <= Short.MAX_VALUE )\n-            {\n-                out.writeByte( STRUCT_16 ).writeShort( (short) size ).writeByte( signature );\n-            }\n-            else\n-            {\n-                throw new Overflow( \"Structures cannot have more than \" + Short.MAX_VALUE + \" fields\" );\n-            }\n-        }\n+    public void packListStreamHeader() throws IOException\n+    {\n+      out.writeByte(LIST_STREAM);\n+    }\n \n-        public void packEndOfStream() throws IOException\n-        {\n-            out.writeByte( END_OF_STREAM );\n-        }\n+    public void packMapHeader(int size) throws IOException\n+    {\n+      if (size < 0x10)\n+      {\n+        out.writeByte((byte) (TINY_MAP | size));\n+      } else if (size <= Byte.MAX_VALUE)\n+      {\n+        out.writeShort((short) (MAP_8 << 8 | size));\n+      } else if (size <= Short.MAX_VALUE)\n+      {\n+        out.writeByte(MAP_16).writeShort((short) size);\n+      } else\n+      {\n+        out.writeByte(MAP_32).writeInt(size);\n+      }\n+    }\n \n+    public void packMapStreamHeader() throws IOException\n+    {\n+      out.writeByte(MAP_STREAM);\n     }\n \n-    public static class Unpacker\n+    public void packStructHeader(int size, byte signature) throws IOException\n     {\n-        private static final byte[] EMPTY_BYTE_ARRAY = {};\n+      if (size < 0x10)\n+      {\n+        out.writeShort((short) ((byte) (TINY_STRUCT | size) << 8 | (signature & 0xFF)));\n+      } else if (size <= Byte.MAX_VALUE)\n+      {\n+        out.writeByte(STRUCT_8).writeByte((byte) size).writeByte(signature);\n+      } else if (size <= Short.MAX_VALUE)\n+      {\n+        out.writeByte(STRUCT_16).writeShort((short) size).writeByte(signature);\n+      } else\n+      {\n+        throw new Overflow(\"Structures cannot have more than \" + Short.MAX_VALUE + \" fields\");\n+      }\n+    }\n \n-        protected PackInput in;\n+    public void packEndOfStream() throws IOException\n+    {\n+      out.writeByte(END_OF_STREAM);\n+    }\n \n-        public Unpacker( PackInput in )\n-        {\n-            this.in = in;\n-        }\n+  }\n \n-        // TODO: This currently returns the number of fields in the struct. In 99% of cases we will look at the struct\n-        // signature to determine how to read it, suggest we make that what we return here,\n-        // and have the number of fields available through some alternate optional mechanism.\n-        public long unpackStructHeader() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n+  public static class Unpacker\n+  {\n+    private static final byte[] EMPTY_BYTE_ARRAY = {};\n \n-            if ( markerHighNibble == TINY_STRUCT )\n-            {\n-                return markerLowNibble;\n-            }\n-            switch ( markerByte )\n-            {\n-            case STRUCT_8:\n-                return unpackUINT8();\n-            case STRUCT_16:\n-                return unpackUINT16();\n-            default:\n-                throw new Unexpected( PackType.STRUCT, markerByte );\n-            }\n-        }\n+    protected PackInput in;\n \n-        public char unpackStructSignature() throws IOException\n-        {\n-            return (char) in.readByte();\n-        }\n+    public Unpacker(PackInput in)\n+    {\n+      this.in = in;\n+    }\n \n-        public long unpackListHeader() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n+    // TODO: This currently returns the number of fields in the struct. In 99% of cases we will look at the struct\n+    // signature to determine how to read it, suggest we make that what we return here,\n+    // and have the number of fields available through some alternate optional mechanism.\n+    public long unpackStructHeader() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      final byte markerHighNibble = (byte) (markerByte & 0xF0);\n+      final byte markerLowNibble = (byte) (markerByte & 0x0F);\n+\n+      if (markerHighNibble == TINY_STRUCT)\n+      {\n+        return markerLowNibble;\n+      }\n+      switch (markerByte)\n+      {\n+        case STRUCT_8:\n+          return unpackUINT8();\n+        case STRUCT_16:\n+          return unpackUINT16();\n+        default:\n+          throw new Unexpected(PackType.STRUCT, markerByte);\n+      }\n+    }\n \n-            if ( markerHighNibble == TINY_LIST )\n-            {\n-                return markerLowNibble;\n-            }\n-            switch ( markerByte )\n-            {\n-            case LIST_8:\n-                return unpackUINT8();\n-            case LIST_16:\n-                return unpackUINT16();\n-            case LIST_32:\n-                return unpackUINT32();\n-            case LIST_STREAM:\n-                return UNKNOWN_SIZE;\n-            default:\n-                throw new Unexpected( PackType.LIST, markerByte );\n-            }\n-        }\n+    public char unpackStructSignature() throws IOException\n+    {\n+      return (char) in.readByte();\n+    }\n \n-        public long unpackMapHeader() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n+    public long unpackListHeader() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      final byte markerHighNibble = (byte) (markerByte & 0xF0);\n+      final byte markerLowNibble = (byte) (markerByte & 0x0F);\n+\n+      if (markerHighNibble == TINY_LIST)\n+      {\n+        return markerLowNibble;\n+      }\n+      switch (markerByte)\n+      {\n+        case LIST_8:\n+          return unpackUINT8();\n+        case LIST_16:\n+          return unpackUINT16();\n+        case LIST_32:\n+          return unpackUINT32();\n+        case LIST_STREAM:\n+          return UNKNOWN_SIZE;\n+        default:\n+          throw new Unexpected(PackType.LIST, markerByte);\n+      }\n+    }\n \n-            if ( markerHighNibble == TINY_MAP )\n-            {\n-                return markerLowNibble;\n-            }\n-            switch ( markerByte )\n-            {\n-            case MAP_8:\n-                return unpackUINT8();\n-            case MAP_16:\n-                return unpackUINT16();\n-            case MAP_32:\n-                return unpackUINT32();\n-            case MAP_STREAM:\n-                return UNKNOWN_SIZE;\n-            default:\n-                throw new Unexpected( PackType.MAP, markerByte );\n-            }\n-        }\n+    public long unpackMapHeader() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      final byte markerHighNibble = (byte) (markerByte & 0xF0);\n+      final byte markerLowNibble = (byte) (markerByte & 0x0F);\n+\n+      if (markerHighNibble == TINY_MAP)\n+      {\n+        return markerLowNibble;\n+      }\n+      switch (markerByte)\n+      {\n+        case MAP_8:\n+          return unpackUINT8();\n+        case MAP_16:\n+          return unpackUINT16();\n+        case MAP_32:\n+          return unpackUINT32();\n+        case MAP_STREAM:\n+          return UNKNOWN_SIZE;\n+        default:\n+          throw new Unexpected(PackType.MAP, markerByte);\n+      }\n+    }\n \n-        public int unpackInteger() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            if ( markerByte >= MINUS_2_TO_THE_4 )\n-            {\n-                return markerByte;\n-            }\n-            switch ( markerByte )\n-            {\n-            case INT_8:\n-                return in.readByte();\n-            case INT_16:\n-                return in.readShort();\n-            case INT_32:\n-                return in.readInt();\n-            case INT_64:\n-                throw new Overflow( \"Unexpectedly large Integer value unpacked (\" + in.readLong() + \")\" );\n-            default:\n-                throw new Unexpected( PackType.INTEGER, markerByte );\n-            }\n-        }\n+    public int unpackInteger() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      if (markerByte >= MINUS_2_TO_THE_4)\n+      {\n+        return markerByte;\n+      }\n+      switch (markerByte)\n+      {\n+        case INT_8:\n+          return in.readByte();\n+        case INT_16:\n+          return in.readShort();\n+        case INT_32:\n+          return in.readInt();\n+        case INT_64:\n+          throw new Overflow(\"Unexpectedly large Integer value unpacked (\" + in.readLong() + \")\");\n+        default:\n+          throw new Unexpected(PackType.INTEGER, markerByte);\n+      }\n+    }\n \n-        public long unpackLong() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            if ( markerByte >= MINUS_2_TO_THE_4 )\n-            {\n-                return markerByte;\n-            }\n-            switch ( markerByte )\n-            {\n-            case INT_8:\n-                return in.readByte();\n-            case INT_16:\n-                return in.readShort();\n-            case INT_32:\n-                return in.readInt();\n-            case INT_64:\n-                return in.readLong();\n-            default:\n-                throw new Unexpected( PackType.INTEGER, markerByte );\n-            }\n-        }\n+    public long unpackLong() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      if (markerByte >= MINUS_2_TO_THE_4)\n+      {\n+        return markerByte;\n+      }\n+      switch (markerByte)\n+      {\n+        case INT_8:\n+          return in.readByte();\n+        case INT_16:\n+          return in.readShort();\n+        case INT_32:\n+          return in.readInt();\n+        case INT_64:\n+          return in.readLong();\n+        default:\n+          throw new Unexpected(PackType.INTEGER, markerByte);\n+      }\n+    }\n \n-        public double unpackDouble() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            if ( markerByte == FLOAT_64 )\n-            {\n-                return in.readDouble();\n-            }\n-            throw new Unexpected( PackType.FLOAT, markerByte );\n-        }\n+    public double unpackDouble() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      if (markerByte == FLOAT_64)\n+      {\n+        return in.readDouble();\n+      }\n+      throw new Unexpected(PackType.FLOAT, markerByte);\n+    }\n \n-        public byte[] unpackBytes() throws IOException\n-        {\n-            int size = unpackBytesHeader();\n-            return unpackRawBytes( size );\n-        }\n+    public byte[] unpackBytes() throws IOException\n+    {\n+      int size = unpackBytesHeader();\n+      return unpackRawBytes(size);\n+    }\n \n-        public String unpackString() throws IOException\n-        {\n-            return new String( unpackUTF8(), StandardCharsets.UTF_8 );\n-        }\n+    public String unpackString() throws IOException\n+    {\n+      return new String(unpackUTF8(), StandardCharsets.UTF_8);\n+    }\n \n-        public int unpackBytesHeader() throws IOException\n+    public int unpackBytesHeader() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      int size;\n+      switch (markerByte)\n+      {\n+        case BYTES_8:\n+          size = unpackUINT8();\n+          break;\n+        case BYTES_16:\n+          size = unpackUINT16();\n+          break;\n+        case BYTES_32:\n         {\n-            final byte markerByte = in.readByte();\n-            int size;\n-            switch ( markerByte )\n-            {\n-            case BYTES_8:\n-                size = unpackUINT8();\n-                break;\n-            case BYTES_16:\n-                size = unpackUINT16();\n-                break;\n-            case BYTES_32:\n-            {\n-                long longSize = unpackUINT32();\n-                if ( longSize <= Integer.MAX_VALUE )\n-                {\n-                    size = (int) longSize;\n-                }\n-                else\n-                {\n-                    throw new Overflow( \"BYTES_32 too long for Java\" );\n-                }\n-                break;\n-            }\n-            default:\n-                throw new Unexpected( PackType.BYTES, markerByte );\n-            }\n-            return size;\n+          long longSize = unpackUINT32();\n+          if (longSize <= Integer.MAX_VALUE)\n+          {\n+            size = (int) longSize;\n+          } else\n+          {\n+            throw new Overflow(\"BYTES_32 too long for Java\");\n+          }\n+          break;\n         }\n+        default:\n+          throw new Unexpected(PackType.BYTES, markerByte);\n+      }\n+      return size;\n+    }\n \n-        public int unpackStringHeader() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n+    public int unpackStringHeader() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      final byte markerHighNibble = (byte) (markerByte & 0xF0);\n+      final byte markerLowNibble = (byte) (markerByte & 0x0F);\n \n-            int size;\n+      int size;\n \n-            if ( markerHighNibble == TINY_STRING )\n+      if (markerHighNibble == TINY_STRING)\n+      {\n+        size = markerLowNibble;\n+      } else\n+      {\n+        switch (markerByte)\n+        {\n+          case STRING_8:\n+            size = unpackUINT8();\n+            break;\n+          case STRING_16:\n+            size = unpackUINT16();\n+            break;\n+          case STRING_32:\n+          {\n+            long longSize = unpackUINT32();\n+            if (longSize <= Integer.MAX_VALUE)\n             {\n-                size = markerLowNibble;\n-            }\n-            else\n+              size = (int) longSize;\n+            } else\n             {\n-                switch ( markerByte )\n-                {\n-                case STRING_8:\n-                    size = unpackUINT8();\n-                    break;\n-                case STRING_16:\n-                    size = unpackUINT16();\n-                    break;\n-                case STRING_32:\n-                {\n-                    long longSize = unpackUINT32();\n-                    if ( longSize <= Integer.MAX_VALUE )\n-                    {\n-                        size = (int) longSize;\n-                    }\n-                    else\n-                    {\n-                        throw new Overflow( \"STRING_32 too long for Java\" );\n-                    }\n-                    break;\n-                }\n-                default:\n-                    throw new Unexpected( PackType.STRING, markerByte );\n-                }\n+              throw new Overflow(\"STRING_32 too long for Java\");\n             }\n-\n-            return size;\n+            break;\n+          }\n+          default:\n+            throw new Unexpected(PackType.STRING, markerByte);\n         }\n+      }\n \n-        public byte[] unpackUTF8() throws IOException\n-        {\n-            int size = unpackStringHeader();\n-            return unpackRawBytes( size );\n-        }\n+      return size;\n+    }\n \n-        public boolean unpackBoolean() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            switch ( markerByte )\n-            {\n-            case TRUE:\n-                return true;\n-            case FALSE:\n-                return false;\n-            default:\n-                throw new Unexpected( PackType.BOOLEAN, markerByte );\n-            }\n-        }\n+    public byte[] unpackUTF8() throws IOException\n+    {\n+      int size = unpackStringHeader();\n+      return unpackRawBytes(size);\n+    }\n \n-        public void unpackNull() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            assert markerByte == NULL;\n-        }\n+    public boolean unpackBoolean() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      switch (markerByte)\n+      {\n+        case TRUE:\n+          return true;\n+        case FALSE:\n+          return false;\n+        default:\n+          throw new Unexpected(PackType.BOOLEAN, markerByte);\n+      }\n+    }\n \n-        private int unpackUINT8() throws IOException\n-        {\n-            return in.readByte() & 0xFF;\n-        }\n+    public void unpackNull() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      assert markerByte == NULL;\n+    }\n \n-        private int unpackUINT16() throws IOException\n-        {\n-            return in.readShort() & 0xFFFF;\n-        }\n+    private int unpackUINT8() throws IOException\n+    {\n+      return in.readByte() & 0xFF;\n+    }\n \n-        private long unpackUINT32() throws IOException\n-        {\n-            return in.readInt() & 0xFFFFFFFFL;\n-        }\n+    private int unpackUINT16() throws IOException\n+    {\n+      return in.readShort() & 0xFFFF;\n+    }\n \n-        public void unpackEndOfStream() throws IOException\n-        {\n-            final byte markerByte = in.readByte();\n-            assert markerByte == END_OF_STREAM;\n-        }\n+    private long unpackUINT32() throws IOException\n+    {\n+      return in.readInt() & 0xFFFFFFFFL;\n+    }\n \n-        private byte[] unpackRawBytes( int size ) throws IOException\n-        {\n-            if ( size == 0 )\n-            {\n-                return EMPTY_BYTE_ARRAY;\n-            }\n-            else\n-            {\n-                byte[] heapBuffer = new byte[size];\n-                unpackRawBytesInto( heapBuffer, 0, heapBuffer.length );\n-                return heapBuffer;\n-            }\n-        }\n+    public void unpackEndOfStream() throws IOException\n+    {\n+      final byte markerByte = in.readByte();\n+      assert markerByte == END_OF_STREAM;\n+    }\n \n-        private void unpackRawBytesInto( byte[] buffer, int offset, int size ) throws IOException\n-        {\n-            if ( size > 0 )\n-            {\n-                in.readBytes( buffer, offset, size );\n-            }\n-        }\n+    private byte[] unpackRawBytes(int size) throws IOException\n+    {\n+      if (size == 0)\n+      {\n+        return EMPTY_BYTE_ARRAY;\n+      } else\n+      {\n+        byte[] heapBuffer = new byte[size];\n+        unpackRawBytesInto(heapBuffer, 0, heapBuffer.length);\n+        return heapBuffer;\n+      }\n+    }\n \n-        public PackType peekNextType() throws IOException\n-        {\n-            final byte markerByte = in.peekByte();\n-            return type( markerByte );\n-        }\n+    private void unpackRawBytesInto(byte[] buffer, int offset, int size) throws IOException\n+    {\n+      if (size > 0)\n+      {\n+        in.readBytes(buffer, offset, size);\n+      }\n+    }\n \n-        public static void ensureCorrectStructSize( StructType structType, int expected, long actual ) throws IOException\n-        {\n-            if ( expected != actual )\n-            {\n-                throw new PackStreamException(\n-                        String.format( \"Invalid message received, serialized %s structures should have %d fields, \" + \"received %s structure has %d fields.\",\n-                                structType.description(), expected, structType.description(), actual ) );\n-            }\n-        }\n+    public PackType peekNextType() throws IOException\n+    {\n+      final byte markerByte = in.peekByte();\n+      return type(markerByte);\n     }\n \n-    public static class PackStreamException extends IOException\n+    public static void ensureCorrectStructSize(StructType structType, int expected, long actual) throws IOException\n     {\n-        public PackStreamException( String message )\n-        {\n-            super( message );\n-        }\n+      if (expected != actual)\n+      {\n+        throw new PackStreamException(\n+            String.format(\"Invalid message received, serialized %s structures should have %d fields, \" + \"received %s structure has %d fields.\",\n+                structType.description(), expected, structType.description(), actual));\n+      }\n     }\n+  }\n \n-    public static class EndOfStream extends PackStreamException\n+  public static class PackStreamException extends IOException\n+  {\n+    public PackStreamException(String message)\n     {\n-        public EndOfStream( String message )\n-        {\n-            super( message );\n-        }\n+      super(message);\n     }\n+  }\n \n-    public static class Overflow extends PackStreamException\n+  public static class EndOfStream extends PackStreamException\n+  {\n+    public EndOfStream(String message)\n     {\n-        public Overflow( String message )\n-        {\n-            super( message );\n-        }\n+      super(message);\n     }\n+  }\n \n-    public static class Unexpected extends PackStreamException\n+  public static class Overflow extends PackStreamException\n+  {\n+    public Overflow(String message)\n     {\n-        public Unexpected( PackType expectedType, byte unexpectedMarkerByte )\n-        {\n-            super( \"Wrong type received. Expected \" + expectedType + \", received: \" + type( unexpectedMarkerByte ) +\n-                   \" (0x\" + Integer.toHexString( unexpectedMarkerByte ) + \").\" );\n-        }\n+      super(message);\n+    }\n+  }\n+\n+  public static class Unexpected extends PackStreamException\n+  {\n+    public Unexpected(PackType expectedType, byte unexpectedMarkerByte)\n+    {\n+      super(\"Wrong type received. Expected \" + expectedType + \", received: \" + type(unexpectedMarkerByte) +\n+          \" (0x\" + Integer.toHexString(unexpectedMarkerByte) + \").\");\n     }\n+  }\n }\n",
            "diff_size": 854
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "337",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "726",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "821",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "855",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2539/PackStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2539/PackStream.java\nindex 0954ae6981f..4cf26a536b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2539/PackStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2539/PackStream.java\n@@ -95,59 +95,109 @@ import org.neo4j.bolt.v1.packstream.utf8.UTF8Encoder;\n  */\n public class PackStream\n {\n-\n     public static final byte TINY_STRING = (byte) 0x80;\n-    public static final byte TINY_LIST = (byte) 0x90;\n-    public static final byte TINY_MAP = (byte) 0xA0;\n-    public static final byte TINY_STRUCT = (byte) 0xB0;\n-    public static final byte NULL = (byte) 0xC0;\n-    public static final byte FLOAT_64 = (byte) 0xC1;\n-    public static final byte FALSE = (byte) 0xC2;\n-    public static final byte TRUE = (byte) 0xC3;\n-    public static final byte RESERVED_C4 = (byte) 0xC4;\n-    public static final byte RESERVED_C5 = (byte) 0xC5;\n-    public static final byte RESERVED_C6 = (byte) 0xC6;\n-    public static final byte RESERVED_C7 = (byte) 0xC7;\n-    public static final byte INT_8 = (byte) 0xC8;\n-    public static final byte INT_16 = (byte) 0xC9;\n-    public static final byte INT_32 = (byte) 0xCA;\n-    public static final byte INT_64 = (byte) 0xCB;\n-    public static final byte BYTES_8 = (byte) 0xCC;\n-    public static final byte BYTES_16 = (byte) 0xCD;\n-    public static final byte BYTES_32 = (byte) 0xCE;\n-    public static final byte RESERVED_CF = (byte) 0xCF;\n-    public static final byte STRING_8 = (byte) 0xD0;\n-    public static final byte STRING_16 = (byte) 0xD1;\n-    public static final byte STRING_32 = (byte) 0xD2;\n-    public static final byte RESERVED_D3 = (byte) 0xD3;\n-    public static final byte LIST_8 = (byte) 0xD4;\n-    public static final byte LIST_16 = (byte) 0xD5;\n-    public static final byte LIST_32 = (byte) 0xD6;\n-    public static final byte LIST_STREAM = (byte) 0xD7;\n-    public static final byte MAP_8 = (byte) 0xD8;\n-    public static final byte MAP_16 = (byte) 0xD9;\n-    public static final byte MAP_32 = (byte) 0xDA;\n-    public static final byte MAP_STREAM = (byte) 0xDB;\n-    public static final byte STRUCT_8 = (byte) 0xDC;\n-    public static final byte STRUCT_16 = (byte) 0xDD;\n-    public static final byte RESERVED_DE = (byte) 0xDE;\n-    public static final byte END_OF_STREAM = (byte) 0xDF;\n-    public static final byte RESERVED_E0 = (byte) 0xE0;\n-    public static final byte RESERVED_E1 = (byte) 0xE1;\n-    public static final byte RESERVED_E2 = (byte) 0xE2;\n-    public static final byte RESERVED_E3 = (byte) 0xE3;\n-    public static final byte RESERVED_E4 = (byte) 0xE4;\n-    public static final byte RESERVED_E5 = (byte) 0xE5;\n-    public static final byte RESERVED_E6 = (byte) 0xE6;\n-    public static final byte RESERVED_E7 = (byte) 0xE7;\n-    public static final byte RESERVED_E8 = (byte) 0xE8;\n-    public static final byte RESERVED_E9 = (byte) 0xE9;\n-    public static final byte RESERVED_EA = (byte) 0xEA;\n-    public static final byte RESERVED_EB = (byte) 0xEB;\n-    public static final byte RESERVED_EC = (byte) 0xEC;\n-    public static final byte RESERVED_ED = (byte) 0xED;\n-    public static final byte RESERVED_EE = (byte) 0xEE;\n-    public static final byte RESERVED_EF = (byte) 0xEF;\n+\n+public static final byte TINY_LIST = (byte) 0x90;\n+\n+public static final byte TINY_MAP = (byte) 0xA0;\n+\n+public static final byte TINY_STRUCT = (byte) 0xB0;\n+\n+public static final byte NULL = (byte) 0xC0;\n+\n+public static final byte FLOAT_64 = (byte) 0xC1;\n+\n+public static final byte FALSE = (byte) 0xC2;\n+\n+public static final byte TRUE = (byte) 0xC3;\n+\n+public static final byte RESERVED_C4 = (byte) 0xC4;\n+\n+public static final byte RESERVED_C5 = (byte) 0xC5;\n+\n+public static final byte RESERVED_C6 = (byte) 0xC6;\n+\n+public static final byte RESERVED_C7 = (byte) 0xC7;\n+\n+public static final byte INT_8 = (byte) 0xC8;\n+\n+public static final byte INT_16 = (byte) 0xC9;\n+\n+public static final byte INT_32 = (byte) 0xCA;\n+\n+public static final byte INT_64 = (byte) 0xCB;\n+\n+public static final byte BYTES_8 = (byte) 0xCC;\n+\n+public static final byte BYTES_16 = (byte) 0xCD;\n+\n+public static final byte BYTES_32 = (byte) 0xCE;\n+\n+public static final byte RESERVED_CF = (byte) 0xCF;\n+\n+public static final byte STRING_8 = (byte) 0xD0;\n+\n+public static final byte STRING_16 = (byte) 0xD1;\n+\n+public static final byte STRING_32 = (byte) 0xD2;\n+\n+public static final byte RESERVED_D3 = (byte) 0xD3;\n+\n+public static final byte LIST_8 = (byte) 0xD4;\n+\n+public static final byte LIST_16 = (byte) 0xD5;\n+\n+public static final byte LIST_32 = (byte) 0xD6;\n+\n+public static final byte LIST_STREAM = (byte) 0xD7;\n+\n+public static final byte MAP_8 = (byte) 0xD8;\n+\n+public static final byte MAP_16 = (byte) 0xD9;\n+\n+public static final byte MAP_32 = (byte) 0xDA;\n+\n+public static final byte MAP_STREAM = (byte) 0xDB;\n+\n+public static final byte STRUCT_8 = (byte) 0xDC;\n+\n+public static final byte STRUCT_16 = (byte) 0xDD;\n+\n+public static final byte RESERVED_DE = (byte) 0xDE;\n+\n+public static final byte END_OF_STREAM = (byte) 0xDF;\n+\n+public static final byte RESERVED_E0 = (byte) 0xE0;\n+\n+public static final byte RESERVED_E1 = (byte) 0xE1;\n+\n+public static final byte RESERVED_E2 = (byte) 0xE2;\n+\n+public static final byte RESERVED_E3 = (byte) 0xE3;\n+\n+public static final byte RESERVED_E4 = (byte) 0xE4;\n+\n+public static final byte RESERVED_E5 = (byte) 0xE5;\n+\n+public static final byte RESERVED_E6 = (byte) 0xE6;\n+\n+public static final byte RESERVED_E7 = (byte) 0xE7;\n+\n+public static final byte RESERVED_E8 = (byte) 0xE8;\n+\n+public static final byte RESERVED_E9 = (byte) 0xE9;\n+\n+public static final byte RESERVED_EA = (byte) 0xEA;\n+\n+public static final byte RESERVED_EB = (byte) 0xEB;\n+\n+public static final byte RESERVED_EC = (byte) 0xEC;\n+\n+public static final byte RESERVED_ED = (byte) 0xED;\n+\n+public static final byte RESERVED_EE = (byte) 0xEE;\n+\n+public static final byte RESERVED_EF = (byte) 0xEF;\n \n     public static final long UNKNOWN_SIZE = -1;\n \n@@ -165,9 +215,8 @@ public class PackStream\n \n     private static PackType type( byte markerByte )\n     {\n-        final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-\n-        switch ( markerHighNibble )\n+        final byte markerHighNibble = (byte) ( markerByte & 0xF0 );\n+switch ( markerHighNibble )\n         {\n         case TINY_STRING:\n             return PackType.STRING;\n@@ -250,7 +299,8 @@ public class PackStream\n             {\n                 packedChars[i] = String.valueOf( (char) (i + PACKED_CHAR_START_CHAR) );\n             }\n-            return packedChars;\n+\n+return packedChars;\n         }\n \n         public void flush() throws IOException\n@@ -284,7 +334,7 @@ public class PackStream\n             }\n             else if ( value >= MINUS_2_TO_THE_31 && value < PLUS_2_TO_THE_31 )\n             {\n-                out.writeByte( INT_32 ).writeInt( (int) value );\n+                out.writeByte( INT_32 ).writeInt( ( int) value );\n             }\n             else\n             {\n@@ -353,7 +403,7 @@ public class PackStream\n         {\n             if ( size <= Byte.MAX_VALUE )\n             {\n-                out.writeShort( (short) (BYTES_8 << 8 | size) );\n+                out.writeShort( (short) ( BYTES_8 << 8 | size ) );\n             }\n             else if ( size <= Short.MAX_VALUE )\n             {\n@@ -369,11 +419,11 @@ public class PackStream\n         {\n             if ( size < 0x10 )\n             {\n-                out.writeByte( (byte) (TINY_STRING | size) );\n+                out.writeByte( (byte) ( TINY_STRING | size ) );\n             }\n             else if ( size <= Byte.MAX_VALUE )\n             {\n-                out.writeShort( (short) (STRING_8 << 8 | size) );\n+                out.writeShort( (short) ( STRING_8 << 8 | size ) );\n             }\n             else if ( size <= Short.MAX_VALUE )\n             {\n@@ -389,11 +439,11 @@ public class PackStream\n         {\n             if ( size < 0x10 )\n             {\n-                out.writeByte( (byte) (TINY_LIST | size) );\n+                out.writeByte( (byte) ( TINY_LIST | size ) );\n             }\n             else if ( size <= Byte.MAX_VALUE )\n             {\n-                out.writeShort( (short) (LIST_8 << 8 | size) );\n+                out.writeShort( (short) ( LIST_8 << 8 | size ) );\n             }\n             else if ( size <= Short.MAX_VALUE )\n             {\n@@ -414,11 +464,11 @@ public class PackStream\n         {\n             if ( size < 0x10 )\n             {\n-                out.writeByte( (byte) (TINY_MAP | size) );\n+                out.writeByte( (byte) ( TINY_MAP | size ) );\n             }\n             else if ( size <= Byte.MAX_VALUE )\n             {\n-                out.writeShort( (short) (MAP_8 << 8 | size) );\n+                out.writeShort( (short) ( MAP_8 << 8 | size ) );\n             }\n             else if ( size <= Short.MAX_VALUE )\n             {\n@@ -439,15 +489,15 @@ public class PackStream\n         {\n             if ( size < 0x10 )\n             {\n-                out.writeShort( (short) ((byte) (TINY_STRUCT | size) << 8 | (signature & 0xFF)) );\n+                out.writeShort( (short) ((byte) ( TINY_STRUCT | size) << 8 | ( signature & 0xFF )) );\n             }\n             else if ( size <= Byte.MAX_VALUE )\n             {\n-                out.writeByte( STRUCT_8 ).writeByte( (byte) size ).writeByte( signature );\n+                out.writeByte( STRUCT_8 ).writeByte( (byte) size).writeByte( signature );\n             }\n             else if ( size <= Short.MAX_VALUE )\n             {\n-                out.writeByte( STRUCT_16 ).writeShort( (short) size ).writeByte( signature );\n+                out.writeByte( STRUCT_16 ).writeShort( (short) size).writeByte( signature );\n             }\n             else\n             {\n@@ -459,12 +509,12 @@ public class PackStream\n         {\n             out.writeByte( END_OF_STREAM );\n         }\n-\n     }\n \n     public static class Unpacker\n     {\n-        private static final byte[] EMPTY_BYTE_ARRAY = {};\n+        private static final byte[] EMPTY_BYTE_ARRAY = {\n+};\n \n         protected PackInput in;\n \n@@ -479,10 +529,9 @@ public class PackStream\n         public long unpackStructHeader() throws IOException\n         {\n             final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n-\n-            if ( markerHighNibble == TINY_STRUCT )\n+            final byte markerHighNibble = (byte) ( markerByte & 0xF0 );\n+            final byte markerLowNibble = (byte) ( markerByte & 0x0F );\n+if ( markerHighNibble == TINY_STRUCT )\n             {\n                 return markerLowNibble;\n             }\n@@ -505,10 +554,9 @@ public class PackStream\n         public long unpackListHeader() throws IOException\n         {\n             final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n-\n-            if ( markerHighNibble == TINY_LIST )\n+            final byte markerHighNibble = (byte) ( markerByte & 0xF0 );\n+            final byte markerLowNibble = (byte) ( markerByte & 0x0F );\n+if ( markerHighNibble == TINY_LIST )\n             {\n                 return markerLowNibble;\n             }\n@@ -530,10 +578,9 @@ public class PackStream\n         public long unpackMapHeader() throws IOException\n         {\n             final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n-\n-            if ( markerHighNibble == TINY_MAP )\n+            final byte markerHighNibble = (byte) ( markerByte & 0xF0 );\n+            final byte markerLowNibble = (byte) ( markerByte & 0x0F );\n+if ( markerHighNibble == TINY_MAP )\n             {\n                 return markerLowNibble;\n             }\n@@ -634,7 +681,7 @@ public class PackStream\n                 long longSize = unpackUINT32();\n                 if ( longSize <= Integer.MAX_VALUE )\n                 {\n-                    size = (int) longSize;\n+                    size = ( int) longSize;\n                 }\n                 else\n                 {\n@@ -642,17 +689,18 @@ public class PackStream\n                 }\n                 break;\n             }\n-            default:\n+    default:\n                 throw new Unexpected( PackType.BYTES, markerByte );\n             }\n-            return size;\n+\n+return size;\n         }\n \n         public int unpackStringHeader() throws IOException\n         {\n             final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n+            final byte markerHighNibble = (byte) ( markerByte & 0xF0 );\n+            final byte markerLowNibble = (byte) ( markerByte & 0x0F );\n \n             int size;\n \n@@ -675,7 +723,7 @@ public class PackStream\n                     long longSize = unpackUINT32();\n                     if ( longSize <= Integer.MAX_VALUE )\n                     {\n-                        size = (int) longSize;\n+                        size = ( int) longSize;\n                     }\n                     else\n                     {\n@@ -683,7 +731,7 @@ public class PackStream\n                     }\n                     break;\n                 }\n-                default:\n+    default:\n                     throw new Unexpected( PackType.STRING, markerByte );\n                 }\n             }\n@@ -770,10 +818,9 @@ public class PackStream\n         {\n             if ( expected != actual )\n             {\n-                throw new PackStreamException(\n-                        String.format( \"Invalid message received, serialized %s structures should have %d fields, \" + \"received %s structure has %d fields.\",\n+                throw new PackStreamException( String.format( \"Invalid message received, serialized %s structures should have %d fields, \" + \"received %s structure has %d fields.\",\n                                 structType.description(), expected, structType.description(), actual ) );\n-            }\n+    }\n         }\n     }\n \n@@ -805,8 +852,7 @@ public class PackStream\n     {\n         public Unexpected( PackType expectedType, byte unexpectedMarkerByte )\n         {\n-            super( \"Wrong type received. Expected \" + expectedType + \", received: \" + type( unexpectedMarkerByte ) +\n-                   \" (0x\" + Integer.toHexString( unexpectedMarkerByte ) + \").\" );\n-        }\n+            super( \"Wrong type received. Expected \" + expectedType + \", received: \" + type( unexpectedMarkerByte ) + \" (0x\" + Integer.toHexString( unexpectedMarkerByte ) + \").\" );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 149
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "217",
                    "column": "58",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "294",
                    "column": "48",
                    "severity": "error",
                    "message": "'-' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "321",
                    "column": "43",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "326",
                    "column": "43",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "331",
                    "column": "44",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "336",
                    "column": "44",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "353",
                    "column": "53",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "407",
                    "column": "50",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "407",
                    "column": "50",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "407",
                    "column": "53",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "424",
                    "column": "52",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "429",
                    "column": "51",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "429",
                    "column": "51",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "429",
                    "column": "54",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "446",
                    "column": "50",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "451",
                    "column": "49",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "451",
                    "column": "49",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "451",
                    "column": "52",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "473",
                    "column": "49",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "478",
                    "column": "48",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "478",
                    "column": "48",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "478",
                    "column": "51",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "500",
                    "column": "62",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "500",
                    "column": "69",
                    "severity": "error",
                    "message": "'<<' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "500",
                    "column": "69",
                    "severity": "error",
                    "message": "'<<' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "500",
                    "column": "72",
                    "severity": "error",
                    "message": "'|' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "500",
                    "column": "85",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "541",
                    "column": "62",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "542",
                    "column": "61",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "567",
                    "column": "62",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "568",
                    "column": "61",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "592",
                    "column": "62",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "593",
                    "column": "61",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "718",
                    "column": "62",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "719",
                    "column": "61",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "785",
                    "column": "33",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "790",
                    "column": "34",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "795",
                    "column": "32",
                    "severity": "error",
                    "message": "'&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "836",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 254).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "869",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "869",
                    "column": "67",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2539/PackStream.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2539/PackStream.java\nindex 0954ae6981f..14350df4e2e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2539/PackStream.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2539/PackStream.java\n@@ -22,7 +22,6 @@ package org.neo4j.bolt.v1.packstream;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.nio.charset.StandardCharsets;\n-\n import org.neo4j.bolt.messaging.StructType;\n import org.neo4j.bolt.v1.packstream.utf8.UTF8Encoder;\n \n@@ -93,71 +92,121 @@ import org.neo4j.bolt.v1.packstream.utf8.UTF8Encoder;\n  * <tr><td><code>F0..FF</code></td><td><code>1111xxxx</code></td><td>-TINY_INT</td><td>Integer -1 to -16</td></tr>\n  * </table>\n  */\n+\n public class PackStream\n {\n-\n     public static final byte TINY_STRING = (byte) 0x80;\n+\n     public static final byte TINY_LIST = (byte) 0x90;\n+\n     public static final byte TINY_MAP = (byte) 0xA0;\n+\n     public static final byte TINY_STRUCT = (byte) 0xB0;\n+\n     public static final byte NULL = (byte) 0xC0;\n+\n     public static final byte FLOAT_64 = (byte) 0xC1;\n+\n     public static final byte FALSE = (byte) 0xC2;\n+\n     public static final byte TRUE = (byte) 0xC3;\n+\n     public static final byte RESERVED_C4 = (byte) 0xC4;\n+\n     public static final byte RESERVED_C5 = (byte) 0xC5;\n+\n     public static final byte RESERVED_C6 = (byte) 0xC6;\n+\n     public static final byte RESERVED_C7 = (byte) 0xC7;\n+\n     public static final byte INT_8 = (byte) 0xC8;\n+\n     public static final byte INT_16 = (byte) 0xC9;\n+\n     public static final byte INT_32 = (byte) 0xCA;\n+\n     public static final byte INT_64 = (byte) 0xCB;\n+\n     public static final byte BYTES_8 = (byte) 0xCC;\n+\n     public static final byte BYTES_16 = (byte) 0xCD;\n+\n     public static final byte BYTES_32 = (byte) 0xCE;\n+\n     public static final byte RESERVED_CF = (byte) 0xCF;\n+\n     public static final byte STRING_8 = (byte) 0xD0;\n+\n     public static final byte STRING_16 = (byte) 0xD1;\n+\n     public static final byte STRING_32 = (byte) 0xD2;\n+\n     public static final byte RESERVED_D3 = (byte) 0xD3;\n+\n     public static final byte LIST_8 = (byte) 0xD4;\n+\n     public static final byte LIST_16 = (byte) 0xD5;\n+\n     public static final byte LIST_32 = (byte) 0xD6;\n+\n     public static final byte LIST_STREAM = (byte) 0xD7;\n+\n     public static final byte MAP_8 = (byte) 0xD8;\n+\n     public static final byte MAP_16 = (byte) 0xD9;\n+\n     public static final byte MAP_32 = (byte) 0xDA;\n+\n     public static final byte MAP_STREAM = (byte) 0xDB;\n+\n     public static final byte STRUCT_8 = (byte) 0xDC;\n+\n     public static final byte STRUCT_16 = (byte) 0xDD;\n+\n     public static final byte RESERVED_DE = (byte) 0xDE;\n+\n     public static final byte END_OF_STREAM = (byte) 0xDF;\n+\n     public static final byte RESERVED_E0 = (byte) 0xE0;\n+\n     public static final byte RESERVED_E1 = (byte) 0xE1;\n+\n     public static final byte RESERVED_E2 = (byte) 0xE2;\n+\n     public static final byte RESERVED_E3 = (byte) 0xE3;\n+\n     public static final byte RESERVED_E4 = (byte) 0xE4;\n+\n     public static final byte RESERVED_E5 = (byte) 0xE5;\n+\n     public static final byte RESERVED_E6 = (byte) 0xE6;\n+\n     public static final byte RESERVED_E7 = (byte) 0xE7;\n+\n     public static final byte RESERVED_E8 = (byte) 0xE8;\n+\n     public static final byte RESERVED_E9 = (byte) 0xE9;\n+\n     public static final byte RESERVED_EA = (byte) 0xEA;\n+\n     public static final byte RESERVED_EB = (byte) 0xEB;\n+\n     public static final byte RESERVED_EC = (byte) 0xEC;\n+\n     public static final byte RESERVED_ED = (byte) 0xED;\n+\n     public static final byte RESERVED_EE = (byte) 0xEE;\n-    public static final byte RESERVED_EF = (byte) 0xEF;\n \n-    public static final long UNKNOWN_SIZE = -1;\n+    public static final byte RESERVED_EF = (byte) 0xEF;\n \n+    public static final long UNKNOWN_SIZE = - 1;\n     private static final long PLUS_2_TO_THE_31 = 2147483648L;\n     private static final long PLUS_2_TO_THE_15 = 32768L;\n     private static final long PLUS_2_TO_THE_7 = 128L;\n-    private static final long MINUS_2_TO_THE_4 = -16L;\n-    private static final long MINUS_2_TO_THE_7 = -128L;\n-    private static final long MINUS_2_TO_THE_15 = -32768L;\n-    private static final long MINUS_2_TO_THE_31 = -2147483648L;\n+    private static final long MINUS_2_TO_THE_4 = - 16L;\n+    private static final long MINUS_2_TO_THE_7 = - 128L;\n+    private static final long MINUS_2_TO_THE_15 = - 32768L;\n+    private static final long MINUS_2_TO_THE_31 = - 2147483648L;\n \n     private PackStream()\n     {\n@@ -165,8 +214,7 @@ public class PackStream\n \n     private static PackType type( byte markerByte )\n     {\n-        final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-\n+        final byte markerHighNibble = (byte) ( markerByte& 0xF0);\n         switch ( markerHighNibble )\n         {\n         case TINY_STRING:\n@@ -234,7 +282,6 @@ public class PackStream\n         private static final char PACKED_CHAR_END_CHAR = (char) 126;\n         private static final String[] PACKED_CHARS = prePackChars();\n         private UTF8Encoder utf8 = UTF8Encoder.fastestAvailableEncoder();\n-\n         protected PackOutput out;\n \n         public Packer( PackOutput out )\n@@ -244,12 +291,13 @@ public class PackStream\n \n         private static String[] prePackChars()\n         {\n-            int size = PACKED_CHAR_END_CHAR + 1 - PACKED_CHAR_START_CHAR;\n+            int size = PACKED_CHAR_END_CHAR + 1- PACKED_CHAR_START_CHAR;\n             String[] packedChars = new String[size];\n             for ( int i = 0; i < size; i++ )\n             {\n-                packedChars[i] = String.valueOf( (char) (i + PACKED_CHAR_START_CHAR) );\n+                packedChars[i] = String.valueOf( (char) ( i + PACKED_CHAR_START_CHAR) );\n             }\n+\n             return packedChars;\n         }\n \n@@ -270,23 +318,26 @@ public class PackStream\n \n         public void pack( long value ) throws IOException\n         {\n-            if ( value >= MINUS_2_TO_THE_4 && value < PLUS_2_TO_THE_7 )\n+            if ( value >= MINUS_2_TO_THE_4&& value < PLUS_2_TO_THE_7 )\n             {\n                 out.writeByte( (byte) value );\n             }\n-            else if ( value >= MINUS_2_TO_THE_7 && value < MINUS_2_TO_THE_4 )\n+            else\n+            if ( value >= MINUS_2_TO_THE_7&& value < MINUS_2_TO_THE_4 )\n             {\n                 out.writeByte( INT_8 ).writeByte( (byte) value );\n             }\n-            else if ( value >= MINUS_2_TO_THE_15 && value < PLUS_2_TO_THE_15 )\n+            else\n+            if ( value >= MINUS_2_TO_THE_15&& value < PLUS_2_TO_THE_15 )\n             {\n                 out.writeByte( INT_16 ).writeShort( (short) value );\n             }\n-            else if ( value >= MINUS_2_TO_THE_31 && value < PLUS_2_TO_THE_31 )\n+                else\n+            if ( value >= MINUS_2_TO_THE_31&& value < PLUS_2_TO_THE_31 )\n             {\n                 out.writeByte( INT_32 ).writeInt( (int) value );\n             }\n-            else\n+                else\n             {\n                 out.writeByte( INT_64 ).writeLong( value );\n             }\n@@ -299,9 +350,9 @@ public class PackStream\n \n         public void pack( char character ) throws IOException\n         {\n-            if ( character >= PACKED_CHAR_START_CHAR && character <= PACKED_CHAR_END_CHAR )\n+            if ( character >= PACKED_CHAR_START_CHAR&& character <= PACKED_CHAR_END_CHAR )\n             {\n-                pack( PACKED_CHARS[character - PACKED_CHAR_START_CHAR] );\n+                pack( PACKED_CHARS[ character - PACKED_CHAR_START_CHAR] );\n             }\n             else\n             {\n@@ -353,9 +404,10 @@ public class PackStream\n         {\n             if ( size <= Byte.MAX_VALUE )\n             {\n-                out.writeShort( (short) (BYTES_8 << 8 | size) );\n+                out.writeShort( (short) ( BYTES_8<<8| size) );\n             }\n-            else if ( size <= Short.MAX_VALUE )\n+            else\n+            if ( size <= Short.MAX_VALUE )\n             {\n                 out.writeByte( BYTES_16 ).writeShort( (short) size );\n             }\n@@ -369,17 +421,19 @@ public class PackStream\n         {\n             if ( size < 0x10 )\n             {\n-                out.writeByte( (byte) (TINY_STRING | size) );\n+                out.writeByte( (byte) ( TINY_STRING| size) );\n             }\n-            else if ( size <= Byte.MAX_VALUE )\n+            else\n+            if ( size <= Byte.MAX_VALUE )\n             {\n-                out.writeShort( (short) (STRING_8 << 8 | size) );\n+                out.writeShort( (short) ( STRING_8<<8| size) );\n             }\n-            else if ( size <= Short.MAX_VALUE )\n+            else\n+            if ( size <= Short.MAX_VALUE )\n             {\n                 out.writeByte( STRING_16 ).writeShort( (short) size );\n             }\n-            else\n+                else\n             {\n                 out.writeByte( STRING_32 ).writeInt( size );\n             }\n@@ -389,17 +443,19 @@ public class PackStream\n         {\n             if ( size < 0x10 )\n             {\n-                out.writeByte( (byte) (TINY_LIST | size) );\n+                out.writeByte( (byte) ( TINY_LIST| size) );\n             }\n-            else if ( size <= Byte.MAX_VALUE )\n+            else\n+            if ( size <= Byte.MAX_VALUE )\n             {\n-                out.writeShort( (short) (LIST_8 << 8 | size) );\n+                out.writeShort( (short) ( LIST_8<<8| size) );\n             }\n-            else if ( size <= Short.MAX_VALUE )\n+            else\n+            if ( size <= Short.MAX_VALUE )\n             {\n                 out.writeByte( LIST_16 ).writeShort( (short) size );\n             }\n-            else\n+                else\n             {\n                 out.writeByte( LIST_32 ).writeInt( size );\n             }\n@@ -414,17 +470,19 @@ public class PackStream\n         {\n             if ( size < 0x10 )\n             {\n-                out.writeByte( (byte) (TINY_MAP | size) );\n+                out.writeByte( (byte) ( TINY_MAP| size) );\n             }\n-            else if ( size <= Byte.MAX_VALUE )\n+            else\n+            if ( size <= Byte.MAX_VALUE )\n             {\n-                out.writeShort( (short) (MAP_8 << 8 | size) );\n+                out.writeShort( (short) ( MAP_8<<8| size) );\n             }\n-            else if ( size <= Short.MAX_VALUE )\n+            else\n+            if ( size <= Short.MAX_VALUE )\n             {\n                 out.writeByte( MAP_16 ).writeShort( (short) size );\n             }\n-            else\n+                else\n             {\n                 out.writeByte( MAP_32 ).writeInt( size );\n             }\n@@ -439,17 +497,19 @@ public class PackStream\n         {\n             if ( size < 0x10 )\n             {\n-                out.writeShort( (short) ((byte) (TINY_STRUCT | size) << 8 | (signature & 0xFF)) );\n+                out.writeShort( (short) ((byte) ( TINY_STRUCT| size)<<8| ( signature& 0xFF)) );\n             }\n-            else if ( size <= Byte.MAX_VALUE )\n+            else\n+            if ( size <= Byte.MAX_VALUE )\n             {\n                 out.writeByte( STRUCT_8 ).writeByte( (byte) size ).writeByte( signature );\n             }\n-            else if ( size <= Short.MAX_VALUE )\n+            else\n+            if ( size <= Short.MAX_VALUE )\n             {\n                 out.writeByte( STRUCT_16 ).writeShort( (short) size ).writeByte( signature );\n             }\n-            else\n+                else\n             {\n                 throw new Overflow( \"Structures cannot have more than \" + Short.MAX_VALUE + \" fields\" );\n             }\n@@ -459,13 +519,11 @@ public class PackStream\n         {\n             out.writeByte( END_OF_STREAM );\n         }\n-\n     }\n \n     public static class Unpacker\n     {\n         private static final byte[] EMPTY_BYTE_ARRAY = {};\n-\n         protected PackInput in;\n \n         public Unpacker( PackInput in )\n@@ -476,16 +534,17 @@ public class PackStream\n         // TODO: This currently returns the number of fields in the struct. In 99% of cases we will look at the struct\n         // signature to determine how to read it, suggest we make that what we return here,\n         // and have the number of fields available through some alternate optional mechanism.\n+\n         public long unpackStructHeader() throws IOException\n         {\n             final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n-\n+            final byte markerHighNibble = (byte) ( markerByte& 0xF0);\n+            final byte markerLowNibble = (byte) ( markerByte& 0x0F);\n             if ( markerHighNibble == TINY_STRUCT )\n             {\n                 return markerLowNibble;\n             }\n+\n             switch ( markerByte )\n             {\n             case STRUCT_8:\n@@ -505,13 +564,13 @@ public class PackStream\n         public long unpackListHeader() throws IOException\n         {\n             final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n-\n+            final byte markerHighNibble = (byte) ( markerByte& 0xF0);\n+            final byte markerLowNibble = (byte) ( markerByte& 0x0F);\n             if ( markerHighNibble == TINY_LIST )\n             {\n                 return markerLowNibble;\n             }\n+\n             switch ( markerByte )\n             {\n             case LIST_8:\n@@ -530,13 +589,13 @@ public class PackStream\n         public long unpackMapHeader() throws IOException\n         {\n             final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n-\n+            final byte markerHighNibble = (byte) ( markerByte& 0xF0);\n+            final byte markerLowNibble = (byte) ( markerByte& 0x0F);\n             if ( markerHighNibble == TINY_MAP )\n             {\n                 return markerLowNibble;\n             }\n+\n             switch ( markerByte )\n             {\n             case MAP_8:\n@@ -559,6 +618,7 @@ public class PackStream\n             {\n                 return markerByte;\n             }\n+\n             switch ( markerByte )\n             {\n             case INT_8:\n@@ -581,6 +641,7 @@ public class PackStream\n             {\n                 return markerByte;\n             }\n+\n             switch ( markerByte )\n             {\n             case INT_8:\n@@ -603,6 +664,7 @@ public class PackStream\n             {\n                 return in.readDouble();\n             }\n+\n             throw new Unexpected( PackType.FLOAT, markerByte );\n         }\n \n@@ -630,32 +692,32 @@ public class PackStream\n                 size = unpackUINT16();\n                 break;\n             case BYTES_32:\n-            {\n-                long longSize = unpackUINT32();\n-                if ( longSize <= Integer.MAX_VALUE )\n                 {\n-                    size = (int) longSize;\n-                }\n-                else\n-                {\n-                    throw new Overflow( \"BYTES_32 too long for Java\" );\n+                    long longSize = unpackUINT32();\n+                    if ( longSize <= Integer.MAX_VALUE )\n+                    {\n+                        size = (int) longSize;\n+                    }\n+                    else\n+                    {\n+                        throw new Overflow( \"BYTES_32 too long for Java\" );\n+                    }\n+\n+                    break;\n                 }\n-                break;\n-            }\n             default:\n                 throw new Unexpected( PackType.BYTES, markerByte );\n             }\n+\n             return size;\n         }\n \n         public int unpackStringHeader() throws IOException\n         {\n             final byte markerByte = in.readByte();\n-            final byte markerHighNibble = (byte) (markerByte & 0xF0);\n-            final byte markerLowNibble = (byte) (markerByte & 0x0F);\n-\n+            final byte markerHighNibble = (byte) ( markerByte& 0xF0);\n+            final byte markerLowNibble = (byte) ( markerByte& 0x0F);\n             int size;\n-\n             if ( markerHighNibble == TINY_STRING )\n             {\n                 size = markerLowNibble;\n@@ -671,18 +733,19 @@ public class PackStream\n                     size = unpackUINT16();\n                     break;\n                 case STRING_32:\n-                {\n-                    long longSize = unpackUINT32();\n-                    if ( longSize <= Integer.MAX_VALUE )\n                     {\n-                        size = (int) longSize;\n+                        long longSize = unpackUINT32();\n+                        if ( longSize <= Integer.MAX_VALUE )\n+                        {\n+                            size = (int) longSize;\n+                        }\n+                        else\n+                        {\n+                            throw new Overflow( \"STRING_32 too long for Java\" );\n+                        }\n+\n+                        break;\n                     }\n-                    else\n-                    {\n-                        throw new Overflow( \"STRING_32 too long for Java\" );\n-                    }\n-                    break;\n-                }\n                 default:\n                     throw new Unexpected( PackType.STRING, markerByte );\n                 }\n@@ -719,17 +782,17 @@ public class PackStream\n \n         private int unpackUINT8() throws IOException\n         {\n-            return in.readByte() & 0xFF;\n+            return in.readByte()& 0xFF;\n         }\n \n         private int unpackUINT16() throws IOException\n         {\n-            return in.readShort() & 0xFFFF;\n+            return in.readShort()& 0xFFFF;\n         }\n \n         private long unpackUINT32() throws IOException\n         {\n-            return in.readInt() & 0xFFFFFFFFL;\n+            return in.readInt()& 0xFFFFFFFFL;\n         }\n \n         public void unpackEndOfStream() throws IOException\n@@ -770,9 +833,7 @@ public class PackStream\n         {\n             if ( expected != actual )\n             {\n-                throw new PackStreamException(\n-                        String.format( \"Invalid message received, serialized %s structures should have %d fields, \" + \"received %s structure has %d fields.\",\n-                                structType.description(), expected, structType.description(), actual ) );\n+                throw new PackStreamException( String.format( \"Invalid message received, serialized %s structures should have %d fields, \" + \"received %s structure has %d fields.\", structType.description(), expected, structType.description(), actual ) );\n             }\n         }\n     }\n@@ -805,8 +866,7 @@ public class PackStream\n     {\n         public Unexpected( PackType expectedType, byte unexpectedMarkerByte )\n         {\n-            super( \"Wrong type received. Expected \" + expectedType + \", received: \" + type( unexpectedMarkerByte ) +\n-                   \" (0x\" + Integer.toHexString( unexpectedMarkerByte ) + \").\" );\n+            super( \"Wrong type received. Expected \" + expectedType+ \", received: \" + type( unexpectedMarkerByte ) + \" (0x\" + Integer.toHexString( unexpectedMarkerByte ) + \").\" );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 174
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}