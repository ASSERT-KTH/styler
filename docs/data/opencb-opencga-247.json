{
    "project_name": "opencb-opencga",
    "error_id": "247",
    "information": {
        "errors": [
            {
                "line": "223",
                "column": "47",
                "severity": "error",
                "message": "'(' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
            }
        ]
    },
    "source_code": "    }\n\n    private RestResponse<User> changePassword () throws ClientException, IOException {\n        UserCommandOptions.ChangePasswordCommandOptions c = usersCommandOptions.changePasswordCommandOptions;\n\n        PasswordChangeParams changeParams = new PasswordChangeParams(c.user, c.password, c.npassword);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/247/UserCommandExecutor.java\nindex e9688f05505..e5a2af98282 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/247/UserCommandExecutor.java\n@@ -220,7 +220,7 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, params);\n     }\n \n-    private RestResponse<User> changePassword () throws ClientException, IOException {\n+    private RestResponse<User> changePassword() throws ClientException, IOException {\n         UserCommandOptions.ChangePasswordCommandOptions c = usersCommandOptions.changePasswordCommandOptions;\n \n         PasswordChangeParams changeParams = new PasswordChangeParams(c.user, c.password, c.npassword);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/247/UserCommandExecutor.java\nindex e9688f05505..e8140980e5e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/247/UserCommandExecutor.java\n@@ -46,201 +46,200 @@ import java.util.stream.Stream;\n  * Created by imedina on 02/03/15.\n  */\n public class UserCommandExecutor extends OpencgaCommandExecutor {\n-    // TODO: Add include/exclude/skip/... (queryOptions) to the client calls !!!!\n+  // TODO: Add include/exclude/skip/... (queryOptions) to the client calls !!!!\n+\n+  private UserCommandOptions usersCommandOptions;\n+\n+  public UserCommandExecutor(UserCommandOptions usersCommandOptions) {\n+\n+    super(usersCommandOptions.commonCommandOptions, getParsedSubCommand(usersCommandOptions.getjCommander()).startsWith(\"log\"));\n+    this.usersCommandOptions = usersCommandOptions;\n+  }\n+\n+\n+  @Override\n+  public void execute() throws Exception {\n+    logger.debug(\"Executing users command line\");\n+\n+    String subCommandString = getParsedSubCommand(usersCommandOptions.getjCommander());\n+    RestResponse queryResponse = null;\n+    switch (subCommandString) {\n+      case \"create\":\n+        queryResponse = create();\n+        break;\n+      case \"info\":\n+        queryResponse = info();\n+        break;\n+      case \"update\":\n+        queryResponse = update();\n+        break;\n+      case \"password\":\n+        queryResponse = changePassword();\n+        break;\n+      case \"projects\":\n+        queryResponse = projects();\n+        break;\n+      case \"login\":\n+        login();\n+        break;\n+      case \"logout\":\n+        logout();\n+        break;\n+      case \"template\":\n+        loadTemplate();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n+    }\n \n-    private UserCommandOptions usersCommandOptions;\n+    createOutput(queryResponse);\n+  }\n \n-    public UserCommandExecutor(UserCommandOptions usersCommandOptions) {\n+  private void login() throws ClientException, IOException {\n+    logger.debug(\"Login\");\n \n-        super(usersCommandOptions.commonCommandOptions, getParsedSubCommand(usersCommandOptions.getjCommander()).startsWith(\"log\"));\n-        this.usersCommandOptions = usersCommandOptions;\n-    }\n+    String user = usersCommandOptions.loginCommandOptions.user;\n+    String password = usersCommandOptions.loginCommandOptions.password;\n \n+    if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n+      AuthenticationResponse response = openCGAClient.login(user, password);\n+      if (response != null) {\n+        List<String> studies = new ArrayList<>();\n \n+        RestResponse<Project> projects = openCGAClient.getProjectClient().search(\n+            new ObjectMap(ProjectDBAdaptor.QueryParams.OWNER.key(), user));\n \n-    @Override\n-    public void execute() throws Exception {\n-        logger.debug(\"Executing users command line\");\n-\n-        String subCommandString = getParsedSubCommand(usersCommandOptions.getjCommander());\n-        RestResponse queryResponse = null;\n-        switch (subCommandString) {\n-            case \"create\":\n-                queryResponse = create();\n-                break;\n-            case \"info\":\n-                queryResponse = info();\n-                break;\n-            case \"update\":\n-                queryResponse = update();\n-                break;\n-            case \"password\":\n-                queryResponse = changePassword();\n-                break;\n-            case \"projects\":\n-                queryResponse = projects();\n-                break;\n-            case \"login\":\n-                login();\n-                break;\n-            case \"logout\":\n-                logout();\n-                break;\n-            case \"template\":\n-                loadTemplate();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n+        if (projects.getResponses().get(0).getNumResults() == 0) {\n+          // We try to fetch shared projects and studies instead when the user does not owe any project or study\n+          projects = openCGAClient.getProjectClient().search(new ObjectMap());\n         }\n-\n-        createOutput(queryResponse);\n-    }\n-\n-    private void login() throws ClientException, IOException {\n-        logger.debug(\"Login\");\n-\n-        String user = usersCommandOptions.loginCommandOptions.user;\n-        String password = usersCommandOptions.loginCommandOptions.password;\n-\n-        if (StringUtils.isNotEmpty(user) && StringUtils.isNotEmpty(password)) {\n-            AuthenticationResponse response = openCGAClient.login(user, password);\n-            if (response != null) {\n-                List<String> studies = new ArrayList<>();\n-\n-                RestResponse<Project> projects = openCGAClient.getProjectClient().search(\n-                        new ObjectMap(ProjectDBAdaptor.QueryParams.OWNER.key(), user));\n-\n-                if (projects.getResponses().get(0).getNumResults() == 0) {\n-                    // We try to fetch shared projects and studies instead when the user does not owe any project or study\n-                    projects = openCGAClient.getProjectClient().search(new ObjectMap());\n-                }\n-                for (Project project : projects.getResponses().get(0).getResults()) {\n-                    for (Study study : project.getStudies()) {\n-                        studies.add(study.getFqn());\n-                    }\n-                }\n-                // write CLI session file\n-                saveCliSessionFile(user, response.getToken(), response.getRefreshToken(), studies);\n-                System.out.println(\"You have been logged in correctly. This is your new token \" + response.getToken());\n-            }\n-        } else {\n-            String sessionId = usersCommandOptions.commonCommandOptions.token;\n-            String errorMsg = \"Missing password. \";\n-            if (StringUtils.isNotEmpty(sessionId)) {\n-                errorMsg += \"Active token detected \" + sessionId;\n-            }\n-            System.err.println(errorMsg);\n+        for (Project project : projects.getResponses().get(0).getResults()) {\n+          for (Study study : project.getStudies()) {\n+            studies.add(study.getFqn());\n+          }\n         }\n+        // write CLI session file\n+        saveCliSessionFile(user, response.getToken(), response.getRefreshToken(), studies);\n+        System.out.println(\"You have been logged in correctly. This is your new token \" + response.getToken());\n+      }\n+    } else {\n+      String sessionId = usersCommandOptions.commonCommandOptions.token;\n+      String errorMsg = \"Missing password. \";\n+      if (StringUtils.isNotEmpty(sessionId)) {\n+        errorMsg += \"Active token detected \" + sessionId;\n+      }\n+      System.err.println(errorMsg);\n     }\n-\n-    private void logout() throws IOException {\n-        logger.debug(\"Logout\");\n-        openCGAClient.logout();\n-        logoutCliSessionFile();\n+  }\n+\n+  private void logout() throws IOException {\n+    logger.debug(\"Logout\");\n+    openCGAClient.logout();\n+    logoutCliSessionFile();\n+  }\n+\n+  private RestResponse<User> create() throws ClientException {\n+    logger.debug(\"Creating user...\");\n+\n+    UserCommandOptions.CreateCommandOptions c = usersCommandOptions.createCommandOptions;\n+\n+    UserCreateParams createParams = new UserCreateParams()\n+        .setId(c.user)\n+        .setName(c.name)\n+        .setEmail(c.email)\n+        .setOrganization(c.organization)\n+        .setPassword(c.password);\n+\n+    return openCGAClient.getUserClient().create(createParams);\n+  }\n+\n+  private RestResponse<User> info() throws ClientException {\n+    logger.debug(\"User info\");\n+\n+    UserCommandOptions.InfoCommandOptions c = usersCommandOptions.infoCommandOptions;\n+\n+    ObjectMap params = new ObjectMap();\n+    String userId;\n+    if (StringUtils.isNotEmpty(c.userParam.user)) {\n+      userId = c.userParam.user;\n+    } else if (cliSession != null && StringUtils.isNotEmpty(cliSession.getUser())) {\n+      userId = cliSession.getUser();\n+    } else {\n+      throw new ClientException(\"Missing user parameter\");\n     }\n \n-    private RestResponse<User> create() throws ClientException {\n-        logger.debug(\"Creating user...\");\n-\n-        UserCommandOptions.CreateCommandOptions c = usersCommandOptions.createCommandOptions;\n-\n-        UserCreateParams createParams = new UserCreateParams()\n-                .setId(c.user)\n-                .setName(c.name)\n-                .setEmail(c.email)\n-                .setOrganization(c.organization)\n-                .setPassword(c.password);\n-\n-        return openCGAClient.getUserClient().create(createParams);\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, c.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, c.dataModelOptions.exclude);\n+\n+    RestResponse<User> userQueryResponse = openCGAClient.getUserClient().info(userId, params);\n+    if (userQueryResponse.getResponses().size() == 1 && userQueryResponse.getResponses().get(0).getNumResults() == 1) {\n+      params.put(\"shared\", true);\n+      RestResponse<Project> sharedProjects = openCGAClient.getUserClient().projects(userId, params);\n+      if (sharedProjects.getResponses().size() > 0 && sharedProjects.getResponses().get(0).getNumResults() > 0) {\n+        OpenCGAResult<User> userQueryResult = userQueryResponse.getResponses().get(0);\n+        List<Project> newProjectList = Stream\n+            .concat(userQueryResult.first().getProjects().stream(), sharedProjects.first().getResults().stream())\n+            .collect(Collectors.toList());\n+        userQueryResult.first().setProjects(newProjectList);\n+      }\n     }\n \n-    private RestResponse<User> info() throws ClientException {\n-        logger.debug(\"User info\");\n+    return userQueryResponse;\n+  }\n \n-        UserCommandOptions.InfoCommandOptions c = usersCommandOptions.infoCommandOptions;\n+  private RestResponse<Project> projects() throws ClientException {\n+    logger.debug(\"List all projects and studies of user\");\n \n-        ObjectMap params = new ObjectMap();\n-        String userId;\n-        if (StringUtils.isNotEmpty(c.userParam.user)) {\n-            userId = c.userParam.user;\n-        } else if (cliSession != null && StringUtils.isNotEmpty(cliSession.getUser())) {\n-            userId = cliSession.getUser();\n-        } else {\n-            throw new ClientException(\"Missing user parameter\");\n-        }\n+    UserCommandOptions.ProjectsCommandOptions c = usersCommandOptions.projectsCommandOptions;\n \n-        params.putIfNotEmpty(QueryOptions.INCLUDE, c.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, c.dataModelOptions.exclude);\n-\n-        RestResponse<User> userQueryResponse = openCGAClient.getUserClient().info(userId, params);\n-        if (userQueryResponse.getResponses().size() == 1 && userQueryResponse.getResponses().get(0).getNumResults() == 1) {\n-            params.put(\"shared\", true);\n-            RestResponse<Project> sharedProjects = openCGAClient.getUserClient().projects(userId, params);\n-            if (sharedProjects.getResponses().size() > 0 && sharedProjects.getResponses().get(0).getNumResults() > 0) {\n-                OpenCGAResult<User> userQueryResult = userQueryResponse.getResponses().get(0);\n-                List<Project> newProjectList = Stream\n-                        .concat(userQueryResult.first().getProjects().stream(), sharedProjects.first().getResults().stream())\n-                        .collect(Collectors.toList());\n-                userQueryResult.first().setProjects(newProjectList);\n-            }\n-        }\n+    ObjectMap params = new ObjectMap();\n+    params.putIfNotEmpty(QueryOptions.INCLUDE, c.dataModelOptions.include);\n+    params.putIfNotEmpty(QueryOptions.EXCLUDE, c.dataModelOptions.exclude);\n+    params.put(QueryOptions.LIMIT, c.numericOptions.limit);\n+    params.put(QueryOptions.SKIP, c.numericOptions.skip);\n \n-        return userQueryResponse;\n+    String userId;\n+    if (StringUtils.isNotEmpty(c.userParam.user)) {\n+      userId = c.userParam.user;\n+    } else if (cliSession != null) {\n+      userId = cliSession.getUser();\n+    } else {\n+      throw new ClientException(\"Missing user parameter\");\n     }\n \n-    private RestResponse<Project> projects() throws ClientException {\n-        logger.debug(\"List all projects and studies of user\");\n-\n-        UserCommandOptions.ProjectsCommandOptions c = usersCommandOptions.projectsCommandOptions;\n+    return openCGAClient.getUserClient().projects(userId, params);\n+  }\n \n-        ObjectMap params = new ObjectMap();\n-        params.putIfNotEmpty(QueryOptions.INCLUDE, c.dataModelOptions.include);\n-        params.putIfNotEmpty(QueryOptions.EXCLUDE, c.dataModelOptions.exclude);\n-        params.put(QueryOptions.LIMIT, c.numericOptions.limit);\n-        params.put(QueryOptions.SKIP, c.numericOptions.skip);\n+  private RestResponse<User> update() throws ClientException, CatalogException {\n+    logger.debug(\"Updating user\");\n \n-        String userId;\n-        if (StringUtils.isNotEmpty(c.userParam.user)) {\n-            userId = c.userParam.user;\n-        } else if (cliSession != null) {\n-            userId = cliSession.getUser();\n-        } else {\n-            throw new ClientException(\"Missing user parameter\");\n-        }\n-\n-        return openCGAClient.getUserClient().projects(userId, params);\n-    }\n+    UserCommandOptions.UpdateCommandOptions options = usersCommandOptions.updateCommandOptions;\n+    UserUpdateParams params = new UserUpdateParams(options.name, options.email, options.organization, null);\n+    return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, params);\n+  }\n \n-    private RestResponse<User> update() throws ClientException, CatalogException {\n-        logger.debug(\"Updating user\");\n+  private RestResponse<User> changePassword() throws ClientException, IOException {\n+    UserCommandOptions.ChangePasswordCommandOptions c = usersCommandOptions.changePasswordCommandOptions;\n \n-        UserCommandOptions.UpdateCommandOptions options = usersCommandOptions.updateCommandOptions;\n-        UserUpdateParams params = new UserUpdateParams(options.name, options.email, options.organization, null);\n-        return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, params);\n-    }\n+    PasswordChangeParams changeParams = new PasswordChangeParams(c.user, c.password, c.npassword);\n+    return openCGAClient.getUserClient().password(changeParams);\n+  }\n \n-    private RestResponse<User> changePassword () throws ClientException, IOException {\n-        UserCommandOptions.ChangePasswordCommandOptions c = usersCommandOptions.changePasswordCommandOptions;\n+  private void loadTemplate() throws IOException, ClientException {\n+    UserCommandOptions.TemplateCommandOptions options = usersCommandOptions.templateCommandOptions;\n \n-        PasswordChangeParams changeParams = new PasswordChangeParams(c.user, c.password, c.npassword);\n-        return openCGAClient.getUserClient().password(changeParams);\n+    TemplateConfiguration template = TemplateConfiguration.load(Paths.get(options.file));\n+    TemplateManager templateManager = new TemplateManager(clientConfiguration, options.resume, cliSession.getToken());\n+    Set<String> studies = null;\n+    if (StringUtils.isNotEmpty(options.study)) {\n+      studies = Arrays.stream(options.study.split(\",\")).collect(Collectors.toSet());\n     }\n-\n-    private void loadTemplate() throws IOException, ClientException {\n-        UserCommandOptions.TemplateCommandOptions options = usersCommandOptions.templateCommandOptions;\n-\n-        TemplateConfiguration template = TemplateConfiguration.load(Paths.get(options.file));\n-        TemplateManager templateManager = new TemplateManager(clientConfiguration, options.resume, cliSession.getToken());\n-        Set<String> studies = null;\n-        if (StringUtils.isNotEmpty(options.study)) {\n-            studies = Arrays.stream(options.study.split(\",\")).collect(Collectors.toSet());\n-        }\n-        if (options.validate) {\n-            templateManager.validate(template, studies);\n-        } else {\n-            templateManager.execute(template, studies);\n-        }\n+    if (options.validate) {\n+      templateManager.validate(template, studies);\n+    } else {\n+      templateManager.execute(template, studies);\n     }\n+  }\n \n }\n",
            "diff_size": 276
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/247/UserCommandExecutor.java\nindex e9688f05505..93ff91f79fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/247/UserCommandExecutor.java\n@@ -15,8 +15,6 @@\n  */\n \n package org.opencb.opencga.app.cli.main.executors.catalog;\n-\n-\n import org.apache.commons.lang3.StringUtils;\n import org.opencb.commons.datastore.core.ObjectMap;\n import org.opencb.commons.datastore.core.QueryOptions;\n@@ -51,14 +49,11 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n     private UserCommandOptions usersCommandOptions;\n \n     public UserCommandExecutor(UserCommandOptions usersCommandOptions) {\n-\n-        super(usersCommandOptions.commonCommandOptions, getParsedSubCommand(usersCommandOptions.getjCommander()).startsWith(\"log\"));\n+    super(usersCommandOptions.commonCommandOptions, getParsedSubCommand(usersCommandOptions.getjCommander()).startsWith(\"log\"));\n         this.usersCommandOptions = usersCommandOptions;\n     }\n \n-\n-\n-    @Override\n+@Override\n     public void execute() throws Exception {\n         logger.debug(\"Executing users command line\");\n \n@@ -220,7 +215,7 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, params);\n     }\n \n-    private RestResponse<User> changePassword () throws ClientException, IOException {\n+    private RestResponse<User> changePassword() throws ClientException, IOException {\n         UserCommandOptions.ChangePasswordCommandOptions c = usersCommandOptions.changePasswordCommandOptions;\n \n         PasswordChangeParams changeParams = new PasswordChangeParams(c.user, c.password, c.npassword);\n@@ -243,4 +238,4 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/247/UserCommandExecutor.java\nindex e9688f05505..e5a2af98282 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/247/UserCommandExecutor.java\n@@ -220,7 +220,7 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, params);\n     }\n \n-    private RestResponse<User> changePassword () throws ClientException, IOException {\n+    private RestResponse<User> changePassword() throws ClientException, IOException {\n         UserCommandOptions.ChangePasswordCommandOptions c = usersCommandOptions.changePasswordCommandOptions;\n \n         PasswordChangeParams changeParams = new PasswordChangeParams(c.user, c.password, c.npassword);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/247/UserCommandExecutor.java\nindex e9688f05505..e5a2af98282 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/247/UserCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/247/UserCommandExecutor.java\n@@ -220,7 +220,7 @@ public class UserCommandExecutor extends OpencgaCommandExecutor {\n         return openCGAClient.getUserClient().update(usersCommandOptions.updateCommandOptions.user, params);\n     }\n \n-    private RestResponse<User> changePassword () throws ClientException, IOException {\n+    private RestResponse<User> changePassword() throws ClientException, IOException {\n         UserCommandOptions.ChangePasswordCommandOptions c = usersCommandOptions.changePasswordCommandOptions;\n \n         PasswordChangeParams changeParams = new PasswordChangeParams(c.user, c.password, c.npassword);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}