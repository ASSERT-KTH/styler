{
    "project_name": "neo4j-neo4j",
    "error_id": "201",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "10",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/201/JsonMessageBodyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/201/JsonMessageBodyReader.java\nindex f5d7a2cc304..0b45517f973 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/201/JsonMessageBodyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/201/JsonMessageBodyReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.http.cypher.format.input.json;\n \n import com.fasterxml.jackson.core.JsonFactory;\n@@ -39,7 +40,7 @@ import org.neo4j.server.http.cypher.format.api.Statement;\n import org.neo4j.server.http.cypher.format.common.Neo4jJsonCodec;\n \n @Provider\n-@Consumes( MediaType.APPLICATION_JSON )\n+@Consumes(MediaType.APPLICATION_JSON)\n public class JsonMessageBodyReader implements MessageBodyReader<InputEventStream>\n {\n \n@@ -51,54 +52,54 @@ public class JsonMessageBodyReader implements MessageBodyReader<InputEventStream\n     {\n         // This can be copied here, as this variant of the Neo4j JSON codec doesn't need to be aware of an ongoing\n         // transaction.\n-        this.jsonFactory = DefaultJsonFactory.INSTANCE.get().copy().setCodec( new Neo4jJsonCodec() );\n+        this.jsonFactory = DefaultJsonFactory.INSTANCE.get().copy().setCodec(new Neo4jJsonCodec());\n     }\n \n     @Override\n-    public boolean isReadable( Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType )\n+    public boolean isReadable(Class<?> type, Type genericType, Annotation[] annotations, MediaType mediaType)\n     {\n-        return type.isAssignableFrom( InputEventStream.class );\n+        return type.isAssignableFrom(InputEventStream.class);\n     }\n \n     @Override\n-    public InputEventStream readFrom( Class<InputEventStream> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n-            MultivaluedMap<String,String> httpHeaders, InputStream entityStream ) throws WebApplicationException\n+    public InputEventStream readFrom(Class<InputEventStream> type, Type genericType, Annotation[] annotations, MediaType mediaType,\n+                                     MultivaluedMap<String, String> httpHeaders, InputStream entityStream) throws WebApplicationException\n     {\n \n-        Map<Statement,InputStatement> inputStatements = new HashMap<>();\n-        Map<String,Object> parameters = new HashMap<>();\n-        parameters.put( STATEMENTS_KEY, inputStatements );\n-        StatementDeserializer statementDeserializer = new StatementDeserializer( this.jsonFactory, entityStream );\n-        return new InputEventStream( parameters, () ->\n+        Map<Statement, InputStatement> inputStatements = new HashMap<>();\n+        Map<String, Object> parameters = new HashMap<>();\n+        parameters.put(STATEMENTS_KEY, inputStatements);\n+        StatementDeserializer statementDeserializer = new StatementDeserializer(this.jsonFactory, entityStream);\n+        return new InputEventStream(parameters, () ->\n         {\n             InputStatement inputStatement = statementDeserializer.read();\n \n-            if ( inputStatement == null )\n+            if (inputStatement == null)\n             {\n                 return null;\n             }\n \n-            Statement statement = new Statement( inputStatement.statement(), inputStatement.parameters() );\n-            inputStatements.put( statement, inputStatement );\n+            Statement statement = new Statement(inputStatement.statement(), inputStatement.parameters());\n+            inputStatements.put(statement, inputStatement);\n             return statement;\n-        } );\n+        });\n     }\n \n     /**\n      * Extracts a representation of a statement that is legacy json input format specific.\n      *\n      * @param parameters parameter mep from which the statement will be extracted.\n-     * @param statement the to be extracted statement in generic format.\n+     * @param statement  the to be extracted statement in generic format.\n      * @return a statement representation.\n      */\n-    public static InputStatement getInputStatement( Map<String,Object> parameters, Statement statement )\n+    public static InputStatement getInputStatement(Map<String, Object> parameters, Statement statement)\n     {\n-        if ( !parameters.containsKey( STATEMENTS_KEY ) )\n+        if (!parameters.containsKey(STATEMENTS_KEY))\n         {\n             return null;\n         }\n \n-        Map<Statement,InputStatement> inputStatements = (Map<Statement,InputStatement>) parameters.get( STATEMENTS_KEY );\n-        return inputStatements.get( statement );\n+        Map<Statement, InputStatement> inputStatements = (Map<Statement, InputStatement>) parameters.get(STATEMENTS_KEY);\n+        return inputStatements.get(statement);\n     }\n }\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/201/JsonMessageBodyReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/201/JsonMessageBodyReader.java\nindex f5d7a2cc304..e040a9a8c36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/201/JsonMessageBodyReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/201/JsonMessageBodyReader.java\n@@ -101,4 +101,4 @@ public class JsonMessageBodyReader implements MessageBodyReader<InputEventStream\n         Map<Statement,InputStatement> inputStatements = (Map<Statement,InputStatement>) parameters.get( STATEMENTS_KEY );\n         return inputStatements.get( statement );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}