{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2363",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "62",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2363/ParallellCentralityCalculation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2363/ParallellCentralityCalculation.java\nindex f036a5fbe4a..c0ee30e6c0c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2363/ParallellCentralityCalculation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2363/ParallellCentralityCalculation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.centrality;\n \n import java.util.LinkedList;\n@@ -33,80 +34,79 @@ import org.neo4j.graphdb.Node;\n  * instead of re-running it for each centrality measure. We do it by collecting\n  * a number of {@link ShortestPathBasedCentrality} and then running the\n  * {@link SingleSourceShortestPath} for every node.\n- * @complexity The sum of the complexities of the centrality measures to\n- *             compute, except that all the n*A terms implode into one single\n- *             n*A term.\n+ *\n+ * @param <ShortestPathCostType> The datatype used by the underlying\n+ *                               {@link SingleSourceShortestPath} algorithm, i.e. the type the edge\n+ *                               weights are represented by.\n  * @author Patrik Larsson\n- * @param <ShortestPathCostType>\n- *            The datatype used by the underlying\n- *            {@link SingleSourceShortestPath} algorithm, i.e. the type the edge\n- *            weights are represented by.\n+ * @complexity The sum of the complexities of the centrality measures to\n+ * compute, except that all the n*A terms implode into one single\n+ * n*A term.\n  */\n public class ParallellCentralityCalculation<ShortestPathCostType>\n {\n-    protected SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath;\n-    protected Set<Node> nodeSet;\n-    protected List<ShortestPathBasedCentrality<?,ShortestPathCostType>> calculations = new LinkedList<>();\n-    protected boolean doneCalculation;\n+  protected SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath;\n+  protected Set<Node> nodeSet;\n+  protected List<ShortestPathBasedCentrality<?, ShortestPathCostType>> calculations = new LinkedList<>();\n+  protected boolean doneCalculation;\n+\n+  /**\n+   * Default constructor.\n+   *\n+   * @param singleSourceShortestPath Underlying singleSourceShortestPath.\n+   * @param nodeSet                  A set containing the nodes for which centrality values should\n+   *                                 be computed.\n+   */\n+  public ParallellCentralityCalculation(\n+      SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n+      Set<Node> nodeSet)\n+  {\n+    super();\n+    this.singleSourceShortestPath = singleSourceShortestPath;\n+    this.nodeSet = nodeSet;\n+  }\n \n-    /**\n-     * Default constructor.\n-     * @param singleSourceShortestPath\n-     *            Underlying singleSourceShortestPath.\n-     * @param nodeSet\n-     *            A set containing the nodes for which centrality values should\n-     *            be computed.\n-     */\n-    public ParallellCentralityCalculation(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        Set<Node> nodeSet )\n+  /**\n+   * This adds a centrality measure to be included in the calculation.\n+   *\n+   * @param shortestPathBasedCentrality The centrality algorithm.\n+   */\n+  public void addCalculation(\n+      ShortestPathBasedCentrality<?, ShortestPathCostType> shortestPathBasedCentrality)\n+  {\n+    if (doneCalculation)\n     {\n-        super();\n-        this.singleSourceShortestPath = singleSourceShortestPath;\n-        this.nodeSet = nodeSet;\n+      throw new RuntimeException(\n+          \"Trying to add a centrality calculation to a parallell computation that has already been done.\");\n     }\n+    calculations.add(shortestPathBasedCentrality);\n+    shortestPathBasedCentrality.skipCalculation();\n+  }\n \n-    /**\n-     * This adds a centrality measure to be included in the calculation.\n-     * @param shortestPathBasedCentrality\n-     *            The centrality algorithm.\n-     */\n-    public void addCalculation(\n-        ShortestPathBasedCentrality<?,ShortestPathCostType> shortestPathBasedCentrality )\n+  /**\n+   * Method that will perform the calculation. After this we are of course\n+   * unable to add more measures to this object.\n+   */\n+  public void calculate()\n+  {\n+    // Don't do it more than once\n+    if (doneCalculation)\n     {\n-        if ( doneCalculation )\n-        {\n-            throw new RuntimeException(\n-                \"Trying to add a centrality calculation to a parallell computation that has already been done.\" );\n-        }\n-        calculations.add( shortestPathBasedCentrality );\n-        shortestPathBasedCentrality.skipCalculation();\n+      return;\n     }\n-\n-    /**\n-     * Method that will perform the calculation. After this we are of course\n-     * unable to add more measures to this object.\n-     */\n-    public void calculate()\n+    doneCalculation = true;\n+    // For all nodes...\n+    for (Node startNode : nodeSet)\n     {\n-        // Don't do it more than once\n-        if ( doneCalculation )\n-        {\n-            return;\n-        }\n-        doneCalculation = true;\n-        // For all nodes...\n-        for ( Node startNode : nodeSet )\n-        {\n-            // Prepare the singleSourceShortestPath\n-            singleSourceShortestPath.reset();\n-            singleSourceShortestPath.setStartNode( startNode );\n-            // Process\n-            for ( ShortestPathBasedCentrality<?,ShortestPathCostType> calculation : calculations )\n-            {\n-                calculation.processShortestPaths( startNode,\n-                    singleSourceShortestPath );\n-            }\n-        }\n+      // Prepare the singleSourceShortestPath\n+      singleSourceShortestPath.reset();\n+      singleSourceShortestPath.setStartNode(startNode);\n+      // Process\n+      for (ShortestPathBasedCentrality<?, ShortestPathCostType> calculation : calculations)\n+      {\n+        calculation.processShortestPaths(startNode,\n+            singleSourceShortestPath);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 87
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2363/ParallellCentralityCalculation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2363/ParallellCentralityCalculation.java\nindex f036a5fbe4a..e017f041bc9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2363/ParallellCentralityCalculation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2363/ParallellCentralityCalculation.java\n@@ -57,10 +57,8 @@ public class ParallellCentralityCalculation<ShortestPathCostType>\n      *            A set containing the nodes for which centrality values should\n      *            be computed.\n      */\n-    public ParallellCentralityCalculation(\n-        SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath,\n-        Set<Node> nodeSet )\n-    {\n+    public ParallellCentralityCalculation( SingleSourceShortestPath<ShortestPathCostType> singleSourceShortestPath, Set<Node> nodeSet )\n+{\n         super();\n         this.singleSourceShortestPath = singleSourceShortestPath;\n         this.nodeSet = nodeSet;\n@@ -71,14 +69,12 @@ public class ParallellCentralityCalculation<ShortestPathCostType>\n      * @param shortestPathBasedCentrality\n      *            The centrality algorithm.\n      */\n-    public void addCalculation(\n-        ShortestPathBasedCentrality<?,ShortestPathCostType> shortestPathBasedCentrality )\n-    {\n+    public void addCalculation( ShortestPathBasedCentrality<?,ShortestPathCostType> shortestPathBasedCentrality )\n+{\n         if ( doneCalculation )\n         {\n-            throw new RuntimeException(\n-                \"Trying to add a centrality calculation to a parallell computation that has already been done.\" );\n-        }\n+            throw new RuntimeException( \"Trying to add a centrality calculation to a parallell computation that has already been done.\" );\n+    }\n         calculations.add( shortestPathBasedCentrality );\n         shortestPathBasedCentrality.skipCalculation();\n     }\n@@ -94,7 +90,8 @@ public class ParallellCentralityCalculation<ShortestPathCostType>\n         {\n             return;\n         }\n-        doneCalculation = true;\n+\n+doneCalculation = true;\n         // For all nodes...\n         for ( Node startNode : nodeSet )\n         {\n@@ -104,9 +101,8 @@ public class ParallellCentralityCalculation<ShortestPathCostType>\n             // Process\n             for ( ShortestPathBasedCentrality<?,ShortestPathCostType> calculation : calculations )\n             {\n-                calculation.processShortestPaths( startNode,\n-                    singleSourceShortestPath );\n-            }\n+                calculation.processShortestPaths( startNode, singleSourceShortestPath );\n+    }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}