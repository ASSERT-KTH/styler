{
    "project_name": "eclipse-kura",
    "error_id": "8",
    "information": {
        "errors": [
            {
                "line": "80",
                "severity": "error",
                "message": "Line is longer than 150 characters (found 213).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    private static final long serialVersionUID = 693996483299382655L;\n\n    private static final String CLOUD_CONNECTION_FACTORY_FILTER = \"(|(objectClass=org.eclipse.kura.cloudconnection.factory.CloudConnectionFactory)(objectClass=org.eclipse.kura.cloud.factory.CloudServiceFactory))\";\n\n    private static final String KURA_UI_CSF_PID_DEFAULT = \"kura.ui.csf.pid.default\";\n    private static final String KURA_UI_CSF_PID_REGEX = \"kura.ui.csf.pid.regex\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 155).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/8/GwtCloudConnectionServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/8/GwtCloudConnectionServiceImpl.java\nindex f3548a49556..bd5cf5fe251 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/8/GwtCloudConnectionServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/8/GwtCloudConnectionServiceImpl.java\n@@ -11,6 +11,7 @@\n  *  Eurotech\n  *  Red Hat Inc\n  *******************************************************************************/\n+\n package org.eclipse.kura.web.server;\n \n import static java.lang.String.format;\n@@ -77,7 +78,8 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     private static final long serialVersionUID = 693996483299382655L;\n \n-    private static final String CLOUD_CONNECTION_FACTORY_FILTER = \"(|(objectClass=org.eclipse.kura.cloudconnection.factory.CloudConnectionFactory)(objectClass=org.eclipse.kura.cloud.factory.CloudServiceFactory))\";\n+    private static final String CLOUD_CONNECTION_FACTORY_FILTER =\n+        \"(|(objectClass=org.eclipse.kura.cloudconnection.factory.CloudConnectionFactory)(objectClass=org.eclipse.kura.cloud.factory.CloudServiceFactory))\";\n \n     private static final String KURA_UI_CSF_PID_DEFAULT = \"kura.ui.csf.pid.default\";\n     private static final String KURA_UI_CSF_PID_REGEX = \"kura.ui.csf.pid.regex\";\n@@ -125,7 +127,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         result.addAll(getSubscriberInstances());\n \n         auditLogger.info(\"UI CloudConnection - Success - Successfully listed cloud entries for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n \n         return result;\n     }\n@@ -139,7 +141,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         withAllServices(null, filter, service -> {\n             if (service instanceof CloudConnectionManager) {\n                 cloudConnectionEntry\n-                        .setState(((CloudConnectionManager) service).isConnected() ? CONNECTED : DISCONNECTED);\n+                    .setState(((CloudConnectionManager) service).isConnected() ? CONNECTED : DISCONNECTED);\n                 cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.CONNECTION);\n             } else if (service instanceof CloudEndpoint) {\n                 cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.ENDPOINT);\n@@ -167,15 +169,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         result.setPubSubFactories(pubSubFactories);\n \n         auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully listed cloud component factories for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+            \"UI CloudConnection - Success - Successfully listed cloud component factories for user: {}, session {}\",\n+            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n \n         return result;\n     }\n \n     @Override\n     public List<GwtConfigComponent> getStackConfigurationsByFactory(final String factoryPid,\n-            final String cloudServicePid) throws GwtKuraException {\n+                                                                    final String cloudServicePid) throws GwtKuraException {\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n@@ -189,21 +191,21 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         });\n \n         final List<GwtConfigComponent> configs = GwtComponentServiceInternal.findComponentConfigurations(session,\n-                FilterUtil.getPidFilter(result.iterator()));\n+            FilterUtil.getPidFilter(result.iterator()));\n \n         auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully obtained stack configurations by factory for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+            \"UI CloudConnection - Success - Successfully obtained stack configurations by factory for user: {}, session {}\",\n+            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n \n         return configs;\n     }\n \n     @Override\n     public void createCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n         if (factoryPid == null || factoryPid.trim().isEmpty() || cloudServicePid == null\n-                || cloudServicePid.trim().isEmpty()) {\n+            || cloudServicePid.trim().isEmpty()) {\n             throw new GwtKuraException(GwtKuraErrorCode.ILLEGAL_NULL_ARGUMENT);\n         }\n \n@@ -217,15 +219,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         final HttpSession session = request.getSession(false);\n \n         auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully created cloud service from factory for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+            \"UI CloudConnection - Success - Successfully created cloud service from factory for user: {}, session {}\",\n+            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n     }\n \n     @Override\n     public void deleteCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         if (factoryPid == null || factoryPid.trim().isEmpty() || cloudServicePid == null\n-                || cloudServicePid.trim().isEmpty()) {\n+            || cloudServicePid.trim().isEmpty()) {\n             throw new GwtKuraException(GwtKuraErrorCode.ILLEGAL_NULL_ARGUMENT);\n         }\n \n@@ -239,8 +241,8 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         final HttpSession session = request.getSession(false);\n \n         auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully deleted cloud service from factory for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+            \"UI CloudConnection - Success - Successfully deleted cloud service from factory for user: {}, session {}\",\n+            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n     }\n \n     @Override\n@@ -267,8 +269,8 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         final HttpSession session = request.getSession(false);\n \n         auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully listed cloud service pid for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+            \"UI CloudConnection - Success - Successfully listed cloud service pid for user: {}, session {}\",\n+            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n \n         return result.get();\n     }\n@@ -298,15 +300,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         final HttpSession session = request.getSession(false);\n \n         auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully listed cloud service pid for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+            \"UI CloudConnection - Success - Successfully listed cloud service pid for user: {}, session {}\",\n+            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n \n         return result.get();\n     }\n \n     @Override\n     public void createPubSubInstance(final GwtXSRFToken token, final String pid, final String factoryPid,\n-            final String cloudConnectionPid) throws GwtKuraException {\n+                                     final String cloudConnectionPid) throws GwtKuraException {\n         checkXSRFToken(token);\n \n         final HttpServletRequest request = getThreadLocalRequest();\n@@ -314,11 +316,11 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         ServiceLocator.applyToServiceOptionally(ConfigurationService.class, cs -> {\n             cs.createFactoryConfiguration(factoryPid, pid, Collections.singletonMap(\n-                    CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value(), cloudConnectionPid), true);\n+                CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value(), cloudConnectionPid), true);\n \n             auditLogger.info(\n-                    \"UI CloudConnection - Success - Successfully created pub/sub instance for user: {}, session {}\",\n-                    session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+                \"UI CloudConnection - Success - Successfully created pub/sub instance for user: {}, session {}\",\n+                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n \n             return (Void) null;\n         });\n@@ -335,8 +337,8 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n             cs.deleteFactoryConfiguration(pid, true);\n \n             auditLogger.info(\n-                    \"UI CloudConnection - Success - Successfully deleted pub/sub instance for user: {}, session {}\",\n-                    session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+                \"UI CloudConnection - Success - Successfully deleted pub/sub instance for user: {}, session {}\",\n+                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n \n             return (Void) null;\n         });\n@@ -345,7 +347,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     private static GwtCloudEntry toGwt(final ComponentDescriptionDTO component) {\n \n         if (Arrays.stream(component.serviceInterfaces)\n-                .noneMatch(intf -> CLOUD_PUBLISHER.equals(intf) || CLOUD_SUBSCRIBER.equals(intf))) {\n+            .noneMatch(intf -> CLOUD_PUBLISHER.equals(intf) || CLOUD_SUBSCRIBER.equals(intf))) {\n             return null;\n         }\n \n@@ -358,15 +360,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         if (!(factoryPid instanceof String)) {\n             auditLogger.warn(\n-                    \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the service.pid property, ignoring it\",\n-                    component.name);\n+                \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the service.pid property, ignoring it\",\n+                component.name);\n             return null;\n         }\n \n         if (!(ccsfFactoryPid instanceof String)) {\n             auditLogger.warn(\n-                    \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the {} property, ignoring it\",\n-                    component.name, ccsfFactoryPidPropName);\n+                \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the {} property, ignoring it\",\n+                component.name, ccsfFactoryPidPropName);\n             return null;\n         }\n \n@@ -384,7 +386,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr ->\n \n-        scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::toGwt).filter(Objects::nonNull)\n+            scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::toGwt).filter(Objects::nonNull)\n                 .collect(Collectors.toList()));\n     }\n \n@@ -415,8 +417,8 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         try {\n             context.getServiceReferences(CloudPublisher.class, null).stream()\n-                    .map(ref -> toGwt(ref, GwtCloudPubSubEntry.Type.PUBLISHER)).filter(Objects::nonNull)\n-                    .forEach(result::add);\n+                .map(ref -> toGwt(ref, GwtCloudPubSubEntry.Type.PUBLISHER)).filter(Objects::nonNull)\n+                .forEach(result::add);\n \n             return result;\n         } catch (InvalidSyntaxException e) {\n@@ -431,8 +433,8 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         try {\n             context.getServiceReferences(CloudSubscriber.class, null).stream()\n-                    .map(ref -> toGwt(ref, GwtCloudPubSubEntry.Type.SUBSCRIBER)).filter(Objects::nonNull)\n-                    .forEach(result::add);\n+                .map(ref -> toGwt(ref, GwtCloudPubSubEntry.Type.SUBSCRIBER)).filter(Objects::nonNull)\n+                .forEach(result::add);\n \n             return result;\n         } catch (InvalidSyntaxException e) {\n@@ -441,12 +443,12 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     }\n \n     private static void withAllCloudConnectionFactoryRefs(final ServiceReferenceConsumer<Object> consumer)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         ServiceLocator.withAllServiceReferences(CLOUD_CONNECTION_FACTORY_FILTER, consumer);\n     }\n \n     private static void withAllCloudConnectionFactories(final ServiceConsumer<CloudConnectionFactory> consumer)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         withAllServices(CLOUD_CONNECTION_FACTORY_FILTER, o -> consumer.consume(wrap(o)));\n     }\n \n@@ -499,7 +501,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     @Override\n     public void updateStackComponentConfiguration(GwtXSRFToken xsrfToken, GwtConfigComponent component)\n-            throws GwtKuraException {\n+        throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n \n         final HttpServletRequest request = getThreadLocalRequest();\n@@ -516,15 +518,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         final HttpSession session = request.getSession(false);\n \n         Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n+            .getServiceReferences(CloudService.class, null);\n \n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n                 String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                    .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n                 Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n+                    .getServiceReferences(DataService.class, dataServiceRef);\n \n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n@@ -540,22 +542,22 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n                         } catch (KuraConnectException e) {\n                             logger.warn(\"Error connecting\");\n                             gwtKuraException = new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n-                                    \"Error connecting. Please review your configuration.\");\n+                                \"Error connecting. Please review your configuration.\");\n                         } catch (InterruptedException e) {\n                             logger.warn(\"Interrupt Exception\");\n                             gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e,\n-                                    \"Interrupt Exception\");\n+                                \"Interrupt Exception\");\n                         } catch (IllegalStateException e) {\n                             logger.warn(\"Illegal client state\");\n                             gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e,\n-                                    \"Illegal client state\");\n+                                \"Illegal client state\");\n                         }\n \n                         if (gwtKuraException != null) {\n                             auditLogger.warn(\n-                                    \"UI CloudConnection - Failure - Failed to connect data service for user: {}, session: {}, connection id: {}\",\n-                                    session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(),\n-                                    connectionId);\n+                                \"UI CloudConnection - Failure - Failed to connect data service for user: {}, session: {}, connection id: {}\",\n+                                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(),\n+                                connectionId);\n                             throw gwtKuraException;\n                         }\n                     }\n@@ -566,30 +568,30 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         }\n \n         Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n+            .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n \n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n                 CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                    .getService(cloudConnectionManagerReference);\n                 try {\n                     cloudConnectionManager.connect();\n                 } catch (KuraException e) {\n                     logger.warn(\"Error connecting\");\n                     auditLogger.warn(\n-                            \"UI CloudConnection - Failure - Failed to connect data service for user: {}, session: {}, connection id: {}\",\n-                            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n+                        \"UI CloudConnection - Failure - Failed to connect data service for user: {}, session: {}, connection id: {}\",\n+                        session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n                     throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n-                            \"Error connecting. Please review your configuration.\");\n+                        \"Error connecting. Please review your configuration.\");\n                 }\n             }\n             ServiceLocator.getInstance().ungetService(cloudConnectionManagerReference);\n         }\n \n         auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully connected data service for user: {}, session: {}, connection id: {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n+            \"UI CloudConnection - Success - Successfully connected data service for user: {}, session: {}, connection id: {}\",\n+            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n     }\n \n     @Override\n@@ -600,15 +602,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         final HttpSession session = request.getSession(false);\n \n         Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n+            .getServiceReferences(CloudService.class, null);\n \n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n                 String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                    .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n                 Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n+                    .getServiceReferences(DataService.class, dataServiceRef);\n \n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n@@ -622,30 +624,30 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         }\n \n         Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n+            .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n \n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n                 CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                    .getService(cloudConnectionManagerReference);\n                 try {\n                     cloudConnectionManager.disconnect();\n                 } catch (KuraException e) {\n                     logger.warn(\"Error disconnecting\");\n                     auditLogger.warn(\n-                            \"UI CloudConnection - Failure - Failed to disconnect data service for user: {}, session: {}, connection id: {}\",\n-                            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n+                        \"UI CloudConnection - Failure - Failed to disconnect data service for user: {}, session: {}, connection id: {}\",\n+                        session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n                     throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n-                            \"Error disconnecting. Please review your configuration.\");\n+                        \"Error disconnecting. Please review your configuration.\");\n                 }\n             }\n             ServiceLocator.getInstance().ungetService(cloudConnectionManagerReference);\n         }\n \n         auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully disconnected data service for user: {}, session: {}, connection id: {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n+            \"UI CloudConnection - Success - Successfully disconnected data service for user: {}, session: {}, connection id: {}\",\n+            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n     }\n \n     @Override\n@@ -654,15 +656,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         boolean isConnected = false;\n \n         Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n+            .getServiceReferences(CloudService.class, null);\n \n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n                 String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                    .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n                 Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n+                    .getServiceReferences(DataService.class, dataServiceRef);\n \n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n@@ -676,13 +678,13 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n         }\n \n         Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n+            .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n \n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n                 CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                    .getService(cloudConnectionManagerReference);\n \n                 isConnected = cloudConnectionManager.isConnected();\n             }\n",
            "diff_size": 73
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "385",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 202).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/8/GwtCloudConnectionServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/8/GwtCloudConnectionServiceImpl.java\nindex f3548a49556..041e1a5589e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/8/GwtCloudConnectionServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/8/GwtCloudConnectionServiceImpl.java\n@@ -382,9 +382,7 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     private static List<GwtCloudEntry> getPubSubFactories() throws GwtKuraException {\n \n-        return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr ->\n-\n-        scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::toGwt).filter(Objects::nonNull)\n+        return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr -> scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::toGwt).filter(Objects::nonNull)\n                 .collect(Collectors.toList()));\n     }\n \n@@ -691,4 +689,4 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         return isConnected;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 207).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "157",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "245",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "256",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "258",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "271",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 203).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "287",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "304",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 233).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "327",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "338",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "413",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "417",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "418",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "443",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 246).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "453",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "462",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 238).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "470",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 231).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "479",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "483",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "484",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "496",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "505",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 241).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "513",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 234).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "520",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "524",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "525",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "537",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 182).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/8/GwtCloudConnectionServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/8/GwtCloudConnectionServiceImpl.java\nindex f3548a49556..c16586e5a02 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/8/GwtCloudConnectionServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/8/GwtCloudConnectionServiceImpl.java\n@@ -30,10 +30,8 @@ import java.util.Objects;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n import java.util.stream.Collectors;\n-\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n-\n import org.eclipse.kura.KuraConnectException;\n import org.eclipse.kura.KuraException;\n import org.eclipse.kura.cloud.CloudService;\n@@ -76,35 +74,24 @@ import org.slf4j.LoggerFactory;\n public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet implements GwtCloudConnectionService {\n \n     private static final long serialVersionUID = 693996483299382655L;\n-\n     private static final String CLOUD_CONNECTION_FACTORY_FILTER = \"(|(objectClass=org.eclipse.kura.cloudconnection.factory.CloudConnectionFactory)(objectClass=org.eclipse.kura.cloud.factory.CloudServiceFactory))\";\n-\n     private static final String KURA_UI_CSF_PID_DEFAULT = \"kura.ui.csf.pid.default\";\n     private static final String KURA_UI_CSF_PID_REGEX = \"kura.ui.csf.pid.regex\";\n-\n     private static final String CLOUD_PUBLISHER = CloudPublisher.class.getName();\n     private static final String CLOUD_SUBSCRIBER = CloudSubscriber.class.getName();\n-\n     private static final String DATA_SERVICE_REFERENCE_NAME = \"DataService\";\n-\n     private static final Logger auditLogger = LoggerFactory.getLogger(\"AuditLogger\");\n-\n     private static final Logger logger = LoggerFactory.getLogger(GwtCertificatesServiceImpl.class);\n-\n     @Override\n     public List<GwtCloudEntry> findCloudEntries() throws GwtKuraException {\n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n         final List<GwtCloudEntry> result = new ArrayList<>();\n-\n         withAllCloudConnectionFactories(service -> {\n-\n             final String factoryPid = service.getFactoryPid();\n             if (factoryPid == null) {\n                 return;\n             }\n-\n             for (final String pid : service.getManagedCloudConnectionPids()) {\n                 if (pid == null) {\n                     continue;\n@@ -113,39 +100,29 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n                 final GwtCloudConnectionEntry cloudConnectionEntry = new GwtCloudConnectionEntry();\n                 cloudConnectionEntry.setCloudConnectionFactoryPid(factoryPid);\n                 cloudConnectionEntry.setPid(pid);\n-\n                 fillState(cloudConnectionEntry);\n-\n                 result.add(cloudConnectionEntry);\n             }\n-\n         });\n-\n         result.addAll(getPublisherInstances());\n         result.addAll(getSubscriberInstances());\n-\n-        auditLogger.info(\"UI CloudConnection - Success - Successfully listed cloud entries for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n-\n+        auditLogger.info(\"UI CloudConnection - Success - Successfully listed cloud entries for user: {}, session {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n         return result;\n     }\n \n     private static void fillState(final GwtCloudConnectionEntry cloudConnectionEntry) throws GwtKuraException {\n-\n         cloudConnectionEntry.setState(UNREGISTERED);\n \n         final String filter = format(\"(%s=%s)\", KURA_SERVICE_PID, cloudConnectionEntry.getPid());\n-\n         withAllServices(null, filter, service -> {\n             if (service instanceof CloudConnectionManager) {\n-                cloudConnectionEntry\n-                        .setState(((CloudConnectionManager) service).isConnected() ? CONNECTED : DISCONNECTED);\n+                cloudConnectionEntry.setState(((CloudConnectionManager) service).isConnected() ? CONNECTED : DISCONNECTED);\n                 cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.CONNECTION);\n             } else if (service instanceof CloudEndpoint) {\n                 cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.ENDPOINT);\n             } else if (service instanceof CloudService) {\n-                cloudConnectionEntry.setState(((CloudService) service).isConnected() ? CONNECTED : DISCONNECTED);\n-                cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.CONNECTION);\n+                       cloudConnectionEntry.setState(((CloudService) service).isConnected() ? CONNECTED : DISCONNECTED);\n+                       cloudConnectionEntry.setConnectionType(GwtCloudConnectionType.CONNECTION);\n             }\n         });\n     }\n@@ -154,59 +131,41 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n     public GwtCloudComponentFactories getCloudComponentFactories() throws GwtKuraException {\n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n         final List<String> cloudConnectionFactoryPids = new ArrayList<>();\n-\n         withAllCloudConnectionFactories(service -> cloudConnectionFactoryPids.add(service.getFactoryPid()));\n \n         final List<GwtCloudEntry> pubSubFactories = getPubSubFactories();\n-\n         final GwtCloudComponentFactories result = new GwtCloudComponentFactories();\n-\n         result.setCloudConnectionFactoryPids(cloudConnectionFactoryPids);\n         result.setPubSubFactories(pubSubFactories);\n-\n-        auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully listed cloud component factories for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n-\n+        auditLogger.info(\"UI CloudConnection - Success - Successfully listed cloud component factories for user: {}, session {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n         return result;\n     }\n \n     @Override\n-    public List<GwtConfigComponent> getStackConfigurationsByFactory(final String factoryPid,\n-            final String cloudServicePid) throws GwtKuraException {\n-\n+    public List<GwtConfigComponent> getStackConfigurationsByFactory(final String factoryPid, final String cloudServicePid) throws GwtKuraException {\n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n         final List<String> result = new ArrayList<>();\n-\n         withAllCloudConnectionFactories(factory -> {\n             if (factoryPid.equals(factory.getFactoryPid())) {\n                 result.addAll(factory.getStackComponentsPids(cloudServicePid));\n             }\n         });\n \n-        final List<GwtConfigComponent> configs = GwtComponentServiceInternal.findComponentConfigurations(session,\n-                FilterUtil.getPidFilter(result.iterator()));\n-\n-        auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully obtained stack configurations by factory for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n-\n+        final List<GwtConfigComponent> configs = GwtComponentServiceInternal.findComponentConfigurations(session, FilterUtil.getPidFilter(result.iterator()));\n+        auditLogger.info(\"UI CloudConnection - Success - Successfully obtained stack configurations by factory for user: {}, session {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n         return configs;\n     }\n \n     @Override\n-    public void createCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid)\n-            throws GwtKuraException {\n+    public void createCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid) throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n-        if (factoryPid == null || factoryPid.trim().isEmpty() || cloudServicePid == null\n-                || cloudServicePid.trim().isEmpty()) {\n+\n+        if (factoryPid == null || factoryPid.trim().isEmpty()\n+                || cloudServicePid == null || cloudServicePid.trim().isEmpty()) {\n             throw new GwtKuraException(GwtKuraErrorCode.ILLEGAL_NULL_ARGUMENT);\n         }\n-\n         withAllCloudConnectionFactories(service -> {\n             if (service.getFactoryPid().equals(factoryPid)) {\n                 service.createConfiguration(cloudServicePid);\n@@ -215,20 +174,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n-        auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully created cloud service from factory for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+        auditLogger.info(\"UI CloudConnection - Success - Successfully created cloud service from factory for user: {}, session {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n     }\n \n     @Override\n-    public void deleteCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid)\n-            throws GwtKuraException {\n-        if (factoryPid == null || factoryPid.trim().isEmpty() || cloudServicePid == null\n-                || cloudServicePid.trim().isEmpty()) {\n+    public void deleteCloudServiceFromFactory(GwtXSRFToken xsrfToken, String factoryPid, String cloudServicePid) throws GwtKuraException {\n+        if (factoryPid == null || factoryPid.trim().isEmpty()\n+                || cloudServicePid == null || cloudServicePid.trim().isEmpty()) {\n             throw new GwtKuraException(GwtKuraErrorCode.ILLEGAL_NULL_ARGUMENT);\n         }\n-\n         withAllCloudConnectionFactories(service -> {\n             if (service.getFactoryPid().equals(factoryPid)) {\n                 service.deleteConfiguration(cloudServicePid);\n@@ -237,23 +191,19 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n-        auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully deleted cloud service from factory for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n+        auditLogger.info(\"UI CloudConnection - Success - Successfully deleted cloud service from factory for user: {}, session {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n     }\n \n     @Override\n     public String findSuggestedCloudServicePid(String factoryPid) throws GwtKuraException {\n-\n         final AtomicReference<String> result = new AtomicReference<>();\n-\n         withAllCloudConnectionFactoryRefs((ref, ctx) -> {\n             final CloudConnectionFactory cloudServiceFactory = wrap(ctx.getService(ref));\n             try {\n                 if (!cloudServiceFactory.getFactoryPid().equals(factoryPid)) {\n                     return;\n                 }\n+\n                 Object propertyObject = ref.getProperty(KURA_UI_CSF_PID_DEFAULT);\n                 if (propertyObject != null) {\n                     result.set((String) propertyObject);\n@@ -265,27 +215,23 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n-        auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully listed cloud service pid for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n-\n+        auditLogger.info(\"UI CloudConnection - Success - Successfully listed cloud service pid for user: {}, session {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n         return result.get();\n     }\n \n     @Override\n     public String findCloudServicePidRegex(String factoryPid) throws GwtKuraException {\n-\n         final AtomicReference<String> result = new AtomicReference<>();\n-\n         withAllCloudConnectionFactoryRefs((ref, ctx) -> {\n             final CloudConnectionFactory cloudServiceFactory = wrap(ctx.getService(ref));\n             try {\n                 if (!cloudServiceFactory.getFactoryPid().equals(factoryPid)) {\n                     return;\n                 }\n+\n                 Object propertyObject = ref.getProperty(KURA_UI_CSF_PID_REGEX);\n                 ServiceLocator.getInstance().ungetService(ref);\n+\n                 if (propertyObject != null) {\n                     result.set((String) propertyObject);\n                 }\n@@ -296,30 +242,20 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n-        auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully listed cloud service pid for user: {}, session {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n-\n+        auditLogger.info(\"UI CloudConnection - Success - Successfully listed cloud service pid for user: {}, session {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n         return result.get();\n     }\n \n     @Override\n-    public void createPubSubInstance(final GwtXSRFToken token, final String pid, final String factoryPid,\n-            final String cloudConnectionPid) throws GwtKuraException {\n+    public void createPubSubInstance(final GwtXSRFToken token, final String pid, final String factoryPid, final String cloudConnectionPid) throws GwtKuraException {\n         checkXSRFToken(token);\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n         ServiceLocator.applyToServiceOptionally(ConfigurationService.class, cs -> {\n-            cs.createFactoryConfiguration(factoryPid, pid, Collections.singletonMap(\n-                    CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value(), cloudConnectionPid), true);\n-\n-            auditLogger.info(\n-                    \"UI CloudConnection - Success - Successfully created pub/sub instance for user: {}, session {}\",\n-                    session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n-\n+            cs.createFactoryConfiguration(factoryPid, pid, Collections.singletonMap(CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value(),\n+                cloudConnectionPid), true);\n+            auditLogger.info(\"UI CloudConnection - Success - Successfully created pub/sub instance for user: {}, session {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n             return (Void) null;\n         });\n     }\n@@ -330,94 +266,65 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n         ServiceLocator.applyToServiceOptionally(ConfigurationService.class, cs -> {\n             cs.deleteFactoryConfiguration(pid, true);\n-\n-            auditLogger.info(\n-                    \"UI CloudConnection - Success - Successfully deleted pub/sub instance for user: {}, session {}\",\n-                    session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n-\n+            auditLogger.info(\"UI CloudConnection - Success - Successfully deleted pub/sub instance for user: {}, session {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId());\n             return (Void) null;\n         });\n     }\n \n     private static GwtCloudEntry toGwt(final ComponentDescriptionDTO component) {\n-\n-        if (Arrays.stream(component.serviceInterfaces)\n-                .noneMatch(intf -> CLOUD_PUBLISHER.equals(intf) || CLOUD_SUBSCRIBER.equals(intf))) {\n+        if (Arrays.stream(component.serviceInterfaces).noneMatch(intf -> CLOUD_PUBLISHER.equals(intf) || CLOUD_SUBSCRIBER.equals(intf))) {\n             return null;\n         }\n \n         final String ccsfFactoryPidPropName = CloudConnectionConstants.CLOUD_CONNECTION_FACTORY_PID_PROP_NAME.value();\n-\n         final Object ccsfFactoryPid = component.properties.get(ccsfFactoryPidPropName);\n         final Object factoryPid = component.properties.get(\"service.pid\");\n         final Object defaultFactoryPid = component.properties.get(KURA_UI_CSF_PID_DEFAULT);\n         final Object defaultFactoryPidRegex = component.properties.get(KURA_UI_CSF_PID_REGEX);\n-\n         if (!(factoryPid instanceof String)) {\n-            auditLogger.warn(\n-                    \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the service.pid property, ignoring it\",\n-                    component.name);\n+            auditLogger.warn(\"component {} defines a CloudPublisher or CloudSubscriber but does not specify the service.pid property, ignoring it\", component.name);\n             return null;\n         }\n-\n         if (!(ccsfFactoryPid instanceof String)) {\n-            auditLogger.warn(\n-                    \"component {} defines a CloudPublisher or CloudSubscriber but does not specify the {} property, ignoring it\",\n-                    component.name, ccsfFactoryPidPropName);\n+            auditLogger.warn(\"component {} defines a CloudPublisher or CloudSubscriber but does not specify the {} property, ignoring it\", component.name, ccsfFactoryPidPropName);\n             return null;\n         }\n \n         final GwtCloudEntry entry = new GwtCloudEntry();\n-\n         entry.setPid((String) factoryPid);\n         entry.setFactoryPid((String) ccsfFactoryPid);\n         entry.setDefaultFactoryPid((String) defaultFactoryPid);\n         entry.setDefaultFactoryPidRegex((String) defaultFactoryPidRegex);\n-\n         return entry;\n     }\n \n     private static List<GwtCloudEntry> getPubSubFactories() throws GwtKuraException {\n-\n-        return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr ->\n-\n-        scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::toGwt).filter(Objects::nonNull)\n-                .collect(Collectors.toList()));\n+        return ServiceLocator.applyToServiceOptionally(ServiceComponentRuntime.class, scr -> scr.getComponentDescriptionDTOs().stream().map(GwtCloudConnectionServiceImpl::toGwt).filter(Objects::nonNull).collect(Collectors.toList()));\n     }\n \n     private static GwtCloudPubSubEntry toGwt(final ServiceReference<?> ref, final GwtCloudPubSubEntry.Type type) {\n         final Object ccsPid = ref.getProperty(CloudConnectionConstants.CLOUD_ENDPOINT_SERVICE_PID_PROP_NAME.value());\n         final Object factoryPid = ref.getProperty(ConfigurationAdmin.SERVICE_FACTORYPID);\n-\n         if (!(ccsPid instanceof String && factoryPid instanceof String)) {\n             return null;\n         }\n \n         final String kuraServicePid = (String) ref.getProperty(ConfigurationService.KURA_SERVICE_PID);\n-\n         final GwtCloudPubSubEntry result = new GwtCloudPubSubEntry();\n-\n         result.setPid(kuraServicePid);\n         result.setCloudConnectionPid((String) ccsPid);\n         result.setFactoryPid((String) factoryPid);\n         result.setType(type);\n-\n         return result;\n     }\n \n     private static Set<GwtCloudPubSubEntry> getPublisherInstances() throws GwtKuraException {\n         final BundleContext context = FrameworkUtil.getBundle(GwtCloudConnectionServiceImpl.class).getBundleContext();\n-\n         final Set<GwtCloudPubSubEntry> result = new HashSet<>();\n-\n         try {\n-            context.getServiceReferences(CloudPublisher.class, null).stream()\n-                    .map(ref -> toGwt(ref, GwtCloudPubSubEntry.Type.PUBLISHER)).filter(Objects::nonNull)\n-                    .forEach(result::add);\n-\n+            context.getServiceReferences(CloudPublisher.class, null).stream().map(ref -> toGwt(ref, GwtCloudPubSubEntry.Type.PUBLISHER)).filter(Objects::nonNull).forEach(result::add);\n             return result;\n         } catch (InvalidSyntaxException e) {\n             throw new GwtKuraException(\"Unexpected error\");\n@@ -426,27 +333,20 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n     private static Set<GwtCloudPubSubEntry> getSubscriberInstances() throws GwtKuraException {\n         final BundleContext context = FrameworkUtil.getBundle(GwtCloudConnectionServiceImpl.class).getBundleContext();\n-\n         final Set<GwtCloudPubSubEntry> result = new HashSet<>();\n-\n         try {\n-            context.getServiceReferences(CloudSubscriber.class, null).stream()\n-                    .map(ref -> toGwt(ref, GwtCloudPubSubEntry.Type.SUBSCRIBER)).filter(Objects::nonNull)\n-                    .forEach(result::add);\n-\n+            context.getServiceReferences(CloudSubscriber.class, null).stream().map(ref -> toGwt(ref, GwtCloudPubSubEntry.Type.SUBSCRIBER)).filter(Objects::nonNull).forEach(result::add);\n             return result;\n         } catch (InvalidSyntaxException e) {\n             throw new GwtKuraException(\"Unexpected error\");\n         }\n     }\n \n-    private static void withAllCloudConnectionFactoryRefs(final ServiceReferenceConsumer<Object> consumer)\n-            throws GwtKuraException {\n+    private static void withAllCloudConnectionFactoryRefs(final ServiceReferenceConsumer<Object> consumer) throws GwtKuraException {\n         ServiceLocator.withAllServiceReferences(CLOUD_CONNECTION_FACTORY_FILTER, consumer);\n     }\n \n-    private static void withAllCloudConnectionFactories(final ServiceConsumer<CloudConnectionFactory> consumer)\n-            throws GwtKuraException {\n+    private static void withAllCloudConnectionFactories(final ServiceConsumer<CloudConnectionFactory> consumer) throws GwtKuraException {\n         withAllServices(CLOUD_CONNECTION_FACTORY_FILTER, o -> consumer.consume(wrap(o)));\n     }\n \n@@ -455,7 +355,6 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n             return (CloudConnectionFactory) o;\n         } else if (o instanceof CloudServiceFactory) {\n             final CloudServiceFactory f = (CloudServiceFactory) o;\n-\n             return new CloudConnectionFactory() {\n \n                 @Override\n@@ -493,18 +392,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n         return GwtComponentServiceInternal.findFilteredComponentConfiguration(session, pid).get(0);\n     }\n \n     @Override\n-    public void updateStackComponentConfiguration(GwtXSRFToken xsrfToken, GwtConfigComponent component)\n-            throws GwtKuraException {\n+    public void updateStackComponentConfiguration(GwtXSRFToken xsrfToken, GwtConfigComponent component) throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n         GwtComponentServiceInternal.updateComponentConfiguration(session, component);\n     }\n \n@@ -514,18 +410,12 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n-        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n-\n+        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance().getServiceReferences(CloudService.class, null);\n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n-                String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n-                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n-\n+                String dataServiceRef = (String) cloudServiceReference.getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance().getServiceReferences(DataService.class, dataServiceRef);\n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n                     if (dataService != null) {\n@@ -539,23 +429,18 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n                             }\n                         } catch (KuraConnectException e) {\n                             logger.warn(\"Error connecting\");\n-                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n+                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE,\n+                                e,\n                                     \"Error connecting. Please review your configuration.\");\n                         } catch (InterruptedException e) {\n                             logger.warn(\"Interrupt Exception\");\n-                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e,\n-                                    \"Interrupt Exception\");\n+                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e, \"Interrupt Exception\");\n                         } catch (IllegalStateException e) {\n                             logger.warn(\"Illegal client state\");\n-                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e,\n-                                    \"Illegal client state\");\n+                            gwtKuraException = new GwtKuraException(GwtKuraErrorCode.INTERNAL_ERROR, e, \"Illegal client state\");\n                         }\n-\n                         if (gwtKuraException != null) {\n-                            auditLogger.warn(\n-                                    \"UI CloudConnection - Failure - Failed to connect data service for user: {}, session: {}, connection id: {}\",\n-                                    session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(),\n-                                    connectionId);\n+                            auditLogger.warn(\"UI CloudConnection - Failure - Failed to connect data service for user: {}, session: {}, connection id: {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n                             throw gwtKuraException;\n                         }\n                     }\n@@ -565,31 +450,24 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n             ServiceLocator.getInstance().ungetService(cloudServiceReference);\n         }\n \n-        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n-\n+        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator.getInstance().getServiceReferences(CloudConnectionManager.class, null);\n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n-                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance().getService(cloudConnectionManagerReference);\n                 try {\n                     cloudConnectionManager.connect();\n                 } catch (KuraException e) {\n                     logger.warn(\"Error connecting\");\n-                    auditLogger.warn(\n-                            \"UI CloudConnection - Failure - Failed to connect data service for user: {}, session: {}, connection id: {}\",\n-                            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n-                    throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n+                    auditLogger.warn(\"UI CloudConnection - Failure - Failed to connect data service for user: {}, session: {}, connection id: {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n+                    throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE,\n+                        e,\n                             \"Error connecting. Please review your configuration.\");\n                 }\n             }\n             ServiceLocator.getInstance().ungetService(cloudConnectionManagerReference);\n         }\n-\n-        auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully connected data service for user: {}, session: {}, connection id: {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n+        auditLogger.info(\"UI CloudConnection - Success - Successfully connected data service for user: {}, session: {}, connection id: {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n     }\n \n     @Override\n@@ -598,18 +476,12 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n \n         final HttpServletRequest request = getThreadLocalRequest();\n         final HttpSession session = request.getSession(false);\n-\n-        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n-\n+        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance().getServiceReferences(CloudService.class, null);\n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n-                String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n-                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n-\n+                String dataServiceRef = (String) cloudServiceReference.getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance().getServiceReferences(DataService.class, dataServiceRef);\n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n                     if (dataService != null) {\n@@ -621,49 +493,36 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n             ServiceLocator.getInstance().ungetService(cloudServiceReference);\n         }\n \n-        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n-\n+        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator.getInstance().getServiceReferences(CloudConnectionManager.class, null);\n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n-                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n+                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance().getService(cloudConnectionManagerReference);\n                 try {\n                     cloudConnectionManager.disconnect();\n                 } catch (KuraException e) {\n                     logger.warn(\"Error disconnecting\");\n-                    auditLogger.warn(\n-                            \"UI CloudConnection - Failure - Failed to disconnect data service for user: {}, session: {}, connection id: {}\",\n-                            session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n-                    throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE, e,\n+                    auditLogger.warn(\"UI CloudConnection - Failure - Failed to disconnect data service for user: {}, session: {}, connection id: {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n+                    throw new GwtKuraException(GwtKuraErrorCode.CONNECTION_FAILURE,\n+                        e,\n                             \"Error disconnecting. Please review your configuration.\");\n                 }\n             }\n             ServiceLocator.getInstance().ungetService(cloudConnectionManagerReference);\n         }\n-\n-        auditLogger.info(\n-                \"UI CloudConnection - Success - Successfully disconnected data service for user: {}, session: {}, connection id: {}\",\n-                session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n+        auditLogger.info(\"UI CloudConnection - Success - Successfully disconnected data service for user: {}, session: {}, connection id: {}\", session.getAttribute(Attributes.AUTORIZED_USER.getValue()), session.getId(), connectionId);\n     }\n \n     @Override\n     public boolean isConnected(GwtXSRFToken xsrfToken, String connectionId) throws GwtKuraException {\n         checkXSRFToken(xsrfToken);\n         boolean isConnected = false;\n-\n-        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance()\n-                .getServiceReferences(CloudService.class, null);\n-\n+        Collection<ServiceReference<CloudService>> cloudServiceReferences = ServiceLocator.getInstance().getServiceReferences(CloudService.class, null);\n         for (ServiceReference<CloudService> cloudServiceReference : cloudServiceReferences) {\n             String cloudServicePid = (String) cloudServiceReference.getProperty(KURA_SERVICE_PID);\n             if (cloudServicePid.endsWith(connectionId)) {\n-                String dataServiceRef = (String) cloudServiceReference\n-                        .getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n-                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance()\n-                        .getServiceReferences(DataService.class, dataServiceRef);\n-\n+                String dataServiceRef = (String) cloudServiceReference.getProperty(DATA_SERVICE_REFERENCE_NAME + ComponentConstants.REFERENCE_TARGET_SUFFIX);\n+                Collection<ServiceReference<DataService>> dataServiceReferences = ServiceLocator.getInstance().getServiceReferences(DataService.class, dataServiceRef);\n                 for (ServiceReference<DataService> dataServiceReference : dataServiceReferences) {\n                     DataService dataService = ServiceLocator.getInstance().getService(dataServiceReference);\n                     if (dataService != null) {\n@@ -675,20 +534,15 @@ public class GwtCloudConnectionServiceImpl extends OsgiRemoteServiceServlet impl\n             ServiceLocator.getInstance().ungetService(cloudServiceReference);\n         }\n \n-        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator\n-                .getInstance().getServiceReferences(CloudConnectionManager.class, null);\n-\n+        Collection<ServiceReference<CloudConnectionManager>> cloudConnectionManagerReferences = ServiceLocator.getInstance().getServiceReferences(CloudConnectionManager.class, null);\n         for (ServiceReference<CloudConnectionManager> cloudConnectionManagerReference : cloudConnectionManagerReferences) {\n             String cloudConnectionManagerPid = (String) cloudConnectionManagerReference.getProperty(KURA_SERVICE_PID);\n             if (cloudConnectionManagerPid.endsWith(connectionId)) {\n-                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance()\n-                        .getService(cloudConnectionManagerReference);\n-\n+                CloudConnectionManager cloudConnectionManager = ServiceLocator.getInstance().getService(cloudConnectionManagerReference);\n                 isConnected = cloudConnectionManager.isConnected();\n             }\n             ServiceLocator.getInstance().ungetService(cloudConnectionManagerReference);\n         }\n-\n         return isConnected;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 216
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}