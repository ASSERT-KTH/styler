{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3410",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "116",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "78",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "273",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3410/JmxDump.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3410/JmxDump.java\nindex 44408436869..5cca4335f80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3410/JmxDump.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3410/JmxDump.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.dbms.diagnostics.jmx;\n \n import com.sun.management.HotSpotDiagnosticMXBean;\n@@ -53,234 +54,231 @@ import org.neo4j.diagnostics.ProgressAwareInputStream;\n  */\n public class JmxDump\n {\n-    private final MBeanServerConnection mBeanServer;\n-    private Properties systemProperties;\n+  private final MBeanServerConnection mBeanServer;\n+  private Properties systemProperties;\n \n-    private JmxDump( MBeanServerConnection mBeanServer )\n-    {\n-        this.mBeanServer = mBeanServer;\n-    }\n+  private JmxDump(MBeanServerConnection mBeanServer)\n+  {\n+    this.mBeanServer = mBeanServer;\n+  }\n \n-    public static JmxDump connectTo( String jmxAddress ) throws IOException\n-    {\n-        JMXServiceURL url = new JMXServiceURL( jmxAddress );\n-        JMXConnector connect = JMXConnectorFactory.connect( url );\n+  public static JmxDump connectTo(String jmxAddress) throws IOException\n+  {\n+    JMXServiceURL url = new JMXServiceURL(jmxAddress);\n+    JMXConnector connect = JMXConnectorFactory.connect(url);\n \n-        return new JmxDump( connect.getMBeanServerConnection() );\n-    }\n+    return new JmxDump(connect.getMBeanServerConnection());\n+  }\n \n-    public void attachSystemProperties( Properties systemProperties )\n+  public void attachSystemProperties(Properties systemProperties)\n+  {\n+    this.systemProperties = systemProperties;\n+  }\n+\n+  /**\n+   * Captures a thread dump of the running instance.\n+   *\n+   * @return a diagnostics source the will emmit a thread dump.\n+   */\n+  public DiagnosticsReportSource threadDump()\n+  {\n+    return DiagnosticsReportSources.newDiagnosticsString(\"threaddump.txt\", () ->\n     {\n-        this.systemProperties = systemProperties;\n-    }\n+      String result;\n+      try\n+      {\n+        // Try to invoke real thread dump\n+        result = (String) mBeanServer\n+            .invoke(new ObjectName(\"com.sun.management:type=DiagnosticCommand\"), \"threadPrint\",\n+                new Object[] {null}, new String[] {String[].class.getName()});\n+      } catch (InstanceNotFoundException | ReflectionException | MBeanException | MalformedObjectNameException | IOException exception)\n+      {\n+        // Failed, do a poor mans attempt\n+        result = getMXThreadDump();\n+      }\n \n-    /**\n-     * Captures a thread dump of the running instance.\n-     *\n-     * @return a diagnostics source the will emmit a thread dump.\n-     */\n-    public DiagnosticsReportSource threadDump()\n+      return result;\n+    });\n+  }\n+\n+  /**\n+   * If \"DiagnosticCommand\" bean isn't available, for reasons unknown, try our best to reproduce the output. For obvious\n+   * reasons we can't get everything, since it's not exposed in java.\n+   *\n+   * @return a thread dump.\n+   */\n+  private String getMXThreadDump()\n+  {\n+    ThreadMXBean threadMxBean;\n+    try\n     {\n-        return DiagnosticsReportSources.newDiagnosticsString( \"threaddump.txt\", () ->\n-        {\n-            String result;\n-            try\n-            {\n-                // Try to invoke real thread dump\n-                result = (String) mBeanServer\n-                        .invoke( new ObjectName( \"com.sun.management:type=DiagnosticCommand\" ), \"threadPrint\",\n-                                new Object[]{null}, new String[]{String[].class.getName()} );\n-            }\n-            catch ( InstanceNotFoundException | ReflectionException | MBeanException | MalformedObjectNameException | IOException exception )\n-            {\n-                // Failed, do a poor mans attempt\n-                result = getMXThreadDump();\n-            }\n-\n-            return result;\n-        } );\n+      threadMxBean = ManagementFactory.getPlatformMXBean(mBeanServer, ThreadMXBean.class);\n+    } catch (IOException e)\n+    {\n+      return \"ERROR: Unable to produce any thread dump\";\n     }\n \n-    /**\n-     * If \"DiagnosticCommand\" bean isn't available, for reasons unknown, try our best to reproduce the output. For obvious\n-     * reasons we can't get everything, since it's not exposed in java.\n-     *\n-     * @return a thread dump.\n-     */\n-    private String getMXThreadDump()\n+    ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads(true, true);\n+\n+    // Reproduce JVM stack trace as far as possible to allow existing analytics tools to be used\n+    String vmName = systemProperties.getProperty(\"java.vm.name\");\n+    String vmVersion = systemProperties.getProperty(\"java.vm.version\");\n+    String vmInfoString = systemProperties.getProperty(\"java.vm.info\");\n+\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(String.format(\"Full thread dump %s (%s %s):\\n\\n\", vmName, vmVersion, vmInfoString));\n+    for (ThreadInfo threadInfo : threadInfos)\n     {\n-        ThreadMXBean threadMxBean;\n-        try\n+      sb.append(String.format(\"\\\"%s\\\" #%d\\n\", threadInfo.getThreadName(), threadInfo.getThreadId()));\n+      sb.append(\"   java.lang.Thread.State: \").append(threadInfo.getThreadState()).append(\"\\n\");\n+\n+      StackTraceElement[] stackTrace = threadInfo.getStackTrace();\n+      for (int i = 0; i < stackTrace.length; i++)\n+      {\n+        StackTraceElement e = stackTrace[i];\n+        sb.append(\"\\tat \").append(e.toString());\n+\n+        // First stack element info can be found in the thread state\n+        if (i == 0 && threadInfo.getLockInfo() != null)\n         {\n-            threadMxBean = ManagementFactory.getPlatformMXBean( mBeanServer, ThreadMXBean.class );\n+          Thread.State ts = threadInfo.getThreadState();\n+          switch (ts)\n+          {\n+            case BLOCKED:\n+              sb.append(\"\\t-  blocked on \").append(threadInfo.getLockInfo()).append('\\n');\n+              break;\n+            case WAITING:\n+              sb.append(\"\\t-  waiting on \").append(threadInfo.getLockInfo()).append('\\n');\n+              break;\n+            case TIMED_WAITING:\n+              sb.append(\"\\t-  waiting on \").append(threadInfo.getLockInfo()).append('\\n');\n+              break;\n+            default:\n+          }\n         }\n-        catch ( IOException e )\n+        for (MonitorInfo mi : threadInfo.getLockedMonitors())\n         {\n-            return \"ERROR: Unable to produce any thread dump\";\n+          if (mi.getLockedStackDepth() == i)\n+          {\n+            sb.append(\"\\t-  locked \").append(mi).append('\\n');\n+          }\n         }\n+      }\n+    }\n+\n+    return sb.toString();\n+  }\n \n-        ThreadInfo[] threadInfos = threadMxBean.dumpAllThreads( true, true );\n+  public DiagnosticsReportSource heapDump()\n+  {\n+    return new DiagnosticsReportSource()\n+    {\n+      @Override\n+      public String destinationPath()\n+      {\n+        return \"heapdump.hprof\";\n+      }\n \n-        // Reproduce JVM stack trace as far as possible to allow existing analytics tools to be used\n-        String vmName = systemProperties.getProperty( \"java.vm.name\" );\n-        String vmVersion = systemProperties.getProperty( \"java.vm.version\" );\n-        String vmInfoString = systemProperties.getProperty( \"java.vm.info\" );\n+      @Override\n+      public void addToArchive(Path archiveDestination, DiagnosticsReporterProgress progress)\n+          throws IOException\n+      {\n+        // Heap dump has to target an actual file, we cannot stream directly to the archive\n+        progress.info(\"dumping...\");\n+        Path tempFile = Files.createTempFile(\"neo4j-heapdump\", \".hprof\");\n+        Files.deleteIfExists(tempFile);\n+        heapDump(tempFile.toAbsolutePath().toString());\n \n-        StringBuilder sb = new StringBuilder();\n-        sb.append( String.format( \"Full thread dump %s (%s %s):\\n\\n\", vmName, vmVersion, vmInfoString ) );\n-        for ( ThreadInfo threadInfo : threadInfos )\n+        // Track progress of archiving process\n+        progress.info(\"archiving...\");\n+        long size = Files.size(tempFile);\n+        InputStream in = Files.newInputStream(tempFile);\n+        try (ProgressAwareInputStream inStream = new ProgressAwareInputStream(in, size, progress::percentChanged))\n         {\n-            sb.append( String.format( \"\\\"%s\\\" #%d\\n\", threadInfo.getThreadName(), threadInfo.getThreadId() ) );\n-            sb.append( \"   java.lang.Thread.State: \" ).append( threadInfo.getThreadState() ).append( \"\\n\" );\n-\n-            StackTraceElement[] stackTrace = threadInfo.getStackTrace();\n-            for ( int i = 0; i < stackTrace.length; i++ )\n-            {\n-                StackTraceElement e = stackTrace[i];\n-                sb.append( \"\\tat \" ).append( e.toString() );\n-\n-                // First stack element info can be found in the thread state\n-                if ( i == 0 && threadInfo.getLockInfo() != null )\n-                {\n-                    Thread.State ts = threadInfo.getThreadState();\n-                    switch ( ts )\n-                    {\n-                    case BLOCKED:\n-                        sb.append( \"\\t-  blocked on \" ).append( threadInfo.getLockInfo() ).append( '\\n' );\n-                        break;\n-                    case WAITING:\n-                        sb.append( \"\\t-  waiting on \" ).append( threadInfo.getLockInfo() ).append( '\\n' );\n-                        break;\n-                    case TIMED_WAITING:\n-                        sb.append( \"\\t-  waiting on \" ).append( threadInfo.getLockInfo() ).append( '\\n' );\n-                        break;\n-                    default:\n-                    }\n-                }\n-                for ( MonitorInfo mi : threadInfo.getLockedMonitors() )\n-                {\n-                    if ( mi.getLockedStackDepth() == i )\n-                    {\n-                        sb.append( \"\\t-  locked \").append( mi ).append( '\\n' );\n-                    }\n-                }\n-            }\n+          Files.copy(inStream, archiveDestination);\n         }\n \n-        return sb.toString();\n-    }\n+        Files.delete(tempFile);\n+      }\n \n-    public DiagnosticsReportSource heapDump()\n-    {\n-        return new DiagnosticsReportSource()\n-        {\n-            @Override\n-            public String destinationPath()\n-            {\n-                return \"heapdump.hprof\";\n-            }\n-\n-            @Override\n-            public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress )\n-                    throws IOException\n-            {\n-                // Heap dump has to target an actual file, we cannot stream directly to the archive\n-                progress.info( \"dumping...\" );\n-                Path tempFile = Files.createTempFile(\"neo4j-heapdump\", \".hprof\");\n-                Files.deleteIfExists( tempFile );\n-                heapDump( tempFile.toAbsolutePath().toString() );\n-\n-                // Track progress of archiving process\n-                progress.info( \"archiving...\" );\n-                long size = Files.size( tempFile );\n-                InputStream in = Files.newInputStream( tempFile );\n-                try ( ProgressAwareInputStream inStream = new ProgressAwareInputStream( in, size, progress::percentChanged ) )\n-                {\n-                    Files.copy( inStream, archiveDestination );\n-                }\n-\n-                Files.delete( tempFile );\n-            }\n-\n-            @Override\n-            public long estimatedSize( DiagnosticsReporterProgress progress ) throws IOException\n-            {\n-                MemoryMXBean bean = ManagementFactory.getPlatformMXBean( mBeanServer, MemoryMXBean.class );\n-                long totalMemory = bean.getHeapMemoryUsage().getCommitted() + bean.getNonHeapMemoryUsage().getCommitted();\n-\n-                // We first write raw to disk then write to archive, 5x compression is a reasonable worst case estimation\n-                return (long) (totalMemory * 1.2);\n-            }\n-        };\n-    }\n+      @Override\n+      public long estimatedSize(DiagnosticsReporterProgress progress) throws IOException\n+      {\n+        MemoryMXBean bean = ManagementFactory.getPlatformMXBean(mBeanServer, MemoryMXBean.class);\n+        long totalMemory = bean.getHeapMemoryUsage().getCommitted() + bean.getNonHeapMemoryUsage().getCommitted();\n \n-    /**\n-     * @param destination file path to send heap dump to, has to end with \".hprof\"\n-     */\n-    private void heapDump( String destination ) throws IOException\n-    {\n-        HotSpotDiagnosticMXBean hotSpotDiagnosticMXBean =\n-                ManagementFactory.getPlatformMXBean( mBeanServer, HotSpotDiagnosticMXBean.class );\n-        hotSpotDiagnosticMXBean.dumpHeap( destination, false );\n-    }\n+        // We first write raw to disk then write to archive, 5x compression is a reasonable worst case estimation\n+        return (long) (totalMemory * 1.2);\n+      }\n+    };\n+  }\n \n-    public DiagnosticsReportSource systemProperties()\n+  /**\n+   * @param destination file path to send heap dump to, has to end with \".hprof\"\n+   */\n+  private void heapDump(String destination) throws IOException\n+  {\n+    HotSpotDiagnosticMXBean hotSpotDiagnosticMXBean =\n+        ManagementFactory.getPlatformMXBean(mBeanServer, HotSpotDiagnosticMXBean.class);\n+    hotSpotDiagnosticMXBean.dumpHeap(destination, false);\n+  }\n+\n+  public DiagnosticsReportSource systemProperties()\n+  {\n+    return new DiagnosticsReportSource()\n     {\n-        return new DiagnosticsReportSource()\n+      @Override\n+      public String destinationPath()\n+      {\n+        return \"vm.prop\";\n+      }\n+\n+      @Override\n+      public void addToArchive(Path archiveDestination, DiagnosticsReporterProgress progress)\n+          throws IOException\n+      {\n+        try (PrintStream printStream = new PrintStream(Files.newOutputStream(archiveDestination)))\n         {\n-            @Override\n-            public String destinationPath()\n-            {\n-                return \"vm.prop\";\n-            }\n-\n-            @Override\n-            public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress )\n-                    throws IOException\n-            {\n-                try ( PrintStream printStream = new PrintStream( Files.newOutputStream( archiveDestination ) ) )\n-                {\n-                    systemProperties.list( printStream );\n-                }\n-            }\n-\n-            @Override\n-            public long estimatedSize( DiagnosticsReporterProgress progress )\n-            {\n-                return 0;\n-            }\n-        };\n-    }\n+          systemProperties.list(printStream);\n+        }\n+      }\n \n-    public DiagnosticsReportSource environmentVariables()\n-    {\n-        return newReportsBeanSource( \"env.prop\", Reports::getEnvironmentVariables );\n-    }\n+      @Override\n+      public long estimatedSize(DiagnosticsReporterProgress progress)\n+      {\n+        return 0;\n+      }\n+    };\n+  }\n \n-    public DiagnosticsReportSource listTransactions()\n-    {\n-        return newReportsBeanSource( \"listTransactions.txt\", Reports::listTransactions );\n-    }\n+  public DiagnosticsReportSource environmentVariables()\n+  {\n+    return newReportsBeanSource(\"env.prop\", Reports::getEnvironmentVariables);\n+  }\n \n-    private DiagnosticsReportSource newReportsBeanSource( String destination, ReportsInvoker reportsInvoker )\n-    {\n-        return DiagnosticsReportSources.newDiagnosticsString( destination, () ->\n-        {\n-            try\n-            {\n-                ObjectName name = new ObjectName( \"org.neo4j:instance=kernel#0,name=Reports\" );\n-                Reports reportsBean = JMX.newMBeanProxy( mBeanServer, name, Reports.class );\n-                return reportsInvoker.invoke( reportsBean );\n-            }\n-            catch ( MalformedObjectNameException ignored )\n-            {\n-            }\n-            return \"Unable to invoke ReportsBean\";\n-        } );\n-    }\n+  public DiagnosticsReportSource listTransactions()\n+  {\n+    return newReportsBeanSource(\"listTransactions.txt\", Reports::listTransactions);\n+  }\n \n-    private interface ReportsInvoker\n+  private DiagnosticsReportSource newReportsBeanSource(String destination, ReportsInvoker reportsInvoker)\n+  {\n+    return DiagnosticsReportSources.newDiagnosticsString(destination, () ->\n     {\n-        String invoke( Reports r );\n-    }\n+      try\n+      {\n+        ObjectName name = new ObjectName(\"org.neo4j:instance=kernel#0,name=Reports\");\n+        Reports reportsBean = JMX.newMBeanProxy(mBeanServer, name, Reports.class);\n+        return reportsInvoker.invoke(reportsBean);\n+      } catch (MalformedObjectNameException ignored)\n+      {\n+      }\n+      return \"Unable to invoke ReportsBean\";\n+    });\n+  }\n+\n+  private interface ReportsInvoker\n+  {\n+    String invoke(Reports r);\n+  }\n }\n",
            "diff_size": 320
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3410/JmxDump.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3410/JmxDump.java\nindex 44408436869..a87f329fc72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3410/JmxDump.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3410/JmxDump.java\n@@ -65,8 +65,7 @@ public class JmxDump\n     {\n         JMXServiceURL url = new JMXServiceURL( jmxAddress );\n         JMXConnector connect = JMXConnectorFactory.connect( url );\n-\n-        return new JmxDump( connect.getMBeanServerConnection() );\n+return new JmxDump( connect.getMBeanServerConnection() );\n     }\n \n     public void attachSystemProperties( Properties systemProperties )\n@@ -87,10 +86,8 @@ public class JmxDump\n             try\n             {\n                 // Try to invoke real thread dump\n-                result = (String) mBeanServer\n-                        .invoke( new ObjectName( \"com.sun.management:type=DiagnosticCommand\" ), \"threadPrint\",\n-                                new Object[]{null}, new String[]{String[].class.getName()} );\n-            }\n+                result = (String) mBeanServer.invoke( new ObjectName( \"com.sun.management:type=DiagnosticCommand\" ), \"threadPrint\", new Object[]{null}, new String[]{String[].class.getName()} );\n+    }\n             catch ( InstanceNotFoundException | ReflectionException | MBeanException | MalformedObjectNameException | IOException exception )\n             {\n                 // Failed, do a poor mans attempt\n@@ -125,8 +122,7 @@ public class JmxDump\n         String vmName = systemProperties.getProperty( \"java.vm.name\" );\n         String vmVersion = systemProperties.getProperty( \"java.vm.version\" );\n         String vmInfoString = systemProperties.getProperty( \"java.vm.info\" );\n-\n-        StringBuilder sb = new StringBuilder();\n+StringBuilder sb = new StringBuilder();\n         sb.append( String.format( \"Full thread dump %s (%s %s):\\n\\n\", vmName, vmVersion, vmInfoString ) );\n         for ( ThreadInfo threadInfo : threadInfos )\n         {\n@@ -181,12 +177,11 @@ public class JmxDump\n             }\n \n             @Override\n-            public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress )\n-                    throws IOException\n-            {\n+            public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress ) throws IOException\n+{\n                 // Heap dump has to target an actual file, we cannot stream directly to the archive\n                 progress.info( \"dumping...\" );\n-                Path tempFile = Files.createTempFile(\"neo4j-heapdump\", \".hprof\");\n+                Path tempFile = Files.createTempFile( \"neo4j-heapdump\", \".hprof\" );\n                 Files.deleteIfExists( tempFile );\n                 heapDump( tempFile.toAbsolutePath().toString() );\n \n@@ -209,7 +204,7 @@ public class JmxDump\n                 long totalMemory = bean.getHeapMemoryUsage().getCommitted() + bean.getNonHeapMemoryUsage().getCommitted();\n \n                 // We first write raw to disk then write to archive, 5x compression is a reasonable worst case estimation\n-                return (long) (totalMemory * 1.2);\n+                return (long) ( totalMemory * 1.2 );\n             }\n         };\n     }\n@@ -219,9 +214,8 @@ public class JmxDump\n      */\n     private void heapDump( String destination ) throws IOException\n     {\n-        HotSpotDiagnosticMXBean hotSpotDiagnosticMXBean =\n-                ManagementFactory.getPlatformMXBean( mBeanServer, HotSpotDiagnosticMXBean.class );\n-        hotSpotDiagnosticMXBean.dumpHeap( destination, false );\n+        HotSpotDiagnosticMXBean hotSpotDiagnosticMXBean = ManagementFactory.getPlatformMXBean( mBeanServer, HotSpotDiagnosticMXBean.class );\n+hotSpotDiagnosticMXBean.dumpHeap( destination, false );\n     }\n \n     public DiagnosticsReportSource systemProperties()\n@@ -235,9 +229,8 @@ public class JmxDump\n             }\n \n             @Override\n-            public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress )\n-                    throws IOException\n-            {\n+            public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress ) throws IOException\n+{\n                 try ( PrintStream printStream = new PrintStream( Files.newOutputStream( archiveDestination ) ) )\n                 {\n                     systemProperties.list( printStream );\n@@ -283,4 +276,4 @@ public class JmxDump\n     {\n         String invoke( Reports r );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}