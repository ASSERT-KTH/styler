{
    "project_name": "graphfoundation-ongdb",
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "79",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "84",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/44/PropertyPhysicalToLogicalConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/44/PropertyPhysicalToLogicalConverter.java\nindex ee33af5e747..03603c5cb30 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/44/PropertyPhysicalToLogicalConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/44/PropertyPhysicalToLogicalConverter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.index;\n \n import java.util.Iterator;\n@@ -36,98 +37,95 @@ import static org.neo4j.helpers.collection.Iterators.asIterator;\n \n public class PropertyPhysicalToLogicalConverter\n {\n-    private final PropertyStore propertyStore;\n+  private final PropertyStore propertyStore;\n \n-    public PropertyPhysicalToLogicalConverter( PropertyStore propertyStore )\n-    {\n-        this.propertyStore = propertyStore;\n-    }\n+  public PropertyPhysicalToLogicalConverter(PropertyStore propertyStore)\n+  {\n+    this.propertyStore = propertyStore;\n+  }\n \n-    /**\n-     * Converts physical changes to PropertyRecords for a node into logical updates\n-     */\n-    public void convertPropertyRecord( long nodeId, Iterable<PropertyRecordChange> changes,\n-            NodeUpdates.Builder properties )\n+  /**\n+   * Converts physical changes to PropertyRecords for a node into logical updates\n+   */\n+  public void convertPropertyRecord(long nodeId, Iterable<PropertyRecordChange> changes,\n+                                    NodeUpdates.Builder properties)\n+  {\n+    PrimitiveIntObjectMap<PropertyBlock> beforeMap = Primitive.intObjectMap();\n+    PrimitiveIntObjectMap<PropertyBlock> afterMap = Primitive.intObjectMap();\n+    mapBlocks(nodeId, changes, beforeMap, afterMap);\n+\n+    PrimitiveIntIterator uniqueIntIterator = uniqueIntIterator(beforeMap, afterMap);\n+    while (uniqueIntIterator.hasNext())\n     {\n-        PrimitiveIntObjectMap<PropertyBlock> beforeMap = Primitive.intObjectMap();\n-        PrimitiveIntObjectMap<PropertyBlock> afterMap = Primitive.intObjectMap();\n-        mapBlocks( nodeId, changes, beforeMap, afterMap );\n+      int key = uniqueIntIterator.next();\n+      PropertyBlock beforeBlock = beforeMap.get(key);\n+      PropertyBlock afterBlock = afterMap.get(key);\n \n-        PrimitiveIntIterator uniqueIntIterator = uniqueIntIterator( beforeMap, afterMap );\n-        while ( uniqueIntIterator.hasNext() )\n+      if (beforeBlock != null && afterBlock != null)\n+      {\n+        // CHANGE\n+        if (!beforeBlock.hasSameContentsAs(afterBlock))\n         {\n-            int key = uniqueIntIterator.next();\n-            PropertyBlock beforeBlock = beforeMap.get( key );\n-            PropertyBlock afterBlock = afterMap.get( key );\n-\n-            if ( beforeBlock != null && afterBlock != null )\n-            {\n-                // CHANGE\n-                if ( !beforeBlock.hasSameContentsAs( afterBlock ) )\n-                {\n-                    Value beforeVal = valueOf( beforeBlock );\n-                    Value afterVal = valueOf( afterBlock );\n-                    properties.changed( key, beforeVal, afterVal );\n-                }\n-            }\n-            else\n-            {\n-                // ADD/REMOVE\n-                if ( afterBlock != null )\n-                {\n-                    properties.added( key, valueOf( afterBlock ) );\n-                }\n-                else if ( beforeBlock != null )\n-                {\n-                    properties.removed( key, valueOf( beforeBlock ) );\n-                }\n-                else\n-                {\n-                    throw new IllegalStateException( \"Weird, an update with no property value for before or after\" );\n-                }\n-            }\n+          Value beforeVal = valueOf(beforeBlock);\n+          Value afterVal = valueOf(afterBlock);\n+          properties.changed(key, beforeVal, afterVal);\n         }\n-    }\n-\n-    private PrimitiveIntIterator uniqueIntIterator( PrimitiveIntObjectMap<PropertyBlock> beforeMap,\n-            PrimitiveIntObjectMap<PropertyBlock> afterMap )\n-    {\n-        Iterator<PrimitiveIntIterator> intIterator =\n-                asIterator( 2, beforeMap.iterator(), afterMap.iterator() );\n-        return deduplicate( concat( intIterator ) );\n-    }\n-\n-    private void mapBlocks( long nodeId, Iterable<PropertyRecordChange> changes,\n-            PrimitiveIntObjectMap<PropertyBlock> beforeMap, PrimitiveIntObjectMap<PropertyBlock> afterMap )\n-    {\n-        for ( PropertyRecordChange change : changes )\n+      } else\n+      {\n+        // ADD/REMOVE\n+        if (afterBlock != null)\n+        {\n+          properties.added(key, valueOf(afterBlock));\n+        } else if (beforeBlock != null)\n+        {\n+          properties.removed(key, valueOf(beforeBlock));\n+        } else\n         {\n-            equalCheck( change.getBefore().getNodeId(), nodeId );\n-            equalCheck( change.getAfter().getNodeId(), nodeId );\n-            mapBlocks( change.getBefore(), beforeMap );\n-            mapBlocks( change.getAfter(), afterMap );\n+          throw new IllegalStateException(\"Weird, an update with no property value for before or after\");\n         }\n+      }\n     }\n+  }\n \n-    private void equalCheck( long nodeId, long expectedNodeId )\n+  private PrimitiveIntIterator uniqueIntIterator(PrimitiveIntObjectMap<PropertyBlock> beforeMap,\n+                                                 PrimitiveIntObjectMap<PropertyBlock> afterMap)\n+  {\n+    Iterator<PrimitiveIntIterator> intIterator =\n+        asIterator(2, beforeMap.iterator(), afterMap.iterator());\n+    return deduplicate(concat(intIterator));\n+  }\n+\n+  private void mapBlocks(long nodeId, Iterable<PropertyRecordChange> changes,\n+                         PrimitiveIntObjectMap<PropertyBlock> beforeMap, PrimitiveIntObjectMap<PropertyBlock> afterMap)\n+  {\n+    for (PropertyRecordChange change : changes)\n     {\n-        assert nodeId == expectedNodeId : \"Node id differs expected \" + expectedNodeId + \", but was \" + nodeId;\n+      equalCheck(change.getBefore().getNodeId(), nodeId);\n+      equalCheck(change.getAfter().getNodeId(), nodeId);\n+      mapBlocks(change.getBefore(), beforeMap);\n+      mapBlocks(change.getAfter(), afterMap);\n     }\n+  }\n+\n+  private void equalCheck(long nodeId, long expectedNodeId)\n+  {\n+    assert nodeId == expectedNodeId : \"Node id differs expected \" + expectedNodeId + \", but was \" + nodeId;\n+  }\n \n-    private void mapBlocks( PropertyRecord record, PrimitiveIntObjectMap<PropertyBlock> blocks )\n+  private void mapBlocks(PropertyRecord record, PrimitiveIntObjectMap<PropertyBlock> blocks)\n+  {\n+    for (PropertyBlock block : record)\n     {\n-        for ( PropertyBlock block : record )\n-        {\n-            blocks.put( block.getKeyIndexId(), block );\n-        }\n+      blocks.put(block.getKeyIndexId(), block);\n     }\n+  }\n \n-    private Value valueOf( PropertyBlock block )\n+  private Value valueOf(PropertyBlock block)\n+  {\n+    if (block == null)\n     {\n-        if ( block == null )\n-        {\n-            return null;\n-        }\n-        return block.getType().value( block, propertyStore );\n+      return null;\n     }\n+    return block.getType().value(block, propertyStore);\n+  }\n }\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/44/PropertyPhysicalToLogicalConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/44/PropertyPhysicalToLogicalConverter.java\nindex ee33af5e747..ffb718f82d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/44/PropertyPhysicalToLogicalConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/44/PropertyPhysicalToLogicalConverter.java\n@@ -52,15 +52,13 @@ public class PropertyPhysicalToLogicalConverter\n         PrimitiveIntObjectMap<PropertyBlock> beforeMap = Primitive.intObjectMap();\n         PrimitiveIntObjectMap<PropertyBlock> afterMap = Primitive.intObjectMap();\n         mapBlocks( nodeId, changes, beforeMap, afterMap );\n-\n-        PrimitiveIntIterator uniqueIntIterator = uniqueIntIterator( beforeMap, afterMap );\n+PrimitiveIntIterator uniqueIntIterator = uniqueIntIterator( beforeMap, afterMap );\n         while ( uniqueIntIterator.hasNext() )\n         {\n             int key = uniqueIntIterator.next();\n             PropertyBlock beforeBlock = beforeMap.get( key );\n             PropertyBlock afterBlock = afterMap.get( key );\n-\n-            if ( beforeBlock != null && afterBlock != null )\n+if ( beforeBlock != null && afterBlock != null )\n             {\n                 // CHANGE\n                 if ( !beforeBlock.hasSameContentsAs( afterBlock ) )\n@@ -89,16 +87,13 @@ public class PropertyPhysicalToLogicalConverter\n         }\n     }\n \n-    private PrimitiveIntIterator uniqueIntIterator( PrimitiveIntObjectMap<PropertyBlock> beforeMap,\n-            PrimitiveIntObjectMap<PropertyBlock> afterMap )\n+    private PrimitiveIntIterator uniqueIntIterator( PrimitiveIntObjectMap<PropertyBlock> beforeMap, PrimitiveIntObjectMap<PropertyBlock> afterMap )\n     {\n-        Iterator<PrimitiveIntIterator> intIterator =\n-                asIterator( 2, beforeMap.iterator(), afterMap.iterator() );\n-        return deduplicate( concat( intIterator ) );\n+        Iterator<PrimitiveIntIterator> intIterator = asIterator( 2, beforeMap.iterator(), afterMap.iterator() );\n+return deduplicate( concat( intIterator ) );\n     }\n \n-    private void mapBlocks( long nodeId, Iterable<PropertyRecordChange> changes,\n-            PrimitiveIntObjectMap<PropertyBlock> beforeMap, PrimitiveIntObjectMap<PropertyBlock> afterMap )\n+    private void mapBlocks( long nodeId, Iterable<PropertyRecordChange> changes, PrimitiveIntObjectMap<PropertyBlock> beforeMap, PrimitiveIntObjectMap<PropertyBlock> afterMap )\n     {\n         for ( PropertyRecordChange change : changes )\n         {\n@@ -128,6 +123,7 @@ public class PropertyPhysicalToLogicalConverter\n         {\n             return null;\n         }\n-        return block.getType().value( block, propertyStore );\n+\n+return block.getType().value( block, propertyStore );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}