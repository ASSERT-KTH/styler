{
    "project_name": "neo4j-neo4j",
    "error_id": "3338",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3338/TransactionMonitor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3338/TransactionMonitor.java\nindex e17bd9f64d1..884ddcbde25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3338/TransactionMonitor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3338/TransactionMonitor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.transaction.monitor;\n \n import java.util.Set;\n@@ -35,10 +36,10 @@ public abstract class TransactionMonitor implements Runnable\n     private final SystemNanoClock clock;\n     private final Log log;\n \n-    public TransactionMonitor( SystemNanoClock clock, LogService logService )\n+    public TransactionMonitor(SystemNanoClock clock, LogService logService)\n     {\n         this.clock = clock;\n-        this.log = logService.getInternalLog( TransactionMonitor.class );\n+        this.log = logService.getInternalLog(TransactionMonitor.class);\n     }\n \n     @Override\n@@ -46,30 +47,30 @@ public abstract class TransactionMonitor implements Runnable\n     {\n         long nowNanos = clock.nanos();\n         Set<MonitoredTransaction> activeTransactions = getActiveTransactions();\n-        checkExpiredTransactions( activeTransactions, nowNanos );\n+        checkExpiredTransactions(activeTransactions, nowNanos);\n     }\n \n     protected abstract Set<MonitoredTransaction> getActiveTransactions();\n \n-    private void checkExpiredTransactions( Set<MonitoredTransaction> activeTransactions, long nowNanos )\n+    private void checkExpiredTransactions(Set<MonitoredTransaction> activeTransactions, long nowNanos)\n     {\n-        for ( MonitoredTransaction activeTransaction : activeTransactions )\n+        for (MonitoredTransaction activeTransaction : activeTransactions)\n         {\n             long transactionTimeoutNanos = activeTransaction.timeoutNanos();\n-            if ( transactionTimeoutNanos > 0 )\n+            if (transactionTimeoutNanos > 0)\n             {\n-                if ( isTransactionExpired( activeTransaction, nowNanos, transactionTimeoutNanos ) && !activeTransaction.isSchemaTransaction() )\n+                if (isTransactionExpired(activeTransaction, nowNanos, transactionTimeoutNanos) && !activeTransaction.isSchemaTransaction())\n                 {\n-                    if ( activeTransaction.markForTermination( Status.Transaction.TransactionTimedOut ) )\n+                    if (activeTransaction.markForTermination(Status.Transaction.TransactionTimedOut))\n                     {\n-                        log.warn( \"Transaction %s timeout.\", activeTransaction.getIdentifyingDescription() );\n+                        log.warn(\"Transaction %s timeout.\", activeTransaction.getIdentifyingDescription());\n                     }\n                 }\n             }\n         }\n     }\n \n-    private static boolean isTransactionExpired( MonitoredTransaction activeTransaction, long nowNanos, long transactionTimeoutNanos )\n+    private static boolean isTransactionExpired(MonitoredTransaction activeTransaction, long nowNanos, long transactionTimeoutNanos)\n     {\n         return nowNanos - activeTransaction.startTimeNanos() > transactionTimeoutNanos;\n     }\n@@ -89,7 +90,7 @@ public abstract class TransactionMonitor implements Runnable\n          * @return {@code true} if the underlying transaction was marked for termination, {@code false} otherwise\n          * (when this handle represents an old transaction that has been closed).\n          */\n-        boolean markForTermination( Status reason );\n+        boolean markForTermination(Status reason);\n \n         /**\n          * A meaningful description used in log messages related to this transaction.\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}