{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "585",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.admingui.hibernate.dao;\n\nimport gov.hhs.fha.nhinc.admingui.model.Login;\nimport gov.hhs.fha.nhinc.admingui.services.exception.UserLoginException;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/585/UserLoginDAOImpl.java\nindex 78c1a8dcdae..a3b4175557e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/585/UserLoginDAOImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.hibernate.dao;\n \n import gov.hhs.fha.nhinc.admingui.model.Login;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/585/UserLoginDAOImpl.java\nindex 78c1a8dcdae..487ad11566c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/585/UserLoginDAOImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.hibernate.dao;\n \n import gov.hhs.fha.nhinc.admingui.model.Login;\n@@ -46,196 +47,195 @@ import org.springframework.stereotype.Service;\n \n /**\n  * @author msw\n- *\n  */\n @Service\n public class UserLoginDAOImpl implements UserLoginDAO {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(UserLoginDAOImpl.class);\n-\n-    @Autowired\n-    private SessionFactory sessionFactory;\n-\n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#login(gov.hhs.fha .nhinc.admingui.model.Login)\n-     */\n-    @Override\n-    public UserLogin login(Login login) {\n-        Session session = null;\n-        UserLogin userLogin = null;\n-        Query query;\n-\n-        try {\n-            session = sessionFactory.openSession();\n-            query = session.createQuery(\"from UserLogin where userName = :userName\");\n-            query.setParameter(\"userName\", login.getUserName());\n-            userLogin = (UserLogin) query.uniqueResult();\n-        } catch (HibernateException e) {\n-            LOG.error(\"Exception during query execution by: \" + e.getMessage(), e);\n-        } finally {\n-            closeSession(session, false);\n-        }\n-\n-        return userLogin;\n+  private static final Logger LOG = LoggerFactory.getLogger(UserLoginDAOImpl.class);\n+\n+  @Autowired\n+  private SessionFactory sessionFactory;\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#login(gov.hhs.fha .nhinc.admingui.model.Login)\n+   */\n+  @Override\n+  public UserLogin login(Login login) {\n+    Session session = null;\n+    UserLogin userLogin = null;\n+    Query query;\n+\n+    try {\n+      session = sessionFactory.openSession();\n+      query = session.createQuery(\"from UserLogin where userName = :userName\");\n+      query.setParameter(\"userName\", login.getUserName());\n+      userLogin = (UserLogin) query.uniqueResult();\n+    } catch (HibernateException e) {\n+      LOG.error(\"Exception during query execution by: \" + e.getMessage(), e);\n+    } finally {\n+      closeSession(session, false);\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#createUser(gov.hhs.fha\n-     * .nhinc.admingui.services.persistence.jpa.entity.UserLogin)\n-     */\n-    @Override\n-    public boolean createUser(UserLogin createUser) throws UserLoginException {\n-        Session session = null;\n-        Transaction tx = null;\n-        boolean result = true;\n-\n-        try {\n-            session = sessionFactory.openSession();\n-            tx = session.beginTransaction();\n-            session.persist(createUser);\n-            LOG.info(\"create user record Inserted successfully from dao impl...\");\n-            tx.commit();\n-        } catch (HibernateException e) {\n-            result = false;\n-            transactionRollback(tx);\n-            LOG.error(\"Exception during insertion caused by :\" + e.getMessage(), e);\n-            throw new UserLoginException(\"Could not create new user \" + createUser.getUserName(), e);\n-        } finally {\n-            closeSession(session, false);\n-        }\n-\n-        return result;\n+    return userLogin;\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#createUser(gov.hhs.fha\n+   * .nhinc.admingui.services.persistence.jpa.entity.UserLogin)\n+   */\n+  @Override\n+  public boolean createUser(UserLogin createUser) throws UserLoginException {\n+    Session session = null;\n+    Transaction tx = null;\n+    boolean result = true;\n+\n+    try {\n+      session = sessionFactory.openSession();\n+      tx = session.beginTransaction();\n+      session.persist(createUser);\n+      LOG.info(\"create user record Inserted successfully from dao impl...\");\n+      tx.commit();\n+    } catch (HibernateException e) {\n+      result = false;\n+      transactionRollback(tx);\n+      LOG.error(\"Exception during insertion caused by :\" + e.getMessage(), e);\n+      throw new UserLoginException(\"Could not create new user \" + createUser.getUserName(), e);\n+    } finally {\n+      closeSession(session, false);\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#getRole(long)\n-     */\n-    @Override\n-    public UserRole getRole(long role) {\n-        Session session = null;\n-        UserRole result = null;\n-\n-        try {\n-            session = sessionFactory.openSession();\n-            result = (UserRole) session.createCriteria(UserRole.class).add(Restrictions.eq(\"roleId\", role))\n-                    .uniqueResult();\n-        } catch (HibernateException e) {\n-            LOG.error(\"Could not get role: \" + e.getLocalizedMessage(), e);\n-        } finally {\n-            closeSession(session, false);\n-        }\n-\n-        return result;\n+    return result;\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#getRole(long)\n+   */\n+  @Override\n+  public UserRole getRole(long role) {\n+    Session session = null;\n+    UserRole result = null;\n+\n+    try {\n+      session = sessionFactory.openSession();\n+      result = (UserRole) session.createCriteria(UserRole.class).add(Restrictions.eq(\"roleId\", role))\n+          .uniqueResult();\n+    } catch (HibernateException e) {\n+      LOG.error(\"Could not get role: \" + e.getLocalizedMessage(), e);\n+    } finally {\n+      closeSession(session, false);\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#getAllRoles()\n-     */\n-    @Override\n-    public List<UserRole> getAllRoles() {\n-        Session session = null;\n-\n-        List<UserRole> roles = null;\n-\n-        try {\n-            session = sessionFactory.openSession();\n-            roles = session.createCriteria(UserRole.class).list();\n-        } catch (HibernateException e) {\n-            LOG.error(\"Could not get roles: \" + e.getLocalizedMessage(), e);\n-        } finally {\n-            closeSession(session, false);\n-        }\n-\n-        return roles;\n+    return result;\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#getAllRoles()\n+   */\n+  @Override\n+  public List<UserRole> getAllRoles() {\n+    Session session = null;\n+\n+    List<UserRole> roles = null;\n+\n+    try {\n+      session = sessionFactory.openSession();\n+      roles = session.createCriteria(UserRole.class).list();\n+    } catch (HibernateException e) {\n+      LOG.error(\"Could not get roles: \" + e.getLocalizedMessage(), e);\n+    } finally {\n+      closeSession(session, false);\n     }\n \n-    /*\n-     * (non-Javadoc)\n-     *\n-     * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#updatePreferences(gov.hhs.fha\n-     * .nhinc.admingui.services.persistence.jpa.entity.RolePreference)\n-     */\n-    @Override\n-    public boolean updatePreference(RolePreference preference) {\n-        Session session = null;\n-        Transaction tx = null;\n-        boolean updated = false;\n-\n-        try {\n-            session = sessionFactory.openSession();\n-            tx = session.beginTransaction();\n-\n-            session.update(preference);\n-            tx.commit();\n-            updated = true;\n-        } catch (HibernateException e) {\n-            LOG.error(\"Could not update preferences: \" + e.getLocalizedMessage(), e);\n-            transactionRollback(tx);\n-            updated = false;\n-        } finally {\n-            closeSession(session, false);\n-        }\n-\n-        return updated;\n+    return roles;\n+  }\n+\n+  /*\n+   * (non-Javadoc)\n+   *\n+   * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#updatePreferences(gov.hhs.fha\n+   * .nhinc.admingui.services.persistence.jpa.entity.RolePreference)\n+   */\n+  @Override\n+  public boolean updatePreference(RolePreference preference) {\n+    Session session = null;\n+    Transaction tx = null;\n+    boolean updated = false;\n+\n+    try {\n+      session = sessionFactory.openSession();\n+      tx = session.beginTransaction();\n+\n+      session.update(preference);\n+      tx.commit();\n+      updated = true;\n+    } catch (HibernateException e) {\n+      LOG.error(\"Could not update preferences: \" + e.getLocalizedMessage(), e);\n+      transactionRollback(tx);\n+      updated = false;\n+    } finally {\n+      closeSession(session, false);\n     }\n \n-    @Override\n-    public void deleteUser(UserLogin user) throws UserLoginException {\n-        Session session = null;\n-        Transaction tx = null;\n-\n-        try {\n-            session = sessionFactory.openSession();\n-            tx = session.beginTransaction();\n-            session.delete(user);\n-            tx.commit();\n-        } catch (HibernateException e) {\n-            transactionRollback(tx);\n-            LOG.error(\"Unable to delete user: \" + e.getLocalizedMessage(), e);\n-            throw new UserLoginException(\"Unable to delete user: \" + e.getLocalizedMessage());\n-        } finally {\n-            closeSession(session, true);\n-        }\n+    return updated;\n+  }\n+\n+  @Override\n+  public void deleteUser(UserLogin user) throws UserLoginException {\n+    Session session = null;\n+    Transaction tx = null;\n+\n+    try {\n+      session = sessionFactory.openSession();\n+      tx = session.beginTransaction();\n+      session.delete(user);\n+      tx.commit();\n+    } catch (HibernateException e) {\n+      transactionRollback(tx);\n+      LOG.error(\"Unable to delete user: \" + e.getLocalizedMessage(), e);\n+      throw new UserLoginException(\"Unable to delete user: \" + e.getLocalizedMessage());\n+    } finally {\n+      closeSession(session, true);\n     }\n+  }\n \n-    @Override\n-    public List<UserLogin> getAllUsers() {\n-        Session session = null;\n-\n-        List<UserLogin> users = null;\n+  @Override\n+  public List<UserLogin> getAllUsers() {\n+    Session session = null;\n \n-        try {\n-            session = sessionFactory.openSession();\n-            users = session.createCriteria(UserLogin.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();\n-        } catch (HibernateException e) {\n-            LOG.error(\"Could not retrieve users: \" + e.getLocalizedMessage(), e);\n-        } finally {\n-            closeSession(session, false);\n-        }\n+    List<UserLogin> users = null;\n \n-        return users;\n+    try {\n+      session = sessionFactory.openSession();\n+      users = session.createCriteria(UserLogin.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();\n+    } catch (HibernateException e) {\n+      LOG.error(\"Could not retrieve users: \" + e.getLocalizedMessage(), e);\n+    } finally {\n+      closeSession(session, false);\n     }\n \n-    private void transactionRollback(Transaction tx) {\n-        if (tx != null) {\n-            tx.rollback();\n-        }\n-    }\n+    return users;\n+  }\n \n-    private void closeSession(Session session, boolean flush) {\n-        if (session != null) {\n-            if (flush) {\n-                session.flush();\n-            }\n-            session.close();\n-        }\n+  private void transactionRollback(Transaction tx) {\n+    if (tx != null) {\n+      tx.rollback();\n+    }\n+  }\n+\n+  private void closeSession(Session session, boolean flush) {\n+    if (session != null) {\n+      if (flush) {\n+        session.flush();\n+      }\n+      session.close();\n     }\n+  }\n }\n",
            "diff_size": 186
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "128",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/585/UserLoginDAOImpl.java\nindex 78c1a8dcdae..d3729d600d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/585/UserLoginDAOImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.hibernate.dao;\n \n import gov.hhs.fha.nhinc.admingui.model.Login;\n@@ -64,10 +65,10 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n     @Override\n     public UserLogin login(Login login) {\n         Session session = null;\n-        UserLogin userLogin = null;\n-        Query query;\n \n-        try {\n+UserLogin userLogin = null;\n+        Query query;\n+try {\n             session = sessionFactory.openSession();\n             query = session.createQuery(\"from UserLogin where userName = :userName\");\n             query.setParameter(\"userName\", login.getUserName());\n@@ -90,10 +91,10 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n     @Override\n     public boolean createUser(UserLogin createUser) throws UserLoginException {\n         Session session = null;\n-        Transaction tx = null;\n-        boolean result = true;\n \n-        try {\n+Transaction tx = null;\n+        boolean result = true;\n+try {\n             session = sessionFactory.openSession();\n             tx = session.beginTransaction();\n             session.persist(createUser);\n@@ -103,7 +104,8 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n             result = false;\n             transactionRollback(tx);\n             LOG.error(\"Exception during insertion caused by :\" + e.getMessage(), e);\n-            throw new UserLoginException(\"Could not create new user \" + createUser.getUserName(), e);\n+\n+throw new UserLoginException(\"Could not create new user \" + createUser.getUserName(), e);\n         } finally {\n             closeSession(session, false);\n         }\n@@ -119,13 +121,12 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n     @Override\n     public UserRole getRole(long role) {\n         Session session = null;\n-        UserRole result = null;\n \n-        try {\n+UserRole result = null;\n+try {\n             session = sessionFactory.openSession();\n-            result = (UserRole) session.createCriteria(UserRole.class).add(Restrictions.eq(\"roleId\", role))\n-                    .uniqueResult();\n-        } catch (HibernateException e) {\n+            result = (UserRole) session.createCriteria(UserRole.class).add(Restrictions.eq(\"roleId\", role)).uniqueResult();\n+    } catch (HibernateException e) {\n             LOG.error(\"Could not get role: \" + e.getLocalizedMessage(), e);\n         } finally {\n             closeSession(session, false);\n@@ -144,8 +145,7 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n         Session session = null;\n \n         List<UserRole> roles = null;\n-\n-        try {\n+try {\n             session = sessionFactory.openSession();\n             roles = session.createCriteria(UserRole.class).list();\n         } catch (HibernateException e) {\n@@ -166,10 +166,10 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n     @Override\n     public boolean updatePreference(RolePreference preference) {\n         Session session = null;\n-        Transaction tx = null;\n-        boolean updated = false;\n \n-        try {\n+Transaction tx = null;\n+        boolean updated = false;\n+try {\n             session = sessionFactory.openSession();\n             tx = session.beginTransaction();\n \n@@ -190,9 +190,9 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n     @Override\n     public void deleteUser(UserLogin user) throws UserLoginException {\n         Session session = null;\n-        Transaction tx = null;\n \n-        try {\n+Transaction tx = null;\n+try {\n             session = sessionFactory.openSession();\n             tx = session.beginTransaction();\n             session.delete(user);\n@@ -200,7 +200,8 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n         } catch (HibernateException e) {\n             transactionRollback(tx);\n             LOG.error(\"Unable to delete user: \" + e.getLocalizedMessage(), e);\n-            throw new UserLoginException(\"Unable to delete user: \" + e.getLocalizedMessage());\n+\n+throw new UserLoginException(\"Unable to delete user: \" + e.getLocalizedMessage());\n         } finally {\n             closeSession(session, true);\n         }\n@@ -211,8 +212,7 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n         Session session = null;\n \n         List<UserLogin> users = null;\n-\n-        try {\n+try {\n             session = sessionFactory.openSession();\n             users = session.createCriteria(UserLogin.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();\n         } catch (HibernateException e) {\n@@ -238,4 +238,4 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n             session.close();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 34
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "81",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "115",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "141",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "166",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "199",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "222",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "240",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/585/UserLoginDAOImpl.java\nindex 78c1a8dcdae..4d1eba11bf1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/585/UserLoginDAOImpl.java\n@@ -48,36 +48,42 @@ import org.springframework.stereotype.Service;\n  * @author msw\n  *\n  */\n+\n+\n @Service\n public class UserLoginDAOImpl implements UserLoginDAO {\n \n     private static final Logger LOG = LoggerFactory.getLogger(UserLoginDAOImpl.class);\n \n-    @Autowired\n-    private SessionFactory sessionFactory;\n+\n+    @Autowired private SessionFactory sessionFactory;\n \n     /*\n      * (non-Javadoc)\n      *\n      * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#login(gov.hhs.fha .nhinc.admingui.model.Login)\n      */\n+\n+\n     @Override\n     public UserLogin login(Login login) {\n         Session session = null;\n         UserLogin userLogin = null;\n         Query query;\n-\n         try {\n             session = sessionFactory.openSession();\n             query = session.createQuery(\"from UserLogin where userName = :userName\");\n             query.setParameter(\"userName\", login.getUserName());\n-            userLogin = (UserLogin) query.uniqueResult();\n+            userLogin = (UserLogin)\n+                            query.uniqueResult();\n         } catch (HibernateException e) {\n             LOG.error(\"Exception during query execution by: \" + e.getMessage(), e);\n-        } finally {\n-            closeSession(session, false);\n         }\n \n+\n+finally {\n+            closeSession(session, false);\n+        }\n         return userLogin;\n     }\n \n@@ -87,12 +93,14 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n      * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#createUser(gov.hhs.fha\n      * .nhinc.admingui.services.persistence.jpa.entity.UserLogin)\n      */\n+\n+\n     @Override\n     public boolean createUser(UserLogin createUser) throws UserLoginException {\n         Session session = null;\n         Transaction tx = null;\n-        boolean result = true;\n \n+        boolean result = true;\n         try {\n             session = sessionFactory.openSession();\n             tx = session.beginTransaction();\n@@ -104,10 +112,12 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n             transactionRollback(tx);\n             LOG.error(\"Exception during insertion caused by :\" + e.getMessage(), e);\n             throw new UserLoginException(\"Could not create new user \" + createUser.getUserName(), e);\n-        } finally {\n-            closeSession(session, false);\n         }\n \n+\n+finally {\n+            closeSession(session, false);\n+        }\n         return result;\n     }\n \n@@ -116,21 +126,24 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n      *\n      * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#getRole(long)\n      */\n+\n+\n     @Override\n     public UserRole getRole(long role) {\n         Session session = null;\n         UserRole result = null;\n-\n         try {\n             session = sessionFactory.openSession();\n-            result = (UserRole) session.createCriteria(UserRole.class).add(Restrictions.eq(\"roleId\", role))\n-                    .uniqueResult();\n+            result = (UserRole)\n+                         session.createCriteria(UserRole.class).add(Restrictions.eq(\"roleId\", role)).uniqueResult();\n         } catch (HibernateException e) {\n             LOG.error(\"Could not get role: \" + e.getLocalizedMessage(), e);\n-        } finally {\n-            closeSession(session, false);\n         }\n \n+\n+finally {\n+            closeSession(session, false);\n+        }\n         return result;\n     }\n \n@@ -139,21 +152,23 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n      *\n      * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#getAllRoles()\n      */\n+\n+\n     @Override\n     public List<UserRole> getAllRoles() {\n         Session session = null;\n-\n         List<UserRole> roles = null;\n-\n         try {\n             session = sessionFactory.openSession();\n             roles = session.createCriteria(UserRole.class).list();\n         } catch (HibernateException e) {\n             LOG.error(\"Could not get roles: \" + e.getLocalizedMessage(), e);\n-        } finally {\n-            closeSession(session, false);\n         }\n \n+\n+finally {\n+            closeSession(session, false);\n+        }\n         return roles;\n     }\n \n@@ -163,16 +178,17 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n      * @see gov.hhs.fha.nhinc.admingui.hibernate.dao.UserLoginDAO#updatePreferences(gov.hhs.fha\n      * .nhinc.admingui.services.persistence.jpa.entity.RolePreference)\n      */\n+\n+\n     @Override\n     public boolean updatePreference(RolePreference preference) {\n         Session session = null;\n         Transaction tx = null;\n-        boolean updated = false;\n \n+        boolean updated = false;\n         try {\n             session = sessionFactory.openSession();\n             tx = session.beginTransaction();\n-\n             session.update(preference);\n             tx.commit();\n             updated = true;\n@@ -180,18 +196,20 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n             LOG.error(\"Could not update preferences: \" + e.getLocalizedMessage(), e);\n             transactionRollback(tx);\n             updated = false;\n-        } finally {\n-            closeSession(session, false);\n         }\n \n+\n+finally {\n+            closeSession(session, false);\n+        }\n         return updated;\n     }\n \n+\n     @Override\n     public void deleteUser(UserLogin user) throws UserLoginException {\n         Session session = null;\n         Transaction tx = null;\n-\n         try {\n             session = sessionFactory.openSession();\n             tx = session.beginTransaction();\n@@ -201,26 +219,30 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n             transactionRollback(tx);\n             LOG.error(\"Unable to delete user: \" + e.getLocalizedMessage(), e);\n             throw new UserLoginException(\"Unable to delete user: \" + e.getLocalizedMessage());\n-        } finally {\n+        }\n+\n+\n+finally {\n             closeSession(session, true);\n         }\n     }\n \n+\n     @Override\n     public List<UserLogin> getAllUsers() {\n         Session session = null;\n-\n         List<UserLogin> users = null;\n-\n         try {\n             session = sessionFactory.openSession();\n             users = session.createCriteria(UserLogin.class).setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();\n         } catch (HibernateException e) {\n             LOG.error(\"Could not retrieve users: \" + e.getLocalizedMessage(), e);\n-        } finally {\n-            closeSession(session, false);\n         }\n \n+\n+finally {\n+            closeSession(session, false);\n+        }\n         return users;\n     }\n \n@@ -238,4 +260,5 @@ public class UserLoginDAOImpl implements UserLoginDAO {\n             session.close();\n         }\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 74
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "'import' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/585/UserLoginDAOImpl.java\nindex 78c1a8dcdae..9aa515783b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_random/585/UserLoginDAOImpl.java\n@@ -25,7 +25,6 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n package gov.hhs.fha.nhinc.admingui.hibernate.dao;\n-\n import gov.hhs.fha.nhinc.admingui.model.Login;\n import gov.hhs.fha.nhinc.admingui.services.exception.UserLoginException;\n import gov.hhs.fha.nhinc.admingui.services.persistence.jpa.entity.RolePreference;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/585/UserLoginDAOImpl.java\nindex 78c1a8dcdae..a3b4175557e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/585/UserLoginDAOImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/585/UserLoginDAOImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.admingui.hibernate.dao;\n \n import gov.hhs.fha.nhinc.admingui.model.Login;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}