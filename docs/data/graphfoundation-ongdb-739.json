{
    "project_name": "graphfoundation-ongdb",
    "error_id": "739",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/739/FusionIndexPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/739/FusionIndexPopulator.java\nindex a4495b6f742..d864506a325 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/739/FusionIndexPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/739/FusionIndexPopulator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.fusion;\n \n import java.io.IOException;\n@@ -36,94 +37,94 @@ import static org.neo4j.kernel.impl.index.schema.fusion.SlotSelector.INSTANCE_CO\n \n class FusionIndexPopulator extends FusionIndexBase<IndexPopulator> implements IndexPopulator\n {\n-    private final long indexId;\n-    private final DropAction dropAction;\n-    private final boolean archiveFailedIndex;\n+  private final long indexId;\n+  private final DropAction dropAction;\n+  private final boolean archiveFailedIndex;\n \n-    FusionIndexPopulator( SlotSelector slotSelector, InstanceSelector<IndexPopulator> instanceSelector, long indexId, DropAction dropAction,\n-            boolean archiveFailedIndex )\n-    {\n-        super( slotSelector, instanceSelector );\n-        this.indexId = indexId;\n-        this.dropAction = dropAction;\n-        this.archiveFailedIndex = archiveFailedIndex;\n-    }\n+  FusionIndexPopulator(SlotSelector slotSelector, InstanceSelector<IndexPopulator> instanceSelector, long indexId, DropAction dropAction,\n+                       boolean archiveFailedIndex)\n+  {\n+    super(slotSelector, instanceSelector);\n+    this.indexId = indexId;\n+    this.dropAction = dropAction;\n+    this.archiveFailedIndex = archiveFailedIndex;\n+  }\n \n-    @Override\n-    public void create() throws IOException\n-    {\n-        dropAction.drop( indexId, archiveFailedIndex );\n-        instanceSelector.forAll( IndexPopulator::create );\n-    }\n+  @Override\n+  public void create() throws IOException\n+  {\n+    dropAction.drop(indexId, archiveFailedIndex);\n+    instanceSelector.forAll(IndexPopulator::create);\n+  }\n \n-    @Override\n-    public void drop() throws IOException\n-    {\n-        instanceSelector.forAll( IndexPopulator::drop );\n-        dropAction.drop( indexId );\n-    }\n+  @Override\n+  public void drop() throws IOException\n+  {\n+    instanceSelector.forAll(IndexPopulator::drop);\n+    dropAction.drop(indexId);\n+  }\n \n-    @Override\n-    public void add( Collection<? extends IndexEntryUpdate<?>> updates ) throws IndexEntryConflictException, IOException\n+  @Override\n+  public void add(Collection<? extends IndexEntryUpdate<?>> updates) throws IndexEntryConflictException, IOException\n+  {\n+    LazyInstanceSelector<Collection<IndexEntryUpdate<?>>> batchSelector =\n+        new LazyInstanceSelector<>(new Collection[INSTANCE_COUNT], slot -> new ArrayList<>());\n+    for (IndexEntryUpdate<?> update : updates)\n     {\n-        LazyInstanceSelector<Collection<IndexEntryUpdate<?>>> batchSelector =\n-                new LazyInstanceSelector<>( new Collection[INSTANCE_COUNT], slot -> new ArrayList<>() );\n-        for ( IndexEntryUpdate<?> update : updates )\n-        {\n-            batchSelector.select( slotSelector.selectSlot( update.values(), GROUP_OF ) ).add( update );\n-        }\n-\n-        // Manual loop due do multiple exception types\n-        for ( int slot = 0; slot < INSTANCE_COUNT; slot++ )\n-        {\n-            Collection<IndexEntryUpdate<?>> batch = batchSelector.getIfInstantiated( slot );\n-            if ( batch != null )\n-            {\n-                this.instanceSelector.select( slot ).add( batch );\n-            }\n-        }\n+      batchSelector.select(slotSelector.selectSlot(update.values(), GROUP_OF)).add(update);\n     }\n \n-    @Override\n-    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-            throws IndexEntryConflictException, IOException\n+    // Manual loop due do multiple exception types\n+    for (int slot = 0; slot < INSTANCE_COUNT; slot++)\n     {\n-        // Manual loop due do multiple exception types\n-        for ( int slot = 0; slot < INSTANCE_COUNT; slot++ )\n-        {\n-            instanceSelector.select( slot ).verifyDeferredConstraints( propertyAccessor );\n-        }\n+      Collection<IndexEntryUpdate<?>> batch = batchSelector.getIfInstantiated(slot);\n+      if (batch != null)\n+      {\n+        this.instanceSelector.select(slot).add(batch);\n+      }\n     }\n+  }\n \n-    @Override\n-    public IndexUpdater newPopulatingUpdater( PropertyAccessor accessor )\n+  @Override\n+  public void verifyDeferredConstraints(PropertyAccessor propertyAccessor)\n+      throws IndexEntryConflictException, IOException\n+  {\n+    // Manual loop due do multiple exception types\n+    for (int slot = 0; slot < INSTANCE_COUNT; slot++)\n     {\n-        LazyInstanceSelector<IndexUpdater> updaterSelector =\n-                new LazyInstanceSelector<>( new IndexUpdater[INSTANCE_COUNT], slot -> instanceSelector.select( slot ).newPopulatingUpdater( accessor ) );\n-        return new FusionIndexUpdater( slotSelector, updaterSelector );\n+      instanceSelector.select(slot).verifyDeferredConstraints(propertyAccessor);\n     }\n+  }\n \n-    @Override\n-    public void close( boolean populationCompletedSuccessfully ) throws IOException\n-    {\n-        instanceSelector.close( populator -> populator.close( populationCompletedSuccessfully ) );\n-    }\n+  @Override\n+  public IndexUpdater newPopulatingUpdater(PropertyAccessor accessor)\n+  {\n+    LazyInstanceSelector<IndexUpdater> updaterSelector =\n+        new LazyInstanceSelector<>(new IndexUpdater[INSTANCE_COUNT], slot -> instanceSelector.select(slot).newPopulatingUpdater(accessor));\n+    return new FusionIndexUpdater(slotSelector, updaterSelector);\n+  }\n \n-    @Override\n-    public void markAsFailed( String failure ) throws IOException\n-    {\n-        instanceSelector.forAll( populator -> populator.markAsFailed( failure ) );\n-    }\n+  @Override\n+  public void close(boolean populationCompletedSuccessfully) throws IOException\n+  {\n+    instanceSelector.close(populator -> populator.close(populationCompletedSuccessfully));\n+  }\n \n-    @Override\n-    public void includeSample( IndexEntryUpdate<?> update )\n-    {\n-        instanceSelector.select( slotSelector.selectSlot( update.values(), GROUP_OF ) ).includeSample( update );\n-    }\n+  @Override\n+  public void markAsFailed(String failure) throws IOException\n+  {\n+    instanceSelector.forAll(populator -> populator.markAsFailed(failure));\n+  }\n \n-    @Override\n-    public IndexSample sampleResult()\n-    {\n-        return combineSamples( instanceSelector.instancesAs( new IndexSample[INSTANCE_COUNT], IndexPopulator::sampleResult ) );\n-    }\n+  @Override\n+  public void includeSample(IndexEntryUpdate<?> update)\n+  {\n+    instanceSelector.select(slotSelector.selectSlot(update.values(), GROUP_OF)).includeSample(update);\n+  }\n+\n+  @Override\n+  public IndexSample sampleResult()\n+  {\n+    return combineSamples(instanceSelector.instancesAs(new IndexSample[INSTANCE_COUNT], IndexPopulator::sampleResult));\n+  }\n }\n",
            "diff_size": 93
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "99",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/739/FusionIndexPopulator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/739/FusionIndexPopulator.java\nindex a4495b6f742..9d6611702fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/739/FusionIndexPopulator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/739/FusionIndexPopulator.java\n@@ -66,9 +66,8 @@ class FusionIndexPopulator extends FusionIndexBase<IndexPopulator> implements In\n     @Override\n     public void add( Collection<? extends IndexEntryUpdate<?>> updates ) throws IndexEntryConflictException, IOException\n     {\n-        LazyInstanceSelector<Collection<IndexEntryUpdate<?>>> batchSelector =\n-                new LazyInstanceSelector<>( new Collection[INSTANCE_COUNT], slot -> new ArrayList<>() );\n-        for ( IndexEntryUpdate<?> update : updates )\n+        LazyInstanceSelector<Collection<IndexEntryUpdate<?>>> batchSelector = new LazyInstanceSelector<>( new Collection[INSTANCE_COUNT], slot -> new ArrayList<>() );\n+for ( IndexEntryUpdate<?> update : updates )\n         {\n             batchSelector.select( slotSelector.selectSlot( update.values(), GROUP_OF ) ).add( update );\n         }\n@@ -85,9 +84,8 @@ class FusionIndexPopulator extends FusionIndexBase<IndexPopulator> implements In\n     }\n \n     @Override\n-    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor )\n-            throws IndexEntryConflictException, IOException\n-    {\n+    public void verifyDeferredConstraints( PropertyAccessor propertyAccessor ) throws IndexEntryConflictException, IOException\n+{\n         // Manual loop due do multiple exception types\n         for ( int slot = 0; slot < INSTANCE_COUNT; slot++ )\n         {\n@@ -98,9 +96,8 @@ class FusionIndexPopulator extends FusionIndexBase<IndexPopulator> implements In\n     @Override\n     public IndexUpdater newPopulatingUpdater( PropertyAccessor accessor )\n     {\n-        LazyInstanceSelector<IndexUpdater> updaterSelector =\n-                new LazyInstanceSelector<>( new IndexUpdater[INSTANCE_COUNT], slot -> instanceSelector.select( slot ).newPopulatingUpdater( accessor ) );\n-        return new FusionIndexUpdater( slotSelector, updaterSelector );\n+        LazyInstanceSelector<IndexUpdater> updaterSelector = new LazyInstanceSelector<>( new IndexUpdater[INSTANCE_COUNT], slot -> instanceSelector.select( slot ).newPopulatingUpdater( accessor ) );\n+return new FusionIndexUpdater( slotSelector, updaterSelector );\n     }\n \n     @Override\n@@ -126,4 +123,4 @@ class FusionIndexPopulator extends FusionIndexBase<IndexPopulator> implements In\n     {\n         return combineSamples( instanceSelector.instancesAs( new IndexSample[INSTANCE_COUNT], IndexPopulator::sampleResult ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}