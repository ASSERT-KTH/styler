{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1846",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1846/PageSwapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1846/PageSwapper.java\nindex 3f797003ee9..0f5f24a72f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1846/PageSwapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1846/PageSwapper.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache;\n \n import java.io.File;\n@@ -30,118 +31,119 @@ import java.io.IOException;\n  */\n public interface PageSwapper\n {\n-    /**\n-     * Read the page with the given filePageId, from the concrete file on the\n-     * file system, into the page given by the bufferAddress and the bufferSize.\n-     * <p>\n-     * Returns the number of bytes read in from the file. May be zero if the\n-     * requested page was beyond the end of the file. If less than the file\n-     * page size, then the rest of the page will contain zeros.\n-     * <p>\n-     * Note: It is possible for the channel to be asynchronously closed while\n-     * this operation is taking place. For instance, if the current thread is\n-     * interrupted. If this happens, then the implementation must reopen the\n-     * channel and the operation must be retried.\n-     */\n-    long read( long filePageId, long bufferAddress, int bufferSize ) throws IOException;\n+  /**\n+   * Read the page with the given filePageId, from the concrete file on the\n+   * file system, into the page given by the bufferAddress and the bufferSize.\n+   * <p>\n+   * Returns the number of bytes read in from the file. May be zero if the\n+   * requested page was beyond the end of the file. If less than the file\n+   * page size, then the rest of the page will contain zeros.\n+   * <p>\n+   * Note: It is possible for the channel to be asynchronously closed while\n+   * this operation is taking place. For instance, if the current thread is\n+   * interrupted. If this happens, then the implementation must reopen the\n+   * channel and the operation must be retried.\n+   */\n+  long read(long filePageId, long bufferAddress, int bufferSize) throws IOException;\n \n-    /**\n-     * Read pages from the file into the pages given by the bufferAddresses, starting from the given startFilePageId.\n-     * <p>\n-     * Returns the number of bytes read in from the file. May be zero if the\n-     * requested startFilePageId was beyond the end of the file. If the file does not have enough data\n-     * to fill up all the buffer space represented by the pages, then the remaining buffer space will be\n-     * filled with zero bytes.\n-     * <p>\n-     * The contents of the pages should be considered to be garbage if the operation throws an exception,\n-     * since the constituent reads can be reordered, and no zeroing will take place.\n-     * <p>\n-     * Note: It is possible for the channel to be asynchronously closed while\n-     * this operation is taking place. For instance, if the current thread is\n-     * interrupted. If this happens, then the implementation must reopen the\n-     * channel and the operation must be retried.\n-     */\n-    long read( long startFilePageId, long[] bufferAddresses, int bufferSize, int arrayOffset, int length ) throws IOException;\n+  /**\n+   * Read pages from the file into the pages given by the bufferAddresses, starting from the given startFilePageId.\n+   * <p>\n+   * Returns the number of bytes read in from the file. May be zero if the\n+   * requested startFilePageId was beyond the end of the file. If the file does not have enough data\n+   * to fill up all the buffer space represented by the pages, then the remaining buffer space will be\n+   * filled with zero bytes.\n+   * <p>\n+   * The contents of the pages should be considered to be garbage if the operation throws an exception,\n+   * since the constituent reads can be reordered, and no zeroing will take place.\n+   * <p>\n+   * Note: It is possible for the channel to be asynchronously closed while\n+   * this operation is taking place. For instance, if the current thread is\n+   * interrupted. If this happens, then the implementation must reopen the\n+   * channel and the operation must be retried.\n+   */\n+  long read(long startFilePageId, long[] bufferAddresses, int bufferSize, int arrayOffset, int length) throws IOException;\n \n-    /**\n-     * Write the contents of the page given by the bufferAddress and the bufferSize,\n-     * to the concrete file on the file system, at the located indicated by the given\n-     * filePageId.\n-     * <p>\n-     * Returns the number of bytes written to the file.\n-     * <p>\n-     * Note: It is possible for the channel to be asynchronously closed while\n-     * this operation is taking place. For instance, if the current thread is\n-     * interrupted. If this happens, then implementation must reopen the\n-     * channel and the operation must be retried.\n-     */\n-    long write( long filePageId, long bufferAddress ) throws IOException;\n+  /**\n+   * Write the contents of the page given by the bufferAddress and the bufferSize,\n+   * to the concrete file on the file system, at the located indicated by the given\n+   * filePageId.\n+   * <p>\n+   * Returns the number of bytes written to the file.\n+   * <p>\n+   * Note: It is possible for the channel to be asynchronously closed while\n+   * this operation is taking place. For instance, if the current thread is\n+   * interrupted. If this happens, then implementation must reopen the\n+   * channel and the operation must be retried.\n+   */\n+  long write(long filePageId, long bufferAddress) throws IOException;\n \n-    /**\n-     * Write the contents of the given pages, to the concrete file on the file system,\n-     * starting at the location of the given startFilePageId.\n-     * <p>\n-     * If an exception is thrown, then some of the data may have been written, and some might not.\n-     * The writes may reorder and tear, so no guarantee can be made about what has been written and what has not, if\n-     * an exception is thrown. Therefor, the entire write operation should be retried, in the case of failure, or the\n-     * data should be rewritten through other means.\n-     * <p>\n-     * Returns the number of bytes written to the file.\n-     * <p>\n-     * Note: It is possible for the channel to be asynchronously closed while\n-     * this operation is taking place. For instance, if the current thread is\n-     * interrupted. If this happens, then implementation must reopen the\n-     * channel and the operation must be retried.\n-     */\n-    long write( long startFilePageId, long[] bufferAddresses, int arrayOffset, int length ) throws IOException;\n+  /**\n+   * Write the contents of the given pages, to the concrete file on the file system,\n+   * starting at the location of the given startFilePageId.\n+   * <p>\n+   * If an exception is thrown, then some of the data may have been written, and some might not.\n+   * The writes may reorder and tear, so no guarantee can be made about what has been written and what has not, if\n+   * an exception is thrown. Therefor, the entire write operation should be retried, in the case of failure, or the\n+   * data should be rewritten through other means.\n+   * <p>\n+   * Returns the number of bytes written to the file.\n+   * <p>\n+   * Note: It is possible for the channel to be asynchronously closed while\n+   * this operation is taking place. For instance, if the current thread is\n+   * interrupted. If this happens, then implementation must reopen the\n+   * channel and the operation must be retried.\n+   */\n+  long write(long startFilePageId, long[] bufferAddresses, int arrayOffset, int length) throws IOException;\n \n-    /**\n-     * Notification that a page has been evicted, used to clean up state in structures\n-     * outside the page table.\n-     */\n-    void evicted( long pageId );\n+  /**\n+   * Notification that a page has been evicted, used to clean up state in structures\n+   * outside the page table.\n+   */\n+  void evicted(long pageId);\n \n-    /**\n-     * Get the file that this PageSwapper represents.\n-     */\n-    File file();\n+  /**\n+   * Get the file that this PageSwapper represents.\n+   */\n+  File file();\n \n-    /**\n-     * Close and release all resources associated with the file underlying this PageSwapper.\n-     */\n-    void close() throws IOException;\n+  /**\n+   * Close and release all resources associated with the file underlying this PageSwapper.\n+   */\n+  void close() throws IOException;\n \n-    /**\n-     * Close and release all resources associated with the file underlying this PageSwapper, and then delete that file.\n-     * @throws IOException If an {@link IOException} occurs during either the closing or the deleting of the file. This\n-     * may leave the file on the file system.\n-     */\n-    void closeAndDelete() throws IOException;\n+  /**\n+   * Close and release all resources associated with the file underlying this PageSwapper, and then delete that file.\n+   *\n+   * @throws IOException If an {@link IOException} occurs during either the closing or the deleting of the file. This\n+   *                     may leave the file on the file system.\n+   */\n+  void closeAndDelete() throws IOException;\n \n-    /**\n-     * Forces all writes done by this PageSwapper to the underlying storage device, such that the writes are durable\n-     * when this call returns.\n-     * <p>\n-     * This method has no effect if the {@link PageSwapperFactory#syncDevice()} method forces the writes for all\n-     * non-closed PageSwappers created through the given <code>PageSwapperFactory</code>.\n-     * The {@link PageCache#flushAndForce()} method will first call <code>force</code> on the PageSwappers for all\n-     * mapped files, then call <code>syncDevice</code> on the PageSwapperFactory. This way, the writes are always made\n-     * durable regardless of which method that does the forcing.\n-     */\n-    void force() throws IOException;\n+  /**\n+   * Forces all writes done by this PageSwapper to the underlying storage device, such that the writes are durable\n+   * when this call returns.\n+   * <p>\n+   * This method has no effect if the {@link PageSwapperFactory#syncDevice()} method forces the writes for all\n+   * non-closed PageSwappers created through the given <code>PageSwapperFactory</code>.\n+   * The {@link PageCache#flushAndForce()} method will first call <code>force</code> on the PageSwappers for all\n+   * mapped files, then call <code>syncDevice</code> on the PageSwapperFactory. This way, the writes are always made\n+   * durable regardless of which method that does the forcing.\n+   */\n+  void force() throws IOException;\n \n-    /**\n-     * Get the filePageId of the last page in the concrete file.\n-     */\n-    long getLastPageId() throws IOException;\n+  /**\n+   * Get the filePageId of the last page in the concrete file.\n+   */\n+  long getLastPageId() throws IOException;\n \n-    /**\n-     * Truncate the file represented by this PageSwapper, so the size of the file is zero and\n-     * {@link #getLastPageId()} returns -1.\n-     * <p>\n-     * Truncation may occur concurrently with writes, in which case both operations will appear to be atomic, such that\n-     * either the write happens before the truncation and is lost, or the file is truncated and the write then extends\n-     * the file with any zero padding and the written data.\n-     */\n-    void truncate() throws IOException;\n+  /**\n+   * Truncate the file represented by this PageSwapper, so the size of the file is zero and\n+   * {@link #getLastPageId()} returns -1.\n+   * <p>\n+   * Truncation may occur concurrently with writes, in which case both operations will appear to be atomic, such that\n+   * either the write happens before the truncation and is lost, or the file is truncated and the write then extends\n+   * the file with any zero padding and the written data.\n+   */\n+  void truncate() throws IOException;\n }\n",
            "diff_size": 106
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1846/PageSwapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1846/PageSwapper.java\nindex 3f797003ee9..7282de25553 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1846/PageSwapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1846/PageSwapper.java\n@@ -144,4 +144,4 @@ public interface PageSwapper\n      * the file with any zero padding and the written data.\n      */\n     void truncate() throws IOException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}