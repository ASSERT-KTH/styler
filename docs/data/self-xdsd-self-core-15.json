{
    "project_name": "self-xdsd-self-core",
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "111",
                "column": "11",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        }\n        final Commit commit;\n        if(jsonObject != null){\n            LOG.debug(String.format(\"Commit [%s] found!\", ref));\n            commit = new BitbucketCommit(\n                commitUri,",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/15/BitbucketCommits.java\nindex 15d1890f901..d922e559438 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/15/BitbucketCommits.java\n@@ -108,7 +108,7 @@ final class BitbucketCommits implements Commits {\n                 );\n         }\n         final Commit commit;\n-        if(jsonObject != null){\n+        if (jsonObject != null){\n             LOG.debug(String.format(\"Commit [%s] found!\", ref));\n             commit = new BitbucketCommit(\n                 commitUri,\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "72",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/15/BitbucketCommits.java\nindex 15d1890f901..c2ca5b4a939 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/15/BitbucketCommits.java\n@@ -20,6 +20,7 @@\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.selfxdsd.core;\n \n import com.selfxdsd.api.Commit;\n@@ -36,6 +37,7 @@ import java.util.Iterator;\n \n /**\n  * Commits in a Bitbucket Repo.\n+ *\n  * @author criske\n  * @version $Id$\n  * @since 0.0.67\n@@ -67,9 +69,9 @@ final class BitbucketCommits implements Commits {\n     /**\n      * Ctor.\n      *\n-     * @param resources Bitbucket's JSON Resources.\n+     * @param resources  Bitbucket's JSON Resources.\n      * @param commitsUri Commits base URI.\n-     * @param storage Storage.\n+     * @param storage    Storage.\n      */\n     BitbucketCommits(\n         final JsonResources resources,\n@@ -85,7 +87,7 @@ final class BitbucketCommits implements Commits {\n     public Commit getCommit(final String ref) {\n         LOG.debug(\n             \"Getting commit [\" + ref + \"] from [\"\n-            + this.commitsUri + \"...\"\n+                + this.commitsUri + \"...\"\n         );\n         final URI commitUri = this.createCommitUri(ref);\n         final Resource resource = this.resources.get(commitUri);\n@@ -100,15 +102,15 @@ final class BitbucketCommits implements Commits {\n             default:\n                 LOG.error(\n                     \"Could not get the commit \" + ref + \". \"\n-                    + \"Received status code: \" + resource.statusCode() + \".\"\n+                        + \"Received status code: \" + resource.statusCode() + \".\"\n                 );\n                 throw new IllegalStateException(\n                     \"Could not get the commit \" + ref + \". \"\n-                    + \"Received status code: \" + resource.statusCode() + \".\"\n+                        + \"Received status code: \" + resource.statusCode() + \".\"\n                 );\n         }\n         final Commit commit;\n-        if(jsonObject != null){\n+        if (jsonObject != null) {\n             LOG.debug(String.format(\"Commit [%s] found!\", ref));\n             commit = new BitbucketCommit(\n                 commitUri,\n@@ -142,8 +144,8 @@ final class BitbucketCommits implements Commits {\n         } else {\n             throw new IllegalStateException(\n                 \"Fetch repo commits returned \" + resource.statusCode()\n-                + \", expected 200 OK. URI is [\" + this.commitsUri.toString()\n-                + \"].\"\n+                    + \", expected 200 OK. URI is [\" + this.commitsUri.toString()\n+                    + \"].\"\n             );\n         }\n         return latest;\n@@ -158,6 +160,7 @@ final class BitbucketCommits implements Commits {\n \n     /**\n      * Creates the URI for a Bitbucket commit based on ref (hash).\n+     *\n      * @param ref Hash.\n      * @return URI.\n      */\n@@ -167,7 +170,7 @@ final class BitbucketCommits implements Commits {\n         // we only need to drop the \"s\" from \"commits\" part of commitsUriStr\n         // and add the hash/ref at the end.\n         final String commitUriStr = commitsUriStr\n-            .substring(0, commitsUriStr.length() -1) + \"/\" +ref;\n+            .substring(0, commitsUriStr.length() - 1) + \"/\" + ref;\n         return URI.create(commitUriStr);\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 86).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 38, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 38, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 38, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 38, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "'case' child has incorrect indentation level 38, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 12, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "147",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "'+' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/15/BitbucketCommits.java\nindex 15d1890f901..70e370f4135 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/15/BitbucketCommits.java\n@@ -28,7 +28,6 @@ import com.selfxdsd.api.Resource;\n import com.selfxdsd.api.storage.Storage;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import javax.json.JsonObject;\n import java.net.HttpURLConnection;\n import java.net.URI;\n@@ -40,28 +39,36 @@ import java.util.Iterator;\n  * @version $Id$\n  * @since 0.0.67\n  */\n+\n+\n final class BitbucketCommits implements Commits {\n \n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-        BitbucketCommits.class\n-    );\n+\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(BitbucketCommits.class);\n \n     /**\n      * Bitbucket repo Commits base uri.\n      */\n+\n+\n     private final URI commitsUri;\n \n     /**\n      * Bitbucket's JSON Resources.\n      */\n+\n+\n     private final JsonResources resources;\n \n     /**\n      * Self storage, in case we want to store something.\n      */\n+\n+\n     private final Storage storage;\n \n     /**\n@@ -71,6 +78,8 @@ final class BitbucketCommits implements Commits {\n      * @param commitsUri Commits base URI.\n      * @param storage Storage.\n      */\n+\n+\n     BitbucketCommits(\n         final JsonResources resources,\n         final URI commitsUri,\n@@ -83,41 +92,38 @@ final class BitbucketCommits implements Commits {\n \n     @Override\n     public Commit getCommit(final String ref) {\n-        LOG.debug(\n-            \"Getting commit [\" + ref + \"] from [\"\n-            + this.commitsUri + \"...\"\n-        );\n+        LOG.debug(\"Getting commit [\"\n+                      + ref + \"] from [\"\n+                      + this.commitsUri + \"...\");\n         final URI commitUri = this.createCommitUri(ref);\n         final Resource resource = this.resources.get(commitUri);\n         final JsonObject jsonObject;\n-        switch (resource.statusCode()) {\n-            case HttpURLConnection.HTTP_OK:\n-                jsonObject = resource.asJsonObject();\n-                break;\n-            case HttpURLConnection.HTTP_NOT_FOUND:\n-                jsonObject = null;\n-                break;\n-            default:\n-                LOG.error(\n-                    \"Could not get the commit \" + ref + \". \"\n-                    + \"Received status code: \" + resource.statusCode() + \".\"\n-                );\n-                throw new IllegalStateException(\n-                    \"Could not get the commit \" + ref + \". \"\n-                    + \"Received status code: \" + resource.statusCode() + \".\"\n-                );\n+        switch(resource.statusCode()) {\n+                                      case HttpURLConnection.HTTP_OK:\n+                                      jsonObject = resource.asJsonObject();\n+                                      break;\n+                                      case HttpURLConnection.HTTP_NOT_FOUND:\n+            jsonObject = null;\n+            break;\n+                                      default:\n+            LOG.error(\"Could not get the commit \"\n+                      + ref + \". \"\n++ \"Received status code: \"\n+                          + resource.statusCode() + \".\");\n+            throw new IllegalStateException(\"Could not get the commit \"\n+                                            + ref + \". \"\n++ \"Received status code: \"\n+                                                + resource.statusCode() + \".\");\n         }\n         final Commit commit;\n-        if(jsonObject != null){\n-            LOG.debug(String.format(\"Commit [%s] found!\", ref));\n-            commit = new BitbucketCommit(\n-                commitUri,\n-                jsonObject,\n-                this.storage,\n-                this.resources\n+        if (jsonObject != null) {\n+            LOG.debug(\n+                String.format(\"Commit [%s] found!\", ref)\n             );\n+            commit = new BitbucketCommit(commitUri, jsonObject, this.storage, this.resources);\n         } else {\n-            LOG.debug(\"Commit [\" + ref + \"] not found, returning null.\");\n+            LOG.debug(\"Commit [\"\n+                          + ref + \"] not found, returning null.\");\n             commit = null;\n         }\n         return commit;\n@@ -125,14 +131,10 @@ final class BitbucketCommits implements Commits {\n \n     @Override\n     public Commit latest() {\n-        final Resource resource = this.resources\n-            .get(URI.create(this.commitsUri + \"?pagelen=1\"));\n+        final Resource resource = this.resources.get(URI.create(this.commitsUri + \"?pagelen=1\"));\n         final Commit latest;\n         if (resource.statusCode() == HttpURLConnection.HTTP_OK) {\n-            final JsonObject latestCommitJson = resource\n-                .asJsonObject()\n-                .getJsonArray(\"values\")\n-                .getJsonObject(0);\n+            final JsonObject latestCommitJson = resource.asJsonObject().getJsonArray(\"values\").getJsonObject(0);\n             latest = new BitbucketCommit(\n                 this.createCommitUri(latestCommitJson.getString(\"hash\")),\n                 latestCommitJson,\n@@ -140,20 +142,16 @@ final class BitbucketCommits implements Commits {\n                 this.resources\n             );\n         } else {\n-            throw new IllegalStateException(\n-                \"Fetch repo commits returned \" + resource.statusCode()\n-                + \", expected 200 OK. URI is [\" + this.commitsUri.toString()\n-                + \"].\"\n-            );\n+            throw new IllegalStateException(\"Fetch repo commits returned \"\n+                                                + resource.statusCode() + \", expected 200 OK. URI is [\"\n+                                                + this.commitsUri.toString() + \"].\");\n         }\n         return latest;\n     }\n \n     @Override\n     public Iterator<Commit> iterator() {\n-        throw new UnsupportedOperationException(\n-            \"You cannot iterate over all the Commits in a Repo.\"\n-        );\n+        throw new UnsupportedOperationException(\"You cannot iterate over all the Commits in a Repo.\");\n     }\n \n     /**\n@@ -161,13 +159,15 @@ final class BitbucketCommits implements Commits {\n      * @param ref Hash.\n      * @return URI.\n      */\n+\n+\n     private URI createCommitUri(final String ref) {\n         final String commitsUriStr = this.commitsUri.toString();\n         // Uri for commit is /<owner>/<name>/commit/<hash>\n         // we only need to drop the \"s\" from \"commits\" part of commitsUriStr\n         // and add the hash/ref at the end.\n-        final String commitUriStr = commitsUriStr\n-            .substring(0, commitsUriStr.length() -1) + \"/\" +ref;\n+        final String commitUriStr = commitsUriStr.substring(0, commitsUriStr.length() -1) + \"/\"\n++ ref;\n         return URI.create(commitUriStr);\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/15/BitbucketCommits.java\nindex 15d1890f901..d922e559438 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/15/BitbucketCommits.java\n@@ -108,7 +108,7 @@ final class BitbucketCommits implements Commits {\n                 );\n         }\n         final Commit commit;\n-        if(jsonObject != null){\n+        if (jsonObject != null){\n             LOG.debug(String.format(\"Commit [%s] found!\", ref));\n             commit = new BitbucketCommit(\n                 commitUri,\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/15/BitbucketCommits.java\nindex 15d1890f901..d922e559438 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/15/BitbucketCommits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/15/BitbucketCommits.java\n@@ -108,7 +108,7 @@ final class BitbucketCommits implements Commits {\n                 );\n         }\n         final Commit commit;\n-        if(jsonObject != null){\n+        if (jsonObject != null){\n             LOG.debug(String.format(\"Commit [%s] found!\", ref));\n             commit = new BitbucketCommit(\n                 commitUri,\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}