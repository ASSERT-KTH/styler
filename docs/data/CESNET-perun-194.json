{
    "project_name": "CESNET-perun",
    "error_id": "194",
    "information": {
        "errors": [
            {
                "line": "28",
                "severity": "error",
                "message": "Line matches the illegal pattern 'Wrong number of tabs before space on next line. Indent must use tab characters.'.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
            }
        ]
    },
    "source_code": "\t\t\tac.getServicesManager().blockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n\t\tac.getFacilityById(parms.readInt(\"facility\")));\n\t\treturn null;\n\t    }\n\t},\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/194/GeneralServiceManagerMethod.java\nindex 79621390db0..8322ac04908 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/194/GeneralServiceManagerMethod.java\n@@ -26,7 +26,7 @@ public enum GeneralServiceManagerMethod implements ManagerMethod {\n \t\t\tac.getServicesManager().blockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n \t\tac.getFacilityById(parms.readInt(\"facility\")));\n \t\treturn null;\n-\t    }\n+\t}\n \t},\n \n \t/*#\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/194/GeneralServiceManagerMethod.java\nindex 79621390db0..823d0406a41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/194/GeneralServiceManagerMethod.java\n@@ -12,320 +12,336 @@ import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n \n public enum GeneralServiceManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Bans service on a facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @throw ServiceAlreadyBannedException When service is already banned on facility.\n-\t */\n-\tblockServiceOnFacility {\n-\t    public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+    /*#\n+     * Bans service on a facility.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @throw ServiceAlreadyBannedException When service is already banned on facility.\n+     */\n+    blockServiceOnFacility {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n \n-\t\t\tac.getServicesManager().blockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n-\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\treturn null;\n-\t    }\n-\t},\n+            ac.getServicesManager().blockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n+                    ac.getFacilityById(parms.readInt(\"facility\")));\n+            return null;\n+        }\n+    },\n \n-\t/*#\n-\t * Bans Service on a destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\t/*#\n-\t * Bans Service on a destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destinationName String Destination name (like hostnames)\n-\t * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n-\t */\n-\tblockServiceOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+    /*#\n+     * Bans Service on a destination.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param destination int Destination <code>id</code>\n+     */\n+    /*#\n+     * Bans Service on a destination.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param destinationName String Destination name (like hostnames)\n+     * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n+     */\n+    blockServiceOnDestination {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n \n-\t\t\tif (parms.contains(\"destination\")) {\n-\t\t\t\tac.getServicesManager().blockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),parms.readInt(\"destination\"));\n-\t\t\t} else {\n-\t\t\t\tac.getServicesManager().blockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n+            if (parms.contains(\"destination\")) {\n+                ac.getServicesManager().blockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), parms.readInt(\"destination\"));\n+            } else {\n+                ac.getServicesManager().blockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n+            }\n+            return null;\n+        }\n+    },\n \n-\t/*#\n-\t * Block all services currently assigned on this facility.\n-\t * Newly assigned services are still allowed for propagation.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tblockAllServicesOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getServicesManager().blockAllServicesOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n+    /*#\n+     * Block all services currently assigned on this facility.\n+     * Newly assigned services are still allowed for propagation.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param facility int Facility <code>id</code>\n+     */\n+    blockAllServicesOnFacility {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getServicesManager().blockAllServicesOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n+            return null;\n+        }\n+    },\n \n-\t/*#\n-\t * Block all services currently assigned on this destination.\n-\t * Newly assigned services are still allowed for propagation.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\t/*#\n-\t * Block all services currently assigned on this destination.\n-\t * Newly assigned services are still allowed for propagation.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destinationName String Destination name (like hostnames)\n-\t * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n-\t */\n-\tblockAllServicesOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"destination\")) {\n-\t\t\t\tac.getServicesManager().blockAllServicesOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n-\t\t\t} else {\n-\t\t\t\tac.getServicesManager().blockAllServicesOnDestination(ac.getSession(), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n+    /*#\n+     * Block all services currently assigned on this destination.\n+     * Newly assigned services are still allowed for propagation.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param destination int Destination <code>id</code>\n+     */\n+    /*#\n+     * Block all services currently assigned on this destination.\n+     * Newly assigned services are still allowed for propagation.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param destinationName String Destination name (like hostnames)\n+     * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n+     */\n+    blockAllServicesOnDestination {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"destination\")) {\n+                ac.getServicesManager().blockAllServicesOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n+            } else {\n+                ac.getServicesManager().blockAllServicesOnDestination(ac.getSession(), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n+            }\n+            return null;\n+        }\n+    },\n \n-\t/*#\n-\t * Returns list of denials for a facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Service> Services\n-\t */\n-\tgetServicesBlockedOnFacility {\n-\t\tpublic List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getServicesManager().getServicesBlockedOnFacility(ac.getSession(),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t}\n-\t},\n+    /*#\n+     * Returns list of denials for a facility.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param facility int Facility <code>id</code>\n+     * @return List<Service> Services\n+     */\n+    getServicesBlockedOnFacility {\n+        public List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getServicesManager().getServicesBlockedOnFacility(ac.getSession(),\n+                    ac.getFacilityById(parms.readInt(\"facility\")));\n+        }\n+    },\n \n-\t/*#\n-\t * Returns list of denials for a destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destination int Destination <code>id</code>\n-\t * @return List<Service> Services\n-\t */\n-\tgetServicesBlockedOnDestination {\n-\t\tpublic List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getServicesManager().getServicesBlockedOnDestination(ac.getSession(),parms.readInt(\"destination\"));\n-\t\t}\n-\t},\n+    /*#\n+     * Returns list of denials for a destination.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param destination int Destination <code>id</code>\n+     * @return List<Service> Services\n+     */\n+    getServicesBlockedOnDestination {\n+        public List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            return ac.getServicesManager().getServicesBlockedOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n+        }\n+    },\n \n-\t/*#\n-\t * Is this Service denied on the facility?\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the Service is denied on the facility, 0 = false - the Service is NOT denied on the facility\n-\t */\n-\tisServiceBlockedOnFacility {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getServicesManager().isServiceBlockedOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n-\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\"))))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n+    /*#\n+     * Is this Service denied on the facility?\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @exampleResponse 1\n+     * @return int 1 = true - the Service is denied on the facility, 0 = false - the Service is NOT denied on the facility\n+     */\n+    isServiceBlockedOnFacility {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (ac.getServicesManager().isServiceBlockedOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n+                    ac.getFacilityById(parms.readInt(\"facility\")))) {\n+                return 1;\n+            } else {\n+                return 0;\n+            }\n+        }\n+    },\n \n-\t/*#\n-\t * Is this Service denied on the destination?\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the Service is denied on the destination, 0 = false - the Service is NOT denied on the destination\n-\t */\n-\tisServiceBlockedOnDestination {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getServicesManager().isServiceBlockedOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),parms.readInt(\"destination\")))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n+    /*#\n+     * Is this Service denied on the destination?\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param destination int Destination <code>id</code>\n+     * @exampleResponse 1\n+     * @return int 1 = true - the Service is denied on the destination, 0 = false - the Service is NOT denied on the destination\n+     */\n+    isServiceBlockedOnDestination {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (ac.getServicesManager().isServiceBlockedOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), parms.readInt(\"destination\"))) {\n+                return 1;\n+            } else {\n+                return 0;\n+            }\n+        }\n+    },\n \n-\t/*#\n-\t * Erase all the possible denials on this facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tunblockAllServicesOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getServicesManager().unblockAllServicesOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n+    /*#\n+     * Erase all the possible denials on this facility.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param facility int Facility <code>id</code>\n+     */\n+    unblockAllServicesOnFacility {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getServicesManager().unblockAllServicesOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n+            return null;\n+        }\n+    },\n \n-\t/*#\n-\t * Erase all the possible denials on this destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\t/*#\n-\t * Erase all the possible denials on this destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destinationName String Destination name (like hostnames)\n-\t * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n-\t */\n-\tunblockAllServicesOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"destination\")) {\n-\t\t\t\tac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n-\t\t\t} else if (parms.contains(\"destinationName\")) {\n-\t\t\t\tif(parms.contains(\"destinationType\")) {\n-\t\t\t\t\tac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n-\t\t\t\t} else {\n-\t\t\t\t\tac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), parms.readString(\"destinationName\"));\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"destination (id) or destinationName (text)\");\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n+    /*#\n+     * Erase all the possible denials on this destination.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param destination int Destination <code>id</code>\n+     */\n+    /*#\n+     * Erase all the possible denials on this destination.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param destinationName String Destination name (like hostnames)\n+     * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n+     */\n+    unblockAllServicesOnDestination {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"destination\")) {\n+                ac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n+            } else if (parms.contains(\"destinationName\")) {\n+                if (parms.contains(\"destinationType\")) {\n+                    ac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n+                } else {\n+                    ac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), parms.readString(\"destinationName\"));\n+                }\n+            } else {\n+                throw new RpcException(RpcException.Type.MISSING_VALUE, \"destination (id) or destinationName (text)\");\n+            }\n+            return null;\n+        }\n+    },\n \n-\t/*#\n-\t * Free the denial of the Service on this facility. If the Service was banned\n-\t * on this facility, it will be freed. In case the Service was not banned on\n-\t * this facility, nothing will happen.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tunblockServiceOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getServicesManager().unblockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n+    /*#\n+     * Free the denial of the Service on this facility. If the Service was banned\n+     * on this facility, it will be freed. In case the Service was not banned on\n+     * this facility, nothing will happen.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     */\n+    unblockServiceOnFacility {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            ac.getServicesManager().unblockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n+                    ac.getFacilityById(parms.readInt(\"facility\")));\n+            return null;\n+        }\n+    },\n \n-\t/*#\n-\t * Free the denial of the Service on this destination. If the Service was banned on\n-\t * this destination, it will be freed. In case the Service was not banned on this\n-\t * destination, nothing will happen.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\t/*#\n-\t * Free the denial of the Service on this destination. If the Service was banned on\n-\t * this destination, it will be freed. In case the Service was not banned on this\n-\t * destination, nothing will happen.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destinationName String Destination name (like hostnames)\n-\t * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n-\t */\n-\tunblockServiceOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"destination\")) {\n-\t\t\t\tac.getServicesManager().unblockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), parms.readInt(\"destination\"));\n-\t\t\t} else {\n-\t\t\t\tac.getServicesManager().unblockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n+    /*#\n+     * Free the denial of the Service on this destination. If the Service was banned on\n+     * this destination, it will be freed. In case the Service was not banned on this\n+     * destination, nothing will happen.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param destination int Destination <code>id</code>\n+     */\n+    /*#\n+     * Free the denial of the Service on this destination. If the Service was banned on\n+     * this destination, it will be freed. In case the Service was not banned on this\n+     * destination, nothing will happen.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param destinationName String Destination name (like hostnames)\n+     * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n+     */\n+    unblockServiceOnDestination {\n+        public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"destination\")) {\n+                ac.getServicesManager().unblockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), parms.readInt(\"destination\"));\n+            } else {\n+                ac.getServicesManager().unblockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n+            }\n+            return null;\n+        }\n+    },\n \n-\t/*#\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\t/*#\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\tforceServicePropagation {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tif(ac.getServicesManager().forceServicePropagation(\n-\t\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t} else {\n-\t\t\t\tif(ac.getServicesManager().forceServicePropagation(\n-\t\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t}\n-\t\t}\n-\t},\n+    /*#\n+     * Forces service propagation on defined facility.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @return int 1 = true if it is possible, 0 = false if not\n+     */\n+    /*#\n+     * Forces service propagation on defined facility.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @return int 1 = true if it is possible, 0 = false if not\n+     */\n+    forceServicePropagation {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"facility\")) {\n+                if (ac.getServicesManager().forceServicePropagation(\n+                        ac.getSession(),\n+                        ac.getFacilityById(parms.readInt(\"facility\")),\n+                        ac.getServiceById(parms.readInt(\"service\")))) {\n+                    return 1;\n+                } else {\n+                    return 0;\n+                }\n+            } else {\n+                if (ac.getServicesManager().forceServicePropagation(\n+                        ac.getSession(),\n+                        ac.getServiceById(parms.readInt(\"service\")))) {\n+                    return 1;\n+                } else {\n+                    return 0;\n+                }\n+            }\n+        }\n+    },\n \n-\t/*#\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\t/*#\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\tplanServicePropagation {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tif(ac.getServicesManager().planServicePropagation(\n-\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t} else {\n-\t\t\t\tif(ac.getServicesManager().planServicePropagation(\n-\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t}\n-\t\t}\n-\t},\n+    /*#\n+     * Plans service propagation on defined facility.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @param facility int Facility <code>id</code>\n+     * @return int 1 = true if it is possible, 0 = false if not\n+     */\n+    /*#\n+     * Plans service propagation on defined facility.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param service int Service <code>id</code>\n+     * @return int 1 = true if it is possible, 0 = false if not\n+     */\n+    planServicePropagation {\n+        public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+            if (parms.contains(\"facility\")) {\n+                if (ac.getServicesManager().planServicePropagation(\n+                        ac.getSession(),\n+                        ac.getFacilityById(parms.readInt(\"facility\")),\n+                        ac.getServiceById(parms.readInt(\"service\")))) {\n+                    return 1;\n+                } else {\n+                    return 0;\n+                }\n+            } else {\n+                if (ac.getServicesManager().planServicePropagation(\n+                        ac.getSession(),\n+                        ac.getServiceById(parms.readInt(\"service\")))) {\n+                    return 1;\n+                } else {\n+                    return 0;\n+                }\n+            }\n+        }\n+    },\n \n-\t/*#\n-\t * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n-\t * 1 - allowed / 0 - service is service is denied.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<ServiceForGUI> list of assigned services with allowed property\n-\t */\n-\tgetFacilityAssignedServicesForGUI {\n-\t\tpublic List<ServiceForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+    /*#\n+     * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n+     * 1 - allowed / 0 - service is service is denied.\n+     *\n+     * @deprecated Method was moved to ServicesManager\n+     * @param facility int Facility <code>id</code>\n+     * @return List<ServiceForGUI> list of assigned services with allowed property\n+     */\n+    getFacilityAssignedServicesForGUI {\n+        public List<ServiceForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n \n-\t\t\treturn ac.getServicesManager().getFacilityAssignedServicesForGUI(ac.getSession(), ac.getFacilityById(parms.readInt(\"id\")));\n+            return ac.getServicesManager().getFacilityAssignedServicesForGUI(ac.getSession(), ac.getFacilityById(parms.readInt(\"id\")));\n \n-\t\t}\n-\t};\n+        }\n+    };\n \n }\n",
            "diff_size": 313
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/194/GeneralServiceManagerMethod.java\nindex 79621390db0..93940637b01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/194/GeneralServiceManagerMethod.java\n@@ -5,327 +5,349 @@ import cz.metacentrum.perun.core.api.Service;\n import cz.metacentrum.perun.core.api.exceptions.PerunException;\n import cz.metacentrum.perun.core.api.exceptions.RpcException;\n import cz.metacentrum.perun.rpc.*;\n-\n import java.util.List;\n-\n import cz.metacentrum.perun.rpc.deserializer.Deserializer;\n \n+\n public enum GeneralServiceManagerMethod implements ManagerMethod {\n \n-\t/*#\n-\t * Bans service on a facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @throw ServiceAlreadyBannedException When service is already banned on facility.\n-\t */\n-\tblockServiceOnFacility {\n-\t    public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tac.getServicesManager().blockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n-\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\treturn null;\n-\t    }\n-\t},\n-\n-\t/*#\n-\t * Bans Service on a destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\t/*#\n-\t * Bans Service on a destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destinationName String Destination name (like hostnames)\n-\t * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n-\t */\n-\tblockServiceOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\tif (parms.contains(\"destination\")) {\n-\t\t\t\tac.getServicesManager().blockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),parms.readInt(\"destination\"));\n-\t\t\t} else {\n-\t\t\t\tac.getServicesManager().blockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Block all services currently assigned on this facility.\n-\t * Newly assigned services are still allowed for propagation.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tblockAllServicesOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getServicesManager().blockAllServicesOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Block all services currently assigned on this destination.\n-\t * Newly assigned services are still allowed for propagation.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\t/*#\n-\t * Block all services currently assigned on this destination.\n-\t * Newly assigned services are still allowed for propagation.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destinationName String Destination name (like hostnames)\n-\t * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n-\t */\n-\tblockAllServicesOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"destination\")) {\n-\t\t\t\tac.getServicesManager().blockAllServicesOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n-\t\t\t} else {\n-\t\t\t\tac.getServicesManager().blockAllServicesOnDestination(ac.getSession(), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of denials for a facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<Service> Services\n-\t */\n-\tgetServicesBlockedOnFacility {\n-\t\tpublic List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getServicesManager().getServicesBlockedOnFacility(ac.getSession(),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Returns list of denials for a destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destination int Destination <code>id</code>\n-\t * @return List<Service> Services\n-\t */\n-\tgetServicesBlockedOnDestination {\n-\t\tpublic List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\treturn ac.getServicesManager().getServicesBlockedOnDestination(ac.getSession(),parms.readInt(\"destination\"));\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Is this Service denied on the facility?\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the Service is denied on the facility, 0 = false - the Service is NOT denied on the facility\n-\t */\n-\tisServiceBlockedOnFacility {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getServicesManager().isServiceBlockedOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n-\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\"))))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Is this Service denied on the destination?\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t * @exampleResponse 1\n-\t * @return int 1 = true - the Service is denied on the destination, 0 = false - the Service is NOT denied on the destination\n-\t */\n-\tisServiceBlockedOnDestination {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (ac.getServicesManager().isServiceBlockedOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),parms.readInt(\"destination\")))\n-\t\t\t\treturn 1;\n-\t\t\telse return 0;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Erase all the possible denials on this facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tunblockAllServicesOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getServicesManager().unblockAllServicesOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Erase all the possible denials on this destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\t/*#\n-\t * Erase all the possible denials on this destination.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param destinationName String Destination name (like hostnames)\n-\t * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n-\t */\n-\tunblockAllServicesOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"destination\")) {\n-\t\t\t\tac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n-\t\t\t} else if (parms.contains(\"destinationName\")) {\n-\t\t\t\tif(parms.contains(\"destinationType\")) {\n-\t\t\t\t\tac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n-\t\t\t\t} else {\n-\t\t\t\t\tac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), parms.readString(\"destinationName\"));\n-\t\t\t\t}\n-\t\t\t} else {\n-\t\t\t\tthrow new RpcException(RpcException.Type.MISSING_VALUE, \"destination (id) or destinationName (text)\");\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Free the denial of the Service on this facility. If the Service was banned\n-\t * on this facility, it will be freed. In case the Service was not banned on\n-\t * this facility, nothing will happen.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t */\n-\tunblockServiceOnFacility {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tac.getServicesManager().unblockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n-\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")));\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Free the denial of the Service on this destination. If the Service was banned on\n-\t * this destination, it will be freed. In case the Service was not banned on this\n-\t * destination, nothing will happen.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destination int Destination <code>id</code>\n-\t */\n-\t/*#\n-\t * Free the denial of the Service on this destination. If the Service was banned on\n-\t * this destination, it will be freed. In case the Service was not banned on this\n-\t * destination, nothing will happen.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param destinationName String Destination name (like hostnames)\n-\t * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n-\t */\n-\tunblockServiceOnDestination {\n-\t\tpublic Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif (parms.contains(\"destination\")) {\n-\t\t\t\tac.getServicesManager().unblockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), parms.readInt(\"destination\"));\n-\t\t\t} else {\n-\t\t\t\tac.getServicesManager().unblockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\t/*#\n-\t * Forces service propagation on defined facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\tforceServicePropagation {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tif(ac.getServicesManager().forceServicePropagation(\n-\t\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t} else {\n-\t\t\t\tif(ac.getServicesManager().forceServicePropagation(\n-\t\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @param facility int Facility <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\t/*#\n-\t * Plans service propagation on defined facility.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param service int Service <code>id</code>\n-\t * @return int 1 = true if it is possible, 0 = false if not\n-\t */\n-\tplanServicePropagation {\n-\t\tpublic Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\t\t\tif(parms.contains(\"facility\")) {\n-\t\t\t\tif(ac.getServicesManager().planServicePropagation(\n-\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\tac.getFacilityById(parms.readInt(\"facility\")),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t} else {\n-\t\t\t\tif(ac.getServicesManager().planServicePropagation(\n-\t\t\t\t\t\tac.getSession(),\n-\t\t\t\t\t\tac.getServiceById(parms.readInt(\"service\")))) return 1;\n-\t\t\t\telse return 0;\n-\t\t\t}\n-\t\t}\n-\t},\n-\n-\t/*#\n-\t * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n-\t * 1 - allowed / 0 - service is service is denied.\n-\t *\n-\t * @deprecated Method was moved to ServicesManager\n-\t * @param facility int Facility <code>id</code>\n-\t * @return List<ServiceForGUI> list of assigned services with allowed property\n-\t */\n-\tgetFacilityAssignedServicesForGUI {\n-\t\tpublic List<ServiceForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n-\n-\t\t\treturn ac.getServicesManager().getFacilityAssignedServicesForGUI(ac.getSession(), ac.getFacilityById(parms.readInt(\"id\")));\n-\n-\t\t}\n-\t};\n-\n-}\n+ /*#\n+  * Bans service on a facility.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @throw ServiceAlreadyBannedException When service is already banned on facility.\n+  */\n+\n+\n+ blockServiceOnFacility {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getServicesManager().blockServiceOnFacility(ac.getSession(),\n+ac.getServiceById(parms.readInt(\"service\")),\n+ac.getFacilityById(parms.readInt(\"facility\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Bans Service on a destination.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param destination int Destination <code>id</code>\n+  */\n+ /*#\n+  * Bans Service on a destination.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param destinationName String Destination name (like hostnames)\n+  * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n+  */\n+\n+\n+ blockServiceOnDestination {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"destination\")) {\n+    ac.getServicesManager().blockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), parms.readInt(\"destination\"));\n+   } else {\n+    ac.getServicesManager().blockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Block all services currently assigned on this facility.\n+  * Newly assigned services are still allowed for propagation.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param facility int Facility <code>id</code>\n+  */\n+\n+\n+ blockAllServicesOnFacility {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getServicesManager().blockAllServicesOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Block all services currently assigned on this destination.\n+  * Newly assigned services are still allowed for propagation.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param destination int Destination <code>id</code>\n+  */\n+ /*#\n+  * Block all services currently assigned on this destination.\n+  * Newly assigned services are still allowed for propagation.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param destinationName String Destination name (like hostnames)\n+  * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n+  */\n+\n+\n+ blockAllServicesOnDestination {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"destination\")) {\n+    ac.getServicesManager().blockAllServicesOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n+   } else {\n+    ac.getServicesManager().blockAllServicesOnDestination(ac.getSession(), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of denials for a facility.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param facility int Facility <code>id</code>\n+  * @return List<Service> Services\n+  */\n+\n+\n+ getServicesBlockedOnFacility {\n+  public List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getServicesManager().getServicesBlockedOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n+  }\n+ },\n+\n+ /*#\n+  * Returns list of denials for a destination.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param destination int Destination <code>id</code>\n+  * @return List<Service> Services\n+  */\n+\n+\n+ getServicesBlockedOnDestination {\n+  public List<Service> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getServicesManager().getServicesBlockedOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n+  }\n+ },\n+\n+ /*#\n+  * Is this Service denied on the facility?\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @exampleResponse 1\n+  * @return int 1 = true - the Service is denied on the facility, 0 = false - the Service is NOT denied on the facility\n+  */\n+\n+\n+ isServiceBlockedOnFacility {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (ac.getServicesManager().isServiceBlockedOnFacility(ac.getSession(),\n+ac.getServiceById(parms.readInt(\"service\")),\n+ac.getFacilityById(parms.readInt(\"facility\")))) return 1;\n+   else return 0;\n+  }\n+ },\n+\n+ /*#\n+  * Is this Service denied on the destination?\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param destination int Destination <code>id</code>\n+  * @exampleResponse 1\n+  * @return int 1 = true - the Service is denied on the destination, 0 = false - the Service is NOT denied on the destination\n+  */\n+\n+\n+ isServiceBlockedOnDestination {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (ac.getServicesManager().isServiceBlockedOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), parms.readInt(\"destination\"))) return 1;\n+   else return 0;\n+  }\n+ },\n+\n+ /*#\n+  * Erase all the possible denials on this facility.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param facility int Facility <code>id</code>\n+  */\n+\n+\n+ unblockAllServicesOnFacility {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getServicesManager().unblockAllServicesOnFacility(ac.getSession(), ac.getFacilityById(parms.readInt(\"facility\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Erase all the possible denials on this destination.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param destination int Destination <code>id</code>\n+  */\n+ /*#\n+  * Erase all the possible denials on this destination.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param destinationName String Destination name (like hostnames)\n+  * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n+  */\n+\n+\n+ unblockAllServicesOnDestination {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"destination\")) {\n+    ac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), parms.readInt(\"destination\"));\n+   } else if (parms.contains(\"destinationName\")) {\n+    if (parms.contains(\"destinationType\")) {\n+     ac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n+    } else {\n+     ac.getServicesManager().unblockAllServicesOnDestination(ac.getSession(), parms.readString(\"destinationName\"));\n+    }\n+   } else {\n+    throw new RpcException(RpcException.Type.MISSING_VALUE, \"destination (id) or destinationName (text)\");\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Free the denial of the Service on this facility. If the Service was banned\n+  * on this facility, it will be freed. In case the Service was not banned on\n+  * this facility, nothing will happen.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  */\n+\n+\n+ unblockServiceOnFacility {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   ac.getServicesManager().unblockServiceOnFacility(ac.getSession(),\n+ac.getServiceById(parms.readInt(\"service\")),\n+ac.getFacilityById(parms.readInt(\"facility\")));\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Free the denial of the Service on this destination. If the Service was banned on\n+  * this destination, it will be freed. In case the Service was not banned on this\n+  * destination, nothing will happen.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param destination int Destination <code>id</code>\n+  */\n+ /*#\n+  * Free the denial of the Service on this destination. If the Service was banned on\n+  * this destination, it will be freed. In case the Service was not banned on this\n+  * destination, nothing will happen.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param destinationName String Destination name (like hostnames)\n+  * @param destinationType String Destination type (like host, user@host, user@host:port, email, service-specific, ...)\n+  */\n+\n+\n+ unblockServiceOnDestination {\n+  public Void call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"destination\")) {\n+    ac.getServicesManager().unblockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), parms.readInt(\"destination\"));\n+   } else {\n+    ac.getServicesManager().unblockServiceOnDestination(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")), ac.getServicesManager().getDestinationIdByName(ac.getSession(), parms.readString(\"destinationName\"), parms.readString(\"destinationType\")));\n+   }\n+\n+   return null;\n+  }\n+ },\n+\n+ /*#\n+  * Forces service propagation on defined facility.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @return int 1 = true if it is possible, 0 = false if not\n+  */\n+ /*#\n+  * Forces service propagation on defined facility.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @return int 1 = true if it is possible, 0 = false if not\n+  */\n+\n+\n+ forceServicePropagation {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"facility\")) {\n+    if (ac.getServicesManager().forceServicePropagation(ac.getSession(),\n+ac.getFacilityById(parms.readInt(\"facility\")),\n+ac.getServiceById(parms.readInt(\"service\")))) return 1;\n+    else return 0;\n+   } else {\n+    if (ac.getServicesManager().forceServicePropagation(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")))) return 1;\n+    else return 0;\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Plans service propagation on defined facility.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @param facility int Facility <code>id</code>\n+  * @return int 1 = true if it is possible, 0 = false if not\n+  */\n+ /*#\n+  * Plans service propagation on defined facility.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param service int Service <code>id</code>\n+  * @return int 1 = true if it is possible, 0 = false if not\n+  */\n+\n+\n+ planServicePropagation {\n+  public Integer call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   if (parms.contains(\"facility\")) {\n+    if (ac.getServicesManager().planServicePropagation(ac.getSession(),\n+ac.getFacilityById(parms.readInt(\"facility\")),\n+ac.getServiceById(parms.readInt(\"service\")))) return 1;\n+    else return 0;\n+   } else {\n+    if (ac.getServicesManager().planServicePropagation(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")))) return 1;\n+    else return 0;\n+   }\n+  }\n+ },\n+\n+ /*#\n+  * Return list of ServiceForGUI assigned on facility, (Service with \"allowedOnFacility\" property filled).\n+  * 1 - allowed / 0 - service is service is denied.\n+  *\n+  * @deprecated Method was moved to ServicesManager\n+  * @param facility int Facility <code>id</code>\n+  * @return List<ServiceForGUI> list of assigned services with allowed property\n+  */\n+\n+\n+ getFacilityAssignedServicesForGUI {\n+  public List<ServiceForGUI> call(ApiCaller ac, Deserializer parms) throws PerunException {\n+   return ac.getServicesManager().getFacilityAssignedServicesForGUI(ac.getSession(), ac.getFacilityById(parms.readInt(\"id\")));\n+  }\n+ };\n+}\n\\ No newline at end of file\n",
            "diff_size": 343
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/194/GeneralServiceManagerMethod.java\nindex 79621390db0..8322ac04908 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/194/GeneralServiceManagerMethod.java\n@@ -26,7 +26,7 @@ public enum GeneralServiceManagerMethod implements ManagerMethod {\n \t\t\tac.getServicesManager().blockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n \t\tac.getFacilityById(parms.readInt(\"facility\")));\n \t\treturn null;\n-\t    }\n+\t}\n \t},\n \n \t/*#\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/194/GeneralServiceManagerMethod.java\nindex 79621390db0..8322ac04908 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/194/GeneralServiceManagerMethod.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/194/GeneralServiceManagerMethod.java\n@@ -26,7 +26,7 @@ public enum GeneralServiceManagerMethod implements ManagerMethod {\n \t\t\tac.getServicesManager().blockServiceOnFacility(ac.getSession(), ac.getServiceById(parms.readInt(\"service\")),\n \t\tac.getFacilityById(parms.readInt(\"facility\")));\n \t\treturn null;\n-\t    }\n+\t}\n \t},\n \n \t/*#\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}