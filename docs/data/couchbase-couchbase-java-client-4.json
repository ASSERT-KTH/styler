{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "4",
    "information": {
        "errors": [
            {
                "line": "140",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return a {@link JsonDocument}.\n     */\n    public static JsonDocument create(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {\n        return new JsonDocument(id, expiry, content, cas, mutationToken);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/4/JsonDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/4/JsonDocument.java\nindex 3b12df35dcc..a9a1aff35c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/4/JsonDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/4/JsonDocument.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java.document;\n \n import com.couchbase.client.core.message.kv.MutationToken;\n@@ -137,7 +138,8 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n-    public static JsonDocument create(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {\n+    public static JsonDocument create(String id, int expiry, JsonObject content, long cas,\n+                                      MutationToken mutationToken) {\n         return new JsonDocument(id, expiry, content, cas, mutationToken);\n     }\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/4/JsonDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/4/JsonDocument.java\nindex 3b12df35dcc..4c21753adc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/4/JsonDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/4/JsonDocument.java\n@@ -206,4 +206,4 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n         readFromSerializedStream(stream);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/4/JsonDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/4/JsonDocument.java\nindex 3b12df35dcc..fb57c566149 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/4/JsonDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/4/JsonDocument.java\n@@ -23,7 +23,6 @@ package com.couchbase.client.java.document;\n \n import com.couchbase.client.core.message.kv.MutationToken;\n import com.couchbase.client.java.document.json.JsonObject;\n-\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -58,6 +57,8 @@ import java.io.Serializable;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n+\n+\n public class JsonDocument extends AbstractDocument<JsonObject> implements Serializable {\n \n     private static final long serialVersionUID = 2050104986260610101L;\n@@ -79,6 +80,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param content the content of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, JsonObject content) {\n         return new JsonDocument(id, 0, content, 0, null);\n     }\n@@ -91,6 +93,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, JsonObject content, long cas) {\n         return new JsonDocument(id, 0, content, cas, null);\n     }\n@@ -103,6 +106,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, int expiry, JsonObject content) {\n         return new JsonDocument(id, expiry, content, 0, null);\n     }\n@@ -120,6 +124,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, int expiry, JsonObject content, long cas) {\n         return new JsonDocument(id, expiry, content, cas, null);\n     }\n@@ -137,6 +142,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {\n         return new JsonDocument(id, expiry, content, cas, mutationToken);\n     }\n@@ -148,6 +154,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param id the per-bucket unique document id.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonDocument from(JsonDocument doc, String id) {\n         return JsonDocument.create(id, doc.expiry(), doc.content(), doc.cas(), doc.mutationToken());\n     }\n@@ -159,6 +166,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonDocument from(JsonDocument doc, JsonObject content) {\n         return JsonDocument.create(doc.id(), doc.expiry(), content, doc.cas(), doc.mutationToken());\n     }\n@@ -171,6 +179,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonDocument from(JsonDocument doc, String id, JsonObject content) {\n         return JsonDocument.create(id, doc.expiry(), content, doc.cas(), doc.mutationToken());\n     }\n@@ -182,6 +191,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonDocument from(JsonDocument doc, long cas) {\n         return JsonDocument.create(doc.id(), doc.expiry(), doc.content(), cas, doc.mutationToken());\n     }\n@@ -194,6 +204,8 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @param expiry the expiration time of the document.\n      */\n+\n+\n     private JsonDocument(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {\n         super(id, expiry, content, cas, mutationToken);\n     }\n@@ -205,5 +217,4 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n     private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n         readFromSerializedStream(stream);\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}