{
    "project_name": "ibinti-bugvm",
    "error_id": "36",
    "information": {
        "errors": [
            {
                "line": "192",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 89).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @throws IOException if an I/O error occurs.\n     *\n     * @deprecated (4.1) Use {@link org.apache.http.util.EntityUtils#consume(HttpEntity)}\n     *\n     * @see #getContent() and #writeTo(OutputStream)\n     */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/36/HttpEntity.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/36/HttpEntity.java\nindex 3e4f2664edd..b13c44b014e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/36/HttpEntity.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/36/HttpEntity.java\n@@ -64,136 +64,131 @@ import java.io.OutputStream;\n  */\n public interface HttpEntity {\n \n-    /**\n-     * Tells if the entity is capable of producing its data more than once.\n-     * A repeatable entity's getContent() and writeTo(OutputStream) methods\n-     * can be called more than once whereas a non-repeatable entity's can not.\n-     * @return true if the entity is repeatable, false otherwise.\n-     */\n-    boolean isRepeatable();\n+  /**\n+   * Tells if the entity is capable of producing its data more than once.\n+   * A repeatable entity's getContent() and writeTo(OutputStream) methods\n+   * can be called more than once whereas a non-repeatable entity's can not.\n+   *\n+   * @return true if the entity is repeatable, false otherwise.\n+   */\n+  boolean isRepeatable();\n \n-    /**\n-     * Tells about chunked encoding for this entity.\n-     * The primary purpose of this method is to indicate whether\n-     * chunked encoding should be used when the entity is sent.\n-     * For entities that are received, it can also indicate whether\n-     * the entity was received with chunked encoding.\n-     * <p>\n-     * The behavior of wrapping entities is implementation dependent,\n-     * but should respect the primary purpose.\n-     * </p>\n-     *\n-     * @return  {@code true} if chunked encoding is preferred for this\n-     *          entity, or {@code false} if it is not\n-     */\n-    boolean isChunked();\n+  /**\n+   * Tells about chunked encoding for this entity.\n+   * The primary purpose of this method is to indicate whether\n+   * chunked encoding should be used when the entity is sent.\n+   * For entities that are received, it can also indicate whether\n+   * the entity was received with chunked encoding.\n+   * <p>\n+   * The behavior of wrapping entities is implementation dependent,\n+   * but should respect the primary purpose.\n+   * </p>\n+   *\n+   * @return {@code true} if chunked encoding is preferred for this\n+   * entity, or {@code false} if it is not\n+   */\n+  boolean isChunked();\n \n-    /**\n-     * Tells the length of the content, if known.\n-     *\n-     * @return  the number of bytes of the content, or\n-     *          a negative number if unknown. If the content length is known\n-     *          but exceeds {@link java.lang.Long#MAX_VALUE Long.MAX_VALUE},\n-     *          a negative number is returned.\n-     */\n-    long getContentLength();\n+  /**\n+   * Tells the length of the content, if known.\n+   *\n+   * @return the number of bytes of the content, or\n+   * a negative number if unknown. If the content length is known\n+   * but exceeds {@link java.lang.Long#MAX_VALUE Long.MAX_VALUE},\n+   * a negative number is returned.\n+   */\n+  long getContentLength();\n \n-    /**\n-     * Obtains the Content-Type header, if known.\n-     * This is the header that should be used when sending the entity,\n-     * or the one that was received with the entity. It can include a\n-     * charset attribute.\n-     *\n-     * @return  the Content-Type header for this entity, or\n-     *          {@code null} if the content type is unknown\n-     */\n-    Header getContentType();\n+  /**\n+   * Obtains the Content-Type header, if known.\n+   * This is the header that should be used when sending the entity,\n+   * or the one that was received with the entity. It can include a\n+   * charset attribute.\n+   *\n+   * @return the Content-Type header for this entity, or\n+   * {@code null} if the content type is unknown\n+   */\n+  Header getContentType();\n \n-    /**\n-     * Obtains the Content-Encoding header, if known.\n-     * This is the header that should be used when sending the entity,\n-     * or the one that was received with the entity.\n-     * Wrapping entities that modify the content encoding should\n-     * adjust this header accordingly.\n-     *\n-     * @return  the Content-Encoding header for this entity, or\n-     *          {@code null} if the content encoding is unknown\n-     */\n-    Header getContentEncoding();\n+  /**\n+   * Obtains the Content-Encoding header, if known.\n+   * This is the header that should be used when sending the entity,\n+   * or the one that was received with the entity.\n+   * Wrapping entities that modify the content encoding should\n+   * adjust this header accordingly.\n+   *\n+   * @return the Content-Encoding header for this entity, or\n+   * {@code null} if the content encoding is unknown\n+   */\n+  Header getContentEncoding();\n \n-    /**\n-     * Returns a content stream of the entity.\n-     * {@link #isRepeatable Repeatable} entities are expected\n-     * to create a new instance of {@link InputStream} for each invocation\n-     * of this method and therefore can be consumed multiple times.\n-     * Entities that are not {@link #isRepeatable repeatable} are expected\n-     * to return the same {@link InputStream} instance and therefore\n-     * may not be consumed more than once.\n-     * <p>\n-     * IMPORTANT: Please note all entity implementations must ensure that\n-     * all allocated resources are properly deallocated after\n-     * the {@link InputStream#close()} method is invoked.\n-     *\n-     * @return content stream of the entity.\n-     *\n-     * @throws IOException if the stream could not be created\n-     * @throws UnsupportedOperationException\n-     *  if entity content cannot be represented as {@link java.io.InputStream}.\n-     *\n-     * @see #isRepeatable()\n-     */\n-    InputStream getContent() throws IOException, UnsupportedOperationException;\n+  /**\n+   * Returns a content stream of the entity.\n+   * {@link #isRepeatable Repeatable} entities are expected\n+   * to create a new instance of {@link InputStream} for each invocation\n+   * of this method and therefore can be consumed multiple times.\n+   * Entities that are not {@link #isRepeatable repeatable} are expected\n+   * to return the same {@link InputStream} instance and therefore\n+   * may not be consumed more than once.\n+   * <p>\n+   * IMPORTANT: Please note all entity implementations must ensure that\n+   * all allocated resources are properly deallocated after\n+   * the {@link InputStream#close()} method is invoked.\n+   *\n+   * @return content stream of the entity.\n+   * @throws IOException                   if the stream could not be created\n+   * @throws UnsupportedOperationException if entity content cannot be represented as {@link java.io.InputStream}.\n+   * @see #isRepeatable()\n+   */\n+  InputStream getContent() throws IOException, UnsupportedOperationException;\n \n-    /**\n-     * Writes the entity content out to the output stream.\n-     * <p>\n-     * IMPORTANT: Please note all entity implementations must ensure that\n-     * all allocated resources are properly deallocated when this method\n-     * returns.\n-     *\n-     * @param outstream the output stream to write entity content to\n-     *\n-     * @throws IOException if an I/O error occurs\n-     */\n-    void writeTo(OutputStream outstream) throws IOException;\n+  /**\n+   * Writes the entity content out to the output stream.\n+   * <p>\n+   * IMPORTANT: Please note all entity implementations must ensure that\n+   * all allocated resources are properly deallocated when this method\n+   * returns.\n+   *\n+   * @param outstream the output stream to write entity content to\n+   * @throws IOException if an I/O error occurs\n+   */\n+  void writeTo(OutputStream outstream) throws IOException;\n \n-    /**\n-     * Tells whether this entity depends on an underlying stream.\n-     * Streamed entities that read data directly from the socket should\n-     * return {@code true}. Self-contained entities should return\n-     * {@code false}. Wrapping entities should delegate this call\n-     * to the wrapped entity.\n-     *\n-     * @return  {@code true} if the entity content is streamed,\n-     *          {@code false} otherwise\n-     */\n-    boolean isStreaming(); // don't expect an exception here\n+  /**\n+   * Tells whether this entity depends on an underlying stream.\n+   * Streamed entities that read data directly from the socket should\n+   * return {@code true}. Self-contained entities should return\n+   * {@code false}. Wrapping entities should delegate this call\n+   * to the wrapped entity.\n+   *\n+   * @return {@code true} if the entity content is streamed,\n+   * {@code false} otherwise\n+   */\n+  boolean isStreaming(); // don't expect an exception here\n \n-    /**\n-     * This method is deprecated since version 4.1. Please use standard\n-     * java convention to ensure resource deallocation by calling\n-     * {@link InputStream#close()} on the input stream returned by\n-     * {@link #getContent()}\n-     * <p>\n-     * This method is called to indicate that the content of this entity\n-     * is no longer required. All entity implementations are expected to\n-     * release all allocated resources as a result of this method\n-     * invocation. Content streaming entities are also expected to\n-     * dispose of the remaining content, if any. Wrapping entities should\n-     * delegate this call to the wrapped entity.\n-     * <p>\n-     * This method is of particular importance for entities being\n-     * received from a {@link HttpConnection connection}. The entity\n-     * needs to be consumed completely in order to re-use the connection\n-     * with keep-alive.\n-     *\n-     * @throws IOException if an I/O error occurs.\n-     *\n-     * @deprecated (4.1) Use {@link org.apache.http.util.EntityUtils#consume(HttpEntity)}\n-     *\n-     * @see #getContent() and #writeTo(OutputStream)\n-     */\n-    @Deprecated\n-    void consumeContent() throws IOException;\n+  /**\n+   * This method is deprecated since version 4.1. Please use standard\n+   * java convention to ensure resource deallocation by calling\n+   * {@link InputStream#close()} on the input stream returned by\n+   * {@link #getContent()}\n+   * <p>\n+   * This method is called to indicate that the content of this entity\n+   * is no longer required. All entity implementations are expected to\n+   * release all allocated resources as a result of this method\n+   * invocation. Content streaming entities are also expected to\n+   * dispose of the remaining content, if any. Wrapping entities should\n+   * delegate this call to the wrapped entity.\n+   * <p>\n+   * This method is of particular importance for entities being\n+   * received from a {@link HttpConnection connection}. The entity\n+   * needs to be consumed completely in order to re-use the connection\n+   * with keep-alive.\n+   *\n+   * @throws IOException if an I/O error occurs.\n+   * @see #getContent() and #writeTo(OutputStream)\n+   * @deprecated (4.1) Use {@link org.apache.http.util.EntityUtils#consume(HttpEntity)}\n+   */\n+  @Deprecated\n+  void consumeContent() throws IOException;\n \n }\n",
            "diff_size": 124
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/36/HttpEntity.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/36/HttpEntity.java\nindex 3e4f2664edd..00e58e67087 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/36/HttpEntity.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/36/HttpEntity.java\n@@ -196,4 +196,4 @@ public interface HttpEntity {\n     @Deprecated\n     void consumeContent() throws IOException;\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/36/HttpEntity.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/36/HttpEntity.java\nindex 3e4f2664edd..0ef8cea78e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/36/HttpEntity.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/36/HttpEntity.java\n@@ -62,6 +62,8 @@ import java.io.OutputStream;\n  *\n  * @since 4.0\n  */\n+\n+\n public interface HttpEntity {\n \n     /**\n@@ -70,6 +72,8 @@ public interface HttpEntity {\n      * can be called more than once whereas a non-repeatable entity's can not.\n      * @return true if the entity is repeatable, false otherwise.\n      */\n+\n+\n     boolean isRepeatable();\n \n     /**\n@@ -86,6 +90,8 @@ public interface HttpEntity {\n      * @return  {@code true} if chunked encoding is preferred for this\n      *          entity, or {@code false} if it is not\n      */\n+\n+\n     boolean isChunked();\n \n     /**\n@@ -96,6 +102,8 @@ public interface HttpEntity {\n      *          but exceeds {@link java.lang.Long#MAX_VALUE Long.MAX_VALUE},\n      *          a negative number is returned.\n      */\n+\n+\n     long getContentLength();\n \n     /**\n@@ -107,6 +115,8 @@ public interface HttpEntity {\n      * @return  the Content-Type header for this entity, or\n      *          {@code null} if the content type is unknown\n      */\n+\n+\n     Header getContentType();\n \n     /**\n@@ -119,6 +129,8 @@ public interface HttpEntity {\n      * @return  the Content-Encoding header for this entity, or\n      *          {@code null} if the content encoding is unknown\n      */\n+\n+\n     Header getContentEncoding();\n \n     /**\n@@ -142,6 +154,8 @@ public interface HttpEntity {\n      *\n      * @see #isRepeatable()\n      */\n+\n+\n     InputStream getContent() throws IOException, UnsupportedOperationException;\n \n     /**\n@@ -155,6 +169,8 @@ public interface HttpEntity {\n      *\n      * @throws IOException if an I/O error occurs\n      */\n+\n+\n     void writeTo(OutputStream outstream) throws IOException;\n \n     /**\n@@ -167,6 +183,8 @@ public interface HttpEntity {\n      * @return  {@code true} if the entity content is streamed,\n      *          {@code false} otherwise\n      */\n+\n+\n     boolean isStreaming(); // don't expect an exception here\n \n     /**\n@@ -193,7 +211,8 @@ public interface HttpEntity {\n      *\n      * @see #getContent() and #writeTo(OutputStream)\n      */\n+\n+\n     @Deprecated\n     void consumeContent() throws IOException;\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "192",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}