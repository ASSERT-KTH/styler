{
    "project_name": "actiontech-txle",
    "error_id": "0",
    "information": {
        "errors": [
            {
                "line": "17",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public class AutoCompensateDeleteHandler extends AutoCompensateHandler {\n\n\tprivate static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n\n\tpublic static AutoCompensateDeleteHandler newInstance() {\n\t\tif (autoCompensateDeleteHandler == null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/0/AutoCompensateDeleteHandler.java\nindex 11f2e864429..62f0abf7802 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/0/AutoCompensateDeleteHandler.java\n@@ -14,7 +14,7 @@ import java.util.Map;\n \n public class AutoCompensateDeleteHandler extends AutoCompensateHandler {\n \n-\tprivate static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n+private static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n \n \tpublic static AutoCompensateDeleteHandler newInstance() {\n \t\tif (autoCompensateDeleteHandler == null) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/0/AutoCompensateDeleteHandler.java\nindex 11f2e864429..f79b89d7ec9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/0/AutoCompensateDeleteHandler.java\n@@ -14,27 +14,27 @@ import java.util.Map;\n \n public class AutoCompensateDeleteHandler extends AutoCompensateHandler {\n \n-\tprivate static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n-\n-\tpublic static AutoCompensateDeleteHandler newInstance() {\n-\t\tif (autoCompensateDeleteHandler == null) {\n-\t\t\tsynchronized (AutoCompensateDeleteHandler.class) {\n-\t\t\t\tif (autoCompensateDeleteHandler == null) {\n-\t\t\t\t\tautoCompensateDeleteHandler = new AutoCompensateDeleteHandler();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn autoCompensateDeleteHandler;\n-\t}\n-\n-\t@Override\n-\tpublic boolean saveAutoCompensationInfo(PreparedStatement delegate, SQLStatement sqlStatement, String executeSql, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n-\n-\t\tif (JdbcConstants.MYSQL.equals(sqlStatement.getDbType())) {\n-\t\t\treturn MySqlDeleteHandler.newInstance().saveAutoCompensationInfo(delegate, sqlStatement, executeSql, localTxId, server, standbyParams);\n-\t\t}\n-\n-\t\treturn false;\n-\t}\n+    private static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n+\n+    public static AutoCompensateDeleteHandler newInstance() {\n+        if (autoCompensateDeleteHandler == null) {\n+            synchronized (AutoCompensateDeleteHandler.class) {\n+                if (autoCompensateDeleteHandler == null) {\n+                    autoCompensateDeleteHandler = new AutoCompensateDeleteHandler();\n+                }\n+            }\n+        }\n+        return autoCompensateDeleteHandler;\n+    }\n+\n+    @Override\n+    public boolean saveAutoCompensationInfo(PreparedStatement delegate, SQLStatement sqlStatement, String executeSql, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n+\n+        if (JdbcConstants.MYSQL.equals(sqlStatement.getDbType())) {\n+            return MySqlDeleteHandler.newInstance().saveAutoCompensationInfo(delegate, sqlStatement, executeSql, localTxId, server, standbyParams);\n+        }\n+\n+        return false;\n+    }\n \n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "18",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/naturalize/0/AutoCompensateDeleteHandler.java\nindex 11f2e864429..e87a3b9b2ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/naturalize/0/AutoCompensateDeleteHandler.java\n@@ -13,28 +13,25 @@ import java.sql.SQLException;\n import java.util.Map;\n \n public class AutoCompensateDeleteHandler extends AutoCompensateHandler {\n-\n-\tprivate static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n+    private static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n \n \tpublic static AutoCompensateDeleteHandler newInstance() {\n-\t\tif (autoCompensateDeleteHandler == null) {\n-\t\t\tsynchronized (AutoCompensateDeleteHandler.class) {\n-\t\t\t\tif (autoCompensateDeleteHandler == null) {\n-\t\t\t\t\tautoCompensateDeleteHandler = new AutoCompensateDeleteHandler();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n+    if (autoCompensateDeleteHandler == null) {\n+    synchronized (AutoCompensateDeleteHandler.class) {\n+    if (autoCompensateDeleteHandler == null) {\n+    autoCompensateDeleteHandler = new AutoCompensateDeleteHandler();\n+    }\n+    }\n+    }\n \t\treturn autoCompensateDeleteHandler;\n-\t}\n+    }\n \n \t@Override\n \tpublic boolean saveAutoCompensationInfo(PreparedStatement delegate, SQLStatement sqlStatement, String executeSql, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n-\n-\t\tif (JdbcConstants.MYSQL.equals(sqlStatement.getDbType())) {\n-\t\t\treturn MySqlDeleteHandler.newInstance().saveAutoCompensationInfo(delegate, sqlStatement, executeSql, localTxId, server, standbyParams);\n-\t\t}\n+    if (JdbcConstants.MYSQL.equals(sqlStatement.getDbType())) {\n+    return MySqlDeleteHandler.newInstance().saveAutoCompensationInfo(delegate, sqlStatement, executeSql, localTxId, server, standbyParams);\n+    }\n \n \t\treturn false;\n-\t}\n-\n-}\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/0/AutoCompensateDeleteHandler.java\nindex 11f2e864429..81ee73a4930 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/0/AutoCompensateDeleteHandler.java\n@@ -7,34 +7,29 @@ package org.apache.servicecomb.saga.omega.transaction.autocompensate;\n \n import com.alibaba.druid.sql.ast.SQLStatement;\n import com.alibaba.druid.util.JdbcConstants;\n-\n import java.sql.PreparedStatement;\n import java.sql.SQLException;\n import java.util.Map;\n \n public class AutoCompensateDeleteHandler extends AutoCompensateHandler {\n-\n-\tprivate static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n-\n-\tpublic static AutoCompensateDeleteHandler newInstance() {\n-\t\tif (autoCompensateDeleteHandler == null) {\n-\t\t\tsynchronized (AutoCompensateDeleteHandler.class) {\n-\t\t\t\tif (autoCompensateDeleteHandler == null) {\n-\t\t\t\t\tautoCompensateDeleteHandler = new AutoCompensateDeleteHandler();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn autoCompensateDeleteHandler;\n-\t}\n-\n-\t@Override\n-\tpublic boolean saveAutoCompensationInfo(PreparedStatement delegate, SQLStatement sqlStatement, String executeSql, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n-\n-\t\tif (JdbcConstants.MYSQL.equals(sqlStatement.getDbType())) {\n-\t\t\treturn MySqlDeleteHandler.newInstance().saveAutoCompensationInfo(delegate, sqlStatement, executeSql, localTxId, server, standbyParams);\n-\t\t}\n-\n-\t\treturn false;\n-\t}\n-\n-}\n+    private static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n+\n+    public static AutoCompensateDeleteHandler newInstance() {\n+        if (autoCompensateDeleteHandler == null) {\n+            synchronized (AutoCompensateDeleteHandler.class) {\n+                if (autoCompensateDeleteHandler == null) {\n+                    autoCompensateDeleteHandler = new AutoCompensateDeleteHandler();\n+                }\n+            }\n+        }\n+        return autoCompensateDeleteHandler;\n+    }\n+\n+    @Override\n+    public boolean saveAutoCompensationInfo(PreparedStatement delegate, SQLStatement sqlStatement, String executeSql, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n+        if (JdbcConstants.MYSQL.equals(sqlStatement.getDbType())) {\n+            return MySqlDeleteHandler.newInstance().saveAutoCompensationInfo(delegate, sqlStatement, executeSql, localTxId, server, standbyParams);\n+        }\n+        return false;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/0/AutoCompensateDeleteHandler.java\nindex 11f2e864429..62f0abf7802 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/0/AutoCompensateDeleteHandler.java\n@@ -14,7 +14,7 @@ import java.util.Map;\n \n public class AutoCompensateDeleteHandler extends AutoCompensateHandler {\n \n-\tprivate static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n+private static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n \n \tpublic static AutoCompensateDeleteHandler newInstance() {\n \t\tif (autoCompensateDeleteHandler == null) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/0/AutoCompensateDeleteHandler.java\nindex 11f2e864429..93b698bd0c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/0/AutoCompensateDeleteHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/0/AutoCompensateDeleteHandler.java\n@@ -14,7 +14,7 @@ import java.util.Map;\n \n public class AutoCompensateDeleteHandler extends AutoCompensateHandler {\n \n-\tprivate static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n+    private static volatile AutoCompensateDeleteHandler autoCompensateDeleteHandler = null;\n \n \tpublic static AutoCompensateDeleteHandler newInstance() {\n \t\tif (autoCompensateDeleteHandler == null) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}