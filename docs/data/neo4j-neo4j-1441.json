{
    "project_name": "neo4j-neo4j",
    "error_id": "1441",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "152",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1441/DatabaseStateProcedure.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1441/DatabaseStateProcedure.java\nindex 6cda9a5c893..6f826f529de 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1441/DatabaseStateProcedure.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1441/DatabaseStateProcedure.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.dbms.procedures;\n \n import java.util.Arrays;\n@@ -44,46 +45,46 @@ import static org.neo4j.values.storable.Values.stringValue;\n public abstract class DatabaseStateProcedure extends CallableProcedure.BasicProcedure\n {\n     private static final String PROCEDURE_NAME = \"state\";\n-    private static final String[] PROCEDURE_NAMESPACE = {\"dbms\",\"database\"};\n+    private static final String[] PROCEDURE_NAMESPACE = {\"dbms\", \"database\"};\n     private static final String PARAMETER_NAME = \"databaseName\";\n     protected final DatabaseIdRepository idRepository;\n \n-    protected DatabaseStateProcedure( DatabaseIdRepository idRepository )\n+    protected DatabaseStateProcedure(DatabaseIdRepository idRepository)\n     {\n-        super( procedureSignature( new QualifiedName( PROCEDURE_NAMESPACE, PROCEDURE_NAME ) )\n-                .in( PARAMETER_NAME, Neo4jTypes.NTString )\n-                .out( \"role\", Neo4jTypes.NTString )\n-                .out( \"address\", Neo4jTypes.NTString )\n-                .out( \"status\", Neo4jTypes.NTString )\n-                .out( \"error\", Neo4jTypes.NTString )\n-                .description( \"The actual status of the database with the provided name on this neo4j instance.\" )\n-                .systemProcedure()\n-                .mode( Mode.DBMS )\n-                .build() );\n+        super(procedureSignature(new QualifiedName(PROCEDURE_NAMESPACE, PROCEDURE_NAME))\n+          .in(PARAMETER_NAME, Neo4jTypes.NTString)\n+          .out(\"role\", Neo4jTypes.NTString)\n+          .out(\"address\", Neo4jTypes.NTString)\n+          .out(\"status\", Neo4jTypes.NTString)\n+          .out(\"error\", Neo4jTypes.NTString)\n+          .description(\"The actual status of the database with the provided name on this neo4j instance.\")\n+          .systemProcedure()\n+          .mode(Mode.DBMS)\n+          .build());\n         this.idRepository = idRepository;\n     }\n \n-    protected NamedDatabaseId extractDatabaseId( AnyValue[] input ) throws ProcedureException\n+    protected NamedDatabaseId extractDatabaseId(AnyValue[] input) throws ProcedureException\n     {\n-        if ( input.length != 1 )\n+        if (input.length != 1)\n         {\n-            throw new IllegalArgumentException( \"Illegal input:\" + Arrays.toString( input ) );\n+            throw new IllegalArgumentException(\"Illegal input:\" + Arrays.toString(input));\n         }\n         var rawName = input[0];\n-        if ( !( rawName instanceof TextValue) )\n+        if (!(rawName instanceof TextValue))\n         {\n-            throw new IllegalArgumentException( format( \"Parameter '%s' value should have a string representation. Instead: %s\", PARAMETER_NAME, rawName ) );\n+            throw new IllegalArgumentException(format(\"Parameter '%s' value should have a string representation. Instead: %s\", PARAMETER_NAME, rawName));\n         }\n-        var name = new NormalizedDatabaseName( ((TextValue) rawName).stringValue() );\n-        return idRepository.getByName( name )\n-                .orElseThrow( () -> new ProcedureException( DatabaseNotFound, format( \"Unable to retrieve the status \" +\n-                        \"for database with name %s because no database with this name exists!\", name ) ) );\n+        var name = new NormalizedDatabaseName(((TextValue) rawName).stringValue());\n+        return idRepository.getByName(name)\n+          .orElseThrow(() -> new ProcedureException(DatabaseNotFound, format(\"Unable to retrieve the status \" +\n+            \"for database with name %s because no database with this name exists!\", name)));\n     }\n \n-    protected AnyValue[] resultRowFactory( OperatorState status, Optional<String> error, String role, String address )\n+    protected AnyValue[] resultRowFactory(OperatorState status, Optional<String> error, String role, String address)\n     {\n-        var formattedStatus = stringValue( status.description() );\n-        var formattedError = error.map( Values::stringValue ).orElse( EMPTY_STRING );\n-        return new AnyValue[]{stringValue( role ), stringValue( address ), formattedStatus, formattedError};\n+        var formattedStatus = stringValue(status.description());\n+        var formattedError = error.map(Values::stringValue).orElse(EMPTY_STRING);\n+        return new AnyValue[] {stringValue(role), stringValue(address), formattedStatus, formattedError};\n     }\n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}