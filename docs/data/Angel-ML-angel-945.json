{
    "project_name": "Angel-ML-angel",
    "error_id": "945",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/945/Transceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/945/Transceiver.java\nindex 760a44c2c3f..a713b970b9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/945/Transceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/945/Transceiver.java\n@@ -22,9 +22,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -107,5 +107,6 @@ public abstract class Transceiver implements Closeable, Configurable {\n     return false;\n   }\n \n-  public void close() throws IOException {}\n+  public void close() throws IOException {\n+  }\n }\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/945/Transceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/945/Transceiver.java\nindex 760a44c2c3f..7dfd2566b71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/945/Transceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/945/Transceiver.java\n@@ -108,4 +108,4 @@ public abstract class Transceiver implements Closeable, Configurable {\n   }\n \n   public void close() throws IOException {}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/945/Transceiver.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/945/Transceiver.java\nindex 760a44c2c3f..5309ea3ee8d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/945/Transceiver.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/945/Transceiver.java\n@@ -35,7 +35,6 @@\n package com.tencent.angel.ipc;\n \n import com.tencent.angel.utils.Configurable;\n-\n import java.io.Closeable;\n import java.io.IOException;\n import java.nio.ByteBuffer;\n@@ -43,7 +42,9 @@ import java.util.List;\n import java.util.concurrent.locks.ReentrantLock;\n \n /** Base transport class used by ClientCache}. */\n+\n public abstract class Transceiver implements Closeable, Configurable {\n+\n   private final ReentrantLock channelLock = new ReentrantLock();\n \n   public abstract String getRemoteName() throws IOException;\n@@ -51,6 +52,7 @@ public abstract class Transceiver implements Closeable, Configurable {\n   /**\n    * Acquires an exclusive lock on the transceiver's channel.\n    */\n+\n   public void lockChannel() {\n     channelLock.lock();\n   }\n@@ -58,6 +60,7 @@ public abstract class Transceiver implements Closeable, Configurable {\n   /**\n    * Releases the lock on the transceiver's channel if held by the calling thread.\n    */\n+\n   public void unlockChannel() {\n     if (channelLock.isHeldByCurrentThread()) {\n       channelLock.unlock();\n@@ -67,6 +70,7 @@ public abstract class Transceiver implements Closeable, Configurable {\n   /**\n    * default calls {@link #writeBuffers(java.util.List)} followed by {@link #readBuffers()}.\n    */\n+\n   public List<ByteBuffer> transceive(List<ByteBuffer> request) throws IOException {\n     lockChannel();\n     try {\n@@ -80,8 +84,8 @@ public abstract class Transceiver implements Closeable, Configurable {\n   /**\n    * messages using callbacks.\n    */\n-  public void transceive(List<ByteBuffer> request, Callback<List<ByteBuffer>> callback)\n-      throws IOException {\n+\n+  public void transceive(List<ByteBuffer> request, Callback<List<ByteBuffer>> callback) throws IOException {\n     // The default implementation works synchronously\n     try {\n       List<ByteBuffer> response = transceive(request);\n@@ -92,6 +96,7 @@ public abstract class Transceiver implements Closeable, Configurable {\n   }\n \n   /** Called by the default definition of {@link #transceive(java.util.List)}. */\n+\n   public abstract List<ByteBuffer> readBuffers() throws IOException;\n \n   public abstract void writeBuffers(List<ByteBuffer> buffers) throws IOException;\n@@ -103,9 +108,10 @@ public abstract class Transceiver implements Closeable, Configurable {\n    * one-way, then a handshake-only response is returned. Subsequent one-way messages over the\n    * connection will have no response data sent. Returns false by default.\n    */\n+\n   public boolean isConnected() {\n     return false;\n   }\n \n   public void close() throws IOException {}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}