{
    "project_name": "graphfoundation-ongdb",
    "error_id": "692",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "97",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/692/IdGeneratorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/692/IdGeneratorImpl.java\nindex 6794dc74ba5..1ade5cf4fed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/692/IdGeneratorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/692/IdGeneratorImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.id;\n \n import java.io.File;\n@@ -59,252 +60,246 @@ import org.neo4j.kernel.impl.store.id.validation.IdValidator;\n  */\n public class IdGeneratorImpl implements IdGenerator\n {\n-    /**\n-     * Invalid and reserved id value. Represents special values, f.ex. the end of a relationships/property chain.\n-     * Please use {@link IdValidator} to validate generated ids.\n-     */\n-    public static final long INTEGER_MINUS_ONE = 0xFFFFFFFFL;  // 4294967295L;\n-\n-    private final long max;\n-    private final IdContainer idContainer;\n-    private long highId;\n-    private final IdType idType;\n+  /**\n+   * Invalid and reserved id value. Represents special values, f.ex. the end of a relationships/property chain.\n+   * Please use {@link IdValidator} to validate generated ids.\n+   */\n+  public static final long INTEGER_MINUS_ONE = 0xFFFFFFFFL;  // 4294967295L;\n \n-    /**\n-     * Opens the id generator represented by <CODE>fileName</CODE>. The\n-     * <CODE>grabSize</CODE> means how many defragged ids we should keep in\n-     * memory and is also the size (x4) of the two buffers used for reading and\n-     * writing to the id generator file. The highest returned id will be read\n-     * from file and if <CODE>grabSize</CODE> number of ids exist they will be\n-     * read into memory (if less exist all defragged ids will be in memory).\n-     * <p>\n-     * If this id generator hasn't been closed properly since the previous\n-     * session (sticky) an <CODE>IOException</CODE> will be thrown. When this\n-     * happens one has to rebuild the id generator from the (node/rel/prop)\n-     * store file.\n-     *\n-     * @param file\n-     *            The file name (and path if needed) for the id generator to be\n-     *            opened\n-     * @param grabSize\n-     *            The number of defragged ids to keep in memory\n-     * @param max is the highest possible id to be returned by this id generator from\n-     * {@link #nextId()}.\n-     * @param aggressiveReuse will reuse ids during the same session, not requiring\n-     * a restart to be able reuse ids freed with {@link #freeId(long)}.\n-     * @param highId A supplier for the high id to be used if the id file is found to be empty or not properly shut down\n-     * @throws UnderlyingStorageException\n-     *             If no such file exist or if the id generator is sticky\n-     */\n-    public IdGeneratorImpl( FileSystemAbstraction fs, File file, int grabSize, long max, boolean aggressiveReuse,\n-            IdType idType, LongSupplier highId )\n-    {\n-        this.max = max;\n-        this.idType = idType;\n-        this.idContainer = new IdContainer( fs, file, grabSize, aggressiveReuse );\n+  private final long max;\n+  private final IdContainer idContainer;\n+  private long highId;\n+  private final IdType idType;\n \n-        /*\n-         * The highId supplier will be called only if the id container tells us that the information found in the\n-         * id file is not reliable (typically the file had to be created). Calling the supplier can be a potentially\n-         * expensive operation.\n-         */\n-        if ( this.idContainer.init() )\n-        {\n-            this.highId = idContainer.getInitialHighId();\n-        }\n-        else\n-        {\n-            this.highId = highId.getAsLong();\n-        }\n-    }\n+  /**\n+   * Opens the id generator represented by <CODE>fileName</CODE>. The\n+   * <CODE>grabSize</CODE> means how many defragged ids we should keep in\n+   * memory and is also the size (x4) of the two buffers used for reading and\n+   * writing to the id generator file. The highest returned id will be read\n+   * from file and if <CODE>grabSize</CODE> number of ids exist they will be\n+   * read into memory (if less exist all defragged ids will be in memory).\n+   * <p>\n+   * If this id generator hasn't been closed properly since the previous\n+   * session (sticky) an <CODE>IOException</CODE> will be thrown. When this\n+   * happens one has to rebuild the id generator from the (node/rel/prop)\n+   * store file.\n+   *\n+   * @param file            The file name (and path if needed) for the id generator to be\n+   *                        opened\n+   * @param grabSize        The number of defragged ids to keep in memory\n+   * @param max             is the highest possible id to be returned by this id generator from\n+   *                        {@link #nextId()}.\n+   * @param aggressiveReuse will reuse ids during the same session, not requiring\n+   *                        a restart to be able reuse ids freed with {@link #freeId(long)}.\n+   * @param highId          A supplier for the high id to be used if the id file is found to be empty or not properly shut down\n+   * @throws UnderlyingStorageException If no such file exist or if the id generator is sticky\n+   */\n+  public IdGeneratorImpl(FileSystemAbstraction fs, File file, int grabSize, long max, boolean aggressiveReuse,\n+                         IdType idType, LongSupplier highId)\n+  {\n+    this.max = max;\n+    this.idType = idType;\n+    this.idContainer = new IdContainer(fs, file, grabSize, aggressiveReuse);\n \n-    /**\n-     * Returns the next \"free\" id. If a defragged id exist it will be returned\n-     * else the next free id that hasn't been used yet is returned. If no id\n-     * exist the capacity is exceeded (all values <= max are taken) and a\n-     * {@link UnderlyingStorageException} will be thrown.\n-     *\n-     * @return The next free id\n-     * @throws UnderlyingStorageException\n-     *             If the capacity is exceeded\n-     * @throws IllegalStateException if this id generator has been closed\n+    /*\n+     * The highId supplier will be called only if the id container tells us that the information found in the\n+     * id file is not reliable (typically the file had to be created). Calling the supplier can be a potentially\n+     * expensive operation.\n      */\n-    @Override\n-    public synchronized long nextId()\n+    if (this.idContainer.init())\n     {\n-        assertStillOpen();\n-        long nextDefragId = idContainer.getReusableId();\n-        if ( nextDefragId != IdContainer.NO_RESULT )\n-        {\n-            return nextDefragId;\n-        }\n-\n-        if ( IdValidator.isReservedId( highId ) )\n-        {\n-            highId++;\n-        }\n-        IdValidator.assertValidId( idType, highId, max );\n-        return highId++;\n-    }\n-\n-    @Override\n-    public synchronized IdRange nextIdBatch( int size )\n+      this.highId = idContainer.getInitialHighId();\n+    } else\n     {\n-        assertStillOpen();\n-        long[] reusableIds = idContainer.getReusableIds( size );\n-        int sizeLeftForRange = size - reusableIds.length;\n-        long start = highId;\n-        setHighId( start + sizeLeftForRange );\n-        return new IdRange( reusableIds, start, sizeLeftForRange );\n+      this.highId = highId.getAsLong();\n     }\n+  }\n \n-    /**\n-     * Sets the next free \"high\" id. This method should be called when an id\n-     * generator has been rebuilt. {@code id} must not be higher than {@code max}.\n-     *\n-     * @param id The next free id returned from {@link #nextId()} if there are no existing free ids.\n-     */\n-    @Override\n-    public synchronized void setHighId( long id )\n+  /**\n+   * Returns the next \"free\" id. If a defragged id exist it will be returned\n+   * else the next free id that hasn't been used yet is returned. If no id\n+   * exist the capacity is exceeded (all values <= max are taken) and a\n+   * {@link UnderlyingStorageException} will be thrown.\n+   *\n+   * @return The next free id\n+   * @throws UnderlyingStorageException If the capacity is exceeded\n+   * @throws IllegalStateException      if this id generator has been closed\n+   */\n+  @Override\n+  public synchronized long nextId()\n+  {\n+    assertStillOpen();\n+    long nextDefragId = idContainer.getReusableId();\n+    if (nextDefragId != IdContainer.NO_RESULT)\n     {\n-        IdValidator.assertIdWithinCapacity( idType, id, max );\n-        highId = id;\n+      return nextDefragId;\n     }\n \n-    /**\n-     * Returns the next \"high\" id that will be returned if no defragged ids\n-     * exist.\n-     *\n-     * @return The next free \"high\" id\n-     */\n-    @Override\n-    public synchronized long getHighId()\n+    if (IdValidator.isReservedId(highId))\n     {\n-        return highId;\n+      highId++;\n     }\n+    IdValidator.assertValidId(idType, highId, max);\n+    return highId++;\n+  }\n \n-    @Override\n-    public synchronized long getHighestPossibleIdInUse()\n-    {\n-        return highId - 1;\n-    }\n+  @Override\n+  public synchronized IdRange nextIdBatch(int size)\n+  {\n+    assertStillOpen();\n+    long[] reusableIds = idContainer.getReusableIds(size);\n+    int sizeLeftForRange = size - reusableIds.length;\n+    long start = highId;\n+    setHighId(start + sizeLeftForRange);\n+    return new IdRange(reusableIds, start, sizeLeftForRange);\n+  }\n \n-    /**\n-     * Frees the <CODE>id</CODE> making it a defragged id that will be\n-     * returned by next id before any new id (that hasn't been used yet) is\n-     * returned.\n-     * <p>\n-     * This method will throw an <CODE>IOException</CODE> if id is negative or\n-     * if id is greater than the highest returned id. However as stated in the\n-     * class documentation above the id isn't validated to see if it really is\n-     * free.\n-     *\n-     * @param id\n-     *            The id to be made available again\n-     */\n-    @Override\n-    public synchronized void freeId( long id )\n-    {\n-        idContainer.assertStillOpen();\n+  /**\n+   * Sets the next free \"high\" id. This method should be called when an id\n+   * generator has been rebuilt. {@code id} must not be higher than {@code max}.\n+   *\n+   * @param id The next free id returned from {@link #nextId()} if there are no existing free ids.\n+   */\n+  @Override\n+  public synchronized void setHighId(long id)\n+  {\n+    IdValidator.assertIdWithinCapacity(idType, id, max);\n+    highId = id;\n+  }\n \n-        if ( IdValidator.isReservedId( id ) )\n-        {\n-            return;\n-        }\n+  /**\n+   * Returns the next \"high\" id that will be returned if no defragged ids\n+   * exist.\n+   *\n+   * @return The next free \"high\" id\n+   */\n+  @Override\n+  public synchronized long getHighId()\n+  {\n+    return highId;\n+  }\n \n-        if ( id < 0 || id >= highId )\n-        {\n-            throw new IllegalArgumentException( \"Illegal id[\" + id + \"], highId is \" + highId );\n-        }\n-        idContainer.freeId( id );\n-    }\n+  @Override\n+  public synchronized long getHighestPossibleIdInUse()\n+  {\n+    return highId - 1;\n+  }\n \n-    /**\n-     * Closes the id generator flushing defragged ids in memory to file. The\n-     * file will be truncated to the minimal size required to hold all defragged\n-     * ids and it will be marked as clean (not sticky).\n-     * <p>\n-     * An invoke to the <CODE>nextId</CODE> or <CODE>freeId</CODE> after\n-     * this method has been invoked will result in an <CODE>IOException</CODE>\n-     * since the highest returned id has been set to a negative value.\n-     */\n-    @Override\n-    public synchronized void close()\n-    {\n-        idContainer.close( highId );\n-    }\n+  /**\n+   * Frees the <CODE>id</CODE> making it a defragged id that will be\n+   * returned by next id before any new id (that hasn't been used yet) is\n+   * returned.\n+   * <p>\n+   * This method will throw an <CODE>IOException</CODE> if id is negative or\n+   * if id is greater than the highest returned id. However as stated in the\n+   * class documentation above the id isn't validated to see if it really is\n+   * free.\n+   *\n+   * @param id The id to be made available again\n+   */\n+  @Override\n+  public synchronized void freeId(long id)\n+  {\n+    idContainer.assertStillOpen();\n \n-    /**\n-     * Creates a new id generator.\n-     *\n-     * @param fileName The name of the id generator\n-     * @param throwIfFileExists if {@code true} will cause an {@link UnderlyingStorageException} to be thrown if\n-     * the file already exists. if {@code false} will truncate the file writing the header in it.\n-     */\n-    public static void createGenerator( FileSystemAbstraction fs, File fileName, long highId,\n-                                        boolean throwIfFileExists )\n+    if (IdValidator.isReservedId(id))\n     {\n-        IdContainer.createEmptyIdFile( fs, fileName, highId, throwIfFileExists );\n+      return;\n     }\n \n-    /**\n-     * Read the high-id count from the given id-file.\n-     *\n-     * Note that this method should only be used when the file is not currently in use by an IdGenerator, since this\n-     * method does not take any in-memory state into account.\n-     *\n-     * @param fileSystem The file system to use for accessing the given file.\n-     * @param file The path to the id-file from which to read the high-id.\n-     * @return The high-id from the given file.\n-     * @throws IOException If anything goes wrong when accessing the file, for instance if the file does not exist.\n-     */\n-    public static long readHighId( FileSystemAbstraction fileSystem, File file ) throws IOException\n+    if (id < 0 || id >= highId)\n     {\n-        return IdContainer.readHighId( fileSystem, file );\n+      throw new IllegalArgumentException(\"Illegal id[\" + id + \"], highId is \" + highId);\n     }\n+    idContainer.freeId(id);\n+  }\n \n-    /**\n-     * Read the defragmented id count from the given id-file.\n-     *\n-     * Note that this method should only be used when the file is not currently in use by an IdGenerator, since this\n-     * method does not take any in-memory state into account.\n-     *\n-     * @param fileSystem The file system to use for accessing the given file.\n-     * @param file The path to the id-file from which to read the defrag count.\n-     * @return The number of defragmented ids in the id-file.\n-     * @throws IOException If anything goes wrong when accessing the file, for instance if the file does not exist.\n-     */\n-    public static long readDefragCount( FileSystemAbstraction fileSystem, File file ) throws IOException\n-    {\n-        return IdContainer.readDefragCount( fileSystem, file );\n-    }\n+  /**\n+   * Closes the id generator flushing defragged ids in memory to file. The\n+   * file will be truncated to the minimal size required to hold all defragged\n+   * ids and it will be marked as clean (not sticky).\n+   * <p>\n+   * An invoke to the <CODE>nextId</CODE> or <CODE>freeId</CODE> after\n+   * this method has been invoked will result in an <CODE>IOException</CODE>\n+   * since the highest returned id has been set to a negative value.\n+   */\n+  @Override\n+  public synchronized void close()\n+  {\n+    idContainer.close(highId);\n+  }\n \n-    @Override\n-    public synchronized long getNumberOfIdsInUse()\n-    {\n-        return highId - getDefragCount();\n-    }\n+  /**\n+   * Creates a new id generator.\n+   *\n+   * @param fileName          The name of the id generator\n+   * @param throwIfFileExists if {@code true} will cause an {@link UnderlyingStorageException} to be thrown if\n+   *                          the file already exists. if {@code false} will truncate the file writing the header in it.\n+   */\n+  public static void createGenerator(FileSystemAbstraction fs, File fileName, long highId,\n+                                     boolean throwIfFileExists)\n+  {\n+    IdContainer.createEmptyIdFile(fs, fileName, highId, throwIfFileExists);\n+  }\n \n-    @Override\n-    public synchronized long getDefragCount()\n-    {\n-        return idContainer.getFreeIdCount();\n-    }\n+  /**\n+   * Read the high-id count from the given id-file.\n+   * <p>\n+   * Note that this method should only be used when the file is not currently in use by an IdGenerator, since this\n+   * method does not take any in-memory state into account.\n+   *\n+   * @param fileSystem The file system to use for accessing the given file.\n+   * @param file       The path to the id-file from which to read the high-id.\n+   * @return The high-id from the given file.\n+   * @throws IOException If anything goes wrong when accessing the file, for instance if the file does not exist.\n+   */\n+  public static long readHighId(FileSystemAbstraction fileSystem, File file) throws IOException\n+  {\n+    return IdContainer.readHighId(fileSystem, file);\n+  }\n \n-    @Override\n-    public synchronized void delete()\n-    {\n-        idContainer.delete();\n-    }\n+  /**\n+   * Read the defragmented id count from the given id-file.\n+   * <p>\n+   * Note that this method should only be used when the file is not currently in use by an IdGenerator, since this\n+   * method does not take any in-memory state into account.\n+   *\n+   * @param fileSystem The file system to use for accessing the given file.\n+   * @param file       The path to the id-file from which to read the defrag count.\n+   * @return The number of defragmented ids in the id-file.\n+   * @throws IOException If anything goes wrong when accessing the file, for instance if the file does not exist.\n+   */\n+  public static long readDefragCount(FileSystemAbstraction fileSystem, File file) throws IOException\n+  {\n+    return IdContainer.readDefragCount(fileSystem, file);\n+  }\n \n-    private void assertStillOpen()\n-    {\n-        idContainer.assertStillOpen();\n-    }\n+  @Override\n+  public synchronized long getNumberOfIdsInUse()\n+  {\n+    return highId - getDefragCount();\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return \"IdGeneratorImpl \" + hashCode() + \" [max=\" + max + \", idContainer=\" + idContainer + \"]\";\n-    }\n+  @Override\n+  public synchronized long getDefragCount()\n+  {\n+    return idContainer.getFreeIdCount();\n+  }\n+\n+  @Override\n+  public synchronized void delete()\n+  {\n+    idContainer.delete();\n+  }\n+\n+  private void assertStillOpen()\n+  {\n+    idContainer.assertStillOpen();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"IdGeneratorImpl \" + hashCode() + \" [max=\" + max + \", idContainer=\" + idContainer + \"]\";\n+  }\n }\n",
            "diff_size": 307
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/692/IdGeneratorImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/692/IdGeneratorImpl.java\nindex 6794dc74ba5..9fe48f447bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/692/IdGeneratorImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/692/IdGeneratorImpl.java\n@@ -63,7 +63,8 @@ public class IdGeneratorImpl implements IdGenerator\n      * Invalid and reserved id value. Represents special values, f.ex. the end of a relationships/property chain.\n      * Please use {@link IdValidator} to validate generated ids.\n      */\n-    public static final long INTEGER_MINUS_ONE = 0xFFFFFFFFL;  // 4294967295L;\n+    public static final long INTEGER_MINUS_ONE = 0xFFFFFFFFL;\n+    // 4294967295L;\n \n     private final long max;\n     private final IdContainer idContainer;\n@@ -154,7 +155,8 @@ public class IdGeneratorImpl implements IdGenerator\n         long[] reusableIds = idContainer.getReusableIds( size );\n         int sizeLeftForRange = size - reusableIds.length;\n         long start = highId;\n-        setHighId( start + sizeLeftForRange );\n+\n+setHighId( start + sizeLeftForRange );\n         return new IdRange( reusableIds, start, sizeLeftForRange );\n     }\n \n@@ -206,8 +208,7 @@ public class IdGeneratorImpl implements IdGenerator\n     public synchronized void freeId( long id )\n     {\n         idContainer.assertStillOpen();\n-\n-        if ( IdValidator.isReservedId( id ) )\n+if ( IdValidator.isReservedId( id ) )\n         {\n             return;\n         }\n@@ -241,9 +242,8 @@ public class IdGeneratorImpl implements IdGenerator\n      * @param throwIfFileExists if {@code true} will cause an {@link UnderlyingStorageException} to be thrown if\n      * the file already exists. if {@code false} will truncate the file writing the header in it.\n      */\n-    public static void createGenerator( FileSystemAbstraction fs, File fileName, long highId,\n-                                        boolean throwIfFileExists )\n-    {\n+    public static void createGenerator( FileSystemAbstraction fs, File fileName, long highId, boolean throwIfFileExists )\n+{\n         IdContainer.createEmptyIdFile( fs, fileName, highId, throwIfFileExists );\n     }\n \n@@ -307,4 +307,4 @@ public class IdGeneratorImpl implements IdGenerator\n     {\n         return \"IdGeneratorImpl \" + hashCode() + \" [max=\" + max + \", idContainer=\" + idContainer + \"]\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}