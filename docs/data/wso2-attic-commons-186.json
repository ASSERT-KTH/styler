{
    "project_name": "wso2-attic-commons",
    "error_id": "186",
    "information": {
        "errors": [
            {
                "line": "215",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 124).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            }\n        }\n        System.out.println(\"End of Assign role level write and delete permissoin to \"+\" \"+maxResourceCount+\" \"+\"resources\");\n    }\n\n    /* update existing resource to increase version numbers */",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/186/DataPopulateOlderRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/186/DataPopulateOlderRegistry.java\nindex 19610a5e7b7..3701cb3b5b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/186/DataPopulateOlderRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/186/DataPopulateOlderRegistry.java\n@@ -212,8 +212,8 @@ public class DataPopulateOlderRegistry extends TestCase {\n                 }\n             }\n         }\n-        System.out.println(\"End of Assign role level write and delete permissoin to \"+\" \"+maxResourceCount+\" \"+\"resources\");\n-    }\n+    System.out.println(\"End of Assign role level write and delete permissoin to \"+\" \"+maxResourceCount+\" \"+\"resources\");\n+}\n \n     /* update existing resource to increase version numbers */\n     public void testpopulateResourceVersioning() throws RegistryException{\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/186/DataPopulateOlderRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/186/DataPopulateOlderRegistry.java\nindex 19610a5e7b7..2d5d7e6fc11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/186/DataPopulateOlderRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/186/DataPopulateOlderRegistry.java\n@@ -18,544 +18,546 @@ import java.util.Map;\n \n public class DataPopulateOlderRegistry extends TestCase {\n \n-    private static Registry registry = null;\n-    private static RegistryRealm realm = null;\n-    int maxResourceCount = 2000;\n-    int maxUserCount = 100;\n-    int maxRoleCount = 10;\n-    int maxFileToputCollections = 100;\n-    int maxFileToputResource = 100;\n-\n-    DataSource dataSource = null;\n-\n-    public DataPopulateOlderRegistry(String text) {\n-      super(text);\n+  private static Registry registry = null;\n+  private static RegistryRealm realm = null;\n+  int maxResourceCount = 2000;\n+  int maxUserCount = 100;\n+  int maxRoleCount = 10;\n+  int maxFileToputCollections = 100;\n+  int maxFileToputResource = 100;\n+\n+  DataSource dataSource = null;\n+\n+  public DataPopulateOlderRegistry(String text) {\n+    super(text);\n+  }\n+\n+\n+  public void setUp() {\n+    try {\n+      dataSource = new RegistryDataSource(\"jdbc:derby://localhost:1527/derbyDB\",\n+        \"org.apache.derby.jdbc.ClientDriver\", \"reg\", \"reg\");\n+      //dataSource = new RegistryDataSource(\"jdbc:hsqldb:mem:aname\",\"org.hsqldb.jdbcDriver\",\"\",\"sa\");\n+      realm = new RegistryRealm(dataSource);\n+      registry = new JDBCRegistry(dataSource, realm);\n+\n+    } catch (Exception e) {\n+      fail(\"Failed to initialize the registry.\");\n+      e.printStackTrace();\n     }\n+  }\n \n \n-    public void setUp() {\n-        try {\n-            dataSource = new RegistryDataSource(\"jdbc:derby://localhost:1527/derbyDB\",\n-                    \"org.apache.derby.jdbc.ClientDriver\",\"reg\",\"reg\");\n-            //dataSource = new RegistryDataSource(\"jdbc:hsqldb:mem:aname\",\"org.hsqldb.jdbcDriver\",\"\",\"sa\");\n-            realm = new RegistryRealm(dataSource);\n-            registry = new JDBCRegistry(dataSource, realm);\n+  public void testpopulateResources() throws RegistryException {\n \n-        }catch (Exception e) {\n-            fail(\"Failed to initialize the registry.\");\n-            e.printStackTrace();\n-       }\n-    }\n-\n-\n-    public void testpopulateResources() throws RegistryException {\n-\n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n-\n-        for (int i=1;i<=maxResourceCount;i++){\n-            String path_1= \"/c\"+i;\n-            String path_2= path_1 + \"/b\" +i;\n-            String path= path_2+\"/r1.txt\";\n-\n-            try {\n-                Resource r1 = new Resource();\n-                r1.setDescription(\"This is a file to be renamed\");\n-                String fileContent = \"This is file the content\";\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n \n-                for (int filec=1;filec<=5;filec++){\n-                    fileContent += fileContent;\n-                }\n+    for (int i = 1; i <= maxResourceCount; i++) {\n+      String path_1 = \"/c\" + i;\n+      String path_2 = path_1 + \"/b\" + i;\n+      String path = path_2 + \"/r1.txt\";\n \n-                byte[] r1content = (fileContent).getBytes();\n-                r1.setContent(r1content);\n-                r1.setMediaType(\"txt\");\n+      try {\n+        Resource r1 = new Resource();\n+        r1.setDescription(\"This is a file to be renamed\");\n+        String fileContent = \"This is file the content\";\n \n-                Comment c1 = new Comment();\n-                c1.setResourcePath(path);\n-                c1.setText(\"This is a test comment1\");\n-\n-                Comment c2 = new Comment();\n-                c2.setResourcePath(path);\n-                c2.setText(\"This is a test comment2\");\n-\n-                r1.setProperty(\"key1\", \"value1\");\n-                r1.setProperty(\"key2\", \"value2\");\n-                r1.setProperty(\"key3\", \"value3\");\n-                r1.setProperty(\"key4\", \"value4\");\n-\n-                adminRegistry.put(path,r1);\n-                adminRegistry.addComment(path,c1);\n-                adminRegistry.addComment(path,c2);\n-                adminRegistry.applyTag(path, \"tag1\");\n-                adminRegistry.applyTag(path, \"tag2\");\n-                adminRegistry.applyTag(path, \"tag3\");\n-                adminRegistry.rateResource(path, 4);\n-\n-            }catch (RegistryException e) {\n-                e.printStackTrace();\n-            }\n+        for (int filec = 1; filec <= 5; filec++) {\n+          fileContent += fileContent;\n         }\n-        System.out.println(\"End of creating\"+\" \"+maxResourceCount+\" Resources\");\n-    }\n-    /*\n-    public void testAddDependency() throws RegistryException {\n-\n-        for (int i=1;i<=maxResourceCount;i++){\n-            String path_1= \"/c\"+i;\n-            String path_2= path_1 + \"/b\" +i;\n-            String path= path_2+\"/r1.txt\";\n-\n-            if ((i+1)<maxResourceCount){\n-                        String path_dependent_1= \"/c\"+(i+1);\n-                        String path_dependent_2 = path_dependent_1 + \"/b\" +(i+1);\n-                        String path_dependent_3 = path_dependent_2 +\"/r1.txt\";\n-                        registry.addAssociation(Association.DEPENDENENT,path_dependent_3,path);\n \n-            }\n-        }\n-        System.out.println(\"End of Adding Dependencies to \"+\" \"+maxResourceCount+ \" Resources\");\n+        byte[] r1content = (fileContent).getBytes();\n+        r1.setContent(r1content);\n+        r1.setMediaType(\"txt\");\n+\n+        Comment c1 = new Comment();\n+        c1.setResourcePath(path);\n+        c1.setText(\"This is a test comment1\");\n+\n+        Comment c2 = new Comment();\n+        c2.setResourcePath(path);\n+        c2.setText(\"This is a test comment2\");\n+\n+        r1.setProperty(\"key1\", \"value1\");\n+        r1.setProperty(\"key2\", \"value2\");\n+        r1.setProperty(\"key3\", \"value3\");\n+        r1.setProperty(\"key4\", \"value4\");\n+\n+        adminRegistry.put(path, r1);\n+        adminRegistry.addComment(path, c1);\n+        adminRegistry.addComment(path, c2);\n+        adminRegistry.applyTag(path, \"tag1\");\n+        adminRegistry.applyTag(path, \"tag2\");\n+        adminRegistry.applyTag(path, \"tag3\");\n+        adminRegistry.rateResource(path, 4);\n+\n+      } catch (RegistryException e) {\n+        e.printStackTrace();\n+      }\n+    }\n+    System.out.println(\"End of creating\" + \" \" + maxResourceCount + \" Resources\");\n+  }\n+\n+  /*\n+  public void testAddDependency() throws RegistryException {\n+\n+      for (int i=1;i<=maxResourceCount;i++){\n+          String path_1= \"/c\"+i;\n+          String path_2= path_1 + \"/b\" +i;\n+          String path= path_2+\"/r1.txt\";\n+\n+          if ((i+1)<maxResourceCount){\n+                      String path_dependent_1= \"/c\"+(i+1);\n+                      String path_dependent_2 = path_dependent_1 + \"/b\" +(i+1);\n+                      String path_dependent_3 = path_dependent_2 +\"/r1.txt\";\n+                      registry.addAssociation(Association.DEPENDENENT,path_dependent_3,path);\n+\n+          }\n+      }\n+      System.out.println(\"End of Adding Dependencies to \"+\" \"+maxResourceCount+ \" Resources\");\n+  }\n+  */\n+  public void testpopulateUserBasedAuthorization() throws RegistryException {\n+\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n+    Realm adminRealm = adminRegistry.getUserRealm();\n+\n+    String user;\n+    String newRoleName = \"registryTeam\";\n+\n+    /*add registry-team role*/\n+    try {\n+      adminRealm.getUserStoreAdmin().addRole(newRoleName);\n+    } catch (UserManagerException e) {\n+      e.printStackTrace();\n     }\n-    */\n-    public void testpopulateUserBasedAuthorization() throws RegistryException {\n-\n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n-        Realm adminRealm = adminRegistry.getUserRealm();\n-\n-        String user;\n-        String newRoleName = \"registryTeam\";\n-\n-        /*add registry-team role*/\n-        try{\n-            adminRealm.getUserStoreAdmin().addRole(newRoleName);\n-        }catch (UserManagerException e) {\n-            e.printStackTrace();\n-        }\n-\n-        /*create users and assing to a role*/\n-        for (int i=1; i<=maxUserCount;i++){\n-            user= \"user\" +i;\n-\n-            try {\n-                adminRealm.getUserStoreAdmin().addUser(user, \"psw\");\n-                Map currentProperties = adminRealm.getUserStoreAdmin().getUserProperties(user);\n-                currentProperties.put(\"friendlyName\", \"friendlyName\");\n-                adminRealm.getUserStoreAdmin().setUserProperties(user, currentProperties);\n-                adminRealm.getUserStoreAdmin().addUserToRole(user,newRoleName);\n-\n-            }catch (UserManagerException e) {\n-               e.printStackTrace();\n-            }\n-        }\n \n-        System.out.println(\"End of Adding\"+\" \"+maxUserCount+\" users to the role\"+\" \"+newRoleName);\n+    /*create users and assing to a role*/\n+    for (int i = 1; i <= maxUserCount; i++) {\n+      user = \"user\" + i;\n \n-        /*creating more roles*/\n-        for (int i=1; i<=maxRoleCount;i++){\n-            String role= \"role\" +i;\n-            try {\n-                adminRealm.getUserStoreAdmin().addRole(role);\n-            }catch (UserManagerException e) {\n-               e.printStackTrace();\n-            }\n-         }\n-        System.out.println(\"End of Adding\"+\" \"+maxRoleCount+\" \"+\"roles\");\n+      try {\n+        adminRealm.getUserStoreAdmin().addUser(user, \"psw\");\n+        Map currentProperties = adminRealm.getUserStoreAdmin().getUserProperties(user);\n+        currentProperties.put(\"friendlyName\", \"friendlyName\");\n+        adminRealm.getUserStoreAdmin().setUserProperties(user, currentProperties);\n+        adminRealm.getUserStoreAdmin().addUserToRole(user, newRoleName);\n \n+      } catch (UserManagerException e) {\n+        e.printStackTrace();\n+      }\n     }\n \n-    public void testAssignPermissionToResources() throws RegistryException{\n-\n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n-        Realm adminRealm = adminRegistry.getUserRealm();\n-        String user;\n-\n-        /*assing PUT and DELETE permission to resources for each user*/\n-        for (int i=1;i<=maxUserCount;i++){\n-            String resource_1= \"/c\"+i;\n-            String resource_2= resource_1 + \"/b\" +i;\n-            String resource_path= resource_2+\"/r1.txt\";\n-            user= \"user\" +i;\n+    System.out.println(\"End of Adding\" + \" \" + maxUserCount + \" users to the role\" + \" \" + newRoleName);\n \n-            try{\n+    /*creating more roles*/\n+    for (int i = 1; i <= maxRoleCount; i++) {\n+      String role = \"role\" + i;\n+      try {\n+        adminRealm.getUserStoreAdmin().addRole(role);\n+      } catch (UserManagerException e) {\n+        e.printStackTrace();\n+      }\n+    }\n+    System.out.println(\"End of Adding\" + \" \" + maxRoleCount + \" \" + \"roles\");\n+\n+  }\n+\n+  public void testAssignPermissionToResources() throws RegistryException {\n+\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n+    Realm adminRealm = adminRegistry.getUserRealm();\n+    String user;\n+\n+    /*assing PUT and DELETE permission to resources for each user*/\n+    for (int i = 1; i <= maxUserCount; i++) {\n+      String resource_1 = \"/c\" + i;\n+      String resource_2 = resource_1 + \"/b\" + i;\n+      String resource_path = resource_2 + \"/r1.txt\";\n+      user = \"user\" + i;\n+\n+      try {\n+        adminRealm.getAccessControlAdmin()\n+          .authorizeUser(user, resource_path, ActionConstants.PUT);\n+        adminRealm.getAccessControlAdmin()\n+          .authorizeUser(user, resource_path, ActionConstants.DELETE);\n+      } catch (UserManagerException e) {\n+        e.printStackTrace();\n+      }\n+    }\n+    System.out.println(\"End of Assign User level write and delete permissoin to \" + \" \" + maxUserCount + \" \" + \"users\");\n+    /*assing DELETE permission to resources for each role*/\n+    for (int i = 1; i <= maxResourceCount; i++) {\n+      for (int j = 1; j <= maxRoleCount; j++) {\n+        if ((i == j) || (i % maxRoleCount == j) || (i % maxRoleCount == 0)) {\n+          String role = \"role\" + j;\n+          String resource_1 = \"/c\" + i;\n+          String resource_2 = resource_1 + \"/b\" + i;\n+          String resource_path = resource_2 + \"/r1.txt\";\n+\n+          try {\n             adminRealm.getAccessControlAdmin()\n-                    .authorizeUser(user, resource_path, ActionConstants.PUT);\n+              .authorizeRole(role, resource_path, ActionConstants.PUT);\n             adminRealm.getAccessControlAdmin()\n-                    .authorizeUser(user, resource_path, ActionConstants.DELETE);\n-            }catch (UserManagerException e) {\n-               e.printStackTrace();\n-            }\n-        }\n-        System.out.println(\"End of Assign User level write and delete permissoin to \"+\" \"+maxUserCount+\" \"+\"users\");\n-        /*assing DELETE permission to resources for each role*/\n-        for (int i=1;i<=maxResourceCount;i++){\n-            for (int j=1;j<=maxRoleCount;j++){\n-                if ((i==j)||(i%maxRoleCount==j)||(i%maxRoleCount==0)){\n-                    String role = \"role\" +j;\n-                    String resource_1= \"/c\"+i;\n-                    String resource_2= resource_1 + \"/b\" +i;\n-                    String resource_path= resource_2+\"/r1.txt\";\n-\n-                    try{\n-                    adminRealm.getAccessControlAdmin()\n-                            .authorizeRole(role,resource_path,ActionConstants.PUT);\n-                    adminRealm.getAccessControlAdmin()\n-                            .authorizeRole(role,resource_path,ActionConstants.DELETE);\n-                    }catch (UserManagerException e) {\n-                       e.printStackTrace();\n-                    }\n-                    if (j==10||(i%maxRoleCount==0)){\n-                        break;\n-                    }\n-\n-                }\n-            }\n+              .authorizeRole(role, resource_path, ActionConstants.DELETE);\n+          } catch (UserManagerException e) {\n+            e.printStackTrace();\n+          }\n+          if (j == 10 || (i % maxRoleCount == 0)) {\n+            break;\n+          }\n+\n         }\n-        System.out.println(\"End of Assign role level write and delete permissoin to \"+\" \"+maxResourceCount+\" \"+\"resources\");\n+      }\n     }\n-\n-    /* update existing resource to increase version numbers */\n-    public void testpopulateResourceVersioning() throws RegistryException{\n-\n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n-\n-        for (int i=1;i<=maxResourceCount;i++){\n-            String path_1= \"/c\"+i;\n-            String path_2= path_1 + \"/b\" +i;\n-            String path= path_2+\"/r1.txt\";\n-            try {\n-                Resource r1 = new Resource();\n-                r1.setDescription(\"This is a file to be renamed\");\n-                String fileContent = \"This is file the content updated\";\n-\n-                r1.setProperty(\"key1\", \"value1\");\n-                r1.setProperty(\"key2\", \"value2\");\n-                r1.setProperty(\"key3\", \"value3\");\n-                r1.setProperty(\"key4\", \"value4\");\n-\n-                for (int filec=0;filec<=5;filec++){\n-                    fileContent += fileContent;\n-                }\n-                byte[] r1content = (fileContent).getBytes();\n-                r1.setContent(r1content);\n-                r1.setMediaType(\"txt\");\n-                adminRegistry.put(path,r1);\n-\n-            }catch (RegistryException e) {\n-                e.printStackTrace();\n-            }\n+    System.out\n+      .println(\"End of Assign role level write and delete permissoin to \" + \" \" + maxResourceCount + \" \" + \"resources\");\n+  }\n+\n+  /* update existing resource to increase version numbers */\n+  public void testpopulateResourceVersioning() throws RegistryException {\n+\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n+\n+    for (int i = 1; i <= maxResourceCount; i++) {\n+      String path_1 = \"/c\" + i;\n+      String path_2 = path_1 + \"/b\" + i;\n+      String path = path_2 + \"/r1.txt\";\n+      try {\n+        Resource r1 = new Resource();\n+        r1.setDescription(\"This is a file to be renamed\");\n+        String fileContent = \"This is file the content updated\";\n+\n+        r1.setProperty(\"key1\", \"value1\");\n+        r1.setProperty(\"key2\", \"value2\");\n+        r1.setProperty(\"key3\", \"value3\");\n+        r1.setProperty(\"key4\", \"value4\");\n+\n+        for (int filec = 0; filec <= 5; filec++) {\n+          fileContent += fileContent;\n         }\n-        System.out.println(\"End of creating 2nd version of \"+\" \"+maxResourceCount+\" \"+\"resources\");\n+        byte[] r1content = (fileContent).getBytes();\n+        r1.setContent(r1content);\n+        r1.setMediaType(\"txt\");\n+        adminRegistry.put(path, r1);\n+\n+      } catch (RegistryException e) {\n+        e.printStackTrace();\n+      }\n+    }\n+    System.out.println(\"End of creating 2nd version of \" + \" \" + maxResourceCount + \" \" + \"resources\");\n+  }\n+\n+  public void testgetresourcetime() throws RegistryException {\n+\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(\"user50\", \"psw\", registry, realm);\n+\n+    String path = \"/c50/b50/r1.txt\";\n+    long totaltime = 0;\n+    long numberOfTimes = 10000;\n+\n+    for (int i = 1; i <= numberOfTimes; i++) {\n+      try {\n+        long startTime = System.currentTimeMillis();\n+        adminRegistry.get(path);\n+        long stopTime = System.currentTimeMillis();\n+        long runTime = stopTime - startTime;\n+        totaltime += runTime;\n+        //System.out.println(\"Run time: \" + runTime);\n+\n+      } catch (RegistryException e) {\n+        fail(\"Couldn't get content from path\" + path);\n+      }\n     }\n \n-    public void testgetresourcetime() throws RegistryException{\n+    System.out.println(\"Average Resource get time: \" + totaltime / numberOfTimes + \" ms\");\n+  }\n \n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(\"user50\", \"psw\", registry, realm);\n+  public void testgetCollectiontime() throws RegistryException {\n \n-        String path = \"/c50/b50/r1.txt\";\n-        long totaltime = 0;\n-        long numberOfTimes = 10000;\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n \n-        for (int i=1;i<=numberOfTimes;i++){\n-            try {\n-                  long startTime = System.currentTimeMillis();\n-                  adminRegistry.get(path);\n-                  long stopTime = System.currentTimeMillis();\n-                  long runTime = stopTime - startTime;\n-                  totaltime += runTime;\n-                  //System.out.println(\"Run time: \" + runTime);\n+    Resource r1_actual = new Resource();\n+    r1_actual.setDirectory(true);\n+    String path = \"/c50/b50\";\n+    long totaltime = 0;\n+    long numberOfTimes = 10000;\n \n-            } catch (RegistryException e) {\n-                fail(\"Couldn't get content from path\" + path);\n-            }\n-        }\n+    for (int i = 1; i <= numberOfTimes; i++) {\n+      try {\n+        long startTime = System.currentTimeMillis();\n+        adminRegistry.get(path);\n+        long stopTime = System.currentTimeMillis();\n+        long runTime = stopTime - startTime;\n+        totaltime += runTime;\n+        //System.out.println(\"Run time: \" + runTime);\n \n-        System.out.println(\"Average Resource get time: \" + totaltime/numberOfTimes+ \" ms\");\n+      } catch (RegistryException e) {\n+        fail(\"Couldn't get content from path\" + path);\n+      }\n     }\n \n-    public void testgetCollectiontime() throws RegistryException{\n-\n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n-\n-        Resource r1_actual = new Resource();\n-        r1_actual.setDirectory(true);\n-        String path = \"/c50/b50\";\n-        long totaltime = 0;\n-        long numberOfTimes = 10000;\n-\n-        for (int i=1;i<=numberOfTimes;i++){\n-            try {\n-                  long startTime = System.currentTimeMillis();\n-                  adminRegistry.get(path);\n-                  long stopTime = System.currentTimeMillis();\n-                  long runTime = stopTime - startTime;\n-                  totaltime += runTime;\n-                  //System.out.println(\"Run time: \" + runTime);\n-\n-            } catch (RegistryException e) {\n-                fail(\"Couldn't get content from path\" + path);\n-            }\n-        }\n+    System.out.println(\"Average Collection get time: \" + totaltime / numberOfTimes + \" ms\");\n+  }\n \n-        System.out.println(\"Average Collection get time: \" + totaltime/numberOfTimes+ \" ms\");\n-    }\n+  public void testputresourcetime() throws RegistryException {\n+\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n \n-    public void testputresourcetime() throws RegistryException{\n-\n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n-\n-        long totaltime = 0;\n-        for (int i=1;i<=maxFileToputResource;i++){\n-            String path_1= \"/d\"+i;\n-            String path_2= path_1 + \"/b\" +i;\n-            String path= path_2+\"/r1.txt\";\n-\n-            try {\n-                Resource r1 = new Resource();\n-                r1.setDescription(\"This is new file description\");\n-                String fileContent = \"This is file the content\";\n-\n-                for (int filec=0;filec<=10;filec++){\n-                    fileContent += fileContent;\n-                }\n-\n-                byte[] r1content = (fileContent).getBytes();\n-                r1.setContent(r1content);\n-                r1.setMediaType(\"txt\");\n-\n-                Comment c1 = new Comment();\n-                c1.setResourcePath(path);\n-                c1.setText(\"This is a test comment1\");\n-\n-                Comment c2 = new Comment();\n-                c2.setResourcePath(path);\n-                c2.setText(\"This is a test comment2\");\n-\n-                r1.setProperty(\"key1\", \"value1\");\n-                r1.setProperty(\"key2\", \"value2\");\n-                r1.setProperty(\"key3\", \"value3\");\n-                r1.setProperty(\"key4\", \"value4\");\n-\n-                long startTime = System.currentTimeMillis();\n-                adminRegistry.put(path,r1);\n-                long stopTime = System.currentTimeMillis();\n-                long runTime = stopTime - startTime;\n-                totaltime += runTime;\n-\n-                adminRegistry.addComment(path,c1);\n-                adminRegistry.addComment(path,c2);\n-                adminRegistry.applyTag(path, \"tag1\");\n-                adminRegistry.applyTag(path, \"tag2\");\n-                adminRegistry.applyTag(path, \"tag3\");\n-                adminRegistry.rateResource(path, 4);\n-\n-            }catch (RegistryException e) {\n-                e.printStackTrace();\n-            }\n+    long totaltime = 0;\n+    for (int i = 1; i <= maxFileToputResource; i++) {\n+      String path_1 = \"/d\" + i;\n+      String path_2 = path_1 + \"/b\" + i;\n+      String path = path_2 + \"/r1.txt\";\n+\n+      try {\n+        Resource r1 = new Resource();\n+        r1.setDescription(\"This is new file description\");\n+        String fileContent = \"This is file the content\";\n+\n+        for (int filec = 0; filec <= 10; filec++) {\n+          fileContent += fileContent;\n         }\n-        System.out.println(\"Average Resource put time: \" + totaltime/maxFileToputResource+ \" ms\");\n+\n+        byte[] r1content = (fileContent).getBytes();\n+        r1.setContent(r1content);\n+        r1.setMediaType(\"txt\");\n+\n+        Comment c1 = new Comment();\n+        c1.setResourcePath(path);\n+        c1.setText(\"This is a test comment1\");\n+\n+        Comment c2 = new Comment();\n+        c2.setResourcePath(path);\n+        c2.setText(\"This is a test comment2\");\n+\n+        r1.setProperty(\"key1\", \"value1\");\n+        r1.setProperty(\"key2\", \"value2\");\n+        r1.setProperty(\"key3\", \"value3\");\n+        r1.setProperty(\"key4\", \"value4\");\n+\n+        long startTime = System.currentTimeMillis();\n+        adminRegistry.put(path, r1);\n+        long stopTime = System.currentTimeMillis();\n+        long runTime = stopTime - startTime;\n+        totaltime += runTime;\n+\n+        adminRegistry.addComment(path, c1);\n+        adminRegistry.addComment(path, c2);\n+        adminRegistry.applyTag(path, \"tag1\");\n+        adminRegistry.applyTag(path, \"tag2\");\n+        adminRegistry.applyTag(path, \"tag3\");\n+        adminRegistry.rateResource(path, 4);\n+\n+      } catch (RegistryException e) {\n+        e.printStackTrace();\n+      }\n     }\n+    System.out.println(\"Average Resource put time: \" + totaltime / maxFileToputResource + \" ms\");\n+  }\n \n-        public void testputcollectiontime() throws RegistryException{\n+  public void testputcollectiontime() throws RegistryException {\n \n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n \n \n-        long totaltime = 0;\n-        for (int i=1;i<=maxFileToputCollections;i++){\n-            String path_1= \"/dd\"+i;\n-            String path_2= path_1 + \"/bb\" +i;\n+    long totaltime = 0;\n+    for (int i = 1; i <= maxFileToputCollections; i++) {\n+      String path_1 = \"/dd\" + i;\n+      String path_2 = path_1 + \"/bb\" + i;\n \n \n-            try {\n-                Resource r1 = new Resource();\n-                r1.setDirectory(true);\n-                r1.setDescription(\"This is new collection description\");\n+      try {\n+        Resource r1 = new Resource();\n+        r1.setDirectory(true);\n+        r1.setDescription(\"This is new collection description\");\n \n-                Comment c1 = new Comment();\n-                c1.setResourcePath(path_2);\n-                c1.setText(\"This is a test comment1\");\n+        Comment c1 = new Comment();\n+        c1.setResourcePath(path_2);\n+        c1.setText(\"This is a test comment1\");\n \n-                Comment c2 = new Comment();\n-                c2.setResourcePath(path_2);\n-                c2.setText(\"This is a test comment2\");\n+        Comment c2 = new Comment();\n+        c2.setResourcePath(path_2);\n+        c2.setText(\"This is a test comment2\");\n \n-                r1.setProperty(\"key1\", \"value1\");\n-                r1.setProperty(\"key2\", \"value2\");\n-                r1.setProperty(\"key3\", \"value3\");\n-                r1.setProperty(\"key4\", \"value4\");\n+        r1.setProperty(\"key1\", \"value1\");\n+        r1.setProperty(\"key2\", \"value2\");\n+        r1.setProperty(\"key3\", \"value3\");\n+        r1.setProperty(\"key4\", \"value4\");\n \n-                long startTime = System.currentTimeMillis();\n-                adminRegistry.put(path_2,r1);\n-                long stopTime = System.currentTimeMillis();\n-                long runTime = stopTime - startTime;\n-                totaltime += runTime;\n+        long startTime = System.currentTimeMillis();\n+        adminRegistry.put(path_2, r1);\n+        long stopTime = System.currentTimeMillis();\n+        long runTime = stopTime - startTime;\n+        totaltime += runTime;\n \n-                adminRegistry.addComment(path_2,c1);\n-                adminRegistry.addComment(path_2,c2);\n-                adminRegistry.applyTag(path_2, \"tag1\");\n-                adminRegistry.applyTag(path_2, \"tag2\");\n-                adminRegistry.applyTag(path_2, \"tag3\");\n-                adminRegistry.rateResource(path_2, 4);\n+        adminRegistry.addComment(path_2, c1);\n+        adminRegistry.addComment(path_2, c2);\n+        adminRegistry.applyTag(path_2, \"tag1\");\n+        adminRegistry.applyTag(path_2, \"tag2\");\n+        adminRegistry.applyTag(path_2, \"tag3\");\n+        adminRegistry.rateResource(path_2, 4);\n \n-            }catch (RegistryException e) {\n-                e.printStackTrace();\n-            }\n-        }\n-        System.out.println(\"Average Collection put time: \" + totaltime/maxFileToputCollections+ \" ms\");\n+      } catch (RegistryException e) {\n+        e.printStackTrace();\n+      }\n     }\n-\n-    public void testrenameresourcetime() throws RegistryException{\n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n-\n-        long totaltime = 0;\n-        for (int i=1;i<=maxFileToputResource;i++){\n-            String path_1= \"/d\"+i;\n-            String path_2= path_1 + \"/b\" +i;\n-            String path= path_2+\"/r1.txt\";\n-            String new_path_1= \"/R\"+i;\n-            String new_path_2= new_path_1 + \"/A\" +i;\n-            String new_path= new_path_2+\"/r2.txt\";\n-\n-            try {\n-                long startTime = System.currentTimeMillis();\n-                adminRegistry.rename(path,new_path);\n-                long stopTime = System.currentTimeMillis();\n-                long runTime = stopTime - startTime;\n-                totaltime += runTime;\n-                //System.out.println(runTime);\n-\n-            }catch (RegistryException e) {\n-                        e.printStackTrace();\n-            }\n-        }\n-        System.out.println(\"Average Time for resource rename: \" + totaltime/maxFileToputResource+ \" ms\");\n+    System.out.println(\"Average Collection put time: \" + totaltime / maxFileToputCollections + \" ms\");\n+  }\n+\n+  public void testrenameresourcetime() throws RegistryException {\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n+\n+    long totaltime = 0;\n+    for (int i = 1; i <= maxFileToputResource; i++) {\n+      String path_1 = \"/d\" + i;\n+      String path_2 = path_1 + \"/b\" + i;\n+      String path = path_2 + \"/r1.txt\";\n+      String new_path_1 = \"/R\" + i;\n+      String new_path_2 = new_path_1 + \"/A\" + i;\n+      String new_path = new_path_2 + \"/r2.txt\";\n+\n+      try {\n+        long startTime = System.currentTimeMillis();\n+        adminRegistry.rename(path, new_path);\n+        long stopTime = System.currentTimeMillis();\n+        long runTime = stopTime - startTime;\n+        totaltime += runTime;\n+        //System.out.println(runTime);\n+\n+      } catch (RegistryException e) {\n+        e.printStackTrace();\n+      }\n     }\n-\n-    public void testrenamecollectiontime() throws RegistryException{\n-       SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n-\n-        long totaltime = 0;\n-        for (int i=1;i<=maxFileToputCollections;i++){\n-            System.out.println(\"This is a test\");\n-            String path_1= \"/dd\"+i;\n-            String path_2= path_1 + \"/bb\" +i;\n-            String new_path_1= \"/gg\"+i;\n-            String new_path_2= new_path_1 + \"/kk\" +i;\n-\n-            try {\n-                long startTime = System.currentTimeMillis();\n-                adminRegistry.rename(path_2,new_path_2);\n-                long stopTime = System.currentTimeMillis();\n-                long runTime = stopTime - startTime;\n-                totaltime += runTime;\n-                //System.out.println(runTime);\n-            }catch (RegistryException e) {\n-                e.printStackTrace();\n-            }\n-        }\n-        System.out.println(\"Average time for collection rename: \" + totaltime/maxFileToputCollections+ \" ms\");\n+    System.out.println(\"Average Time for resource rename: \" + totaltime / maxFileToputResource + \" ms\");\n+  }\n+\n+  public void testrenamecollectiontime() throws RegistryException {\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n+\n+    long totaltime = 0;\n+    for (int i = 1; i <= maxFileToputCollections; i++) {\n+      System.out.println(\"This is a test\");\n+      String path_1 = \"/dd\" + i;\n+      String path_2 = path_1 + \"/bb\" + i;\n+      String new_path_1 = \"/gg\" + i;\n+      String new_path_2 = new_path_1 + \"/kk\" + i;\n+\n+      try {\n+        long startTime = System.currentTimeMillis();\n+        adminRegistry.rename(path_2, new_path_2);\n+        long stopTime = System.currentTimeMillis();\n+        long runTime = stopTime - startTime;\n+        totaltime += runTime;\n+        //System.out.println(runTime);\n+      } catch (RegistryException e) {\n+        e.printStackTrace();\n+      }\n     }\n-\n-    public void testdeleteresourcetime() throws RegistryException{\n-\n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n-\n-        long totaltime = 0;\n-        for (int i=1;i<=maxFileToputResource;i++){\n-            String path_1= \"/c\"+i;\n-            String path_2= path_1 + \"/b\" +i;\n-            String path= path_2+\"/r1.txt\";\n-\n-            try {\n-                long startTime = System.currentTimeMillis();\n-                adminRegistry.delete(path);\n-                long stopTime = System.currentTimeMillis();\n-                long runTime = stopTime - startTime;\n-                totaltime += runTime;\n-                //System.out.println(\"Run time: \" + runTime);\n-\n-            }catch (RegistryException e) {\n-                e.printStackTrace();\n-            }\n-        }\n-        System.out.println(\"Average Resource delete time: \" + totaltime/maxFileToputResource+ \" ms\");\n+    System.out.println(\"Average time for collection rename: \" + totaltime / maxFileToputCollections + \" ms\");\n+  }\n+\n+  public void testdeleteresourcetime() throws RegistryException {\n+\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n+\n+    long totaltime = 0;\n+    for (int i = 1; i <= maxFileToputResource; i++) {\n+      String path_1 = \"/c\" + i;\n+      String path_2 = path_1 + \"/b\" + i;\n+      String path = path_2 + \"/r1.txt\";\n+\n+      try {\n+        long startTime = System.currentTimeMillis();\n+        adminRegistry.delete(path);\n+        long stopTime = System.currentTimeMillis();\n+        long runTime = stopTime - startTime;\n+        totaltime += runTime;\n+        //System.out.println(\"Run time: \" + runTime);\n+\n+      } catch (RegistryException e) {\n+        e.printStackTrace();\n+      }\n     }\n+    System.out.println(\"Average Resource delete time: \" + totaltime / maxFileToputResource + \" ms\");\n+  }\n \n-    public void testdeletecollectiontime() throws RegistryException{\n+  public void testdeletecollectiontime() throws RegistryException {\n \n-        SecureRegistry adminRegistry =\n-                new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n+    SecureRegistry adminRegistry =\n+      new SecureRegistry(RegistryConstants.ADMIN_USER, \"admin\", registry, realm);\n \n \n-        long totaltime = 0;\n-        for (int i=1;i<=maxFileToputCollections;i++){\n-            String path_1= \"/dd\"+i;\n-            String path_2= path_1 + \"/bb\" +i;\n+    long totaltime = 0;\n+    for (int i = 1; i <= maxFileToputCollections; i++) {\n+      String path_1 = \"/dd\" + i;\n+      String path_2 = path_1 + \"/bb\" + i;\n \n \n-            try {\n-                Resource r1 = new Resource();\n-                r1.setDirectory(true);\n-                r1.setDescription(\"This is new collection description\");\n+      try {\n+        Resource r1 = new Resource();\n+        r1.setDirectory(true);\n+        r1.setDescription(\"This is new collection description\");\n \n-                long startTime = System.currentTimeMillis();\n-                adminRegistry.delete(path_2);\n-                long stopTime = System.currentTimeMillis();\n-                long runTime = stopTime - startTime;\n-                totaltime += runTime;\n-                //System.out.println(\"Run time: \" + runTime);\n+        long startTime = System.currentTimeMillis();\n+        adminRegistry.delete(path_2);\n+        long stopTime = System.currentTimeMillis();\n+        long runTime = stopTime - startTime;\n+        totaltime += runTime;\n+        //System.out.println(\"Run time: \" + runTime);\n \n-            }catch (RegistryException e) {\n-                e.printStackTrace();\n-            }\n-        }\n-        System.out.println(\"Average Collection delete time: \" + totaltime/maxFileToputCollections+ \" ms\");\n+      } catch (RegistryException e) {\n+        e.printStackTrace();\n+      }\n     }\n+    System.out.println(\"Average Collection delete time: \" + totaltime / maxFileToputCollections + \" ms\");\n+  }\n \n-    public void testdatabaseStatistics() throws RegistryException{\n+  public void testdatabaseStatistics() throws RegistryException {\n \n-         try{\n-            Connection con = dataSource.getConnection();\n-            con.setAutoCommit(false);\n+    try {\n+      Connection con = dataSource.getConnection();\n+      con.setAutoCommit(false);\n \n-            String[] tableArray= {\"REG.VERSIONS\",\"REG.ARTIFACTS\",\"REG.COMMENTS\",\n-                    \"REG.DEPENDENCY\",\"REG.LOGS\",\"REG.PROPERTIES\",\n-                    \"REG.RATINGS\",\"REG.TAGS\",\"REG.UM_PERMISSIONS\",\"REG.UM_ROLES\",\n-                    \"REG.UM_ROLE_ATTRIBUTES\",\"REG.UM_ROLE_PERMISSIONS\",\"REG.UM_USERS\",\n-                    \"REG.UM_USER_ATTRIBUTES\",\"REG.UM_USER_PERMISSIONS\",\"REG.UM_USER_ROLES\"\n-                    ,\"REG.CHILDREN\"};\n+      String[] tableArray = {\"REG.VERSIONS\", \"REG.ARTIFACTS\", \"REG.COMMENTS\",\n+        \"REG.DEPENDENCY\", \"REG.LOGS\", \"REG.PROPERTIES\",\n+        \"REG.RATINGS\", \"REG.TAGS\", \"REG.UM_PERMISSIONS\", \"REG.UM_ROLES\",\n+        \"REG.UM_ROLE_ATTRIBUTES\", \"REG.UM_ROLE_PERMISSIONS\", \"REG.UM_USERS\",\n+        \"REG.UM_USER_ATTRIBUTES\", \"REG.UM_USER_PERMISSIONS\", \"REG.UM_USER_ROLES\"\n+        , \"REG.CHILDREN\"};\n \n-             System.out.println(\"Row Count of each Registry Table\"+'\\n');\n+      System.out.println(\"Row Count of each Registry Table\" + '\\n');\n \n-             for (int i=0;i<tableArray.length;i++){\n-                 String query =  \"SELECT COUNT(*) as RowCount FROM\"+\" \"+tableArray[i];\n-                 PreparedStatement pstmt = con.prepareStatement(query);\n-                 ResultSet rs = pstmt.executeQuery();\n+      for (int i = 0; i < tableArray.length; i++) {\n+        String query = \"SELECT COUNT(*) as RowCount FROM\" + \" \" + tableArray[i];\n+        PreparedStatement pstmt = con.prepareStatement(query);\n+        ResultSet rs = pstmt.executeQuery();\n \n-                while (rs.next()) {\n-                    int rowcount= rs.getInt(\"RowCount\");\n-                    System.out.println(\"Row count\"+\" \"+tableArray[i]+\": \"+rowcount);\n-                }\n+        while (rs.next()) {\n+          int rowcount = rs.getInt(\"RowCount\");\n+          System.out.println(\"Row count\" + \" \" + tableArray[i] + \": \" + rowcount);\n+        }\n \n-                 rs.close();\n-                 pstmt.close();\n+        rs.close();\n+        pstmt.close();\n \n-             }\n-             con.close();\n+      }\n+      con.close();\n \n-             }catch (SQLException e){\n-                e.printStackTrace();\n-         }\n+    } catch (SQLException e) {\n+      e.printStackTrace();\n     }\n+  }\n }\n \n",
            "diff_size": 681
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/186/DataPopulateOlderRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/186/DataPopulateOlderRegistry.java\nindex 19610a5e7b7..3701cb3b5b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/186/DataPopulateOlderRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/186/DataPopulateOlderRegistry.java\n@@ -212,8 +212,8 @@ public class DataPopulateOlderRegistry extends TestCase {\n                 }\n             }\n         }\n-        System.out.println(\"End of Assign role level write and delete permissoin to \"+\" \"+maxResourceCount+\" \"+\"resources\");\n-    }\n+    System.out.println(\"End of Assign role level write and delete permissoin to \"+\" \"+maxResourceCount+\" \"+\"resources\");\n+}\n \n     /* update existing resource to increase version numbers */\n     public void testpopulateResourceVersioning() throws RegistryException{\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/186/DataPopulateOlderRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/186/DataPopulateOlderRegistry.java\nindex 19610a5e7b7..ad368fb763d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/186/DataPopulateOlderRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/186/DataPopulateOlderRegistry.java\n@@ -212,7 +212,8 @@ public class DataPopulateOlderRegistry extends TestCase {\n                 }\n             }\n         }\n-        System.out.println(\"End of Assign role level write and delete permissoin to \"+\" \"+maxResourceCount+\" \"+\"resources\");\n+        System.out.println(\"End of Assign role level write and delete permissoin to \"+\n+                \" \"+maxResourceCount+\" \"+\"resources\");\n     }\n \n     /* update existing resource to increase version numbers */\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}