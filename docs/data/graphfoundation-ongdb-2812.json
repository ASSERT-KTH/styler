{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2812",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2812/DiagnosticsExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2812/DiagnosticsExtractor.java\nindex 50de4407fbf..96e81fd4b24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2812/DiagnosticsExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2812/DiagnosticsExtractor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.info;\n \n import org.neo4j.logging.Logger;\n@@ -25,43 +26,41 @@ import org.neo4j.logging.Logger;\n  * An object that can extract diagnostics information from a source of a\n  * specific type.\n  *\n- * @author Tobias Lindaaker <tobias.lindaaker@neotechnology.com>\n- *\n  * @param <T> the type of the source to extract diagnostics information from.\n+ * @author Tobias Lindaaker <tobias.lindaaker@neotechnology.com>\n  */\n public interface DiagnosticsExtractor<T>\n {\n+  /**\n+   * A {@link DiagnosticsExtractor} capable of\n+   * {@link DiagnosticsProvider#acceptDiagnosticsVisitor(Object) accepting\n+   * visitors}.\n+   *\n+   * @param <T> the type of the source to extract diagnostics information\n+   *            from.\n+   * @author Tobias Lindaaker <tobias.lindaaker@neotechnology.com>\n+   */\n+  interface VisitableDiagnostics<T> extends DiagnosticsExtractor<T>\n+  {\n     /**\n-     * A {@link DiagnosticsExtractor} capable of\n-     * {@link DiagnosticsProvider#acceptDiagnosticsVisitor(Object) accepting\n-     * visitors}.\n+     * Accept a visitor that may or may not be capable of visiting this\n+     * object.\n      *\n-     * @author Tobias Lindaaker <tobias.lindaaker@neotechnology.com>\n-     *\n-     * @param <T> the type of the source to extract diagnostics information\n-     *            from.\n+     * @param source  the source to get diagnostics information from.\n+     * @param visitor the visitor visiting the diagnostics information.\n+     * @see DiagnosticsProvider#acceptDiagnosticsVisitor(Object)\n      */\n-    interface VisitableDiagnostics<T> extends DiagnosticsExtractor<T>\n-    {\n-        /**\n-         * Accept a visitor that may or may not be capable of visiting this\n-         * object.\n-         *\n-         * @see DiagnosticsProvider#acceptDiagnosticsVisitor(Object)\n-         * @param source the source to get diagnostics information from.\n-         * @param visitor the visitor visiting the diagnostics information.\n-         */\n-        void dispatchDiagnosticsVisitor( T source, Object visitor );\n-    }\n+    void dispatchDiagnosticsVisitor(T source, Object visitor);\n+  }\n \n-    /**\n-     * Dump the diagnostic information of the specified source for the specified\n-     * {@link DiagnosticsPhase phase} to the provided {@link Logger logger}.\n-     *\n-     * @see DiagnosticsProvider#dump(DiagnosticsPhase, Logger)\n-     * @param source the source to get diagnostics information from.\n-     * @param phase the {@link DiagnosticsPhase phase} to dump information for.\n-     * @param logger the {@link Logger logger} to dump information to.\n-     */\n-    void dumpDiagnostics( T source, DiagnosticsPhase phase, Logger logger );\n+  /**\n+   * Dump the diagnostic information of the specified source for the specified\n+   * {@link DiagnosticsPhase phase} to the provided {@link Logger logger}.\n+   *\n+   * @param source the source to get diagnostics information from.\n+   * @param phase  the {@link DiagnosticsPhase phase} to dump information for.\n+   * @param logger the {@link Logger logger} to dump information to.\n+   * @see DiagnosticsProvider#dump(DiagnosticsPhase, Logger)\n+   */\n+  void dumpDiagnostics(T source, DiagnosticsPhase phase, Logger logger);\n }\n",
            "diff_size": 44
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2812/DiagnosticsExtractor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2812/DiagnosticsExtractor.java\nindex 50de4407fbf..14be6d650ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2812/DiagnosticsExtractor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2812/DiagnosticsExtractor.java\n@@ -64,4 +64,4 @@ public interface DiagnosticsExtractor<T>\n      * @param logger the {@link Logger logger} to dump information to.\n      */\n     void dumpDiagnostics( T source, DiagnosticsPhase phase, Logger logger );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}