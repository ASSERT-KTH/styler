{
    "project_name": "codefollower-H2-Research",
    "error_id": "313",
    "information": {
        "errors": [
            {
                "line": "78",
                "column": "45",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "            ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n\n            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n            session.getDatabase().removeSchemaObject(session, view);\n\n            // remove dependent table expressions",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/313/DropView.java\nindex 49ff161a80c..0028db1f2f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/313/DropView.java\n@@ -75,8 +75,9 @@ public class DropView extends SchemaCommand {\n             TableView tableView = (TableView) view;\n             ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n \n-            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n-            session.getDatabase().removeSchemaObject(session, view);\n+            view.lock(session, true, true);\n+            //\u4ec0\u4e48\u90fd\u6ca1\u505a\n+             session.getDatabase().removeSchemaObject(session, view);\n \n             // remove dependent table expressions\n             for (Table childTable: copyOfDependencies) {\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "80",
                    "column": "39",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/313/DropView.java\nindex 49ff161a80c..47bc6a9f4b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/313/DropView.java\n@@ -3,9 +3,11 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import java.util.ArrayList;\n+\n import org.h2.api.ErrorCode;\n import org.h2.command.CommandInterface;\n import org.h2.constraint.ConstraintActionType;\n@@ -24,78 +26,78 @@ import org.h2.table.TableView;\n  */\n public class DropView extends SchemaCommand {\n \n-    private String viewName;\n-    private boolean ifExists;\n-    private ConstraintActionType dropAction;\n+  private String viewName;\n+  private boolean ifExists;\n+  private ConstraintActionType dropAction;\n \n-    public DropView(Session session, Schema schema) {\n-        super(session, schema);\n-        dropAction = session.getDatabase().getSettings().dropRestrict ?\n-                ConstraintActionType.RESTRICT :\n-                ConstraintActionType.CASCADE;\n-    }\n+  public DropView(Session session, Schema schema) {\n+    super(session, schema);\n+    dropAction = session.getDatabase().getSettings().dropRestrict ?\n+        ConstraintActionType.RESTRICT :\n+        ConstraintActionType.CASCADE;\n+  }\n \n-    public void setIfExists(boolean b) {\n-        ifExists = b;\n-    }\n+  public void setIfExists(boolean b) {\n+    ifExists = b;\n+  }\n \n-    public void setDropAction(ConstraintActionType dropAction) {\n-        this.dropAction = dropAction;\n-    }\n+  public void setDropAction(ConstraintActionType dropAction) {\n+    this.dropAction = dropAction;\n+  }\n \n-    public void setViewName(String viewName) {\n-        this.viewName = viewName;\n-    }\n+  public void setViewName(String viewName) {\n+    this.viewName = viewName;\n+  }\n+\n+  @Override\n+  public int update() {\n+    session.commit(true);\n+    Table view = getSchema().findTableOrView(session, viewName);\n+    if (view == null) {\n+      if (!ifExists) {\n+        throw DbException.get(ErrorCode.VIEW_NOT_FOUND_1, viewName);\n+      }\n+    } else {\n+      if (TableType.VIEW != view.getTableType()) {\n+        throw DbException.get(ErrorCode.VIEW_NOT_FOUND_1, viewName);\n+      }\n+      session.getUser().checkRight(view, Right.ALL);\n \n-    @Override\n-    public int update() {\n-        session.commit(true);\n-        Table view = getSchema().findTableOrView(session, viewName);\n-        if (view == null) {\n-            if (!ifExists) {\n-                throw DbException.get(ErrorCode.VIEW_NOT_FOUND_1, viewName);\n-            }\n-        } else {\n-            if (TableType.VIEW != view.getTableType()) {\n-                throw DbException.get(ErrorCode.VIEW_NOT_FOUND_1, viewName);\n-            }\n-            session.getUser().checkRight(view, Right.ALL);\n-\n-            if (dropAction == ConstraintActionType.RESTRICT) {\n-                for (DbObject child : view.getChildren()) {\n-                    if (child instanceof TableView) {\n-                        throw DbException.get(ErrorCode.CANNOT_DROP_2, viewName, child.getName());\n-                    }\n-                }\n-            }\n-\n-            // TODO: Where is the ConstraintReferential.CASCADE style drop processing ? It's\n-            // supported from imported keys - but not for dependent db objects\n-\n-            TableView tableView = (TableView) view;\n-            ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n-\n-            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n-            session.getDatabase().removeSchemaObject(session, view);\n-\n-            // remove dependent table expressions\n-            for (Table childTable: copyOfDependencies) {\n-                if (TableType.VIEW == childTable.getTableType()) {\n-                    TableView childTableView = (TableView) childTable;\n-                    if (childTableView.isTableExpression() && childTableView.getName() != null) {\n-                        session.getDatabase().removeSchemaObject(session, childTableView);\n-                    }\n-                }\n-            }\n-            // make sure its all unlocked\n-            session.getDatabase().unlockMeta(session);\n+      if (dropAction == ConstraintActionType.RESTRICT) {\n+        for (DbObject child : view.getChildren()) {\n+          if (child instanceof TableView) {\n+            throw DbException.get(ErrorCode.CANNOT_DROP_2, viewName, child.getName());\n+          }\n         }\n-        return 0;\n-    }\n+      }\n+\n+      // TODO: Where is the ConstraintReferential.CASCADE style drop processing ? It's\n+      // supported from imported keys - but not for dependent db objects\n+\n+      TableView tableView = (TableView) view;\n+      ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n \n-    @Override\n-    public int getType() {\n-        return CommandInterface.DROP_VIEW;\n+      view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n+      session.getDatabase().removeSchemaObject(session, view);\n+\n+      // remove dependent table expressions\n+      for (Table childTable : copyOfDependencies) {\n+        if (TableType.VIEW == childTable.getTableType()) {\n+          TableView childTableView = (TableView) childTable;\n+          if (childTableView.isTableExpression() && childTableView.getName() != null) {\n+            session.getDatabase().removeSchemaObject(session, childTableView);\n+          }\n+        }\n+      }\n+      // make sure its all unlocked\n+      session.getDatabase().unlockMeta(session);\n     }\n+    return 0;\n+  }\n+\n+  @Override\n+  public int getType() {\n+    return CommandInterface.DROP_VIEW;\n+  }\n \n }\n",
            "diff_size": 104
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/313/DropView.java\nindex 49ff161a80c..a9132867e3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/313/DropView.java\n@@ -75,11 +75,12 @@ public class DropView extends SchemaCommand {\n             TableView tableView = (TableView) view;\n             ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n \n-            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n+            view.lock(session, true, true);\n+//\u4ec0\u4e48\u90fd\u6ca1\u505a\n             session.getDatabase().removeSchemaObject(session, view);\n \n             // remove dependent table expressions\n-            for (Table childTable: copyOfDependencies) {\n+            for (Table childTable : copyOfDependencies) {\n                 if (TableType.VIEW == childTable.getTableType()) {\n                     TableView childTableView = (TableView) childTable;\n                     if (childTableView.isTableExpression() && childTableView.getName() != null) {\n@@ -98,4 +99,4 @@ public class DropView extends SchemaCommand {\n         return CommandInterface.DROP_VIEW;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "78",
                    "column": "45",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/313/DropView.java\nindex 49ff161a80c..3bb35462855 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/313/DropView.java\n@@ -22,6 +22,8 @@ import org.h2.table.TableView;\n  * This class represents the statement\n  * DROP VIEW\n  */\n+\n+\n public class DropView extends SchemaCommand {\n \n     private String viewName;\n@@ -30,19 +32,20 @@ public class DropView extends SchemaCommand {\n \n     public DropView(Session session, Schema schema) {\n         super(session, schema);\n-        dropAction = session.getDatabase().getSettings().dropRestrict ?\n-                ConstraintActionType.RESTRICT :\n-                ConstraintActionType.CASCADE;\n+        dropAction = session.getDatabase().getSettings().dropRestrict ? ConstraintActionType.RESTRICT : ConstraintActionType.CASCADE;\n     }\n \n+\n     public void setIfExists(boolean b) {\n         ifExists = b;\n     }\n \n+\n     public void setDropAction(ConstraintActionType dropAction) {\n         this.dropAction = dropAction;\n     }\n \n+\n     public void setViewName(String viewName) {\n         this.viewName = viewName;\n     }\n@@ -60,7 +63,6 @@ public class DropView extends SchemaCommand {\n                 throw DbException.get(ErrorCode.VIEW_NOT_FOUND_1, viewName);\n             }\n             session.getUser().checkRight(view, Right.ALL);\n-\n             if (dropAction == ConstraintActionType.RESTRICT) {\n                 for (DbObject child : view.getChildren()) {\n                     if (child instanceof TableView) {\n@@ -71,15 +73,13 @@ public class DropView extends SchemaCommand {\n \n             // TODO: Where is the ConstraintReferential.CASCADE style drop processing ? It's\n             // supported from imported keys - but not for dependent db objects\n-\n             TableView tableView = (TableView) view;\n-            ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n-\n+            ArrayList<Table> copyOfDependencies = new ArrayList< >(tableView.getTables());\n             view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n             session.getDatabase().removeSchemaObject(session, view);\n \n             // remove dependent table expressions\n-            for (Table childTable: copyOfDependencies) {\n+            for (Table childTable : copyOfDependencies) {\n                 if (TableType.VIEW == childTable.getTableType()) {\n                     TableView childTableView = (TableView) childTable;\n                     if (childTableView.isTableExpression() && childTableView.getName() != null) {\n@@ -98,4 +98,4 @@ public class DropView extends SchemaCommand {\n         return CommandInterface.DROP_VIEW;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/313/DropView.java\nindex 49ff161a80c..0028db1f2f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/313/DropView.java\n@@ -75,8 +75,9 @@ public class DropView extends SchemaCommand {\n             TableView tableView = (TableView) view;\n             ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n \n-            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n-            session.getDatabase().removeSchemaObject(session, view);\n+            view.lock(session, true, true);\n+            //\u4ec0\u4e48\u90fd\u6ca1\u505a\n+             session.getDatabase().removeSchemaObject(session, view);\n \n             // remove dependent table expressions\n             for (Table childTable: copyOfDependencies) {\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/313/DropView.java\nindex 49ff161a80c..76a31dfbbda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/313/DropView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/313/DropView.java\n@@ -75,8 +75,9 @@ public class DropView extends SchemaCommand {\n             TableView tableView = (TableView) view;\n             ArrayList<Table> copyOfDependencies = new ArrayList<>(tableView.getTables());\n \n-            view.lock(session, true, true); //\u4ec0\u4e48\u90fd\u6ca1\u505a\n-            session.getDatabase().removeSchemaObject(session, view);\n+            view.lock(session, true, true);\n+                //\u4ec0\u4e48\u90fd\u6ca1\u505a\n+             session.getDatabase().removeSchemaObject(session, view);\n \n             // remove dependent table expressions\n             for (Table childTable: copyOfDependencies) {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}