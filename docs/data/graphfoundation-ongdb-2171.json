{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2171",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "62",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "65",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "84",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2171/Sorting.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2171/Sorting.java\nindex fe1a383f769..f7e8fbf59d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2171/Sorting.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2171/Sorting.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.traversal;\n \n import java.util.Comparator;\n@@ -34,91 +35,88 @@ import static org.neo4j.graphdb.traversal.Paths.singleNodePath;\n  */\n public abstract class Sorting\n {\n-    // No instances\n-    private Sorting()\n-    {\n-    }\n+  // No instances\n+  private Sorting()\n+  {\n+  }\n \n-    /**\n-     * Sorts {@link Path}s by the property value of each path's end node.\n-     *\n-     * @param propertyKey the property key of the values to sort on.\n-     * @return a {@link Comparator} suitable for sorting traversal results.\n-     */\n-    public static Comparator<? super Path> endNodeProperty( final String propertyKey )\n+  /**\n+   * Sorts {@link Path}s by the property value of each path's end node.\n+   *\n+   * @param propertyKey the property key of the values to sort on.\n+   * @return a {@link Comparator} suitable for sorting traversal results.\n+   */\n+  public static Comparator<? super Path> endNodeProperty(final String propertyKey)\n+  {\n+    return new EndNodeComparator()\n     {\n-        return new EndNodeComparator()\n+      @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+      @Override\n+      protected int compareNodes(Node endNode1, Node endNode2)\n+      {\n+        Comparable p1 = (Comparable) endNode1.getProperty(propertyKey);\n+        Comparable p2 = (Comparable) endNode2.getProperty(propertyKey);\n+        if (p1 == p2)\n         {\n-            @SuppressWarnings( { \"rawtypes\", \"unchecked\" } )\n-            @Override\n-            protected int compareNodes( Node endNode1, Node endNode2 )\n-            {\n-                Comparable p1 = (Comparable) endNode1.getProperty( propertyKey );\n-                Comparable p2 = (Comparable) endNode2.getProperty( propertyKey );\n-                if ( p1 == p2 )\n-                {\n-                    return 0;\n-                }\n-                else if ( p1 == null )\n-                {\n-                    return Integer.MIN_VALUE;\n-                }\n-                else if ( p2 == null )\n-                {\n-                    return Integer.MAX_VALUE;\n-                }\n-                else\n-                {\n-                    return p1.compareTo( p2 );\n-                }\n-            }\n-        };\n-    }\n-\n-    /**\n-     * Sorts {@link Path}s by the relationship count returned for its end node\n-     * by the supplied {@code expander}.\n-     *\n-     * @param expander the {@link PathExpander} to use for getting relationships\n-     * off of each {@link Path}'s end node.\n-     * @return a {@link Comparator} suitable for sorting traversal results.\n-     */\n-    public static Comparator<? super Path> endNodeRelationshipCount( final PathExpander expander )\n-    {\n-        return new EndNodeComparator()\n+          return 0;\n+        } else if (p1 == null)\n         {\n-            @Override\n-            protected int compareNodes( Node endNode1, Node endNode2 )\n-            {\n-                Integer count1 = count( endNode1, expander );\n-                Integer count2 = count( endNode2, expander );\n-                return count1.compareTo( count2 );\n-            }\n-\n-            private Integer count( Node node, PathExpander expander )\n-            {\n-                Iterator<?> expand = expander.expand( singleNodePath( node ), BranchState.NO_STATE ).iterator();\n-                int count = 0;\n-                while ( expand.hasNext() )\n-                {\n-                    count++;\n-                }\n-                return count;\n-            }\n-        };\n-    }\n+          return Integer.MIN_VALUE;\n+        } else if (p2 == null)\n+        {\n+          return Integer.MAX_VALUE;\n+        } else\n+        {\n+          return p1.compareTo(p2);\n+        }\n+      }\n+    };\n+  }\n \n-    /**\n-     * Comparator for {@link Path#endNode() end nodes} of two {@link Path paths}\n-     */\n-    private abstract static class EndNodeComparator implements Comparator<Path>\n+  /**\n+   * Sorts {@link Path}s by the relationship count returned for its end node\n+   * by the supplied {@code expander}.\n+   *\n+   * @param expander the {@link PathExpander} to use for getting relationships\n+   *                 off of each {@link Path}'s end node.\n+   * @return a {@link Comparator} suitable for sorting traversal results.\n+   */\n+  public static Comparator<? super Path> endNodeRelationshipCount(final PathExpander expander)\n+  {\n+    return new EndNodeComparator()\n     {\n-        @Override\n-        public int compare( Path p1, Path p2 )\n+      @Override\n+      protected int compareNodes(Node endNode1, Node endNode2)\n+      {\n+        Integer count1 = count(endNode1, expander);\n+        Integer count2 = count(endNode2, expander);\n+        return count1.compareTo(count2);\n+      }\n+\n+      private Integer count(Node node, PathExpander expander)\n+      {\n+        Iterator<?> expand = expander.expand(singleNodePath(node), BranchState.NO_STATE).iterator();\n+        int count = 0;\n+        while (expand.hasNext())\n         {\n-            return compareNodes( p1.endNode(), p2.endNode() );\n+          count++;\n         }\n+        return count;\n+      }\n+    };\n+  }\n \n-        protected abstract int compareNodes( Node endNode1, Node endNode2 );\n+  /**\n+   * Comparator for {@link Path#endNode() end nodes} of two {@link Path paths}\n+   */\n+  private abstract static class EndNodeComparator implements Comparator<Path>\n+  {\n+    @Override\n+    public int compare(Path p1, Path p2)\n+    {\n+      return compareNodes(p1.endNode(), p2.endNode());\n     }\n+\n+    protected abstract int compareNodes(Node endNode1, Node endNode2);\n+  }\n }\n",
            "diff_size": 119
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2171/Sorting.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2171/Sorting.java\nindex fe1a383f769..c1f2caf8cc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2171/Sorting.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2171/Sorting.java\n@@ -103,7 +103,8 @@ public abstract class Sorting\n                 {\n                     count++;\n                 }\n-                return count;\n+\n+return count;\n             }\n         };\n     }\n@@ -121,4 +122,4 @@ public abstract class Sorting\n \n         protected abstract int compareNodes( Node endNode1, Node endNode2 );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}