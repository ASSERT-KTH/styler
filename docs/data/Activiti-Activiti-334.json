{
    "project_name": "Activiti-Activiti",
    "error_id": "334",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.api.runtime.model.impl;\n\nimport static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.OBJECT_TYPE_KEY;\nimport static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.forClass;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/334/ProcessVariablesMapSerializer.java\nindex 41566fb7d92..4654bc8a0a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/334/ProcessVariablesMapSerializer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.OBJECT_TYPE_KEY;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/334/ProcessVariablesMapSerializer.java\nindex 41566fb7d92..13bbb06946c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/334/ProcessVariablesMapSerializer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.OBJECT_TYPE_KEY;\n@@ -43,8 +44,8 @@ public class ProcessVariablesMapSerializer extends StdSerializer<ProcessVariable\n \n     @Override\n     public void serialize(ProcessVariablesMap<String, Object> processVariablesMap,\n-        JsonGenerator gen,\n-        SerializerProvider serializers) throws IOException {\n+                          JsonGenerator gen,\n+                          SerializerProvider serializers) throws IOException {\n \n         HashMap<String, ProcessVariableValue> map = new HashMap<>();\n         for (Map.Entry<String, Object> entry : processVariablesMap.entrySet()) {\n@@ -82,7 +83,7 @@ public class ProcessVariablesMapSerializer extends StdSerializer<ProcessVariable\n             entryType = clazz;\n         } else {\n             entryType = getContainerType(clazz, value)\n-                            .orElse(ObjectValue.class);\n+                    .orElse(ObjectValue.class);\n         }\n \n         return forClass(entryType);\n",
            "diff_size": 4
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/334/ProcessVariablesMapSerializer.java\nindex 41566fb7d92..4b41a0ad17c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/334/ProcessVariablesMapSerializer.java\n@@ -16,75 +16,66 @@\n package org.activiti.api.runtime.model.impl;\n \n import static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.OBJECT_TYPE_KEY;\n+\n import static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.forClass;\n+\n import static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.getContainerType;\n-import static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.isScalarType;\n \n+import static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.isScalarType;\n import java.io.IOException;\n import java.util.HashMap;\n import java.util.Map;\n-\n import org.springframework.core.convert.ConversionService;\n-\n import com.fasterxml.jackson.core.JsonGenerator;\n import com.fasterxml.jackson.databind.SerializerProvider;\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n-public class ProcessVariablesMapSerializer extends StdSerializer<ProcessVariablesMap<String, Object>> {\n-\n-    private static final long serialVersionUID = 1L;\n-    private final ConversionService conversionService;\n-\n-    public ProcessVariablesMapSerializer(ConversionService conversionService) {\n-        super(ProcessVariablesMap.class, true);\n-\n-        this.conversionService = conversionService;\n-    }\n-\n-    @Override\n-    public void serialize(ProcessVariablesMap<String, Object> processVariablesMap,\n-        JsonGenerator gen,\n-        SerializerProvider serializers) throws IOException {\n \n-        HashMap<String, ProcessVariableValue> map = new HashMap<>();\n-        for (Map.Entry<String, Object> entry : processVariablesMap.entrySet()) {\n-            String name = entry.getKey();\n-            Object value = entry.getValue();\n-            map.put(name, buildProcessVariableValue(value));\n-        }\n-\n-        gen.writeObject(map);\n-    }\n-\n-    private ProcessVariableValue buildProcessVariableValue(Object value) {\n-        ProcessVariableValue variableValue = null;\n-\n-        if (value != null) {\n-            Class<?> entryValueClass = value.getClass();\n-            String entryType = resolveEntryType(entryValueClass, value);\n-\n-            if (OBJECT_TYPE_KEY.equals(entryType)) {\n-                value = new ObjectValue(value);\n-            }\n-\n-            String entryValue = conversionService.convert(value, String.class);\n-\n-            variableValue = new ProcessVariableValue(entryType, entryValue);\n-        }\n+public class ProcessVariablesMapSerializer extends StdSerializer<ProcessVariablesMap<String, Object>> {\n \n-        return variableValue;\n+  private static final long serialVersionUID = 1L;\n+\n+  private final ConversionService conversionService;\n+\n+  public ProcessVariablesMapSerializer(ConversionService conversionService) {\n+    super(ProcessVariablesMap.class, true);\n+    this.conversionService = conversionService;\n+  }\n+\n+  @Override\n+  public void serialize(ProcessVariablesMap<String, Object> processVariablesMap,\n+                        JsonGenerator gen, SerializerProvider serializers) throws IOException {\n+                          HashMap<String, ProcessVariableValue> map = new HashMap<>();\n+                          for (Map.Entry<String, Object> entry : processVariablesMap.entrySet()) {\n+                              String name = entry.getKey();\n+                              Object value = entry.getValue();\n+                              map.put(name, buildProcessVariableValue(value));\n+                          }\n+                          gen.writeObject(map);\n+  }\n+\n+  private ProcessVariableValue buildProcessVariableValue(Object value) {\n+    ProcessVariableValue variableValue = null;\n+    if (value != null) {\n+      Class<?> entryValueClass = value.getClass();\n+      String entryType = resolveEntryType(entryValueClass, value);\n+      if (OBJECT_TYPE_KEY.equals(entryType)) {\n+        value = new ObjectValue(value);\n+      }\n+\n+      String entryValue = conversionService.convert(value, String.class);\n+      variableValue = new ProcessVariableValue(entryType, entryValue);\n     }\n-\n-    private String resolveEntryType(Class<?> clazz, Object value) {\n-        Class<?> entryType;\n-\n-        if (isScalarType(clazz)) {\n-            entryType = clazz;\n-        } else {\n-            entryType = getContainerType(clazz, value)\n-                            .orElse(ObjectValue.class);\n-        }\n-\n-        return forClass(entryType);\n+    return variableValue;\n+  }\n+\n+  private String resolveEntryType(Class<?> clazz, Object value) {\n+    Class<?> entryType;\n+    if (isScalarType(clazz)) {\n+      entryType = clazz;\n+    } else {\n+      entryType = getContainerType(clazz, value).orElse(ObjectValue.class);\n     }\n-}\n+    return forClass(entryType);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 93
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/334/ProcessVariablesMapSerializer.java\nindex 41566fb7d92..4654bc8a0a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/334/ProcessVariablesMapSerializer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.OBJECT_TYPE_KEY;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/334/ProcessVariablesMapSerializer.java\nindex 41566fb7d92..4654bc8a0a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/334/ProcessVariablesMapSerializer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/334/ProcessVariablesMapSerializer.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.api.runtime.model.impl;\n \n import static org.activiti.api.runtime.model.impl.ProcessVariablesMapTypeRegistry.OBJECT_TYPE_KEY;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}