{
    "project_name": "codefollower-H2-Research",
    "error_id": "465",
    "information": {
        "errors": [
            {
                "line": "147",
                "column": "54",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "    //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n    @Override\n    public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n        if (session.getDatabase().isStarting()) {\n            // don't check at startup\n            return;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/465/ConstraintCheck.java\nindex 70222c504f8..cddb29cac9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/465/ConstraintCheck.java\n@@ -144,8 +144,9 @@ public class ConstraintCheck extends Constraint {\n \n     //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n     @Override\n-    public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n-        if (session.getDatabase().isStarting()) {\n+    public void checkExistingData(Session session) {\n+        //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n+    if (session.getDatabase().isStarting()) {\n             // don't check at startup\n             return;\n         }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "149",
                    "column": "52",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/465/ConstraintCheck.java\nindex 70222c504f8..617d5fd1a2a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/465/ConstraintCheck.java\n@@ -3,9 +3,11 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.constraint;\n \n import java.util.HashSet;\n+\n import org.h2.api.ErrorCode;\n import org.h2.engine.Session;\n import org.h2.expression.Expression;\n@@ -27,154 +29,154 @@ import org.h2.value.ValueNull;\n  */\n public class ConstraintCheck extends Constraint {\n \n-    private TableFilter filter;\n-    private Expression expr;\n-\n-    public ConstraintCheck(Schema schema, int id, String name, Table table) {\n-        super(schema, id, name, table);\n-    }\n-\n-    @Override\n-    public Type getConstraintType() {\n-        return Constraint.Type.CHECK;\n-    }\n-\n-    public void setTableFilter(TableFilter filter) {\n-        this.filter = filter;\n-    }\n-\n-    public void setExpression(Expression expr) {\n-        this.expr = expr;\n-    }\n-\n-    @Override\n-    public String getCreateSQLForCopy(Table forTable, String quotedName) {\n-        StringBuilder buff = new StringBuilder(\"ALTER TABLE \");\n-        forTable.getSQL(buff, true).append(\" ADD CONSTRAINT \");\n-        if (forTable.isHidden()) {\n-            buff.append(\"IF NOT EXISTS \");\n-        }\n-        buff.append(quotedName);\n-        if (comment != null) {\n-            buff.append(\" COMMENT \");\n-            StringUtils.quoteStringSQL(buff, comment);\n-        }\n-        buff.append(\" CHECK(\");\n-        expr.getUnenclosedSQL(buff, true).append(\") NOCHECK\");\n-        return buff.toString();\n-    }\n-\n-    private String getShortDescription() {\n-        StringBuilder builder = new StringBuilder().append(getName()).append(\": \");\n-        expr.getSQL(builder, false);\n-        return builder.toString();\n-    }\n-\n-    @Override\n-    public String  getCreateSQLWithoutIndexes() {\n-        return getCreateSQL();\n-    }\n-\n-    @Override\n-    public String getCreateSQL() {\n-        return getCreateSQLForCopy(table, getSQL(true));\n-    }\n-\n-    @Override\n-    public void removeChildrenAndResources(Session session) {\n-        table.removeConstraint(this);\n-        database.removeMeta(session, getId());\n-        filter = null;\n-        expr = null;\n-        table = null;\n-        invalidate();\n+  private TableFilter filter;\n+  private Expression expr;\n+\n+  public ConstraintCheck(Schema schema, int id, String name, Table table) {\n+    super(schema, id, name, table);\n+  }\n+\n+  @Override\n+  public Type getConstraintType() {\n+    return Constraint.Type.CHECK;\n+  }\n+\n+  public void setTableFilter(TableFilter filter) {\n+    this.filter = filter;\n+  }\n+\n+  public void setExpression(Expression expr) {\n+    this.expr = expr;\n+  }\n+\n+  @Override\n+  public String getCreateSQLForCopy(Table forTable, String quotedName) {\n+    StringBuilder buff = new StringBuilder(\"ALTER TABLE \");\n+    forTable.getSQL(buff, true).append(\" ADD CONSTRAINT \");\n+    if (forTable.isHidden()) {\n+      buff.append(\"IF NOT EXISTS \");\n+    }\n+    buff.append(quotedName);\n+    if (comment != null) {\n+      buff.append(\" COMMENT \");\n+      StringUtils.quoteStringSQL(buff, comment);\n+    }\n+    buff.append(\" CHECK(\");\n+    expr.getUnenclosedSQL(buff, true).append(\") NOCHECK\");\n+    return buff.toString();\n+  }\n+\n+  private String getShortDescription() {\n+    StringBuilder builder = new StringBuilder().append(getName()).append(\": \");\n+    expr.getSQL(builder, false);\n+    return builder.toString();\n+  }\n+\n+  @Override\n+  public String getCreateSQLWithoutIndexes() {\n+    return getCreateSQL();\n+  }\n+\n+  @Override\n+  public String getCreateSQL() {\n+    return getCreateSQLForCopy(table, getSQL(true));\n+  }\n+\n+  @Override\n+  public void removeChildrenAndResources(Session session) {\n+    table.removeConstraint(this);\n+    database.removeMeta(session, getId());\n+    filter = null;\n+    expr = null;\n+    table = null;\n+    invalidate();\n+  }\n+\n+  //\u53ea\u7528\u4e8einsert\u548cupdate\n+  @Override\n+  public void checkRow(Session session, Table t, Row oldRow, Row newRow) {\n+    if (newRow == null) {\n+      return;\n     }\n-    \n-    //\u53ea\u7528\u4e8einsert\u548cupdate\n-    @Override\n-    public void checkRow(Session session, Table t, Row oldRow, Row newRow) {\n-        if (newRow == null) {\n-            return;\n-        }\n //<<<<<<< HEAD\n //        filter.set(newRow); //\u4e3a\u4e86\u5728expr.getValue\u80fd\u53d6\u5230\u5f53\u524dnewRow\n //        Boolean b;\n //=======\n-        filter.set(newRow);\n-        boolean b;\n-        try {\n-            Value v = expr.getValue(session);\n-            // Both TRUE and NULL are ok\n-            b = v == ValueNull.INSTANCE || v.getBoolean();\n-        } catch (DbException ex) {\n-            throw DbException.get(ErrorCode.CHECK_CONSTRAINT_INVALID, ex,\n-                    getShortDescription());\n-        }\n-        if (!b) {\n-            throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,\n-                    getShortDescription());\n-        }\n-    }\n-\n-    @Override\n-    public boolean usesIndex(Index index) {\n-        return false;\n-    }\n-\n-    @Override\n-    public void setIndexOwner(Index index) {\n-        DbException.throwInternalError(toString());\n-    }\n-\n-    @Override\n-    public HashSet<Column> getReferencedColumns(Table table) {\n-        HashSet<Column> columns = new HashSet<>();\n-        expr.isEverything(ExpressionVisitor.getColumnsVisitor(columns, table));\n-        return columns;\n-    }\n-\n-    public Expression getExpression() {\n-        return expr;\n-    }\n-\n-    @Override\n-    public boolean isBefore() {\n-        return true;\n-    }\n-\n-    //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n-    @Override\n-    public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n-        if (session.getDatabase().isStarting()) {\n-            // don't check at startup\n-            return;\n-        }\n-        //\u7528NOT\uff0c\u610f\u601d\u5c31\u662f\u8bf4\u53ea\u8981\u627e\u5230\u4e00\u4e2a\u53cd\u4f8b\u5c31\u4e0e\u7ea6\u675f\u51b2\u7a81\u4e86\n-        //\u6bd4\u5982\uff0c\u5982\u679c\u662fCHECK f1 not null\uff0c\n-        //\u5982\u679c\u6b64\u65f6\u8868\u4e2d\u7684f1\u5b57\u6bb5\u5b58\u5728null\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ea6\u675f\u5c31\u521b\u5efa\u5931\u8d25\n-        StringBuilder builder = new StringBuilder().append(\"SELECT 1 FROM \");\n-        filter.getTable().getSQL(builder, true).append(\" WHERE NOT(\");\n-        expr.getSQL(builder, true).append(')');\n-        String sql = builder.toString();\n-        ResultInterface r = session.prepare(sql).query(1);\n-        if (r.next()) {\n-            throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1, getName());\n-        }\n-    }\n-\n-    @Override\n-    public Index getUniqueIndex() {\n-        return null;\n-    }\n-\n-    @Override\n-    public void rebuild() {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public boolean isEverything(ExpressionVisitor visitor) {\n-        return expr.isEverything(visitor);\n-    }\n+    filter.set(newRow);\n+    boolean b;\n+    try {\n+      Value v = expr.getValue(session);\n+      // Both TRUE and NULL are ok\n+      b = v == ValueNull.INSTANCE || v.getBoolean();\n+    } catch (DbException ex) {\n+      throw DbException.get(ErrorCode.CHECK_CONSTRAINT_INVALID, ex,\n+          getShortDescription());\n+    }\n+    if (!b) {\n+      throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,\n+          getShortDescription());\n+    }\n+  }\n+\n+  @Override\n+  public boolean usesIndex(Index index) {\n+    return false;\n+  }\n+\n+  @Override\n+  public void setIndexOwner(Index index) {\n+    DbException.throwInternalError(toString());\n+  }\n+\n+  @Override\n+  public HashSet<Column> getReferencedColumns(Table table) {\n+    HashSet<Column> columns = new HashSet<>();\n+    expr.isEverything(ExpressionVisitor.getColumnsVisitor(columns, table));\n+    return columns;\n+  }\n+\n+  public Expression getExpression() {\n+    return expr;\n+  }\n+\n+  @Override\n+  public boolean isBefore() {\n+    return true;\n+  }\n+\n+  //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n+  @Override\n+  public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n+    if (session.getDatabase().isStarting()) {\n+      // don't check at startup\n+      return;\n+    }\n+    //\u7528NOT\uff0c\u610f\u601d\u5c31\u662f\u8bf4\u53ea\u8981\u627e\u5230\u4e00\u4e2a\u53cd\u4f8b\u5c31\u4e0e\u7ea6\u675f\u51b2\u7a81\u4e86\n+    //\u6bd4\u5982\uff0c\u5982\u679c\u662fCHECK f1 not null\uff0c\n+    //\u5982\u679c\u6b64\u65f6\u8868\u4e2d\u7684f1\u5b57\u6bb5\u5b58\u5728null\u503c\uff0c\u90a3\u4e48\u8fd9\u4e2a\u7ea6\u675f\u5c31\u521b\u5efa\u5931\u8d25\n+    StringBuilder builder = new StringBuilder().append(\"SELECT 1 FROM \");\n+    filter.getTable().getSQL(builder, true).append(\" WHERE NOT(\");\n+    expr.getSQL(builder, true).append(')');\n+    String sql = builder.toString();\n+    ResultInterface r = session.prepare(sql).query(1);\n+    if (r.next()) {\n+      throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1, getName());\n+    }\n+  }\n+\n+  @Override\n+  public Index getUniqueIndex() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void rebuild() {\n+    // nothing to do\n+  }\n+\n+  @Override\n+  public boolean isEverything(ExpressionVisitor visitor) {\n+    return expr.isEverything(visitor);\n+  }\n \n }\n",
            "diff_size": 153
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "152",
                    "column": "54",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/465/ConstraintCheck.java\nindex 70222c504f8..2f3b14f3e53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/465/ConstraintCheck.java\n@@ -25,6 +25,8 @@ import org.h2.value.ValueNull;\n /**\n  * A check constraint.\n  */\n+\n+\n public class ConstraintCheck extends Constraint {\n \n     private TableFilter filter;\n@@ -39,10 +41,12 @@ public class ConstraintCheck extends Constraint {\n         return Constraint.Type.CHECK;\n     }\n \n+\n     public void setTableFilter(TableFilter filter) {\n         this.filter = filter;\n     }\n \n+\n     public void setExpression(Expression expr) {\n         this.expr = expr;\n     }\n@@ -71,7 +75,7 @@ public class ConstraintCheck extends Constraint {\n     }\n \n     @Override\n-    public String  getCreateSQLWithoutIndexes() {\n+    public String getCreateSQLWithoutIndexes() {\n         return getCreateSQL();\n     }\n \n@@ -91,6 +95,7 @@ public class ConstraintCheck extends Constraint {\n     }\n     \n     //\u53ea\u7528\u4e8einsert\u548cupdate\n+\n     @Override\n     public void checkRow(Session session, Table t, Row oldRow, Row newRow) {\n         if (newRow == null) {\n@@ -107,12 +112,10 @@ public class ConstraintCheck extends Constraint {\n             // Both TRUE and NULL are ok\n             b = v == ValueNull.INSTANCE || v.getBoolean();\n         } catch (DbException ex) {\n-            throw DbException.get(ErrorCode.CHECK_CONSTRAINT_INVALID, ex,\n-                    getShortDescription());\n+            throw DbException.get(ErrorCode.CHECK_CONSTRAINT_INVALID, ex, getShortDescription());\n         }\n         if (!b) {\n-            throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1,\n-                    getShortDescription());\n+            throw DbException.get(ErrorCode.CHECK_CONSTRAINT_VIOLATED_1, getShortDescription());\n         }\n     }\n \n@@ -128,11 +131,12 @@ public class ConstraintCheck extends Constraint {\n \n     @Override\n     public HashSet<Column> getReferencedColumns(Table table) {\n-        HashSet<Column> columns = new HashSet<>();\n+        HashSet<Column> columns = new HashSet< >();\n         expr.isEverything(ExpressionVisitor.getColumnsVisitor(columns, table));\n         return columns;\n     }\n \n+\n     public Expression getExpression() {\n         return expr;\n     }\n@@ -143,6 +147,7 @@ public class ConstraintCheck extends Constraint {\n     }\n \n     //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n+\n     @Override\n     public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n         if (session.getDatabase().isStarting()) {\n@@ -170,6 +175,7 @@ public class ConstraintCheck extends Constraint {\n     @Override\n     public void rebuild() {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -177,4 +183,4 @@ public class ConstraintCheck extends Constraint {\n         return expr.isEverything(visitor);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/465/ConstraintCheck.java\nindex 70222c504f8..cddb29cac9e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/465/ConstraintCheck.java\n@@ -144,8 +144,9 @@ public class ConstraintCheck extends Constraint {\n \n     //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n     @Override\n-    public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n-        if (session.getDatabase().isStarting()) {\n+    public void checkExistingData(Session session) {\n+        //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n+    if (session.getDatabase().isStarting()) {\n             // don't check at startup\n             return;\n         }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/465/ConstraintCheck.java\nindex 70222c504f8..a499a0bb2b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/465/ConstraintCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/465/ConstraintCheck.java\n@@ -144,8 +144,9 @@ public class ConstraintCheck extends Constraint {\n \n     //\u901a\u5e38\u662f\u5728\u6784\u5efa\u7ea6\u675f\u5bf9\u8c61\u4e4b\u540e\u9a6c\u4e0a\u6839\u636eCHECK\u548cNOCHECK\u8c03\u7528\u4e0e\u4e0d\u8c03\u7528\n     @Override\n-    public void checkExistingData(Session session) { //\u6bd4\u5982\u7528\u4e8ealter\u65f6\n-        if (session.getDatabase().isStarting()) {\n+    public void checkExistingData(Session session) {\n+    //\u6bd4\u5982\u7528\u4e8ealter\u65f6 if (session.getDatabase().isStarting()) {\n+         if (session.getDatabase().isStarting()) {\n             // don't check at startup\n             return;\n         }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}