{
    "project_name": "graphfoundation-ongdb",
    "error_id": "653",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/653/MasterTransactionCommitProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/653/MasterTransactionCommitProcess.java\nindex 5ff3f492dd5..a1ad684b86b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/653/MasterTransactionCommitProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/653/MasterTransactionCommitProcess.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha;\n \n import org.neo4j.internal.kernel.api.exceptions.TransactionFailureException;\n@@ -34,51 +35,51 @@ import org.neo4j.storageengine.api.TransactionApplicationMode;\n public class MasterTransactionCommitProcess implements TransactionCommitProcess\n {\n \n-    private final TransactionCommitProcess inner;\n-    private final TransactionPropagator txPropagator;\n-    private final IntegrityValidator validator;\n-    private final Monitor monitor;\n+  private final TransactionCommitProcess inner;\n+  private final TransactionPropagator txPropagator;\n+  private final IntegrityValidator validator;\n+  private final Monitor monitor;\n \n-    public interface Monitor\n-    {\n-        void missedReplicas( int number );\n-    }\n+  public interface Monitor\n+  {\n+    void missedReplicas(int number);\n+  }\n \n-    public MasterTransactionCommitProcess( TransactionCommitProcess commitProcess, TransactionPropagator txPropagator,\n-            IntegrityValidator validator, Monitor monitor )\n-    {\n-        this.inner = commitProcess;\n-        this.txPropagator = txPropagator;\n-        this.validator = validator;\n-        this.monitor = monitor;\n-    }\n+  public MasterTransactionCommitProcess(TransactionCommitProcess commitProcess, TransactionPropagator txPropagator,\n+                                        IntegrityValidator validator, Monitor monitor)\n+  {\n+    this.inner = commitProcess;\n+    this.txPropagator = txPropagator;\n+    this.validator = validator;\n+    this.monitor = monitor;\n+  }\n \n-    @Override\n-    public long commit( TransactionToApply batch, CommitEvent commitEvent, TransactionApplicationMode mode )\n-            throws TransactionFailureException\n-    {\n-        validate( batch );\n-        long result = inner.commit( batch, commitEvent, mode );\n-\n-        // Assuming all the transactions come from the same author\n-        int missedReplicas = txPropagator.committed( result, batch.transactionRepresentation().getAuthorId() );\n+  @Override\n+  public long commit(TransactionToApply batch, CommitEvent commitEvent, TransactionApplicationMode mode)\n+      throws TransactionFailureException\n+  {\n+    validate(batch);\n+    long result = inner.commit(batch, commitEvent, mode);\n \n-        if ( missedReplicas > 0 )\n-        {\n-            monitor.missedReplicas( missedReplicas );\n-        }\n+    // Assuming all the transactions come from the same author\n+    int missedReplicas = txPropagator.committed(result, batch.transactionRepresentation().getAuthorId());\n \n-        return result;\n+    if (missedReplicas > 0)\n+    {\n+      monitor.missedReplicas(missedReplicas);\n     }\n \n-    private void validate( TransactionToApply batch ) throws TransactionFailureException\n+    return result;\n+  }\n+\n+  private void validate(TransactionToApply batch) throws TransactionFailureException\n+  {\n+    while (batch != null)\n     {\n-        while ( batch != null )\n-        {\n-            validator.validateTransactionStartKnowledge(\n-                    batch.transactionRepresentation().getLatestCommittedTxWhenStarted() );\n-            batch = batch.next();\n-        }\n+      validator.validateTransactionStartKnowledge(\n+          batch.transactionRepresentation().getLatestCommittedTxWhenStarted());\n+      batch = batch.next();\n     }\n+  }\n \n }\n",
            "diff_size": 46
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/653/MasterTransactionCommitProcess.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/653/MasterTransactionCommitProcess.java\nindex 5ff3f492dd5..5d86624c08c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/653/MasterTransactionCommitProcess.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/653/MasterTransactionCommitProcess.java\n@@ -33,7 +33,6 @@ import org.neo4j.storageengine.api.TransactionApplicationMode;\n  */\n public class MasterTransactionCommitProcess implements TransactionCommitProcess\n {\n-\n     private final TransactionCommitProcess inner;\n     private final TransactionPropagator txPropagator;\n     private final IntegrityValidator validator;\n@@ -54,16 +53,14 @@ public class MasterTransactionCommitProcess implements TransactionCommitProcess\n     }\n \n     @Override\n-    public long commit( TransactionToApply batch, CommitEvent commitEvent, TransactionApplicationMode mode )\n-            throws TransactionFailureException\n-    {\n+    public long commit( TransactionToApply batch, CommitEvent commitEvent, TransactionApplicationMode mode ) throws TransactionFailureException\n+{\n         validate( batch );\n         long result = inner.commit( batch, commitEvent, mode );\n \n         // Assuming all the transactions come from the same author\n         int missedReplicas = txPropagator.committed( result, batch.transactionRepresentation().getAuthorId() );\n-\n-        if ( missedReplicas > 0 )\n+if ( missedReplicas > 0 )\n         {\n             monitor.missedReplicas( missedReplicas );\n         }\n@@ -75,10 +72,8 @@ public class MasterTransactionCommitProcess implements TransactionCommitProcess\n     {\n         while ( batch != null )\n         {\n-            validator.validateTransactionStartKnowledge(\n-                    batch.transactionRepresentation().getLatestCommittedTxWhenStarted() );\n-            batch = batch.next();\n+            validator.validateTransactionStartKnowledge( batch.transactionRepresentation().getLatestCommittedTxWhenStarted() );\n+batch = batch.next();\n         }\n     }\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}