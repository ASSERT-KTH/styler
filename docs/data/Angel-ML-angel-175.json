{
    "project_name": "Angel-ML-angel",
    "error_id": "175",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/175/PushPathTailPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/175/PushPathTailPartitionParam.java\nindex 558fc48830d..c6936aa6f5e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/175/PushPathTailPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/175/PushPathTailPartitionParam.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.graph.client.node2vec.updatefuncs.pushpathtail;\n \n import com.tencent.angel.PartitionKey;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/175/PushPathTailPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/175/PushPathTailPartitionParam.java\nindex 558fc48830d..79c0376e950 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/175/PushPathTailPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/175/PushPathTailPartitionParam.java\n@@ -24,10 +24,9 @@ import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;\n public class PushPathTailPartitionParam extends PartitionUpdateParamWithIds {\n   private Long2LongOpenHashMap pathTail;\n \n-  public PushPathTailPartitionParam(int matrixId, PartitionKey partKey,\n-                                    Long2LongOpenHashMap pathTail,\n+  public PushPathTailPartitionParam(int matrixId, PartitionKey partKey, Long2LongOpenHashMap pathTail,\n                                     long[] nodeIds, int startIndex, int endIndex) {\n-    super(matrixId, partKey, nodeIds, startIndex, endIndex);\n+  super(matrixId, partKey, nodeIds, startIndex, endIndex);\n     this.pathTail = pathTail;\n   }\n \n@@ -80,4 +79,4 @@ public class PushPathTailPartitionParam extends PartitionUpdateParamWithIds {\n     return len;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/175/PushPathTailPartitionParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/175/PushPathTailPartitionParam.java\nindex 558fc48830d..a6c1c7b2f43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/175/PushPathTailPartitionParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/175/PushPathTailPartitionParam.java\n@@ -22,9 +22,11 @@ import io.netty.buffer.ByteBuf;\n import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;\n \n public class PushPathTailPartitionParam extends PartitionUpdateParamWithIds {\n+\n   private Long2LongOpenHashMap pathTail;\n \n-  public PushPathTailPartitionParam(int matrixId, PartitionKey partKey,\n+  public PushPathTailPartitionParam(int matrixId,\n+                                    PartitionKey partKey,\n                                     Long2LongOpenHashMap pathTail,\n                                     long[] nodeIds, int startIndex, int endIndex) {\n     super(matrixId, partKey, nodeIds, startIndex, endIndex);\n@@ -63,9 +65,9 @@ public class PushPathTailPartitionParam extends PartitionUpdateParamWithIds {\n   @Override\n   public void deserialize(ByteBuf buf) {\n     super.deserialize(buf);\n+\n     int size = endIdx - startIdx;\n     pathTail = new Long2LongOpenHashMap(size);\n-\n     for (int i = 0; i < size; i++) {\n       long key = buf.readLong();\n       long value = buf.readLong();\n@@ -79,5 +81,4 @@ public class PushPathTailPartitionParam extends PartitionUpdateParamWithIds {\n     len += 16 * (endIdx - startIdx);\n     return len;\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}