{
    "project_name": "Angel-ML-angel",
    "error_id": "643",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/643/MatrixCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/643/MatrixCache.java\nindex 88a2dd9216e..ada089fd207 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/643/MatrixCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/643/MatrixCache.java\n@@ -67,7 +67,7 @@ public class MatrixCache {\n   /**\r\n    * Get a row split from cache\r\n    *\r\n-   * @param partKey partition key\r\n+   * @param partKey  partition key\r\n    * @param rowIndex row index\r\n    * @return the row split\r\n    */\r\n@@ -86,7 +86,7 @@ public class MatrixCache {\n   /**\r\n    * Get a batch of row splits that belong to a matrix partition\r\n    *\r\n-   * @param partKey partition key\r\n+   * @param partKey    partition key\r\n    * @param rowIndexes row indexes\r\n    * @return a batch of row splits\r\n    */\r\n@@ -106,7 +106,7 @@ public class MatrixCache {\n    * Update a matrix partition in the cache\r\n    *\r\n    * @param partKey partition key\r\n-   * @param part matrix partition\r\n+   * @param part    matrix partition\r\n    */\r\n   public void update(PartitionKey partKey, RowBasedPartition part) {\r\n     RowBasedPartition partCache = partitionCacheMap.get(partKey);\r\n@@ -118,7 +118,7 @@ public class MatrixCache {\n   /**\r\n    * Update a row split in the cache\r\n    *\r\n-   * @param partKey partition key\r\n+   * @param partKey  partition key\r\n    * @param rowSplit row split\r\n    */\r\n   public void update(PartitionKey partKey, ServerRow rowSplit) {\r\n@@ -134,7 +134,7 @@ public class MatrixCache {\n   /**\r\n    * Update a batch row splits in the cache\r\n    *\r\n-   * @param partKey partition key\r\n+   * @param partKey   partition key\r\n    * @param rowsSplit a batch row splits\r\n    */\r\n   public void update(PartitionKey partKey, List<ServerRow> rowsSplit) {\r\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/643/MatrixCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/643/MatrixCache.java\nindex 88a2dd9216e..afeeab7bfaf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/643/MatrixCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/643/MatrixCache.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.psagent.matrix.cache;\r\n \r\n import com.tencent.angel.PartitionKey;\r\n@@ -148,11 +147,9 @@ public class MatrixCache {\n   }\r\n \r\n   private void initPart(PartitionKey partKey) {\r\n-    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\r\n-    partitionCacheMap\r\n-        .putIfAbsent(partKey, (RowBasedPartition) ServerPartitionFactory\r\n-            .getPartition(partKey, RowBasedPartition.class, SparseServerRowsStorage.class,\r\n-                matrixMeta.getRowType(), null, matrixMeta.getEstSparsity()));\r\n+    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n+    partitionCacheMap.putIfAbsent(partKey, (RowBasedPartition) ServerPartitionFactory.getPartition(partKey, RowBasedPartition.class, SparseServerRowsStorage.class,\r\n+                matrixMeta.getRowType(), null, matrixMeta.getEstSparsity()));\n   }\r\n \r\n   /**\r\n@@ -163,4 +160,4 @@ public class MatrixCache {\n   public void clear(PartitionKey partitionKey) {\r\n     partitionCacheMap.remove(partitionKey);\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "158",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 225).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/643/MatrixCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/643/MatrixCache.java\nindex 88a2dd9216e..abd458802a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/643/MatrixCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/643/MatrixCache.java\n@@ -16,42 +16,44 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.psagent.matrix.cache;\r\n-\r\n-import com.tencent.angel.PartitionKey;\r\n-import com.tencent.angel.ml.matrix.MatrixMeta;\r\n-import com.tencent.angel.ps.storage.partition.RowBasedPartition;\r\n-import com.tencent.angel.ps.storage.partition.ServerPartitionFactory;\r\n-import com.tencent.angel.ps.storage.partition.storage.SparseServerRowsStorage;\r\n-import com.tencent.angel.ps.storage.vector.ServerRow;\r\n-import com.tencent.angel.psagent.PSAgentContext;\r\n-\r\n-import java.util.List;\r\n+package com.tencent.angel.psagent.matrix.cache;\n+\n+import com.tencent.angel.PartitionKey;\n+import com.tencent.angel.ml.matrix.MatrixMeta;\n+import com.tencent.angel.ps.storage.partition.RowBasedPartition;\n+import com.tencent.angel.ps.storage.partition.ServerPartitionFactory;\n+import com.tencent.angel.ps.storage.partition.storage.SparseServerRowsStorage;\n+import com.tencent.angel.ps.storage.vector.ServerRow;\n+import com.tencent.angel.psagent.PSAgentContext;\n+import java.util.List;\n import java.util.concurrent.ConcurrentHashMap;\r\n \r\n /**\r\n  * Cache for a single matrix.\r\n- */\r\n+ */\n+\n public class MatrixCache {\r\n \r\n   /**\r\n    * matrix id\r\n-   */\r\n+   */\n+\n   private final int matrixId;\r\n \r\n   /**\r\n    * partition key to partition map\r\n-   */\r\n+   */\n   private final ConcurrentHashMap<PartitionKey, RowBasedPartition> partitionCacheMap;\r\n \r\n   /**\r\n    * Create a new MatrixCache.\r\n    *\r\n    * @param matrixId matrix id\r\n-   */\r\n-  public MatrixCache(int matrixId) {\r\n-    this.matrixId = matrixId;\r\n-    this.partitionCacheMap = new ConcurrentHashMap<>();\r\n+   */\n+\n+  public MatrixCache(int matrixId) {\n+    this.matrixId = matrixId;\n+    this.partitionCacheMap = new ConcurrentHashMap<>();\n   }\r\n \r\n   /**\r\n@@ -59,9 +61,10 @@ public class MatrixCache {\n    *\r\n    * @param partKey partition key\r\n    * @return matrix partition\r\n-   */\r\n-  public RowBasedPartition getPartition(PartitionKey partKey) {\r\n-    return partitionCacheMap.get(partKey);\r\n+   */\n+\n+  public RowBasedPartition getPartition(PartitionKey partKey) {\n+    return partitionCacheMap.get(partKey);\n   }\r\n \r\n   /**\r\n@@ -70,17 +73,18 @@ public class MatrixCache {\n    * @param partKey partition key\r\n    * @param rowIndex row index\r\n    * @return the row split\r\n-   */\r\n-  public ServerRow getRowSplit(PartitionKey partKey, int rowIndex) {\r\n-    RowBasedPartition partCache = partitionCacheMap.get(partKey);\r\n-    if (partCache == null) {\r\n-      return null;\r\n-    }\r\n-    return partCache.getRow(rowIndex);\r\n-  }\r\n-\r\n-  public int getMatrixId() {\r\n-    return matrixId;\r\n+   */\n+\n+  public ServerRow getRowSplit(PartitionKey partKey, int rowIndex) {\n+    RowBasedPartition partCache = partitionCacheMap.get(partKey);\n+    if (partCache == null) {\n+      return null;\n+    }\n+    return partCache.getRow(rowIndex);\n+  }\n+\n+  public int getMatrixId() {\n+    return matrixId;\n   }\r\n \r\n   /**\r\n@@ -89,17 +93,18 @@ public class MatrixCache {\n    * @param partKey partition key\r\n    * @param rowIndexes row indexes\r\n    * @return a batch of row splits\r\n-   */\r\n-  public List<ServerRow> getRowsSplit(PartitionKey partKey, List<Integer> rowIndexes) {\r\n-    RowBasedPartition partCache = partitionCacheMap.get(partKey);\r\n-    if (partCache == null) {\r\n-      return null;\r\n-    }\r\n-    return partCache.getRows(rowIndexes);\r\n-  }\r\n-\r\n-  public ConcurrentHashMap<PartitionKey, RowBasedPartition> getPartitionCacheMap() {\r\n-    return partitionCacheMap;\r\n+   */\n+\n+  public List<ServerRow> getRowsSplit(PartitionKey partKey, List<Integer> rowIndexes) {\n+    RowBasedPartition partCache = partitionCacheMap.get(partKey);\n+    if (partCache == null) {\n+      return null;\n+    }\n+    return partCache.getRows(rowIndexes);\n+  }\n+\n+  public ConcurrentHashMap<PartitionKey, RowBasedPartition> getPartitionCacheMap() {\n+    return partitionCacheMap;\n   }\r\n \r\n   /**\r\n@@ -107,12 +112,13 @@ public class MatrixCache {\n    *\r\n    * @param partKey partition key\r\n    * @param part matrix partition\r\n-   */\r\n-  public void update(PartitionKey partKey, RowBasedPartition part) {\r\n-    RowBasedPartition partCache = partitionCacheMap.get(partKey);\r\n-    if (partCache == null || partCache.getClock() <= part.getClock()) {\r\n-      partitionCacheMap.put(partKey, part);\r\n-    }\r\n+   */\n+\n+  public void update(PartitionKey partKey, RowBasedPartition part) {\n+    RowBasedPartition partCache = partitionCacheMap.get(partKey);\n+    if (partCache == null || partCache.getClock() <= part.getClock()) {\n+      partitionCacheMap.put(partKey, part);\n+    }\n   }\r\n \r\n   /**\r\n@@ -120,15 +126,15 @@ public class MatrixCache {\n    *\r\n    * @param partKey partition key\r\n    * @param rowSplit row split\r\n-   */\r\n-  public void update(PartitionKey partKey, ServerRow rowSplit) {\r\n-    RowBasedPartition partCache = partitionCacheMap.get(partKey);\r\n-    if (partCache == null) {\r\n-      initPart(partKey);\r\n-      partCache = partitionCacheMap.get(partKey);\r\n-    }\r\n-\r\n-    partCache.putRow(rowSplit);\r\n+   */\n+\n+  public void update(PartitionKey partKey, ServerRow rowSplit) {\n+    RowBasedPartition partCache = partitionCacheMap.get(partKey);\n+    if (partCache == null) {\n+      initPart(partKey);\n+      partCache = partitionCacheMap.get(partKey);\n+    }\n+    partCache.putRow(rowSplit);\n   }\r\n \r\n   /**\r\n@@ -136,31 +142,29 @@ public class MatrixCache {\n    *\r\n    * @param partKey partition key\r\n    * @param rowsSplit a batch row splits\r\n-   */\r\n-  public void update(PartitionKey partKey, List<ServerRow> rowsSplit) {\r\n-    RowBasedPartition partCache = partitionCacheMap.get(partKey);\r\n-    if (partCache == null) {\r\n-      initPart(partKey);\r\n-      partCache = partitionCacheMap.get(partKey);\r\n-    }\r\n-\r\n-    partCache.putRows(rowsSplit);\r\n-  }\r\n-\r\n-  private void initPart(PartitionKey partKey) {\r\n-    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\r\n-    partitionCacheMap\r\n-        .putIfAbsent(partKey, (RowBasedPartition) ServerPartitionFactory\r\n-            .getPartition(partKey, RowBasedPartition.class, SparseServerRowsStorage.class,\r\n-                matrixMeta.getRowType(), null, matrixMeta.getEstSparsity()));\r\n+   */\n+\n+  public void update(PartitionKey partKey, List<ServerRow> rowsSplit) {\n+    RowBasedPartition partCache = partitionCacheMap.get(partKey);\n+    if (partCache == null) {\n+      initPart(partKey);\n+      partCache = partitionCacheMap.get(partKey);\n+    }\n+    partCache.putRows(rowsSplit);\n+  }\n+\n+  private void initPart(PartitionKey partKey) {\n+    MatrixMeta matrixMeta = PSAgentContext.get().getMatrixMetaManager().getMatrixMeta(matrixId);\n+    partitionCacheMap.putIfAbsent(partKey, (RowBasedPartition) ServerPartitionFactory.getPartition(partKey, RowBasedPartition.class, SparseServerRowsStorage.class, matrixMeta.getRowType(), null, matrixMeta.getEstSparsity()));\n   }\r\n \r\n   /**\r\n    * Clean a matrix partition from cache\r\n    *\r\n    * @param partitionKey partition key\r\n-   */\r\n-  public void clear(PartitionKey partitionKey) {\r\n-    partitionCacheMap.remove(partitionKey);\r\n-  }\r\n-}\r\n+   */\n+\n+  public void clear(PartitionKey partitionKey) {\n+    partitionCacheMap.remove(partitionKey);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 88
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}