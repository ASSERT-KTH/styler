{
    "project_name": "st-js-st-js",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "53",
                "severity": "error",
                "message": "Line has leading space characters; indentation should be performed with tabs only.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "\t\t}\n        // 1) empty\n        return p.js().emptyExpression();\n\t}\n\n\tprivate JS update(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler/21/ForLoopWriter.java\nindex 54b62dfc3e1..5069c83fed8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler/21/ForLoopWriter.java\n@@ -50,8 +50,8 @@ public class ForLoopWriter<JS> implements WriterContributor<ForLoopTree, JS> {\n \t\t\treturn visitor.scan(tree.getCondition(), p);\r\n \t\t}\r\n         // 1) empty\r\n-        return p.js().emptyExpression();\r\n-\t}\r\n+\t\t\t\t\t\t\t\treturn p.js().emptyExpression();\r\n+\t\t\t\t\t\t\t}\r\n \r\n \tprivate JS update(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n \t\tList<JS> jsNodes = new ArrayList<JS>();\r\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/intellij/21/ForLoopWriter.java\nindex 54b62dfc3e1..09ae755fdb8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/intellij/21/ForLoopWriter.java\n@@ -16,58 +16,58 @@ import com.sun.source.tree.VariableTree;\n  * @author acraciun\r\n  */\r\n public class ForLoopWriter<JS> implements WriterContributor<ForLoopTree, JS> {\r\n-\tprivate final MultipleVariableWriter<JS> initializerWriter = new MultipleVariableWriter<JS>();\r\n+    private final MultipleVariableWriter<JS> initializerWriter = new MultipleVariableWriter<JS>();\r\n \r\n-\t/**\r\n-\t * if have basically 3 cases: <br>\r\n-\t * 1) empty initializers for(;i < 10; ++i) <br>\r\n-\t * 2) variables: for(int i =0, j =2; ..) <br>\r\n-\t * 3) expressions: for(i =0; j =2; ...)\r\n-\t */\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tprivate JS initializer(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n-\t\tif (tree.getInitializer().isEmpty()) {\r\n-\t\t\t// 1) empty\r\n-\t\t\treturn p.js().emptyExpression();\r\n-\t\t}\r\n-\t\tif (tree.getInitializer().get(0) instanceof VariableTree) {\r\n-\t\t\t// 2) variables\r\n-\t\t\treturn initializerWriter.visit(visitor, (List<VariableTree>) tree.getInitializer(), p, false);\r\n-\t\t}\r\n+    /**\r\n+     * if have basically 3 cases: <br>\r\n+     * 1) empty initializers for(;i < 10; ++i) <br>\r\n+     * 2) variables: for(int i =0, j =2; ..) <br>\r\n+     * 3) expressions: for(i =0; j =2; ...)\r\n+     */\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    private JS initializer(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n+        if (tree.getInitializer().isEmpty()) {\r\n+            // 1) empty\r\n+            return p.js().emptyExpression();\r\n+        }\r\n+        if (tree.getInitializer().get(0) instanceof VariableTree) {\r\n+            // 2) variables\r\n+            return initializerWriter.visit(visitor, (List<VariableTree>) tree.getInitializer(), p, false);\r\n+        }\r\n \r\n-\t\t// 3) expressionns\r\n-\t\tList<JS> nodes = new ArrayList<JS>();\r\n-\t\tfor (Tree u : tree.getInitializer()) {\r\n-\t\t\tif (u instanceof ExpressionStatementTree) {\r\n-\t\t\t\tnodes.add(visitor.scan(((ExpressionStatementTree) u).getExpression(), p));\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn p.js().asExpressionList(nodes);\r\n-\t}\r\n+        // 3) expressionns\r\n+        List<JS> nodes = new ArrayList<JS>();\r\n+        for (Tree u : tree.getInitializer()) {\r\n+            if (u instanceof ExpressionStatementTree) {\r\n+                nodes.add(visitor.scan(((ExpressionStatementTree) u).getExpression(), p));\r\n+            }\r\n+        }\r\n+        return p.js().asExpressionList(nodes);\r\n+    }\r\n \r\n-\tprivate JS condition(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n-\t\tif (tree.getCondition() != null) {\r\n-\t\t\treturn visitor.scan(tree.getCondition(), p);\r\n-\t\t}\r\n+    private JS condition(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n+        if (tree.getCondition() != null) {\r\n+            return visitor.scan(tree.getCondition(), p);\r\n+        }\r\n         // 1) empty\r\n         return p.js().emptyExpression();\r\n-\t}\r\n+    }\r\n \r\n-\tprivate JS update(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n-\t\tList<JS> jsNodes = new ArrayList<JS>();\r\n-\t\tfor (ExpressionStatementTree u : tree.getUpdate()) {\r\n-\t\t\tjsNodes.add(visitor.scan(u.getExpression(), p));\r\n-\t\t}\r\n-\t\treturn p.js().asExpressionList(jsNodes);\r\n-\t}\r\n+    private JS update(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n+        List<JS> jsNodes = new ArrayList<JS>();\r\n+        for (ExpressionStatementTree u : tree.getUpdate()) {\r\n+            jsNodes.add(visitor.scan(u.getExpression(), p));\r\n+        }\r\n+        return p.js().asExpressionList(jsNodes);\r\n+    }\r\n \r\n-\t@Override\r\n-\tpublic JS visit(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> context) {\r\n-\t\tJS init = initializer(visitor, tree, context);\r\n-\t\tJS condition = condition(visitor, tree, context);\r\n-\t\tJS update = update(visitor, tree, context);\r\n-\t\tJS body = visitor.scan(tree.getStatement(), context);\r\n+    @Override\r\n+    public JS visit(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> context) {\r\n+        JS init = initializer(visitor, tree, context);\r\n+        JS condition = condition(visitor, tree, context);\r\n+        JS update = update(visitor, tree, context);\r\n+        JS body = visitor.scan(tree.getStatement(), context);\r\n \r\n-\t\treturn context.withPosition(tree, context.js().forLoop(init, condition, update, body));\r\n-\t}\r\n+        return context.withPosition(tree, context.js().forLoop(init, condition, update, body));\r\n+    }\r\n }\r\n",
            "diff_size": 46
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/naturalize/21/ForLoopWriter.java\nindex 54b62dfc3e1..e8903fcaf35 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/naturalize/21/ForLoopWriter.java\n@@ -48,9 +48,10 @@ public class ForLoopWriter<JS> implements WriterContributor<ForLoopTree, JS> {\n \tprivate JS condition(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n \t\tif (tree.getCondition() != null) {\r\n \t\t\treturn visitor.scan(tree.getCondition(), p);\r\n-\t\t}\r\n-        // 1) empty\r\n-        return p.js().emptyExpression();\r\n+\t\t}\n+\n+// 1) empty\r\n+        return p.js().emptyExpression();\n \t}\r\n \r\n \tprivate JS update(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n@@ -70,4 +71,4 @@ public class ForLoopWriter<JS> implements WriterContributor<ForLoopTree, JS> {\n \r\n \t\treturn context.withPosition(tree, context.js().forLoop(init, condition, update, body));\r\n \t}\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "29",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "30",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "32",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "33",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "45",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "59",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "64",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "74",
                    "severity": "error",
                    "message": "Line has leading space characters; indentation should be performed with tabs only.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/codebuff/21/ForLoopWriter.java\nindex 54b62dfc3e1..c9f59457614 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/codebuff/21/ForLoopWriter.java\n@@ -1,73 +1,75 @@\n-package org.stjs.generator.writer.statement;\r\n-\r\n-import java.util.ArrayList;\r\n-import java.util.List;\r\n-\r\n-import org.stjs.generator.GenerationContext;\r\n-import org.stjs.generator.writer.WriterContributor;\r\n-import org.stjs.generator.writer.WriterVisitor;\r\n-\r\n-import com.sun.source.tree.ExpressionStatementTree;\r\n-import com.sun.source.tree.ForLoopTree;\r\n-import com.sun.source.tree.Tree;\r\n+package org.stjs.generator.writer.statement;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.stjs.generator.GenerationContext;\n+import org.stjs.generator.writer.WriterContributor;\n+import org.stjs.generator.writer.WriterVisitor;\n+import com.sun.source.tree.ExpressionStatementTree;\n+import com.sun.source.tree.ForLoopTree;\n+import com.sun.source.tree.Tree;\n import com.sun.source.tree.VariableTree;\r\n \r\n /**\r\n  * @author acraciun\r\n- */\r\n-public class ForLoopWriter<JS> implements WriterContributor<ForLoopTree, JS> {\r\n-\tprivate final MultipleVariableWriter<JS> initializerWriter = new MultipleVariableWriter<JS>();\r\n-\r\n-\t/**\r\n-\t * if have basically 3 cases: <br>\r\n-\t * 1) empty initializers for(;i < 10; ++i) <br>\r\n-\t * 2) variables: for(int i =0, j =2; ..) <br>\r\n-\t * 3) expressions: for(i =0; j =2; ...)\r\n-\t */\r\n-\t@SuppressWarnings(\"unchecked\")\r\n-\tprivate JS initializer(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n-\t\tif (tree.getInitializer().isEmpty()) {\r\n-\t\t\t// 1) empty\r\n-\t\t\treturn p.js().emptyExpression();\r\n-\t\t}\r\n-\t\tif (tree.getInitializer().get(0) instanceof VariableTree) {\r\n-\t\t\t// 2) variables\r\n-\t\t\treturn initializerWriter.visit(visitor, (List<VariableTree>) tree.getInitializer(), p, false);\r\n-\t\t}\r\n-\r\n-\t\t// 3) expressionns\r\n-\t\tList<JS> nodes = new ArrayList<JS>();\r\n-\t\tfor (Tree u : tree.getInitializer()) {\r\n-\t\t\tif (u instanceof ExpressionStatementTree) {\r\n-\t\t\t\tnodes.add(visitor.scan(((ExpressionStatementTree) u).getExpression(), p));\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\treturn p.js().asExpressionList(nodes);\r\n-\t}\r\n-\r\n-\tprivate JS condition(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n-\t\tif (tree.getCondition() != null) {\r\n-\t\t\treturn visitor.scan(tree.getCondition(), p);\r\n-\t\t}\r\n-        // 1) empty\r\n-        return p.js().emptyExpression();\r\n-\t}\r\n-\r\n-\tprivate JS update(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n-\t\tList<JS> jsNodes = new ArrayList<JS>();\r\n-\t\tfor (ExpressionStatementTree u : tree.getUpdate()) {\r\n-\t\t\tjsNodes.add(visitor.scan(u.getExpression(), p));\r\n-\t\t}\r\n-\t\treturn p.js().asExpressionList(jsNodes);\r\n-\t}\r\n+ */\n+\n+\n+public class ForLoopWriter<JS> implements WriterContributor<ForLoopTree, JS> {\n+ private final MultipleVariableWriter<JS> initializerWriter = new MultipleVariableWriter<JS>();\r\n \r\n-\t@Override\r\n-\tpublic JS visit(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> context) {\r\n-\t\tJS init = initializer(visitor, tree, context);\r\n-\t\tJS condition = condition(visitor, tree, context);\r\n-\t\tJS update = update(visitor, tree, context);\r\n-\t\tJS body = visitor.scan(tree.getStatement(), context);\r\n+ /**\r\n+  * if have basically 3 cases: <br>\r\n+  * 1) empty initializers for(;i < 10; ++i) <br>\r\n+  * 2) variables: for(int i =0, j =2; ..) <br>\r\n+  * 3) expressions: for(i =0; j =2; ...)\r\n+  */\n+\n+ @SuppressWarnings(\"unchecked\")\n+ private JS initializer(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\n+  if (tree.getInitializer().isEmpty()) {\r\n+   // 1) empty\n+   return p.js().emptyExpression();\n+  }\n+\n+  if (tree.getInitializer().get(0) instanceof VariableTree) {\r\n+   // 2) variables\n+   return initializerWriter.visit(visitor, (List<VariableTree>) tree.getInitializer(), p, false);\n+  }\r\n \r\n-\t\treturn context.withPosition(tree, context.js().forLoop(init, condition, update, body));\r\n-\t}\r\n-}\r\n+  // 3) expressionns\n+\n+  List<JS> nodes = new ArrayList<JS>();\n+  for (Tree u : tree.getInitializer()) {\n+   if (u instanceof ExpressionStatementTree) {\n+    nodes.add(visitor.scan(((ExpressionStatementTree) u).getExpression(), p));\n+   }\n+  }\n+  return p.js().asExpressionList(nodes);\n+ }\n+\n+ private JS condition(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\n+  if (tree.getCondition() != null) {\n+   return visitor.scan(tree.getCondition(), p);\n+  }\r\n+        // 1) empty\n+  return p.js().emptyExpression();\n+ }\n+\n+ private JS update(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\n+  List<JS> jsNodes = new ArrayList<JS>();\n+  for (ExpressionStatementTree u : tree.getUpdate()) {\n+   jsNodes.add(visitor.scan(u.getExpression(), p));\n+  }\n+  return p.js().asExpressionList(jsNodes);\n+ }\n+\n+ @Override\n+ public JS visit(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> context) {\n+  JS init = initializer(visitor, tree, context);\n+  JS condition = condition(visitor, tree, context);\n+  JS update = update(visitor, tree, context);\n+  JS body = visitor.scan(tree.getStatement(), context);\n+  return context.withPosition(tree, context.js().forLoop(init, condition, update, body));\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 112
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler_random/21/ForLoopWriter.java\nindex 54b62dfc3e1..5069c83fed8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler_random/21/ForLoopWriter.java\n@@ -50,8 +50,8 @@ public class ForLoopWriter<JS> implements WriterContributor<ForLoopTree, JS> {\n \t\t\treturn visitor.scan(tree.getCondition(), p);\r\n \t\t}\r\n         // 1) empty\r\n-        return p.js().emptyExpression();\r\n-\t}\r\n+\t\t\t\t\t\t\t\treturn p.js().emptyExpression();\r\n+\t\t\t\t\t\t\t}\r\n \r\n \tprivate JS update(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n \t\tList<JS> jsNodes = new ArrayList<JS>();\r\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler_three_grams/21/ForLoopWriter.java\nindex 54b62dfc3e1..5069c83fed8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/errored/1/21/ForLoopWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/st-js-st-js/styler_three_grams/21/ForLoopWriter.java\n@@ -50,8 +50,8 @@ public class ForLoopWriter<JS> implements WriterContributor<ForLoopTree, JS> {\n \t\t\treturn visitor.scan(tree.getCondition(), p);\r\n \t\t}\r\n         // 1) empty\r\n-        return p.js().emptyExpression();\r\n-\t}\r\n+\t\t\t\t\t\t\t\treturn p.js().emptyExpression();\r\n+\t\t\t\t\t\t\t}\r\n \r\n \tprivate JS update(WriterVisitor<JS> visitor, ForLoopTree tree, GenerationContext<JS> p) {\r\n \t\tList<JS> jsNodes = new ArrayList<JS>();\r\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}