{
    "project_name": "codefollower-H2-Research",
    "error_id": "398",
    "information": {
        "errors": [
            {
                "line": "377",
                "column": "11",
                "severity": "warning",
                "message": "'catch' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "                }\n            }\n        } catch(Throwable another) {\n            if (e == null) {\n                try {\n                    e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/398/TraceObject.java\nindex 22a622ab735..05ee0c52ac0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/398/TraceObject.java\n@@ -374,7 +374,7 @@ public class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/398/TraceObject.java\nindex 22a622ab735..d0474e75b84 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/398/TraceObject.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.message;\n \n import java.math.BigDecimal;\n@@ -18,387 +19,387 @@ import org.h2.util.StringUtils;\n  */\n public class TraceObject {\n \n-    /**\n-     * The trace type id  for callable statements.\n-     */\n-    protected static final int CALLABLE_STATEMENT = 0;\n-\n-    /**\n-     * The trace type id  for connections.\n-     */\n-    protected static final int CONNECTION = 1;\n-\n-    /**\n-     * The trace type id  for database meta data objects.\n-     */\n-    protected static final int DATABASE_META_DATA = 2;\n-\n-    /**\n-     * The trace type id  for prepared statements.\n-     */\n-    protected static final int PREPARED_STATEMENT = 3;\n-\n-    /**\n-     * The trace type id  for result sets.\n-     */\n-    protected static final int RESULT_SET = 4;\n-\n-    /**\n-     * The trace type id  for result set meta data objects.\n-     */\n-    protected static final int RESULT_SET_META_DATA = 5;\n-\n-    /**\n-     * The trace type id  for savepoint objects.\n-     */\n-    protected static final int SAVEPOINT = 6;\n-\n-    /**\n-     * The trace type id  for statements.\n-     */\n-    protected static final int STATEMENT = 8;\n-\n-    /**\n-     * The trace type id  for blobs.\n-     */\n-    protected static final int BLOB = 9;\n-\n-    /**\n-     * The trace type id  for clobs.\n-     */\n-    protected static final int CLOB = 10;\n-\n-    /**\n-     * The trace type id  for parameter meta data objects.\n-     */\n-    protected static final int PARAMETER_META_DATA = 11;\n-\n-    /**\n-     * The trace type id  for data sources.\n-     */\n-    protected static final int DATA_SOURCE = 12;\n-\n-    /**\n-     * The trace type id  for XA data sources.\n-     */\n-    protected static final int XA_DATA_SOURCE = 13;\n-\n-    /**\n-     * The trace type id  for transaction ids.\n-     */\n-    protected static final int XID = 15;\n-\n-    /**\n-     * The trace type id  for array objects.\n-     */\n-    protected static final int ARRAY = 16;\n-\n-    /**\n-     * The trace type id  for SQLXML objects.\n-     */\n-    protected static final int SQLXML = 17;\n-\n-    private static final int LAST = SQLXML + 1;\n-    private static final AtomicIntegerArray ID = new AtomicIntegerArray(LAST);\n-\n-    private static final String[] PREFIX = { \"call\", \"conn\", \"dbMeta\", \"prep\",\n-            \"rs\", \"rsMeta\", \"sp\", \"ex\", \"stat\", \"blob\", \"clob\", \"pMeta\", \"ds\",\n-            \"xads\", \"xares\", \"xid\", \"ar\", \"sqlxml\" };\n-\n-    private static final SQLException SQL_OOME = DbException.SQL_OOME;\n-\n-    /**\n-     * The trace module used by this object.\n-     */\n-    protected Trace trace;\n-\n-    private int traceType;\n-    private int id;\n-\n-    /**\n-     * Set the options to use when writing trace message.\n-     *\n-     * @param trace the trace object\n-     * @param type the trace object type\n-     * @param id the trace object id\n-     */\n-    protected void setTrace(Trace trace, int type, int id) {\n-        this.trace = trace;\n-        this.traceType = type;\n-        this.id = id;\n+  /**\n+   * The trace type id  for callable statements.\n+   */\n+  protected static final int CALLABLE_STATEMENT = 0;\n+\n+  /**\n+   * The trace type id  for connections.\n+   */\n+  protected static final int CONNECTION = 1;\n+\n+  /**\n+   * The trace type id  for database meta data objects.\n+   */\n+  protected static final int DATABASE_META_DATA = 2;\n+\n+  /**\n+   * The trace type id  for prepared statements.\n+   */\n+  protected static final int PREPARED_STATEMENT = 3;\n+\n+  /**\n+   * The trace type id  for result sets.\n+   */\n+  protected static final int RESULT_SET = 4;\n+\n+  /**\n+   * The trace type id  for result set meta data objects.\n+   */\n+  protected static final int RESULT_SET_META_DATA = 5;\n+\n+  /**\n+   * The trace type id  for savepoint objects.\n+   */\n+  protected static final int SAVEPOINT = 6;\n+\n+  /**\n+   * The trace type id  for statements.\n+   */\n+  protected static final int STATEMENT = 8;\n+\n+  /**\n+   * The trace type id  for blobs.\n+   */\n+  protected static final int BLOB = 9;\n+\n+  /**\n+   * The trace type id  for clobs.\n+   */\n+  protected static final int CLOB = 10;\n+\n+  /**\n+   * The trace type id  for parameter meta data objects.\n+   */\n+  protected static final int PARAMETER_META_DATA = 11;\n+\n+  /**\n+   * The trace type id  for data sources.\n+   */\n+  protected static final int DATA_SOURCE = 12;\n+\n+  /**\n+   * The trace type id  for XA data sources.\n+   */\n+  protected static final int XA_DATA_SOURCE = 13;\n+\n+  /**\n+   * The trace type id  for transaction ids.\n+   */\n+  protected static final int XID = 15;\n+\n+  /**\n+   * The trace type id  for array objects.\n+   */\n+  protected static final int ARRAY = 16;\n+\n+  /**\n+   * The trace type id  for SQLXML objects.\n+   */\n+  protected static final int SQLXML = 17;\n+\n+  private static final int LAST = SQLXML + 1;\n+  private static final AtomicIntegerArray ID = new AtomicIntegerArray(LAST);\n+\n+  private static final String[] PREFIX = {\"call\", \"conn\", \"dbMeta\", \"prep\",\n+      \"rs\", \"rsMeta\", \"sp\", \"ex\", \"stat\", \"blob\", \"clob\", \"pMeta\", \"ds\",\n+      \"xads\", \"xares\", \"xid\", \"ar\", \"sqlxml\"};\n+\n+  private static final SQLException SQL_OOME = DbException.SQL_OOME;\n+\n+  /**\n+   * The trace module used by this object.\n+   */\n+  protected Trace trace;\n+\n+  private int traceType;\n+  private int id;\n+\n+  /**\n+   * Set the options to use when writing trace message.\n+   *\n+   * @param trace the trace object\n+   * @param type  the trace object type\n+   * @param id    the trace object id\n+   */\n+  protected void setTrace(Trace trace, int type, int id) {\n+    this.trace = trace;\n+    this.traceType = type;\n+    this.id = id;\n+  }\n+\n+  /**\n+   * INTERNAL\n+   */\n+  public int getTraceId() {\n+    return id;\n+  }\n+\n+  /**\n+   * INTERNAL\n+   */\n+  public String getTraceObjectName() {\n+    return PREFIX[traceType] + id;\n+  }\n+\n+  /**\n+   * Get the next trace object id for this object type.\n+   *\n+   * @param type the object type\n+   * @return the new trace object id\n+   */\n+  protected static int getNextId(int type) {\n+    return ID.getAndIncrement(type);\n+  }\n+\n+  /**\n+   * Check if the debug trace level is enabled.\n+   *\n+   * @return true if it is\n+   */\n+  protected boolean isDebugEnabled() {\n+    return trace.isDebugEnabled();\n+  }\n+\n+  /**\n+   * Check if info trace level is enabled.\n+   *\n+   * @return true if it is\n+   */\n+  protected boolean isInfoEnabled() {\n+    return trace.isInfoEnabled();\n+  }\n+\n+  /**\n+   * Write trace information as an assignment in the form\n+   * className prefixId = objectName.value.\n+   *\n+   * @param className the class name of the result\n+   * @param newType   the prefix type\n+   * @param newId     the trace object id of the created object\n+   * @param value     the value to assign this new object to\n+   */\n+  protected void debugCodeAssign(String className, int newType, int newId,\n+                                 String value) {\n+    if (trace.isDebugEnabled()) {\n+      trace.debugCode(className + \" \" + PREFIX[newType] +\n+          newId + \" = \" + getTraceObjectName() + \".\" + value + \";\");\n     }\n-\n-    /**\n-     * INTERNAL\n-     */\n-    public int getTraceId() {\n-        return id;\n+  }\n+\n+  /**\n+   * Write trace information as a method call in the form\n+   * objectName.methodName().\n+   *\n+   * @param methodName the method name\n+   */\n+  protected void debugCodeCall(String methodName) {\n+    if (trace.isDebugEnabled()) {\n+      trace.debugCode(getTraceObjectName() + \".\" + methodName + \"();\");\n     }\n-\n-    /**\n-     * INTERNAL\n-     */\n-    public String getTraceObjectName() {\n-        return PREFIX[traceType] + id;\n+  }\n+\n+  /**\n+   * Write trace information as a method call in the form\n+   * objectName.methodName(param) where the parameter is formatted as a long\n+   * value.\n+   *\n+   * @param methodName the method name\n+   * @param param      one single long parameter\n+   */\n+  protected void debugCodeCall(String methodName, long param) {\n+    if (trace.isDebugEnabled()) {\n+      trace.debugCode(getTraceObjectName() + \".\" +\n+          methodName + \"(\" + param + \");\");\n     }\n-\n-    /**\n-     * Get the next trace object id for this object type.\n-     *\n-     * @param type the object type\n-     * @return the new trace object id\n-     */\n-    protected static int getNextId(int type) {\n-        return ID.getAndIncrement(type);\n+  }\n+\n+  /**\n+   * Write trace information as a method call in the form\n+   * objectName.methodName(param) where the parameter is formatted as a Java\n+   * string.\n+   *\n+   * @param methodName the method name\n+   * @param param      one single string parameter\n+   */\n+  protected void debugCodeCall(String methodName, String param) {\n+    if (trace.isDebugEnabled()) {\n+      trace.debugCode(getTraceObjectName() + \".\" +\n+          methodName + \"(\" + quote(param) + \");\");\n     }\n-\n-    /**\n-     * Check if the debug trace level is enabled.\n-     *\n-     * @return true if it is\n-     */\n-    protected boolean isDebugEnabled() {\n-        return trace.isDebugEnabled();\n+  }\n+\n+  /**\n+   * Write trace information in the form objectName.text.\n+   *\n+   * @param text the trace text\n+   */\n+  protected void debugCode(String text) {\n+    if (trace.isDebugEnabled()) {\n+      trace.debugCode(getTraceObjectName() + \".\" + text);\n     }\n-\n-    /**\n-     * Check if info trace level is enabled.\n-     *\n-     * @return true if it is\n-     */\n-    protected boolean isInfoEnabled() {\n-        return trace.isInfoEnabled();\n+  }\n+\n+  /**\n+   * Format a string as a Java string literal.\n+   *\n+   * @param s the string to convert\n+   * @return the Java string literal\n+   */\n+  protected static String quote(String s) {\n+    return StringUtils.quoteJavaString(s);\n+  }\n+\n+  /**\n+   * Format a time to the Java source code that represents this object.\n+   *\n+   * @param x the time to convert\n+   * @return the Java source code\n+   */\n+  protected static String quoteTime(java.sql.Time x) {\n+    if (x == null) {\n+      return \"null\";\n     }\n-\n-    /**\n-     * Write trace information as an assignment in the form\n-     * className prefixId = objectName.value.\n-     *\n-     * @param className the class name of the result\n-     * @param newType the prefix type\n-     * @param newId the trace object id of the created object\n-     * @param value the value to assign this new object to\n-     */\n-    protected void debugCodeAssign(String className, int newType, int newId,\n-            String value) {\n-        if (trace.isDebugEnabled()) {\n-            trace.debugCode(className + \" \" + PREFIX[newType] +\n-                    newId + \" = \" + getTraceObjectName() + \".\" + value + \";\");\n-        }\n-    }\n-\n-    /**\n-     * Write trace information as a method call in the form\n-     * objectName.methodName().\n-     *\n-     * @param methodName the method name\n-     */\n-    protected void debugCodeCall(String methodName) {\n-        if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" + methodName + \"();\");\n-        }\n+    return \"Time.valueOf(\\\"\" + x.toString() + \"\\\")\";\n+  }\n+\n+  /**\n+   * Format a timestamp to the Java source code that represents this object.\n+   *\n+   * @param x the timestamp to convert\n+   * @return the Java source code\n+   */\n+  protected static String quoteTimestamp(java.sql.Timestamp x) {\n+    if (x == null) {\n+      return \"null\";\n     }\n-\n-    /**\n-     * Write trace information as a method call in the form\n-     * objectName.methodName(param) where the parameter is formatted as a long\n-     * value.\n-     *\n-     * @param methodName the method name\n-     * @param param one single long parameter\n-     */\n-    protected void debugCodeCall(String methodName, long param) {\n-        if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" +\n-                    methodName + \"(\" + param + \");\");\n-        }\n+    return \"Timestamp.valueOf(\\\"\" + x.toString() + \"\\\")\";\n+  }\n+\n+  /**\n+   * Format a date to the Java source code that represents this object.\n+   *\n+   * @param x the date to convert\n+   * @return the Java source code\n+   */\n+  protected static String quoteDate(java.sql.Date x) {\n+    if (x == null) {\n+      return \"null\";\n     }\n-\n-    /**\n-     * Write trace information as a method call in the form\n-     * objectName.methodName(param) where the parameter is formatted as a Java\n-     * string.\n-     *\n-     * @param methodName the method name\n-     * @param param one single string parameter\n-     */\n-    protected void debugCodeCall(String methodName, String param) {\n-        if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" +\n-                    methodName + \"(\" + quote(param) + \");\");\n-        }\n+    return \"Date.valueOf(\\\"\" + x.toString() + \"\\\")\";\n+  }\n+\n+  /**\n+   * Format a big decimal to the Java source code that represents this object.\n+   *\n+   * @param x the big decimal to convert\n+   * @return the Java source code\n+   */\n+  protected static String quoteBigDecimal(BigDecimal x) {\n+    if (x == null) {\n+      return \"null\";\n     }\n-\n-    /**\n-     * Write trace information in the form objectName.text.\n-     *\n-     * @param text the trace text\n-     */\n-    protected void debugCode(String text) {\n-        if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" + text);\n-        }\n+    return \"new BigDecimal(\\\"\" + x.toString() + \"\\\")\";\n+  }\n+\n+  /**\n+   * Format a byte array to the Java source code that represents this object.\n+   *\n+   * @param x the byte array to convert\n+   * @return the Java source code\n+   */\n+  protected static String quoteBytes(byte[] x) {\n+    if (x == null) {\n+      return \"null\";\n     }\n-\n-    /**\n-     * Format a string as a Java string literal.\n-     *\n-     * @param s the string to convert\n-     * @return the Java string literal\n-     */\n-    protected static String quote(String s) {\n-        return StringUtils.quoteJavaString(s);\n+    StringBuilder builder = new StringBuilder(x.length * 2 + 45)\n+        .append(\"org.h2.util.StringUtils.convertHexToBytes(\\\"\");\n+    return StringUtils.convertBytesToHex(builder, x).append(\"\\\")\").toString();\n+  }\n+\n+  /**\n+   * Format a string array to the Java source code that represents this\n+   * object.\n+   *\n+   * @param s the string array to convert\n+   * @return the Java source code\n+   */\n+  protected static String quoteArray(String[] s) {\n+    return StringUtils.quoteJavaStringArray(s);\n+  }\n+\n+  /**\n+   * Format an int array to the Java source code that represents this object.\n+   *\n+   * @param s the int array to convert\n+   * @return the Java source code\n+   */\n+  protected static String quoteIntArray(int[] s) {\n+    return StringUtils.quoteJavaIntArray(s);\n+  }\n+\n+  /**\n+   * Format a map to the Java source code that represents this object.\n+   *\n+   * @param map the map to convert\n+   * @return the Java source code\n+   */\n+  protected static String quoteMap(Map<String, Class<?>> map) {\n+    if (map == null) {\n+      return \"null\";\n     }\n-\n-    /**\n-     * Format a time to the Java source code that represents this object.\n-     *\n-     * @param x the time to convert\n-     * @return the Java source code\n-     */\n-    protected static String quoteTime(java.sql.Time x) {\n-        if (x == null) {\n-            return \"null\";\n-        }\n-        return \"Time.valueOf(\\\"\" + x.toString() + \"\\\")\";\n+    if (map.size() == 0) {\n+      return \"new Map()\";\n     }\n-\n-    /**\n-     * Format a timestamp to the Java source code that represents this object.\n-     *\n-     * @param x the timestamp to convert\n-     * @return the Java source code\n-     */\n-    protected static String quoteTimestamp(java.sql.Timestamp x) {\n-        if (x == null) {\n-            return \"null\";\n+    return \"new Map() /* \" + map.toString() + \" */\";\n+  }\n+\n+  /**\n+   * Log an exception and convert it to a SQL exception if required.\n+   *\n+   * @param ex the exception\n+   * @return the SQL exception object\n+   */\n+  protected SQLException logAndConvert(Throwable ex) {\n+    SQLException e = null;\n+    try {\n+      e = DbException.toSQLException(ex);\n+      if (trace == null) {\n+        DbException.traceThrowable(e);\n+      } else {\n+        int errorCode = e.getErrorCode();\n+        if (errorCode >= 23000 && errorCode < 24000) {\n+          trace.info(e, \"exception\");\n+        } else {\n+          trace.error(e, \"exception\");\n         }\n-        return \"Timestamp.valueOf(\\\"\" + x.toString() + \"\\\")\";\n-    }\n-\n-    /**\n-     * Format a date to the Java source code that represents this object.\n-     *\n-     * @param x the date to convert\n-     * @return the Java source code\n-     */\n-    protected static String quoteDate(java.sql.Date x) {\n-        if (x == null) {\n-            return \"null\";\n-        }\n-        return \"Date.valueOf(\\\"\" + x.toString() + \"\\\")\";\n-    }\n-\n-    /**\n-     * Format a big decimal to the Java source code that represents this object.\n-     *\n-     * @param x the big decimal to convert\n-     * @return the Java source code\n-     */\n-    protected static String quoteBigDecimal(BigDecimal x) {\n-        if (x == null) {\n-            return \"null\";\n-        }\n-        return \"new BigDecimal(\\\"\" + x.toString() + \"\\\")\";\n-    }\n-\n-    /**\n-     * Format a byte array to the Java source code that represents this object.\n-     *\n-     * @param x the byte array to convert\n-     * @return the Java source code\n-     */\n-    protected static String quoteBytes(byte[] x) {\n-        if (x == null) {\n-            return \"null\";\n-        }\n-        StringBuilder builder = new StringBuilder(x.length * 2 + 45)\n-                .append(\"org.h2.util.StringUtils.convertHexToBytes(\\\"\");\n-        return StringUtils.convertBytesToHex(builder, x).append(\"\\\")\").toString();\n-    }\n-\n-    /**\n-     * Format a string array to the Java source code that represents this\n-     * object.\n-     *\n-     * @param s the string array to convert\n-     * @return the Java source code\n-     */\n-    protected static String quoteArray(String[] s) {\n-        return StringUtils.quoteJavaStringArray(s);\n-    }\n-\n-    /**\n-     * Format an int array to the Java source code that represents this object.\n-     *\n-     * @param s the int array to convert\n-     * @return the Java source code\n-     */\n-    protected static String quoteIntArray(int[] s) {\n-        return StringUtils.quoteJavaIntArray(s);\n-    }\n-\n-    /**\n-     * Format a map to the Java source code that represents this object.\n-     *\n-     * @param map the map to convert\n-     * @return the Java source code\n-     */\n-    protected static String quoteMap(Map<String, Class<?>> map) {\n-        if (map == null) {\n-            return \"null\";\n-        }\n-        if (map.size() == 0) {\n-            return \"new Map()\";\n-        }\n-        return \"new Map() /* \" + map.toString() + \" */\";\n-    }\n-\n-    /**\n-     * Log an exception and convert it to a SQL exception if required.\n-     *\n-     * @param ex the exception\n-     * @return the SQL exception object\n-     */\n-    protected SQLException logAndConvert(Throwable ex) {\n-        SQLException e = null;\n+      }\n+    } catch (Throwable another) {\n+      if (e == null) {\n         try {\n-            e = DbException.toSQLException(ex);\n-            if (trace == null) {\n-                DbException.traceThrowable(e);\n-            } else {\n-                int errorCode = e.getErrorCode();\n-                if (errorCode >= 23000 && errorCode < 24000) {\n-                    trace.info(e, \"exception\");\n-                } else {\n-                    trace.error(e, \"exception\");\n-                }\n-            }\n-        } catch(Throwable another) {\n-            if (e == null) {\n-                try {\n-                    e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n-                } catch (OutOfMemoryError | NoClassDefFoundError ignored) {\n-                    return SQL_OOME;\n-                }\n-            }\n-            e.addSuppressed(another);\n+          e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n+        } catch (OutOfMemoryError | NoClassDefFoundError ignored) {\n+          return SQL_OOME;\n         }\n-        return e;\n+      }\n+      e.addSuppressed(another);\n     }\n-\n-    /**\n-     * Get a SQL exception meaning this feature is not supported.\n-     *\n-     * @param message the message\n-     * @return the SQL exception\n-     */\n-    protected SQLException unsupported(String message) {\n-        try {\n-            throw DbException.getUnsupportedException(message);\n-        } catch (Exception e) {\n-            return logAndConvert(e);\n-        }\n+    return e;\n+  }\n+\n+  /**\n+   * Get a SQL exception meaning this feature is not supported.\n+   *\n+   * @param message the message\n+   * @return the SQL exception\n+   */\n+  protected SQLException unsupported(String message) {\n+    try {\n+      throw DbException.getUnsupportedException(message);\n+    } catch (Exception e) {\n+      return logAndConvert(e);\n     }\n+  }\n \n }\n",
            "diff_size": 499
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/398/TraceObject.java\nindex 22a622ab735..9b402dc6a25 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/398/TraceObject.java\n@@ -374,7 +374,7 @@ public class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n@@ -401,4 +401,4 @@ public class TraceObject {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/398/TraceObject.java\nindex 22a622ab735..313aefe2ecb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/398/TraceObject.java\n@@ -9,109 +9,157 @@ import java.math.BigDecimal;\n import java.sql.SQLException;\n import java.util.Map;\n import java.util.concurrent.atomic.AtomicIntegerArray;\n-\n import org.h2.api.ErrorCode;\n import org.h2.util.StringUtils;\n \n /**\n  * The base class for objects that can print trace information about themselves.\n  */\n+\n+\n public class TraceObject {\n \n     /**\n      * The trace type id  for callable statements.\n      */\n+\n+\n     protected static final int CALLABLE_STATEMENT = 0;\n \n     /**\n      * The trace type id  for connections.\n      */\n+\n+\n     protected static final int CONNECTION = 1;\n \n     /**\n      * The trace type id  for database meta data objects.\n      */\n+\n+\n     protected static final int DATABASE_META_DATA = 2;\n \n     /**\n      * The trace type id  for prepared statements.\n      */\n+\n+\n     protected static final int PREPARED_STATEMENT = 3;\n \n     /**\n      * The trace type id  for result sets.\n      */\n+\n+\n     protected static final int RESULT_SET = 4;\n \n     /**\n      * The trace type id  for result set meta data objects.\n      */\n+\n+\n     protected static final int RESULT_SET_META_DATA = 5;\n \n     /**\n      * The trace type id  for savepoint objects.\n      */\n+\n+\n     protected static final int SAVEPOINT = 6;\n \n     /**\n      * The trace type id  for statements.\n      */\n+\n+\n     protected static final int STATEMENT = 8;\n \n     /**\n      * The trace type id  for blobs.\n      */\n+\n+\n     protected static final int BLOB = 9;\n \n     /**\n      * The trace type id  for clobs.\n      */\n+\n+\n     protected static final int CLOB = 10;\n \n     /**\n      * The trace type id  for parameter meta data objects.\n      */\n+\n+\n     protected static final int PARAMETER_META_DATA = 11;\n \n     /**\n      * The trace type id  for data sources.\n      */\n+\n+\n     protected static final int DATA_SOURCE = 12;\n \n     /**\n      * The trace type id  for XA data sources.\n      */\n+\n+\n     protected static final int XA_DATA_SOURCE = 13;\n \n     /**\n      * The trace type id  for transaction ids.\n      */\n+\n+\n     protected static final int XID = 15;\n \n     /**\n      * The trace type id  for array objects.\n      */\n+\n+\n     protected static final int ARRAY = 16;\n \n     /**\n      * The trace type id  for SQLXML objects.\n      */\n-    protected static final int SQLXML = 17;\n \n+\n+    protected static final int SQLXML = 17;\n     private static final int LAST = SQLXML + 1;\n     private static final AtomicIntegerArray ID = new AtomicIntegerArray(LAST);\n-\n-    private static final String[] PREFIX = { \"call\", \"conn\", \"dbMeta\", \"prep\",\n-            \"rs\", \"rsMeta\", \"sp\", \"ex\", \"stat\", \"blob\", \"clob\", \"pMeta\", \"ds\",\n-            \"xads\", \"xares\", \"xid\", \"ar\", \"sqlxml\" };\n-\n+    private static final String[] PREFIX = {\n+        \"call\",\n+        \"conn\",\n+        \"dbMeta\",\n+        \"prep\",\n+        \"rs\",\n+        \"rsMeta\",\n+        \"sp\",\n+        \"ex\",\n+        \"stat\",\n+        \"blob\",\n+        \"clob\",\n+        \"pMeta\",\n+        \"ds\",\n+        \"xads\",\n+        \"xares\",\n+        \"xid\",\n+        \"ar\",\n+        \"sqlxml\"\n+    };\n     private static final SQLException SQL_OOME = DbException.SQL_OOME;\n \n     /**\n      * The trace module used by this object.\n      */\n-    protected Trace trace;\n \n+\n+    protected Trace trace;\n     private int traceType;\n     private int id;\n \n@@ -122,6 +170,8 @@ public class TraceObject {\n      * @param type the trace object type\n      * @param id the trace object id\n      */\n+\n+\n     protected void setTrace(Trace trace, int type, int id) {\n         this.trace = trace;\n         this.traceType = type;\n@@ -131,6 +181,8 @@ public class TraceObject {\n     /**\n      * INTERNAL\n      */\n+\n+\n     public int getTraceId() {\n         return id;\n     }\n@@ -138,6 +190,8 @@ public class TraceObject {\n     /**\n      * INTERNAL\n      */\n+\n+\n     public String getTraceObjectName() {\n         return PREFIX[traceType] + id;\n     }\n@@ -148,6 +202,8 @@ public class TraceObject {\n      * @param type the object type\n      * @return the new trace object id\n      */\n+\n+\n     protected static int getNextId(int type) {\n         return ID.getAndIncrement(type);\n     }\n@@ -157,6 +213,8 @@ public class TraceObject {\n      *\n      * @return true if it is\n      */\n+\n+\n     protected boolean isDebugEnabled() {\n         return trace.isDebugEnabled();\n     }\n@@ -166,6 +224,8 @@ public class TraceObject {\n      *\n      * @return true if it is\n      */\n+\n+\n     protected boolean isInfoEnabled() {\n         return trace.isInfoEnabled();\n     }\n@@ -179,11 +239,14 @@ public class TraceObject {\n      * @param newId the trace object id of the created object\n      * @param value the value to assign this new object to\n      */\n-    protected void debugCodeAssign(String className, int newType, int newId,\n-            String value) {\n+\n+\n+    protected void debugCodeAssign(String className, int newType, int newId, String value) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(className + \" \" + PREFIX[newType] +\n-                    newId + \" = \" + getTraceObjectName() + \".\" + value + \";\");\n+            trace.debugCode(className + \" \"\n+            + PREFIX[newType] + newId + \" = \"\n+            + getTraceObjectName() + \".\"\n+            + value + \";\");\n         }\n     }\n \n@@ -193,9 +256,12 @@ public class TraceObject {\n      *\n      * @param methodName the method name\n      */\n+\n+\n     protected void debugCodeCall(String methodName) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" + methodName + \"();\");\n+            trace.debugCode(getTraceObjectName() + \".\"\n+            + methodName + \"();\");\n         }\n     }\n \n@@ -207,10 +273,13 @@ public class TraceObject {\n      * @param methodName the method name\n      * @param param one single long parameter\n      */\n+\n+\n     protected void debugCodeCall(String methodName, long param) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" +\n-                    methodName + \"(\" + param + \");\");\n+            trace.debugCode(getTraceObjectName() + \".\"\n+            + methodName + \"(\"\n+            + param + \");\");\n         }\n     }\n \n@@ -222,10 +291,13 @@ public class TraceObject {\n      * @param methodName the method name\n      * @param param one single string parameter\n      */\n+\n+\n     protected void debugCodeCall(String methodName, String param) {\n         if (trace.isDebugEnabled()) {\n-            trace.debugCode(getTraceObjectName() + \".\" +\n-                    methodName + \"(\" + quote(param) + \");\");\n+            trace.debugCode(getTraceObjectName() + \".\"\n+            + methodName + \"(\"\n+            + quote(param) + \");\");\n         }\n     }\n \n@@ -234,6 +306,8 @@ public class TraceObject {\n      *\n      * @param text the trace text\n      */\n+\n+\n     protected void debugCode(String text) {\n         if (trace.isDebugEnabled()) {\n             trace.debugCode(getTraceObjectName() + \".\" + text);\n@@ -246,6 +320,8 @@ public class TraceObject {\n      * @param s the string to convert\n      * @return the Java string literal\n      */\n+\n+\n     protected static String quote(String s) {\n         return StringUtils.quoteJavaString(s);\n     }\n@@ -256,6 +332,8 @@ public class TraceObject {\n      * @param x the time to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteTime(java.sql.Time x) {\n         if (x == null) {\n             return \"null\";\n@@ -269,6 +347,8 @@ public class TraceObject {\n      * @param x the timestamp to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteTimestamp(java.sql.Timestamp x) {\n         if (x == null) {\n             return \"null\";\n@@ -282,6 +362,8 @@ public class TraceObject {\n      * @param x the date to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteDate(java.sql.Date x) {\n         if (x == null) {\n             return \"null\";\n@@ -295,6 +377,8 @@ public class TraceObject {\n      * @param x the big decimal to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteBigDecimal(BigDecimal x) {\n         if (x == null) {\n             return \"null\";\n@@ -308,12 +392,13 @@ public class TraceObject {\n      * @param x the byte array to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteBytes(byte[] x) {\n         if (x == null) {\n             return \"null\";\n         }\n-        StringBuilder builder = new StringBuilder(x.length * 2 + 45)\n-                .append(\"org.h2.util.StringUtils.convertHexToBytes(\\\"\");\n+        StringBuilder builder = new StringBuilder(x.length * 2 + 45).append(\"org.h2.util.StringUtils.convertHexToBytes(\\\"\");\n         return StringUtils.convertBytesToHex(builder, x).append(\"\\\")\").toString();\n     }\n \n@@ -324,6 +409,8 @@ public class TraceObject {\n      * @param s the string array to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteArray(String[] s) {\n         return StringUtils.quoteJavaStringArray(s);\n     }\n@@ -334,6 +421,8 @@ public class TraceObject {\n      * @param s the int array to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteIntArray(int[] s) {\n         return StringUtils.quoteJavaIntArray(s);\n     }\n@@ -344,6 +433,8 @@ public class TraceObject {\n      * @param map the map to convert\n      * @return the Java source code\n      */\n+\n+\n     protected static String quoteMap(Map<String, Class<?>> map) {\n         if (map == null) {\n             return \"null\";\n@@ -360,6 +451,8 @@ public class TraceObject {\n      * @param ex the exception\n      * @return the SQL exception object\n      */\n+\n+\n     protected SQLException logAndConvert(Throwable ex) {\n         SQLException e = null;\n         try {\n@@ -374,7 +467,7 @@ public class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n@@ -393,6 +486,8 @@ public class TraceObject {\n      * @param message the message\n      * @return the SQL exception\n      */\n+\n+\n     protected SQLException unsupported(String message) {\n         try {\n             throw DbException.getUnsupportedException(message);\n@@ -401,4 +496,4 @@ public class TraceObject {\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 120
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/398/TraceObject.java\nindex 22a622ab735..05ee0c52ac0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/398/TraceObject.java\n@@ -374,7 +374,7 @@ public class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/398/TraceObject.java\nindex 22a622ab735..05ee0c52ac0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/398/TraceObject.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/398/TraceObject.java\n@@ -374,7 +374,7 @@ public class TraceObject {\n                     trace.error(e, \"exception\");\n                 }\n             }\n-        } catch(Throwable another) {\n+        } catch (Throwable another) {\n             if (e == null) {\n                 try {\n                     e = new SQLException(\"GeneralError\", \"HY000\", ErrorCode.GENERAL_ERROR_1, ex);\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}