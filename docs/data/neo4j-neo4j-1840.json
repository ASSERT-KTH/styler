{
    "project_name": "neo4j-neo4j",
    "error_id": "1840",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1840/RecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1840/RecordFormat.java\nindex a909ab44f7e..bd08d7aadbd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1840/RecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1840/RecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format;\n \n import java.io.IOException;\n@@ -57,7 +58,7 @@ public interface RecordFormat<RECORD extends AbstractBaseRecord>\n      * @param storeHeader {@link StoreHeader} with header information from the store.\n      * @return record size of records of this format and store.\n      */\n-    int getRecordSize( StoreHeader storeHeader );\n+    int getRecordSize(StoreHeader storeHeader);\n \n     /**\n      * @return header size of records of this format. This is only applicable to {@link DynamicRecord}\n@@ -70,25 +71,25 @@ public interface RecordFormat<RECORD extends AbstractBaseRecord>\n      * is in use or not.\n      *\n      * @param cursor {@link PageCursor} to read data from, placed at the start of record to determine\n-     * in use status of.\n+     *               in use status of.\n      * @return whether or not the record at where the {@code cursor} is placed is in use.\n      */\n-    boolean isInUse( PageCursor cursor );\n+    boolean isInUse(PageCursor cursor);\n \n     /**\n      * Reads data from {@code cursor} of the format specified by this implementation into {@code record}.\n      * The cursor is placed at the beginning of the record id, which also {@code record}\n      * {@link AbstractBaseRecord#getId() refers to}.\n      *\n-     * @param record to put read data into, replacing any existing data in that record object.\n-     * @param cursor {@link PageCursor} to read data from.\n-     * @param mode {@link RecordLoad} mode of reading.\n-     * See {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad, PageCursorTracer)} for more information.\n+     * @param record     to put read data into, replacing any existing data in that record object.\n+     * @param cursor     {@link PageCursor} to read data from.\n+     * @param mode       {@link RecordLoad} mode of reading.\n+     *                   See {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad, PageCursorTracer)} for more information.\n      * @param recordSize size of records of this format. This is passed in like this since not all formats\n-     * know the record size in advance, but may be read from store header when opening the store.\n+     *                   know the record size in advance, but may be read from store header when opening the store.\n      * @throws IOException on error reading.\n      */\n-    void read( RECORD record, PageCursor cursor, RecordLoad mode, int recordSize, int recordsPerPage ) throws IOException;\n+    void read(RECORD record, PageCursor cursor, RecordLoad mode, int recordSize, int recordsPerPage) throws IOException;\n \n     /**\n      * Called when all changes about a record has been gathered\n@@ -99,32 +100,32 @@ public interface RecordFormat<RECORD extends AbstractBaseRecord>\n      * additional information which needs to be written to the command, carried back inside the record\n      * itself.\n      *\n-     * @param record record to prepare, potentially updating it with more information before converting\n-     * into a command.\n-     * @param recordSize size of each record.\n-     * @param idSequence source of new ids if such are required be generated.\n+     * @param record       record to prepare, potentially updating it with more information before converting\n+     *                     into a command.\n+     * @param recordSize   size of each record.\n+     * @param idSequence   source of new ids if such are required be generated.\n      * @param cursorTracer underlying page cursor tracer\n      */\n-    void prepare( RECORD record, int recordSize, IdSequence idSequence, PageCursorTracer cursorTracer );\n+    void prepare(RECORD record, int recordSize, IdSequence idSequence, PageCursorTracer cursorTracer);\n \n     /**\n      * Writes record contents to the {@code cursor} in the format specified by this implementation.\n      *\n-     * @param record containing data to write.\n-     * @param cursor {@link PageCursor} to write the record data into.\n-     * @param recordSize size of records of this format. This is passed in like this since not all formats\n-     * know the record size in advance, but may be read from store header when opening the store.\n+     * @param record         containing data to write.\n+     * @param cursor         {@link PageCursor} to write the record data into.\n+     * @param recordSize     size of records of this format. This is passed in like this since not all formats\n+     *                       know the record size in advance, but may be read from store header when opening the store.\n      * @param recordsPerPage number of records per page. All stores know in advance how many records of particular format can fit on a page.\n      * @throws IOException on error writing.\n      */\n-    void write( RECORD record, PageCursor cursor, int recordSize, int recordsPerPage ) throws IOException;\n+    void write(RECORD record, PageCursor cursor, int recordSize, int recordsPerPage) throws IOException;\n \n     /**\n      * @param record to obtain \"next\" reference from.\n      * @return \"next\" reference of records of this type.\n      * @see RecordStore#getNextRecordReference(AbstractBaseRecord)\n      */\n-    long getNextRecordReference( RECORD record );\n+    long getNextRecordReference(RECORD record);\n \n     /**\n      * Can be used to compare against another {@link RecordFormat}, returns {@code true} the format\n@@ -134,7 +135,7 @@ public interface RecordFormat<RECORD extends AbstractBaseRecord>\n      * @return whether or not the other format is the same as this one.\n      */\n     @Override\n-    boolean equals( Object otherFormat );\n+    boolean equals(Object otherFormat);\n \n     /**\n      * To match {@link #equals(Object)}.\n@@ -144,15 +145,17 @@ public interface RecordFormat<RECORD extends AbstractBaseRecord>\n \n     /**\n      * Maximum number that can be used to as id in specified format\n+     *\n      * @return maximum possible id\n      */\n     long getMaxId();\n \n     /**\n      * Page size of store file represented by current record format\n+     *\n      * @param pageCachePageSize page cache page size\n-     * @param recordSize store format record size\n+     * @param recordSize        store format record size\n      * @return page size for file\n      */\n-    int getPageSize( int pageCachePageSize, int recordSize );\n+    int getPageSize(int pageCachePageSize, int recordSize);\n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}