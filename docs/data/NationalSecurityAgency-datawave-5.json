{
    "project_name": "NationalSecurityAgency-datawave",
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "21",
                "severity": "error",
                "message": "Accumulo non-public classes imported",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
            }
        ]
    },
    "source_code": "import org.apache.accumulo.core.client.TableNotFoundException;\nimport org.apache.accumulo.core.client.admin.TableOperations;\nimport org.apache.accumulo.core.conf.Property;\nimport org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.io.Text;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/styler/5/ShardTableConfigHelper.java\nindex da4e4536787..cf76ae9d806 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/styler/5/ShardTableConfigHelper.java\n@@ -18,8 +18,9 @@ import org.apache.accumulo.core.client.IteratorSetting;\n import org.apache.accumulo.core.client.IteratorSetting.Column;\n import org.apache.accumulo.core.client.TableNotFoundException;\n import org.apache.accumulo.core.client.admin.TableOperations;\n-import org.apache.accumulo.core.conf.Property;\n-import org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\n+import\n+org.apache.accumulo.core.conf.Property;\n+ import org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.io.Text;\n import org.apache.hadoop.util.StringUtils;\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/5/ShardTableConfigHelper.java\nindex da4e4536787..542b7bc220d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/intellij/5/ShardTableConfigHelper.java\n@@ -26,216 +26,233 @@ import org.apache.hadoop.util.StringUtils;\n import org.apache.log4j.Logger;\n \n public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n-    \n-    protected static final String SHARDED_TABLET_BALANCER_CLASS = ShardedTableTabletBalancer.class.getName();\n-    \n-    public static final String SHARD_TABLE_BALANCER_CONFIG = \"shard.table.balancer.class\";\n-    protected String shardTableBalancerClass = SHARDED_TABLET_BALANCER_CLASS;\n-    \n-    public static final String ENABLE_BLOOM_FILTERS = \"shard.enable.bloom.filters\";\n-    protected boolean enableBloomFilters = false;\n-    \n-    public static final String MARKINGS_SETUP_ITERATOR_ENABLED = \"markings.setup.iterator.enabled\";\n-    private boolean markingsSetupIteratorEnabled = false;\n-    \n-    public static final String MARKINGS_SETUP_ITERATOR_CONFIG = \"markings.setup.iterator.config\";\n-    private String markingsSetupIteratorConfig;\n-    \n-    public static final String LOCALITY_GROUPS = \"shard.table.locality.groups\";\n-    protected HashMap<String,Set<Text>> localityGroups = new HashMap<>();\n-    \n-    protected static final String SHARD_KEY_FUNCTOR_CLASS = ShardKeyFunctor.class.getName();\n-    \n-    protected Logger log;\n-    \n-    public enum ShardTableType {\n-        SHARD, GIDX, GRIDX, DINDX\n+\n+  protected static final String SHARDED_TABLET_BALANCER_CLASS = ShardedTableTabletBalancer.class.getName();\n+\n+  public static final String SHARD_TABLE_BALANCER_CONFIG = \"shard.table.balancer.class\";\n+  protected String shardTableBalancerClass = SHARDED_TABLET_BALANCER_CLASS;\n+\n+  public static final String ENABLE_BLOOM_FILTERS = \"shard.enable.bloom.filters\";\n+  protected boolean enableBloomFilters = false;\n+\n+  public static final String MARKINGS_SETUP_ITERATOR_ENABLED = \"markings.setup.iterator.enabled\";\n+  private boolean markingsSetupIteratorEnabled = false;\n+\n+  public static final String MARKINGS_SETUP_ITERATOR_CONFIG = \"markings.setup.iterator.config\";\n+  private String markingsSetupIteratorConfig;\n+\n+  public static final String LOCALITY_GROUPS = \"shard.table.locality.groups\";\n+  protected HashMap<String, Set<Text>> localityGroups = new HashMap<>();\n+\n+  protected static final String SHARD_KEY_FUNCTOR_CLASS = ShardKeyFunctor.class.getName();\n+\n+  protected Logger log;\n+\n+  public enum ShardTableType {\n+    SHARD, GIDX, GRIDX, DINDX\n+  }\n+\n+  protected Configuration conf;\n+  protected String tableName;\n+  protected String shardTableName; // shard table\n+  protected String shardGidxTableName; // global index\n+  protected String shardGridxTableName; // global reverse index\n+  protected String shardDictionaryTableName;\n+  protected ShardTableType tableType;\n+\n+  @Override\n+  public void setup(String tableName, Configuration config, Logger log) throws IllegalArgumentException {\n+\n+    this.log = log;\n+    this.conf = config;\n+\n+    shardTableName = conf.get(ShardedDataTypeHandler.SHARD_TNAME, null);\n+    shardGidxTableName = conf.get(ShardedDataTypeHandler.SHARD_GIDX_TNAME, null);\n+    shardGridxTableName = conf.get(ShardedDataTypeHandler.SHARD_GRIDX_TNAME, null);\n+    shardDictionaryTableName = conf.get(ShardedDataTypeHandler.SHARD_DINDX_NAME, null);\n+    markingsSetupIteratorEnabled = conf.getBoolean(MARKINGS_SETUP_ITERATOR_ENABLED, markingsSetupIteratorEnabled);\n+    markingsSetupIteratorConfig = conf.get(MARKINGS_SETUP_ITERATOR_CONFIG, markingsSetupIteratorConfig);\n+\n+    if (shardTableName == null && shardGidxTableName == null && shardGridxTableName == null &&\n+        shardDictionaryTableName == null) {\n+      throw new IllegalArgumentException(\"No Shard Tables Defined\");\n     }\n-    \n-    protected Configuration conf;\n-    protected String tableName;\n-    protected String shardTableName; // shard table\n-    protected String shardGidxTableName; // global index\n-    protected String shardGridxTableName; // global reverse index\n-    protected String shardDictionaryTableName;\n-    protected ShardTableType tableType;\n-    \n-    @Override\n-    public void setup(String tableName, Configuration config, Logger log) throws IllegalArgumentException {\n-        \n-        this.log = log;\n-        this.conf = config;\n-        \n-        shardTableName = conf.get(ShardedDataTypeHandler.SHARD_TNAME, null);\n-        shardGidxTableName = conf.get(ShardedDataTypeHandler.SHARD_GIDX_TNAME, null);\n-        shardGridxTableName = conf.get(ShardedDataTypeHandler.SHARD_GRIDX_TNAME, null);\n-        shardDictionaryTableName = conf.get(ShardedDataTypeHandler.SHARD_DINDX_NAME, null);\n-        markingsSetupIteratorEnabled = conf.getBoolean(MARKINGS_SETUP_ITERATOR_ENABLED, markingsSetupIteratorEnabled);\n-        markingsSetupIteratorConfig = conf.get(MARKINGS_SETUP_ITERATOR_CONFIG, markingsSetupIteratorConfig);\n-        \n-        if (shardTableName == null && shardGidxTableName == null && shardGridxTableName == null && shardDictionaryTableName == null) {\n-            throw new IllegalArgumentException(\"No Shard Tables Defined\");\n-        }\n-        \n-        shardTableBalancerClass = conf.get(SHARD_TABLE_BALANCER_CONFIG, SHARDED_TABLET_BALANCER_CLASS);\n-        \n-        if (markingsSetupIteratorEnabled) {\n-            if (null == markingsSetupIteratorConfig || markingsSetupIteratorConfig.equals(\"\")) {\n-                throw new IllegalArgumentException(\"No '\" + MARKINGS_SETUP_ITERATOR_CONFIG + \"' Option Defined\");\n-            }\n-        }\n-        \n-        enableBloomFilters = conf.getBoolean(ENABLE_BLOOM_FILTERS, enableBloomFilters);\n-        \n-        String localityGroupsConf = null;\n-        if (tableName.equals(shardTableName)) {\n-            localityGroupsConf = conf.get(shardTableName + LOCALITY_GROUPS, ExtendedDataTypeHandler.FULL_CONTENT_LOCALITY_NAME + ':'\n-                            + ExtendedDataTypeHandler.FULL_CONTENT_COLUMN_FAMILY + ',' + ExtendedDataTypeHandler.TERM_FREQUENCY_LOCALITY_NAME + ':'\n-                            + ExtendedDataTypeHandler.TERM_FREQUENCY_COLUMN_FAMILY);\n-            for (String localityGroupDefConf : StringUtils.split(localityGroupsConf)) {\n-                String[] localityGroupDef = StringUtils.split(localityGroupDefConf, '\\\\', ':');\n-                Set<Text> families = localityGroups.get(localityGroupDef[0]);\n-                if (families == null) {\n-                    families = new HashSet<>();\n-                    localityGroups.put(localityGroupDef[0], families);\n-                }\n-                families.add(new Text(localityGroupDef[1]));\n-            }\n-        } else if (tableName.equals(shardDictionaryTableName)) {\n-            localityGroupsConf = conf.get(shardDictionaryTableName + LOCALITY_GROUPS, ShardedDataTypeHandler.SHARD_DINDX_FLABEL_LOCALITY_NAME + ':'\n-                            + ShardedDataTypeHandler.SHARD_DINDX_FLABEL + ',' + ShardedDataTypeHandler.SHARD_DINDX_RLABEL_LOCALITY_NAME + ':'\n-                            + ShardedDataTypeHandler.SHARD_DINDX_RLABEL);\n-            \n-            for (String localityGroupDefConf : StringUtils.split(localityGroupsConf)) {\n-                String[] localityGroupDef = StringUtils.split(localityGroupDefConf, '\\\\', ':');\n-                Set<Text> families = localityGroups.get(localityGroupDef[0]);\n-                if (families == null) {\n-                    families = new HashSet<>();\n-                    localityGroups.put(localityGroupDef[0], families);\n-                }\n-                families.add(new Text(localityGroupDef[1]));\n-            }\n-            \n+\n+    shardTableBalancerClass = conf.get(SHARD_TABLE_BALANCER_CONFIG, SHARDED_TABLET_BALANCER_CLASS);\n+\n+    if (markingsSetupIteratorEnabled) {\n+      if (null == markingsSetupIteratorConfig || markingsSetupIteratorConfig.equals(\"\")) {\n+        throw new IllegalArgumentException(\"No '\" + MARKINGS_SETUP_ITERATOR_CONFIG + \"' Option Defined\");\n+      }\n+    }\n+\n+    enableBloomFilters = conf.getBoolean(ENABLE_BLOOM_FILTERS, enableBloomFilters);\n+\n+    String localityGroupsConf = null;\n+    if (tableName.equals(shardTableName)) {\n+      localityGroupsConf =\n+          conf.get(shardTableName + LOCALITY_GROUPS, ExtendedDataTypeHandler.FULL_CONTENT_LOCALITY_NAME + ':'\n+              + ExtendedDataTypeHandler.FULL_CONTENT_COLUMN_FAMILY + ',' +\n+              ExtendedDataTypeHandler.TERM_FREQUENCY_LOCALITY_NAME + ':'\n+              + ExtendedDataTypeHandler.TERM_FREQUENCY_COLUMN_FAMILY);\n+      for (String localityGroupDefConf : StringUtils.split(localityGroupsConf)) {\n+        String[] localityGroupDef = StringUtils.split(localityGroupDefConf, '\\\\', ':');\n+        Set<Text> families = localityGroups.get(localityGroupDef[0]);\n+        if (families == null) {\n+          families = new HashSet<>();\n+          localityGroups.put(localityGroupDef[0], families);\n         }\n-        \n-        if (shardTableName != null && tableName.equals(shardTableName)) {\n-            this.tableType = ShardTableType.SHARD;\n-        } else if (shardGidxTableName != null && tableName.equals(shardGidxTableName)) {\n-            this.tableType = ShardTableType.GIDX;\n-        } else if (shardGridxTableName != null && tableName.equals(shardGridxTableName)) {\n-            this.tableType = ShardTableType.GRIDX;\n-        } else if (shardDictionaryTableName != null && tableName.equals(shardDictionaryTableName)) {\n-            this.tableType = ShardTableType.DINDX;\n-        } else {\n-            throw new IllegalArgumentException(\"Invalid Shard Table Definition For: \" + tableName);\n+        families.add(new Text(localityGroupDef[1]));\n+      }\n+    } else if (tableName.equals(shardDictionaryTableName)) {\n+      localityGroupsConf = conf.get(shardDictionaryTableName + LOCALITY_GROUPS,\n+          ShardedDataTypeHandler.SHARD_DINDX_FLABEL_LOCALITY_NAME + ':'\n+              + ShardedDataTypeHandler.SHARD_DINDX_FLABEL + ',' +\n+              ShardedDataTypeHandler.SHARD_DINDX_RLABEL_LOCALITY_NAME + ':'\n+              + ShardedDataTypeHandler.SHARD_DINDX_RLABEL);\n+\n+      for (String localityGroupDefConf : StringUtils.split(localityGroupsConf)) {\n+        String[] localityGroupDef = StringUtils.split(localityGroupDefConf, '\\\\', ':');\n+        Set<Text> families = localityGroups.get(localityGroupDef[0]);\n+        if (families == null) {\n+          families = new HashSet<>();\n+          localityGroups.put(localityGroupDef[0], families);\n         }\n-        this.tableName = tableName;\n+        families.add(new Text(localityGroupDef[1]));\n+      }\n+\n     }\n-    \n-    @Override\n-    public void configure(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        \n-        switch (this.tableType) {\n-            case SHARD:\n-                configureShardTable(tops);\n-                break;\n-            case GIDX:\n-                configureGidxTable(tops);\n-                break;\n-            case GRIDX:\n-                configureGridxTable(tops);\n-                break;\n-            \n-            case DINDX:\n-                configureDictionaryTable(tops);\n-                \n-                break;\n-            default:\n-                // Technically, this is dead code. If 'Configure' is called prior to 'Setup'\n-                // tableType is null and throws a NullPointerException in the switch statement.\n-                // If 'Setup' successfully runs to completion then tableType is assigned one\n-                // of the three other values.\n-                throw new TableNotFoundException(null, tableName, \"Table is not a Shard Type Table\");\n-        }\n+\n+    if (shardTableName != null && tableName.equals(shardTableName)) {\n+      this.tableType = ShardTableType.SHARD;\n+    } else if (shardGidxTableName != null && tableName.equals(shardGidxTableName)) {\n+      this.tableType = ShardTableType.GIDX;\n+    } else if (shardGridxTableName != null && tableName.equals(shardGridxTableName)) {\n+      this.tableType = ShardTableType.GRIDX;\n+    } else if (shardDictionaryTableName != null && tableName.equals(shardDictionaryTableName)) {\n+      this.tableType = ShardTableType.DINDX;\n+    } else {\n+      throw new IllegalArgumentException(\"Invalid Shard Table Definition For: \" + tableName);\n     }\n-    \n-    protected void configureShardTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        // Set a text index aggregator on the \"tf\" (Term Frequency) column family\n-        CombinerConfiguration tfConf = new CombinerConfiguration(new Column(\"tf\"), new IteratorSetting(10, \"TF\",\n-                        datawave.ingest.table.aggregator.TextIndexAggregator.class.getName()));\n-        \n-        setAggregatorConfigurationIfNecessary(tableName, Collections.singletonList(tfConf), tops, log);\n-        \n-        if (markingsSetupIteratorEnabled) {\n-            for (IteratorScope scope : IteratorScope.values()) {\n-                // we want the markings setup iterator init method to be called up front\n-                String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"MarkingsLoader\");\n-                setPropertyIfNecessary(tableName, stem, markingsSetupIteratorConfig, tops, log);\n-            }\n-        }\n-        \n-        // Set the locality group for the full content column family\n-        setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n-        \n-        // Set up the bloom filters for faster queries on the index portion\n-        if (enableBloomFilters) {\n-            setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_KEY_FUNCTOR.getKey(), SHARD_KEY_FUNCTOR_CLASS, tops, log);\n-        }\n-        setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(enableBloomFilters), tops, log);\n-        \n-        // Set up the table balancer for shards\n-        setPropertyIfNecessary(tableName, Property.TABLE_LOAD_BALANCER.getKey(), shardTableBalancerClass, tops, log);\n+    this.tableName = tableName;\n+  }\n+\n+  @Override\n+  public void configure(TableOperations tops)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+\n+    switch (this.tableType) {\n+      case SHARD:\n+        configureShardTable(tops);\n+        break;\n+      case GIDX:\n+        configureGidxTable(tops);\n+        break;\n+      case GRIDX:\n+        configureGridxTable(tops);\n+        break;\n+\n+      case DINDX:\n+        configureDictionaryTable(tops);\n+\n+        break;\n+      default:\n+        // Technically, this is dead code. If 'Configure' is called prior to 'Setup'\n+        // tableType is null and throws a NullPointerException in the switch statement.\n+        // If 'Setup' successfully runs to completion then tableType is assigned one\n+        // of the three other values.\n+        throw new TableNotFoundException(null, tableName, \"Table is not a Shard Type Table\");\n     }\n-    \n-    protected void configureGidxTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        // Add the UID aggregator\n-        for (IteratorScope scope : IteratorScope.values()) {\n-            String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"UIDAggregator\");\n-            setPropertyIfNecessary(tableName, stem, \"19,datawave.iterators.TotalAggregatingIterator\", tops, log);\n-            stem += \".opt.\";\n-            setPropertyIfNecessary(tableName, stem + \"*\", \"datawave.ingest.table.aggregator.GlobalIndexUidAggregator\", tops, log);\n-            \n-            if (markingsSetupIteratorEnabled) {\n-                // we want the markings setup iterator init method to be called up front\n-                stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"MarkingsLoader\");\n-                setPropertyIfNecessary(tableName, stem, markingsSetupIteratorConfig, tops, log);\n-            }\n-        }\n-        \n-        // Set up the bloom filters for faster queries on the index portion\n-        if (enableBloomFilters) {\n-            setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_KEY_FUNCTOR.getKey(), ShardIndexKeyFunctor.class.getName(), tops, log);\n-        }\n-        setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(enableBloomFilters), tops, log);\n-        \n+  }\n+\n+  protected void configureShardTable(TableOperations tops)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+    // Set a text index aggregator on the \"tf\" (Term Frequency) column family\n+    CombinerConfiguration tfConf = new CombinerConfiguration(new Column(\"tf\"), new IteratorSetting(10, \"TF\",\n+        datawave.ingest.table.aggregator.TextIndexAggregator.class.getName()));\n+\n+    setAggregatorConfigurationIfNecessary(tableName, Collections.singletonList(tfConf), tops, log);\n+\n+    if (markingsSetupIteratorEnabled) {\n+      for (IteratorScope scope : IteratorScope.values()) {\n+        // we want the markings setup iterator init method to be called up front\n+        String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"MarkingsLoader\");\n+        setPropertyIfNecessary(tableName, stem, markingsSetupIteratorConfig, tops, log);\n+      }\n     }\n-    \n-    protected void configureGridxTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        // Add the UID aggregator\n-        for (IteratorScope scope : IteratorScope.values()) {\n-            String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"UIDAggregator\");\n-            setPropertyIfNecessary(tableName, stem, \"19,datawave.iterators.TotalAggregatingIterator\", tops, log);\n-            stem += \".opt.\";\n-            setPropertyIfNecessary(tableName, stem + \"*\", \"datawave.ingest.table.aggregator.GlobalIndexUidAggregator\", tops, log);\n-            \n-            if (markingsSetupIteratorEnabled) {\n-                // we want the markings setup iterator init method to be called up front\n-                stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"MarkingsLoader\");\n-                setPropertyIfNecessary(tableName, stem, markingsSetupIteratorConfig, tops, log);\n-            }\n-        }\n-        \n-        // Set up the bloom filters for faster queries on the index portion\n-        if (enableBloomFilters) {\n-            setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_KEY_FUNCTOR.getKey(), ShardIndexKeyFunctor.class.getName(), tops, log);\n-        }\n-        setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(enableBloomFilters), tops, log);\n-        \n+\n+    // Set the locality group for the full content column family\n+    setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n+\n+    // Set up the bloom filters for faster queries on the index portion\n+    if (enableBloomFilters) {\n+      setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_KEY_FUNCTOR.getKey(), SHARD_KEY_FUNCTOR_CLASS, tops, log);\n     }\n-    \n-    protected void configureDictionaryTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        \n-        setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n-        \n+    setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(enableBloomFilters), tops,\n+        log);\n+\n+    // Set up the table balancer for shards\n+    setPropertyIfNecessary(tableName, Property.TABLE_LOAD_BALANCER.getKey(), shardTableBalancerClass, tops, log);\n+  }\n+\n+  protected void configureGidxTable(TableOperations tops)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+    // Add the UID aggregator\n+    for (IteratorScope scope : IteratorScope.values()) {\n+      String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"UIDAggregator\");\n+      setPropertyIfNecessary(tableName, stem, \"19,datawave.iterators.TotalAggregatingIterator\", tops, log);\n+      stem += \".opt.\";\n+      setPropertyIfNecessary(tableName, stem + \"*\", \"datawave.ingest.table.aggregator.GlobalIndexUidAggregator\", tops,\n+          log);\n+\n+      if (markingsSetupIteratorEnabled) {\n+        // we want the markings setup iterator init method to be called up front\n+        stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"MarkingsLoader\");\n+        setPropertyIfNecessary(tableName, stem, markingsSetupIteratorConfig, tops, log);\n+      }\n+    }\n+\n+    // Set up the bloom filters for faster queries on the index portion\n+    if (enableBloomFilters) {\n+      setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_KEY_FUNCTOR.getKey(), ShardIndexKeyFunctor.class.getName(),\n+          tops, log);\n+    }\n+    setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(enableBloomFilters), tops,\n+        log);\n+\n+  }\n+\n+  protected void configureGridxTable(TableOperations tops)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+    // Add the UID aggregator\n+    for (IteratorScope scope : IteratorScope.values()) {\n+      String stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"UIDAggregator\");\n+      setPropertyIfNecessary(tableName, stem, \"19,datawave.iterators.TotalAggregatingIterator\", tops, log);\n+      stem += \".opt.\";\n+      setPropertyIfNecessary(tableName, stem + \"*\", \"datawave.ingest.table.aggregator.GlobalIndexUidAggregator\", tops,\n+          log);\n+\n+      if (markingsSetupIteratorEnabled) {\n+        // we want the markings setup iterator init method to be called up front\n+        stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"MarkingsLoader\");\n+        setPropertyIfNecessary(tableName, stem, markingsSetupIteratorConfig, tops, log);\n+      }\n     }\n+\n+    // Set up the bloom filters for faster queries on the index portion\n+    if (enableBloomFilters) {\n+      setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_KEY_FUNCTOR.getKey(), ShardIndexKeyFunctor.class.getName(),\n+          tops, log);\n+    }\n+    setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(enableBloomFilters), tops,\n+        log);\n+\n+  }\n+\n+  protected void configureDictionaryTable(TableOperations tops)\n+      throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n+\n+    setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n+\n+  }\n }\n",
            "diff_size": 297
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/5/ShardTableConfigHelper.java\nindex da4e4536787..855122b2f71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/naturalize/5/ShardTableConfigHelper.java\n@@ -147,7 +147,7 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n                 break;\n             \n             case DINDX:\n-                configureDictionaryTable(tops);\n+    configureDictionaryTable(tops);\n                 \n                 break;\n             default:\n@@ -163,8 +163,7 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n         // Set a text index aggregator on the \"tf\" (Term Frequency) column family\n         CombinerConfiguration tfConf = new CombinerConfiguration(new Column(\"tf\"), new IteratorSetting(10, \"TF\",\n                         datawave.ingest.table.aggregator.TextIndexAggregator.class.getName()));\n-        \n-        setAggregatorConfigurationIfNecessary(tableName, Collections.singletonList(tfConf), tops, log);\n+setAggregatorConfigurationIfNecessary(tableName, Collections.singletonList(tfConf), tops, log);\n         \n         if (markingsSetupIteratorEnabled) {\n             for (IteratorScope scope : IteratorScope.values()) {\n@@ -238,4 +237,4 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n         setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n         \n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/5/ShardTableConfigHelper.java\nindex da4e4536787..003cb495db6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/codebuff/5/ShardTableConfigHelper.java\n@@ -4,14 +4,12 @@ import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Set;\n-\n import datawave.ingest.mapreduce.handler.ExtendedDataTypeHandler;\n import datawave.ingest.mapreduce.handler.shard.ShardedDataTypeHandler;\n import datawave.ingest.table.aggregator.CombinerConfiguration;\n import datawave.ingest.table.balancer.ShardedTableTabletBalancer;\n import datawave.ingest.table.bloomfilter.ShardKeyFunctor;\n import datawave.ingest.table.bloomfilter.ShardIndexKeyFunctor;\n-\n import org.apache.accumulo.core.client.AccumuloException;\n import org.apache.accumulo.core.client.AccumuloSecurityException;\n import org.apache.accumulo.core.client.IteratorSetting;\n@@ -25,33 +23,32 @@ import org.apache.hadoop.io.Text;\n import org.apache.hadoop.util.StringUtils;\n import org.apache.log4j.Logger;\n \n+\n public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n-    \n+\n     protected static final String SHARDED_TABLET_BALANCER_CLASS = ShardedTableTabletBalancer.class.getName();\n-    \n+\n     public static final String SHARD_TABLE_BALANCER_CONFIG = \"shard.table.balancer.class\";\n     protected String shardTableBalancerClass = SHARDED_TABLET_BALANCER_CLASS;\n-    \n+\n     public static final String ENABLE_BLOOM_FILTERS = \"shard.enable.bloom.filters\";\n     protected boolean enableBloomFilters = false;\n-    \n+\n     public static final String MARKINGS_SETUP_ITERATOR_ENABLED = \"markings.setup.iterator.enabled\";\n     private boolean markingsSetupIteratorEnabled = false;\n-    \n+\n     public static final String MARKINGS_SETUP_ITERATOR_CONFIG = \"markings.setup.iterator.config\";\n     private String markingsSetupIteratorConfig;\n-    \n+\n     public static final String LOCALITY_GROUPS = \"shard.table.locality.groups\";\n     protected HashMap<String,Set<Text>> localityGroups = new HashMap<>();\n-    \n     protected static final String SHARD_KEY_FUNCTOR_CLASS = ShardKeyFunctor.class.getName();\n-    \n     protected Logger log;\n-    \n+\n     public enum ShardTableType {\n         SHARD, GIDX, GRIDX, DINDX\n     }\n-    \n+\n     protected Configuration conf;\n     protected String tableName;\n     protected String shardTableName; // shard table\n@@ -59,39 +56,32 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n     protected String shardGridxTableName; // global reverse index\n     protected String shardDictionaryTableName;\n     protected ShardTableType tableType;\n-    \n+\n     @Override\n     public void setup(String tableName, Configuration config, Logger log) throws IllegalArgumentException {\n-        \n         this.log = log;\n         this.conf = config;\n-        \n         shardTableName = conf.get(ShardedDataTypeHandler.SHARD_TNAME, null);\n         shardGidxTableName = conf.get(ShardedDataTypeHandler.SHARD_GIDX_TNAME, null);\n         shardGridxTableName = conf.get(ShardedDataTypeHandler.SHARD_GRIDX_TNAME, null);\n         shardDictionaryTableName = conf.get(ShardedDataTypeHandler.SHARD_DINDX_NAME, null);\n         markingsSetupIteratorEnabled = conf.getBoolean(MARKINGS_SETUP_ITERATOR_ENABLED, markingsSetupIteratorEnabled);\n         markingsSetupIteratorConfig = conf.get(MARKINGS_SETUP_ITERATOR_CONFIG, markingsSetupIteratorConfig);\n-        \n         if (shardTableName == null && shardGidxTableName == null && shardGridxTableName == null && shardDictionaryTableName == null) {\n             throw new IllegalArgumentException(\"No Shard Tables Defined\");\n         }\n-        \n         shardTableBalancerClass = conf.get(SHARD_TABLE_BALANCER_CONFIG, SHARDED_TABLET_BALANCER_CLASS);\n-        \n         if (markingsSetupIteratorEnabled) {\n             if (null == markingsSetupIteratorConfig || markingsSetupIteratorConfig.equals(\"\")) {\n                 throw new IllegalArgumentException(\"No '\" + MARKINGS_SETUP_ITERATOR_CONFIG + \"' Option Defined\");\n             }\n         }\n-        \n         enableBloomFilters = conf.getBoolean(ENABLE_BLOOM_FILTERS, enableBloomFilters);\n-        \n+\n         String localityGroupsConf = null;\n         if (tableName.equals(shardTableName)) {\n-            localityGroupsConf = conf.get(shardTableName + LOCALITY_GROUPS, ExtendedDataTypeHandler.FULL_CONTENT_LOCALITY_NAME + ':'\n-                            + ExtendedDataTypeHandler.FULL_CONTENT_COLUMN_FAMILY + ',' + ExtendedDataTypeHandler.TERM_FREQUENCY_LOCALITY_NAME + ':'\n-                            + ExtendedDataTypeHandler.TERM_FREQUENCY_COLUMN_FAMILY);\n+            localityGroupsConf = conf.get(shardTableName + LOCALITY_GROUPS, ExtendedDataTypeHandler.FULL_CONTENT_LOCALITY_NAME + ':' + ExtendedDataTypeHandler.FULL_CONTENT_COLUMN_FAMILY + ',' + ExtendedDataTypeHandler.TERM_FREQUENCY_LOCALITY_NAME + ':' + ExtendedDataTypeHandler.TERM_FREQUENCY_COLUMN_FAMILY);\n+\n             for (String localityGroupDefConf : StringUtils.split(localityGroupsConf)) {\n                 String[] localityGroupDef = StringUtils.split(localityGroupDefConf, '\\\\', ':');\n                 Set<Text> families = localityGroups.get(localityGroupDef[0]);\n@@ -102,10 +92,8 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n                 families.add(new Text(localityGroupDef[1]));\n             }\n         } else if (tableName.equals(shardDictionaryTableName)) {\n-            localityGroupsConf = conf.get(shardDictionaryTableName + LOCALITY_GROUPS, ShardedDataTypeHandler.SHARD_DINDX_FLABEL_LOCALITY_NAME + ':'\n-                            + ShardedDataTypeHandler.SHARD_DINDX_FLABEL + ',' + ShardedDataTypeHandler.SHARD_DINDX_RLABEL_LOCALITY_NAME + ':'\n-                            + ShardedDataTypeHandler.SHARD_DINDX_RLABEL);\n-            \n+            localityGroupsConf = conf.get(shardDictionaryTableName + LOCALITY_GROUPS, ShardedDataTypeHandler.SHARD_DINDX_FLABEL_LOCALITY_NAME + ':' + ShardedDataTypeHandler.SHARD_DINDX_FLABEL + ',' + ShardedDataTypeHandler.SHARD_DINDX_RLABEL_LOCALITY_NAME + ':' + ShardedDataTypeHandler.SHARD_DINDX_RLABEL);\n+\n             for (String localityGroupDefConf : StringUtils.split(localityGroupsConf)) {\n                 String[] localityGroupDef = StringUtils.split(localityGroupDefConf, '\\\\', ':');\n                 Set<Text> families = localityGroups.get(localityGroupDef[0]);\n@@ -115,26 +103,25 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n                 }\n                 families.add(new Text(localityGroupDef[1]));\n             }\n-            \n         }\n-        \n+\n+\n         if (shardTableName != null && tableName.equals(shardTableName)) {\n             this.tableType = ShardTableType.SHARD;\n         } else if (shardGidxTableName != null && tableName.equals(shardGidxTableName)) {\n             this.tableType = ShardTableType.GIDX;\n-        } else if (shardGridxTableName != null && tableName.equals(shardGridxTableName)) {\n-            this.tableType = ShardTableType.GRIDX;\n+                                                                                                          } else if (shardGridxTableName != null && tableName.equals(shardGridxTableName)) {\n+                   this.tableType = ShardTableType.GRIDX;\n         } else if (shardDictionaryTableName != null && tableName.equals(shardDictionaryTableName)) {\n-            this.tableType = ShardTableType.DINDX;\n+                                                                                                                     this.tableType = ShardTableType.DINDX;\n         } else {\n-            throw new IllegalArgumentException(\"Invalid Shard Table Definition For: \" + tableName);\n-        }\n+                                                                                                                     throw new IllegalArgumentException(\"Invalid Shard Table Definition For: \" + tableName);\n+                                                                                                                 }\n         this.tableName = tableName;\n     }\n-    \n+\n     @Override\n     public void configure(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        \n         switch (this.tableType) {\n             case SHARD:\n                 configureShardTable(tops);\n@@ -145,10 +132,8 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n             case GRIDX:\n                 configureGridxTable(tops);\n                 break;\n-            \n             case DINDX:\n                 configureDictionaryTable(tops);\n-                \n                 break;\n             default:\n                 // Technically, this is dead code. If 'Configure' is called prior to 'Setup'\n@@ -158,14 +143,11 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n                 throw new TableNotFoundException(null, tableName, \"Table is not a Shard Type Table\");\n         }\n     }\n-    \n+\n     protected void configureShardTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n         // Set a text index aggregator on the \"tf\" (Term Frequency) column family\n-        CombinerConfiguration tfConf = new CombinerConfiguration(new Column(\"tf\"), new IteratorSetting(10, \"TF\",\n-                        datawave.ingest.table.aggregator.TextIndexAggregator.class.getName()));\n-        \n+        CombinerConfiguration tfConf = new CombinerConfiguration(new Column(\"tf\"), new IteratorSetting(10, \"TF\", datawave.ingest.table.aggregator.TextIndexAggregator.class.getName()));\n         setAggregatorConfigurationIfNecessary(tableName, Collections.singletonList(tfConf), tops, log);\n-        \n         if (markingsSetupIteratorEnabled) {\n             for (IteratorScope scope : IteratorScope.values()) {\n                 // we want the markings setup iterator init method to be called up front\n@@ -186,7 +168,7 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n         // Set up the table balancer for shards\n         setPropertyIfNecessary(tableName, Property.TABLE_LOAD_BALANCER.getKey(), shardTableBalancerClass, tops, log);\n     }\n-    \n+\n     protected void configureGidxTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n         // Add the UID aggregator\n         for (IteratorScope scope : IteratorScope.values()) {\n@@ -194,7 +176,6 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n             setPropertyIfNecessary(tableName, stem, \"19,datawave.iterators.TotalAggregatingIterator\", tops, log);\n             stem += \".opt.\";\n             setPropertyIfNecessary(tableName, stem + \"*\", \"datawave.ingest.table.aggregator.GlobalIndexUidAggregator\", tops, log);\n-            \n             if (markingsSetupIteratorEnabled) {\n                 // we want the markings setup iterator init method to be called up front\n                 stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"MarkingsLoader\");\n@@ -203,13 +184,14 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n         }\n         \n         // Set up the bloom filters for faster queries on the index portion\n+\n+\n         if (enableBloomFilters) {\n             setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_KEY_FUNCTOR.getKey(), ShardIndexKeyFunctor.class.getName(), tops, log);\n         }\n         setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(enableBloomFilters), tops, log);\n-        \n     }\n-    \n+\n     protected void configureGridxTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n         // Add the UID aggregator\n         for (IteratorScope scope : IteratorScope.values()) {\n@@ -217,7 +199,6 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n             setPropertyIfNecessary(tableName, stem, \"19,datawave.iterators.TotalAggregatingIterator\", tops, log);\n             stem += \".opt.\";\n             setPropertyIfNecessary(tableName, stem + \"*\", \"datawave.ingest.table.aggregator.GlobalIndexUidAggregator\", tops, log);\n-            \n             if (markingsSetupIteratorEnabled) {\n                 // we want the markings setup iterator init method to be called up front\n                 stem = String.format(\"%s%s.%s\", Property.TABLE_ITERATOR_PREFIX, scope.name(), \"MarkingsLoader\");\n@@ -226,16 +207,15 @@ public class ShardTableConfigHelper extends AbstractTableConfigHelper {\n         }\n         \n         // Set up the bloom filters for faster queries on the index portion\n+\n+\n         if (enableBloomFilters) {\n             setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_KEY_FUNCTOR.getKey(), ShardIndexKeyFunctor.class.getName(), tops, log);\n         }\n         setPropertyIfNecessary(tableName, Property.TABLE_BLOOM_ENABLED.getKey(), Boolean.toString(enableBloomFilters), tops, log);\n-        \n     }\n-    \n+\n     protected void configureDictionaryTable(TableOperations tops) throws AccumuloException, AccumuloSecurityException, TableNotFoundException {\n-        \n         setLocalityGroupConfigurationIfNecessary(tableName, localityGroups, tops, log);\n-        \n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 59
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "21",
                    "severity": "error",
                    "message": "Accumulo non-public classes imported",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/styler_three_grams/5/ShardTableConfigHelper.java\nindex da4e4536787..cf76ae9d806 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/errored/1/5/ShardTableConfigHelper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-datawave/styler_three_grams/5/ShardTableConfigHelper.java\n@@ -18,8 +18,9 @@ import org.apache.accumulo.core.client.IteratorSetting;\n import org.apache.accumulo.core.client.IteratorSetting.Column;\n import org.apache.accumulo.core.client.TableNotFoundException;\n import org.apache.accumulo.core.client.admin.TableOperations;\n-import org.apache.accumulo.core.conf.Property;\n-import org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\n+import\n+org.apache.accumulo.core.conf.Property;\n+ import org.apache.accumulo.core.iterators.IteratorUtil.IteratorScope;\n import org.apache.hadoop.conf.Configuration;\n import org.apache.hadoop.io.Text;\n import org.apache.hadoop.util.StringUtils;\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}