{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2986",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "66",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "246",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "249",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "305",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "305",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2986/ForkedProcessorStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2986/ForkedProcessorStep.java\nindex 73a78bc8c60..126cf23858c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2986/ForkedProcessorStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2986/ForkedProcessorStep.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import java.util.Arrays;\n@@ -44,278 +45,274 @@ import static org.neo4j.unsafe.impl.internal.dragons.UnsafeUtil.getFieldOffset;\n  */\n public abstract class ForkedProcessorStep<T> extends AbstractStep<T>\n {\n-    // ID 0 is the id of a processor which is always present, no matter how many or few processors\n-    // are assigned to process a batch. Therefore some tasks can be put on this processor, tasks\n-    // which may affect the batches as a whole.\n-    protected static final int MAIN = 0;\n-    private final long COMPLETED_PROCESSORS_OFFSET = getFieldOffset( Unit.class, \"completedProcessors\" );\n-    private final long PROCESSING_TIME_OFFSET = getFieldOffset( Unit.class, \"processingTime\" );\n-\n-    private final Object[] forkedProcessors;\n-    private volatile int numberOfForkedProcessors;\n-    private final AtomicReference<Unit> head;\n-    private final AtomicReference<Unit> tail;\n-    private final Thread downstreamSender;\n-    private volatile int targetNumberOfProcessors = 1;\n-    private final int maxProcessors;\n-    private final int maxQueueLength;\n-    private volatile Thread receiverThread;\n-    private final StampedLock stripingLock;\n-\n-    protected ForkedProcessorStep( StageControl control, String name, Configuration config, StatsProvider... statsProviders )\n-    {\n-        super( control, name, config, statsProviders );\n-        this.maxProcessors = config.maxNumberOfProcessors();\n-        this.forkedProcessors = new Object[this.maxProcessors];\n-        stripingLock = new StampedLock();\n-\n-        Unit noop = new Unit( -1, null, 0 );\n-        head = new AtomicReference<>( noop );\n-        tail = new AtomicReference<>( noop );\n-\n-        stripingLock.unlock( applyProcessorCount( stripingLock.readLock() ) );\n-        downstreamSender = new CompletedBatchesSender( name + \" [CompletedBatchSender]\" );\n-        maxQueueLength = 200 + maxProcessors;\n-    }\n-\n-    private long applyProcessorCount( long lock )\n+  // ID 0 is the id of a processor which is always present, no matter how many or few processors\n+  // are assigned to process a batch. Therefore some tasks can be put on this processor, tasks\n+  // which may affect the batches as a whole.\n+  protected static final int MAIN = 0;\n+  private final long COMPLETED_PROCESSORS_OFFSET = getFieldOffset(Unit.class, \"completedProcessors\");\n+  private final long PROCESSING_TIME_OFFSET = getFieldOffset(Unit.class, \"processingTime\");\n+\n+  private final Object[] forkedProcessors;\n+  private volatile int numberOfForkedProcessors;\n+  private final AtomicReference<Unit> head;\n+  private final AtomicReference<Unit> tail;\n+  private final Thread downstreamSender;\n+  private volatile int targetNumberOfProcessors = 1;\n+  private final int maxProcessors;\n+  private final int maxQueueLength;\n+  private volatile Thread receiverThread;\n+  private final StampedLock stripingLock;\n+\n+  protected ForkedProcessorStep(StageControl control, String name, Configuration config, StatsProvider... statsProviders)\n+  {\n+    super(control, name, config, statsProviders);\n+    this.maxProcessors = config.maxNumberOfProcessors();\n+    this.forkedProcessors = new Object[this.maxProcessors];\n+    stripingLock = new StampedLock();\n+\n+    Unit noop = new Unit(-1, null, 0);\n+    head = new AtomicReference<>(noop);\n+    tail = new AtomicReference<>(noop);\n+\n+    stripingLock.unlock(applyProcessorCount(stripingLock.readLock()));\n+    downstreamSender = new CompletedBatchesSender(name + \" [CompletedBatchSender]\");\n+    maxQueueLength = 200 + maxProcessors;\n+  }\n+\n+  private long applyProcessorCount(long lock)\n+  {\n+    if (numberOfForkedProcessors != targetNumberOfProcessors)\n     {\n-        if ( numberOfForkedProcessors != targetNumberOfProcessors )\n+      stripingLock.unlock(lock);\n+      lock = stripingLock.writeLock();\n+      awaitAllCompleted();\n+      int processors = targetNumberOfProcessors;\n+      while (numberOfForkedProcessors < processors)\n+      {\n+        if (forkedProcessors[numberOfForkedProcessors] == null)\n         {\n-            stripingLock.unlock( lock );\n-            lock = stripingLock.writeLock();\n-            awaitAllCompleted();\n-            int processors = targetNumberOfProcessors;\n-            while ( numberOfForkedProcessors < processors )\n-            {\n-                if ( forkedProcessors[numberOfForkedProcessors] == null )\n-                {\n-                    forkedProcessors[numberOfForkedProcessors] = new ForkedProcessor( numberOfForkedProcessors, tail.get() );\n-                }\n-                numberOfForkedProcessors++;\n-            }\n-            if ( numberOfForkedProcessors > processors )\n-            {\n-                numberOfForkedProcessors = processors;\n-                // Excess processors will notice that they are not needed right now, and will park until they are.\n-                // The most important thing here is that future Units will have a lower number of processor as expected max.\n-            }\n+          forkedProcessors[numberOfForkedProcessors] = new ForkedProcessor(numberOfForkedProcessors, tail.get());\n         }\n-        return lock;\n+        numberOfForkedProcessors++;\n+      }\n+      if (numberOfForkedProcessors > processors)\n+      {\n+        numberOfForkedProcessors = processors;\n+        // Excess processors will notice that they are not needed right now, and will park until they are.\n+        // The most important thing here is that future Units will have a lower number of processor as expected max.\n+      }\n     }\n+    return lock;\n+  }\n \n-    private void awaitAllCompleted()\n+  private void awaitAllCompleted()\n+  {\n+    while (head.get() != tail.get())\n     {\n-        while ( head.get() != tail.get() )\n-        {\n-            PARK.park( receiverThread = Thread.currentThread() );\n-        }\n+      PARK.park(receiverThread = Thread.currentThread());\n+    }\n+  }\n+\n+  @Override\n+  public int processors(int delta)\n+  {\n+    targetNumberOfProcessors = max(1, min(targetNumberOfProcessors + delta, maxProcessors));\n+    return targetNumberOfProcessors;\n+  }\n+\n+  @Override\n+  public void start(int orderingGuarantees)\n+  {\n+    super.start(orderingGuarantees);\n+    downstreamSender.start();\n+  }\n+\n+  @Override\n+  public long receive(long ticket, T batch)\n+  {\n+    long time = nanoTime();\n+    while (queuedBatches.get() >= maxQueueLength)\n+    {\n+      PARK.park(receiverThread = Thread.currentThread());\n+    }\n+    // It is of importance that all items in the queue at the same time agree on the number of processors. We take this lock in order to make sure that we\n+    // do not interfere with another thread trying to drain the queue in order to change the processor count.\n+    long lock = applyProcessorCount(stripingLock.readLock());\n+    queuedBatches.incrementAndGet();\n+    Unit unit = new Unit(ticket, batch, numberOfForkedProcessors);\n+\n+    // [old head] [unit]\n+    //               ^\n+    //              head\n+    Unit myHead = head.getAndSet(unit);\n+\n+    // [old head] -next-> [unit]\n+    myHead.next = unit;\n+    stripingLock.unlock(lock);\n+\n+    return nanoTime() - time;\n+  }\n+\n+  protected abstract void forkedProcess(int id, int processors, T batch) throws Throwable;\n+\n+  void sendDownstream(Unit unit)\n+  {\n+    downstreamIdleTime.add(downstream.receive(unit.ticket, unit.batch));\n+  }\n+\n+  // One unit of work. Contains the batch along with ticket and meta state during processing such\n+  // as how many processors are done with this batch and link to next batch in the queue.\n+  class Unit\n+  {\n+    private final long ticket;\n+    private final T batch;\n+\n+    // Number of processors which is expected to process this batch, this is the number of processors\n+    // assigned at the time of enqueueing this unit.\n+    private final int processors;\n+\n+    // Updated when a ForkedProcessor have processed this unit.\n+    // Atomic since changed by UnsafeUtil#getAndAddInt/Long.\n+    // Volatile since read by CompletedBatchesSender.\n+    @SuppressWarnings(\"unused\")\n+    private volatile int completedProcessors;\n+    @SuppressWarnings(\"unused\")\n+    private volatile long processingTime;\n+\n+    // Volatile since assigned by thread enqueueing this unit after changing head of the queue.\n+    private volatile Unit next;\n+\n+    Unit(long ticket, T batch, int processors)\n+    {\n+      this.ticket = ticket;\n+      this.batch = batch;\n+      this.processors = processors;\n     }\n \n-    @Override\n-    public int processors( int delta )\n+    boolean isCompleted()\n     {\n-        targetNumberOfProcessors = max( 1, min( targetNumberOfProcessors + delta, maxProcessors ) );\n-        return targetNumberOfProcessors;\n+      return processors > 0 && processors == completedProcessors;\n     }\n \n-    @Override\n-    public void start( int orderingGuarantees )\n+    void processorDone(long time)\n     {\n-        super.start( orderingGuarantees );\n-        downstreamSender.start();\n+      UnsafeUtil.getAndAddLong(this, PROCESSING_TIME_OFFSET, time);\n+      int prevCompletedProcessors = UnsafeUtil.getAndAddInt(this, COMPLETED_PROCESSORS_OFFSET, 1);\n+      assert prevCompletedProcessors < processors : prevCompletedProcessors + \" vs \" + processors + \" for \" + ticket;\n     }\n \n     @Override\n-    public long receive( long ticket, T batch )\n+    public String toString()\n     {\n-        long time = nanoTime();\n-        while ( queuedBatches.get() >= maxQueueLength )\n-        {\n-            PARK.park( receiverThread = Thread.currentThread() );\n-        }\n-        // It is of importance that all items in the queue at the same time agree on the number of processors. We take this lock in order to make sure that we\n-        // do not interfere with another thread trying to drain the queue in order to change the processor count.\n-        long lock = applyProcessorCount( stripingLock.readLock() );\n-        queuedBatches.incrementAndGet();\n-        Unit unit = new Unit( ticket, batch, numberOfForkedProcessors );\n-\n-        // [old head] [unit]\n-        //               ^\n-        //              head\n-        Unit myHead = head.getAndSet( unit );\n-\n-        // [old head] -next-> [unit]\n-        myHead.next = unit;\n-        stripingLock.unlock( lock );\n-\n-        return nanoTime() - time;\n+      return format(\"Unit[%d/%d]\", completedProcessors, processors);\n     }\n-\n-    protected abstract void forkedProcess( int id, int processors, T batch ) throws Throwable;\n-\n-    void sendDownstream( Unit unit )\n+  }\n+\n+  /**\n+   * Checks tail of queue and sends fully completed units downstream. Since\n+   * {@link ForkedProcessorStep#receive(long, Object)} may park on queue bound, this thread will\n+   * unpark the most recent thread calling receive to close that wait gap.\n+   * {@link ForkedProcessor}, the last one processing a unit, will unpark this thread.\n+   */\n+  private final class CompletedBatchesSender extends Thread\n+  {\n+    CompletedBatchesSender(String name)\n     {\n-        downstreamIdleTime.add( downstream.receive( unit.ticket, unit.batch ) );\n+      super(name);\n     }\n \n-    // One unit of work. Contains the batch along with ticket and meta state during processing such\n-    // as how many processors are done with this batch and link to next batch in the queue.\n-    class Unit\n+    @Override\n+    public void run()\n     {\n-        private final long ticket;\n-        private final T batch;\n-\n-        // Number of processors which is expected to process this batch, this is the number of processors\n-        // assigned at the time of enqueueing this unit.\n-        private final int processors;\n-\n-        // Updated when a ForkedProcessor have processed this unit.\n-        // Atomic since changed by UnsafeUtil#getAndAddInt/Long.\n-        // Volatile since read by CompletedBatchesSender.\n-        @SuppressWarnings( \"unused\" )\n-        private volatile int completedProcessors;\n-        @SuppressWarnings( \"unused\" )\n-        private volatile long processingTime;\n-\n-        // Volatile since assigned by thread enqueueing this unit after changing head of the queue.\n-        private volatile Unit next;\n-\n-        Unit( long ticket, T batch, int processors )\n-        {\n-            this.ticket = ticket;\n-            this.batch = batch;\n-            this.processors = processors;\n-        }\n-\n-        boolean isCompleted()\n+      Unit current = tail.get();\n+      while (!isCompleted())\n+      {\n+        Unit candidate = current.next;\n+        if (candidate != null && candidate.isCompleted())\n         {\n-            return processors > 0 && processors == completedProcessors;\n-        }\n-\n-        void processorDone( long time )\n-        {\n-            UnsafeUtil.getAndAddLong( this, PROCESSING_TIME_OFFSET, time );\n-            int prevCompletedProcessors = UnsafeUtil.getAndAddInt( this, COMPLETED_PROCESSORS_OFFSET, 1 );\n-            assert prevCompletedProcessors < processors : prevCompletedProcessors + \" vs \" + processors + \" for \" + ticket;\n-        }\n-\n-        @Override\n-        public String toString()\n+          if (downstream != null)\n+          {\n+            sendDownstream(candidate);\n+          } else\n+          {\n+            control.recycle(candidate.batch);\n+          }\n+          current = candidate;\n+          tail.set(current);\n+          queuedBatches.decrementAndGet();\n+          doneBatches.incrementAndGet();\n+          totalProcessingTime.add(candidate.processingTime);\n+          checkNotifyEndDownstream();\n+        } else\n         {\n-            return format( \"Unit[%d/%d]\", completedProcessors, processors );\n+          Thread receiver = ForkedProcessorStep.this.receiverThread;\n+          if (receiver != null)\n+          {\n+            PARK.unpark(receiver);\n+          }\n+          PARK.park(this);\n         }\n+      }\n     }\n-\n-    /**\n-     * Checks tail of queue and sends fully completed units downstream. Since\n-     * {@link ForkedProcessorStep#receive(long, Object)} may park on queue bound, this thread will\n-     * unpark the most recent thread calling receive to close that wait gap.\n-     * {@link ForkedProcessor}, the last one processing a unit, will unpark this thread.\n-     */\n-    private final class CompletedBatchesSender extends Thread\n+  }\n+\n+  // Processes units, forever walking the queue looking for more units to process.\n+  // If there's no work to do it will park a while, otherwise it will exhaust the queue and process\n+  // as far as it can without park. No external thread unparks these forked processors.\n+  // So in scenarios where a processor isn't fully saturated there may be short periods of parking,\n+  // but should saturate without any park as long as there are units to process.\n+  class ForkedProcessor extends Thread\n+  {\n+    private final int id;\n+    private Unit current;\n+\n+    ForkedProcessor(int id, Unit startingUnit)\n     {\n-        CompletedBatchesSender( String name )\n-        {\n-            super( name );\n-        }\n-\n-        @Override\n-        public void run()\n-        {\n-            Unit current = tail.get();\n-            while ( !isCompleted() )\n-            {\n-                Unit candidate = current.next;\n-                if ( candidate != null && candidate.isCompleted() )\n-                {\n-                    if ( downstream != null )\n-                    {\n-                        sendDownstream( candidate );\n-                    }\n-                    else\n-                    {\n-                        control.recycle( candidate.batch );\n-                    }\n-                    current = candidate;\n-                    tail.set( current );\n-                    queuedBatches.decrementAndGet();\n-                    doneBatches.incrementAndGet();\n-                    totalProcessingTime.add( candidate.processingTime );\n-                    checkNotifyEndDownstream();\n-                }\n-                else\n-                {\n-                    Thread receiver = ForkedProcessorStep.this.receiverThread;\n-                    if ( receiver != null )\n-                    {\n-                        PARK.unpark( receiver );\n-                    }\n-                    PARK.park( this );\n-                }\n-            }\n-        }\n+      super(name() + \"-\" + id);\n+      this.id = id;\n+      this.current = startingUnit;\n+      start();\n     }\n \n-    // Processes units, forever walking the queue looking for more units to process.\n-    // If there's no work to do it will park a while, otherwise it will exhaust the queue and process\n-    // as far as it can without park. No external thread unparks these forked processors.\n-    // So in scenarios where a processor isn't fully saturated there may be short periods of parking,\n-    // but should saturate without any park as long as there are units to process.\n-    class ForkedProcessor extends Thread\n+    @Override\n+    public void run()\n     {\n-        private final int id;\n-        private Unit current;\n-\n-        ForkedProcessor( int id, Unit startingUnit )\n-        {\n-            super( name() + \"-\" + id );\n-            this.id = id;\n-            this.current = startingUnit;\n-            start();\n-        }\n-\n-        @Override\n-        public void run()\n+      try\n+      {\n+        while (!isCompleted())\n         {\n-            try\n+          Unit candidate = current.next;\n+          if (candidate != null)\n+          {\n+            // There's work to do.\n+            if (id < candidate.processors)\n             {\n-                while ( !isCompleted() )\n-                {\n-                    Unit candidate = current.next;\n-                    if ( candidate != null )\n-                    {\n-                        // There's work to do.\n-                        if ( id < candidate.processors )\n-                        {\n-                            // We are expected to take care of this one.\n-                            long time = nanoTime();\n-                            forkedProcess( id, candidate.processors, candidate.batch );\n-                            candidate.processorDone( nanoTime() - time );\n-                        }\n-                        // Skip to the next.\n-\n-                        current = candidate;\n-                    }\n-                    else\n-                    {\n-                        // There's no work to be done right now, park a while. When we wake up and work have accumulated\n-                        // we'll plow throw them w/o park in between anyway.\n-                        PARK.park( this );\n-                    }\n-                }\n-            }\n-            catch ( Throwable e )\n-            {\n-                issuePanic( e, false );\n+              // We are expected to take care of this one.\n+              long time = nanoTime();\n+              forkedProcess(id, candidate.processors, candidate.batch);\n+              candidate.processorDone(nanoTime() - time);\n             }\n+            // Skip to the next.\n+\n+            current = candidate;\n+          } else\n+          {\n+            // There's no work to be done right now, park a while. When we wake up and work have accumulated\n+            // we'll plow throw them w/o park in between anyway.\n+            PARK.park(this);\n+          }\n         }\n+      } catch (Throwable e)\n+      {\n+        issuePanic(e, false);\n+      }\n     }\n-\n-    @Override\n-    public void close() throws Exception\n-    {\n-        Arrays.fill( forkedProcessors, null );\n-        super.close();\n-    }\n+  }\n+\n+  @Override\n+  public void close() throws Exception\n+  {\n+    Arrays.fill(forkedProcessors, null);\n+    super.close();\n+  }\n }\n",
            "diff_size": 373
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}