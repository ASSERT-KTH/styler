{
    "project_name": "GluuFederation-oxCore",
    "error_id": "28",
    "information": {
        "errors": [
            {
                "line": "271",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n        } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n            select = new String[] { CouchbaseOperationService.DN };\n        } else {\n            boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/28/CouchbaseOperationsServiceImpl.java\nindex 04667da88c9..f4120dd6efd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/28/CouchbaseOperationsServiceImpl.java\n@@ -268,7 +268,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         if (select == null) {\n             select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n         } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n-        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n+        // Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n             select = new String[] { CouchbaseOperationService.DN };\n         } else {\n             boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/28/CouchbaseOperationsServiceImpl.java\nindex 04667da88c9..f32e7972a7e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/28/CouchbaseOperationsServiceImpl.java\n@@ -122,7 +122,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n             String attributeName = attrEntry.getKey();\n             Object attributeValue = attrEntry.getValue();\n             if (attributeName.equalsIgnoreCase(CouchbaseOperationService.OBJECT_CLASS) || attributeName.equalsIgnoreCase(CouchbaseOperationService.DN)\n-                    || attributeName.equalsIgnoreCase(CouchbaseOperationService.USER_PASSWORD)) {\n+                || attributeName.equalsIgnoreCase(CouchbaseOperationService.USER_PASSWORD)) {\n                 continue;\n             } else {\n                 if (attributeValue != null) {\n@@ -189,12 +189,12 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         try {\n             BucketMapping bucketMapping = connectionProvider.getBucketMappingByKey(key);\n             MutateLimitPath deleteQuery = Delete.deleteFrom(Expression.i(bucketMapping.getBucketName()))\n-                    .where(Expression.path(\"META().id\").like(Expression.s(key + \"%\")));\n+                .where(Expression.path(\"META().id\").like(Expression.s(key + \"%\")));\n \n             N1qlQueryResult result = bucketMapping.getBucket().query(deleteQuery);\n             if (!result.finalSuccess()) {\n                 throw new SearchException(String.format(\"Failed to delete entries. Query: '%s'. Errors: %s\", bucketMapping, result.errors()),\n-                        result.info().errorCount());\n+                    result.info().errorCount());\n             }\n \n             return true;\n@@ -215,7 +215,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n \n             } else {\n                 N1qlQuery query = N1qlQuery\n-                        .simple(Select.select(attributes).from(Expression.i(bucketMapping.getBucketName())).useKeys(Expression.s(key)).limit(1));\n+                    .simple(Select.select(attributes).from(Expression.i(bucketMapping.getBucketName())).useKeys(Expression.s(key)).limit(1));\n                 N1qlQueryResult result = bucketMapping.getBucket().query(query);\n                 if (!result.finalSuccess()) {\n                     throw new SearchException(String.format(\"Failed to lookup entry. Errors: %s\", result.errors()), result.info().errorCount());\n@@ -234,7 +234,8 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n \n     @Override\n     public <O> PagedResult<JsonObject> search(String key, Expression expression, SearchScope scope, String[] attributes, Sort[] orderBy,\n-            CouchbaseBatchOperationWraper<O> batchOperationWraper, boolean returnCount, int start, int count, int pageSize) throws SearchException {\n+                                              CouchbaseBatchOperationWraper<O> batchOperationWraper, boolean returnCount, int start, int count,\n+                                              int pageSize) throws SearchException {\n         BucketMapping bucketMapping = connectionProvider.getBucketMappingByKey(key);\n         Bucket bucket = bucketMapping.getBucket();\n \n@@ -266,14 +267,14 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n \n         String[] select = attributes;\n         if (select == null) {\n-            select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n+            select = new String[] {\"gluu_doc.*\", CouchbaseOperationService.DN};\n         } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n-        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n-            select = new String[] { CouchbaseOperationService.DN };\n+            // Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n+            select = new String[] {CouchbaseOperationService.DN};\n         } else {\n             boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n             if (!hasDn) {\n-                select = ArrayHelper.arrayMerge(select, new String[] { CouchbaseOperationService.DN });\n+                select = ArrayHelper.arrayMerge(select, new String[] {CouchbaseOperationService.DN});\n             }\n         }\n         GroupByPath selectQuery = Select.select(select).from(Expression.i(bucketMapping.getBucketName())).as(\"gluu_doc\").where(finalExpression);\n@@ -307,7 +308,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                     lastResult = bucket.query(query);\n                     if (!lastResult.finalSuccess()) {\n                         throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", query, lastResult.errors()),\n-                                lastResult.info().errorCount());\n+                            lastResult.info().errorCount());\n                     }\n \n                     lastSearchResultList = lastResult.allRows();\n@@ -347,7 +348,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                 lastResult = bucket.query(query);\n                 if (!lastResult.finalSuccess()) {\n                     throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", baseQuery, lastResult.errors()),\n-                            lastResult.info().errorCount());\n+                        lastResult.info().errorCount());\n                 }\n \n                 searchResultList.addAll(lastResult.allRows());\n@@ -368,14 +369,14 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n \n         if (returnCount) {\n             GroupByPath selectCountQuery = Select.select(\"COUNT(*) as TOTAL\").from(Expression.i(bucketMapping.getBucketName()))\n-                    .where(finalExpression);\n+                .where(finalExpression);\n             try {\n                 LOG.debug(\"Calculating count. Execution query: '\" + selectCountQuery + \"'\");\n                 N1qlQueryResult countResult = bucket.query(selectCountQuery);\n                 if (!countResult.finalSuccess() || (countResult.info().resultCount() != 1)) {\n                     throw new SearchException(\n-                            String.format(\"Failed to calculate count entries. Query: '%s'. Error: \", selectCountQuery, countResult.errors()),\n-                            countResult.info().errorCount());\n+                        String.format(\"Failed to calculate count entries. Query: '%s'. Error: \", selectCountQuery, countResult.errors()),\n+                        countResult.info().errorCount());\n                 }\n                 result.setTotalEntriesCount(countResult.allRows().get(0).value().getInt(\"TOTAL\"));\n             } catch (CouchbaseException ex) {\n",
            "diff_size": 15
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "227",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 273).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "295",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "334",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "353",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/28/CouchbaseOperationsServiceImpl.java\nindex 04667da88c9..81901dc0d63 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/28/CouchbaseOperationsServiceImpl.java\n@@ -10,7 +10,6 @@ import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Map.Entry;\n-\n import org.gluu.persist.couchbase.impl.CouchbaseBatchOperationWraper;\n import org.gluu.persist.couchbase.model.BucketMapping;\n import org.gluu.persist.couchbase.operation.CouchbaseOperationService;\n@@ -26,7 +25,6 @@ import org.gluu.util.ArrayHelper;\n import org.gluu.util.StringHelper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.couchbase.client.core.CouchbaseException;\n import com.couchbase.client.core.message.kv.subdoc.multi.Mutation;\n import com.couchbase.client.java.Bucket;\n@@ -54,15 +52,15 @@ import com.couchbase.client.java.subdoc.MutationSpec;\n  *\n  * @author Yuriy Movchan Date: 05/10/2018\n  */\n+\n+\n public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService {\n \n     private static final Logger LOG = LoggerFactory.getLogger(CouchbaseConnectionProvider.class);\n-\n     private CouchbaseConnectionProvider connectionProvider;\n \n     @SuppressWarnings(\"unused\")\n-    private CouchbaseOperationsServiceImpl() {\n-    }\n+    private CouchbaseOperationsServiceImpl() { }\n \n     public CouchbaseOperationsServiceImpl(CouchbaseConnectionProvider connectionProvider) {\n         this.connectionProvider = connectionProvider;\n@@ -85,14 +83,13 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n \n         JsonObject entry = lookup(key, USER_PASSWORD);\n         Object userPasswordObj = entry.get(USER_PASSWORD);\n-\n         String userPassword = null;\n         if (userPasswordObj instanceof JsonArray) {\n             userPassword = ((JsonArray) userPasswordObj).getString(0);\n         } else if (userPasswordObj instanceof String) {\n             userPassword = (String) userPasswordObj;\n         } else {\n-            return false;\n+                   return false;\n         }\n \n         return PasswordEncryptionHelper.compareCredentials(password.getBytes(), userPassword.getBytes());\n@@ -117,12 +114,10 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n     @Override\n     public boolean updateEntry(String key, JsonObject attrs) throws UnsupportedOperationException, SearchException {\n         List<MutationSpec> mods = new ArrayList<MutationSpec>();\n-\n         for (Entry<String, Object> attrEntry : attrs.toMap().entrySet()) {\n             String attributeName = attrEntry.getKey();\n             Object attributeValue = attrEntry.getValue();\n-            if (attributeName.equalsIgnoreCase(CouchbaseOperationService.OBJECT_CLASS) || attributeName.equalsIgnoreCase(CouchbaseOperationService.DN)\n-                    || attributeName.equalsIgnoreCase(CouchbaseOperationService.USER_PASSWORD)) {\n+            if (attributeName.equalsIgnoreCase(CouchbaseOperationService.OBJECT_CLASS) || attributeName.equalsIgnoreCase(CouchbaseOperationService.DN) || attributeName.equalsIgnoreCase(CouchbaseOperationService.USER_PASSWORD)) {\n                 continue;\n             } else {\n                 if (attributeValue != null) {\n@@ -155,10 +150,10 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                 } else if (Mutation.REPLACE == type) {\n                     builder.replace(mod.path(), mod.fragment());\n                 } else if (Mutation.DELETE == type) {\n-                    builder.remove(mod.path());\n-                } else {\n-                    throw new UnsupportedOperationException(\"Operation type '\" + type + \"' is not implemented\");\n-                }\n+                           builder.remove(mod.path());\n+                       } else {\n+                           throw new UnsupportedOperationException(\"Operation type '\" + type + \"' is not implemented\");\n+                       }\n             }\n \n             DocumentFragment<Mutation> result = builder.execute();\n@@ -188,13 +183,10 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n     public boolean deleteRecursively(String key) throws EntryNotFoundException, SearchException {\n         try {\n             BucketMapping bucketMapping = connectionProvider.getBucketMappingByKey(key);\n-            MutateLimitPath deleteQuery = Delete.deleteFrom(Expression.i(bucketMapping.getBucketName()))\n-                    .where(Expression.path(\"META().id\").like(Expression.s(key + \"%\")));\n-\n+            MutateLimitPath deleteQuery = Delete.deleteFrom(Expression.i(bucketMapping.getBucketName())).where(Expression.path(\"META().id\").like(Expression.s(key + \"%\")));\n             N1qlQueryResult result = bucketMapping.getBucket().query(deleteQuery);\n             if (!result.finalSuccess()) {\n-                throw new SearchException(String.format(\"Failed to delete entries. Query: '%s'. Errors: %s\", bucketMapping, result.errors()),\n-                        result.info().errorCount());\n+                throw new SearchException(String.format(\"Failed to delete entries. Query: '%s'. Errors: %s\", bucketMapping, result.errors()), result.info().errorCount());\n             }\n \n             return true;\n@@ -212,13 +204,12 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                 if (doc != null) {\n                     return doc.content();\n                 }\n-\n             } else {\n-                N1qlQuery query = N1qlQuery\n-                        .simple(Select.select(attributes).from(Expression.i(bucketMapping.getBucketName())).useKeys(Expression.s(key)).limit(1));\n+                N1qlQuery query = N1qlQuery.simple(Select.select(attributes).from(Expression.i(bucketMapping.getBucketName())).useKeys(Expression.s(key)).limit(1));\n                 N1qlQueryResult result = bucketMapping.getBucket().query(query);\n                 if (!result.finalSuccess()) {\n-                    throw new SearchException(String.format(\"Failed to lookup entry. Errors: %s\", result.errors()), result.info().errorCount());\n+                    throw new SearchException(String.format(\"Failed to lookup entry. Errors: %s\", result.errors()),\n+                        result.info().errorCount());\n                 }\n \n                 if (result.allRows().size() == 1) {\n@@ -233,11 +224,9 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n     }\n \n     @Override\n-    public <O> PagedResult<JsonObject> search(String key, Expression expression, SearchScope scope, String[] attributes, Sort[] orderBy,\n-            CouchbaseBatchOperationWraper<O> batchOperationWraper, boolean returnCount, int start, int count, int pageSize) throws SearchException {\n+    public <O> PagedResult<JsonObject> search(String key, Expression expression, SearchScope scope, String[] attributes, Sort[] orderBy, CouchbaseBatchOperationWraper<O> batchOperationWraper, boolean returnCount, int start, int count, int pageSize) throws SearchException {\n         BucketMapping bucketMapping = connectionProvider.getBucketMappingByKey(key);\n         Bucket bucket = bucketMapping.getBucket();\n-\n         BatchOperation<O> ldapBatchOperation = null;\n         if (batchOperationWraper != null) {\n             ldapBatchOperation = (BatchOperation<O>) batchOperationWraper.getBatchOperation();\n@@ -268,27 +257,25 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         if (select == null) {\n             select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n         } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n-        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n-            select = new String[] { CouchbaseOperationService.DN };\n+            // Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n+            select = new String[] {CouchbaseOperationService.DN};\n         } else {\n             boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n             if (!hasDn) {\n-                select = ArrayHelper.arrayMerge(select, new String[] { CouchbaseOperationService.DN });\n+                select = ArrayHelper.arrayMerge(select, new String[] {CouchbaseOperationService.DN});\n             }\n         }\n-        GroupByPath selectQuery = Select.select(select).from(Expression.i(bucketMapping.getBucketName())).as(\"gluu_doc\").where(finalExpression);\n \n+        GroupByPath selectQuery = Select.select(select).from(Expression.i(bucketMapping.getBucketName())).as(\"gluu_doc\").where(finalExpression);\n         LimitPath baseQuery = selectQuery;\n         if (orderBy != null) {\n             baseQuery = selectQuery.orderBy(orderBy);\n         }\n \n         List<N1qlQueryRow> searchResultList = new ArrayList<N1qlQueryRow>();\n-\n         N1qlQueryResult lastResult;\n         if (pageSize > 0) {\n             boolean collectSearchResult;\n-\n             Statement query = null;\n             int currentLimit;\n             try {\n@@ -296,7 +283,6 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                 int resultCount = 0;\n                 do {\n                     collectSearchResult = true;\n-\n                     currentLimit = pageSize;\n                     if (count > 0) {\n                         currentLimit = Math.min(pageSize, count - resultCount);\n@@ -306,15 +292,14 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                     LOG.debug(\"Execution query: '\" + query + \"'\");\n                     lastResult = bucket.query(query);\n                     if (!lastResult.finalSuccess()) {\n-                        throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", query, lastResult.errors()),\n-                                lastResult.info().errorCount());\n+                        throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", query, lastResult.errors()), lastResult.info().errorCount());\n                     }\n \n                     lastSearchResultList = lastResult.allRows();\n-\n                     if (ldapBatchOperation != null) {\n                         collectSearchResult = ldapBatchOperation.collectSearchResult(lastSearchResultList.size());\n                     }\n+\n                     if (collectSearchResult) {\n                         searchResultList.addAll(lastSearchResultList);\n                     }\n@@ -325,7 +310,6 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                     }\n \n                     resultCount += lastSearchResultList.size();\n-\n                     if ((count > 0) && (resultCount >= count)) {\n                         break;\n                     }\n@@ -339,6 +323,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                 if (count > 0) {\n                     query = ((LimitPath) query).limit(count);\n                 }\n+\n                 if (start > 0) {\n                     query = ((OffsetPath) query).offset(start);\n                 }\n@@ -346,8 +331,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n                 LOG.debug(\"Execution query: '\" + query + \"'\");\n                 lastResult = bucket.query(query);\n                 if (!lastResult.finalSuccess()) {\n-                    throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", baseQuery, lastResult.errors()),\n-                            lastResult.info().errorCount());\n+                    throw new SearchException(String.format(\"Failed to search entries. Query: '%s'. Error: \", baseQuery, lastResult.errors()), lastResult.info().errorCount());\n                 }\n \n                 searchResultList.addAll(lastResult.allRows());\n@@ -365,18 +349,18 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         result.setEntries(resultRows);\n         result.setEntriesCount(resultRows.size());\n         result.setStart(start);\n-\n         if (returnCount) {\n-            GroupByPath selectCountQuery = Select.select(\"COUNT(*) as TOTAL\").from(Expression.i(bucketMapping.getBucketName()))\n-                    .where(finalExpression);\n+            GroupByPath selectCountQuery = Select.select(\"COUNT(*) as TOTAL\").from(Expression.i(bucketMapping.getBucketName())).where(finalExpression);\n             try {\n                 LOG.debug(\"Calculating count. Execution query: '\" + selectCountQuery + \"'\");\n+\n                 N1qlQueryResult countResult = bucket.query(selectCountQuery);\n                 if (!countResult.finalSuccess() || (countResult.info().resultCount() != 1)) {\n-                    throw new SearchException(\n-                            String.format(\"Failed to calculate count entries. Query: '%s'. Error: \", selectCountQuery, countResult.errors()),\n-                            countResult.info().errorCount());\n+                    throw new SearchException(String.format(\"Failed to calculate count entries. Query: '%s'. Error: \",\n+                        selectCountQuery,\n+                            countResult.errors()), countResult.info().errorCount());\n                 }\n+\n                 result.setTotalEntriesCount(countResult.allRows().get(0).value().getInt(\"TOTAL\"));\n             } catch (CouchbaseException ex) {\n                 throw new SearchException(\"Failed to calculate count entries. Query: '\" + selectCountQuery.toString() + \"'\", ex);\n@@ -412,7 +396,6 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n     @Override\n     public boolean destroy() {\n         boolean result = true;\n-\n         if (connectionProvider != null) {\n             try {\n                 connectionProvider.destory();\n@@ -430,4 +413,4 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         return connectionProvider.isConnected();\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/28/CouchbaseOperationsServiceImpl.java\nindex 04667da88c9..f4120dd6efd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/28/CouchbaseOperationsServiceImpl.java\n@@ -268,7 +268,7 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         if (select == null) {\n             select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n         } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n-        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n+        // Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n             select = new String[] { CouchbaseOperationService.DN };\n         } else {\n             boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/28/CouchbaseOperationsServiceImpl.java\nindex 04667da88c9..b1dae819f6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/28/CouchbaseOperationsServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/28/CouchbaseOperationsServiceImpl.java\n@@ -268,8 +268,8 @@ public class CouchbaseOperationsServiceImpl implements CouchbaseOperationService\n         if (select == null) {\n             select = new String[] { \"gluu_doc.*\", CouchbaseOperationService.DN };\n         } else if ((select.length == 1) && StringHelper.isEmpty(select[0])) {\n-        \t// Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n-            select = new String[] { CouchbaseOperationService.DN };\n+            // Compatibility with LDAP persistence layer when application pass filter new String[] { \"\" }\n+        select = new String[] { CouchbaseOperationService.DN };\n         } else {\n             boolean hasDn = Arrays.asList(select).contains(CouchbaseOperationService.DN);\n             if (!hasDn) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}