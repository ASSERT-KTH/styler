{
    "project_name": "apache-shardingsphere",
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "55",
                "column": "5",
                "severity": "warning",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    \n    \n    /**\n     * Init by string data.\n     *\n     * @param data string data",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/38/JobProgress.java\nindex 8664875d8ef..d66c66aa7bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/38/JobProgress.java\n@@ -50,8 +50,7 @@ public final class JobProgress {\n     private Map<String, InventoryTaskProgress> inventoryTaskProgressMap;\n     \n     private Map<String, IncrementalTaskProgress> incrementalTaskProgressMap;\n-    \n-    \n+\n     /**\n      * Init by string data.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "55",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/38/JobProgress.java\nindex 8664875d8ef..5a0a4275efa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/38/JobProgress.java\n@@ -40,18 +40,18 @@ import java.util.stream.Collectors;\n @Getter\n @Setter\n public final class JobProgress {\n-    \n+\n     private static final JobProgressYamlSwapper JOB_PROGRESS_YAML_SWAPPER = new JobProgressYamlSwapper();\n-    \n+\n     private JobStatus status = JobStatus.RUNNING;\n-    \n+\n     private String databaseType;\n-    \n+\n     private Map<String, InventoryTaskProgress> inventoryTaskProgressMap;\n-    \n+\n     private Map<String, IncrementalTaskProgress> incrementalTaskProgressMap;\n-    \n-    \n+\n+\n     /**\n      * Init by string data.\n      *\n@@ -61,7 +61,7 @@ public final class JobProgress {\n     public static JobProgress init(final String data) {\n         return JOB_PROGRESS_YAML_SWAPPER.swapToObject(YamlEngine.unmarshal(data, YamlJobProgress.class));\n     }\n-    \n+\n     /**\n      * Get incremental position.\n      *\n@@ -71,7 +71,7 @@ public final class JobProgress {\n     public ScalingPosition<?> getIncrementalPosition(final String dataSourceName) {\n         return incrementalTaskProgressMap.get(dataSourceName).getPosition();\n     }\n-    \n+\n     /**\n      * Get inventory position.\n      *\n@@ -81,15 +81,15 @@ public final class JobProgress {\n     public Map<String, ScalingPosition<?>> getInventoryPosition(final String tableName) {\n         Pattern pattern = Pattern.compile(String.format(\"%s(#\\\\d+)?\", tableName));\n         return inventoryTaskProgressMap.entrySet().stream()\n-                .filter(entry -> pattern.matcher(entry.getKey()).find())\n-                .collect(Collectors.toMap(Entry::getKey, entry -> entry.getValue().getPosition()));\n+            .filter(entry -> pattern.matcher(entry.getKey()).find())\n+            .collect(Collectors.toMap(Entry::getKey, entry -> entry.getValue().getPosition()));\n     }\n-    \n+\n     @Override\n     public String toString() {\n         return YamlEngine.marshal(JOB_PROGRESS_YAML_SWAPPER.swapToYaml(this));\n     }\n-    \n+\n     /**\n      * Get inventory finished percentage.\n      *\n@@ -97,11 +97,11 @@ public final class JobProgress {\n      */\n     public int getInventoryFinishedPercentage() {\n         long finished = inventoryTaskProgressMap.values().stream()\n-                .filter(each -> each.getPosition() instanceof FinishedPosition)\n-                .count();\n+            .filter(each -> each.getPosition() instanceof FinishedPosition)\n+            .count();\n         return inventoryTaskProgressMap.isEmpty() ? 0 : (int) (finished * 100 / inventoryTaskProgressMap.size());\n     }\n-    \n+\n     /**\n      * Get incremental average delay milliseconds.\n      *\n@@ -109,8 +109,8 @@ public final class JobProgress {\n      */\n     public long getIncrementalAverageDelayMilliseconds() {\n         List<Long> delays = incrementalTaskProgressMap.values().stream()\n-                .map(each -> each.getIncrementalTaskDelay().getDelayMilliseconds())\n-                .collect(Collectors.toList());\n+            .map(each -> each.getIncrementalTaskDelay().getDelayMilliseconds())\n+            .collect(Collectors.toList());\n         return delays.isEmpty() || delays.contains(-1L) ? -1L : delays.stream().reduce(Long::sum).orElse(0L) / delays.size();\n     }\n }\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/38/JobProgress.java\nindex 8664875d8ef..769d563b710 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/38/JobProgress.java\n@@ -50,9 +50,8 @@ public final class JobProgress {\n     private Map<String, InventoryTaskProgress> inventoryTaskProgressMap;\n     \n     private Map<String, IncrementalTaskProgress> incrementalTaskProgressMap;\n-    \n-    \n-    /**\n+\n+/**\n      * Init by string data.\n      *\n      * @param data string data\n@@ -80,8 +79,7 @@ public final class JobProgress {\n      */\n     public Map<String, ScalingPosition<?>> getInventoryPosition(final String tableName) {\n         Pattern pattern = Pattern.compile(String.format(\"%s(#\\\\d+)?\", tableName));\n-        return inventoryTaskProgressMap.entrySet().stream()\n-                .filter(entry -> pattern.matcher(entry.getKey()).find())\n+        return inventoryTaskProgressMap.entrySet().stream().filter(entry -> pattern.matcher(entry.getKey()).find())\n                 .collect(Collectors.toMap(Entry::getKey, entry -> entry.getValue().getPosition()));\n     }\n     \n@@ -96,8 +94,7 @@ public final class JobProgress {\n      * @return finished percentage\n      */\n     public int getInventoryFinishedPercentage() {\n-        long finished = inventoryTaskProgressMap.values().stream()\n-                .filter(each -> each.getPosition() instanceof FinishedPosition)\n+        long finished = inventoryTaskProgressMap.values().stream().filter(each -> each.getPosition() instanceof FinishedPosition)\n                 .count();\n         return inventoryTaskProgressMap.isEmpty() ? 0 : (int) (finished * 100 / inventoryTaskProgressMap.size());\n     }\n@@ -108,9 +105,8 @@ public final class JobProgress {\n      * @return average delay\n      */\n     public long getIncrementalAverageDelayMilliseconds() {\n-        List<Long> delays = incrementalTaskProgressMap.values().stream()\n-                .map(each -> each.getIncrementalTaskDelay().getDelayMilliseconds())\n+        List<Long> delays = incrementalTaskProgressMap.values().stream().map(each -> each.getIncrementalTaskDelay().getDelayMilliseconds())\n                 .collect(Collectors.toList());\n         return delays.isEmpty() || delays.contains(-1L) ? -1L : delays.stream().reduce(Long::sum).orElse(0L) / delays.size();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "56",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "89",
                    "column": "73",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "89",
                    "column": "161",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "105",
                    "column": "79",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "117",
                    "column": "82",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/38/JobProgress.java\nindex 8664875d8ef..8aa8b50efc0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/38/JobProgress.java\n@@ -27,7 +27,6 @@ import org.apache.shardingsphere.scaling.core.job.progress.yaml.JobProgressYamlS\n import org.apache.shardingsphere.scaling.core.job.progress.yaml.YamlJobProgress;\n import org.apache.shardingsphere.scaling.core.job.task.incremental.IncrementalTaskProgress;\n import org.apache.shardingsphere.scaling.core.job.task.inventory.InventoryTaskProgress;\n-\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n@@ -37,18 +36,20 @@ import java.util.stream.Collectors;\n /**\n  * Job progress.\n  */\n+\n+\n @Getter\n @Setter\n public final class JobProgress {\n-    \n+\n     private static final JobProgressYamlSwapper JOB_PROGRESS_YAML_SWAPPER = new JobProgressYamlSwapper();\n-    \n+\n     private JobStatus status = JobStatus.RUNNING;\n-    \n+\n     private String databaseType;\n-    \n+\n     private Map<String, InventoryTaskProgress> inventoryTaskProgressMap;\n-    \n+\n     private Map<String, IncrementalTaskProgress> incrementalTaskProgressMap;\n     \n     \n@@ -58,6 +59,7 @@ public final class JobProgress {\n      * @param data string data\n      * @return job progress\n      */\n+\n     public static JobProgress init(final String data) {\n         return JOB_PROGRESS_YAML_SWAPPER.swapToObject(YamlEngine.unmarshal(data, YamlJobProgress.class));\n     }\n@@ -68,6 +70,8 @@ public final class JobProgress {\n      * @param dataSourceName data source name\n      * @return incremental position\n      */\n+\n+\n     public ScalingPosition<?> getIncrementalPosition(final String dataSourceName) {\n         return incrementalTaskProgressMap.get(dataSourceName).getPosition();\n     }\n@@ -78,13 +82,13 @@ public final class JobProgress {\n      * @param tableName table name\n      * @return inventory position\n      */\n+\n+\n     public Map<String, ScalingPosition<?>> getInventoryPosition(final String tableName) {\n         Pattern pattern = Pattern.compile(String.format(\"%s(#\\\\d+)?\", tableName));\n-        return inventoryTaskProgressMap.entrySet().stream()\n-                .filter(entry -> pattern.matcher(entry.getKey()).find())\n-                .collect(Collectors.toMap(Entry::getKey, entry -> entry.getValue().getPosition()));\n+        return inventoryTaskProgressMap.entrySet().stream().filter(entry-> pattern.matcher(entry.getKey()).find()).collect(Collectors.toMap(Entry::getKey, entry-> entry.getValue().getPosition()));\n     }\n-    \n+\n     @Override\n     public String toString() {\n         return YamlEngine.marshal(JOB_PROGRESS_YAML_SWAPPER.swapToYaml(this));\n@@ -95,10 +99,10 @@ public final class JobProgress {\n      *\n      * @return finished percentage\n      */\n+\n+\n     public int getInventoryFinishedPercentage() {\n-        long finished = inventoryTaskProgressMap.values().stream()\n-                .filter(each -> each.getPosition() instanceof FinishedPosition)\n-                .count();\n+        long finished = inventoryTaskProgressMap.values().stream().filter(each-> each.getPosition() instanceof FinishedPosition).count();\n         return inventoryTaskProgressMap.isEmpty() ? 0 : (int) (finished * 100 / inventoryTaskProgressMap.size());\n     }\n     \n@@ -107,10 +111,10 @@ public final class JobProgress {\n      *\n      * @return average delay\n      */\n+\n+\n     public long getIncrementalAverageDelayMilliseconds() {\n-        List<Long> delays = incrementalTaskProgressMap.values().stream()\n-                .map(each -> each.getIncrementalTaskDelay().getDelayMilliseconds())\n-                .collect(Collectors.toList());\n+        List<Long> delays = incrementalTaskProgressMap.values().stream().map(each-> each.getIncrementalTaskDelay().getDelayMilliseconds()).collect(Collectors.toList());\n         return delays.isEmpty() || delays.contains(-1L) ? -1L : delays.stream().reduce(Long::sum).orElse(0L) / delays.size();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/38/JobProgress.java\nindex 8664875d8ef..d66c66aa7bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/38/JobProgress.java\n@@ -50,8 +50,7 @@ public final class JobProgress {\n     private Map<String, InventoryTaskProgress> inventoryTaskProgressMap;\n     \n     private Map<String, IncrementalTaskProgress> incrementalTaskProgressMap;\n-    \n-    \n+\n     /**\n      * Init by string data.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/38/JobProgress.java\nindex 8664875d8ef..d66c66aa7bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/38/JobProgress.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/38/JobProgress.java\n@@ -50,8 +50,7 @@ public final class JobProgress {\n     private Map<String, InventoryTaskProgress> inventoryTaskProgressMap;\n     \n     private Map<String, IncrementalTaskProgress> incrementalTaskProgressMap;\n-    \n-    \n+\n     /**\n      * Init by string data.\n      *\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}