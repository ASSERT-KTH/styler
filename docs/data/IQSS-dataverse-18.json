{
    "project_name": "IQSS-dataverse",
    "error_id": "18",
    "information": {
        "errors": [
            {
                "line": "90",
                "column": "13",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "            InternetAddress[] recipients = new InternetAddress[recipientStrings.length];\n            try {\n            \tInternetAddress fromAddress = getSystemAddress();\n                setContactDelegation(reply, fromAddress);\n                msg.setFrom(fromAddress);\n                msg.setReplyTo(new Address[] {new InternetAddress(reply, charset)});",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "192",
                    "column": "13",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/18/MailServiceBean.java\nindex 619f6577b61..3afb3aa60ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/18/MailServiceBean.java\n@@ -87,7 +87,7 @@ public class MailServiceBean implements java.io.Serializable {\n             String[] recipientStrings = to.split(\",\");\n             InternetAddress[] recipients = new InternetAddress[recipientStrings.length];\n             try {\n-            \tInternetAddress fromAddress = getSystemAddress();\n+            InternetAddress fromAddress = getSystemAddress();\n                 setContactDelegation(reply, fromAddress);\n                 msg.setFrom(fromAddress);\n                 msg.setReplyTo(new Address[] {new InternetAddress(reply, charset)});\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/18/MailServiceBean.java\nindex 619f6577b61..dff8e8eebb5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/18/MailServiceBean.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse;\n \n import com.sun.mail.smtp.SMTPSendFailedException;\n@@ -41,420 +42,436 @@ import javax.mail.internet.MimeMessage;\n import org.apache.commons.lang3.StringUtils;\n \n /**\n- *\n  * original author: roberttreacy\n  */\n @Stateless\n public class MailServiceBean implements java.io.Serializable {\n-    @EJB\n-    UserNotificationServiceBean userNotificationService;\n-    @EJB\n-    DataverseServiceBean dataverseService;\n-    @EJB\n-    DataFileServiceBean dataFileService;\n-    @EJB\n-    DatasetServiceBean datasetService;\n-    @EJB\n-    DatasetVersionServiceBean versionService; \n-    @EJB\n-    SystemConfig systemConfig;\n-    @EJB\n-    SettingsServiceBean settingsService;\n-    @EJB\n-    PermissionServiceBean permissionService;\n-    @EJB\n-    GroupServiceBean groupService;\n-    @EJB\n-    ConfirmEmailServiceBean confirmEmailService;\n-\n-    private static final Logger logger = Logger.getLogger(MailServiceBean.class.getCanonicalName());\n-\n-    private static final String charset = \"UTF-8\";\n-\n-    /**\n-     * Creates a new instance of MailServiceBean\n-     */\n-    public MailServiceBean() {\n-    }\n-\n-    public void sendMail(String host, String reply, String to, String subject, String messageText) {\n-        Properties props = System.getProperties();\n-        props.put(\"mail.smtp.host\", host);\n-        Session session = Session.getDefaultInstance(props, null);\n-\n-        try {\n-            MimeMessage msg = new MimeMessage(session);\n-            String[] recipientStrings = to.split(\",\");\n-            InternetAddress[] recipients = new InternetAddress[recipientStrings.length];\n-            try {\n-            \tInternetAddress fromAddress = getSystemAddress();\n-                setContactDelegation(reply, fromAddress);\n-                msg.setFrom(fromAddress);\n-                msg.setReplyTo(new Address[] {new InternetAddress(reply, charset)});\n-                for (int i = 0; i < recipients.length; i++) {\n-                    recipients[i] = new InternetAddress(recipientStrings[i], \"\", charset);\n-                }\n-            } catch (UnsupportedEncodingException ex) {\n-                logger.severe(ex.getMessage());\n-            }\n-            msg.setRecipients(Message.RecipientType.TO, recipients);\n-            msg.setSubject(subject, charset);\n-            msg.setText(messageText, charset);\n-            Transport.send(msg, recipients);\n-        } catch (AddressException ae) {\n-            ae.printStackTrace(System.out);\n-        } catch (MessagingException me) {\n-            me.printStackTrace(System.out);\n+  @EJB\n+  UserNotificationServiceBean userNotificationService;\n+  @EJB\n+  DataverseServiceBean dataverseService;\n+  @EJB\n+  DataFileServiceBean dataFileService;\n+  @EJB\n+  DatasetServiceBean datasetService;\n+  @EJB\n+  DatasetVersionServiceBean versionService;\n+  @EJB\n+  SystemConfig systemConfig;\n+  @EJB\n+  SettingsServiceBean settingsService;\n+  @EJB\n+  PermissionServiceBean permissionService;\n+  @EJB\n+  GroupServiceBean groupService;\n+  @EJB\n+  ConfirmEmailServiceBean confirmEmailService;\n+\n+  private static final Logger logger = Logger.getLogger(MailServiceBean.class.getCanonicalName());\n+\n+  private static final String charset = \"UTF-8\";\n+\n+  /**\n+   * Creates a new instance of MailServiceBean\n+   */\n+  public MailServiceBean() {\n+  }\n+\n+  public void sendMail(String host, String reply, String to, String subject, String messageText) {\n+    Properties props = System.getProperties();\n+    props.put(\"mail.smtp.host\", host);\n+    Session session = Session.getDefaultInstance(props, null);\n+\n+    try {\n+      MimeMessage msg = new MimeMessage(session);\n+      String[] recipientStrings = to.split(\",\");\n+      InternetAddress[] recipients = new InternetAddress[recipientStrings.length];\n+      try {\n+        InternetAddress fromAddress = getSystemAddress();\n+        setContactDelegation(reply, fromAddress);\n+        msg.setFrom(fromAddress);\n+        msg.setReplyTo(new Address[] {new InternetAddress(reply, charset)});\n+        for (int i = 0; i < recipients.length; i++) {\n+          recipients[i] = new InternetAddress(recipientStrings[i], \"\", charset);\n         }\n+      } catch (UnsupportedEncodingException ex) {\n+        logger.severe(ex.getMessage());\n+      }\n+      msg.setRecipients(Message.RecipientType.TO, recipients);\n+      msg.setSubject(subject, charset);\n+      msg.setText(messageText, charset);\n+      Transport.send(msg, recipients);\n+    } catch (AddressException ae) {\n+      ae.printStackTrace(System.out);\n+    } catch (MessagingException me) {\n+      me.printStackTrace(System.out);\n     }\n-\n-    @Resource(name = \"mail/notifyMailSession\")\n-    private Session session;\n-\n-    public boolean sendSystemEmail(String to, String subject, String messageText) {\n-        return sendSystemEmail(to, subject, messageText, false);\n-    }\n-\n-    public boolean sendSystemEmail(String to, String subject, String messageText, boolean isHtmlContent) {\n-\n-        boolean sent = false;\n-        InternetAddress systemAddress = getSystemAddress(); \n-\n-        String body = messageText\n-                + (isHtmlContent ? BundleUtil.getStringFromBundle(\"notification.email.closing.html\", Arrays.asList(BrandingUtil.getSupportTeamEmailAddress(systemAddress), BrandingUtil.getSupportTeamName(systemAddress)))\n-                        : BundleUtil.getStringFromBundle(\"notification.email.closing\", Arrays.asList(BrandingUtil.getSupportTeamEmailAddress(systemAddress), BrandingUtil.getSupportTeamName(systemAddress))));\n-\n-        logger.fine(\"Sending email to \" + to + \". Subject: <<<\" + subject + \">>>. Body: \" + body);\n-        try {\n-            MimeMessage msg = new MimeMessage(session);\n-            if (systemAddress != null) {\n-                msg.setFrom(systemAddress);\n-                msg.setSentDate(new Date());\n-                String[] recipientStrings = to.split(\",\");\n-                InternetAddress[] recipients = new InternetAddress[recipientStrings.length];\n-                for (int i = 0; i < recipients.length; i++) {\n-                    try {\n-                        recipients[i] = new InternetAddress(recipientStrings[i], \"\", charset);\n-                    } catch (UnsupportedEncodingException ex) {\n-                        logger.severe(ex.getMessage());\n-                    }\n-                }\n-                msg.setRecipients(Message.RecipientType.TO, recipients);\n-                msg.setSubject(subject, charset);\n-                if (isHtmlContent) {\n-                    msg.setText(body, charset, \"html\");\n-                } else {\n-                    msg.setText(body, charset);\n-                }\n-\n-                try {\n-                    Transport.send(msg, recipients);\n-                    sent = true;\n-                } catch (SMTPSendFailedException ssfe) {\n-                    logger.warning(\"Failed to send mail to: \" + to);\n-                    logger.warning(\"SMTPSendFailedException Message: \" + ssfe);\n-                }\n-            } else {\n-                logger.fine(\"Skipping sending mail to \" + to + \", because the \\\"no-reply\\\" address not set (\" + Key.SystemEmail + \" setting).\");\n-            }\n-        } catch (AddressException ae) {\n-            logger.warning(\"Failed to send mail to \" + to);\n-            ae.printStackTrace(System.out);\n-        } catch (MessagingException me) {\n-            logger.warning(\"Failed to send mail to \" + to);\n-            me.printStackTrace(System.out);\n+  }\n+\n+  @Resource(name = \"mail/notifyMailSession\")\n+  private Session session;\n+\n+  public boolean sendSystemEmail(String to, String subject, String messageText) {\n+    return sendSystemEmail(to, subject, messageText, false);\n+  }\n+\n+  public boolean sendSystemEmail(String to, String subject, String messageText, boolean isHtmlContent) {\n+\n+    boolean sent = false;\n+    InternetAddress systemAddress = getSystemAddress();\n+\n+    String body = messageText\n+      + (isHtmlContent ? BundleUtil.getStringFromBundle(\"notification.email.closing.html\", Arrays\n+      .asList(BrandingUtil.getSupportTeamEmailAddress(systemAddress), BrandingUtil.getSupportTeamName(systemAddress)))\n+      : BundleUtil.getStringFromBundle(\"notification.email.closing\", Arrays\n+      .asList(BrandingUtil.getSupportTeamEmailAddress(systemAddress), BrandingUtil.getSupportTeamName(systemAddress))));\n+\n+    logger.fine(\"Sending email to \" + to + \". Subject: <<<\" + subject + \">>>. Body: \" + body);\n+    try {\n+      MimeMessage msg = new MimeMessage(session);\n+      if (systemAddress != null) {\n+        msg.setFrom(systemAddress);\n+        msg.setSentDate(new Date());\n+        String[] recipientStrings = to.split(\",\");\n+        InternetAddress[] recipients = new InternetAddress[recipientStrings.length];\n+        for (int i = 0; i < recipients.length; i++) {\n+          try {\n+            recipients[i] = new InternetAddress(recipientStrings[i], \"\", charset);\n+          } catch (UnsupportedEncodingException ex) {\n+            logger.severe(ex.getMessage());\n+          }\n+        }\n+        msg.setRecipients(Message.RecipientType.TO, recipients);\n+        msg.setSubject(subject, charset);\n+        if (isHtmlContent) {\n+          msg.setText(body, charset, \"html\");\n+        } else {\n+          msg.setText(body, charset);\n         }\n-        return sent;\n-    }\n-\n-    private InternetAddress getSystemAddress() {\n-       String systemEmail = settingsService.getValueForKey(Key.SystemEmail);\n-       return MailUtil.parseSystemAddress(systemEmail);\n-    }\n-\n-    //@Resource(name=\"mail/notifyMailSession\")\n-    public void sendMail(String from, String to, String subject, String messageText) {\n-        sendMail(from, to, subject, messageText, new HashMap<>());\n-    }\n \n-    public void sendMail(String reply, String to, String subject, String messageText, Map<Object, Object> extraHeaders) {\n         try {\n-            MimeMessage msg = new MimeMessage(session);\n-            // Always send from system address to avoid email being blocked\n-            InternetAddress fromAddress = getSystemAddress();\n-            try {\n-                setContactDelegation(reply, fromAddress);\n-            } catch (UnsupportedEncodingException ex) {\n-                logger.severe(ex.getMessage());\n-            }\n-            msg.setFrom(fromAddress);\n-            if (EMailValidator.isEmailValid(reply, null)) {\n-            \t// But set the reply-to address to direct replies to the requested 'from' party if it is a valid email address\n-                msg.setReplyTo(new Address[] {new InternetAddress(reply)});\n-            } else {\n-                // Otherwise include the invalid 'from' address in the message\n-                messageText = \"From: \" + reply + \"\\n\\n\" + messageText;\n-            }\n-            msg.setSentDate(new Date());\n-            msg.setRecipients(Message.RecipientType.TO,\n-                    InternetAddress.parse(to, false));\n-            msg.setSubject(subject, charset);\n-            msg.setText(messageText, charset);\n-\n-            if (extraHeaders != null) {\n-                for (Object key : extraHeaders.keySet()) {\n-                    String headerName = key.toString();\n-                    String headerValue = extraHeaders.get(key).toString();\n-\n-                    msg.addHeader(headerName, headerValue);\n-                }\n-            }\n-\n-            Transport.send(msg);\n-        } catch (AddressException ae) {\n-            ae.printStackTrace(System.out);\n-        } catch (MessagingException me) {\n-            me.printStackTrace(System.out);\n+          Transport.send(msg, recipients);\n+          sent = true;\n+        } catch (SMTPSendFailedException ssfe) {\n+          logger.warning(\"Failed to send mail to: \" + to);\n+          logger.warning(\"SMTPSendFailedException Message: \" + ssfe);\n         }\n+      } else {\n+        logger.fine(\n+          \"Skipping sending mail to \" + to + \", because the \\\"no-reply\\\" address not set (\" + Key.SystemEmail +\n+            \" setting).\");\n+      }\n+    } catch (AddressException ae) {\n+      logger.warning(\"Failed to send mail to \" + to);\n+      ae.printStackTrace(System.out);\n+    } catch (MessagingException me) {\n+      logger.warning(\"Failed to send mail to \" + to);\n+      me.printStackTrace(System.out);\n     }\n-\n-    /**\n-     * Set the contact delegation as \"[dataverse team] on behalf of [user email]\"\n-     * @param reply The user's email address as give via the contact form\n-     * @param fromAddress The system email address\n-     * @throws UnsupportedEncodingException\n-     */\n-    public void setContactDelegation(String reply, InternetAddress fromAddress)\n-            throws UnsupportedEncodingException {\n-        String personal = fromAddress.getPersonal() != null\n-            ? fromAddress.getPersonal()\n-            : BrandingUtil.getInstallationBrandName() != null\n-                ? BrandingUtil.getInstallationBrandName()\n-                : BundleUtil.getStringFromBundle(\"contact.delegation.default_personal\");\n-        fromAddress.setPersonal(\n-            BundleUtil.getStringFromBundle(\n-                \"contact.delegation\",\n-                Arrays.asList(personal, reply)),\n-            charset\n-        );\n-    }\n-\n-    public Boolean sendNotificationEmail(UserNotification notification){\n-        return sendNotificationEmail(notification, \"\");\n-    }\n-\n-    public Boolean sendNotificationEmail(UserNotification notification, String comment) {\n-        return sendNotificationEmail(notification, comment, null, false);\n-    }\n-\n-    public Boolean sendNotificationEmail(UserNotification notification, String comment, boolean isHtmlContent) {\n-        return sendNotificationEmail(notification, comment, null, isHtmlContent);\n-    }\n-\n-    public Boolean sendNotificationEmail(UserNotification notification, String comment, AuthenticatedUser requestor, boolean isHtmlContent){\n-\n-        boolean retval = false;\n-        String emailAddress = getUserEmailAddress(notification);\n-        if (emailAddress != null){\n-           Object objectOfNotification =  getObjectOfNotification(notification);\n-           if (objectOfNotification != null){\n-               String messageText = getMessageTextBasedOnNotification(notification, objectOfNotification, comment, requestor);\n-               String subjectText = MailUtil.getSubjectTextBasedOnNotification(notification, objectOfNotification);\n-               if (!(messageText.isEmpty() || subjectText.isEmpty())){\n-                   retval = sendSystemEmail(emailAddress, subjectText, messageText, isHtmlContent);\n-               } else {\n-                   logger.warning(\"Skipping \" + notification.getType() +  \" notification, because couldn't get valid message\");\n-               }\n-           } else { \n-               logger.warning(\"Skipping \" + notification.getType() +  \" notification, because no valid Object was found\");\n-           }           \n-        } else {\n-            logger.warning(\"Skipping \" + notification.getType() +  \" notification, because email address is null\");\n+    return sent;\n+  }\n+\n+  private InternetAddress getSystemAddress() {\n+    String systemEmail = settingsService.getValueForKey(Key.SystemEmail);\n+    return MailUtil.parseSystemAddress(systemEmail);\n+  }\n+\n+  //@Resource(name=\"mail/notifyMailSession\")\n+  public void sendMail(String from, String to, String subject, String messageText) {\n+    sendMail(from, to, subject, messageText, new HashMap<>());\n+  }\n+\n+  public void sendMail(String reply, String to, String subject, String messageText, Map<Object, Object> extraHeaders) {\n+    try {\n+      MimeMessage msg = new MimeMessage(session);\n+      // Always send from system address to avoid email being blocked\n+      InternetAddress fromAddress = getSystemAddress();\n+      try {\n+        setContactDelegation(reply, fromAddress);\n+      } catch (UnsupportedEncodingException ex) {\n+        logger.severe(ex.getMessage());\n+      }\n+      msg.setFrom(fromAddress);\n+      if (EMailValidator.isEmailValid(reply, null)) {\n+        // But set the reply-to address to direct replies to the requested 'from' party if it is a valid email address\n+        msg.setReplyTo(new Address[] {new InternetAddress(reply)});\n+      } else {\n+        // Otherwise include the invalid 'from' address in the message\n+        messageText = \"From: \" + reply + \"\\n\\n\" + messageText;\n+      }\n+      msg.setSentDate(new Date());\n+      msg.setRecipients(Message.RecipientType.TO,\n+        InternetAddress.parse(to, false));\n+      msg.setSubject(subject, charset);\n+      msg.setText(messageText, charset);\n+\n+      if (extraHeaders != null) {\n+        for (Object key : extraHeaders.keySet()) {\n+          String headerName = key.toString();\n+          String headerValue = extraHeaders.get(key).toString();\n+\n+          msg.addHeader(headerName, headerValue);\n         }\n-        return retval;\n-    }\n-\n-    private String getDatasetManageFileAccessLink(DataFile datafile){\n-        return  systemConfig.getDataverseSiteUrl() + \"/permissions-manage-files.xhtml?id=\" + datafile.getOwner().getId();\n-    } \n+      }\n \n-    private String getDatasetLink(Dataset dataset){        \n-        return  systemConfig.getDataverseSiteUrl() + \"/dataset.xhtml?persistentId=\" + dataset.getGlobalIdString();\n-    } \n-\n-    private String getDatasetDraftLink(Dataset dataset){        \n-        return  systemConfig.getDataverseSiteUrl() + \"/dataset.xhtml?persistentId=\" + dataset.getGlobalIdString() + \"&version=DRAFT\" + \"&faces-redirect=true\"; \n-    } \n-\n-    private String getDataverseLink(Dataverse dataverse){       \n-        return  systemConfig.getDataverseSiteUrl() + \"/dataverse/\" + dataverse.getAlias();\n+      Transport.send(msg);\n+    } catch (AddressException ae) {\n+      ae.printStackTrace(System.out);\n+    } catch (MessagingException me) {\n+      me.printStackTrace(System.out);\n     }\n-\n-    /**\n-     * Returns a '/'-separated string of roles that are effective for {@code au}\n-     * over {@code dvObj}. Traverses the containment hierarchy of the {@code d}.\n-     * Takes into consideration all groups that {@code au} is part of.\n-     * @param au The authenticated user whose role assignments we look for.\n-     * @param dvObj The Dataverse object over which the roles are assigned\n-     * @return A set of all the role assignments for {@code ra} over {@code d}.\n-     */\n-    private String getRoleStringFromUser(AuthenticatedUser au, DvObject dvObj) {\n-        // Find user's role(s) for given dataverse/dataset\n-        Set<RoleAssignment> roles = permissionService.assignmentsFor(au, dvObj);\n-        List<String> roleNames = new ArrayList<>();\n-\n-        // Include roles derived from a user's groups\n-        Set<Group> groupsUserBelongsTo = groupService.groupsFor(au, dvObj);\n-        for (Group g : groupsUserBelongsTo) {\n-            roles.addAll(permissionService.assignmentsFor(g, dvObj));\n-        }\n-\n-        for (RoleAssignment ra : roles) {\n-            roleNames.add(ra.getRole().getName());\n+  }\n+\n+  /**\n+   * Set the contact delegation as \"[dataverse team] on behalf of [user email]\"\n+   *\n+   * @param reply       The user's email address as give via the contact form\n+   * @param fromAddress The system email address\n+   * @throws UnsupportedEncodingException\n+   */\n+  public void setContactDelegation(String reply, InternetAddress fromAddress)\n+    throws UnsupportedEncodingException {\n+    String personal = fromAddress.getPersonal() != null\n+      ? fromAddress.getPersonal()\n+      : BrandingUtil.getInstallationBrandName() != null\n+      ? BrandingUtil.getInstallationBrandName()\n+      : BundleUtil.getStringFromBundle(\"contact.delegation.default_personal\");\n+    fromAddress.setPersonal(\n+      BundleUtil.getStringFromBundle(\n+        \"contact.delegation\",\n+        Arrays.asList(personal, reply)),\n+      charset\n+    );\n+  }\n+\n+  public Boolean sendNotificationEmail(UserNotification notification) {\n+    return sendNotificationEmail(notification, \"\");\n+  }\n+\n+  public Boolean sendNotificationEmail(UserNotification notification, String comment) {\n+    return sendNotificationEmail(notification, comment, null, false);\n+  }\n+\n+  public Boolean sendNotificationEmail(UserNotification notification, String comment, boolean isHtmlContent) {\n+    return sendNotificationEmail(notification, comment, null, isHtmlContent);\n+  }\n+\n+  public Boolean sendNotificationEmail(UserNotification notification, String comment, AuthenticatedUser requestor,\n+                                       boolean isHtmlContent) {\n+\n+    boolean retval = false;\n+    String emailAddress = getUserEmailAddress(notification);\n+    if (emailAddress != null) {\n+      Object objectOfNotification = getObjectOfNotification(notification);\n+      if (objectOfNotification != null) {\n+        String messageText = getMessageTextBasedOnNotification(notification, objectOfNotification, comment, requestor);\n+        String subjectText = MailUtil.getSubjectTextBasedOnNotification(notification, objectOfNotification);\n+        if (!(messageText.isEmpty() || subjectText.isEmpty())) {\n+          retval = sendSystemEmail(emailAddress, subjectText, messageText, isHtmlContent);\n+        } else {\n+          logger.warning(\"Skipping \" + notification.getType() + \" notification, because couldn't get valid message\");\n         }\n-        return StringUtils.join(roleNames, \"/\");\n+      } else {\n+        logger.warning(\"Skipping \" + notification.getType() + \" notification, because no valid Object was found\");\n+      }\n+    } else {\n+      logger.warning(\"Skipping \" + notification.getType() + \" notification, because email address is null\");\n     }\n-\n-    /**\n-     * Returns the URL to a given {@code DvObject} {@code d}. If {@code d} is a\n-     * {@code DataFile}, return a link to its {@code DataSet}.\n-     * @param d The Dataverse object to get a link for.\n-     * @return A string with a URL to the given Dataverse object.\n-     */\n-    private String getDvObjectLink(DvObject d) {\n-        if (d instanceof Dataverse) {\n-            return getDataverseLink((Dataverse) d);\n-        } else if (d instanceof Dataset) {\n-            return getDatasetLink((Dataset) d);\n-        } else if (d instanceof DataFile) {\n-            return getDatasetLink(((DataFile) d).getOwner());\n-        }\n-        return \"\";\n+    return retval;\n+  }\n+\n+  private String getDatasetManageFileAccessLink(DataFile datafile) {\n+    return systemConfig.getDataverseSiteUrl() + \"/permissions-manage-files.xhtml?id=\" + datafile.getOwner().getId();\n+  }\n+\n+  private String getDatasetLink(Dataset dataset) {\n+    return systemConfig.getDataverseSiteUrl() + \"/dataset.xhtml?persistentId=\" + dataset.getGlobalIdString();\n+  }\n+\n+  private String getDatasetDraftLink(Dataset dataset) {\n+    return systemConfig.getDataverseSiteUrl() + \"/dataset.xhtml?persistentId=\" + dataset.getGlobalIdString() +\n+      \"&version=DRAFT\" + \"&faces-redirect=true\";\n+  }\n+\n+  private String getDataverseLink(Dataverse dataverse) {\n+    return systemConfig.getDataverseSiteUrl() + \"/dataverse/\" + dataverse.getAlias();\n+  }\n+\n+  /**\n+   * Returns a '/'-separated string of roles that are effective for {@code au}\n+   * over {@code dvObj}. Traverses the containment hierarchy of the {@code d}.\n+   * Takes into consideration all groups that {@code au} is part of.\n+   *\n+   * @param au    The authenticated user whose role assignments we look for.\n+   * @param dvObj The Dataverse object over which the roles are assigned\n+   * @return A set of all the role assignments for {@code ra} over {@code d}.\n+   */\n+  private String getRoleStringFromUser(AuthenticatedUser au, DvObject dvObj) {\n+    // Find user's role(s) for given dataverse/dataset\n+    Set<RoleAssignment> roles = permissionService.assignmentsFor(au, dvObj);\n+    List<String> roleNames = new ArrayList<>();\n+\n+    // Include roles derived from a user's groups\n+    Set<Group> groupsUserBelongsTo = groupService.groupsFor(au, dvObj);\n+    for (Group g : groupsUserBelongsTo) {\n+      roles.addAll(permissionService.assignmentsFor(g, dvObj));\n     }\n \n-    /**\n-     * Returns string representation of the type of {@code DvObject} {@code d}.\n-     * @param d The Dataverse object to get the string for\n-     * @return A string that represents the type of a given Dataverse object.\n-     */\n-    private String getDvObjectTypeString(DvObject d) {\n-        if (d instanceof Dataverse) {\n-            return \"dataverse\";\n-        } else if (d instanceof Dataset) {\n-            return \"dataset\";\n-        } else if (d instanceof DataFile) {\n-            return \"data file\";\n-        }\n-        return \"\";\n+    for (RoleAssignment ra : roles) {\n+      roleNames.add(ra.getRole().getName());\n     }\n-\n-    public String getMessageTextBasedOnNotification(UserNotification userNotification, Object targetObject){\n-        return getMessageTextBasedOnNotification(userNotification, targetObject, \"\");\n+    return StringUtils.join(roleNames, \"/\");\n+  }\n+\n+  /**\n+   * Returns the URL to a given {@code DvObject} {@code d}. If {@code d} is a\n+   * {@code DataFile}, return a link to its {@code DataSet}.\n+   *\n+   * @param d The Dataverse object to get a link for.\n+   * @return A string with a URL to the given Dataverse object.\n+   */\n+  private String getDvObjectLink(DvObject d) {\n+    if (d instanceof Dataverse) {\n+      return getDataverseLink((Dataverse) d);\n+    } else if (d instanceof Dataset) {\n+      return getDatasetLink((Dataset) d);\n+    } else if (d instanceof DataFile) {\n+      return getDatasetLink(((DataFile) d).getOwner());\n     }\n-\n-    public String getMessageTextBasedOnNotification(UserNotification userNotification, Object targetObject, String comment) {\n-        return getMessageTextBasedOnNotification(userNotification, targetObject, comment, null);\n+    return \"\";\n+  }\n+\n+  /**\n+   * Returns string representation of the type of {@code DvObject} {@code d}.\n+   *\n+   * @param d The Dataverse object to get the string for\n+   * @return A string that represents the type of a given Dataverse object.\n+   */\n+  private String getDvObjectTypeString(DvObject d) {\n+    if (d instanceof Dataverse) {\n+      return \"dataverse\";\n+    } else if (d instanceof Dataset) {\n+      return \"dataset\";\n+    } else if (d instanceof DataFile) {\n+      return \"data file\";\n     }\n-\n-    public String getMessageTextBasedOnNotification(UserNotification userNotification, Object targetObject, String comment, AuthenticatedUser requestor) {\n-        String messageText = BundleUtil.getStringFromBundle(\"notification.email.greeting\");\n-        DatasetVersion version;\n-        Dataset dataset;\n-        DvObject dvObj;\n-        String dvObjURL;\n-        String dvObjTypeStr;\n-        String pattern;\n-\n-        switch (userNotification.getType()) {\n-            case ASSIGNROLE:\n-                AuthenticatedUser au = userNotification.getUser();\n-                dvObj = (DvObject) targetObject;\n-\n-                String joinedRoleNames = getRoleStringFromUser(au, dvObj);\n-\n-                dvObjURL = getDvObjectLink(dvObj);\n-                dvObjTypeStr = getDvObjectTypeString(dvObj);\n-\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.assignRole\");\n-                String[] paramArrayAssignRole = {joinedRoleNames, dvObjTypeStr, dvObj.getDisplayName(), dvObjURL};\n-                messageText += MessageFormat.format(pattern, paramArrayAssignRole);\n-                if (joinedRoleNames.contains(\"File Downloader\")){\n-                    if (dvObjTypeStr.equals(\"dataset\")){\n-                         pattern = BundleUtil.getStringFromBundle(\"notification.access.granted.fileDownloader.additionalDataset\");\n-                         String[]  paramArrayAssignRoleDS = {\" \"};\n-                        messageText += MessageFormat.format(pattern, paramArrayAssignRoleDS);\n-                    }\n-                    if (dvObjTypeStr.equals(\"dataverse\")){\n-                        pattern = BundleUtil.getStringFromBundle(\"notification.access.granted.fileDownloader.additionalDataverse\");\n-                         String[]  paramArrayAssignRoleDV = {\" \"};\n-                        messageText += MessageFormat.format(pattern, paramArrayAssignRoleDV);\n-                    }                   \n-                }\n-                return messageText;\n-            case REVOKEROLE:\n-                dvObj = (DvObject) targetObject;\n-\n-                dvObjURL = getDvObjectLink(dvObj);\n-                dvObjTypeStr = getDvObjectTypeString(dvObj);\n-\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.revokeRole\");\n-                String[] paramArrayRevokeRole = {dvObjTypeStr, dvObj.getDisplayName(), dvObjURL};\n-                messageText += MessageFormat.format(pattern, paramArrayRevokeRole);\n-                return messageText;\n-            case CREATEDV:\n-                Dataverse dataverse = (Dataverse) targetObject;\n-                Dataverse parentDataverse = dataverse.getOwner();\n-                // initialize to empty string in the rare case that there is no parent dataverse (i.e. root dataverse just created)\n-                String parentDataverseDisplayName = \"\";\n-                String parentDataverseUrl = \"\";\n-                if (parentDataverse != null) {\n-                    parentDataverseDisplayName = parentDataverse.getDisplayName();\n-                    parentDataverseUrl = getDataverseLink(parentDataverse);\n-                }\n-                String dataverseCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.createDataverse\", Arrays.asList(\n-                        dataverse.getDisplayName(),\n-                        getDataverseLink(dataverse),\n-                        parentDataverseDisplayName,\n-                        parentDataverseUrl,\n-                        systemConfig.getGuidesBaseUrl(),\n-                        systemConfig.getGuidesVersion()));\n-                logger.fine(dataverseCreatedMessage);\n-                return messageText += dataverseCreatedMessage;\n-            case REQUESTFILEACCESS:\n-                DataFile datafile = (DataFile) targetObject;\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.requestFileAccess\");\n-                String requestorName = (requestor.getLastName() != null && requestor.getLastName() != null) ? requestor.getFirstName() + \" \" + requestor.getLastName() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n-                String requestorEmail = requestor.getEmail() != null ? requestor.getEmail() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\"); \n-                String[] paramArrayRequestFileAccess = {datafile.getOwner().getDisplayName(), requestorName, requestorEmail, getDatasetManageFileAccessLink(datafile)};\n-                messageText += MessageFormat.format(pattern, paramArrayRequestFileAccess);\n-                return messageText;\n-            case GRANTFILEACCESS:\n-                dataset = (Dataset) targetObject;\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.grantFileAccess\");\n-                String[] paramArrayGrantFileAccess = {dataset.getDisplayName(), getDatasetLink(dataset)};\n-                messageText += MessageFormat.format(pattern, paramArrayGrantFileAccess);\n-                return messageText;\n-            case REJECTFILEACCESS:\n-                dataset = (Dataset) targetObject;\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.rejectFileAccess\");\n-                String[] paramArrayRejectFileAccess = {dataset.getDisplayName(), getDatasetLink(dataset)};\n-                messageText += MessageFormat.format(pattern, paramArrayRejectFileAccess);\n-                return messageText;\n-            case CREATEDS:\n-                version =  (DatasetVersion) targetObject;\n-                String datasetCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.createDataset\", Arrays.asList(\n-                        version.getDataset().getDisplayName(),\n-                        getDatasetLink(version.getDataset()),\n-                        version.getDataset().getOwner().getDisplayName(),\n-                        getDataverseLink(version.getDataset().getOwner()),\n-                        systemConfig.getGuidesBaseUrl(),\n-                        systemConfig.getGuidesVersion()\n-                ));\n-                logger.fine(datasetCreatedMessage);\n-                return messageText += datasetCreatedMessage;\n-            case SUBMITTEDDS:\n-                version =  (DatasetVersion) targetObject;\n-                String mightHaveSubmissionComment = \"\";              \n+    return \"\";\n+  }\n+\n+  public String getMessageTextBasedOnNotification(UserNotification userNotification, Object targetObject) {\n+    return getMessageTextBasedOnNotification(userNotification, targetObject, \"\");\n+  }\n+\n+  public String getMessageTextBasedOnNotification(UserNotification userNotification, Object targetObject,\n+                                                  String comment) {\n+    return getMessageTextBasedOnNotification(userNotification, targetObject, comment, null);\n+  }\n+\n+  public String getMessageTextBasedOnNotification(UserNotification userNotification, Object targetObject,\n+                                                  String comment, AuthenticatedUser requestor) {\n+    String messageText = BundleUtil.getStringFromBundle(\"notification.email.greeting\");\n+    DatasetVersion version;\n+    Dataset dataset;\n+    DvObject dvObj;\n+    String dvObjURL;\n+    String dvObjTypeStr;\n+    String pattern;\n+\n+    switch (userNotification.getType()) {\n+      case ASSIGNROLE:\n+        AuthenticatedUser au = userNotification.getUser();\n+        dvObj = (DvObject) targetObject;\n+\n+        String joinedRoleNames = getRoleStringFromUser(au, dvObj);\n+\n+        dvObjURL = getDvObjectLink(dvObj);\n+        dvObjTypeStr = getDvObjectTypeString(dvObj);\n+\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.assignRole\");\n+        String[] paramArrayAssignRole = {joinedRoleNames, dvObjTypeStr, dvObj.getDisplayName(), dvObjURL};\n+        messageText += MessageFormat.format(pattern, paramArrayAssignRole);\n+        if (joinedRoleNames.contains(\"File Downloader\")) {\n+          if (dvObjTypeStr.equals(\"dataset\")) {\n+            pattern = BundleUtil.getStringFromBundle(\"notification.access.granted.fileDownloader.additionalDataset\");\n+            String[] paramArrayAssignRoleDS = {\" \"};\n+            messageText += MessageFormat.format(pattern, paramArrayAssignRoleDS);\n+          }\n+          if (dvObjTypeStr.equals(\"dataverse\")) {\n+            pattern = BundleUtil.getStringFromBundle(\"notification.access.granted.fileDownloader.additionalDataverse\");\n+            String[] paramArrayAssignRoleDV = {\" \"};\n+            messageText += MessageFormat.format(pattern, paramArrayAssignRoleDV);\n+          }\n+        }\n+        return messageText;\n+      case REVOKEROLE:\n+        dvObj = (DvObject) targetObject;\n+\n+        dvObjURL = getDvObjectLink(dvObj);\n+        dvObjTypeStr = getDvObjectTypeString(dvObj);\n+\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.revokeRole\");\n+        String[] paramArrayRevokeRole = {dvObjTypeStr, dvObj.getDisplayName(), dvObjURL};\n+        messageText += MessageFormat.format(pattern, paramArrayRevokeRole);\n+        return messageText;\n+      case CREATEDV:\n+        Dataverse dataverse = (Dataverse) targetObject;\n+        Dataverse parentDataverse = dataverse.getOwner();\n+        // initialize to empty string in the rare case that there is no parent dataverse (i.e. root dataverse just created)\n+        String parentDataverseDisplayName = \"\";\n+        String parentDataverseUrl = \"\";\n+        if (parentDataverse != null) {\n+          parentDataverseDisplayName = parentDataverse.getDisplayName();\n+          parentDataverseUrl = getDataverseLink(parentDataverse);\n+        }\n+        String dataverseCreatedMessage =\n+          BundleUtil.getStringFromBundle(\"notification.email.createDataverse\", Arrays.asList(\n+            dataverse.getDisplayName(),\n+            getDataverseLink(dataverse),\n+            parentDataverseDisplayName,\n+            parentDataverseUrl,\n+            systemConfig.getGuidesBaseUrl(),\n+            systemConfig.getGuidesVersion()));\n+        logger.fine(dataverseCreatedMessage);\n+        return messageText += dataverseCreatedMessage;\n+      case REQUESTFILEACCESS:\n+        DataFile datafile = (DataFile) targetObject;\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.requestFileAccess\");\n+        String requestorName = (requestor.getLastName() != null && requestor.getLastName() != null) ?\n+          requestor.getFirstName() + \" \" + requestor.getLastName() :\n+          BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n+        String requestorEmail = requestor.getEmail() != null ? requestor.getEmail() :\n+          BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n+        String[] paramArrayRequestFileAccess = {datafile.getOwner().getDisplayName(), requestorName, requestorEmail,\n+          getDatasetManageFileAccessLink(datafile)};\n+        messageText += MessageFormat.format(pattern, paramArrayRequestFileAccess);\n+        return messageText;\n+      case GRANTFILEACCESS:\n+        dataset = (Dataset) targetObject;\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.grantFileAccess\");\n+        String[] paramArrayGrantFileAccess = {dataset.getDisplayName(), getDatasetLink(dataset)};\n+        messageText += MessageFormat.format(pattern, paramArrayGrantFileAccess);\n+        return messageText;\n+      case REJECTFILEACCESS:\n+        dataset = (Dataset) targetObject;\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.rejectFileAccess\");\n+        String[] paramArrayRejectFileAccess = {dataset.getDisplayName(), getDatasetLink(dataset)};\n+        messageText += MessageFormat.format(pattern, paramArrayRejectFileAccess);\n+        return messageText;\n+      case CREATEDS:\n+        version = (DatasetVersion) targetObject;\n+        String datasetCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.createDataset\", Arrays.asList(\n+          version.getDataset().getDisplayName(),\n+          getDatasetLink(version.getDataset()),\n+          version.getDataset().getOwner().getDisplayName(),\n+          getDataverseLink(version.getDataset().getOwner()),\n+          systemConfig.getGuidesBaseUrl(),\n+          systemConfig.getGuidesVersion()\n+        ));\n+        logger.fine(datasetCreatedMessage);\n+        return messageText += datasetCreatedMessage;\n+      case SUBMITTEDDS:\n+        version = (DatasetVersion) targetObject;\n+        String mightHaveSubmissionComment = \"\";\n                 /*\n                 FIXME\n                 Setting up to add single comment when design completed\n@@ -463,34 +480,40 @@ public class MailServiceBean implements java.io.Serializable {\n                 if (comment != null && !comment.isEmpty()) {\n                     mightHaveSubmissionComment = \".\\n\\n\" + BundleUtil.getStringFromBundle(\"submissionComment\") + \"\\n\\n\" + comment;\n                 }\n-                */                \n-                 requestorName = (requestor.getLastName() != null && requestor.getLastName() != null) ? requestor.getFirstName() + \" \" + requestor.getLastName() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n-                 requestorEmail = requestor.getEmail() != null ? requestor.getEmail() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");               \n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.wasSubmittedForReview\");\n-\n-                String[] paramArraySubmittedDataset = {version.getDataset().getDisplayName(), getDatasetDraftLink(version.getDataset()), \n-                    version.getDataset().getOwner().getDisplayName(),  getDataverseLink(version.getDataset().getOwner()),\n-                   requestorName, requestorEmail  };\n-                messageText += MessageFormat.format(pattern, paramArraySubmittedDataset);\n-                return messageText;\n-            case PUBLISHEDDS:\n-                version =  (DatasetVersion) targetObject;\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.wasPublished\");\n-                String[] paramArrayPublishedDataset = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), \n-                    version.getDataset().getOwner().getDisplayName(),  getDataverseLink(version.getDataset().getOwner())};\n-                messageText += MessageFormat.format(pattern, paramArrayPublishedDataset);\n-                return messageText;\n-            case PUBLISHFAILED_PIDREG:\n-                version =  (DatasetVersion) targetObject;\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.publishFailedPidReg\");\n-                String[] paramArrayPublishFailedDatasetPidReg = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), \n-                    version.getDataset().getOwner().getDisplayName(),  getDataverseLink(version.getDataset().getOwner())};\n-                messageText += MessageFormat.format(pattern, paramArrayPublishFailedDatasetPidReg);\n-                return messageText;\n-            case RETURNEDDS:\n-                version =  (DatasetVersion) targetObject;\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.wasReturnedByReviewer\");\n-                String optionalReturnReason = \"\";\n+                */\n+        requestorName = (requestor.getLastName() != null && requestor.getLastName() != null) ?\n+          requestor.getFirstName() + \" \" + requestor.getLastName() :\n+          BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n+        requestorEmail = requestor.getEmail() != null ? requestor.getEmail() :\n+          BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.wasSubmittedForReview\");\n+\n+        String[] paramArraySubmittedDataset =\n+          {version.getDataset().getDisplayName(), getDatasetDraftLink(version.getDataset()),\n+            version.getDataset().getOwner().getDisplayName(), getDataverseLink(version.getDataset().getOwner()),\n+            requestorName, requestorEmail};\n+        messageText += MessageFormat.format(pattern, paramArraySubmittedDataset);\n+        return messageText;\n+      case PUBLISHEDDS:\n+        version = (DatasetVersion) targetObject;\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.wasPublished\");\n+        String[] paramArrayPublishedDataset =\n+          {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()),\n+            version.getDataset().getOwner().getDisplayName(), getDataverseLink(version.getDataset().getOwner())};\n+        messageText += MessageFormat.format(pattern, paramArrayPublishedDataset);\n+        return messageText;\n+      case PUBLISHFAILED_PIDREG:\n+        version = (DatasetVersion) targetObject;\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.publishFailedPidReg\");\n+        String[] paramArrayPublishFailedDatasetPidReg =\n+          {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()),\n+            version.getDataset().getOwner().getDisplayName(), getDataverseLink(version.getDataset().getOwner())};\n+        messageText += MessageFormat.format(pattern, paramArrayPublishFailedDatasetPidReg);\n+        return messageText;\n+      case RETURNEDDS:\n+        version = (DatasetVersion) targetObject;\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.wasReturnedByReviewer\");\n+        String optionalReturnReason = \"\";\n                 /*\n                 FIXME\n                 Setting up to add single comment when design completed\n@@ -499,160 +522,166 @@ public class MailServiceBean implements java.io.Serializable {\n                     optionalReturnReason = \".\\n\\n\" + BundleUtil.getStringFromBundle(\"wasReturnedReason\") + \"\\n\\n\" + comment;\n                 }\n                 */\n-                String[] paramArrayReturnedDataset = {version.getDataset().getDisplayName(), getDatasetDraftLink(version.getDataset()), \n-                    version.getDataset().getOwner().getDisplayName(),  getDataverseLink(version.getDataset().getOwner()), optionalReturnReason};\n-                messageText += MessageFormat.format(pattern, paramArrayReturnedDataset);\n-                return messageText;\n-\n-            case WORKFLOW_SUCCESS:\n-                version =  (DatasetVersion) targetObject;\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.workflow.success\");\n-                if (comment == null) {\n-                    comment = BundleUtil.getStringFromBundle(\"notification.email.workflow.nullMessage\");\n-                }\n-                String[] paramArrayWorkflowSuccess = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), comment};\n-                messageText += MessageFormat.format(pattern, paramArrayWorkflowSuccess);\n-                return messageText;\n-            case WORKFLOW_FAILURE:\n-                version =  (DatasetVersion) targetObject;\n-                pattern = BundleUtil.getStringFromBundle(\"notification.email.workflow.failure\");\n-                if (comment == null) {\n-                    comment = BundleUtil.getStringFromBundle(\"notification.email.workflow.nullMessage\");\n-                }\n-                String[] paramArrayWorkflowFailure = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), comment};\n-                messageText += MessageFormat.format(pattern, paramArrayWorkflowFailure);\n-                return messageText;\n-            case CREATEACC:\n-                InternetAddress systemAddress = getSystemAddress();\n-                String accountCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.welcome\", Arrays.asList(\n-                        BrandingUtil.getInstallationBrandName(),\n-                        systemConfig.getGuidesBaseUrl(),\n-                        systemConfig.getGuidesVersion(),\n-                        BrandingUtil.getSupportTeamName(systemAddress),\n-                        BrandingUtil.getSupportTeamEmailAddress(systemAddress)\n-                ));\n-                String optionalConfirmEmailAddon = confirmEmailService.optionalConfirmEmailAddonMsg(userNotification.getUser());\n-                accountCreatedMessage += optionalConfirmEmailAddon;\n-                logger.fine(\"accountCreatedMessage: \" + accountCreatedMessage);\n-                return messageText += accountCreatedMessage;\n-\n-            case CHECKSUMFAIL:\n-                dataset =  (Dataset) targetObject;\n-                String checksumFailMsg = BundleUtil.getStringFromBundle(\"notification.checksumfail\", Arrays.asList(\n-                        dataset.getGlobalIdString()\n-                ));\n-                logger.fine(\"checksumFailMsg: \" + checksumFailMsg);\n-                return messageText += checksumFailMsg;\n-\n-            case FILESYSTEMIMPORT:\n-                version =  (DatasetVersion) targetObject;\n-                String fileImportMsg = BundleUtil.getStringFromBundle(\"notification.mail.import.filesystem\", Arrays.asList(\n-                        systemConfig.getDataverseSiteUrl(),\n-                        version.getDataset().getGlobalIdString(),\n-                        version.getDataset().getDisplayName()\n-                ));\n-                logger.fine(\"fileImportMsg: \" + fileImportMsg);\n-                return messageText += fileImportMsg;\n-\n-            case CHECKSUMIMPORT:\n-                version =  (DatasetVersion) targetObject;\n-                String checksumImportMsg = BundleUtil.getStringFromBundle(\"notification.import.checksum\", Arrays.asList(\n-                        version.getDataset().getGlobalIdString(),\n-                        version.getDataset().getDisplayName()\n-                ));\n-                logger.fine(\"checksumImportMsg: \" + checksumImportMsg);\n-                return messageText += checksumImportMsg;\n-\n-            case APIGENERATED:\n-                String message = BundleUtil.getStringFromBundle(\"notification.email.apiTokenGenerated\", Arrays.asList(\n-                        userNotification.getUser().getFirstName(), userNotification.getUser().getFirstName() ));\n-                return message;\n-\n-            case INGESTCOMPLETED:\n-                dataset = (Dataset) targetObject;\n-                messageText = BundleUtil.getStringFromBundle(\"notification.email.greeting.html\");\n-                String ingestedCompletedMessage = messageText + BundleUtil.getStringFromBundle(\"notification.ingest.completed\", Arrays.asList(\n-                        systemConfig.getDataverseSiteUrl(),\n-                        dataset.getGlobalIdString(),\n-                        dataset.getDisplayName(),\n-                        comment\n-                ));\n-\n-                return ingestedCompletedMessage;\n-            case INGESTCOMPLETEDWITHERRORS:\n-                dataset = (Dataset) targetObject;\n-                messageText = BundleUtil.getStringFromBundle(\"notification.email.greeting.html\");\n-                String ingestedCompletedWithErrorsMessage = messageText + BundleUtil.getStringFromBundle(\"notification.ingest.completedwitherrors\", Arrays.asList(\n-                        systemConfig.getDataverseSiteUrl(),\n-                        dataset.getGlobalIdString(),\n-                        dataset.getDisplayName(),\n-                        comment\n-                ));\n-\n-                return ingestedCompletedWithErrorsMessage;\n+        String[] paramArrayReturnedDataset =\n+          {version.getDataset().getDisplayName(), getDatasetDraftLink(version.getDataset()),\n+            version.getDataset().getOwner().getDisplayName(), getDataverseLink(version.getDataset().getOwner()),\n+            optionalReturnReason};\n+        messageText += MessageFormat.format(pattern, paramArrayReturnedDataset);\n+        return messageText;\n+\n+      case WORKFLOW_SUCCESS:\n+        version = (DatasetVersion) targetObject;\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.workflow.success\");\n+        if (comment == null) {\n+          comment = BundleUtil.getStringFromBundle(\"notification.email.workflow.nullMessage\");\n         }\n-\n-        return \"\";\n+        String[] paramArrayWorkflowSuccess =\n+          {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), comment};\n+        messageText += MessageFormat.format(pattern, paramArrayWorkflowSuccess);\n+        return messageText;\n+      case WORKFLOW_FAILURE:\n+        version = (DatasetVersion) targetObject;\n+        pattern = BundleUtil.getStringFromBundle(\"notification.email.workflow.failure\");\n+        if (comment == null) {\n+          comment = BundleUtil.getStringFromBundle(\"notification.email.workflow.nullMessage\");\n+        }\n+        String[] paramArrayWorkflowFailure =\n+          {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), comment};\n+        messageText += MessageFormat.format(pattern, paramArrayWorkflowFailure);\n+        return messageText;\n+      case CREATEACC:\n+        InternetAddress systemAddress = getSystemAddress();\n+        String accountCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.welcome\", Arrays.asList(\n+          BrandingUtil.getInstallationBrandName(),\n+          systemConfig.getGuidesBaseUrl(),\n+          systemConfig.getGuidesVersion(),\n+          BrandingUtil.getSupportTeamName(systemAddress),\n+          BrandingUtil.getSupportTeamEmailAddress(systemAddress)\n+        ));\n+        String optionalConfirmEmailAddon = confirmEmailService.optionalConfirmEmailAddonMsg(userNotification.getUser());\n+        accountCreatedMessage += optionalConfirmEmailAddon;\n+        logger.fine(\"accountCreatedMessage: \" + accountCreatedMessage);\n+        return messageText += accountCreatedMessage;\n+\n+      case CHECKSUMFAIL:\n+        dataset = (Dataset) targetObject;\n+        String checksumFailMsg = BundleUtil.getStringFromBundle(\"notification.checksumfail\", Arrays.asList(\n+          dataset.getGlobalIdString()\n+        ));\n+        logger.fine(\"checksumFailMsg: \" + checksumFailMsg);\n+        return messageText += checksumFailMsg;\n+\n+      case FILESYSTEMIMPORT:\n+        version = (DatasetVersion) targetObject;\n+        String fileImportMsg = BundleUtil.getStringFromBundle(\"notification.mail.import.filesystem\", Arrays.asList(\n+          systemConfig.getDataverseSiteUrl(),\n+          version.getDataset().getGlobalIdString(),\n+          version.getDataset().getDisplayName()\n+        ));\n+        logger.fine(\"fileImportMsg: \" + fileImportMsg);\n+        return messageText += fileImportMsg;\n+\n+      case CHECKSUMIMPORT:\n+        version = (DatasetVersion) targetObject;\n+        String checksumImportMsg = BundleUtil.getStringFromBundle(\"notification.import.checksum\", Arrays.asList(\n+          version.getDataset().getGlobalIdString(),\n+          version.getDataset().getDisplayName()\n+        ));\n+        logger.fine(\"checksumImportMsg: \" + checksumImportMsg);\n+        return messageText += checksumImportMsg;\n+\n+      case APIGENERATED:\n+        String message = BundleUtil.getStringFromBundle(\"notification.email.apiTokenGenerated\", Arrays.asList(\n+          userNotification.getUser().getFirstName(), userNotification.getUser().getFirstName()));\n+        return message;\n+\n+      case INGESTCOMPLETED:\n+        dataset = (Dataset) targetObject;\n+        messageText = BundleUtil.getStringFromBundle(\"notification.email.greeting.html\");\n+        String ingestedCompletedMessage =\n+          messageText + BundleUtil.getStringFromBundle(\"notification.ingest.completed\", Arrays.asList(\n+            systemConfig.getDataverseSiteUrl(),\n+            dataset.getGlobalIdString(),\n+            dataset.getDisplayName(),\n+            comment\n+          ));\n+\n+        return ingestedCompletedMessage;\n+      case INGESTCOMPLETEDWITHERRORS:\n+        dataset = (Dataset) targetObject;\n+        messageText = BundleUtil.getStringFromBundle(\"notification.email.greeting.html\");\n+        String ingestedCompletedWithErrorsMessage =\n+          messageText + BundleUtil.getStringFromBundle(\"notification.ingest.completedwitherrors\", Arrays.asList(\n+            systemConfig.getDataverseSiteUrl(),\n+            dataset.getGlobalIdString(),\n+            dataset.getDisplayName(),\n+            comment\n+          ));\n+\n+        return ingestedCompletedWithErrorsMessage;\n     }\n \n-    private Object getObjectOfNotification (UserNotification userNotification){\n-        switch (userNotification.getType()) {\n-            case ASSIGNROLE:\n-            case REVOKEROLE:\n-                // Can either be a dataverse or dataset, so search both\n-                Dataverse dataverse = dataverseService.find(userNotification.getObjectId());\n-                if (dataverse != null) {\n-                    return dataverse;\n-                }\n+    return \"\";\n+  }\n+\n+  private Object getObjectOfNotification(UserNotification userNotification) {\n+    switch (userNotification.getType()) {\n+      case ASSIGNROLE:\n+      case REVOKEROLE:\n+        // Can either be a dataverse or dataset, so search both\n+        Dataverse dataverse = dataverseService.find(userNotification.getObjectId());\n+        if (dataverse != null) {\n+          return dataverse;\n+        }\n \n-                Dataset dataset = datasetService.find(userNotification.getObjectId());\n-                return dataset;\n-            case CREATEDV:\n-                return dataverseService.find(userNotification.getObjectId());\n-            case REQUESTFILEACCESS:\n-                return dataFileService.find(userNotification.getObjectId());\n-            case GRANTFILEACCESS:\n-            case REJECTFILEACCESS:\n-                return datasetService.find(userNotification.getObjectId());\n-            case CREATEDS:\n-            case SUBMITTEDDS:\n-            case PUBLISHEDDS:\n-            case PUBLISHFAILED_PIDREG:\n-            case RETURNEDDS:\n-            case WORKFLOW_SUCCESS:\n-            case WORKFLOW_FAILURE:\n-                return versionService.find(userNotification.getObjectId());\n-            case CREATEACC:\n-                return userNotification.getUser();\n-            case CHECKSUMFAIL:\n-                return datasetService.find(userNotification.getObjectId());\n-            case FILESYSTEMIMPORT:\n-                return versionService.find(userNotification.getObjectId());\n-            case CHECKSUMIMPORT:\n-                return versionService.find(userNotification.getObjectId());\n-            case APIGENERATED:\n-                return userNotification.getUser();\n-            case INGESTCOMPLETED:\n-            case INGESTCOMPLETEDWITHERRORS:\n-                return datasetService.find(userNotification.getObjectId());\n+        Dataset dataset = datasetService.find(userNotification.getObjectId());\n+        return dataset;\n+      case CREATEDV:\n+        return dataverseService.find(userNotification.getObjectId());\n+      case REQUESTFILEACCESS:\n+        return dataFileService.find(userNotification.getObjectId());\n+      case GRANTFILEACCESS:\n+      case REJECTFILEACCESS:\n+        return datasetService.find(userNotification.getObjectId());\n+      case CREATEDS:\n+      case SUBMITTEDDS:\n+      case PUBLISHEDDS:\n+      case PUBLISHFAILED_PIDREG:\n+      case RETURNEDDS:\n+      case WORKFLOW_SUCCESS:\n+      case WORKFLOW_FAILURE:\n+        return versionService.find(userNotification.getObjectId());\n+      case CREATEACC:\n+        return userNotification.getUser();\n+      case CHECKSUMFAIL:\n+        return datasetService.find(userNotification.getObjectId());\n+      case FILESYSTEMIMPORT:\n+        return versionService.find(userNotification.getObjectId());\n+      case CHECKSUMIMPORT:\n+        return versionService.find(userNotification.getObjectId());\n+      case APIGENERATED:\n+        return userNotification.getUser();\n+      case INGESTCOMPLETED:\n+      case INGESTCOMPLETEDWITHERRORS:\n+        return datasetService.find(userNotification.getObjectId());\n \n-        }\n-        return null;\n     }\n-\n-    private String getUserEmailAddress(UserNotification notification) {\n-        if (notification != null) {\n-            if (notification.getUser() != null) {\n-                if (notification.getUser().getDisplayInfo() != null) {\n-                    if (notification.getUser().getDisplayInfo().getEmailAddress() != null) {\n-                        logger.fine(\"Email address: \"+notification.getUser().getDisplayInfo().getEmailAddress());\n-                        return notification.getUser().getDisplayInfo().getEmailAddress();\n-                    }\n-                }\n-            }\n+    return null;\n+  }\n+\n+  private String getUserEmailAddress(UserNotification notification) {\n+    if (notification != null) {\n+      if (notification.getUser() != null) {\n+        if (notification.getUser().getDisplayInfo() != null) {\n+          if (notification.getUser().getDisplayInfo().getEmailAddress() != null) {\n+            logger.fine(\"Email address: \" + notification.getUser().getDisplayInfo().getEmailAddress());\n+            return notification.getUser().getDisplayInfo().getEmailAddress();\n+          }\n         }\n-\n-        logger.fine(\"no email address\");\n-        return null; \n+      }\n     }\n+\n+    logger.fine(\"no email address\");\n+    return null;\n+  }\n }\n",
            "diff_size": 785
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/18/MailServiceBean.java\nindex 619f6577b61..ab82eb64218 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/18/MailServiceBean.java\n@@ -44,53 +44,63 @@ import org.apache.commons.lang3.StringUtils;\n  *\n  * original author: roberttreacy\n  */\n+\n+\n @Stateless\n public class MailServiceBean implements java.io.Serializable {\n+\n     @EJB\n     UserNotificationServiceBean userNotificationService;\n+\n     @EJB\n     DataverseServiceBean dataverseService;\n+\n     @EJB\n     DataFileServiceBean dataFileService;\n+\n     @EJB\n     DatasetServiceBean datasetService;\n+\n     @EJB\n-    DatasetVersionServiceBean versionService; \n+    DatasetVersionServiceBean versionService;\n+\n     @EJB\n     SystemConfig systemConfig;\n+\n     @EJB\n     SettingsServiceBean settingsService;\n+\n     @EJB\n     PermissionServiceBean permissionService;\n+\n     @EJB\n     GroupServiceBean groupService;\n+\n     @EJB\n     ConfirmEmailServiceBean confirmEmailService;\n-\n     private static final Logger logger = Logger.getLogger(MailServiceBean.class.getCanonicalName());\n-\n     private static final String charset = \"UTF-8\";\n \n     /**\n      * Creates a new instance of MailServiceBean\n      */\n-    public MailServiceBean() {\n-    }\n+\n+    public MailServiceBean() {}\n \n     public void sendMail(String host, String reply, String to, String subject, String messageText) {\n         Properties props = System.getProperties();\n         props.put(\"mail.smtp.host\", host);\n         Session session = Session.getDefaultInstance(props, null);\n-\n         try {\n             MimeMessage msg = new MimeMessage(session);\n             String[] recipientStrings = to.split(\",\");\n             InternetAddress[] recipients = new InternetAddress[recipientStrings.length];\n             try {\n-            \tInternetAddress fromAddress = getSystemAddress();\n+                InternetAddress fromAddress = getSystemAddress();\n                 setContactDelegation(reply, fromAddress);\n                 msg.setFrom(fromAddress);\n-                msg.setReplyTo(new Address[] {new InternetAddress(reply, charset)});\n+                msg.setReplyTo(new Address[] { new InternetAddress(reply, charset)});\n+\n                 for (int i = 0; i < recipients.length; i++) {\n                     recipients[i] = new InternetAddress(recipientStrings[i], \"\", charset);\n                 }\n@@ -116,14 +126,13 @@ public class MailServiceBean implements java.io.Serializable {\n     }\n \n     public boolean sendSystemEmail(String to, String subject, String messageText, boolean isHtmlContent) {\n-\n         boolean sent = false;\n-        InternetAddress systemAddress = getSystemAddress(); \n-\n-        String body = messageText\n-                + (isHtmlContent ? BundleUtil.getStringFromBundle(\"notification.email.closing.html\", Arrays.asList(BrandingUtil.getSupportTeamEmailAddress(systemAddress), BrandingUtil.getSupportTeamName(systemAddress)))\n-                        : BundleUtil.getStringFromBundle(\"notification.email.closing\", Arrays.asList(BrandingUtil.getSupportTeamEmailAddress(systemAddress), BrandingUtil.getSupportTeamName(systemAddress))));\n-\n+        InternetAddress systemAddress = getSystemAddress();\n+        String body = messageText + (isHtmlContent ? BundleUtil.getStringFromBundle(\"notification.email.closing.html\", Arrays.asList(\n+            BrandingUtil.getSupportTeamEmailAddress(systemAddress),\n+            BrandingUtil.getSupportTeamName(systemAddress))) : BundleUtil.getStringFromBundle(\"notification.email.closing\", Arrays.asList(\n+                BrandingUtil.getSupportTeamEmailAddress(systemAddress),\n+                BrandingUtil.getSupportTeamName(systemAddress))));\n         logger.fine(\"Sending email to \" + to + \". Subject: <<<\" + subject + \">>>. Body: \" + body);\n         try {\n             MimeMessage msg = new MimeMessage(session);\n@@ -146,7 +155,6 @@ public class MailServiceBean implements java.io.Serializable {\n                 } else {\n                     msg.setText(body, charset);\n                 }\n-\n                 try {\n                     Transport.send(msg, recipients);\n                     sent = true;\n@@ -168,11 +176,12 @@ public class MailServiceBean implements java.io.Serializable {\n     }\n \n     private InternetAddress getSystemAddress() {\n-       String systemEmail = settingsService.getValueForKey(Key.SystemEmail);\n-       return MailUtil.parseSystemAddress(systemEmail);\n+        String systemEmail = settingsService.getValueForKey(Key.SystemEmail);\n+        return MailUtil.parseSystemAddress(systemEmail);\n     }\n \n     //@Resource(name=\"mail/notifyMailSession\")\n+\n     public void sendMail(String from, String to, String subject, String messageText) {\n         sendMail(from, to, subject, messageText, new HashMap<>());\n     }\n@@ -189,27 +198,23 @@ public class MailServiceBean implements java.io.Serializable {\n             }\n             msg.setFrom(fromAddress);\n             if (EMailValidator.isEmailValid(reply, null)) {\n-            \t// But set the reply-to address to direct replies to the requested 'from' party if it is a valid email address\n-                msg.setReplyTo(new Address[] {new InternetAddress(reply)});\n+                // But set the reply-to address to direct replies to the requested 'from' party if it is a valid email address\n+                msg.setReplyTo(new Address[] { new InternetAddress(reply)});\n             } else {\n                 // Otherwise include the invalid 'from' address in the message\n                 messageText = \"From: \" + reply + \"\\n\\n\" + messageText;\n             }\n             msg.setSentDate(new Date());\n-            msg.setRecipients(Message.RecipientType.TO,\n-                    InternetAddress.parse(to, false));\n+            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to, false));\n             msg.setSubject(subject, charset);\n             msg.setText(messageText, charset);\n-\n             if (extraHeaders != null) {\n                 for (Object key : extraHeaders.keySet()) {\n                     String headerName = key.toString();\n                     String headerValue = extraHeaders.get(key).toString();\n-\n                     msg.addHeader(headerName, headerValue);\n                 }\n             }\n-\n             Transport.send(msg);\n         } catch (AddressException ae) {\n             ae.printStackTrace(System.out);\n@@ -224,22 +229,13 @@ public class MailServiceBean implements java.io.Serializable {\n      * @param fromAddress The system email address\n      * @throws UnsupportedEncodingException\n      */\n-    public void setContactDelegation(String reply, InternetAddress fromAddress)\n-            throws UnsupportedEncodingException {\n-        String personal = fromAddress.getPersonal() != null\n-            ? fromAddress.getPersonal()\n-            : BrandingUtil.getInstallationBrandName() != null\n-                ? BrandingUtil.getInstallationBrandName()\n-                : BundleUtil.getStringFromBundle(\"contact.delegation.default_personal\");\n-        fromAddress.setPersonal(\n-            BundleUtil.getStringFromBundle(\n-                \"contact.delegation\",\n-                Arrays.asList(personal, reply)),\n-            charset\n-        );\n+\n+    public void setContactDelegation(String reply, InternetAddress fromAddress) throws UnsupportedEncodingException {\n+        String personal = fromAddress.getPersonal() != null ? fromAddress.getPersonal() : BrandingUtil.getInstallationBrandName() != null ? BrandingUtil.getInstallationBrandName() : BundleUtil.getStringFromBundle(\"contact.delegation.default_personal\");\n+        fromAddress.setPersonal(BundleUtil.getStringFromBundle(\"contact.delegation\", Arrays.asList(personal, reply)), charset);\n     }\n \n-    public Boolean sendNotificationEmail(UserNotification notification){\n+    public Boolean sendNotificationEmail(UserNotification notification) {\n         return sendNotificationEmail(notification, \"\");\n     }\n \n@@ -251,43 +247,42 @@ public class MailServiceBean implements java.io.Serializable {\n         return sendNotificationEmail(notification, comment, null, isHtmlContent);\n     }\n \n-    public Boolean sendNotificationEmail(UserNotification notification, String comment, AuthenticatedUser requestor, boolean isHtmlContent){\n-\n+    public Boolean sendNotificationEmail(UserNotification notification, String comment, AuthenticatedUser requestor, boolean isHtmlContent) {\n         boolean retval = false;\n         String emailAddress = getUserEmailAddress(notification);\n-        if (emailAddress != null){\n-           Object objectOfNotification =  getObjectOfNotification(notification);\n-           if (objectOfNotification != null){\n-               String messageText = getMessageTextBasedOnNotification(notification, objectOfNotification, comment, requestor);\n-               String subjectText = MailUtil.getSubjectTextBasedOnNotification(notification, objectOfNotification);\n-               if (!(messageText.isEmpty() || subjectText.isEmpty())){\n-                   retval = sendSystemEmail(emailAddress, subjectText, messageText, isHtmlContent);\n-               } else {\n-                   logger.warning(\"Skipping \" + notification.getType() +  \" notification, because couldn't get valid message\");\n-               }\n-           } else { \n-               logger.warning(\"Skipping \" + notification.getType() +  \" notification, because no valid Object was found\");\n-           }           \n+        if (emailAddress != null) {\n+            Object objectOfNotification = getObjectOfNotification(notification);\n+            if (objectOfNotification != null) {\n+                String messageText = getMessageTextBasedOnNotification(notification, objectOfNotification, comment, requestor);\n+                String subjectText = MailUtil.getSubjectTextBasedOnNotification(notification, objectOfNotification);\n+                if (!(messageText.isEmpty() || subjectText.isEmpty())) {\n+                    retval = sendSystemEmail(emailAddress, subjectText, messageText, isHtmlContent);\n+                } else {\n+                    logger.warning(\"Skipping \" + notification.getType() + \" notification, because couldn't get valid message\");\n+                }\n+            } else {\n+                logger.warning(\"Skipping \" + notification.getType() + \" notification, because no valid Object was found\");\n+            }\n         } else {\n-            logger.warning(\"Skipping \" + notification.getType() +  \" notification, because email address is null\");\n+            logger.warning(\"Skipping \" + notification.getType() + \" notification, because email address is null\");\n         }\n         return retval;\n     }\n \n-    private String getDatasetManageFileAccessLink(DataFile datafile){\n-        return  systemConfig.getDataverseSiteUrl() + \"/permissions-manage-files.xhtml?id=\" + datafile.getOwner().getId();\n-    } \n+    private String getDatasetManageFileAccessLink(DataFile datafile) {\n+        return systemConfig.getDataverseSiteUrl() + \"/permissions-manage-files.xhtml?id=\" + datafile.getOwner().getId();\n+    }\n \n-    private String getDatasetLink(Dataset dataset){        \n-        return  systemConfig.getDataverseSiteUrl() + \"/dataset.xhtml?persistentId=\" + dataset.getGlobalIdString();\n-    } \n+    private String getDatasetLink(Dataset dataset) {\n+        return systemConfig.getDataverseSiteUrl() + \"/dataset.xhtml?persistentId=\" + dataset.getGlobalIdString();\n+    }\n \n-    private String getDatasetDraftLink(Dataset dataset){        \n-        return  systemConfig.getDataverseSiteUrl() + \"/dataset.xhtml?persistentId=\" + dataset.getGlobalIdString() + \"&version=DRAFT\" + \"&faces-redirect=true\"; \n-    } \n+    private String getDatasetDraftLink(Dataset dataset) {\n+        return systemConfig.getDataverseSiteUrl() + \"/dataset.xhtml?persistentId=\" + dataset.getGlobalIdString() + \"&version=DRAFT\" + \"&faces-redirect=true\";\n+    }\n \n-    private String getDataverseLink(Dataverse dataverse){       \n-        return  systemConfig.getDataverseSiteUrl() + \"/dataverse/\" + dataverse.getAlias();\n+    private String getDataverseLink(Dataverse dataverse) {\n+        return systemConfig.getDataverseSiteUrl() + \"/dataverse/\" + dataverse.getAlias();\n     }\n \n     /**\n@@ -298,6 +293,7 @@ public class MailServiceBean implements java.io.Serializable {\n      * @param dvObj The Dataverse object over which the roles are assigned\n      * @return A set of all the role assignments for {@code ra} over {@code d}.\n      */\n+\n     private String getRoleStringFromUser(AuthenticatedUser au, DvObject dvObj) {\n         // Find user's role(s) for given dataverse/dataset\n         Set<RoleAssignment> roles = permissionService.assignmentsFor(au, dvObj);\n@@ -321,14 +317,15 @@ public class MailServiceBean implements java.io.Serializable {\n      * @param d The Dataverse object to get a link for.\n      * @return A string with a URL to the given Dataverse object.\n      */\n+\n     private String getDvObjectLink(DvObject d) {\n         if (d instanceof Dataverse) {\n             return getDataverseLink((Dataverse) d);\n         } else if (d instanceof Dataset) {\n             return getDatasetLink((Dataset) d);\n         } else if (d instanceof DataFile) {\n-            return getDatasetLink(((DataFile) d).getOwner());\n-        }\n+                   return getDatasetLink(((DataFile) d).getOwner());\n+               }\n         return \"\";\n     }\n \n@@ -337,18 +334,19 @@ public class MailServiceBean implements java.io.Serializable {\n      * @param d The Dataverse object to get the string for\n      * @return A string that represents the type of a given Dataverse object.\n      */\n+\n     private String getDvObjectTypeString(DvObject d) {\n         if (d instanceof Dataverse) {\n             return \"dataverse\";\n         } else if (d instanceof Dataset) {\n             return \"dataset\";\n         } else if (d instanceof DataFile) {\n-            return \"data file\";\n-        }\n+                   return \"data file\";\n+               }\n         return \"\";\n     }\n \n-    public String getMessageTextBasedOnNotification(UserNotification userNotification, Object targetObject){\n+    public String getMessageTextBasedOnNotification(UserNotification userNotification, Object targetObject) {\n         return getMessageTextBasedOnNotification(userNotification, targetObject, \"\");\n     }\n \n@@ -364,39 +362,34 @@ public class MailServiceBean implements java.io.Serializable {\n         String dvObjURL;\n         String dvObjTypeStr;\n         String pattern;\n-\n         switch (userNotification.getType()) {\n             case ASSIGNROLE:\n                 AuthenticatedUser au = userNotification.getUser();\n                 dvObj = (DvObject) targetObject;\n-\n                 String joinedRoleNames = getRoleStringFromUser(au, dvObj);\n-\n                 dvObjURL = getDvObjectLink(dvObj);\n                 dvObjTypeStr = getDvObjectTypeString(dvObj);\n-\n                 pattern = BundleUtil.getStringFromBundle(\"notification.email.assignRole\");\n                 String[] paramArrayAssignRole = {joinedRoleNames, dvObjTypeStr, dvObj.getDisplayName(), dvObjURL};\n                 messageText += MessageFormat.format(pattern, paramArrayAssignRole);\n-                if (joinedRoleNames.contains(\"File Downloader\")){\n-                    if (dvObjTypeStr.equals(\"dataset\")){\n-                         pattern = BundleUtil.getStringFromBundle(\"notification.access.granted.fileDownloader.additionalDataset\");\n-                         String[]  paramArrayAssignRoleDS = {\" \"};\n+                if (joinedRoleNames.contains(\"File Downloader\")) {\n+                    if (dvObjTypeStr.equals(\"dataset\")) {\n+                        pattern = BundleUtil.getStringFromBundle(\"notification.access.granted.fileDownloader.additionalDataset\");\n+                        String[] paramArrayAssignRoleDS = { \" \"};\n                         messageText += MessageFormat.format(pattern, paramArrayAssignRoleDS);\n                     }\n-                    if (dvObjTypeStr.equals(\"dataverse\")){\n+\n+                    if (dvObjTypeStr.equals(\"dataverse\")) {\n                         pattern = BundleUtil.getStringFromBundle(\"notification.access.granted.fileDownloader.additionalDataverse\");\n-                         String[]  paramArrayAssignRoleDV = {\" \"};\n+                        String[] paramArrayAssignRoleDV = { \" \"};\n                         messageText += MessageFormat.format(pattern, paramArrayAssignRoleDV);\n-                    }                   \n+                    }\n                 }\n                 return messageText;\n             case REVOKEROLE:\n                 dvObj = (DvObject) targetObject;\n-\n                 dvObjURL = getDvObjectLink(dvObj);\n                 dvObjTypeStr = getDvObjectTypeString(dvObj);\n-\n                 pattern = BundleUtil.getStringFromBundle(\"notification.email.revokeRole\");\n                 String[] paramArrayRevokeRole = {dvObjTypeStr, dvObj.getDisplayName(), dvObjURL};\n                 messageText += MessageFormat.format(pattern, paramArrayRevokeRole);\n@@ -411,21 +404,21 @@ public class MailServiceBean implements java.io.Serializable {\n                     parentDataverseDisplayName = parentDataverse.getDisplayName();\n                     parentDataverseUrl = getDataverseLink(parentDataverse);\n                 }\n-                String dataverseCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.createDataverse\", Arrays.asList(\n-                        dataverse.getDisplayName(),\n-                        getDataverseLink(dataverse),\n-                        parentDataverseDisplayName,\n-                        parentDataverseUrl,\n-                        systemConfig.getGuidesBaseUrl(),\n-                        systemConfig.getGuidesVersion()));\n+\n+                String dataverseCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.createDataverse\", Arrays.asList(dataverse.getDisplayName(), getDataverseLink(dataverse), parentDataverseDisplayName, parentDataverseUrl, systemConfig.getGuidesBaseUrl(), systemConfig.getGuidesVersion()));\n                 logger.fine(dataverseCreatedMessage);\n                 return messageText += dataverseCreatedMessage;\n             case REQUESTFILEACCESS:\n                 DataFile datafile = (DataFile) targetObject;\n                 pattern = BundleUtil.getStringFromBundle(\"notification.email.requestFileAccess\");\n                 String requestorName = (requestor.getLastName() != null && requestor.getLastName() != null) ? requestor.getFirstName() + \" \" + requestor.getLastName() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n-                String requestorEmail = requestor.getEmail() != null ? requestor.getEmail() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\"); \n-                String[] paramArrayRequestFileAccess = {datafile.getOwner().getDisplayName(), requestorName, requestorEmail, getDatasetManageFileAccessLink(datafile)};\n+                String requestorEmail = requestor.getEmail() != null ? requestor.getEmail() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n+                String[] paramArrayRequestFileAccess = {\n+                    datafile.getOwner().getDisplayName(),\n+                    requestorName,\n+                    requestorEmail,\n+                    getDatasetManageFileAccessLink(datafile)\n+                };\n                 messageText += MessageFormat.format(pattern, paramArrayRequestFileAccess);\n                 return messageText;\n             case GRANTFILEACCESS:\n@@ -441,19 +434,12 @@ public class MailServiceBean implements java.io.Serializable {\n                 messageText += MessageFormat.format(pattern, paramArrayRejectFileAccess);\n                 return messageText;\n             case CREATEDS:\n-                version =  (DatasetVersion) targetObject;\n-                String datasetCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.createDataset\", Arrays.asList(\n-                        version.getDataset().getDisplayName(),\n-                        getDatasetLink(version.getDataset()),\n-                        version.getDataset().getOwner().getDisplayName(),\n-                        getDataverseLink(version.getDataset().getOwner()),\n-                        systemConfig.getGuidesBaseUrl(),\n-                        systemConfig.getGuidesVersion()\n-                ));\n+                version = (DatasetVersion) targetObject;\n+                String datasetCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.createDataset\", Arrays.asList(version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), version.getDataset().getOwner().getDisplayName(), getDataverseLink(version.getDataset().getOwner()), systemConfig.getGuidesBaseUrl(), systemConfig.getGuidesVersion()));\n                 logger.fine(datasetCreatedMessage);\n                 return messageText += datasetCreatedMessage;\n             case SUBMITTEDDS:\n-                version =  (DatasetVersion) targetObject;\n+                version = (DatasetVersion) targetObject;\n                 String mightHaveSubmissionComment = \"\";              \n                 /*\n                 FIXME\n@@ -463,32 +449,27 @@ public class MailServiceBean implements java.io.Serializable {\n                 if (comment != null && !comment.isEmpty()) {\n                     mightHaveSubmissionComment = \".\\n\\n\" + BundleUtil.getStringFromBundle(\"submissionComment\") + \"\\n\\n\" + comment;\n                 }\n-                */                \n-                 requestorName = (requestor.getLastName() != null && requestor.getLastName() != null) ? requestor.getFirstName() + \" \" + requestor.getLastName() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n-                 requestorEmail = requestor.getEmail() != null ? requestor.getEmail() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");               \n+                */\n+                requestorName = (requestor.getLastName() != null && requestor.getLastName() != null) ? requestor.getFirstName() + \" \" + requestor.getLastName() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n+                requestorEmail = requestor.getEmail() != null ? requestor.getEmail() : BundleUtil.getStringFromBundle(\"notification.email.info.unavailable\");\n                 pattern = BundleUtil.getStringFromBundle(\"notification.email.wasSubmittedForReview\");\n-\n-                String[] paramArraySubmittedDataset = {version.getDataset().getDisplayName(), getDatasetDraftLink(version.getDataset()), \n-                    version.getDataset().getOwner().getDisplayName(),  getDataverseLink(version.getDataset().getOwner()),\n-                   requestorName, requestorEmail  };\n+                String[] paramArraySubmittedDataset = {version.getDataset().getDisplayName(), getDatasetDraftLink(version.getDataset()), version.getDataset().getOwner().getDisplayName(), getDataverseLink(version.getDataset().getOwner()), requestorName, requestorEmail};\n                 messageText += MessageFormat.format(pattern, paramArraySubmittedDataset);\n                 return messageText;\n             case PUBLISHEDDS:\n-                version =  (DatasetVersion) targetObject;\n+                version = (DatasetVersion) targetObject;\n                 pattern = BundleUtil.getStringFromBundle(\"notification.email.wasPublished\");\n-                String[] paramArrayPublishedDataset = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), \n-                    version.getDataset().getOwner().getDisplayName(),  getDataverseLink(version.getDataset().getOwner())};\n+                String[] paramArrayPublishedDataset = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), version.getDataset().getOwner().getDisplayName(), getDataverseLink(version.getDataset().getOwner())};\n                 messageText += MessageFormat.format(pattern, paramArrayPublishedDataset);\n                 return messageText;\n             case PUBLISHFAILED_PIDREG:\n-                version =  (DatasetVersion) targetObject;\n+                version = (DatasetVersion) targetObject;\n                 pattern = BundleUtil.getStringFromBundle(\"notification.email.publishFailedPidReg\");\n-                String[] paramArrayPublishFailedDatasetPidReg = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), \n-                    version.getDataset().getOwner().getDisplayName(),  getDataverseLink(version.getDataset().getOwner())};\n+                String[] paramArrayPublishFailedDatasetPidReg = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), version.getDataset().getOwner().getDisplayName(), getDataverseLink(version.getDataset().getOwner())};\n                 messageText += MessageFormat.format(pattern, paramArrayPublishFailedDatasetPidReg);\n                 return messageText;\n             case RETURNEDDS:\n-                version =  (DatasetVersion) targetObject;\n+                version = (DatasetVersion) targetObject;\n                 pattern = BundleUtil.getStringFromBundle(\"notification.email.wasReturnedByReviewer\");\n                 String optionalReturnReason = \"\";\n                 /*\n@@ -499,103 +480,80 @@ public class MailServiceBean implements java.io.Serializable {\n                     optionalReturnReason = \".\\n\\n\" + BundleUtil.getStringFromBundle(\"wasReturnedReason\") + \"\\n\\n\" + comment;\n                 }\n                 */\n-                String[] paramArrayReturnedDataset = {version.getDataset().getDisplayName(), getDatasetDraftLink(version.getDataset()), \n-                    version.getDataset().getOwner().getDisplayName(),  getDataverseLink(version.getDataset().getOwner()), optionalReturnReason};\n+                String[] paramArrayReturnedDataset = {version.getDataset().getDisplayName(), getDatasetDraftLink(version.getDataset()), version.getDataset().getOwner().getDisplayName(), getDataverseLink(version.getDataset().getOwner()), optionalReturnReason};\n                 messageText += MessageFormat.format(pattern, paramArrayReturnedDataset);\n                 return messageText;\n-\n             case WORKFLOW_SUCCESS:\n-                version =  (DatasetVersion) targetObject;\n+                version = (DatasetVersion) targetObject;\n                 pattern = BundleUtil.getStringFromBundle(\"notification.email.workflow.success\");\n                 if (comment == null) {\n                     comment = BundleUtil.getStringFromBundle(\"notification.email.workflow.nullMessage\");\n                 }\n-                String[] paramArrayWorkflowSuccess = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), comment};\n+\n+                String[] paramArrayWorkflowSuccess = {\n+                    version.getDataset().getDisplayName(),\n+                    getDatasetLink(version.getDataset()),\n+                    comment\n+                };\n                 messageText += MessageFormat.format(pattern, paramArrayWorkflowSuccess);\n                 return messageText;\n             case WORKFLOW_FAILURE:\n-                version =  (DatasetVersion) targetObject;\n+                version = (DatasetVersion) targetObject;\n                 pattern = BundleUtil.getStringFromBundle(\"notification.email.workflow.failure\");\n                 if (comment == null) {\n                     comment = BundleUtil.getStringFromBundle(\"notification.email.workflow.nullMessage\");\n                 }\n-                String[] paramArrayWorkflowFailure = {version.getDataset().getDisplayName(), getDatasetLink(version.getDataset()), comment};\n+\n+                String[] paramArrayWorkflowFailure = {\n+                    version.getDataset().getDisplayName(),\n+                    getDatasetLink(version.getDataset()),\n+                    comment\n+                };\n                 messageText += MessageFormat.format(pattern, paramArrayWorkflowFailure);\n                 return messageText;\n             case CREATEACC:\n                 InternetAddress systemAddress = getSystemAddress();\n-                String accountCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.welcome\", Arrays.asList(\n-                        BrandingUtil.getInstallationBrandName(),\n-                        systemConfig.getGuidesBaseUrl(),\n-                        systemConfig.getGuidesVersion(),\n-                        BrandingUtil.getSupportTeamName(systemAddress),\n-                        BrandingUtil.getSupportTeamEmailAddress(systemAddress)\n-                ));\n+                String accountCreatedMessage = BundleUtil.getStringFromBundle(\"notification.email.welcome\", Arrays.asList(BrandingUtil.getInstallationBrandName(), systemConfig.getGuidesBaseUrl(), systemConfig.getGuidesVersion(), BrandingUtil.getSupportTeamName(systemAddress), BrandingUtil.getSupportTeamEmailAddress(systemAddress)));\n                 String optionalConfirmEmailAddon = confirmEmailService.optionalConfirmEmailAddonMsg(userNotification.getUser());\n                 accountCreatedMessage += optionalConfirmEmailAddon;\n                 logger.fine(\"accountCreatedMessage: \" + accountCreatedMessage);\n                 return messageText += accountCreatedMessage;\n-\n             case CHECKSUMFAIL:\n-                dataset =  (Dataset) targetObject;\n-                String checksumFailMsg = BundleUtil.getStringFromBundle(\"notification.checksumfail\", Arrays.asList(\n-                        dataset.getGlobalIdString()\n-                ));\n+                dataset = (Dataset) targetObject;\n+                String checksumFailMsg = BundleUtil.getStringFromBundle(\"notification.checksumfail\", Arrays.asList(dataset.getGlobalIdString()));\n                 logger.fine(\"checksumFailMsg: \" + checksumFailMsg);\n                 return messageText += checksumFailMsg;\n-\n             case FILESYSTEMIMPORT:\n-                version =  (DatasetVersion) targetObject;\n+                version = (DatasetVersion) targetObject;\n                 String fileImportMsg = BundleUtil.getStringFromBundle(\"notification.mail.import.filesystem\", Arrays.asList(\n-                        systemConfig.getDataverseSiteUrl(),\n-                        version.getDataset().getGlobalIdString(),\n-                        version.getDataset().getDisplayName()\n-                ));\n+                    systemConfig.getDataverseSiteUrl(),\n+                    version.getDataset().getGlobalIdString(),\n+                    version.getDataset().getDisplayName()));\n                 logger.fine(\"fileImportMsg: \" + fileImportMsg);\n                 return messageText += fileImportMsg;\n-\n             case CHECKSUMIMPORT:\n-                version =  (DatasetVersion) targetObject;\n-                String checksumImportMsg = BundleUtil.getStringFromBundle(\"notification.import.checksum\", Arrays.asList(\n-                        version.getDataset().getGlobalIdString(),\n-                        version.getDataset().getDisplayName()\n-                ));\n+                version = (DatasetVersion) targetObject;\n+                String checksumImportMsg = BundleUtil.getStringFromBundle(\"notification.import.checksum\", Arrays.asList(version.getDataset().getGlobalIdString(), version.getDataset().getDisplayName()));\n                 logger.fine(\"checksumImportMsg: \" + checksumImportMsg);\n                 return messageText += checksumImportMsg;\n-\n             case APIGENERATED:\n-                String message = BundleUtil.getStringFromBundle(\"notification.email.apiTokenGenerated\", Arrays.asList(\n-                        userNotification.getUser().getFirstName(), userNotification.getUser().getFirstName() ));\n+                String message = BundleUtil.getStringFromBundle(\"notification.email.apiTokenGenerated\", Arrays.asList(userNotification.getUser().getFirstName(), userNotification.getUser().getFirstName()));\n                 return message;\n-\n             case INGESTCOMPLETED:\n                 dataset = (Dataset) targetObject;\n                 messageText = BundleUtil.getStringFromBundle(\"notification.email.greeting.html\");\n-                String ingestedCompletedMessage = messageText + BundleUtil.getStringFromBundle(\"notification.ingest.completed\", Arrays.asList(\n-                        systemConfig.getDataverseSiteUrl(),\n-                        dataset.getGlobalIdString(),\n-                        dataset.getDisplayName(),\n-                        comment\n-                ));\n-\n+                String ingestedCompletedMessage = messageText + BundleUtil.getStringFromBundle(\"notification.ingest.completed\", Arrays.asList(systemConfig.getDataverseSiteUrl(), dataset.getGlobalIdString(), dataset.getDisplayName(), comment));\n                 return ingestedCompletedMessage;\n             case INGESTCOMPLETEDWITHERRORS:\n                 dataset = (Dataset) targetObject;\n                 messageText = BundleUtil.getStringFromBundle(\"notification.email.greeting.html\");\n-                String ingestedCompletedWithErrorsMessage = messageText + BundleUtil.getStringFromBundle(\"notification.ingest.completedwitherrors\", Arrays.asList(\n-                        systemConfig.getDataverseSiteUrl(),\n-                        dataset.getGlobalIdString(),\n-                        dataset.getDisplayName(),\n-                        comment\n-                ));\n-\n+                String ingestedCompletedWithErrorsMessage = messageText + BundleUtil.getStringFromBundle(\"notification.ingest.completedwitherrors\", Arrays.asList(systemConfig.getDataverseSiteUrl(), dataset.getGlobalIdString(), dataset.getDisplayName(), comment));\n                 return ingestedCompletedWithErrorsMessage;\n         }\n-\n         return \"\";\n     }\n \n-    private Object getObjectOfNotification (UserNotification userNotification){\n+    private Object getObjectOfNotification(UserNotification userNotification) {\n         switch (userNotification.getType()) {\n             case ASSIGNROLE:\n             case REVOKEROLE:\n@@ -635,7 +593,6 @@ public class MailServiceBean implements java.io.Serializable {\n             case INGESTCOMPLETED:\n             case INGESTCOMPLETEDWITHERRORS:\n                 return datasetService.find(userNotification.getObjectId());\n-\n         }\n         return null;\n     }\n@@ -645,14 +602,14 @@ public class MailServiceBean implements java.io.Serializable {\n             if (notification.getUser() != null) {\n                 if (notification.getUser().getDisplayInfo() != null) {\n                     if (notification.getUser().getDisplayInfo().getEmailAddress() != null) {\n-                        logger.fine(\"Email address: \"+notification.getUser().getDisplayInfo().getEmailAddress());\n+                        logger.fine(\"Email address: \" + notification.getUser().getDisplayInfo().getEmailAddress());\n                         return notification.getUser().getDisplayInfo().getEmailAddress();\n                     }\n                 }\n             }\n         }\n-\n         logger.fine(\"no email address\");\n-        return null; \n+        return null;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 207
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "192",
                    "column": "13",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/18/MailServiceBean.java\nindex 619f6577b61..3afb3aa60ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/18/MailServiceBean.java\n@@ -87,7 +87,7 @@ public class MailServiceBean implements java.io.Serializable {\n             String[] recipientStrings = to.split(\",\");\n             InternetAddress[] recipients = new InternetAddress[recipientStrings.length];\n             try {\n-            \tInternetAddress fromAddress = getSystemAddress();\n+            InternetAddress fromAddress = getSystemAddress();\n                 setContactDelegation(reply, fromAddress);\n                 msg.setFrom(fromAddress);\n                 msg.setReplyTo(new Address[] {new InternetAddress(reply, charset)});\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "192",
                    "column": "13",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/18/MailServiceBean.java\nindex 619f6577b61..cab27f24970 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/18/MailServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/18/MailServiceBean.java\n@@ -87,7 +87,7 @@ public class MailServiceBean implements java.io.Serializable {\n             String[] recipientStrings = to.split(\",\");\n             InternetAddress[] recipients = new InternetAddress[recipientStrings.length];\n             try {\n-            \tInternetAddress fromAddress = getSystemAddress();\n+                InternetAddress fromAddress = getSystemAddress();\n                 setContactDelegation(reply, fromAddress);\n                 msg.setFrom(fromAddress);\n                 msg.setReplyTo(new Address[] {new InternetAddress(reply, charset)});\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}