{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "124",
    "information": {
        "errors": [
            {
                "line": "17",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 151).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " */\n\n// This file is forked from https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/HystrixCommandProperties.java\n\npackage org.apache.servicecomb.bizkeeper;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/124/HystrixCommandPropertiesExt.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/124/HystrixCommandPropertiesExt.java\nindex 01d1ddb8b23..dbf0cae99fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/124/HystrixCommandPropertiesExt.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/124/HystrixCommandPropertiesExt.java\n@@ -1,12 +1,12 @@\n /**\n  * Copyright 2012 Netflix, Inc.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -186,7 +186,7 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n   }\n \n   protected HystrixCommandPropertiesExt(HystrixCommandKey key, HystrixCommandProperties.Setter builder,\n-      String propertyPrefix) {\n+                                        String propertyPrefix) {\n     super(key, builder, propertyPrefix);\n     this.key = key;\n     this.circuitBreakerEnabled = getProperty(propertyPrefix,\n@@ -457,8 +457,9 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n   }\n \n   private HystrixProperty<ExecutionIsolationStrategy> getProperty(String propertyPrefix, String command,\n-      HystrixCommandKey key, String instanceProperty, ExecutionIsolationStrategy builderOverrideValue,\n-      ExecutionIsolationStrategy defaultValue) {\n+                                                                  HystrixCommandKey key, String instanceProperty,\n+                                                                  ExecutionIsolationStrategy builderOverrideValue,\n+                                                                  ExecutionIsolationStrategy defaultValue) {\n     return new ExecutionIsolationStrategyHystrixProperty(builderOverrideValue, key, propertyPrefix, command,\n         defaultValue, instanceProperty);\n   }\n@@ -472,8 +473,9 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n     private final ExecutionIsolationStrategy defaultValue;\n \n     private ExecutionIsolationStrategyHystrixProperty(ExecutionIsolationStrategy builderOverrideValue,\n-        HystrixCommandKey key, String propertyPrefix, String command, ExecutionIsolationStrategy defaultValue,\n-        String instanceProperty) {\n+                                                      HystrixCommandKey key, String propertyPrefix, String command,\n+                                                      ExecutionIsolationStrategy defaultValue,\n+                                                      String instanceProperty) {\n       this.defaultValue = defaultValue;\n       String overrideValue = null;\n       if (builderOverrideValue != null) {\n@@ -529,8 +531,8 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n   }\n \n   private HystrixProperty<Integer> getProperty(String propertyPrefix, String command, HystrixCommandKey key,\n-      String instanceProperty, Integer builderOverrideValue,\n-      Integer defaultValue) {\n+                                               String instanceProperty, Integer builderOverrideValue,\n+                                               Integer defaultValue) {\n     return forInteger()\n         .add(propertyPrefix + \".\" + command + \".\" + key.name() + \".\" + instanceProperty, null)\n         .add(propertyPrefix + \".\" + command + \".\" + serviceKey(key.name()) + \".\" + instanceProperty,\n@@ -541,7 +543,8 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n   }\n \n   private HystrixProperty<Boolean> getProperty(String propertyPrefix, String command, HystrixCommandKey key,\n-      String instanceProperty, Boolean builderOverrideValue, Boolean defaultValue) {\n+                                               String instanceProperty, Boolean builderOverrideValue,\n+                                               Boolean defaultValue) {\n     return forBoolean()\n         .add(propertyPrefix + \".\" + command + \".\" + key.name() + \".\" + instanceProperty, null)\n         .add(propertyPrefix + \".\" + command + \".\" + serviceKey(key.name()) + \".\" + instanceProperty,\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "459",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "473",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/124/HystrixCommandPropertiesExt.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/124/HystrixCommandPropertiesExt.java\nindex 01d1ddb8b23..17b6f4dc6ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/124/HystrixCommandPropertiesExt.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/124/HystrixCommandPropertiesExt.java\n@@ -13,7 +13,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n // This file is forked from https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/HystrixCommandProperties.java\n \n package org.apache.servicecomb.bizkeeper;\n@@ -457,8 +456,7 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n   }\n \n   private HystrixProperty<ExecutionIsolationStrategy> getProperty(String propertyPrefix, String command,\n-      HystrixCommandKey key, String instanceProperty, ExecutionIsolationStrategy builderOverrideValue,\n-      ExecutionIsolationStrategy defaultValue) {\n+      HystrixCommandKey key, String instanceProperty, ExecutionIsolationStrategy builderOverrideValue, ExecutionIsolationStrategy defaultValue) {\n     return new ExecutionIsolationStrategyHystrixProperty(builderOverrideValue, key, propertyPrefix, command,\n         defaultValue, instanceProperty);\n   }\n@@ -472,8 +470,7 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n     private final ExecutionIsolationStrategy defaultValue;\n \n     private ExecutionIsolationStrategyHystrixProperty(ExecutionIsolationStrategy builderOverrideValue,\n-        HystrixCommandKey key, String propertyPrefix, String command, ExecutionIsolationStrategy defaultValue,\n-        String instanceProperty) {\n+        HystrixCommandKey key, String propertyPrefix, String command, ExecutionIsolationStrategy defaultValue, String instanceProperty) {\n       this.defaultValue = defaultValue;\n       String overrideValue = null;\n       if (builderOverrideValue != null) {\n@@ -529,8 +526,7 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n   }\n \n   private HystrixProperty<Integer> getProperty(String propertyPrefix, String command, HystrixCommandKey key,\n-      String instanceProperty, Integer builderOverrideValue,\n-      Integer defaultValue) {\n+      String instanceProperty, Integer builderOverrideValue, Integer defaultValue) {\n     return forInteger()\n         .add(propertyPrefix + \".\" + command + \".\" + key.name() + \".\" + instanceProperty, null)\n         .add(propertyPrefix + \".\" + command + \".\" + serviceKey(key.name()) + \".\" + instanceProperty,\n@@ -550,4 +546,4 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n             builderOverrideValue == null ? defaultValue : builderOverrideValue)\n         .build();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "221",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "230",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 234).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "232",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "263",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 231).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "264",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 252).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "265",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 248).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "272",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "273",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "280",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 239).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "281",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 224).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "282",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "283",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 251).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "299",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "430",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 244).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "431",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "434",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "441",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "498",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "507",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/124/HystrixCommandPropertiesExt.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/124/HystrixCommandPropertiesExt.java\nindex 01d1ddb8b23..93f6307e5e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/124/HystrixCommandPropertiesExt.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/124/HystrixCommandPropertiesExt.java\n@@ -24,46 +24,52 @@ import static com.netflix.hystrix.strategy.properties.HystrixPropertiesChainedPr\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.netflix.hystrix.HystrixCommandKey;\n import com.netflix.hystrix.HystrixCommandProperties;\n import com.netflix.hystrix.strategy.properties.HystrixDynamicProperty;\n import com.netflix.hystrix.strategy.properties.HystrixProperty;\n \n public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n-\n   private static final Logger LOGGER = LoggerFactory.getLogger(HystrixCommandProperties.class);\n \n   /* defaults */\n   /* package */\n   // default => statisticalWindow: 10000 = 10 seconds (and default of 10\n   // buckets so each bucket is 1 second)\n+\n   static final Integer DEFAULT_METRICSROLLINGSTATISTICALWINDOW = 10000;\n \n   // default => statisticalWindowBuckets: 10 = 10 buckets in a 10 second\n   // window so each bucket is 1 second\n+\n   private static final Integer DEFAULT_METRICSROLLINGSTATISTICALWINDOWBUCKETS = 10;\n \n   // default => statisticalWindowVolumeThreshold: 20 requests in 10 seconds\n   // must occur before statistics matter\n+\n   private static final Integer DEFAULT_CIRCUITBREAKERREQUESTVOLUMETHRESHOLD = 20;\n \n   // default => sleepWindow: 15000 = 15 seconds that we will sleep before trying\n   // again after tripping the circuit\n+\n   private static final Integer DEFAULT_CIRCUITBREAKERSLEEPWINDOWINMILLISECONDS = 15000;\n \n   // default => errorThresholdPercentage = 50 = if 50%+ of requests in 10\n   // seconds are failures or latent then we will trip the circuit\n+\n   private static final Integer DEFAULT_CIRCUITBREAKERERRORTHRESHOLDPERCENTAGE = 50;\n \n   // default => forceCircuitOpen = false (we want to allow traffic)\n+\n   private static final Boolean DEFAULT_CIRCUITBREAKERFORCEOPEN = false;\n \n   /* package */\n   // default => ignoreErrors = false\n+\n   static final Boolean DEFAULT_CIRCUITBREAKERFORCECLOSED = false;\n \n   // default => executionTimeoutInMilliseconds: 30000 = 30 second\n+\n   private static final Integer DEFAULT_EXECUTIONTIMEOUTINMILLISECONDS = 30000;\n \n   private static final Boolean DEFAULT_EXECUTIONTIMEOUTENABLED = false;\n@@ -87,16 +93,20 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n   private static final Boolean DEFAULT_CIRCUITBREAKERENABLED = true;\n \n   // default to 1 minute for RollingPercentile\n+\n   private static final Integer DEFAULT_METRICSROLLINGPERCENTILEWINDOW = 60000;\n \n   // default to 6 buckets (10 seconds each in 60 second window)\n+\n   private static final Integer DEFAULT_METRICSROLLINGPERCENTILEWINDOWBUCKETS = 6;\n \n   // default to 100 values max per bucket\n+\n   private static final Integer DEFAULT_METRICSROLLINGPERCENTILEBUCKETSIZE = 100;\n \n   // default to 1000ms as max frequency between allowing snapshots of health\n   // (error percentage etc)\n+\n   private static final Integer DEFAULT_METRICSHEALTHSNAPSHOTINTERVALINMILLISECONDS = 1000;\n \n   private static final int COMMAND_KEY_LENGTH = 3;\n@@ -106,75 +116,98 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n \n   // number of requests that must be made within a statisticalWindow before\n   // open/close decisions are made using stats\n+\n   private final HystrixProperty<Integer> circuitBreakerRequestVolumeThreshold;\n \n   // milliseconds after tripping circuit before allowing retry\n+\n   private final HystrixProperty<Integer> circuitBreakerSleepWindowInMilliseconds;\n \n   // Whether circuit breaker should be enabled.\n+\n   private final HystrixProperty<Boolean> circuitBreakerEnabled;\n \n   // % of 'marks' that must be failed to trip the circuit\n+\n   private final HystrixProperty<Integer> circuitBreakerErrorThresholdPercentage;\n \n   // a property to allow forcing the circuit open (stopping all requests)\n+\n   private final HystrixProperty<Boolean> circuitBreakerForceOpen;\n \n   // a property to allow ignoring errors and therefore never trip 'open' (ie.\n   // allow all traffic through)\n+\n   private final HystrixProperty<Boolean> circuitBreakerForceClosed;\n \n   // Whether a command should be executed in a separate thread or not.\n+\n   private final HystrixProperty<ExecutionIsolationStrategy> executionIsolationStrategy;\n \n   // Timeout value in milliseconds for a command\n+\n   private final HystrixProperty<Integer> executionTimeoutInMilliseconds;\n \n   // Whether timeout should be triggered\n+\n   private final HystrixProperty<Boolean> executionTimeoutEnabled;\n \n   // What thread-pool this command should run in (if running on a separate\n   // thread).\n+\n   private final HystrixProperty<String> executionIsolationThreadPoolKeyOverride;\n \n   // Number of permits for execution semaphore\n+\n   private final HystrixProperty<Integer> executionIsolationSemaphoreMaxConcurrentRequests;\n \n   // Number of permits for fallback semaphore\n+\n   private final HystrixProperty<Integer> fallbackIsolationSemaphoreMaxConcurrentRequests;\n \n   // Whether fallback should be attempted.\n+\n   private final HystrixProperty<Boolean> fallbackEnabled;\n \n   // Whether an underlying Future/Thread (when runInSeparateThread == true)\n   // should be interrupted after a timeout\n+\n   private final HystrixProperty<Boolean> executionIsolationThreadInterruptOnTimeout;\n \n   // milliseconds back that will be tracked\n+\n   private final HystrixProperty<Integer> metricsRollingStatisticalWindowInMilliseconds;\n \n   // number of buckets in the statisticalWindow\n+\n   private final HystrixProperty<Integer> metricsRollingStatisticalWindowBuckets;\n \n   // Whether monitoring should be enabled (SLA and Tracers).\n+\n   private final HystrixProperty<Boolean> metricsRollingPercentileEnabled;\n \n   // number of milliseconds that will be tracked in RollingPercentile\n+\n   private final HystrixProperty<Integer> metricsRollingPercentileWindowInMilliseconds;\n \n   // number of buckets percentileWindow will be divided into\n+\n   private final HystrixProperty<Integer> metricsRollingPercentileWindowBuckets;\n \n   // how many values will be stored in each percentileWindowBucket\n+\n   private final HystrixProperty<Integer> metricsRollingPercentileBucketSize;\n \n   // time between health snapshots\n+\n   private final HystrixProperty<Integer> metricsHealthSnapshotIntervalInMilliseconds;\n \n   // whether command request logging is enabled.\n+\n   private final HystrixProperty<Boolean> requestLogEnabled;\n \n   // Whether request caching is enabled.\n+\n   private final HystrixProperty<Boolean> requestCacheEnabled;\n \n   protected HystrixCommandPropertiesExt(HystrixCommandKey key) {\n@@ -185,148 +218,86 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n     this(key, builder, \"cse\");\n   }\n \n-  protected HystrixCommandPropertiesExt(HystrixCommandKey key, HystrixCommandProperties.Setter builder,\n-      String propertyPrefix) {\n+  protected HystrixCommandPropertiesExt(HystrixCommandKey key, HystrixCommandProperties.Setter builder, String propertyPrefix) {\n     super(key, builder, propertyPrefix);\n     this.key = key;\n     this.circuitBreakerEnabled = getProperty(propertyPrefix,\n-        \"circuitBreaker\",\n-        key,\n-        \"enabled\",\n-        builder.getCircuitBreakerEnabled(),\n-        DEFAULT_CIRCUITBREAKERENABLED);\n-    this.circuitBreakerRequestVolumeThreshold = getProperty(propertyPrefix,\n-        \"circuitBreaker\",\n-        key,\n-        \"requestVolumeThreshold\",\n-        builder.getCircuitBreakerRequestVolumeThreshold(),\n-        DEFAULT_CIRCUITBREAKERREQUESTVOLUMETHRESHOLD);\n-    this.circuitBreakerSleepWindowInMilliseconds = getProperty(propertyPrefix,\n-        \"circuitBreaker\",\n-        key,\n-        \"sleepWindowInMilliseconds\",\n-        builder.getCircuitBreakerSleepWindowInMilliseconds(),\n-        DEFAULT_CIRCUITBREAKERSLEEPWINDOWINMILLISECONDS);\n-    this.circuitBreakerErrorThresholdPercentage = getProperty(propertyPrefix,\n-        \"circuitBreaker\",\n-        key,\n-        \"errorThresholdPercentage\",\n-        builder.getCircuitBreakerErrorThresholdPercentage(),\n-        DEFAULT_CIRCUITBREAKERERRORTHRESHOLDPERCENTAGE);\n+\"circuitBreaker\",\n+key,\n+\"enabled\",\n+builder.getCircuitBreakerEnabled(),\n+DEFAULT_CIRCUITBREAKERENABLED);\n+    this.circuitBreakerRequestVolumeThreshold = getProperty(propertyPrefix, \"circuitBreaker\", key, \"requestVolumeThreshold\", builder.getCircuitBreakerRequestVolumeThreshold(), DEFAULT_CIRCUITBREAKERREQUESTVOLUMETHRESHOLD);\n+    this.circuitBreakerSleepWindowInMilliseconds = getProperty(propertyPrefix, \"circuitBreaker\", key, \"sleepWindowInMilliseconds\", builder.getCircuitBreakerSleepWindowInMilliseconds(), DEFAULT_CIRCUITBREAKERSLEEPWINDOWINMILLISECONDS);\n+    this.circuitBreakerErrorThresholdPercentage = getProperty(propertyPrefix, \"circuitBreaker\", key, \"errorThresholdPercentage\", builder.getCircuitBreakerErrorThresholdPercentage(), DEFAULT_CIRCUITBREAKERERRORTHRESHOLDPERCENTAGE);\n     this.circuitBreakerForceOpen = getProperty(propertyPrefix,\n-        \"circuitBreaker\",\n-        key,\n-        \"forceOpen\",\n-        builder.getCircuitBreakerForceOpen(),\n-        DEFAULT_CIRCUITBREAKERFORCEOPEN);\n+\"circuitBreaker\",\n+key,\n+\"forceOpen\",\n+builder.getCircuitBreakerForceOpen(),\n+DEFAULT_CIRCUITBREAKERFORCEOPEN);\n     this.circuitBreakerForceClosed = getProperty(propertyPrefix,\n-        \"circuitBreaker\",\n-        key,\n-        \"forceClosed\",\n-        builder.getCircuitBreakerForceClosed(),\n-        DEFAULT_CIRCUITBREAKERFORCECLOSED);\n+\"circuitBreaker\",\n+key,\n+\"forceClosed\",\n+builder.getCircuitBreakerForceClosed(),\n+DEFAULT_CIRCUITBREAKERFORCECLOSED);\n     this.executionIsolationStrategy = getProperty(propertyPrefix,\n-        \"isolation\",\n-        key,\n-        \"strategy\",\n-        builder.getExecutionIsolationStrategy(),\n-        DEFAULT_ISOLATIONSTRATEGY);\n+\"isolation\",\n+key,\n+\"strategy\",\n+builder.getExecutionIsolationStrategy(),\n+DEFAULT_ISOLATIONSTRATEGY);\n     this.executionTimeoutInMilliseconds = getProperty(propertyPrefix,\n-        \"isolation\",\n-        key,\n-        \"timeoutInMilliseconds\",\n-        builder.getExecutionTimeoutInMilliseconds(),\n-        DEFAULT_EXECUTIONTIMEOUTINMILLISECONDS);\n+\"isolation\",\n+key,\n+\"timeoutInMilliseconds\",\n+builder.getExecutionTimeoutInMilliseconds(),\n+DEFAULT_EXECUTIONTIMEOUTINMILLISECONDS);\n     this.executionTimeoutEnabled = getProperty(propertyPrefix,\n-        \"isolation\",\n-        key,\n-        \"timeout.enabled\",\n-        builder.getExecutionTimeoutEnabled(),\n-        DEFAULT_EXECUTIONTIMEOUTENABLED);\n-    this.executionIsolationThreadInterruptOnTimeout = getProperty(propertyPrefix,\n-        \"isolation\",\n-        key,\n-        \"interruptOnTimeout\",\n-        builder.getExecutionIsolationThreadInterruptOnTimeout(),\n-        DEFAULT_EXECUTIONISOLATIONTHREADINTERRUPTONTIMEOUT);\n-    this.executionIsolationSemaphoreMaxConcurrentRequests = getProperty(propertyPrefix,\n-        \"isolation\",\n-        key,\n-        \"maxConcurrentRequests\",\n-        builder.getExecutionIsolationSemaphoreMaxConcurrentRequests(),\n-        DEFAULT_EXECUTIONISOLATIONSEMAPHOREMAXCONCURRENTREQUESTS);\n-    this.fallbackIsolationSemaphoreMaxConcurrentRequests = getProperty(propertyPrefix,\n-        \"fallback\",\n-        key,\n-        \"maxConcurrentRequests\",\n-        builder.getFallbackIsolationSemaphoreMaxConcurrentRequests(),\n-        DEFAULT_FALLBACKISOLATIONSEMAPHOREMAXCONCURRENTREQUESTS);\n+\"isolation\",\n+key,\n+\"timeout.enabled\",\n+builder.getExecutionTimeoutEnabled(),\n+DEFAULT_EXECUTIONTIMEOUTENABLED);\n+    this.executionIsolationThreadInterruptOnTimeout = getProperty(propertyPrefix, \"isolation\", key, \"interruptOnTimeout\", builder.getExecutionIsolationThreadInterruptOnTimeout(), DEFAULT_EXECUTIONISOLATIONTHREADINTERRUPTONTIMEOUT);\n+    this.executionIsolationSemaphoreMaxConcurrentRequests = getProperty(propertyPrefix, \"isolation\", key, \"maxConcurrentRequests\", builder.getExecutionIsolationSemaphoreMaxConcurrentRequests(), DEFAULT_EXECUTIONISOLATIONSEMAPHOREMAXCONCURRENTREQUESTS);\n+    this.fallbackIsolationSemaphoreMaxConcurrentRequests = getProperty(propertyPrefix, \"fallback\", key, \"maxConcurrentRequests\", builder.getFallbackIsolationSemaphoreMaxConcurrentRequests(), DEFAULT_FALLBACKISOLATIONSEMAPHOREMAXCONCURRENTREQUESTS);\n     this.fallbackEnabled = getProperty(propertyPrefix,\n-        \"fallback\",\n-        key,\n-        \"enabled\",\n-        builder.getFallbackEnabled(),\n-        DEFAULT_FALLBACKENABLED);\n-    this.metricsRollingStatisticalWindowInMilliseconds = getProperty(propertyPrefix,\n-        \"metrics\",\n-        key,\n-        \"rollingStats.timeInMilliseconds\",\n-        builder.getMetricsRollingStatisticalWindowInMilliseconds(),\n-        DEFAULT_METRICSROLLINGSTATISTICALWINDOW);\n-    this.metricsRollingStatisticalWindowBuckets = getProperty(propertyPrefix,\n-        \"metrics\",\n-        key,\n-        \"rollingStats.numBuckets\",\n-        builder.getMetricsRollingStatisticalWindowBuckets(),\n-        DEFAULT_METRICSROLLINGSTATISTICALWINDOWBUCKETS);\n+\"fallback\",\n+key,\n+\"enabled\",\n+builder.getFallbackEnabled(),\n+DEFAULT_FALLBACKENABLED);\n+    this.metricsRollingStatisticalWindowInMilliseconds = getProperty(propertyPrefix, \"metrics\", key, \"rollingStats.timeInMilliseconds\", builder.getMetricsRollingStatisticalWindowInMilliseconds(), DEFAULT_METRICSROLLINGSTATISTICALWINDOW);\n+    this.metricsRollingStatisticalWindowBuckets = getProperty(propertyPrefix, \"metrics\", key, \"rollingStats.numBuckets\", builder.getMetricsRollingStatisticalWindowBuckets(), DEFAULT_METRICSROLLINGSTATISTICALWINDOWBUCKETS);\n     this.metricsRollingPercentileEnabled = getProperty(propertyPrefix,\n-        \"metrics\",\n-        key,\n-        \"rollingPercentile.enabled\",\n-        builder.getMetricsRollingPercentileEnabled(),\n-        DEFAULT_METRICSROLLINGPERCENTILEENABLED);\n-    this.metricsRollingPercentileWindowInMilliseconds = getProperty(propertyPrefix,\n-        \"metrics\",\n-        key,\n-        \"rollingPercentile.timeInMilliseconds\",\n-        builder.getMetricsRollingPercentileWindowInMilliseconds(),\n-        DEFAULT_METRICSROLLINGPERCENTILEWINDOW);\n-    this.metricsRollingPercentileWindowBuckets = getProperty(propertyPrefix,\n-        \"metrics\",\n-        key,\n-        \"rollingPercentile.numBuckets\",\n-        builder.getMetricsRollingPercentileWindowBuckets(),\n-        DEFAULT_METRICSROLLINGPERCENTILEWINDOWBUCKETS);\n-    this.metricsRollingPercentileBucketSize = getProperty(propertyPrefix,\n-        \"metrics\",\n-        key,\n-        \"rollingPercentile.bucketSize\",\n-        builder.getMetricsRollingPercentileBucketSize(),\n-        DEFAULT_METRICSROLLINGPERCENTILEBUCKETSIZE);\n-    this.metricsHealthSnapshotIntervalInMilliseconds = getProperty(propertyPrefix,\n-        \"metrics\",\n-        key,\n-        \"healthSnapshot.intervalInMilliseconds\",\n-        builder.getMetricsHealthSnapshotIntervalInMilliseconds(),\n-        DEFAULT_METRICSHEALTHSNAPSHOTINTERVALINMILLISECONDS);\n+\"metrics\",\n+key,\n+\"rollingPercentile.enabled\",\n+builder.getMetricsRollingPercentileEnabled(),\n+DEFAULT_METRICSROLLINGPERCENTILEENABLED);\n+    this.metricsRollingPercentileWindowInMilliseconds = getProperty(propertyPrefix, \"metrics\", key, \"rollingPercentile.timeInMilliseconds\", builder.getMetricsRollingPercentileWindowInMilliseconds(), DEFAULT_METRICSROLLINGPERCENTILEWINDOW);\n+    this.metricsRollingPercentileWindowBuckets = getProperty(propertyPrefix, \"metrics\", key, \"rollingPercentile.numBuckets\", builder.getMetricsRollingPercentileWindowBuckets(), DEFAULT_METRICSROLLINGPERCENTILEWINDOWBUCKETS);\n+    this.metricsRollingPercentileBucketSize = getProperty(propertyPrefix, \"metrics\", key, \"rollingPercentile.bucketSize\", builder.getMetricsRollingPercentileBucketSize(), DEFAULT_METRICSROLLINGPERCENTILEBUCKETSIZE);\n+    this.metricsHealthSnapshotIntervalInMilliseconds = getProperty(propertyPrefix, \"metrics\", key, \"healthSnapshot.intervalInMilliseconds\", builder.getMetricsHealthSnapshotIntervalInMilliseconds(), DEFAULT_METRICSHEALTHSNAPSHOTINTERVALINMILLISECONDS);\n     this.requestCacheEnabled = getProperty(propertyPrefix,\n-        \"requestCache\",\n-        key,\n-        \"enabled\",\n-        builder.getRequestCacheEnabled(),\n-        DEFAULT_REQUESTCACHEENABLED);\n+\"requestCache\",\n+key,\n+\"enabled\",\n+builder.getRequestCacheEnabled(),\n+DEFAULT_REQUESTCACHEENABLED);\n     this.requestLogEnabled = getProperty(propertyPrefix,\n-        \"requestLog\",\n-        key,\n-        \"enabled\",\n-        builder.getRequestLogEnabled(),\n-        DEFAULT_REQUESTLOGENABLED);\n+\"requestLog\",\n+key,\n+\"enabled\",\n+builder.getRequestLogEnabled(),\n+DEFAULT_REQUESTLOGENABLED);\n \n     // threadpool doesn't have a global override, only instance level makes\n     // sense\n-    this.executionIsolationThreadPoolKeyOverride = forString()\n-        .add(propertyPrefix + \".command.\" + key.name() + \".threadPoolKeyOverride\", null)\n-        .build();\n+    this.executionIsolationThreadPoolKeyOverride = forString().add(propertyPrefix + \".command.\" + key.name() + \".threadPoolKeyOverride\", null)\n+                                                              .build();\n   }\n \n   @Override\n@@ -456,36 +427,31 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n     return requestLogEnabled;\n   }\n \n-  private HystrixProperty<ExecutionIsolationStrategy> getProperty(String propertyPrefix, String command,\n-      HystrixCommandKey key, String instanceProperty, ExecutionIsolationStrategy builderOverrideValue,\n-      ExecutionIsolationStrategy defaultValue) {\n-    return new ExecutionIsolationStrategyHystrixProperty(builderOverrideValue, key, propertyPrefix, command,\n-        defaultValue, instanceProperty);\n+  private HystrixProperty<ExecutionIsolationStrategy> getProperty(String propertyPrefix, String command, HystrixCommandKey key, String instanceProperty, ExecutionIsolationStrategy builderOverrideValue, ExecutionIsolationStrategy defaultValue) {\n+    return new ExecutionIsolationStrategyHystrixProperty(builderOverrideValue, key, propertyPrefix, command, defaultValue, instanceProperty);\n   }\n \n-  private static final class ExecutionIsolationStrategyHystrixProperty\n-      implements HystrixProperty<ExecutionIsolationStrategy> {\n+  private static final class ExecutionIsolationStrategyHystrixProperty implements HystrixProperty<ExecutionIsolationStrategy> {\n     private final HystrixDynamicProperty<String> property;\n \n     private volatile ExecutionIsolationStrategy value;\n \n     private final ExecutionIsolationStrategy defaultValue;\n \n-    private ExecutionIsolationStrategyHystrixProperty(ExecutionIsolationStrategy builderOverrideValue,\n-        HystrixCommandKey key, String propertyPrefix, String command, ExecutionIsolationStrategy defaultValue,\n-        String instanceProperty) {\n+    private ExecutionIsolationStrategyHystrixProperty(ExecutionIsolationStrategy builderOverrideValue, HystrixCommandKey key, String propertyPrefix, String command, ExecutionIsolationStrategy defaultValue, String instanceProperty) {\n       this.defaultValue = defaultValue;\n+\n       String overrideValue = null;\n       if (builderOverrideValue != null) {\n         overrideValue = builderOverrideValue.name();\n       }\n-      property = forString()\n-          .add(propertyPrefix + \".\" + command + \".\" + key.name() + \".\" + instanceProperty, null)\n-          .add(propertyPrefix + \".\" + command + \".\" + serviceKey(key.name()) + \".\" + instanceProperty,\n-              overrideValue)\n-          .add(propertyPrefix + \".\" + command + \".\" + typeKey(key.name()) + \".\" + instanceProperty,\n-              defaultValue.name())\n-          .build();\n+\n+      property = forString().add(propertyPrefix + \".\" + command + \".\" + key.name() + \".\" + instanceProperty, null)\n+                            .add(propertyPrefix + \".\" + command + \".\" + serviceKey(key.name()) + \".\" + instanceProperty,\n+overrideValue)\n+                            .add(propertyPrefix + \".\" + command + \".\" + typeKey(key.name()) + \".\" + instanceProperty,\n+defaultValue.name())\n+                            .build();\n \n       // initialize the enum value from the property\n       parseProperty();\n@@ -505,7 +471,8 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n       try {\n         value = ExecutionIsolationStrategy.valueOf(property.get());\n       } catch (Exception e) {\n-        LOGGER.error(\"Unable to derive ExecutionIsolationStrategy from property value: \" + property.get(), e);\n+        LOGGER.error(\"Unable to derive ExecutionIsolationStrategy from property value: \" + property.get(),\n+e);\n         // use the default value\n         value = defaultValue;\n       }\n@@ -528,26 +495,21 @@ public class HystrixCommandPropertiesExt extends HystrixCommandProperties {\n     return key;\n   }\n \n-  private HystrixProperty<Integer> getProperty(String propertyPrefix, String command, HystrixCommandKey key,\n-      String instanceProperty, Integer builderOverrideValue,\n-      Integer defaultValue) {\n-    return forInteger()\n-        .add(propertyPrefix + \".\" + command + \".\" + key.name() + \".\" + instanceProperty, null)\n-        .add(propertyPrefix + \".\" + command + \".\" + serviceKey(key.name()) + \".\" + instanceProperty,\n-            null)\n-        .add(propertyPrefix + \".\" + command + \".\" + typeKey(key.name()) + \".\" + instanceProperty,\n-            builderOverrideValue == null ? defaultValue : builderOverrideValue)\n-        .build();\n-  }\n-\n-  private HystrixProperty<Boolean> getProperty(String propertyPrefix, String command, HystrixCommandKey key,\n-      String instanceProperty, Boolean builderOverrideValue, Boolean defaultValue) {\n-    return forBoolean()\n-        .add(propertyPrefix + \".\" + command + \".\" + key.name() + \".\" + instanceProperty, null)\n-        .add(propertyPrefix + \".\" + command + \".\" + serviceKey(key.name()) + \".\" + instanceProperty,\n-            null)\n-        .add(propertyPrefix + \".\" + command + \".\" + typeKey(key.name()) + \".\" + instanceProperty,\n-            builderOverrideValue == null ? defaultValue : builderOverrideValue)\n-        .build();\n-  }\n-}\n+  private HystrixProperty<Integer> getProperty(String propertyPrefix, String command, HystrixCommandKey key, String instanceProperty, Integer builderOverrideValue, Integer defaultValue) {\n+    return forInteger().add(propertyPrefix + \".\" + command + \".\" + key.name() + \".\" + instanceProperty, null)\n+                       .add(propertyPrefix + \".\" + command + \".\" + serviceKey(key.name()) + \".\" + instanceProperty,\n+                           null)\n+                       .add(propertyPrefix + \".\" + command + \".\" + typeKey(key.name()) + \".\" + instanceProperty,\n+builderOverrideValue == null ? defaultValue : builderOverrideValue)\n+                       .build();\n+  }\n+\n+  private HystrixProperty<Boolean> getProperty(String propertyPrefix, String command, HystrixCommandKey key, String instanceProperty, Boolean builderOverrideValue, Boolean defaultValue) {\n+    return forBoolean().add(propertyPrefix + \".\" + command + \".\" + key.name() + \".\" + instanceProperty, null)\n+                       .add(propertyPrefix + \".\" + command + \".\" + serviceKey(key.name()) + \".\" + instanceProperty,\n+                           null)\n+                       .add(propertyPrefix + \".\" + command + \".\" + typeKey(key.name()) + \".\" + instanceProperty,\n+builderOverrideValue == null ? defaultValue : builderOverrideValue)\n+                       .build();\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 207
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/124/HystrixCommandPropertiesExt.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/124/HystrixCommandPropertiesExt.java\nindex 01d1ddb8b23..cfd11ed5f34 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/124/HystrixCommandPropertiesExt.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/124/HystrixCommandPropertiesExt.java\n@@ -13,7 +13,6 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n-\n // This file is forked from https://github.com/Netflix/Hystrix/blob/master/hystrix-core/src/main/java/com/netflix/hystrix/HystrixCommandProperties.java\n \n package org.apache.servicecomb.bizkeeper;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}