{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "394",
    "information": {
        "errors": [
            {
                "line": "52",
                "column": "50",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "  private boolean isAllSameMapper() {\n    for (ArgumentMapper mapper : mappers) {\n      if (mapper instanceof ConsumerArgumentSame &&\n          ((ConsumerArgumentSame) mapper).isSameIndex()) {\n        continue;\n      }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/394/ConsumerArgumentsMapperCreator.java\nindex e5b0cf19149..660ca37bcee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/394/ConsumerArgumentsMapperCreator.java\n@@ -49,8 +49,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n \n   private boolean isAllSameMapper() {\n     for (ArgumentMapper mapper : mappers) {\n-      if (mapper instanceof ConsumerArgumentSame &&\n-          ((ConsumerArgumentSame) mapper).isSameIndex()) {\n+      if (mapper instanceof ConsumerArgumentSame && ((ConsumerArgumentSame) mapper).isSameIndex()) {\n         continue;\n       }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "52",
                    "column": "50",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/394/ConsumerArgumentsMapperCreator.java\nindex e5b0cf19149..e969463df3d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/394/ConsumerArgumentsMapperCreator.java\n@@ -42,8 +42,8 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n   private int unknownConsumerParams = 0;\n \n   public ConsumerArgumentsMapperCreator(SerializationConfig serializationConfig,\n-      Map<Class<?>, ContextArgumentMapperFactory> contextFactorys,\n-      Method consumerMethod, SwaggerOperation swaggerOperation) {\n+                                        Map<Class<?>, ContextArgumentMapperFactory> contextFactorys,\n+                                        Method consumerMethod, SwaggerOperation swaggerOperation) {\n     super(serializationConfig, contextFactorys, consumerMethod, swaggerOperation);\n   }\n \n@@ -88,7 +88,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n \n   @Override\n   protected ArgumentMapper createSwaggerBodyFieldMapper(int consumerParamIdx, String parameterName,\n-      int swaggerBodyIdx) {\n+                                                        int swaggerBodyIdx) {\n     return new ConsumerArgumentToBodyField(consumerParamIdx, parameterName, swaggerBodyIdx);\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/394/ConsumerArgumentsMapperCreator.java\nindex e5b0cf19149..a5eada46373 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/394/ConsumerArgumentsMapperCreator.java\n@@ -42,16 +42,14 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n   private int unknownConsumerParams = 0;\n \n   public ConsumerArgumentsMapperCreator(SerializationConfig serializationConfig,\n-      Map<Class<?>, ContextArgumentMapperFactory> contextFactorys,\n-      Method consumerMethod, SwaggerOperation swaggerOperation) {\n+      Map<Class<?>, ContextArgumentMapperFactory> contextFactorys, Method consumerMethod, SwaggerOperation swaggerOperation) {\n     super(serializationConfig, contextFactorys, consumerMethod, swaggerOperation);\n   }\n \n   private boolean isAllSameMapper() {\n     for (ArgumentMapper mapper : mappers) {\n-      if (mapper instanceof ConsumerArgumentSame &&\n-          ((ConsumerArgumentSame) mapper).isSameIndex()) {\n-        continue;\n+      if (mapper instanceof ConsumerArgumentSame && ((ConsumerArgumentSame) mapper).isSameIndex()) {\n+  continue;\n       }\n \n       return false;\n@@ -66,7 +64,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n     // if all mappers are SameMapper, then no need any mapper\n     if (unknownConsumerParams == 0\n         && mappers.size() == swaggerOperation.getOperation().getParameters().size()\n-        && isAllSameMapper()) {\n+    && isAllSameMapper()) {\n       return new ArgumentsMapperDirectReuse();\n     }\n \n@@ -77,8 +75,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n   protected void processUnknownParameter(String parameterName) {\n     // real unknown parameter, new consumer invoke old producer, just ignore this parameter\n     LOGGER.warn(\"new consumer invoke old version producer, parameter({}) is not exist in contract, method={}:{}.\",\n-        parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n-    unknownConsumerParams++;\n+        parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName()); unknownConsumerParams++;\n   }\n \n   @Override\n@@ -103,7 +100,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n         LOGGER.warn(\n             \"new consumer invoke old version producer, bean parameter({}) is not exist in contract, method={}:{}.\",\n             parameterName, providerMethod.getDeclaringClass().getName(), providerMethod.getName());\n-        continue;\n+continue;\n       }\n \n       Getter<Object, Object> getter;\n@@ -117,4 +114,4 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n     }\n     mappers.add(mapper);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/394/ConsumerArgumentsMapperCreator.java\nindex e5b0cf19149..660ca37bcee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/394/ConsumerArgumentsMapperCreator.java\n@@ -49,8 +49,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n \n   private boolean isAllSameMapper() {\n     for (ArgumentMapper mapper : mappers) {\n-      if (mapper instanceof ConsumerArgumentSame &&\n-          ((ConsumerArgumentSame) mapper).isSameIndex()) {\n+      if (mapper instanceof ConsumerArgumentSame && ((ConsumerArgumentSame) mapper).isSameIndex()) {\n         continue;\n       }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/394/ConsumerArgumentsMapperCreator.java\nindex e5b0cf19149..660ca37bcee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/394/ConsumerArgumentsMapperCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/394/ConsumerArgumentsMapperCreator.java\n@@ -49,8 +49,7 @@ public class ConsumerArgumentsMapperCreator extends AbstractArgumentsMapperCreat\n \n   private boolean isAllSameMapper() {\n     for (ArgumentMapper mapper : mappers) {\n-      if (mapper instanceof ConsumerArgumentSame &&\n-          ((ConsumerArgumentSame) mapper).isSameIndex()) {\n+      if (mapper instanceof ConsumerArgumentSame && ((ConsumerArgumentSame) mapper).isSameIndex()) {\n         continue;\n       }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}