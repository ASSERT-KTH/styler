{
    "project_name": "Angel-ML-angel",
    "error_id": "86",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/86/ServerIntLongRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/86/ServerIntLongRow.java\nindex 431b3412c2c..050fe001418 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/86/ServerIntLongRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/86/ServerIntLongRow.java\n@@ -57,15 +57,15 @@ public class ServerIntLongRow extends ServerLongRow {\n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n-   * @param innerRow inner row\n+   * @param innerRow   inner row\n    */\n   public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntLongVector innerRow) {\n+                          IntLongVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.startColInt = startCol;\n     this.endColInt = endCol;\n@@ -75,10 +75,10 @@ public class ServerIntLongRow extends ServerLongRow {\n   /**\n    * Create a new ServerIntDoubleRow\n    *\n-   * @param rowId row index\n-   * @param rowType row type\n-   * @param startCol start position\n-   * @param endCol end position\n+   * @param rowId      row index\n+   * @param rowType    row type\n+   * @param startCol   start position\n+   * @param endCol     end position\n    * @param estElemNum the estimate element number\n    */\n   public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n@@ -137,7 +137,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    * Set a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements values\n+   * @param values  elements values\n    */\n   public void set(int[] indices, long[] values) {\n     assert indices.length == values.length;\n@@ -160,7 +160,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    * Add a batch elements values without lock\n    *\n    * @param indices elements indices\n-   * @param values elements plus values\n+   * @param values  elements plus values\n    */\n   public void addTo(int[] indices, long[] values) {\n     assert indices.length == values.length;\n@@ -364,7 +364,7 @@ public class ServerIntLongRow extends ServerLongRow {\n \n   @Override\n   public ServerRow\n-adaptiveClone() {\n+  adaptiveClone() {\n     startRead();\n     try {\n       if (intLongRow.isSparse()) {\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "212",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/86/ServerIntLongRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/86/ServerIntLongRow.java\nindex 431b3412c2c..1f96d819957 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/86/ServerIntLongRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/86/ServerIntLongRow.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ps.storage.vector;\n \n import com.tencent.angel.ml.math2.VFactory;\n@@ -188,8 +187,7 @@ public class ServerIntLongRow extends ServerLongRow {\n     return intLongRow.getStorage().entryIterator();\n   }\n \n-\n-  @Override\n+@Override\n   public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n@@ -198,25 +196,20 @@ public class ServerIntLongRow extends ServerLongRow {\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n-        case T_INT_SPARSE:\n+  case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n-        case T_LONG_DENSE:\n+  case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n-        case T_INT_DENSE:\n+  case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n-        default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+  default: {\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n \n@@ -357,26 +350,24 @@ public class ServerIntLongRow extends ServerLongRow {\n     try {\n       return new ServerIntLongRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n           intLongRow.clone());\n-    } finally {\n+  } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n-    startRead();\n+  public ServerRow adaptiveClone() {\n+  startRead();\n     try {\n       if (intLongRow.isSparse()) {\n         return new ServerIntLongRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n             VFactory.sortedLongVector(endColInt - startColInt, intLongRow.getStorage().getIndices(),\n                 intLongRow.getStorage().getValues()));\n-      } else {\n+  } else {\n         return new ServerIntLongRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n             intLongRow);\n-      }\n-\n-    } finally {\n+  }\n+  } finally {\n       endRead();\n     }\n   }\n@@ -409,7 +400,7 @@ adaptiveClone() {\n   @Override\n   public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n       throws IOException {\n-    if (func != null) {\n+  if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n           out.writeLong(initAndGet(in.readInt(), func));\n@@ -450,4 +441,4 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "361",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "372",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "374",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/86/ServerIntLongRow.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/86/ServerIntLongRow.java\nindex 431b3412c2c..a0b1177b19a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/86/ServerIntLongRow.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/86/ServerIntLongRow.java\n@@ -36,6 +36,7 @@ import org.apache.commons.logging.LogFactory;\n /**\n  * The row with \"int\" index type and \"long\" value type in PS\n  */\n+\n public class ServerIntLongRow extends ServerLongRow {\n \n   private static final Log LOG = LogFactory.getLog(ServerIntLongRow.class);\n@@ -64,8 +65,8 @@ public class ServerIntLongRow extends ServerLongRow {\n    * @param estElemNum the estimate element number\n    * @param innerRow inner row\n    */\n-  public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum,\n-      IntLongVector innerRow) {\n+\n+  public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum, IntLongVector innerRow) {\n     super(rowId, rowType, startCol, endCol, estElemNum, innerRow);\n     this.startColInt = startCol;\n     this.endColInt = endCol;\n@@ -81,6 +82,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    * @param endCol end position\n    * @param estElemNum the estimate element number\n    */\n+\n   public ServerIntLongRow(int rowId, RowType rowType, int startCol, int endCol, int estElemNum) {\n     this(rowId, rowType, startCol, endCol, estElemNum, null);\n   }\n@@ -90,6 +92,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    *\n    * @param rowType row type\n    */\n+\n   public ServerIntLongRow(RowType rowType) {\n     this(0, rowType, 0, 0, 0);\n   }\n@@ -105,6 +108,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    * @param index element index\n    * @return element value\n    */\n+\n   public long get(int index) {\n     return intLongRow.get(index - startColInt);\n   }\n@@ -115,6 +119,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    * @param index element index\n    * @param value element new value\n    */\n+\n   public void set(int index, long value) {\n     intLongRow.set(index - startColInt, value);\n   }\n@@ -125,6 +130,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    * @param indices elements indices\n    * @return elements values\n    */\n+\n   public long[] get(int[] indices) {\n     long[] values = new long[indices.length];\n     for (int i = 0; i < indices.length; i++) {\n@@ -139,6 +145,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    * @param indices elements indices\n    * @param values elements values\n    */\n+\n   public void set(int[] indices, long[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -152,6 +159,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    * @param index element index\n    * @param value element plus value\n    */\n+\n   public void addTo(int index, long value) {\n     set(index, get(index) + value);\n   }\n@@ -162,6 +170,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    * @param indices elements indices\n    * @param values elements plus values\n    */\n+\n   public void addTo(int[] indices, long[] values) {\n     assert indices.length == values.length;\n     for (int i = 0; i < indices.length; i++) {\n@@ -174,6 +183,7 @@ public class ServerIntLongRow extends ServerLongRow {\n    *\n    * @return all element values\n    */\n+\n   private long[] getValues() {\n     return intLongRow.getStorage().getValues();\n   }\n@@ -184,13 +194,14 @@ public class ServerIntLongRow extends ServerLongRow {\n    *\n    * @return all element values\n    */\n+\n   public ObjectIterator<Int2LongMap.Entry> getIter() {\n     return intLongRow.getStorage().entryIterator();\n   }\n \n-\n   @Override\n-  public void update(RowType updateType, ByteBuf buf, UpdateOp op) {\n+  public void update(\n+    RowType updateType, ByteBuf buf, UpdateOp op) {\n     startWrite();\n     try {\n       switch (updateType) {\n@@ -198,28 +209,22 @@ public class ServerIntLongRow extends ServerLongRow {\n         case T_LONG_SPARSE_COMPONENT:\n           updateUseIntLongSparse(buf, op);\n           break;\n-\n         case T_INT_SPARSE:\n         case T_INT_SPARSE_COMPONENT:\n           updateUseIntIntSparse(buf, op);\n           break;\n-\n         case T_LONG_DENSE:\n         case T_LONG_DENSE_COMPONENT:\n           updateUseIntLongDense(buf, op);\n           break;\n-\n         case T_INT_DENSE:\n         case T_INT_DENSE_COMPONENT:\n           updateUseIntIntDense(buf, op);\n           break;\n-\n         default: {\n-          throw new UnsupportedOperationException(\n-              \"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n+          throw new UnsupportedOperationException(\"Unsupport operation: update \" + updateType + \" to \" + this.getClass().getName());\n         }\n       }\n-\n       updateRowVersion();\n     } finally {\n       endWrite();\n@@ -266,7 +271,6 @@ public class ServerIntLongRow extends ServerLongRow {\n     }\n   }\n \n-\n   private void updateUseIntIntSparse(ByteBuf buf, UpdateOp op) {\n     int size = buf.readInt();\n     if (op == UpdateOp.PLUS) {\n@@ -330,7 +334,6 @@ public class ServerIntLongRow extends ServerLongRow {\n     startColInt = (int) startCol;\n     endColInt = (int) endCol;\n     intLongRow = (IntLongVector) row;\n-\n     if (useDenseSerialize()) {\n       for (int i = 0; i < size; i++) {\n         intLongRow.set(i, buf.readLong());\n@@ -355,27 +358,21 @@ public class ServerIntLongRow extends ServerLongRow {\n   public ServerRow clone() {\n     startRead();\n     try {\n-      return new ServerIntLongRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-          intLongRow.clone());\n+      return new ServerIntLongRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intLongRow.clone());\n     } finally {\n       endRead();\n     }\n   }\n \n   @Override\n-  public ServerRow\n-adaptiveClone() {\n+  public ServerRow adaptiveClone() {\n     startRead();\n     try {\n       if (intLongRow.isSparse()) {\n-        return new ServerIntLongRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            VFactory.sortedLongVector(endColInt - startColInt, intLongRow.getStorage().getIndices(),\n-                intLongRow.getStorage().getValues()));\n+        return new ServerIntLongRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, VFactory.sortedLongVector(endColInt - startColInt, intLongRow.getStorage().getIndices(), intLongRow.getStorage().getValues()));\n       } else {\n-        return new ServerIntLongRow(rowId, rowType, startColInt, endColInt, (int) estElemNum,\n-            intLongRow);\n+        return new ServerIntLongRow(rowId, rowType, startColInt, endColInt, (int) estElemNum, intLongRow);\n       }\n-\n     } finally {\n       endRead();\n     }\n@@ -388,6 +385,7 @@ adaptiveClone() {\n    * @param index element index\n    * @return true means exist\n    */\n+\n   public boolean exist(int index) {\n     if (intLongRow.isSparse()) {\n       return intLongRow.getStorage().hasKey(index - startColInt);\n@@ -407,8 +405,8 @@ adaptiveClone() {\n   }\n \n   @Override\n-  public void indexGet(IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func)\n-      throws IOException {\n+  public void indexGet(\n+    IndexType indexType, int indexSize, ByteBuf in, ByteBuf out, InitFunc func) throws IOException {\n     if (func != null) {\n       if (indexType == IndexType.INT) {\n         for (int i = 0; i < indexSize; i++) {\n@@ -450,4 +448,5 @@ adaptiveClone() {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}