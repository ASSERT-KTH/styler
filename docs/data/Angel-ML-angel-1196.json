{
    "project_name": "Angel-ML-angel",
    "error_id": "1196",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1196/ColumnFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1196/ColumnFormat.java\nindex 74447d6d82c..5bec083dfc1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1196/ColumnFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1196/ColumnFormat.java\n@@ -191,8 +191,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   public abstract void load(LongLongsCol col, DataInputStream output) throws IOException;\n \n \n-  @Override public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n+                   PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     List<Integer> rowIds = saveContext.getRowIndexes();\n     PartitionSource rows = part.getRows();\n     if (rowIds == null || rowIds.isEmpty()) {\n@@ -232,12 +233,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n       saveLongLongRows(part, rowList, partMeta, saveContext, output);\n     } else {\n       throw new UnsupportedOperationException(\n-        \"Unknown server row type \" + row0.getClass().getName());\n+          \"Unknown server row type \" + row0.getClass().getName());\n     }\n   }\n \n-  @Override public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n+                   PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     Map<Integer, RowPartitionMeta> rowMetas = partMeta.getRowMetas();\n     int[] rowIds = new int[rowMetas.size()];\n     ServerRow[] rows = new ServerRow[rowMetas.size()];\n@@ -267,13 +269,14 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n       loadLongLongRows(part, rows, partMeta, loadContext, input);\n     } else {\n       throw new UnsupportedOperationException(\n-        \"Unknown server row type \" + row0.getClass().getName());\n+          \"Unknown server row type \" + row0.getClass().getName());\n     }\n   }\n \n   private void saveIntFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+                                MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext,\n+                                DataOutputStream output)\n+      throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.length;\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n@@ -303,8 +306,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n \n \n   private void saveIntDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+                                 MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext,\n+                                 DataOutputStream output)\n+      throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.length;\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n@@ -333,7 +337,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void saveIntIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+                              PSMatrixSaveContext saveContext, DataOutputStream output)\n+      throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n@@ -362,7 +367,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void saveIntLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+                               PSMatrixSaveContext saveContext, DataOutputStream output)\n+      throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n@@ -391,8 +397,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void saveLongFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+                                 MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext,\n+                                 DataOutputStream output)\n+      throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     long indexOffset = part.getPartitionKey().getStartCol();\n@@ -433,8 +440,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void saveLongDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+                                  MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext,\n+                                  DataOutputStream output)\n+      throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     long indexOffset = part.getPartitionKey().getStartCol();\n@@ -475,7 +483,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void saveLongIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+                               PSMatrixSaveContext saveContext, DataOutputStream output)\n+      throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     long indexOffset = part.getPartitionKey().getStartCol();\n@@ -516,8 +525,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void saveLongLongRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+                                MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext,\n+                                DataOutputStream output)\n+      throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     long indexOffset = part.getPartitionKey().getStartCol();\n@@ -558,8 +568,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void loadIntFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+                                MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext,\n+                                DataInputStream input)\n+      throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntFloatsCol col = new IntFloatsCol(0, new float[saveElemNum]);\n@@ -573,8 +584,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void loadIntDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+                                 MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext,\n+                                 DataInputStream input)\n+      throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntDoublesCol col = new IntDoublesCol(0, new double[saveElemNum]);\n@@ -588,7 +600,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void loadIntIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+                              PSMatrixLoadContext loadContext, DataInputStream input)\n+      throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntIntsCol col = new IntIntsCol(0, new int[saveElemNum]);\n@@ -602,7 +615,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void loadIntLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+                               PSMatrixLoadContext loadContext, DataInputStream input)\n+      throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntLongsCol col = new IntLongsCol(0, new long[saveElemNum]);\n@@ -616,8 +630,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void loadLongFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+                                 MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext,\n+                                 DataInputStream input)\n+      throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongFloatsCol col = new LongFloatsCol(0, new float[saveElemNum]);\n@@ -631,8 +646,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void loadLongDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+                                  MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext,\n+                                  DataInputStream input)\n+      throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongDoublesCol col = new LongDoublesCol(0, new double[saveElemNum]);\n@@ -646,7 +662,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void loadLongIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+                               PSMatrixLoadContext loadContext, DataInputStream input)\n+      throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongIntsCol col = new LongIntsCol(0, new int[saveElemNum]);\n@@ -660,8 +677,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n   private void loadLongLongRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+                                MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext,\n+                                DataInputStream input)\n+      throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongLongsCol col = new LongLongsCol(0, new long[saveElemNum]);\n",
            "diff_size": 50
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "238",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "267",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "271",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "301",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "330",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "358",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "386",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "427",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "468",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "508",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "549",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "563",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "577",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "590",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "603",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "617",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "631",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "644",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1196/ColumnFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1196/ColumnFormat.java\nindex 74447d6d82c..532cc396c4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1196/ColumnFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1196/ColumnFormat.java\n@@ -190,9 +190,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    */\n   public abstract void load(LongLongsCol col, DataInputStream output) throws IOException;\n \n-\n-  @Override public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+@Override\n+public void save(ServerPartition part, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     List<Integer> rowIds = saveContext.getRowIndexes();\n     PartitionSource rows = part.getRows();\n     if (rowIds == null || rowIds.isEmpty()) {\n@@ -231,13 +230,12 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     } else if (row0 instanceof ServerLongLongRow) {\n       saveLongLongRows(part, rowList, partMeta, saveContext, output);\n     } else {\n-      throw new UnsupportedOperationException(\n-        \"Unknown server row type \" + row0.getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown server row type \" + row0.getClass().getName());\n     }\n   }\n \n-  @Override public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  @Override\n+public void load(ServerPartition part, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     Map<Integer, RowPartitionMeta> rowMetas = partMeta.getRowMetas();\n     int[] rowIds = new int[rowMetas.size()];\n     ServerRow[] rows = new ServerRow[rowMetas.size()];\n@@ -266,13 +264,11 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     } else if (row0 instanceof ServerLongLongRow) {\n       loadLongLongRows(part, rows, partMeta, loadContext, input);\n     } else {\n-      throw new UnsupportedOperationException(\n-        \"Unknown server row type \" + row0.getClass().getName());\n+      throw new UnsupportedOperationException(\"Unknown server row type \" + row0.getClass().getName());\n     }\n   }\n \n-  private void saveIntFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n+  private void saveIntFloatRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n     throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.length;\n@@ -302,8 +298,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n   }\n \n \n-  private void saveIntDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n+  private void saveIntDoubleRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n     throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.length;\n@@ -332,8 +327,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveIntIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  private void saveIntIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n@@ -361,8 +355,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveIntLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  private void saveIntLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n@@ -390,8 +383,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveLongFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n+  private void saveLongFloatRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n     throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n@@ -432,8 +424,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveLongDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n+  private void saveLongDoubleRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n     throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n@@ -474,8 +465,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveLongIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  private void saveLongIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     long indexOffset = part.getPartitionKey().getStartCol();\n@@ -515,8 +505,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveLongLongRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n+  private void saveLongLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n     throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n@@ -557,10 +546,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadIntFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n+  private void loadIntFloatRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n     throws IOException {\n-    int saveColNum = partMeta.getSaveColNum();\n+  int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntFloatsCol col = new IntFloatsCol(0, new float[saveElemNum]);\n \n@@ -572,10 +560,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadIntDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n+  private void loadIntDoubleRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n     throws IOException {\n-    int saveColNum = partMeta.getSaveColNum();\n+  int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntDoublesCol col = new IntDoublesCol(0, new double[saveElemNum]);\n \n@@ -587,9 +574,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadIntIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n-    int saveColNum = partMeta.getSaveColNum();\n+  private void loadIntIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntIntsCol col = new IntIntsCol(0, new int[saveElemNum]);\n \n@@ -601,9 +587,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadIntLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n-    int saveColNum = partMeta.getSaveColNum();\n+  private void loadIntLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntLongsCol col = new IntLongsCol(0, new long[saveElemNum]);\n \n@@ -615,10 +600,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadLongFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n+  private void loadLongFloatRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n     throws IOException {\n-    int saveColNum = partMeta.getSaveColNum();\n+  int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongFloatsCol col = new LongFloatsCol(0, new float[saveElemNum]);\n \n@@ -630,10 +614,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadLongDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n+  private void loadLongDoubleRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n     throws IOException {\n-    int saveColNum = partMeta.getSaveColNum();\n+  int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongDoublesCol col = new LongDoublesCol(0, new double[saveElemNum]);\n \n@@ -645,9 +628,8 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadLongIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n-    int saveColNum = partMeta.getSaveColNum();\n+  private void loadLongIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongIntsCol col = new LongIntsCol(0, new int[saveElemNum]);\n \n@@ -659,10 +641,9 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadLongLongRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n+  private void loadLongLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n     throws IOException {\n-    int saveColNum = partMeta.getSaveColNum();\n+  int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongLongsCol col = new LongLongsCol(0, new long[saveElemNum]);\n \n@@ -673,4 +654,4 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n       }\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "211",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "249",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "255",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "284",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "321",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "351",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "381",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "411",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "453",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "495",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "537",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "579",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "594",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "609",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "624",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "639",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "654",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "669",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "684",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1196/ColumnFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1196/ColumnFormat.java\nindex 74447d6d82c..7fe71bafda5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1196/ColumnFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1196/ColumnFormat.java\n@@ -33,7 +33,6 @@ import it.unimi.dsi.fastutil.longs.Long2FloatMap;\n import it.unimi.dsi.fastutil.longs.Long2IntMap;\n import it.unimi.dsi.fastutil.longs.Long2LongMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n-\n import java.io.DataInputStream;\n import java.io.DataOutputStream;\n import java.io.IOException;\n@@ -45,6 +44,7 @@ import java.util.Map;\n /**\n  * Column first format for matrix\n  */\n+\n public abstract class ColumnFormat extends MatrixFormatImpl {\n   /**\n    * Write a matrix column to output stream\n@@ -53,6 +53,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output output stream\n    * @throws IOException\n    */\n+\n   public abstract void save(IntFloatsCol col, DataOutputStream output) throws IOException;\n \n   /**\n@@ -62,6 +63,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output output stream\n    * @throws IOException\n    */\n+\n   public abstract void save(IntDoublesCol col, DataOutputStream output) throws IOException;\n \n   /**\n@@ -71,6 +73,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output output stream\n    * @throws IOException\n    */\n+\n   public abstract void save(IntIntsCol col, DataOutputStream output) throws IOException;\n \n   /**\n@@ -80,6 +83,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output output stream\n    * @throws IOException\n    */\n+\n   public abstract void save(IntLongsCol col, DataOutputStream output) throws IOException;\n \n   /**\n@@ -89,6 +93,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output output stream\n    * @throws IOException\n    */\n+\n   public abstract void save(LongFloatsCol col, DataOutputStream output) throws IOException;\n \n   /**\n@@ -98,6 +103,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output output stream\n    * @throws IOException\n    */\n+\n   public abstract void save(LongDoublesCol col, DataOutputStream output) throws IOException;\n \n   /**\n@@ -107,6 +113,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output output stream\n    * @throws IOException\n    */\n+\n   public abstract void save(LongIntsCol col, DataOutputStream output) throws IOException;\n \n   /**\n@@ -116,6 +123,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output output stream\n    * @throws IOException\n    */\n+\n   public abstract void save(LongLongsCol col, DataOutputStream output) throws IOException;\n \n   /**\n@@ -125,6 +133,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output input stream\n    * @throws IOException\n    */\n+\n   public abstract void load(IntFloatsCol col, DataInputStream output) throws IOException;\n \n   /**\n@@ -134,6 +143,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output input stream\n    * @throws IOException\n    */\n+\n   public abstract void load(IntDoublesCol col, DataInputStream output) throws IOException;\n \n   /**\n@@ -143,6 +153,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output input stream\n    * @throws IOException\n    */\n+\n   public abstract void load(IntIntsCol col, DataInputStream output) throws IOException;\n \n   /**\n@@ -152,6 +163,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output input stream\n    * @throws IOException\n    */\n+\n   public abstract void load(IntLongsCol col, DataInputStream output) throws IOException;\n \n   /**\n@@ -161,6 +173,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output input stream\n    * @throws IOException\n    */\n+\n   public abstract void load(LongFloatsCol col, DataInputStream output) throws IOException;\n \n   /**\n@@ -170,6 +183,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output input stream\n    * @throws IOException\n    */\n+\n   public abstract void load(LongDoublesCol col, DataInputStream output) throws IOException;\n \n   /**\n@@ -179,6 +193,7 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output input stream\n    * @throws IOException\n    */\n+\n   public abstract void load(LongIntsCol col, DataInputStream output) throws IOException;\n \n   /**\n@@ -188,16 +203,18 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n    * @param output input stream\n    * @throws IOException\n    */\n-  public abstract void load(LongLongsCol col, DataInputStream output) throws IOException;\n \n+  public abstract void load(LongLongsCol col, DataInputStream output) throws IOException;\n \n-  @Override public void save(ServerPartition part, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  @Override\n+  public void save(\n+    ServerPartition part, MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     List<Integer> rowIds = saveContext.getRowIndexes();\n     PartitionSource rows = part.getRows();\n     if (rowIds == null || rowIds.isEmpty()) {\n       Iterator<Map.Entry<Integer, ServerRow>> iter = part.getRows().iterator();\n       rowIds = new ArrayList<>();\n+\n       while (iter.hasNext()) {\n         rowIds.add(iter.next().getKey());\n       }\n@@ -211,33 +228,31 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n       rowList[i] = rows.getRow(rowIds.get(i));\n     }\n \n-\n     ServerRow row0 = rowList[0];\n-\n     if (row0 instanceof ServerIntFloatRow) {\n       saveIntFloatRows(part, rowList, partMeta, saveContext, output);\n     } else if (row0 instanceof ServerIntDoubleRow) {\n-      saveIntDoubleRows(part, rowList, partMeta, saveContext, output);\n+             saveIntDoubleRows(part, rowList, partMeta, saveContext, output);\n     } else if (row0 instanceof ServerIntIntRow) {\n-      saveIntIntRows(part, rowList, partMeta, saveContext, output);\n-    } else if (row0 instanceof ServerIntLongRow) {\n-      saveIntLongRows(part, rowList, partMeta, saveContext, output);\n-    } else if (row0 instanceof ServerLongFloatRow) {\n-      saveLongFloatRows(part, rowList, partMeta, saveContext, output);\n-    } else if (row0 instanceof ServerLongDoubleRow) {\n-      saveLongDoubleRows(part, rowList, partMeta, saveContext, output);\n-    } else if (row0 instanceof ServerLongIntRow) {\n-      saveLongIntRows(part, rowList, partMeta, saveContext, output);\n-    } else if (row0 instanceof ServerLongLongRow) {\n-      saveLongLongRows(part, rowList, partMeta, saveContext, output);\n-    } else {\n-      throw new UnsupportedOperationException(\n-        \"Unknown server row type \" + row0.getClass().getName());\n-    }\n+             saveIntIntRows(part, rowList, partMeta, saveContext, output);\n+           } else if (row0 instanceof ServerIntLongRow) {\n+                    saveIntLongRows(part, rowList, partMeta, saveContext, output);\n+           } else if (row0 instanceof ServerLongFloatRow) {\n+                    saveLongFloatRows(part, rowList, partMeta, saveContext, output);\n+                  } else if (row0 instanceof ServerLongDoubleRow) {\n+                           saveLongDoubleRows(part, rowList, partMeta, saveContext, output);\n+                  } else if (row0 instanceof ServerLongIntRow) {\n+                           saveLongIntRows(part, rowList, partMeta, saveContext, output);\n+                         } else if (row0 instanceof ServerLongLongRow) {\n+                                  saveLongLongRows(part, rowList, partMeta, saveContext, output);\n+                         } else {\n+                           throw new UnsupportedOperationException(\"Unknown server row type \" + row0.getClass().getName());\n+                         }\n   }\n \n-  @Override public void load(ServerPartition part, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  @Override\n+  public void load(\n+    ServerPartition part, MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     Map<Integer, RowPartitionMeta> rowMetas = partMeta.getRowMetas();\n     int[] rowIds = new int[rowMetas.size()];\n     ServerRow[] rows = new ServerRow[rowMetas.size()];\n@@ -252,33 +267,32 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     if (row0 instanceof ServerIntFloatRow) {\n       loadIntFloatRows(part, rows, partMeta, loadContext, input);\n     } else if (row0 instanceof ServerIntDoubleRow) {\n-      loadIntDoubleRows(part, rows, partMeta, loadContext, input);\n+             loadIntDoubleRows(part, rows, partMeta, loadContext, input);\n     } else if (row0 instanceof ServerIntIntRow) {\n-      loadIntIntRows(part, rows, partMeta, loadContext, input);\n-    } else if (row0 instanceof ServerIntLongRow) {\n-      loadIntLongRows(part, rows, partMeta, loadContext, input);\n-    } else if (row0 instanceof ServerLongFloatRow) {\n-      loadLongFloatRows(part, rows, partMeta, loadContext, input);\n-    } else if (row0 instanceof ServerLongDoubleRow) {\n-      loadLongDoubleRows(part, rows, partMeta, loadContext, input);\n-    } else if (row0 instanceof ServerLongIntRow) {\n-      loadLongIntRows(part, rows, partMeta, loadContext, input);\n-    } else if (row0 instanceof ServerLongLongRow) {\n-      loadLongLongRows(part, rows, partMeta, loadContext, input);\n-    } else {\n-      throw new UnsupportedOperationException(\n-        \"Unknown server row type \" + row0.getClass().getName());\n-    }\n+             loadIntIntRows(part, rows, partMeta, loadContext, input);\n+           } else if (row0 instanceof ServerIntLongRow) {\n+                    loadIntLongRows(part, rows, partMeta, loadContext, input);\n+           } else if (row0 instanceof ServerLongFloatRow) {\n+                    loadLongFloatRows(part, rows, partMeta, loadContext, input);\n+                  } else if (row0 instanceof ServerLongDoubleRow) {\n+                           loadLongDoubleRows(part, rows, partMeta, loadContext, input);\n+                  } else if (row0 instanceof ServerLongIntRow) {\n+                           loadLongIntRows(part, rows, partMeta, loadContext, input);\n+                         } else if (row0 instanceof ServerLongLongRow) {\n+                                  loadLongLongRows(part, rows, partMeta, loadContext, input);\n+                         } else {\n+                           throw new UnsupportedOperationException(\"Unknown server row type \" + row0.getClass().getName());\n+                         }\n   }\n \n-  private void saveIntFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+  private void saveIntFloatRows(ServerPartition part,\n+                                ServerRow[] rows,\n+                                MatrixPartitionMeta partMeta,\n+                                PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.length;\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n     IntFloatVectorStorage storage = ((IntFloatVector) vec).getStorage();\n-\n     IntFloatsCol col = new IntFloatsCol(0, new float[rows.length]);\n     if (storage.isDense()) {\n       int[] indices = storage.getIndices();\n@@ -301,15 +315,14 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-\n-  private void saveIntDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+  private void saveIntDoubleRows(ServerPartition part,\n+                                 ServerRow[] rows,\n+                                 MatrixPartitionMeta partMeta,\n+                                 PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.length;\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n     IntDoubleVectorStorage storage = ((IntDoubleVector) vec).getStorage();\n-\n     IntDoublesCol col = new IntDoublesCol(0, new double[rows.length]);\n     if (storage.isDense()) {\n       int[] indices = storage.getIndices();\n@@ -332,13 +345,14 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveIntIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  private void saveIntIntRows(ServerPartition part,\n+                              ServerRow[] rows,\n+                              MatrixPartitionMeta partMeta,\n+                              PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n     IntIntVectorStorage storage = ((IntIntVector) vec).getStorage();\n-\n     IntIntsCol col = new IntIntsCol(0, new int[rows.length]);\n     if (storage.isDense()) {\n       int[] indices = storage.getIndices();\n@@ -361,13 +375,14 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveIntLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  private void saveIntLongRows(ServerPartition part,\n+                               ServerRow[] rows,\n+                               MatrixPartitionMeta partMeta,\n+                               PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     int indexOffset = (int) part.getPartitionKey().getStartCol();\n     IntLongVectorStorage storage = ((IntLongVector) vec).getStorage();\n-\n     IntLongsCol col = new IntLongsCol(0, new long[rows.length]);\n     if (storage.isDense()) {\n       int[] indices = storage.getIndices();\n@@ -390,13 +405,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveLongFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+  private void saveLongFloatRows(ServerPartition part,\n+                                 ServerRow[] rows,\n+                                 MatrixPartitionMeta partMeta,\n+                                 PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     long indexOffset = part.getPartitionKey().getStartCol();\n-\n     LongFloatsCol col = new LongFloatsCol(0, new float[rows.length]);\n     if (vec instanceof IntFloatVector) {\n       IntFloatVectorStorage storage = ((IntFloatVector) vec).getStorage();\n@@ -432,13 +447,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveLongDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+  private void saveLongDoubleRows(ServerPartition part,\n+                                  ServerRow[] rows,\n+                                  MatrixPartitionMeta partMeta,\n+                                  PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     long indexOffset = part.getPartitionKey().getStartCol();\n-\n     LongDoublesCol col = new LongDoublesCol(0, new double[rows.length]);\n     if (vec instanceof IntDoubleVector) {\n       IntDoubleVectorStorage storage = ((IntDoubleVector) vec).getStorage();\n@@ -474,12 +489,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveLongIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n+  private void saveLongIntRows(ServerPartition part,\n+                               ServerRow[] rows,\n+                               MatrixPartitionMeta partMeta,\n+                               PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     long indexOffset = part.getPartitionKey().getStartCol();\n-\n     LongIntsCol col = new LongIntsCol(0, new int[rows.length]);\n     if (vec instanceof IntIntVector) {\n       IntIntVectorStorage storage = ((IntIntVector) vec).getStorage();\n@@ -515,13 +531,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void saveLongLongRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixSaveContext saveContext, DataOutputStream output)\n-    throws IOException {\n+  private void saveLongLongRows(ServerPartition part,\n+                                ServerRow[] rows,\n+                                MatrixPartitionMeta partMeta,\n+                                PSMatrixSaveContext saveContext, DataOutputStream output) throws IOException {\n     Vector vec = rows[0].getSplit();\n     //int size = rows.size();\n     long indexOffset = part.getPartitionKey().getStartCol();\n-\n     LongLongsCol col = new LongLongsCol(0, new long[rows.length]);\n     if (vec instanceof IntLongVector) {\n       IntLongVectorStorage storage = ((IntLongVector) vec).getStorage();\n@@ -557,13 +573,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadIntFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+  private void loadIntFloatRows(ServerPartition part,\n+                                ServerRow[] rows,\n+                                MatrixPartitionMeta partMeta,\n+                                PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntFloatsCol col = new IntFloatsCol(0, new float[saveElemNum]);\n-\n     for (int i = 0; i < saveColNum; i++) {\n       load(col, input);\n       for (int j = 0; j < saveElemNum; j++) {\n@@ -572,13 +588,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadIntDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+  private void loadIntDoubleRows(ServerPartition part,\n+                                 ServerRow[] rows,\n+                                 MatrixPartitionMeta partMeta,\n+                                 PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntDoublesCol col = new IntDoublesCol(0, new double[saveElemNum]);\n-\n     for (int i = 0; i < saveColNum; i++) {\n       load(col, input);\n       for (int j = 0; j < saveElemNum; j++) {\n@@ -587,12 +603,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadIntIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  private void loadIntIntRows(ServerPartition part,\n+                              ServerRow[] rows,\n+                              MatrixPartitionMeta partMeta,\n+                              PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntIntsCol col = new IntIntsCol(0, new int[saveElemNum]);\n-\n     for (int i = 0; i < saveColNum; i++) {\n       load(col, input);\n       for (int j = 0; j < saveElemNum; j++) {\n@@ -601,12 +618,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadIntLongRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  private void loadIntLongRows(ServerPartition part,\n+                               ServerRow[] rows,\n+                               MatrixPartitionMeta partMeta,\n+                               PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     IntLongsCol col = new IntLongsCol(0, new long[saveElemNum]);\n-\n     for (int i = 0; i < saveColNum; i++) {\n       load(col, input);\n       for (int j = 0; j < saveElemNum; j++) {\n@@ -615,13 +633,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadLongFloatRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+  private void loadLongFloatRows(ServerPartition part,\n+                                 ServerRow[] rows,\n+                                 MatrixPartitionMeta partMeta,\n+                                 PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongFloatsCol col = new LongFloatsCol(0, new float[saveElemNum]);\n-\n     for (int i = 0; i < saveColNum; i++) {\n       load(col, input);\n       for (int j = 0; j < saveElemNum; j++) {\n@@ -630,13 +648,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadLongDoubleRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+  private void loadLongDoubleRows(ServerPartition part,\n+                                  ServerRow[] rows,\n+                                  MatrixPartitionMeta partMeta,\n+                                  PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongDoublesCol col = new LongDoublesCol(0, new double[saveElemNum]);\n-\n     for (int i = 0; i < saveColNum; i++) {\n       load(col, input);\n       for (int j = 0; j < saveElemNum; j++) {\n@@ -645,12 +663,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadLongIntRows(ServerPartition part, ServerRow[] rows, MatrixPartitionMeta partMeta,\n-    PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n+  private void loadLongIntRows(ServerPartition part,\n+                               ServerRow[] rows,\n+                               MatrixPartitionMeta partMeta,\n+                               PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongIntsCol col = new LongIntsCol(0, new int[saveElemNum]);\n-\n     for (int i = 0; i < saveColNum; i++) {\n       load(col, input);\n       for (int j = 0; j < saveElemNum; j++) {\n@@ -659,13 +678,13 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n     }\n   }\n \n-  private void loadLongLongRows(ServerPartition part, ServerRow[] rows,\n-    MatrixPartitionMeta partMeta, PSMatrixLoadContext loadContext, DataInputStream input)\n-    throws IOException {\n+  private void loadLongLongRows(ServerPartition part,\n+                                ServerRow[] rows,\n+                                MatrixPartitionMeta partMeta,\n+                                PSMatrixLoadContext loadContext, DataInputStream input) throws IOException {\n     int saveColNum = partMeta.getSaveColNum();\n     int saveElemNum = partMeta.getSaveColElemNum();\n     LongLongsCol col = new LongLongsCol(0, new long[saveElemNum]);\n-\n     for (int i = 0; i < saveColNum; i++) {\n       load(col, input);\n       for (int j = 0; j < saveElemNum; j++) {\n@@ -673,4 +692,5 @@ public abstract class ColumnFormat extends MatrixFormatImpl {\n       }\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 142
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}