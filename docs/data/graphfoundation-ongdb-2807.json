{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2807",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "92",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "155",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "133",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "133",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "144",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2807/CompiledExpandUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2807/CompiledExpandUtils.java\nindex 00a0ca173ad..7f87987bc87 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2807/CompiledExpandUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2807/CompiledExpandUtils.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cypher.internal.codegen;\n \n import org.neo4j.graphdb.Direction;\n@@ -30,273 +31,267 @@ import static org.neo4j.internal.kernel.api.helpers.Nodes.countAll;\n import static org.neo4j.internal.kernel.api.helpers.Nodes.countIncoming;\n import static org.neo4j.internal.kernel.api.helpers.Nodes.countOutgoing;\n \n-@SuppressWarnings( \"unused\" )\n+@SuppressWarnings(\"unused\")\n public abstract class CompiledExpandUtils\n {\n-    private static final int NOT_DENSE_DEGREE = -1;\n+  private static final int NOT_DENSE_DEGREE = -1;\n \n-    public static RelationshipSelectionCursor connectingRelationships( Read read, CursorFactory cursors,\n-            NodeCursor nodeCursor,\n-            long fromNode, Direction direction, long toNode )\n+  public static RelationshipSelectionCursor connectingRelationships(Read read, CursorFactory cursors,\n+                                                                    NodeCursor nodeCursor,\n+                                                                    long fromNode, Direction direction, long toNode)\n+  {\n+    //Check from\n+    int fromDegree = nodeGetDegreeIfDense(read, fromNode, nodeCursor, cursors, direction);\n+    if (fromDegree == 0)\n     {\n-        //Check from\n-        int fromDegree = nodeGetDegreeIfDense( read, fromNode, nodeCursor, cursors, direction );\n-        if ( fromDegree == 0 )\n-        {\n-            return RelationshipSelectionCursor.EMPTY;\n-        }\n-        boolean fromNodeIsDense = fromDegree != NOT_DENSE_DEGREE;\n-\n-        //Check to\n-        read.singleNode( toNode, nodeCursor );\n-        if ( !nodeCursor.next() )\n-        {\n-            return RelationshipSelectionCursor.EMPTY;\n-        }\n-        boolean toNodeIsDense = nodeCursor.isDense();\n-\n-        //Both are dense, start with the one with the lesser degree\n-        if ( fromNodeIsDense && toNodeIsDense )\n-        {\n-            //Note that we have already position the cursor at toNode\n-            int toDegree = nodeGetDegree( nodeCursor, cursors, direction );\n-            long startNode;\n-            long endNode;\n-            Direction relDirection;\n-            if ( fromDegree < toDegree )\n-            {\n-                startNode = fromNode;\n-                endNode = toNode;\n-                relDirection = direction;\n-            }\n-            else\n-            {\n-                startNode = toNode;\n-                endNode = fromNode;\n-                relDirection = direction.reverse();\n-            }\n+      return RelationshipSelectionCursor.EMPTY;\n+    }\n+    boolean fromNodeIsDense = fromDegree != NOT_DENSE_DEGREE;\n \n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, startNode, relDirection ), endNode );\n-        }\n-        else if ( fromNodeIsDense )\n-        {\n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, toNode, direction.reverse() ), fromNode );\n-        }\n-        else\n-        {   //either only toNode is dense or none of them, just go with what we got\n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, fromNode, direction ), toNode );\n-        }\n+    //Check to\n+    read.singleNode(toNode, nodeCursor);\n+    if (!nodeCursor.next())\n+    {\n+      return RelationshipSelectionCursor.EMPTY;\n     }\n+    boolean toNodeIsDense = nodeCursor.isDense();\n \n-    public static RelationshipSelectionCursor connectingRelationships( Read read, CursorFactory cursors,\n-            NodeCursor nodeCursor, long fromNode, Direction direction, long toNode, int[] relTypes )\n+    //Both are dense, start with the one with the lesser degree\n+    if (fromNodeIsDense && toNodeIsDense)\n     {\n-        //Check from\n-        int fromDegree = calculateTotalDegreeIfDense( read, fromNode, nodeCursor, direction, relTypes, cursors );\n-        if ( fromDegree == 0 )\n-        {\n-            return RelationshipSelectionCursor.EMPTY;\n-        }\n-        boolean fromNodeIsDense = fromDegree != NOT_DENSE_DEGREE;\n+      //Note that we have already position the cursor at toNode\n+      int toDegree = nodeGetDegree(nodeCursor, cursors, direction);\n+      long startNode;\n+      long endNode;\n+      Direction relDirection;\n+      if (fromDegree < toDegree)\n+      {\n+        startNode = fromNode;\n+        endNode = toNode;\n+        relDirection = direction;\n+      } else\n+      {\n+        startNode = toNode;\n+        endNode = fromNode;\n+        relDirection = direction.reverse();\n+      }\n \n-        //Check to\n-        read.singleNode( toNode, nodeCursor );\n-        if ( !nodeCursor.next() )\n-        {\n-            return RelationshipSelectionCursor.EMPTY;\n-        }\n-        boolean toNodeIsDense = nodeCursor.isDense();\n+      return connectingRelationshipsIterator(CompiledCursorUtils\n+          .nodeGetRelationships(read, cursors, nodeCursor, startNode, relDirection), endNode);\n+    } else if (fromNodeIsDense)\n+    {\n+      return connectingRelationshipsIterator(CompiledCursorUtils\n+          .nodeGetRelationships(read, cursors, nodeCursor, toNode, direction.reverse()), fromNode);\n+    } else\n+    {   //either only toNode is dense or none of them, just go with what we got\n+      return connectingRelationshipsIterator(CompiledCursorUtils\n+          .nodeGetRelationships(read, cursors, nodeCursor, fromNode, direction), toNode);\n+    }\n+  }\n \n-        //Both are dense, start with the one with the lesser degree\n-        if ( fromNodeIsDense && toNodeIsDense )\n-        {\n-            //Note that we have already position the cursor at toNode\n-            int toDegree = calculateTotalDegree( nodeCursor, direction, relTypes, cursors );\n-            long startNode;\n-            long endNode;\n-            Direction relDirection;\n-            if ( fromDegree < toDegree )\n-            {\n-                startNode = fromNode;\n-                endNode = toNode;\n-                relDirection = direction;\n-            }\n-            else\n-            {\n-                startNode = toNode;\n-                endNode = fromNode;\n-                relDirection = direction.reverse();\n-            }\n+  public static RelationshipSelectionCursor connectingRelationships(Read read, CursorFactory cursors,\n+                                                                    NodeCursor nodeCursor, long fromNode, Direction direction, long toNode, int[] relTypes)\n+  {\n+    //Check from\n+    int fromDegree = calculateTotalDegreeIfDense(read, fromNode, nodeCursor, direction, relTypes, cursors);\n+    if (fromDegree == 0)\n+    {\n+      return RelationshipSelectionCursor.EMPTY;\n+    }\n+    boolean fromNodeIsDense = fromDegree != NOT_DENSE_DEGREE;\n \n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, startNode, relDirection, relTypes ), endNode );\n-        }\n-        else if ( fromNodeIsDense )\n-        {\n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, toNode, direction.reverse(), relTypes ), fromNode );\n-        }\n-        else\n-        {   //either only toNode is dense or none of them, just go with what we got\n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, fromNode, direction, relTypes ), toNode );\n-        }\n+    //Check to\n+    read.singleNode(toNode, nodeCursor);\n+    if (!nodeCursor.next())\n+    {\n+      return RelationshipSelectionCursor.EMPTY;\n     }\n+    boolean toNodeIsDense = nodeCursor.isDense();\n \n-    static int nodeGetDegreeIfDense( Read read, long node, NodeCursor nodeCursor, CursorFactory cursors,\n-            Direction direction )\n+    //Both are dense, start with the one with the lesser degree\n+    if (fromNodeIsDense && toNodeIsDense)\n     {\n-        read.singleNode( node, nodeCursor );\n-        if ( !nodeCursor.next() )\n-        {\n-            return 0;\n-        }\n-        if ( !nodeCursor.isDense() )\n-        {\n-            return NOT_DENSE_DEGREE;\n-        }\n+      //Note that we have already position the cursor at toNode\n+      int toDegree = calculateTotalDegree(nodeCursor, direction, relTypes, cursors);\n+      long startNode;\n+      long endNode;\n+      Direction relDirection;\n+      if (fromDegree < toDegree)\n+      {\n+        startNode = fromNode;\n+        endNode = toNode;\n+        relDirection = direction;\n+      } else\n+      {\n+        startNode = toNode;\n+        endNode = fromNode;\n+        relDirection = direction.reverse();\n+      }\n \n-        return nodeGetDegree( nodeCursor, cursors, direction );\n+      return connectingRelationshipsIterator(CompiledCursorUtils\n+          .nodeGetRelationships(read, cursors, nodeCursor, startNode, relDirection, relTypes), endNode);\n+    } else if (fromNodeIsDense)\n+    {\n+      return connectingRelationshipsIterator(CompiledCursorUtils\n+          .nodeGetRelationships(read, cursors, nodeCursor, toNode, direction.reverse(), relTypes), fromNode);\n+    } else\n+    {   //either only toNode is dense or none of them, just go with what we got\n+      return connectingRelationshipsIterator(CompiledCursorUtils\n+          .nodeGetRelationships(read, cursors, nodeCursor, fromNode, direction, relTypes), toNode);\n     }\n+  }\n \n-    private static int nodeGetDegree( NodeCursor nodeCursor, CursorFactory cursors,\n-            Direction direction )\n+  static int nodeGetDegreeIfDense(Read read, long node, NodeCursor nodeCursor, CursorFactory cursors,\n+                                  Direction direction)\n+  {\n+    read.singleNode(node, nodeCursor);\n+    if (!nodeCursor.next())\n     {\n-        switch ( direction )\n-        {\n-        case OUTGOING:\n-            return countOutgoing( nodeCursor, cursors );\n-        case INCOMING:\n-            return countIncoming( nodeCursor, cursors );\n-        case BOTH:\n-            return countAll( nodeCursor, cursors );\n-        default:\n-            throw new IllegalStateException( \"Unknown direction \" + direction );\n-        }\n+      return 0;\n     }\n-\n-    static int nodeGetDegreeIfDense( Read read, long node, NodeCursor nodeCursor, CursorFactory cursors,\n-            Direction direction, int type )\n+    if (!nodeCursor.isDense())\n     {\n-        read.singleNode( node, nodeCursor );\n-        if ( !nodeCursor.next() )\n-        {\n-            return 0;\n-        }\n-        if ( !nodeCursor.isDense() )\n-        {\n-            return NOT_DENSE_DEGREE;\n-        }\n+      return NOT_DENSE_DEGREE;\n+    }\n+\n+    return nodeGetDegree(nodeCursor, cursors, direction);\n+  }\n \n-        return nodeGetDegree( nodeCursor, cursors, direction, type );\n+  private static int nodeGetDegree(NodeCursor nodeCursor, CursorFactory cursors,\n+                                   Direction direction)\n+  {\n+    switch (direction)\n+    {\n+      case OUTGOING:\n+        return countOutgoing(nodeCursor, cursors);\n+      case INCOMING:\n+        return countIncoming(nodeCursor, cursors);\n+      case BOTH:\n+        return countAll(nodeCursor, cursors);\n+      default:\n+        throw new IllegalStateException(\"Unknown direction \" + direction);\n     }\n+  }\n \n-    private static int nodeGetDegree( NodeCursor nodeCursor, CursorFactory cursors,\n-            Direction direction, int type )\n+  static int nodeGetDegreeIfDense(Read read, long node, NodeCursor nodeCursor, CursorFactory cursors,\n+                                  Direction direction, int type)\n+  {\n+    read.singleNode(node, nodeCursor);\n+    if (!nodeCursor.next())\n     {\n-        switch ( direction )\n-        {\n-        case OUTGOING:\n-            return countOutgoing( nodeCursor, cursors, type );\n-        case INCOMING:\n-            return countIncoming( nodeCursor, cursors, type );\n-        case BOTH:\n-            return countAll( nodeCursor, cursors, type );\n-        default:\n-            throw new IllegalStateException( \"Unknown direction \" + direction );\n-        }\n+      return 0;\n+    }\n+    if (!nodeCursor.isDense())\n+    {\n+      return NOT_DENSE_DEGREE;\n     }\n \n-    private static int calculateTotalDegreeIfDense( Read read, long node, NodeCursor nodeCursor, Direction direction,\n-            int[] relTypes, CursorFactory cursors )\n+    return nodeGetDegree(nodeCursor, cursors, direction, type);\n+  }\n+\n+  private static int nodeGetDegree(NodeCursor nodeCursor, CursorFactory cursors,\n+                                   Direction direction, int type)\n+  {\n+    switch (direction)\n     {\n-        read.singleNode( node, nodeCursor );\n-        if ( !nodeCursor.next() )\n-        {\n-            return 0;\n-        }\n-        if ( !nodeCursor.isDense() )\n-        {\n-            return NOT_DENSE_DEGREE;\n-        }\n-        return calculateTotalDegree( nodeCursor, direction, relTypes, cursors );\n+      case OUTGOING:\n+        return countOutgoing(nodeCursor, cursors, type);\n+      case INCOMING:\n+        return countIncoming(nodeCursor, cursors, type);\n+      case BOTH:\n+        return countAll(nodeCursor, cursors, type);\n+      default:\n+        throw new IllegalStateException(\"Unknown direction \" + direction);\n     }\n+  }\n \n-    private static int calculateTotalDegree( NodeCursor nodeCursor, Direction direction, int[] relTypes,\n-            CursorFactory cursors )\n+  private static int calculateTotalDegreeIfDense(Read read, long node, NodeCursor nodeCursor, Direction direction,\n+                                                 int[] relTypes, CursorFactory cursors)\n+  {\n+    read.singleNode(node, nodeCursor);\n+    if (!nodeCursor.next())\n     {\n-        int degree = 0;\n-        for ( int relType : relTypes )\n-        {\n-            degree += nodeGetDegree( nodeCursor, cursors, direction, relType );\n-        }\n+      return 0;\n+    }\n+    if (!nodeCursor.isDense())\n+    {\n+      return NOT_DENSE_DEGREE;\n+    }\n+    return calculateTotalDegree(nodeCursor, direction, relTypes, cursors);\n+  }\n \n-        return degree;\n+  private static int calculateTotalDegree(NodeCursor nodeCursor, Direction direction, int[] relTypes,\n+                                          CursorFactory cursors)\n+  {\n+    int degree = 0;\n+    for (int relType : relTypes)\n+    {\n+      degree += nodeGetDegree(nodeCursor, cursors, direction, relType);\n     }\n \n-    private static RelationshipSelectionCursor connectingRelationshipsIterator(\n-            final RelationshipSelectionCursor allRelationships, final long toNode )\n+    return degree;\n+  }\n+\n+  private static RelationshipSelectionCursor connectingRelationshipsIterator(\n+      final RelationshipSelectionCursor allRelationships, final long toNode)\n+  {\n+    return new RelationshipSelectionCursor()\n     {\n-        return new RelationshipSelectionCursor()\n-        {\n-            @Override\n-            public void close()\n-            {\n-                allRelationships.close();\n-            }\n+      @Override\n+      public void close()\n+      {\n+        allRelationships.close();\n+      }\n \n-            @Override\n-            public long relationshipReference()\n-            {\n-                return allRelationships.relationshipReference();\n-            }\n+      @Override\n+      public long relationshipReference()\n+      {\n+        return allRelationships.relationshipReference();\n+      }\n \n-            @Override\n-            public int type()\n-            {\n-                return allRelationships.type();\n-            }\n+      @Override\n+      public int type()\n+      {\n+        return allRelationships.type();\n+      }\n \n-            @Override\n-            public long otherNodeReference()\n-            {\n-                return allRelationships.otherNodeReference();\n-            }\n+      @Override\n+      public long otherNodeReference()\n+      {\n+        return allRelationships.otherNodeReference();\n+      }\n \n-            @Override\n-            public long sourceNodeReference()\n-            {\n-                return allRelationships.sourceNodeReference();\n-            }\n+      @Override\n+      public long sourceNodeReference()\n+      {\n+        return allRelationships.sourceNodeReference();\n+      }\n \n-            @Override\n-            public long targetNodeReference()\n-            {\n-                return allRelationships.targetNodeReference();\n-            }\n+      @Override\n+      public long targetNodeReference()\n+      {\n+        return allRelationships.targetNodeReference();\n+      }\n \n-            @Override\n-            public long propertiesReference()\n-            {\n-                return allRelationships.propertiesReference();\n-            }\n+      @Override\n+      public long propertiesReference()\n+      {\n+        return allRelationships.propertiesReference();\n+      }\n \n-            @Override\n-            public boolean next()\n-            {\n-                while ( allRelationships.next() )\n-                {\n-                    if ( allRelationships.otherNodeReference() == toNode )\n-                    {\n-                        return true;\n-                    }\n-                }\n+      @Override\n+      public boolean next()\n+      {\n+        while (allRelationships.next())\n+        {\n+          if (allRelationships.otherNodeReference() == toNode)\n+          {\n+            return true;\n+          }\n+        }\n \n-                return false;\n-            }\n-        };\n-    }\n+        return false;\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 307
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "83",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2807/CompiledExpandUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2807/CompiledExpandUtils.java\nindex 00a0ca173ad..6deeca1f5fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2807/CompiledExpandUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2807/CompiledExpandUtils.java\n@@ -76,19 +76,17 @@ public abstract class CompiledExpandUtils\n                 relDirection = direction.reverse();\n             }\n \n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, startNode, relDirection ), endNode );\n+            return connectingRelationshipsIterator( CompiledCursorUtils.nodeGetRelationships( read, cursors, nodeCursor, startNode, relDirection ), endNode );\n         }\n         else if ( fromNodeIsDense )\n         {\n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, toNode, direction.reverse() ), fromNode );\n+            return connectingRelationshipsIterator( CompiledCursorUtils.nodeGetRelationships( read, cursors, nodeCursor, toNode, direction.reverse() ), fromNode );\n         }\n         else\n-        {   //either only toNode is dense or none of them, just go with what we got\n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, fromNode, direction ), toNode );\n-        }\n+        {\n+    //either only toNode is dense or none of them, just go with what we got\n+            return connectingRelationshipsIterator( CompiledCursorUtils.nodeGetRelationships( read, cursors, nodeCursor, fromNode, direction ), toNode );\n+    }\n     }\n \n     public static RelationshipSelectionCursor connectingRelationships( Read read, CursorFactory cursors,\n@@ -131,19 +129,17 @@ public abstract class CompiledExpandUtils\n                 relDirection = direction.reverse();\n             }\n \n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, startNode, relDirection, relTypes ), endNode );\n+            return connectingRelationshipsIterator( CompiledCursorUtils.nodeGetRelationships( read, cursors, nodeCursor, startNode, relDirection, relTypes ), endNode );\n         }\n         else if ( fromNodeIsDense )\n         {\n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, toNode, direction.reverse(), relTypes ), fromNode );\n+            return connectingRelationshipsIterator( CompiledCursorUtils.nodeGetRelationships( read, cursors, nodeCursor, toNode, direction.reverse(), relTypes ), fromNode );\n         }\n         else\n-        {   //either only toNode is dense or none of them, just go with what we got\n-            return connectingRelationshipsIterator( CompiledCursorUtils\n-                    .nodeGetRelationships( read, cursors, nodeCursor, fromNode, direction, relTypes ), toNode );\n-        }\n+        {\n+    //either only toNode is dense or none of them, just go with what we got\n+            return connectingRelationshipsIterator( CompiledCursorUtils.nodeGetRelationships( read, cursors, nodeCursor, fromNode, direction, relTypes ), toNode );\n+    }\n     }\n \n     static int nodeGetDegreeIfDense( Read read, long node, NodeCursor nodeCursor, CursorFactory cursors,\n@@ -154,7 +150,8 @@ public abstract class CompiledExpandUtils\n         {\n             return 0;\n         }\n-        if ( !nodeCursor.isDense() )\n+\n+if ( !nodeCursor.isDense() )\n         {\n             return NOT_DENSE_DEGREE;\n         }\n@@ -186,7 +183,8 @@ public abstract class CompiledExpandUtils\n         {\n             return 0;\n         }\n-        if ( !nodeCursor.isDense() )\n+\n+if ( !nodeCursor.isDense() )\n         {\n             return NOT_DENSE_DEGREE;\n         }\n@@ -218,11 +216,13 @@ public abstract class CompiledExpandUtils\n         {\n             return 0;\n         }\n-        if ( !nodeCursor.isDense() )\n+\n+if ( !nodeCursor.isDense() )\n         {\n             return NOT_DENSE_DEGREE;\n         }\n-        return calculateTotalDegree( nodeCursor, direction, relTypes, cursors );\n+\n+return calculateTotalDegree( nodeCursor, direction, relTypes, cursors );\n     }\n \n     private static int calculateTotalDegree( NodeCursor nodeCursor, Direction direction, int[] relTypes,\n@@ -237,8 +237,7 @@ public abstract class CompiledExpandUtils\n         return degree;\n     }\n \n-    private static RelationshipSelectionCursor connectingRelationshipsIterator(\n-            final RelationshipSelectionCursor allRelationships, final long toNode )\n+    private static RelationshipSelectionCursor connectingRelationshipsIterator( final RelationshipSelectionCursor allRelationships, final long toNode )\n     {\n         return new RelationshipSelectionCursor()\n         {\n@@ -299,4 +298,4 @@ public abstract class CompiledExpandUtils\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}