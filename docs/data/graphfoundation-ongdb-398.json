{
    "project_name": "graphfoundation-ongdb",
    "error_id": "398",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "88",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/398/Export.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/398/Export.java\nindex 2b036d3d449..e033fce759e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/398/Export.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/398/Export.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.apps;\n \n import org.neo4j.helpers.Service;\n@@ -34,71 +35,70 @@ import org.neo4j.shell.util.json.JSONParser;\n  * Mimics the Bash application \"export\" and uses the client session\n  * {@link Session} as the data container.\n  */\n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Export extends AbstractApp\n {\n-    @Override\n-    public String getDescription()\n-    {\n-        return \"Sets an environment variable. Usage: export <key>=<value>\\n\" +\n-                \"F.ex: export NAME=\\\"Mattias Persson\\\". Variable names have \" +\n-                \"to be valid identifiers.\";\n-    }\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Sets an environment variable. Usage: export <key>=<value>\\n\" +\n+        \"F.ex: export NAME=\\\"Mattias Persson\\\". Variable names have \" +\n+        \"to be valid identifiers.\";\n+  }\n \n-    public static Pair<String, String> splitInKeyEqualsValue( String string )\n-            throws ShellException\n+  public static Pair<String, String> splitInKeyEqualsValue(String string)\n+      throws ShellException\n+  {\n+    int index = string.indexOf('=');\n+    if (index == -1)\n     {\n-        int index = string.indexOf( '=' );\n-        if ( index == -1 )\n-        {\n-            throw new ShellException( \"Invalid format <key>=<value>\" );\n-        }\n-\n-        String key = string.substring( 0, index );\n-        String value = string.substring( index + 1 );\n-        return Pair.of( key, value );\n+      throw new ShellException(\"Invalid format <key>=<value>\");\n     }\n \n-    @Override\n-    public Continuation execute( AppCommandParser parser, Session session,\n-                                 Output out ) throws ShellException\n+    String key = string.substring(0, index);\n+    String value = string.substring(index + 1);\n+    return Pair.of(key, value);\n+  }\n+\n+  @Override\n+  public Continuation execute(AppCommandParser parser, Session session,\n+                              Output out) throws ShellException\n+  {\n+    Pair<String, String> keyValue = splitInKeyEqualsValue(parser.getLineWithoutApp());\n+    String key = keyValue.first();\n+    String valueString = keyValue.other();\n+    if (session.has(valueString))\n     {\n-        Pair<String, String> keyValue = splitInKeyEqualsValue( parser.getLineWithoutApp() );\n-        String key = keyValue.first();\n-        String valueString = keyValue.other();\n-        if ( session.has( valueString ) )\n-        {\n-            Object value = session.get( valueString );\n-            session.set( key, value );\n-            return Continuation.INPUT_COMPLETE;\n-        }\n-        Object value = JSONParser.parse( valueString );\n-        value = stripFromQuotesIfString( value );\n-        if ( value instanceof String && value.toString().isEmpty() )\n-        {\n-            session.remove( key );\n-        }\n-        else\n-        {\n-            session.set( key, value );\n-        }\n-        return Continuation.INPUT_COMPLETE;\n+      Object value = session.get(valueString);\n+      session.set(key, value);\n+      return Continuation.INPUT_COMPLETE;\n     }\n-\n-    private Object stripFromQuotesIfString( Object value )\n+    Object value = JSONParser.parse(valueString);\n+    value = stripFromQuotesIfString(value);\n+    if (value instanceof String && value.toString().isEmpty())\n     {\n-        return value instanceof String ? stripFromQuotes( value.toString() ) : value;\n+      session.remove(key);\n+    } else\n+    {\n+      session.set(key, value);\n     }\n+    return Continuation.INPUT_COMPLETE;\n+  }\n+\n+  private Object stripFromQuotesIfString(Object value)\n+  {\n+    return value instanceof String ? stripFromQuotes(value.toString()) : value;\n+  }\n \n-    private static String stripFromQuotes( String string )\n+  private static String stripFromQuotes(String string)\n+  {\n+    if (string != null)\n     {\n-        if ( string != null )\n-        {\n-            if ( string.startsWith( \"\\\"\" ) && string.endsWith( \"\\\"\" ) )\n-            {\n-                return string.substring( 1, string.length() - 1 );\n-            }\n-        }\n-        return string;\n+      if (string.startsWith(\"\\\"\") && string.endsWith(\"\\\"\"))\n+      {\n+        return string.substring(1, string.length() - 1);\n+      }\n     }\n+    return string;\n+  }\n }\n",
            "diff_size": 83
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/398/Export.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/398/Export.java\nindex 2b036d3d449..65a49286945 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/398/Export.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/398/Export.java\n@@ -40,14 +40,11 @@ public class Export extends AbstractApp\n     @Override\n     public String getDescription()\n     {\n-        return \"Sets an environment variable. Usage: export <key>=<value>\\n\" +\n-                \"F.ex: export NAME=\\\"Mattias Persson\\\". Variable names have \" +\n-                \"to be valid identifiers.\";\n+        return \"Sets an environment variable. Usage: export <key>=<value>\\n\" + \"F.ex: export NAME=\\\"Mattias Persson\\\". Variable names have \" + \"to be valid identifiers.\";\n     }\n \n-    public static Pair<String, String> splitInKeyEqualsValue( String string )\n-            throws ShellException\n-    {\n+    public static Pair<String,String> splitInKeyEqualsValue( String string ) throws ShellException\n+{\n         int index = string.indexOf( '=' );\n         if ( index == -1 )\n         {\n@@ -60,10 +57,9 @@ public class Export extends AbstractApp\n     }\n \n     @Override\n-    public Continuation execute( AppCommandParser parser, Session session,\n-                                 Output out ) throws ShellException\n-    {\n-        Pair<String, String> keyValue = splitInKeyEqualsValue( parser.getLineWithoutApp() );\n+    public Continuation execute( AppCommandParser parser, Session session, Output out ) throws ShellException\n+{\n+        Pair<String,String> keyValue = splitInKeyEqualsValue( parser.getLineWithoutApp() );\n         String key = keyValue.first();\n         String valueString = keyValue.other();\n         if ( session.has( valueString ) )\n@@ -72,7 +68,8 @@ public class Export extends AbstractApp\n             session.set( key, value );\n             return Continuation.INPUT_COMPLETE;\n         }\n-        Object value = JSONParser.parse( valueString );\n+\n+Object value = JSONParser.parse( valueString );\n         value = stripFromQuotesIfString( value );\n         if ( value instanceof String && value.toString().isEmpty() )\n         {\n@@ -82,7 +79,8 @@ public class Export extends AbstractApp\n         {\n             session.set( key, value );\n         }\n-        return Continuation.INPUT_COMPLETE;\n+\n+return Continuation.INPUT_COMPLETE;\n     }\n \n     private Object stripFromQuotesIfString( Object value )\n@@ -101,4 +99,4 @@ public class Export extends AbstractApp\n         }\n         return string;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}