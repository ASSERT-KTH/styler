{
    "project_name": "Angel-ML-angel",
    "error_id": "1061",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1061/ModelParseSubmit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1061/ModelParseSubmit.java\nindex 123e0594cc5..3198d5c71e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1061/ModelParseSubmit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1061/ModelParseSubmit.java\n@@ -28,30 +28,30 @@ import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n \n public class ModelParseSubmit implements AppSubmitter {\n-    private static final Log LOG = LogFactory.getLog(ModelParseSubmit.class);\n+  private static final Log LOG = LogFactory.getLog(ModelParseSubmit.class);\n \n-    @Override\n-    public void submit(Configuration conf) throws Exception {\n-        conf.set(AngelConfiguration.ANGEL_TASK_USER_TASKCLASS, ModelParseTask.class.getName());\n-        AngelClient jobClient = AngelClientFactory.get(conf);\n-        int psNumber = conf.getInt(AngelConfiguration.ANGEL_PS_NUMBER,\n-                AngelConfiguration.DEFAULT_ANGEL_PS_NUMBER);\n-        MatrixContext mMatrix = new MatrixContext();\n-        mMatrix.setName(\"test\");\n-        mMatrix.setRowNum(1);\n-        mMatrix.setColNum(100);\n-        mMatrix.setMaxRowNumInBlock(1);\n-        mMatrix.setMaxColNumInBlock(100 / psNumber);\n-        mMatrix.setRowType(MLProtos.RowType.T_DOUBLE_DENSE);\n-        mMatrix.set(MatrixConfiguration.MATRIX_AVERAGE, \"true\");\n-        jobClient.addMatrix(mMatrix);\n-        try {\n-            jobClient.start();\n-            jobClient.waitForCompletion();\n-            jobClient.stop();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n+  @Override\n+  public void submit(Configuration conf) throws Exception {\n+    conf.set(AngelConfiguration.ANGEL_TASK_USER_TASKCLASS, ModelParseTask.class.getName());\n+    AngelClient jobClient = AngelClientFactory.get(conf);\n+    int psNumber = conf.getInt(AngelConfiguration.ANGEL_PS_NUMBER,\n+        AngelConfiguration.DEFAULT_ANGEL_PS_NUMBER);\n+    MatrixContext mMatrix = new MatrixContext();\n+    mMatrix.setName(\"test\");\n+    mMatrix.setRowNum(1);\n+    mMatrix.setColNum(100);\n+    mMatrix.setMaxRowNumInBlock(1);\n+    mMatrix.setMaxColNumInBlock(100 / psNumber);\n+    mMatrix.setRowType(MLProtos.RowType.T_DOUBLE_DENSE);\n+    mMatrix.set(MatrixConfiguration.MATRIX_AVERAGE, \"true\");\n+    jobClient.addMatrix(mMatrix);\n+    try {\n+      jobClient.start();\n+      jobClient.waitForCompletion();\n+      jobClient.stop();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n     }\n+  }\n \n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 115).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1061/ModelParseSubmit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1061/ModelParseSubmit.java\nindex 123e0594cc5..ca4be3fd87b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1061/ModelParseSubmit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1061/ModelParseSubmit.java\n@@ -28,15 +28,15 @@ import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n \n public class ModelParseSubmit implements AppSubmitter {\n-    private static final Log LOG = LogFactory.getLog(ModelParseSubmit.class);\n+\n+  private static final Log LOG = LogFactory.getLog(ModelParseSubmit.class);\n \n     @Override\n     public void submit(Configuration conf) throws Exception {\n-        conf.set(AngelConfiguration.ANGEL_TASK_USER_TASKCLASS, ModelParseTask.class.getName());\n+  conf.set(AngelConfiguration.ANGEL_TASK_USER_TASKCLASS, ModelParseTask.class.getName());\n         AngelClient jobClient = AngelClientFactory.get(conf);\n-        int psNumber = conf.getInt(AngelConfiguration.ANGEL_PS_NUMBER,\n-                AngelConfiguration.DEFAULT_ANGEL_PS_NUMBER);\n-        MatrixContext mMatrix = new MatrixContext();\n+        int psNumber = conf.getInt(AngelConfiguration.ANGEL_PS_NUMBER, AngelConfiguration.DEFAULT_ANGEL_PS_NUMBER);\n+MatrixContext mMatrix = new MatrixContext();\n         mMatrix.setName(\"test\");\n         mMatrix.setRowNum(1);\n         mMatrix.setColNum(100);\n@@ -46,12 +46,11 @@ public class ModelParseSubmit implements AppSubmitter {\n         mMatrix.set(MatrixConfiguration.MATRIX_AVERAGE, \"true\");\n         jobClient.addMatrix(mMatrix);\n         try {\n-            jobClient.start();\n+  jobClient.start();\n             jobClient.waitForCompletion();\n             jobClient.stop();\n         } catch (Exception e) {\n-            e.printStackTrace();\n+  e.printStackTrace();\n         }\n-    }\n-\n-}\n+  }\n+  }\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1061/ModelParseSubmit.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1061/ModelParseSubmit.java\nindex 123e0594cc5..ae231eda05b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1061/ModelParseSubmit.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1061/ModelParseSubmit.java\n@@ -28,30 +28,29 @@ import org.apache.commons.logging.LogFactory;\n import org.apache.hadoop.conf.Configuration;\n \n public class ModelParseSubmit implements AppSubmitter {\n-    private static final Log LOG = LogFactory.getLog(ModelParseSubmit.class);\n \n-    @Override\n-    public void submit(Configuration conf) throws Exception {\n-        conf.set(AngelConfiguration.ANGEL_TASK_USER_TASKCLASS, ModelParseTask.class.getName());\n-        AngelClient jobClient = AngelClientFactory.get(conf);\n-        int psNumber = conf.getInt(AngelConfiguration.ANGEL_PS_NUMBER,\n-                AngelConfiguration.DEFAULT_ANGEL_PS_NUMBER);\n-        MatrixContext mMatrix = new MatrixContext();\n-        mMatrix.setName(\"test\");\n-        mMatrix.setRowNum(1);\n-        mMatrix.setColNum(100);\n-        mMatrix.setMaxRowNumInBlock(1);\n-        mMatrix.setMaxColNumInBlock(100 / psNumber);\n-        mMatrix.setRowType(MLProtos.RowType.T_DOUBLE_DENSE);\n-        mMatrix.set(MatrixConfiguration.MATRIX_AVERAGE, \"true\");\n-        jobClient.addMatrix(mMatrix);\n-        try {\n-            jobClient.start();\n-            jobClient.waitForCompletion();\n-            jobClient.stop();\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n+  private static final Log LOG = LogFactory.getLog(ModelParseSubmit.class);\n \n-}\n+  @Override\n+  public void submit(Configuration conf) throws Exception {\n+    conf.set(AngelConfiguration.ANGEL_TASK_USER_TASKCLASS, ModelParseTask.class.getName());\n+    AngelClient jobClient = AngelClientFactory.get(conf);\n+    int psNumber = conf.getInt(AngelConfiguration.ANGEL_PS_NUMBER, AngelConfiguration.DEFAULT_ANGEL_PS_NUMBER);\n+    MatrixContext mMatrix = new MatrixContext();\n+    mMatrix.setName(\"test\");\n+    mMatrix.setRowNum(1);\n+    mMatrix.setColNum(100);\n+    mMatrix.setMaxRowNumInBlock(1);\n+    mMatrix.setMaxColNumInBlock(100 / psNumber);\n+    mMatrix.setRowType(MLProtos.RowType.T_DOUBLE_DENSE);\n+    mMatrix.set(MatrixConfiguration.MATRIX_AVERAGE, \"true\");\n+    jobClient.addMatrix(mMatrix);\n+    try {\n+      jobClient.start();\n+      jobClient.waitForCompletion();\n+      jobClient.stop();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 47
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}