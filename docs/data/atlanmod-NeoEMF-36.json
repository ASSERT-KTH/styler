{
    "project_name": "atlanmod-NeoEMF",
    "error_id": "36",
    "information": {
        "errors": [
            {
                "line": "98",
                "column": "52",
                "severity": "warning",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n        BasicNamespace that = BasicNamespace.class.cast(o);\n        return Objects.equals(prefix, that.prefix) &&\n                Objects.equals(uri, that.uri);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/36/BasicNamespace.java\nindex d8ca925d314..c3392ea52a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler/36/BasicNamespace.java\n@@ -95,8 +95,7 @@ public class BasicNamespace {\n         }\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n-        return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+        return Objects.equals(prefix, that.prefix) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "98",
                    "column": "52",
                    "severity": "warning",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/36/BasicNamespace.java\nindex d8ca925d314..d58f2a9f8f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/36/BasicNamespace.java\n@@ -96,7 +96,7 @@ public class BasicNamespace {\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n         return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+            Objects.equals(uri, that.uri);\n     }\n \n     @Override\n@@ -151,14 +151,13 @@ public class BasicNamespace {\n          * namespace is registered with this {@code prefix}.\n          *\n          * @param prefix the prefix of the desired namespace\n-         *\n          * @return a {@code BasicNamespace} identified by the given {@code prefix}, or {@code null} if no namespace is\n          * registered with this {@code prefix}\n          */\n         public BasicNamespace getFromPrefix(@Nullable String prefix) {\n             return Optional.ofNullable(prefix)\n-                    .map(namespacesByPrefix::get)\n-                    .orElse(null);\n+                .map(namespacesByPrefix::get)\n+                .orElse(null);\n         }\n \n         /**\n@@ -166,14 +165,13 @@ public class BasicNamespace {\n          * namespace is registered with this {@code uri}.\n          *\n          * @param uri the URI of the desired namespace\n-         *\n          * @return a {@code BasicNamespace} identified by the given {@code uri}, or {@code null} if no namespace is\n          * registered with this {@code uri}.\n          */\n         public BasicNamespace getFromUri(@Nullable String uri) {\n             return Optional.ofNullable(uri)\n-                    .map(v -> namespacesByUri.get(uri))\n-                    .orElse(null);\n+                .map(v -> namespacesByUri.get(uri))\n+                .orElse(null);\n         }\n \n         /**\n@@ -181,7 +179,6 @@ public class BasicNamespace {\n          *\n          * @param prefix the prefix of the new namespace\n          * @param uri    the URI associated with the prefix\n-         *\n          * @return the new {@link BasicNamespace}\n          */\n         public BasicNamespace register(String prefix, String uri) {\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/36/BasicNamespace.java\nindex d8ca925d314..af8c7ffae9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/36/BasicNamespace.java\n@@ -95,8 +95,7 @@ public class BasicNamespace {\n         }\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n-        return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+        return Objects.equals(prefix, that.prefix) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n@@ -218,4 +217,4 @@ public class BasicNamespace {\n             private static final Registry INSTANCE = new Registry();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/codebuff/36/BasicNamespace.java\nindex d8ca925d314..55ca2667055 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/codebuff/36/BasicNamespace.java\n@@ -16,7 +16,6 @@ import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.Optional;\n-\n import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import javax.annotation.ParametersAreNonnullByDefault;\n@@ -24,22 +23,30 @@ import javax.annotation.ParametersAreNonnullByDefault;\n /**\n  * A simple representation of a namespace with a prefix and an URI.\n  */\n+\n+\n @ParametersAreNonnullByDefault\n public class BasicNamespace {\n \n     /**\n      * The instance of the default {@code BasicNamespace}.\n      */\n+\n+\n     private static final BasicNamespace DEFAULT = new BasicNamespace(\"ecore\", \"http://www.eclipse.org/emf/2002/Ecore\");\n \n     /**\n      * The prefix of this namespace.\n      */\n+\n+\n     private final String prefix;\n \n     /**\n      * The literal representation of the URI of this namespace.\n      */\n+\n+\n     private final String uri;\n \n     /**\n@@ -48,8 +55,11 @@ public class BasicNamespace {\n      * @param prefix the prefix of this namespace\n      * @param uri    the literal representation of the URI of this namespace\n      */\n+\n+\n     private BasicNamespace(String prefix, String uri) {\n         this.prefix = prefix;\n+\n         this.uri = uri;\n     }\n \n@@ -58,6 +68,8 @@ public class BasicNamespace {\n      *\n      * @return the namespace representing \"ecore @ http://www.eclipse.org/emf/2002/Ecore\"\n      */\n+\n+\n     public static BasicNamespace getDefault() {\n         return DEFAULT;\n     }\n@@ -67,6 +79,8 @@ public class BasicNamespace {\n      *\n      * @return the prefix\n      */\n+\n+\n     public String prefix() {\n         return prefix;\n     }\n@@ -76,6 +90,8 @@ public class BasicNamespace {\n      *\n      * @return the literal representation of the URI\n      */\n+\n+\n     public String uri() {\n         return uri;\n     }\n@@ -90,13 +106,13 @@ public class BasicNamespace {\n         if (this == o) {\n             return true;\n         }\n+\n         if (!BasicNamespace.class.isInstance(o)) {\n             return false;\n         }\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n-        return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+        return Objects.equals(prefix, that.prefix) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n@@ -107,21 +123,29 @@ public class BasicNamespace {\n     /**\n      * Registry of all declared {@link BasicNamespace}.\n      */\n+\n+\n     public static class Registry {\n \n         /**\n          * A map that holds registered {@link BasicNamespace}, identified by their prefix.\n          */\n+\n+\n         private final Map<String, BasicNamespace> namespacesByPrefix;\n \n         /**\n          * A map that holds registered {@link BasicNamespace}, identified by their URI.\n          */\n+\n+\n         private final Map<String, BasicNamespace> namespacesByUri;\n \n         /**\n          * Constructs a new {@code Registry}.\n          */\n+\n+\n         private Registry() {\n             namespacesByPrefix = new HashMap<>();\n             namespacesByUri = new HashMap<>();\n@@ -132,6 +156,7 @@ public class BasicNamespace {\n          *\n          * @return the instance of this class\n          */\n+\n         @Nonnull\n         public static Registry getInstance() {\n             return Holder.INSTANCE;\n@@ -142,6 +167,8 @@ public class BasicNamespace {\n          *\n          * @return a immutable collection\n          */\n+\n+\n         public Iterable<String> getPrefixes() {\n             return Collections.unmodifiableSet(namespacesByPrefix.keySet());\n         }\n@@ -155,10 +182,11 @@ public class BasicNamespace {\n          * @return a {@code BasicNamespace} identified by the given {@code prefix}, or {@code null} if no namespace is\n          * registered with this {@code prefix}\n          */\n+\n+\n         public BasicNamespace getFromPrefix(@Nullable String prefix) {\n-            return Optional.ofNullable(prefix)\n-                    .map(namespacesByPrefix::get)\n-                    .orElse(null);\n+            return Optional.ofNullable(prefix).map(namespacesByPrefix::get)\n+                                              .orElse(null);\n         }\n \n         /**\n@@ -170,10 +198,11 @@ public class BasicNamespace {\n          * @return a {@code BasicNamespace} identified by the given {@code uri}, or {@code null} if no namespace is\n          * registered with this {@code uri}.\n          */\n+\n+\n         public BasicNamespace getFromUri(@Nullable String uri) {\n-            return Optional.ofNullable(uri)\n-                    .map(v -> namespacesByUri.get(uri))\n-                    .orElse(null);\n+            return Optional.ofNullable(uri).map(v -> namespacesByUri.get(uri))\n+                                           .orElse(null);\n         }\n \n         /**\n@@ -184,10 +213,11 @@ public class BasicNamespace {\n          *\n          * @return the new {@link BasicNamespace}\n          */\n+\n+\n         public BasicNamespace register(String prefix, String uri) {\n             if (namespacesByPrefix.containsKey(prefix)) {\n                 BasicNamespace ns = namespacesByPrefix.get(prefix);\n-\n                 if (Objects.equals(ns.uri(), uri)) {\n                     return ns;\n                 }\n@@ -202,6 +232,8 @@ public class BasicNamespace {\n         /**\n          * Cleans the registry.\n          */\n+\n+\n         public void clean() {\n             namespacesByPrefix.clear();\n             namespacesByUri.clear();\n@@ -210,12 +242,16 @@ public class BasicNamespace {\n         /**\n          * The initialization-on-demand holder of the singleton of this class.\n          */\n+\n+\n         private static final class Holder {\n \n             /**\n              * The instance of the outer class.\n              */\n+\n+\n             private static final Registry INSTANCE = new Registry();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 52
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_random/36/BasicNamespace.java\nindex d8ca925d314..c3392ea52a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_random/36/BasicNamespace.java\n@@ -95,8 +95,7 @@ public class BasicNamespace {\n         }\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n-        return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+        return Objects.equals(prefix, that.prefix) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/36/BasicNamespace.java\nindex d8ca925d314..c3392ea52a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/36/BasicNamespace.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/36/BasicNamespace.java\n@@ -95,8 +95,7 @@ public class BasicNamespace {\n         }\n \n         BasicNamespace that = BasicNamespace.class.cast(o);\n-        return Objects.equals(prefix, that.prefix) &&\n-                Objects.equals(uri, that.uri);\n+        return Objects.equals(prefix, that.prefix) && Objects.equals(uri, that.uri);\n     }\n \n     @Override\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij"
    ]
}