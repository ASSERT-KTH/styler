{
    "project_name": "neo4j-neo4j",
    "error_id": "1089",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1089/EphemeralDynamicByteBuffer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1089/EphemeralDynamicByteBuffer.java\nindex ce9f47db394..ddfbc6e6973 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1089/EphemeralDynamicByteBuffer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1089/EphemeralDynamicByteBuffer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.fs;\n \n import java.nio.ByteBuffer;\n@@ -36,7 +37,7 @@ import static org.neo4j.memory.EmptyMemoryTracker.INSTANCE;\n  */\n class EphemeralDynamicByteBuffer\n {\n-    private static final int SECTOR_SIZE = (int) ByteUnit.kibiBytes( 1 );\n+    private static final int SECTOR_SIZE = (int) ByteUnit.kibiBytes(1);\n     private static final byte[] ZERO_BUFFER_ARRAY = new byte[SECTOR_SIZE];\n \n     // A reusable zero buffer. It can be reused only in this object in synchronised blocks!\n@@ -44,8 +45,8 @@ class EphemeralDynamicByteBuffer\n     // The reason is that when reading from a ByteBuffer its internal state is modified (position\n     // is adjusted based on the amount of data read). This generally makes non-empty\n     // ByteBuffers unsuitable for sharing for concurrent use even if they contain static data.\n-    private final ByteBuffer zeroBuffer = ByteBuffer.wrap( ZERO_BUFFER_ARRAY );\n-    private SortedMap<Long,ByteBuffer> sectors;\n+    private final ByteBuffer zeroBuffer = ByteBuffer.wrap(ZERO_BUFFER_ARRAY);\n+    private SortedMap<Long, ByteBuffer> sectors;\n     private Exception freeCall;\n     private long size;\n \n@@ -54,19 +55,21 @@ class EphemeralDynamicByteBuffer\n         sectors = new TreeMap<>();\n     }\n \n-    /** This is a copying constructor, the input buffer is just read from, never stored in 'this'. */\n-    @SuppressWarnings( { \"CopyConstructorMissesField\", \"SynchronizationOnLocalVariableOrMethodParameter\" } )\n-    private EphemeralDynamicByteBuffer( EphemeralDynamicByteBuffer toClone )\n+    /**\n+     * This is a copying constructor, the input buffer is just read from, never stored in 'this'.\n+     */\n+    @SuppressWarnings({\"CopyConstructorMissesField\", \"SynchronizationOnLocalVariableOrMethodParameter\"})\n+    private EphemeralDynamicByteBuffer(EphemeralDynamicByteBuffer toClone)\n     {\n         this();\n-        synchronized ( toClone ) // Necessary for safely accessing toClone.sectors field.\n+        synchronized (toClone) // Necessary for safely accessing toClone.sectors field.\n         {\n             toClone.assertNotFreed();\n-            for ( Map.Entry<Long,ByteBuffer> entry : toClone.sectors.entrySet() )\n+            for (Map.Entry<Long, ByteBuffer> entry : toClone.sectors.entrySet())\n             {\n                 ByteBuffer sector = newSector();\n-                copyByteBufferContents( entry.getValue(), sector );\n-                sectors.put( entry.getKey(), sector );\n+                copyByteBufferContents(entry.getValue(), sector);\n+                sectors.put(entry.getKey(), sector);\n             }\n             size = toClone.getSize();\n         }\n@@ -74,7 +77,7 @@ class EphemeralDynamicByteBuffer\n \n     synchronized EphemeralDynamicByteBuffer copy()\n     {\n-        return new EphemeralDynamicByteBuffer( this ); // invoke \"copy constructor\"\n+        return new EphemeralDynamicByteBuffer(this); // invoke \"copy constructor\"\n     }\n \n     synchronized void free()\n@@ -82,23 +85,23 @@ class EphemeralDynamicByteBuffer\n         assertNotFreed();\n         sectors = null;\n         freeCall = new Exception(\n-                \"You're most likely seeing this exception because there was an attempt to use this buffer \" +\n-                        \"after it was freed. This stack trace may help you figure out where and why it was freed.\" );\n+          \"You're most likely seeing this exception because there was an attempt to use this buffer \" +\n+            \"after it was freed. This stack trace may help you figure out where and why it was freed.\");\n     }\n \n-    synchronized void put( long pos, byte[] bytes, int off, int length )\n+    synchronized void put(long pos, byte[] bytes, int off, int length)\n     {\n         long sector = pos / SECTOR_SIZE;\n         int offset = (int) (pos % SECTOR_SIZE);\n \n-        size = Math.max( size, pos + length );\n-        while ( true )\n+        size = Math.max(size, pos + length);\n+        while (true)\n         {\n-            ByteBuffer buf = getOrCreateSector( sector );\n-            buf.position( offset );\n-            int toPut = Math.min( buf.remaining(), length );\n-            buf.put( bytes, off, toPut );\n-            if ( toPut == length )\n+            ByteBuffer buf = getOrCreateSector(sector);\n+            buf.position(offset);\n+            int toPut = Math.min(buf.remaining(), length);\n+            buf.put(bytes, off, toPut);\n+            if (toPut == length)\n             {\n                 break;\n             }\n@@ -109,18 +112,18 @@ class EphemeralDynamicByteBuffer\n         }\n     }\n \n-    synchronized void get( long pos, byte[] bytes, int off, int length )\n+    synchronized void get(long pos, byte[] bytes, int off, int length)\n     {\n         long sector = pos / SECTOR_SIZE;\n         int offset = (int) (pos % SECTOR_SIZE);\n \n-        while ( true )\n+        while (true)\n         {\n-            ByteBuffer buf = sectors.getOrDefault( sector, zeroBuffer );\n-            buf.position( offset );\n-            int toGet = Math.min( buf.remaining(), length );\n-            buf.get( bytes, off, toGet );\n-            if ( toGet == length )\n+            ByteBuffer buf = sectors.getOrDefault(sector, zeroBuffer);\n+            buf.position(offset);\n+            int toGet = Math.min(buf.remaining(), length);\n+            buf.get(bytes, off, toGet);\n+            if (toGet == length)\n             {\n                 break;\n             }\n@@ -136,65 +139,64 @@ class EphemeralDynamicByteBuffer\n         return size;\n     }\n \n-    synchronized void truncate( long newSize )\n+    synchronized void truncate(long newSize)\n     {\n-        Preconditions.requireNonNegative( newSize );\n+        Preconditions.requireNonNegative(newSize);\n         size = newSize;\n-        SortedMap<Long, ByteBuffer> tail = sectors.tailMap( newSize - ( SECTOR_SIZE - 1 ) );\n-        if ( tail.isEmpty() )\n+        SortedMap<Long, ByteBuffer> tail = sectors.tailMap(newSize - (SECTOR_SIZE - 1));\n+        if (tail.isEmpty())\n         {\n             return;\n         }\n         Long firstKey = tail.firstKey();\n-        if ( firstKey <= newSize )\n+        if (firstKey <= newSize)\n         {\n-            ByteBuffer buffer = tail.get( firstKey );\n-            int tailToClear = Math.toIntExact( newSize - firstKey );\n-            buffer.position( tailToClear );\n-            while ( buffer.hasRemaining() )\n+            ByteBuffer buffer = tail.get(firstKey);\n+            int tailToClear = Math.toIntExact(newSize - firstKey);\n+            buffer.position(tailToClear);\n+            while (buffer.hasRemaining())\n             {\n-                buffer.put( (byte) 0 );\n+                buffer.put((byte) 0);\n             }\n         }\n-        sectors.tailMap( firstKey + 1 ).clear();\n+        sectors.tailMap(firstKey + 1).clear();\n     }\n \n-    private static void copyByteBufferContents( ByteBuffer from, ByteBuffer to )\n+    private static void copyByteBufferContents(ByteBuffer from, ByteBuffer to)\n     {\n         int positionBefore = from.position();\n         try\n         {\n-            from.position( 0 );\n-            to.put( from );\n-        }\n-        finally\n+            from.position(0);\n+            to.put(from);\n+        } finally\n         {\n-            from.position( positionBefore );\n-            to.position( 0 );\n+            from.position(positionBefore);\n+            to.position(0);\n         }\n     }\n \n     private static ByteBuffer newSector()\n     {\n-        return ByteBuffers.allocate( EphemeralDynamicByteBuffer.SECTOR_SIZE, INSTANCE );\n+        return ByteBuffers.allocate(EphemeralDynamicByteBuffer.SECTOR_SIZE, INSTANCE);\n     }\n \n-    private synchronized ByteBuffer getOrCreateSector( long sector )\n+    private synchronized ByteBuffer getOrCreateSector(long sector)\n     {\n-        ByteBuffer buf = sectors.get( sector );\n-        if ( buf == null )\n+        ByteBuffer buf = sectors.get(sector);\n+        if (buf == null)\n         {\n             buf = newSector();\n-            sectors.put( sector, buf );\n+            sectors.put(sector, buf);\n         }\n         return buf;\n     }\n \n     private synchronized void assertNotFreed()\n     {\n-        if ( sectors == null )\n+        if (sectors == null)\n         {\n-            throw new IllegalStateException( \"This buffer has been freed.\", freeCall );\n+            throw new IllegalStateException(\"This buffer has been freed.\", freeCall);\n         }\n     }\n }\n",
            "diff_size": 56
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}