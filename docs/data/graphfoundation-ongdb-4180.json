{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4180",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4180/LockManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4180/LockManagerImpl.java\nindex d869126f357..c5ac180dac1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4180/LockManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4180/LockManagerImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.locking.community;\n \n import java.time.Clock;\n@@ -32,153 +33,154 @@ import org.neo4j.kernel.impl.transaction.IllegalResourceException;\n \n public class LockManagerImpl\n {\n-    private final Map<Object,RWLock> resourceLockMap = new HashMap<>();\n-    private final RagManager ragManager;\n-    private final Clock clock;\n-\n-    /**\n-     * Time within which any particular lock should be acquired.\n-     * @see GraphDatabaseSettings#lock_acquisition_timeout\n-     */\n-    private long lockAcquisitionTimeoutMillis;\n-\n-    public LockManagerImpl( RagManager ragManager, Config config, Clock clock )\n+  private final Map<Object, RWLock> resourceLockMap = new HashMap<>();\n+  private final RagManager ragManager;\n+  private final Clock clock;\n+\n+  /**\n+   * Time within which any particular lock should be acquired.\n+   *\n+   * @see GraphDatabaseSettings#lock_acquisition_timeout\n+   */\n+  private long lockAcquisitionTimeoutMillis;\n+\n+  public LockManagerImpl(RagManager ragManager, Config config, Clock clock)\n+  {\n+    this.ragManager = ragManager;\n+    this.clock = clock;\n+    this.lockAcquisitionTimeoutMillis = config.get(GraphDatabaseSettings.lock_acquisition_timeout).toMillis();\n+  }\n+\n+  public boolean getReadLock(LockTracer tracer, LockResource resource, Object tx)\n+      throws DeadlockDetectedException, IllegalResourceException\n+  {\n+    return unusedResourceGuard(resource, tx, getRWLockForAcquiring(resource, tx).acquireReadLock(tracer, tx));\n+  }\n+\n+  public boolean tryReadLock(LockResource resource, Object tx)\n+      throws IllegalResourceException\n+  {\n+    return unusedResourceGuard(resource, tx, getRWLockForAcquiring(resource, tx).tryAcquireReadLock(tx));\n+  }\n+\n+  public boolean getWriteLock(LockTracer tracer, LockResource resource, Object tx)\n+      throws DeadlockDetectedException, IllegalResourceException\n+  {\n+    return unusedResourceGuard(resource, tx, getRWLockForAcquiring(resource, tx).acquireWriteLock(tracer, tx));\n+  }\n+\n+  public boolean tryWriteLock(LockResource resource, Object tx)\n+      throws IllegalResourceException\n+  {\n+    return unusedResourceGuard(resource, tx, getRWLockForAcquiring(resource, tx).tryAcquireWriteLock(tx));\n+  }\n+\n+  public void releaseReadLock(Object resource, Object tx)\n+      throws LockNotFoundException, IllegalResourceException\n+  {\n+    getRWLockForReleasing(resource, tx, 1, 0, true).releaseReadLock(tx);\n+  }\n+\n+  public void releaseWriteLock(Object resource, Object tx)\n+      throws LockNotFoundException, IllegalResourceException\n+  {\n+    getRWLockForReleasing(resource, tx, 0, 1, true).releaseWriteLock(tx);\n+  }\n+\n+  /**\n+   * Check if lock was obtained and in case if not will try to clear optimistically allocated lock from global\n+   * resource map\n+   *\n+   * @return {@code lockObtained }\n+   **/\n+  private boolean unusedResourceGuard(Object resource, Object tx, boolean lockObtained)\n+  {\n+    if (!lockObtained)\n     {\n-        this.ragManager = ragManager;\n-        this.clock = clock;\n-        this.lockAcquisitionTimeoutMillis = config.get( GraphDatabaseSettings.lock_acquisition_timeout ).toMillis();\n+      // if lock was not acquired cleaning up optimistically allocated value\n+      // for case when it was only used by current call, if it was used by somebody else\n+      // lock will be released during release call\n+      getRWLockForReleasing(resource, tx, 0, 0, false);\n     }\n-\n-    public boolean getReadLock( LockTracer tracer, LockResource resource, Object tx )\n-            throws DeadlockDetectedException, IllegalResourceException\n+    return lockObtained;\n+  }\n+\n+  /**\n+   * Visit all locks.\n+   * <p/>\n+   * The supplied visitor may not block.\n+   *\n+   * @param visitor visitor for visiting each lock.\n+   */\n+  public void accept(Visitor<RWLock, RuntimeException> visitor)\n+  {\n+    synchronized (resourceLockMap)\n     {\n-        return unusedResourceGuard( resource, tx, getRWLockForAcquiring( resource, tx ).acquireReadLock( tracer, tx ) );\n-    }\n-\n-    public boolean tryReadLock( LockResource resource, Object tx )\n-            throws IllegalResourceException\n-    {\n-        return unusedResourceGuard( resource, tx, getRWLockForAcquiring( resource, tx ).tryAcquireReadLock( tx ) );\n-    }\n-\n-    public boolean getWriteLock( LockTracer tracer, LockResource resource, Object tx )\n-            throws DeadlockDetectedException, IllegalResourceException\n-    {\n-        return unusedResourceGuard( resource, tx, getRWLockForAcquiring( resource, tx ).acquireWriteLock( tracer, tx ) );\n-    }\n-\n-    public boolean tryWriteLock( LockResource resource, Object tx )\n-            throws IllegalResourceException\n-    {\n-        return unusedResourceGuard( resource, tx, getRWLockForAcquiring( resource, tx ).tryAcquireWriteLock( tx ) );\n-    }\n-\n-    public void releaseReadLock( Object resource, Object tx )\n-            throws LockNotFoundException, IllegalResourceException\n-    {\n-        getRWLockForReleasing( resource, tx, 1, 0, true ).releaseReadLock( tx );\n-    }\n-\n-    public void releaseWriteLock( Object resource, Object tx )\n-            throws LockNotFoundException, IllegalResourceException\n-    {\n-        getRWLockForReleasing( resource, tx, 0, 1, true ).releaseWriteLock( tx );\n-    }\n-\n-    /**\n-     * Check if lock was obtained and in case if not will try to clear optimistically allocated lock from global\n-     * resource map\n-     *\n-     * @return {@code lockObtained }\n-     **/\n-    private boolean unusedResourceGuard( Object resource, Object tx, boolean lockObtained )\n-    {\n-        if ( !lockObtained )\n+      for (RWLock lock : resourceLockMap.values())\n+      {\n+        if (visitor.visit(lock))\n         {\n-            // if lock was not acquired cleaning up optimistically allocated value\n-            // for case when it was only used by current call, if it was used by somebody else\n-            // lock will be released during release call\n-            getRWLockForReleasing( resource, tx, 0, 0, false );\n+          break;\n         }\n-        return lockObtained;\n+      }\n     }\n+  }\n \n-    /**\n-     * Visit all locks.\n-     * <p/>\n-     * The supplied visitor may not block.\n-     *\n-     * @param visitor visitor for visiting each lock.\n-     */\n-    public void accept( Visitor<RWLock,RuntimeException> visitor )\n+  private void assertValidArguments(Object resource, Object tx)\n+  {\n+    if (resource == null || tx == null)\n     {\n-        synchronized ( resourceLockMap )\n-        {\n-            for ( RWLock lock : resourceLockMap.values() )\n-            {\n-                if ( visitor.visit( lock ) )\n-                {\n-                    break;\n-                }\n-            }\n-        }\n+      throw new IllegalResourceException(\"Null parameter: resource = \" + resource + \", tx = \" + tx);\n     }\n+  }\n \n-    private void assertValidArguments( Object resource, Object tx )\n+  private RWLock getRWLockForAcquiring(LockResource resource, Object tx)\n+  {\n+    assertValidArguments(resource, tx);\n+    synchronized (resourceLockMap)\n     {\n-        if ( resource == null || tx == null )\n-        {\n-            throw new IllegalResourceException( \"Null parameter: resource = \" + resource + \", tx = \" + tx );\n-        }\n+      RWLock lock = resourceLockMap.computeIfAbsent(resource, k -> createLock(resource));\n+      lock.mark();\n+      return lock;\n     }\n-\n-    private RWLock getRWLockForAcquiring( LockResource resource, Object tx )\n+  }\n+\n+  // visible for testing\n+  protected RWLock createLock(LockResource resource)\n+  {\n+    return new RWLock(resource, ragManager, clock, lockAcquisitionTimeoutMillis);\n+  }\n+\n+  private RWLock getRWLockForReleasing(Object resource, Object tx, int readCountPrerequisite,\n+                                       int writeCountPrerequisite, boolean strict)\n+  {\n+    assertValidArguments(resource, tx);\n+    synchronized (resourceLockMap)\n     {\n-        assertValidArguments( resource, tx );\n-        synchronized ( resourceLockMap )\n+      RWLock lock = resourceLockMap.get(resource);\n+      if (lock == null)\n+      {\n+        if (!strict)\n         {\n-            RWLock lock = resourceLockMap.computeIfAbsent( resource, k -> createLock( resource ) );\n-            lock.mark();\n-            return lock;\n+          return null;\n         }\n-    }\n-\n-    // visible for testing\n-    protected RWLock createLock( LockResource resource )\n-    {\n-        return new RWLock( resource, ragManager, clock, lockAcquisitionTimeoutMillis );\n-    }\n-\n-    private RWLock getRWLockForReleasing( Object resource, Object tx, int readCountPrerequisite,\n-                                          int writeCountPrerequisite, boolean strict )\n-    {\n-        assertValidArguments( resource, tx );\n-        synchronized ( resourceLockMap )\n+        throw new LockNotFoundException(\"Lock not found for: \"\n+            + resource + \" tx:\" + tx);\n+      }\n+      // we need to get info from a couple of synchronized methods\n+      // to make it info consistent we need to synchronized lock to make sure it will not change between\n+      // various calls\n+      //noinspection SynchronizationOnLocalVariableOrMethodParameter\n+      synchronized (lock)\n+      {\n+        if (!lock.isMarked() && lock.getReadCount() == readCountPrerequisite &&\n+            lock.getWriteCount() == writeCountPrerequisite &&\n+            lock.getWaitingThreadsCount() == 0)\n         {\n-            RWLock lock = resourceLockMap.get( resource );\n-            if ( lock == null )\n-            {\n-                if ( !strict )\n-                {\n-                    return null;\n-                }\n-                throw new LockNotFoundException( \"Lock not found for: \"\n-                                                 + resource + \" tx:\" + tx );\n-            }\n-            // we need to get info from a couple of synchronized methods\n-            // to make it info consistent we need to synchronized lock to make sure it will not change between\n-            // various calls\n-            //noinspection SynchronizationOnLocalVariableOrMethodParameter\n-            synchronized ( lock )\n-            {\n-                if ( !lock.isMarked() && lock.getReadCount() == readCountPrerequisite &&\n-                     lock.getWriteCount() == writeCountPrerequisite &&\n-                     lock.getWaitingThreadsCount() == 0 )\n-                {\n-                    resourceLockMap.remove( resource );\n-                }\n-            }\n-            return lock;\n+          resourceLockMap.remove(resource);\n         }\n+      }\n+      return lock;\n     }\n+  }\n }\n",
            "diff_size": 216
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "167",
                    "column": "87",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4180/LockManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4180/LockManagerImpl.java\nindex d869126f357..6848dc9e0fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4180/LockManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4180/LockManagerImpl.java\n@@ -49,39 +49,33 @@ public class LockManagerImpl\n         this.lockAcquisitionTimeoutMillis = config.get( GraphDatabaseSettings.lock_acquisition_timeout ).toMillis();\n     }\n \n-    public boolean getReadLock( LockTracer tracer, LockResource resource, Object tx )\n-            throws DeadlockDetectedException, IllegalResourceException\n-    {\n+    public boolean getReadLock( LockTracer tracer, LockResource resource, Object tx ) throws DeadlockDetectedException, IllegalResourceException\n+{\n         return unusedResourceGuard( resource, tx, getRWLockForAcquiring( resource, tx ).acquireReadLock( tracer, tx ) );\n     }\n \n-    public boolean tryReadLock( LockResource resource, Object tx )\n-            throws IllegalResourceException\n-    {\n+    public boolean tryReadLock( LockResource resource, Object tx ) throws IllegalResourceException\n+{\n         return unusedResourceGuard( resource, tx, getRWLockForAcquiring( resource, tx ).tryAcquireReadLock( tx ) );\n     }\n \n-    public boolean getWriteLock( LockTracer tracer, LockResource resource, Object tx )\n-            throws DeadlockDetectedException, IllegalResourceException\n-    {\n+    public boolean getWriteLock( LockTracer tracer, LockResource resource, Object tx ) throws DeadlockDetectedException, IllegalResourceException\n+{\n         return unusedResourceGuard( resource, tx, getRWLockForAcquiring( resource, tx ).acquireWriteLock( tracer, tx ) );\n     }\n \n-    public boolean tryWriteLock( LockResource resource, Object tx )\n-            throws IllegalResourceException\n-    {\n+    public boolean tryWriteLock( LockResource resource, Object tx ) throws IllegalResourceException\n+{\n         return unusedResourceGuard( resource, tx, getRWLockForAcquiring( resource, tx ).tryAcquireWriteLock( tx ) );\n     }\n \n-    public void releaseReadLock( Object resource, Object tx )\n-            throws LockNotFoundException, IllegalResourceException\n-    {\n+    public void releaseReadLock( Object resource, Object tx ) throws LockNotFoundException, IllegalResourceException\n+{\n         getRWLockForReleasing( resource, tx, 1, 0, true ).releaseReadLock( tx );\n     }\n \n-    public void releaseWriteLock( Object resource, Object tx )\n-            throws LockNotFoundException, IllegalResourceException\n-    {\n+    public void releaseWriteLock( Object resource, Object tx ) throws LockNotFoundException, IllegalResourceException\n+{\n         getRWLockForReleasing( resource, tx, 0, 1, true ).releaseWriteLock( tx );\n     }\n \n@@ -100,7 +94,8 @@ public class LockManagerImpl\n             // lock will be released during release call\n             getRWLockForReleasing( resource, tx, 0, 0, false );\n         }\n-        return lockObtained;\n+\n+return lockObtained;\n     }\n \n     /**\n@@ -149,9 +144,8 @@ public class LockManagerImpl\n         return new RWLock( resource, ragManager, clock, lockAcquisitionTimeoutMillis );\n     }\n \n-    private RWLock getRWLockForReleasing( Object resource, Object tx, int readCountPrerequisite,\n-                                          int writeCountPrerequisite, boolean strict )\n-    {\n+    private RWLock getRWLockForReleasing( Object resource, Object tx, int readCountPrerequisite, int writeCountPrerequisite, boolean strict )\n+{\n         assertValidArguments( resource, tx );\n         synchronized ( resourceLockMap )\n         {\n@@ -162,23 +156,21 @@ public class LockManagerImpl\n                 {\n                     return null;\n                 }\n-                throw new LockNotFoundException( \"Lock not found for: \"\n-                                                 + resource + \" tx:\" + tx );\n-            }\n+                throw new LockNotFoundException( \"Lock not found for: \" + resource + \" tx:\" + tx );\n+    }\n             // we need to get info from a couple of synchronized methods\n             // to make it info consistent we need to synchronized lock to make sure it will not change between\n             // various calls\n             //noinspection SynchronizationOnLocalVariableOrMethodParameter\n             synchronized ( lock )\n             {\n-                if ( !lock.isMarked() && lock.getReadCount() == readCountPrerequisite &&\n-                     lock.getWriteCount() == writeCountPrerequisite &&\n+                if ( !lock.isMarked() && lock.getReadCount() == readCountPrerequisite &&lock.getWriteCount() == writeCountPrerequisite &&\n                      lock.getWaitingThreadsCount() == 0 )\n-                {\n+{\n                     resourceLockMap.remove( resource );\n                 }\n             }\n             return lock;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}