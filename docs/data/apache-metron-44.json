{
    "project_name": "apache-metron",
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "109",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 104).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      params = {\n          \"string - The input string\",\n          \"pattern - The regex pattern to be replaced. Special characters must be escaped (e.g. \\\\\\\\d)\",\n          \"value - The value to replace the regex pattern\"\n      },\n      returns = \"The modified input string with replaced values\")",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/44/RegExFunctions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/44/RegExFunctions.java\nindex ddc88605418..ee96b0b54cd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/44/RegExFunctions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/intellij/44/RegExFunctions.java\n@@ -6,9 +6,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/44/RegExFunctions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/naturalize/44/RegExFunctions.java\nindex ddc88605418..7a7b3e149f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/44/RegExFunctions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/naturalize/44/RegExFunctions.java\n@@ -136,4 +136,4 @@ public class RegExFunctions {\n       return matcher.replaceAll(value);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "33",
                    "severity": "warning",
                    "message": "'description' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "34",
                    "severity": "warning",
                    "message": "'params' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "'}' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "'returns' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'description' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'params' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'}' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "'returns' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'description' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "'params' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "warning",
                    "message": "'}' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "'returns' has incorrect indentation level 0, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/44/RegExFunctions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/codebuff/44/RegExFunctions.java\nindex ddc88605418..d1526963015 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/errored/1/44/RegExFunctions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-metron/codebuff/44/RegExFunctions.java\n@@ -30,12 +30,12 @@ import org.apache.metron.stellar.dsl.Stellar;\n public class RegExFunctions {\n \n   @Stellar(name = \"REGEXP_MATCH\",\n-      description = \"Determines whether a regex matches a string\",\n-      params = {\n-          \"string - The string to test\",\n+description = \"Determines whether a regex matches a string\",\n+params = {\"string - The string to test\",\n           \"pattern - The proposed regex pattern\"\n-      },\n-      returns = \"True if the regex pattern matches the string and false if otherwise.\")\n+},\n+returns = \"True if the regex pattern matches the string and false if otherwise.\"\n+  )\n   public static class RegexpMatch extends BaseStellarFunction {\n \n     @Override\n@@ -54,37 +54,34 @@ public class RegExFunctions {\n   }\n \n   @Stellar(name = \"REGEXP_GROUP_VAL\",\n-      description = \"Returns the value of a group in a regex against a string\",\n-      params = {\n-          \"string - The string to test\",\n+description = \"Returns the value of a group in a regex against a string\",\n+params = {\"string - The string to test\",\n           \"pattern - The proposed regex pattern\",\n           \"group - integer that selects what group to select, starting at 1\"\n-      },\n-      returns = \"The value of the group, or null if not matched or no group at index\")\n+},\n+returns = \"The value of the group, or null if not matched or no group at index\"\n+  )\n   public static class RegexpGroupValue extends BaseStellarFunction {\n \n     @Override\n     public Object apply(List<Object> list) {\n       if (list.size() != 3) {\n         throw new IllegalStateException(\n-            \"REGEXP_GROUP_VAL expects three args: [string, pattern, int]\" + \"\"\n-                + \"where pattern is a regexp pattern\");\n+            \"REGEXP_GROUP_VAL expects three args: [string, pattern, int]\"\n+                + \"\" + \"where pattern is a regexp pattern\");\n       }\n       String stringPattern = (String) list.get(1);\n       String str = (String) list.get(0);\n       Integer groupNumber = ConversionUtils.convert(list.get(2), Integer.class);\n-\n       if (groupNumber == null) {\n         // group number was not a valid integer\n         return null;\n       }\n-\n       if (groupNumber == 0) {\n         // 0, by default is the entire input\n         // default to returning a non-null\n         return str;\n       }\n-\n       if (str == null || stringPattern == null) {\n         return null;\n       }\n@@ -93,7 +90,6 @@ public class RegExFunctions {\n       if (!matcher.matches()) {\n         return null;\n       }\n-\n       int groupCount = matcher.groupCount();\n       if (groupCount == 0 || groupCount < groupNumber) {\n         return null;\n@@ -103,13 +99,13 @@ public class RegExFunctions {\n   }\n \n   @Stellar(name = \"REGEXP_REPLACE\",\n-      description = \"Replace all occurences of the regex pattern within the string by value\",\n-      params = {\n-          \"string - The input string\",\n+description = \"Replace all occurences of the regex pattern within the string by value\",\n+params = {\"string - The input string\",\n           \"pattern - The regex pattern to be replaced. Special characters must be escaped (e.g. \\\\\\\\d)\",\n           \"value - The value to replace the regex pattern\"\n-      },\n-      returns = \"The modified input string with replaced values\")\n+},\n+returns = \"The modified input string with replaced values\"\n+  )\n   public static class RegexpReplace extends BaseStellarFunction {\n \n     @Override\n@@ -117,23 +113,20 @@ public class RegExFunctions {\n       if (list.size() != 3) {\n         throw new IllegalStateException(\n             \"REGEXP_REPLACE expects three args: [string, pattern, value]\"\n-                + \" where pattern is a regexp pattern\");\n+              + \" where pattern is a regexp pattern\");\n       }\n       String str = (String) list.get(0);\n       String stringPattern = (String) list.get(1);\n       String value = (String) list.get(2);\n-\n       if (StringUtils.isEmpty(str)) {\n         return null;\n       }\n-\n       if (StringUtils.isEmpty(stringPattern) || StringUtils.isEmpty(value)) {\n         return str;\n       }\n-\n       Pattern pattern = PatternCache.INSTANCE.getPattern(stringPattern);\n       Matcher matcher = pattern.matcher(str);\n       return matcher.replaceAll(value);\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}