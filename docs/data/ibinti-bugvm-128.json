{
    "project_name": "ibinti-bugvm",
    "error_id": "128",
    "information": {
        "errors": [
            {
                "line": "54",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 89).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    /**\n     * Receives the next request entity available from this connection and attaches it to\n     * an existing request.\n     * @param request the request to attach the entity to.\n     * @throws HttpException in case of HTTP protocol violation",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 87).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/128/HttpServerConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/128/HttpServerConnection.java\nindex d72e5e5d232..def88175720 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/128/HttpServerConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/128/HttpServerConnection.java\n@@ -37,52 +37,56 @@ import java.io.IOException;\n  */\n public interface HttpServerConnection extends HttpConnection {\n \n-    /**\n-     * Receives the request line and all headers available from this connection.\n-     * The caller should examine the returned request and decide if to receive a\n-     * request entity as well.\n-     *\n-     * @return a new HttpRequest object whose request line and headers are\n-     *         initialized.\n-     * @throws HttpException in case of HTTP protocol violation\n-     * @throws IOException in case of an I/O error\n-     */\n-    HttpRequest receiveRequestHeader()\n-        throws HttpException, IOException;\n+  /**\n+   * Receives the request line and all headers available from this connection.\n+   * The caller should examine the returned request and decide if to receive a\n+   * request entity as well.\n+   *\n+   * @return a new HttpRequest object whose request line and headers are\n+   * initialized.\n+   * @throws HttpException in case of HTTP protocol violation\n+   * @throws IOException   in case of an I/O error\n+   */\n+  HttpRequest receiveRequestHeader()\n+    throws HttpException, IOException;\n \n-    /**\n-     * Receives the next request entity available from this connection and attaches it to\n-     * an existing request.\n-     * @param request the request to attach the entity to.\n-     * @throws HttpException in case of HTTP protocol violation\n-     * @throws IOException in case of an I/O error\n-     */\n-    void receiveRequestEntity(HttpEntityEnclosingRequest request)\n-        throws HttpException, IOException;\n+  /**\n+   * Receives the next request entity available from this connection and attaches it to\n+   * an existing request.\n+   *\n+   * @param request the request to attach the entity to.\n+   * @throws HttpException in case of HTTP protocol violation\n+   * @throws IOException   in case of an I/O error\n+   */\n+  void receiveRequestEntity(HttpEntityEnclosingRequest request)\n+    throws HttpException, IOException;\n \n-    /**\n-     * Sends the response line and headers of a response over this connection.\n-     * @param response the response whose headers to send.\n-     * @throws HttpException in case of HTTP protocol violation\n-     * @throws IOException in case of an I/O error\n-     */\n-    void sendResponseHeader(HttpResponse response)\n-        throws HttpException, IOException;\n+  /**\n+   * Sends the response line and headers of a response over this connection.\n+   *\n+   * @param response the response whose headers to send.\n+   * @throws HttpException in case of HTTP protocol violation\n+   * @throws IOException   in case of an I/O error\n+   */\n+  void sendResponseHeader(HttpResponse response)\n+    throws HttpException, IOException;\n \n-    /**\n-     * Sends the response entity of a response over this connection.\n-     * @param response the response whose entity to send.\n-     * @throws HttpException in case of HTTP protocol violation\n-     * @throws IOException in case of an I/O error\n-     */\n-    void sendResponseEntity(HttpResponse response)\n-        throws HttpException, IOException;\n+  /**\n+   * Sends the response entity of a response over this connection.\n+   *\n+   * @param response the response whose entity to send.\n+   * @throws HttpException in case of HTTP protocol violation\n+   * @throws IOException   in case of an I/O error\n+   */\n+  void sendResponseEntity(HttpResponse response)\n+    throws HttpException, IOException;\n \n-    /**\n-     * Sends all pending buffered data over this connection.\n-     * @throws IOException in case of an I/O error\n-     */\n-    void flush()\n-        throws IOException;\n+  /**\n+   * Sends all pending buffered data over this connection.\n+   *\n+   * @throws IOException in case of an I/O error\n+   */\n+  void flush()\n+    throws IOException;\n \n }\n",
            "diff_size": 47
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/128/HttpServerConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/128/HttpServerConnection.java\nindex d72e5e5d232..7d569bb2148 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/128/HttpServerConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/128/HttpServerConnection.java\n@@ -85,4 +85,4 @@ public interface HttpServerConnection extends HttpConnection {\n     void flush()\n         throws IOException;\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 85).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/128/HttpServerConnection.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/128/HttpServerConnection.java\nindex d72e5e5d232..b782c72ce21 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/128/HttpServerConnection.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/128/HttpServerConnection.java\n@@ -35,6 +35,8 @@ import java.io.IOException;\n  *\n  * @since 4.0\n  */\n+\n+\n public interface HttpServerConnection extends HttpConnection {\n \n     /**\n@@ -47,8 +49,9 @@ public interface HttpServerConnection extends HttpConnection {\n      * @throws HttpException in case of HTTP protocol violation\n      * @throws IOException in case of an I/O error\n      */\n-    HttpRequest receiveRequestHeader()\n-        throws HttpException, IOException;\n+\n+\n+    HttpRequest receiveRequestHeader() throws HttpException, IOException;\n \n     /**\n      * Receives the next request entity available from this connection and attaches it to\n@@ -57,8 +60,9 @@ public interface HttpServerConnection extends HttpConnection {\n      * @throws HttpException in case of HTTP protocol violation\n      * @throws IOException in case of an I/O error\n      */\n-    void receiveRequestEntity(HttpEntityEnclosingRequest request)\n-        throws HttpException, IOException;\n+\n+\n+    void receiveRequestEntity(HttpEntityEnclosingRequest request) throws HttpException, IOException;\n \n     /**\n      * Sends the response line and headers of a response over this connection.\n@@ -66,8 +70,9 @@ public interface HttpServerConnection extends HttpConnection {\n      * @throws HttpException in case of HTTP protocol violation\n      * @throws IOException in case of an I/O error\n      */\n-    void sendResponseHeader(HttpResponse response)\n-        throws HttpException, IOException;\n+\n+\n+    void sendResponseHeader(HttpResponse response) throws HttpException, IOException;\n \n     /**\n      * Sends the response entity of a response over this connection.\n@@ -75,14 +80,15 @@ public interface HttpServerConnection extends HttpConnection {\n      * @throws HttpException in case of HTTP protocol violation\n      * @throws IOException in case of an I/O error\n      */\n-    void sendResponseEntity(HttpResponse response)\n-        throws HttpException, IOException;\n+\n+\n+    void sendResponseEntity(HttpResponse response) throws HttpException, IOException;\n \n     /**\n      * Sends all pending buffered data over this connection.\n      * @throws IOException in case of an I/O error\n      */\n-    void flush()\n-        throws IOException;\n \n-}\n+\n+    void flush() throws IOException;\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 89).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}