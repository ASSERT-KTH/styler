{
    "project_name": "h2database-h2database",
    "error_id": "126",
    "information": {
        "errors": [
            {
                "line": "2394",
                "column": "100",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "     */\n    @Override\n    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) //\n            throws SQLException {\n        try {\n            if (isDebugEnabled()) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/126/JdbcDatabaseMetaData.java\nindex d8b2e1ac408..e8bfad9d3d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler/126/JdbcDatabaseMetaData.java\n@@ -2391,8 +2391,9 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return an empty result set\n      */\n     @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) //\n-            throws SQLException {\n+    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern)\n+        //\n+             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTables(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "2453",
                    "column": "62",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/126/JdbcDatabaseMetaData.java\nindex d8b2e1ac408..28b71415525 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/intellij/126/JdbcDatabaseMetaData.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.jdbc;\n \n import java.sql.Connection;\n@@ -41,7 +42,8 @@ public final class JdbcDatabaseMetaData extends TraceObject\n         setTrace(trace, TraceObject.DATABASE_META_DATA, id);\n         this.conn = conn;\n         Session session = conn.getSession();\n-        meta = session.isOldInformationSchema() ? new DatabaseMetaLegacy(session)\n+        meta = session.isOldInformationSchema() ?\n+                new DatabaseMetaLegacy(session)\n                 : conn.getSession().getDatabaseMeta();\n     }\n \n@@ -136,24 +138,28 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>SQL (String) the create table statement or NULL for systems tables.</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n-     * @param types null or a list of table types\n+     *                         (uppercase for unquoted names)\n+     * @param types            null or a list of table types\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String[] types)\n+    public ResultSet getTables(String catalog, String schemaPattern,\n+                               String tableNamePattern, String[] types)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTables(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \" + quote(tableNamePattern)\n+                debugCode(\"getTables(\" + quote(catalog) + \", \" +\n+                        quote(schemaPattern) + \", \" + quote(tableNamePattern)\n                         + \", \" + quoteArray(types) + ')');\n             }\n-            return getResultSet(meta.getTables(catalog, schemaPattern, tableNamePattern, types));\n+            return getResultSet(\n+                    meta.getTables(catalog, schemaPattern, tableNamePattern,\n+                            types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -191,27 +197,30 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>IS_GENERATEDCOLUMN (String) \"NO\" or \"YES\"</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getColumns(String catalog, String schemaPattern,\n+                                String tableNamePattern,\n+                                String columnNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumns(\" + quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(tableNamePattern)+\", \"\n-                        +quote(columnNamePattern)+')');\n+                debugCode(\"getColumns(\" + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \"\n+                        + quote(columnNamePattern) + ')');\n             }\n-            return getResultSet(meta.getColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(\n+                    meta.getColumns(catalog, schemaPattern, tableNamePattern,\n+                            columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -242,24 +251,28 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>FILTER_CONDITION (String) filter condition (always empty)</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param unique only unique indexes\n+     * @param catalog     null or the catalog name\n+     * @param schema      null (to get all objects) or a schema name\n+     *                    (uppercase for unquoted names)\n+     * @param table       table name (must be specified)\n+     * @param unique      only unique indexes\n      * @param approximate if true, return fast, but approximate CARDINALITY\n      * @return the list of indexes and columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getIndexInfo(String catalog, String schema, String table, boolean unique, boolean approximate)\n+    public ResultSet getIndexInfo(String catalog, String schema, String table,\n+                                  boolean unique, boolean approximate)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \" + quote(schema) + \", \" + quote(table) + \", \" + unique\n+                debugCode(\"getIndexInfo(\" + quote(catalog) + \", \" +\n+                        quote(schema) + \", \" + quote(table) + \", \" + unique\n                         + \", \" + approximate + ')');\n             }\n-            return getResultSet(meta.getIndexInfo(catalog, schema, table, unique, approximate));\n+            return getResultSet(\n+                    meta.getIndexInfo(catalog, schema, table, unique,\n+                            approximate));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -279,17 +292,19 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalog null or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n+     * @param schema  null (to get all objects) or a schema name\n+     *                (uppercase for unquoted names)\n+     * @param table   table name (must be specified)\n      * @return the list of primary key columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getPrimaryKeys(String catalog, String schema, String table)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPrimaryKeys(\" + quote(catalog) + \", \" + quote(schema) + \", \" + quote(table) + ')');\n+                debugCode(\"getPrimaryKeys(\" + quote(catalog) + \", \" +\n+                        quote(schema) + \", \" + quote(table) + ')');\n             }\n             return getResultSet(meta.getPrimaryKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -460,24 +475,26 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * overloads</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog              null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n      * @return the procedures\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getProcedures(String catalog, String schemaPattern,\n-            String procedureNamePattern) throws SQLException {\n+                                   String procedureNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getProcedures(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(procedureNamePattern)+')');\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + ')');\n             }\n-            return getResultSet(meta.getProcedures(catalog, schemaPattern, procedureNamePattern));\n+            return getResultSet(meta.getProcedures(catalog, schemaPattern,\n+                    procedureNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -517,25 +534,30 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * overloads</li>\n      * </ol>\n      *\n-     * @param catalog null or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog              null or the catalog name\n+     * @param schemaPattern        null (to get all objects) or a schema name\n+     *                             (uppercase for unquoted names)\n      * @param procedureNamePattern the procedure name pattern\n-     * @param columnNamePattern the procedure name pattern\n+     * @param columnNamePattern    the procedure name pattern\n      * @return the procedure columns\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getProcedureColumns(String catalog, String schemaPattern, String procedureNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getProcedureColumns(String catalog, String schemaPattern,\n+                                         String procedureNamePattern,\n+                                         String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getProcedureColumns(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n-                        + quote(procedureNamePattern) + \", \" + quote(columnNamePattern) + ')');\n+                debugCode(\"getProcedureColumns(\" + quote(catalog) + \", \" +\n+                        quote(schemaPattern) + \", \"\n+                        + quote(procedureNamePattern) + \", \" +\n+                        quote(columnNamePattern) + ')');\n             }\n             checkClosed();\n             return getResultSet(\n-                    meta.getProcedureColumns(catalog, schemaPattern, procedureNamePattern, columnNamePattern));\n+                    meta.getProcedureColumns(catalog, schemaPattern,\n+                            procedureNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -621,24 +643,27 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * others</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table a table name (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schema            null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param table             a table name (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getColumnPrivileges(String catalog, String schema, String table, String columnNamePattern)\n+    public ResultSet getColumnPrivileges(String catalog, String schema,\n+                                         String table, String columnNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getColumnPrivileges(\" + quote(catalog) + \", \" + quote(schema) + \", \" + quote(table) + \", \"\n+                debugCode(\"getColumnPrivileges(\" + quote(catalog) + \", \" +\n+                        quote(schema) + \", \" + quote(table) + \", \"\n                         + quote(columnNamePattern) + ')');\n             }\n-            return getResultSet(meta.getColumnPrivileges(catalog, schema, table, columnNamePattern));\n+            return getResultSet(meta.getColumnPrivileges(catalog, schema, table,\n+                    columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -660,24 +685,27 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * others</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return the list of privileges\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getTablePrivileges(String catalog, String schemaPattern, String tableNamePattern)\n+    public ResultSet getTablePrivileges(String catalog, String schemaPattern,\n+                                        String tableNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getTablePrivileges(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n+                debugCode(\"getTablePrivileges(\" + quote(catalog) + \", \" +\n+                        quote(schemaPattern) + \", \"\n                         + quote(tableNamePattern) + ')');\n             }\n             checkClosed();\n-            return getResultSet(meta.getTablePrivileges(catalog, schemaPattern, tableNamePattern));\n+            return getResultSet(meta.getTablePrivileges(catalog, schemaPattern,\n+                    tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -699,24 +727,29 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>PSEUDO_COLUMN (short) (always bestRowNotPseudo)</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param table table name (must be specified)\n-     * @param scope ignored\n+     * @param catalog  null (to get all objects) or the catalog name\n+     * @param schema   null (to get all objects) or a schema name\n+     *                 (uppercase for unquoted names)\n+     * @param table    table name (must be specified)\n+     * @param scope    ignored\n      * @param nullable ignored\n      * @return the primary key index\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getBestRowIdentifier(String catalog, String schema, String table, int scope, boolean nullable)\n+    public ResultSet getBestRowIdentifier(String catalog, String schema,\n+                                          String table, int scope,\n+                                          boolean nullable)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getBestRowIdentifier(\" + quote(catalog) + \", \" + quote(schema) + \", \" + quote(table) + \", \"\n+                debugCode(\"getBestRowIdentifier(\" + quote(catalog) + \", \" +\n+                        quote(schema) + \", \" + quote(table) + \", \"\n                         + scope + \", \" + nullable + ')');\n             }\n-            return getResultSet(meta.getBestRowIdentifier(catalog, schema, table, scope, nullable));\n+            return getResultSet(\n+                    meta.getBestRowIdentifier(catalog, schema, table, scope,\n+                            nullable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -739,16 +772,18 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalog null (to get all objects) or the catalog name\n-     * @param schema null (to get all objects) or a schema name\n-     * @param table table name (must be specified)\n+     * @param schema  null (to get all objects) or a schema name\n+     * @param table   table name (must be specified)\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getVersionColumns(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getVersionColumns(String catalog, String schema,\n+                                       String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getVersionColumns(\" + quote(catalog) + \", \" + quote(schema) + \", \" + quote(table) + ')');\n+                debugCode(\"getVersionColumns(\" + quote(catalog) + \", \" +\n+                        quote(schema) + \", \" + quote(table) + ')');\n             }\n             return getResultSet(meta.getVersionColumns(catalog, schema, table));\n         } catch (Exception e) {\n@@ -782,16 +817,18 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalog null (to get all objects) or the catalog name\n-     * @param schema the schema name of the foreign table\n-     * @param table the name of the foreign table\n+     * @param schema  the schema name of the foreign table\n+     * @param table   the name of the foreign table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getImportedKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getImportedKeys(String catalog, String schema,\n+                                     String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getImportedKeys(\" + quote(catalog) + \", \" + quote(schema) + \", \" + quote(table) + ')');\n+                debugCode(\"getImportedKeys(\" + quote(catalog) + \", \" +\n+                        quote(schema) + \", \" + quote(table) + ')');\n             }\n             return getResultSet(meta.getImportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -825,16 +862,18 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalog null or the catalog name\n-     * @param schema the schema name of the primary table\n-     * @param table the name of the primary table\n+     * @param schema  the schema name of the primary table\n+     * @param table   the name of the primary table\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getExportedKeys(String catalog, String schema, String table) throws SQLException {\n+    public ResultSet getExportedKeys(String catalog, String schema,\n+                                     String table) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getExportedKeys(\" + quote(catalog) + \", \" + quote(schema) + \", \" + quote(table) + ')');\n+                debugCode(\"getExportedKeys(\" + quote(catalog) + \", \" +\n+                        quote(schema) + \", \" + quote(table) + ')');\n             }\n             return getResultSet(meta.getExportedKeys(catalog, schema, table));\n         } catch (Exception e) {\n@@ -869,27 +908,36 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param primaryCatalog null or the catalog name\n-     * @param primarySchema the schema name of the primary table\n-     *          (optional)\n-     * @param primaryTable the name of the primary table (must be specified)\n+     * @param primarySchema  the schema name of the primary table\n+     *                       (optional)\n+     * @param primaryTable   the name of the primary table (must be specified)\n      * @param foreignCatalog null or the catalog name\n-     * @param foreignSchema the schema name of the foreign table\n-     *          (optional)\n-     * @param foreignTable the name of the foreign table (must be specified)\n+     * @param foreignSchema  the schema name of the foreign table\n+     *                       (optional)\n+     * @param foreignTable   the name of the foreign table (must be specified)\n      * @return the result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n-    public ResultSet getCrossReference(String primaryCatalog, String primarySchema, String primaryTable,\n-            String foreignCatalog, String foreignSchema, String foreignTable) throws SQLException {\n+    public ResultSet getCrossReference(String primaryCatalog,\n+                                       String primarySchema,\n+                                       String primaryTable,\n+                                       String foreignCatalog,\n+                                       String foreignSchema,\n+                                       String foreignTable)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getCrossReference(\" + quote(primaryCatalog) + \", \" + quote(primarySchema) + \", \"\n-                        + quote(primaryTable) + \", \" + quote(foreignCatalog) + \", \" + quote(foreignSchema) + \", \"\n+                debugCode(\"getCrossReference(\" + quote(primaryCatalog) + \", \" +\n+                        quote(primarySchema) + \", \"\n+                        + quote(primaryTable) + \", \" + quote(foreignCatalog) +\n+                        \", \" + quote(foreignSchema) + \", \"\n                         + quote(foreignTable) + ')');\n             }\n-            return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n-                    foreignSchema, foreignTable));\n+            return getResultSet(\n+                    meta.getCrossReference(primaryCatalog, primarySchema,\n+                            primaryTable, foreignCatalog,\n+                            foreignSchema, foreignTable));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -909,25 +957,28 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>BASE_TYPE (short) base type - see also java.sql.Types</li>\n      * </ol>\n      *\n-     * @param catalog ignored\n-     * @param schemaPattern ignored\n+     * @param catalog         ignored\n+     * @param schemaPattern   ignored\n      * @param typeNamePattern ignored\n-     * @param types ignored\n+     * @param types           ignored\n      * @return an empty result set\n      * @throws SQLException if the connection is closed\n      */\n     @Override\n     public ResultSet getUDTs(String catalog, String schemaPattern,\n-            String typeNamePattern, int[] types) throws SQLException {\n+                             String typeNamePattern, int[] types)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getUDTs(\"\n-                        +quote(catalog)+\", \"\n-                        +quote(schemaPattern)+\", \"\n-                        +quote(typeNamePattern)+\", \"\n-                        +quoteIntArray(types)+')');\n+                        + quote(catalog) + \", \"\n+                        + quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \"\n+                        + quoteIntArray(types) + ')');\n             }\n-            return getResultSet(meta.getUDTs(catalog, schemaPattern, typeNamePattern, types));\n+            return getResultSet(\n+                    meta.getUDTs(catalog, schemaPattern, typeNamePattern,\n+                            types));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -1086,7 +1137,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * patterns.\n      *\n      * @return the default escape character (always '\\', independent on the\n-     *         mode)\n+     * mode)\n      */\n     @Override\n     public String getSearchStringEscape() throws SQLException {\n@@ -1169,7 +1220,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * Returns whether CONVERT is supported for one datatype to another.\n      *\n      * @param fromType the source SQL type\n-     * @param toType the target SQL type\n+     * @param toType   the target SQL type\n      * @return true\n      */\n     @Override\n@@ -1765,17 +1816,18 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return true\n      */\n     @Override\n-    public boolean supportsTransactionIsolationLevel(int level) throws SQLException {\n+    public boolean supportsTransactionIsolationLevel(int level)\n+            throws SQLException {\n         debugCodeCall(\"supportsTransactionIsolationLevel\");\n         switch (level) {\n-        case Connection.TRANSACTION_READ_UNCOMMITTED:\n-        case Connection.TRANSACTION_READ_COMMITTED:\n-        case Connection.TRANSACTION_REPEATABLE_READ:\n-        case Constants.TRANSACTION_SNAPSHOT:\n-        case Connection.TRANSACTION_SERIALIZABLE:\n-            return true;\n-        default:\n-            return false;\n+            case Connection.TRANSACTION_READ_UNCOMMITTED:\n+            case Connection.TRANSACTION_READ_COMMITTED:\n+            case Connection.TRANSACTION_REPEATABLE_READ:\n+            case Constants.TRANSACTION_SNAPSHOT:\n+            case Connection.TRANSACTION_SERIALIZABLE:\n+                return true;\n+            default:\n+                return false;\n         }\n     }\n \n@@ -1841,14 +1893,15 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * Returns whether a specific result set concurrency is supported.\n      * ResultSet.TYPE_SCROLL_SENSITIVE is not supported.\n      *\n-     * @param type the result set type\n+     * @param type        the result set type\n      * @param concurrency the result set concurrency\n      * @return true if the type is not ResultSet.TYPE_SCROLL_SENSITIVE\n      */\n     @Override\n     public boolean supportsResultSetConcurrency(int type, int concurrency) {\n         if (isDebugEnabled()) {\n-            debugCode(\"supportsResultSetConcurrency(\" + type + \", \" + concurrency + ')');\n+            debugCode(\"supportsResultSetConcurrency(\" + type + \", \" +\n+                    concurrency + ')');\n         }\n         return type != ResultSet.TYPE_SCROLL_SENSITIVE;\n     }\n@@ -2004,7 +2057,8 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     public boolean supportsMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"supportsMixedCaseIdentifiers\");\n         Session.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && !settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                !settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2041,7 +2095,8 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     public boolean storesMixedCaseIdentifiers() throws SQLException {\n         debugCodeCall(\"storesMixedCaseIdentifiers\");\n         Session.StaticSettings settings = conn.getStaticSettings();\n-        return !settings.databaseToUpper && !settings.databaseToLower && settings.caseInsensitiveIdentifiers;\n+        return !settings.databaseToUpper && !settings.databaseToLower &&\n+                settings.caseInsensitiveIdentifiers;\n     }\n \n     /**\n@@ -2361,13 +2416,16 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getSuperTypes(String catalog, String schemaPattern, String typeNamePattern) throws SQLException {\n+    public ResultSet getSuperTypes(String catalog, String schemaPattern,\n+                                   String typeNamePattern) throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTypes(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n+                debugCode(\"getSuperTypes(\" + quote(catalog) + \", \" +\n+                        quote(schemaPattern) + \", \"\n                         + quote(typeNamePattern) + ')');\n             }\n-            return getResultSet(meta.getSuperTypes(catalog, schemaPattern, typeNamePattern));\n+            return getResultSet(meta.getSuperTypes(catalog, schemaPattern,\n+                    typeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2383,22 +2441,25 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>SUPERTABLE_NAME (String) the name of the super table</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param catalog          null (to get all objects) or the catalog name\n+     * @param schemaPattern    null (to get all objects) or a schema name\n+     *                         (uppercase for unquoted names)\n      * @param tableNamePattern null (to get all objects) or a table name pattern\n-     *            (uppercase for unquoted names)\n+     *                         (uppercase for unquoted names)\n      * @return an empty result set\n      */\n     @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) //\n+    public ResultSet getSuperTables(String catalog, String schemaPattern,\n+                                    String tableNamePattern) //\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getSuperTables(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n+                debugCode(\"getSuperTables(\" + quote(catalog) + \", \" +\n+                        quote(schemaPattern) + \", \"\n                         + quote(tableNamePattern) + ')');\n             }\n-            return getResultSet(meta.getSuperTables(catalog, schemaPattern, tableNamePattern));\n+            return getResultSet(meta.getSuperTables(catalog, schemaPattern,\n+                    tableNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2408,14 +2469,20 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * [Not supported]\n      */\n     @Override\n-    public ResultSet getAttributes(String catalog, String schemaPattern, String typeNamePattern,\n-            String attributeNamePattern) throws SQLException {\n+    public ResultSet getAttributes(String catalog, String schemaPattern,\n+                                   String typeNamePattern,\n+                                   String attributeNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getAttributes(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n-                        + quote(typeNamePattern) + \", \" + quote(attributeNamePattern) + ')');\n+                debugCode(\"getAttributes(\" + quote(catalog) + \", \" +\n+                        quote(schemaPattern) + \", \"\n+                        + quote(typeNamePattern) + \", \" +\n+                        quote(attributeNamePattern) + ')');\n             }\n-            return getResultSet(meta.getAttributes(catalog, schemaPattern, typeNamePattern, attributeNamePattern));\n+            return getResultSet(\n+                    meta.getAttributes(catalog, schemaPattern, typeNamePattern,\n+                            attributeNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2425,7 +2492,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * Does this database supports a result set holdability.\n      *\n      * @param holdability ResultSet.HOLD_CURSORS_OVER_COMMIT or\n-     *            CLOSE_CURSORS_AT_COMMIT\n+     *                    CLOSE_CURSORS_AT_COMMIT\n      * @return true if the holdability is ResultSet.CLOSE_CURSORS_AT_COMMIT\n      */\n     @Override\n@@ -2557,8 +2624,8 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * </ol>\n      *\n      * @param catalogPattern null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n+     * @param schemaPattern  null (to get all objects) or a schema name\n+     *                       (uppercase for unquoted names)\n      * @return the schema list\n      * @throws SQLException if the connection is closed\n      */\n@@ -2608,11 +2675,14 @@ public final class JdbcDatabaseMetaData extends TraceObject\n         // Non-standard column\n         result.addColumn(\"VALUE\", TypeInfo.TYPE_VARCHAR);\n         for (Entry<Object, Object> entry : clientInfo.entrySet()) {\n-            result.addRow(ValueVarchar.get((String) entry.getKey()), ValueInteger.get(Integer.MAX_VALUE),\n-                    ValueVarchar.EMPTY, ValueVarchar.EMPTY, ValueVarchar.get((String) entry.getValue()));\n+            result.addRow(ValueVarchar.get((String) entry.getKey()),\n+                    ValueInteger.get(Integer.MAX_VALUE),\n+                    ValueVarchar.EMPTY, ValueVarchar.EMPTY,\n+                    ValueVarchar.get((String) entry.getValue()));\n         }\n         int id = getNextId(TraceObject.RESULT_SET);\n-        debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id, \"getClientInfoProperties()\");\n+        debugCodeAssign(\"ResultSet\", TraceObject.RESULT_SET, id,\n+                \"getClientInfoProperties()\");\n         return new JdbcResultSet(conn, null, null, result, id, true, false);\n     }\n \n@@ -2650,15 +2720,20 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * [Not supported] Gets the list of function columns.\n      */\n     @Override\n-    public ResultSet getFunctionColumns(String catalog, String schemaPattern, String functionNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getFunctionColumns(String catalog, String schemaPattern,\n+                                        String functionNamePattern,\n+                                        String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctionColumns(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n-                        + quote(functionNamePattern) + \", \" + quote(columnNamePattern) + ')');\n+                debugCode(\"getFunctionColumns(\" + quote(catalog) + \", \" +\n+                        quote(schemaPattern) + \", \"\n+                        + quote(functionNamePattern) + \", \" +\n+                        quote(columnNamePattern) + ')');\n             }\n             return getResultSet(\n-                    meta.getFunctionColumns(catalog, schemaPattern, functionNamePattern, columnNamePattern));\n+                    meta.getFunctionColumns(catalog, schemaPattern,\n+                            functionNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2668,14 +2743,17 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * [Not supported] Gets the list of functions.\n      */\n     @Override\n-    public ResultSet getFunctions(String catalog, String schemaPattern, String functionNamePattern)\n+    public ResultSet getFunctions(String catalog, String schemaPattern,\n+                                  String functionNamePattern)\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getFunctions(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n+                debugCode(\"getFunctions(\" + quote(catalog) + \", \" +\n+                        quote(schemaPattern) + \", \"\n                         + quote(functionNamePattern) + ')');\n             }\n-            return getResultSet(meta.getFunctions(catalog, schemaPattern, functionNamePattern));\n+            return getResultSet(meta.getFunctions(catalog, schemaPattern,\n+                    functionNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2714,24 +2792,29 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * <li>IS_NULLABLE (String) \"NO\" or \"YES\"</li>\n      * </ol>\n      *\n-     * @param catalog null (to get all objects) or the catalog name\n-     * @param schemaPattern null (to get all objects) or a schema name\n-     *            (uppercase for unquoted names)\n-     * @param tableNamePattern null (to get all objects) or a table name\n-     *            (uppercase for unquoted names)\n+     * @param catalog           null (to get all objects) or the catalog name\n+     * @param schemaPattern     null (to get all objects) or a schema name\n+     *                          (uppercase for unquoted names)\n+     * @param tableNamePattern  null (to get all objects) or a table name\n+     *                          (uppercase for unquoted names)\n      * @param columnNamePattern null (to get all objects) or a column name\n-     *            (uppercase for unquoted names)\n+     *                          (uppercase for unquoted names)\n      * @return the list of pseudo and invisible columns\n      */\n     @Override\n-    public ResultSet getPseudoColumns(String catalog, String schemaPattern, String tableNamePattern,\n-            String columnNamePattern) throws SQLException {\n+    public ResultSet getPseudoColumns(String catalog, String schemaPattern,\n+                                      String tableNamePattern,\n+                                      String columnNamePattern)\n+            throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n-                debugCode(\"getPseudoColumns(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n-                        + quote(tableNamePattern) + \", \" + quote(columnNamePattern) + ')');\n+                debugCode(\"getPseudoColumns(\" + quote(catalog) + \", \" +\n+                        quote(schemaPattern) + \", \"\n+                        + quote(tableNamePattern) + \", \" +\n+                        quote(columnNamePattern) + ')');\n             }\n-            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern, tableNamePattern, columnNamePattern));\n+            return getResultSet(meta.getPseudoColumns(catalog, schemaPattern,\n+                    tableNamePattern, columnNamePattern));\n         } catch (Exception e) {\n             throw logAndConvert(e);\n         }\n@@ -2746,7 +2829,8 @@ public final class JdbcDatabaseMetaData extends TraceObject\n     }\n \n     private JdbcResultSet getResultSet(ResultInterface result) {\n-        return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n+        return new JdbcResultSet(conn, null, null, result,\n+                getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n }\n",
            "diff_size": 248
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "2392",
                    "column": "100",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/126/JdbcDatabaseMetaData.java\nindex d8b2e1ac408..3415c2b7edb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/naturalize/126/JdbcDatabaseMetaData.java\n@@ -30,8 +30,7 @@ import org.h2.value.ValueVarchar;\n /**\n  * Represents the meta data for a database.\n  */\n-public final class JdbcDatabaseMetaData extends TraceObject\n-        implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n+public final class JdbcDatabaseMetaData extends TraceObject implements DatabaseMetaData, JdbcDatabaseMetaDataBackwardsCompat {\n \n     private final JdbcConnection conn;\n \n@@ -885,8 +884,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getCrossReference(\" + quote(primaryCatalog) + \", \" + quote(primarySchema) + \", \"\n-                        + quote(primaryTable) + \", \" + quote(foreignCatalog) + \", \" + quote(foreignSchema) + \", \"\n-                        + quote(foreignTable) + ')');\n+                        + quote(primaryTable) + \", \" + quote(foreignCatalog) + \", \" + quote(foreignSchema) + \", \" + quote(foreignTable) + ')');\n             }\n             return getResultSet(meta.getCrossReference(primaryCatalog, primarySchema, primaryTable, foreignCatalog,\n                     foreignSchema, foreignTable));\n@@ -2749,4 +2747,4 @@ public final class JdbcDatabaseMetaData extends TraceObject\n         return new JdbcResultSet(conn, null, null, result, getNextId(TraceObject.RESULT_SET), false, false);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "2394",
                    "column": "99",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/126/JdbcDatabaseMetaData.java\nindex d8b2e1ac408..16881fed193 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_random/126/JdbcDatabaseMetaData.java\n@@ -2391,7 +2391,7 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return an empty result set\n      */\n     @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) //\n+    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern)//\n             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/126/JdbcDatabaseMetaData.java\nindex d8b2e1ac408..e8bfad9d3d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/errored/1/126/JdbcDatabaseMetaData.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/h2database-h2database/styler_three_grams/126/JdbcDatabaseMetaData.java\n@@ -2391,8 +2391,9 @@ public final class JdbcDatabaseMetaData extends TraceObject\n      * @return an empty result set\n      */\n     @Override\n-    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern) //\n-            throws SQLException {\n+    public ResultSet getSuperTables(String catalog, String schemaPattern, String tableNamePattern)\n+        //\n+             throws SQLException {\n         try {\n             if (isDebugEnabled()) {\n                 debugCode(\"getSuperTables(\" + quote(catalog) + \", \" + quote(schemaPattern) + \", \"\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}