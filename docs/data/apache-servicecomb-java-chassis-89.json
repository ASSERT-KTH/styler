{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "89",
    "information": {
        "errors": [
            {
                "line": "112",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    InvocationException exception = response.getResult();\n    CommonExceptionData data = (CommonExceptionData) exception.getErrorData();\n    Assert.assertEquals(\"method null, path null, statusCode 0, reasonPhrase null, response content-type null is not supported\",\n        data.getMessage());\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/89/TestDefaultHttpClientFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/89/TestDefaultHttpClientFilter.java\nindex 6c054f2d160..c6a0b176e8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/89/TestDefaultHttpClientFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/89/TestDefaultHttpClientFilter.java\n@@ -51,7 +51,7 @@ public class TestDefaultHttpClientFilter {\n \n   @Test\n   public void testFindProduceProcessorNullContentType(@Mocked RestOperationMeta restOperation,\n-      @Mocked HttpServletResponseEx responseEx) {\n+                                                      @Mocked HttpServletResponseEx responseEx) {\n     new Expectations() {\n       {\n         responseEx.getHeader(HttpHeaders.CONTENT_TYPE);\n@@ -64,7 +64,8 @@ public class TestDefaultHttpClientFilter {\n \n   @Test\n   public void testFindProduceProcessorJson(@Mocked RestOperationMeta restOperation,\n-      @Mocked HttpServletResponseEx responseEx, @Mocked ProduceProcessor produceProcessor) {\n+                                           @Mocked HttpServletResponseEx responseEx,\n+                                           @Mocked ProduceProcessor produceProcessor) {\n     new Expectations() {\n       {\n         responseEx.getHeader(HttpHeaders.CONTENT_TYPE);\n@@ -79,7 +80,8 @@ public class TestDefaultHttpClientFilter {\n \n   @Test\n   public void testFindProduceProcessorJsonWithCharset(@Mocked RestOperationMeta restOperation,\n-      @Mocked HttpServletResponseEx responseEx, @Mocked ProduceProcessor produceProcessor) {\n+                                                      @Mocked HttpServletResponseEx responseEx,\n+                                                      @Mocked ProduceProcessor produceProcessor) {\n     new Expectations() {\n       {\n         responseEx.getHeader(HttpHeaders.CONTENT_TYPE);\n@@ -94,9 +96,10 @@ public class TestDefaultHttpClientFilter {\n \n   @Test\n   public void testAfterReceiveResponseNullProduceProcessor(@Mocked Invocation invocation,\n-      @Mocked HttpServletResponseEx responseEx,\n-      @Mocked OperationMeta operationMeta,\n-      @Mocked RestOperationMeta swaggerRestOperation) throws Exception {\n+                                                           @Mocked HttpServletResponseEx responseEx,\n+                                                           @Mocked OperationMeta operationMeta,\n+                                                           @Mocked RestOperationMeta swaggerRestOperation)\n+      throws Exception {\n     new Expectations() {\n       {\n         invocation.getOperationMeta();\n@@ -109,18 +112,19 @@ public class TestDefaultHttpClientFilter {\n     Response response = filter.afterReceiveResponse(invocation, responseEx);\n     InvocationException exception = response.getResult();\n     CommonExceptionData data = (CommonExceptionData) exception.getErrorData();\n-    Assert.assertEquals(\"method null, path null, statusCode 0, reasonPhrase null, response content-type null is not supported\",\n+    Assert.assertEquals(\n+        \"method null, path null, statusCode 0, reasonPhrase null, response content-type null is not supported\",\n         data.getMessage());\n   }\n \n   @Test\n   public void testAfterReceiveResponseNormal(@Mocked Invocation invocation,\n-      @Mocked HttpServletResponseEx responseEx,\n-      @Mocked Buffer bodyBuffer,\n-      @Mocked OperationMeta operationMeta,\n-      @Mocked ResponseMeta responseMeta,\n-      @Mocked RestOperationMeta swaggerRestOperation,\n-      @Mocked ProduceProcessor produceProcessor) throws Exception {\n+                                             @Mocked HttpServletResponseEx responseEx,\n+                                             @Mocked Buffer bodyBuffer,\n+                                             @Mocked OperationMeta operationMeta,\n+                                             @Mocked ResponseMeta responseMeta,\n+                                             @Mocked RestOperationMeta swaggerRestOperation,\n+                                             @Mocked ProduceProcessor produceProcessor) throws Exception {\n     MultiMap responseHeader = new CaseInsensitiveHeaders();\n     responseHeader.add(\"b\", \"bValue\");\n \n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 256).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/89/TestDefaultHttpClientFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/89/TestDefaultHttpClientFilter.java\nindex 6c054f2d160..92973540dc0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/89/TestDefaultHttpClientFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/89/TestDefaultHttpClientFilter.java\n@@ -52,7 +52,7 @@ public class TestDefaultHttpClientFilter {\n   @Test\n   public void testFindProduceProcessorNullContentType(@Mocked RestOperationMeta restOperation,\n       @Mocked HttpServletResponseEx responseEx) {\n-    new Expectations() {\n+  new Expectations() {\n       {\n         responseEx.getHeader(HttpHeaders.CONTENT_TYPE);\n         result = null;\n@@ -65,7 +65,7 @@ public class TestDefaultHttpClientFilter {\n   @Test\n   public void testFindProduceProcessorJson(@Mocked RestOperationMeta restOperation,\n       @Mocked HttpServletResponseEx responseEx, @Mocked ProduceProcessor produceProcessor) {\n-    new Expectations() {\n+  new Expectations() {\n       {\n         responseEx.getHeader(HttpHeaders.CONTENT_TYPE);\n         result = \"json\";\n@@ -80,7 +80,7 @@ public class TestDefaultHttpClientFilter {\n   @Test\n   public void testFindProduceProcessorJsonWithCharset(@Mocked RestOperationMeta restOperation,\n       @Mocked HttpServletResponseEx responseEx, @Mocked ProduceProcessor produceProcessor) {\n-    new Expectations() {\n+  new Expectations() {\n       {\n         responseEx.getHeader(HttpHeaders.CONTENT_TYPE);\n         result = \"json; UTF-8\";\n@@ -94,10 +94,8 @@ public class TestDefaultHttpClientFilter {\n \n   @Test\n   public void testAfterReceiveResponseNullProduceProcessor(@Mocked Invocation invocation,\n-      @Mocked HttpServletResponseEx responseEx,\n-      @Mocked OperationMeta operationMeta,\n-      @Mocked RestOperationMeta swaggerRestOperation) throws Exception {\n-    new Expectations() {\n+      @Mocked HttpServletResponseEx responseEx, @Mocked OperationMeta operationMeta, @Mocked RestOperationMeta swaggerRestOperation) throws Exception {\n+  new Expectations() {\n       {\n         invocation.getOperationMeta();\n         result = operationMeta;\n@@ -115,12 +113,7 @@ public class TestDefaultHttpClientFilter {\n \n   @Test\n   public void testAfterReceiveResponseNormal(@Mocked Invocation invocation,\n-      @Mocked HttpServletResponseEx responseEx,\n-      @Mocked Buffer bodyBuffer,\n-      @Mocked OperationMeta operationMeta,\n-      @Mocked ResponseMeta responseMeta,\n-      @Mocked RestOperationMeta swaggerRestOperation,\n-      @Mocked ProduceProcessor produceProcessor) throws Exception {\n+      @Mocked HttpServletResponseEx responseEx, @Mocked Buffer bodyBuffer, @Mocked OperationMeta operationMeta, @Mocked ResponseMeta responseMeta, @Mocked RestOperationMeta swaggerRestOperation, @Mocked ProduceProcessor produceProcessor) throws Exception {\n     MultiMap responseHeader = new CaseInsensitiveHeaders();\n     responseHeader.add(\"b\", \"bValue\");\n \n@@ -153,4 +146,4 @@ public class TestDefaultHttpClientFilter {\n     Assert.assertEquals(1, response.getHeaders().getHeaderMap().size());\n     Assert.assertEquals(response.getHeaders().getHeader(\"b\"), Arrays.asList(\"bValue\"));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}