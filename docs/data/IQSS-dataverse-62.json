{
    "project_name": "IQSS-dataverse",
    "error_id": "62",
    "information": {
        "errors": [
            {
                "line": "128",
                "column": "5",
                "severity": "error",
                "message": "'{' at column 5 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "    private void registerProviderFactory(AuthenticationProviderFactory aFactory) \n            throws AuthorizationSetupException \n    {\n        if ( providerFactories.containsKey(aFactory.getAlias()) ) {\n            throw new AuthorizationSetupException(\n                    \"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/62/AuthenticationProvidersRegistrationServiceBean.java\nindex 6289865baf0..548c8b07db1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/62/AuthenticationProvidersRegistrationServiceBean.java\n@@ -124,8 +124,7 @@ public class AuthenticationProvidersRegistrationServiceBean {\n     }\n \n     private void registerProviderFactory(AuthenticationProviderFactory aFactory) \n-            throws AuthorizationSetupException \n-    {\n+            throws AuthorizationSetupException {\n         if ( providerFactories.containsKey(aFactory.getAlias()) ) {\n             throw new AuthorizationSetupException(\n                     \"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/62/AuthenticationProvidersRegistrationServiceBean.java\nindex 6289865baf0..1b0cd8f3791 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/62/AuthenticationProvidersRegistrationServiceBean.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse.authorization;\n \n import edu.harvard.iq.dataverse.actionlogging.ActionLogRecord;\n@@ -33,13 +34,13 @@ import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n \n /**\n- *\n  * @author Leonid Andreev\n  */\n+\n /**\n  * The AuthenticationProvidersRegistrationService is responsible for registering and listing\n  * AuthenticationProviders. There's a single instance per application. \n- * \n+ *\n  * Register the providers in the {@link #startup()} method.\n  */\n @Named\n@@ -47,129 +48,133 @@ import javax.persistence.PersistenceContext;\n @Singleton\n public class AuthenticationProvidersRegistrationServiceBean {\n \n-    private static final Logger logger = Logger.getLogger(AuthenticationProvidersRegistrationServiceBean.class.getName());\n-    \n-    @EJB\n-    BuiltinUserServiceBean builtinUserServiceBean;\n+  private static final Logger logger = Logger.getLogger(AuthenticationProvidersRegistrationServiceBean.class.getName());\n \n-    @EJB\n-    PasswordValidatorServiceBean passwordValidatorService;\n-    \n-    @EJB\n-    protected ActionLogServiceBean actionLogSvc;\n-    \n-    @EJB\n-    AuthenticationServiceBean authenticationService;\n-    \n-    /**\n-     * The maps below (the objects themselves) are \"final\", but the\n-     * values will be populated in @PostConstruct (see below) during \n-     * the initialization and in later calls to the service. \n-     * This is a @Singleton, so we are guaranteed that there is only\n-     * one application-wide copy of each of these maps.\n-     */\n-    \n-    /**\n-     * Authentication Provider Factories:\n-     */\n-    final Map<String, AuthenticationProviderFactory> providerFactories = new HashMap<>();\n-\n-    /**\n-     * Where all registered authentication providers live.\n-     */\n-    final Map<String, AuthenticationProvider> authenticationProviders = new HashMap<>();\n-    \n-    /**\n-     * Index of all OAuth2 providers mapped to {@link #authenticationProviders}.\n-     */\n-    final Map<String, AbstractOAuth2AuthenticationProvider> oAuth2authenticationProviders = new HashMap<>();\n-        \n-    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-    private EntityManager em;\n-    \n-    // does this method also need an explicit @Lock(WRITE)? \n-    // - I'm assuming not; since it's guaranteed to only be called once,\n-    // via @PostConstruct in this @Singleton. -- L.A.\n-    @PostConstruct\n-    public void startup() {\n-        \n-        // First, set up the factories\n-        try {\n-            // @todo: Instead of hard-coding the factories here, consider \n-            // using @AutoService - similiarly how we are using with the \n-            // metadata Exporter classes. (may not necessarily be possible, or \n-            // easy; hence \"consider\" -- L.A.)\n-            registerProviderFactory( new BuiltinAuthenticationProviderFactory(builtinUserServiceBean, passwordValidatorService, authenticationService) );\n-            registerProviderFactory( new ShibAuthenticationProviderFactory() );\n-            registerProviderFactory( new OAuth2AuthenticationProviderFactory() );\n-            registerProviderFactory( new OIDCAuthenticationProviderFactory() );\n-        \n-        } catch (AuthorizationSetupException ex) { \n-            logger.log(Level.SEVERE, \"Exception setting up the authentication provider factories: \" + ex.getMessage(), ex);\n-        }\n-        \n-        // Now, load the providers.\n-        em.createNamedQuery(\"AuthenticationProviderRow.findAllEnabled\", AuthenticationProviderRow.class)\n-                .getResultList().forEach((row) -> {\n-                    try {\n-                        registerProvider( loadProvider(row) );\n-                        \n-                    } catch ( AuthenticationProviderFactoryNotFoundException e ) {\n-                        logger.log(Level.SEVERE, \"Cannot find authentication provider factory with alias '\" + e.getFactoryAlias() + \"'\",e);\n-                        \n-                    } catch (AuthorizationSetupException ex) {\n-                        logger.log(Level.SEVERE, \"Exception setting up the authentication provider '\" + row.getId() + \"': \" + ex.getMessage(), ex);\n-                    }\n-        });\n+  @EJB\n+  BuiltinUserServiceBean builtinUserServiceBean;\n+\n+  @EJB\n+  PasswordValidatorServiceBean passwordValidatorService;\n+\n+  @EJB\n+  protected ActionLogServiceBean actionLogSvc;\n+\n+  @EJB\n+  AuthenticationServiceBean authenticationService;\n+\n+  /**\n+   * The maps below (the objects themselves) are \"final\", but the\n+   * values will be populated in @PostConstruct (see below) during\n+   * the initialization and in later calls to the service.\n+   * This is a @Singleton, so we are guaranteed that there is only\n+   * one application-wide copy of each of these maps.\n+   */\n+\n+  /**\n+   * Authentication Provider Factories:\n+   */\n+  final Map<String, AuthenticationProviderFactory> providerFactories = new HashMap<>();\n+\n+  /**\n+   * Where all registered authentication providers live.\n+   */\n+  final Map<String, AuthenticationProvider> authenticationProviders = new HashMap<>();\n+\n+  /**\n+   * Index of all OAuth2 providers mapped to {@link #authenticationProviders}.\n+   */\n+  final Map<String, AbstractOAuth2AuthenticationProvider> oAuth2authenticationProviders = new HashMap<>();\n+\n+  @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+  private EntityManager em;\n+\n+  // does this method also need an explicit @Lock(WRITE)?\n+  // - I'm assuming not; since it's guaranteed to only be called once,\n+  // via @PostConstruct in this @Singleton. -- L.A.\n+  @PostConstruct\n+  public void startup() {\n+\n+    // First, set up the factories\n+    try {\n+      // @todo: Instead of hard-coding the factories here, consider\n+      // using @AutoService - similiarly how we are using with the\n+      // metadata Exporter classes. (may not necessarily be possible, or\n+      // easy; hence \"consider\" -- L.A.)\n+      registerProviderFactory(new BuiltinAuthenticationProviderFactory(builtinUserServiceBean, passwordValidatorService,\n+        authenticationService));\n+      registerProviderFactory(new ShibAuthenticationProviderFactory());\n+      registerProviderFactory(new OAuth2AuthenticationProviderFactory());\n+      registerProviderFactory(new OIDCAuthenticationProviderFactory());\n+\n+    } catch (AuthorizationSetupException ex) {\n+      logger.log(Level.SEVERE, \"Exception setting up the authentication provider factories: \" + ex.getMessage(), ex);\n     }\n \n-    private void registerProviderFactory(AuthenticationProviderFactory aFactory) \n-            throws AuthorizationSetupException \n-    {\n-        if ( providerFactories.containsKey(aFactory.getAlias()) ) {\n-            throw new AuthorizationSetupException(\n-                    \"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");\n-        }\n-        providerFactories.put( aFactory.getAlias(), aFactory);\n-        logger.log( Level.FINE, \"Registered Authentication Provider Factory {0} as {1}\", \n-                new Object[]{aFactory.getInfo(), aFactory.getAlias()});\n+    // Now, load the providers.\n+    em.createNamedQuery(\"AuthenticationProviderRow.findAllEnabled\", AuthenticationProviderRow.class)\n+      .getResultList().forEach((row) -> {\n+      try {\n+        registerProvider(loadProvider(row));\n+\n+      } catch (AuthenticationProviderFactoryNotFoundException e) {\n+        logger\n+          .log(Level.SEVERE, \"Cannot find authentication provider factory with alias '\" + e.getFactoryAlias() + \"'\", e);\n+\n+      } catch (AuthorizationSetupException ex) {\n+        logger.log(Level.SEVERE,\n+          \"Exception setting up the authentication provider '\" + row.getId() + \"': \" + ex.getMessage(), ex);\n+      }\n+    });\n+  }\n+\n+  private void registerProviderFactory(AuthenticationProviderFactory aFactory)\n+    throws AuthorizationSetupException {\n+    if (providerFactories.containsKey(aFactory.getAlias())) {\n+      throw new AuthorizationSetupException(\n+        \"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");\n     }\n-    \n-    /**\n-     * Tries to load and {@link AuthenticationProvider} using the passed {@link AuthenticationProviderRow}.\n-     * @param aRow The row to load the provider from.\n-     * @return The provider, if successful\n-     * @throws AuthenticationProviderFactoryNotFoundException If the row specifies a non-existent factory\n-     * @throws AuthorizationSetupException If the factory failed to instantiate a provider from the row.\n-     */\n-    @Lock(WRITE)\n-    public AuthenticationProvider loadProvider( AuthenticationProviderRow aRow )\n-                throws AuthenticationProviderFactoryNotFoundException, AuthorizationSetupException {\n-        AuthenticationProviderFactory fact = providerFactories.get((aRow.getFactoryAlias()));\n-        \n-        if ( fact == null ) throw new AuthenticationProviderFactoryNotFoundException(aRow.getFactoryAlias());\n-        \n-        return fact.buildProvider(aRow);\n+    providerFactories.put(aFactory.getAlias(), aFactory);\n+    logger.log(Level.FINE, \"Registered Authentication Provider Factory {0} as {1}\",\n+      new Object[] {aFactory.getInfo(), aFactory.getAlias()});\n+  }\n+\n+  /**\n+   * Tries to load and {@link AuthenticationProvider} using the passed {@link AuthenticationProviderRow}.\n+   * @param aRow The row to load the provider from.\n+   * @return The provider, if successful\n+   * @throws AuthenticationProviderFactoryNotFoundException If the row specifies a non-existent factory\n+   * @throws AuthorizationSetupException If the factory failed to instantiate a provider from the row.\n+   */\n+  @Lock(WRITE)\n+  public AuthenticationProvider loadProvider(AuthenticationProviderRow aRow)\n+    throws AuthenticationProviderFactoryNotFoundException, AuthorizationSetupException {\n+    AuthenticationProviderFactory fact = providerFactories.get((aRow.getFactoryAlias()));\n+\n+    if (fact == null) {\n+      throw new AuthenticationProviderFactoryNotFoundException(aRow.getFactoryAlias());\n     }\n-    \n-    @Lock(WRITE)\n-    public void registerProvider(AuthenticationProvider aProvider) throws AuthorizationSetupException {\n-        if ( authenticationProviders.containsKey(aProvider.getId()) ) {\n-            throw new AuthorizationSetupException(\n-                    \"Duplicate id \" + aProvider.getId() + \" for authentication provider.\");\n-        }\n-        authenticationProviders.put( aProvider.getId(), aProvider);\n-        actionLogSvc.log( new ActionLogRecord(ActionLogRecord.ActionType.Auth, \"registerProvider\")\n-            .setInfo(aProvider.getId() + \":\" + aProvider.getInfo().getTitle()));\n-        if ( aProvider instanceof AbstractOAuth2AuthenticationProvider ) {\n-            oAuth2authenticationProviders.put(aProvider.getId(), (AbstractOAuth2AuthenticationProvider) aProvider);\n-        }\n+\n+    return fact.buildProvider(aRow);\n+  }\n+\n+  @Lock(WRITE)\n+  public void registerProvider(AuthenticationProvider aProvider) throws AuthorizationSetupException {\n+    if (authenticationProviders.containsKey(aProvider.getId())) {\n+      throw new AuthorizationSetupException(\n+        \"Duplicate id \" + aProvider.getId() + \" for authentication provider.\");\n     }\n-    \n-    @Lock(READ)\n-    public Map<String, AbstractOAuth2AuthenticationProvider> getOAuth2AuthProvidersMap() {\n-        return oAuth2authenticationProviders;\n+    authenticationProviders.put(aProvider.getId(), aProvider);\n+    actionLogSvc.log(new ActionLogRecord(ActionLogRecord.ActionType.Auth, \"registerProvider\")\n+      .setInfo(aProvider.getId() + \":\" + aProvider.getInfo().getTitle()));\n+    if (aProvider instanceof AbstractOAuth2AuthenticationProvider) {\n+      oAuth2authenticationProviders.put(aProvider.getId(), (AbstractOAuth2AuthenticationProvider) aProvider);\n     }\n+  }\n+\n+  @Lock(READ)\n+  public Map<String, AbstractOAuth2AuthenticationProvider> getOAuth2AuthProvidersMap() {\n+    return oAuth2authenticationProviders;\n+  }\n     \n     /*\n         the commented-out methods below were moved into this service in \n@@ -185,22 +190,22 @@ public class AuthenticationProvidersRegistrationServiceBean {\n     public Set<AbstractOAuth2AuthenticationProvider> getOAuth2Providers() {\n         return new HashSet<>(oAuth2authenticationProviders.values());\n     }*/\n-    \n-    @Lock(READ)\n-    public Map<String, AuthenticationProvider> getAuthenticationProvidersMap() {\n-        return authenticationProviders;\n-    }\n-    \n-    @Lock(WRITE)\n-    public void deregisterProvider( String id ) {\n-        oAuth2authenticationProviders.remove( id );\n-        if ( authenticationProviders.remove(id) != null ) {\n-            actionLogSvc.log( new ActionLogRecord(ActionLogRecord.ActionType.Auth, \"deregisterProvider\")\n-                .setInfo(id));\n-            logger.log(Level.INFO,\"Deregistered provider {0}\", new Object[]{id});\n-            logger.log(Level.INFO,\"Providers left {0}\", new Object[]{authenticationProviders.values()});\n-        }\n+\n+  @Lock(READ)\n+  public Map<String, AuthenticationProvider> getAuthenticationProvidersMap() {\n+    return authenticationProviders;\n+  }\n+\n+  @Lock(WRITE)\n+  public void deregisterProvider(String id) {\n+    oAuth2authenticationProviders.remove(id);\n+    if (authenticationProviders.remove(id) != null) {\n+      actionLogSvc.log(new ActionLogRecord(ActionLogRecord.ActionType.Auth, \"deregisterProvider\")\n+        .setInfo(id));\n+      logger.log(Level.INFO, \"Deregistered provider {0}\", new Object[] {id});\n+      logger.log(Level.INFO, \"Providers left {0}\", new Object[] {authenticationProviders.values()});\n     }\n+  }\n     \n     /*\n     @Lock(READ)\n@@ -232,11 +237,11 @@ public class AuthenticationProvidersRegistrationServiceBean {\n         return retVal;\n     }\n     */\n-    \n-    @Lock(READ)\n-    public Map<String, AuthenticationProviderFactory> getProviderFactoriesMap() {\n-        return providerFactories; \n-    }\n+\n+  @Lock(READ)\n+  public Map<String, AuthenticationProviderFactory> getProviderFactoriesMap() {\n+    return providerFactories;\n+  }\n     \n     /*\n     @Lock(READ)\n",
            "diff_size": 163
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/62/AuthenticationProvidersRegistrationServiceBean.java\nindex 6289865baf0..bb85f6a28b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/62/AuthenticationProvidersRegistrationServiceBean.java\n@@ -72,7 +72,7 @@ public class AuthenticationProvidersRegistrationServiceBean {\n     /**\n      * Authentication Provider Factories:\n      */\n-    final Map<String, AuthenticationProviderFactory> providerFactories = new HashMap<>();\n+final Map<String, AuthenticationProviderFactory> providerFactories = new HashMap<>();\n \n     /**\n      * Where all registered authentication providers live.\n@@ -104,8 +104,8 @@ public class AuthenticationProvidersRegistrationServiceBean {\n             registerProviderFactory( new OAuth2AuthenticationProviderFactory() );\n             registerProviderFactory( new OIDCAuthenticationProviderFactory() );\n         \n-        } catch (AuthorizationSetupException ex) { \n-            logger.log(Level.SEVERE, \"Exception setting up the authentication provider factories: \" + ex.getMessage(), ex);\n+        } catch (AuthorizationSetupException ex) {\n+    logger.log(Level.SEVERE, \"Exception setting up the authentication provider factories: \" + ex.getMessage(), ex);\n         }\n         \n         // Now, load the providers.\n@@ -115,20 +115,17 @@ public class AuthenticationProvidersRegistrationServiceBean {\n                         registerProvider( loadProvider(row) );\n                         \n                     } catch ( AuthenticationProviderFactoryNotFoundException e ) {\n-                        logger.log(Level.SEVERE, \"Cannot find authentication provider factory with alias '\" + e.getFactoryAlias() + \"'\",e);\n+    logger.log(Level.SEVERE, \"Cannot find authentication provider factory with alias '\" + e.getFactoryAlias() + \"'\",e);\n                         \n                     } catch (AuthorizationSetupException ex) {\n                         logger.log(Level.SEVERE, \"Exception setting up the authentication provider '\" + row.getId() + \"': \" + ex.getMessage(), ex);\n                     }\n-        });\n+    });\n     }\n \n-    private void registerProviderFactory(AuthenticationProviderFactory aFactory) \n-            throws AuthorizationSetupException \n-    {\n+    private void registerProviderFactory(AuthenticationProviderFactory aFactory) throws AuthorizationSetupException {\n         if ( providerFactories.containsKey(aFactory.getAlias()) ) {\n-            throw new AuthorizationSetupException(\n-                    \"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");\n+            throw new AuthorizationSetupException(\"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");\n         }\n         providerFactories.put( aFactory.getAlias(), aFactory);\n         logger.log( Level.FINE, \"Registered Authentication Provider Factory {0} as {1}\", \n@@ -143,8 +140,7 @@ public class AuthenticationProvidersRegistrationServiceBean {\n      * @throws AuthorizationSetupException If the factory failed to instantiate a provider from the row.\n      */\n     @Lock(WRITE)\n-    public AuthenticationProvider loadProvider( AuthenticationProviderRow aRow )\n-                throws AuthenticationProviderFactoryNotFoundException, AuthorizationSetupException {\n+    public AuthenticationProvider loadProvider( AuthenticationProviderRow aRow ) throws AuthenticationProviderFactoryNotFoundException, AuthorizationSetupException {\n         AuthenticationProviderFactory fact = providerFactories.get((aRow.getFactoryAlias()));\n         \n         if ( fact == null ) throw new AuthenticationProviderFactoryNotFoundException(aRow.getFactoryAlias());\n@@ -155,8 +151,7 @@ public class AuthenticationProvidersRegistrationServiceBean {\n     @Lock(WRITE)\n     public void registerProvider(AuthenticationProvider aProvider) throws AuthorizationSetupException {\n         if ( authenticationProviders.containsKey(aProvider.getId()) ) {\n-            throw new AuthorizationSetupException(\n-                    \"Duplicate id \" + aProvider.getId() + \" for authentication provider.\");\n+            throw new AuthorizationSetupException(\"Duplicate id \" + aProvider.getId() + \" for authentication provider.\");\n         }\n         authenticationProviders.put( aProvider.getId(), aProvider);\n         actionLogSvc.log( new ActionLogRecord(ActionLogRecord.ActionType.Auth, \"registerProvider\")\n@@ -265,5 +260,4 @@ public class AuthenticationProvidersRegistrationServiceBean {\n         return oAuth2authenticationProviders.values().stream().anyMatch( s -> s.getId().toLowerCase().contains(\"orcid\") );\n     }\n     */\n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/62/AuthenticationProvidersRegistrationServiceBean.java\nindex 6289865baf0..db955db20e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/62/AuthenticationProvidersRegistrationServiceBean.java\n@@ -42,22 +42,24 @@ import javax.persistence.PersistenceContext;\n  * \n  * Register the providers in the {@link #startup()} method.\n  */\n+\n+\n @Named\n @Lock(READ)\n @Singleton\n public class AuthenticationProvidersRegistrationServiceBean {\n \n     private static final Logger logger = Logger.getLogger(AuthenticationProvidersRegistrationServiceBean.class.getName());\n-    \n+\n     @EJB\n     BuiltinUserServiceBean builtinUserServiceBean;\n \n     @EJB\n     PasswordValidatorServiceBean passwordValidatorService;\n-    \n+\n     @EJB\n     protected ActionLogServiceBean actionLogSvc;\n-    \n+\n     @EJB\n     AuthenticationServiceBean authenticationService;\n     \n@@ -83,13 +85,14 @@ public class AuthenticationProvidersRegistrationServiceBean {\n      * Index of all OAuth2 providers mapped to {@link #authenticationProviders}.\n      */\n     final Map<String, AbstractOAuth2AuthenticationProvider> oAuth2authenticationProviders = new HashMap<>();\n-        \n+\n     @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n     private EntityManager em;\n     \n     // does this method also need an explicit @Lock(WRITE)? \n     // - I'm assuming not; since it's guaranteed to only be called once,\n     // via @PostConstruct in this @Singleton. -- L.A.\n+\n     @PostConstruct\n     public void startup() {\n         \n@@ -99,40 +102,40 @@ public class AuthenticationProvidersRegistrationServiceBean {\n             // using @AutoService - similiarly how we are using with the \n             // metadata Exporter classes. (may not necessarily be possible, or \n             // easy; hence \"consider\" -- L.A.)\n-            registerProviderFactory( new BuiltinAuthenticationProviderFactory(builtinUserServiceBean, passwordValidatorService, authenticationService) );\n-            registerProviderFactory( new ShibAuthenticationProviderFactory() );\n-            registerProviderFactory( new OAuth2AuthenticationProviderFactory() );\n-            registerProviderFactory( new OIDCAuthenticationProviderFactory() );\n-        \n-        } catch (AuthorizationSetupException ex) { \n+            registerProviderFactory(new BuiltinAuthenticationProviderFactory(builtinUserServiceBean, passwordValidatorService, authenticationService));\n+            registerProviderFactory(new ShibAuthenticationProviderFactory());\n+            registerProviderFactory(new OAuth2AuthenticationProviderFactory());\n+            registerProviderFactory(new OIDCAuthenticationProviderFactory());\n+        } catch (AuthorizationSetupException ex) {\n             logger.log(Level.SEVERE, \"Exception setting up the authentication provider factories: \" + ex.getMessage(), ex);\n         }\n         \n         // Now, load the providers.\n-        em.createNamedQuery(\"AuthenticationProviderRow.findAllEnabled\", AuthenticationProviderRow.class)\n-                .getResultList().forEach((row) -> {\n-                    try {\n-                        registerProvider( loadProvider(row) );\n-                        \n-                    } catch ( AuthenticationProviderFactoryNotFoundException e ) {\n-                        logger.log(Level.SEVERE, \"Cannot find authentication provider factory with alias '\" + e.getFactoryAlias() + \"'\",e);\n-                        \n-                    } catch (AuthorizationSetupException ex) {\n-                        logger.log(Level.SEVERE, \"Exception setting up the authentication provider '\" + row.getId() + \"': \" + ex.getMessage(), ex);\n-                    }\n+        em.createNamedQuery(\"AuthenticationProviderRow.findAllEnabled\", AuthenticationProviderRow.class).getResultList().forEach((row) -> {\n+            try {\n+                registerProvider(loadProvider(row));\n+            } catch (AuthenticationProviderFactoryNotFoundException e) {\n+                logger.log(Level.SEVERE,\n+                           \"Cannot find authentication provider factory with alias '\"\n+                               + e.getFactoryAlias() + \"'\",\n+                           e);\n+            } catch (AuthorizationSetupException ex) {\n+                logger.log(Level.SEVERE,\n+                           \"Exception setting up the authentication provider '\"\n+                        + row.getId() + \"': \" + ex.getMessage(),\n+                           ex);\n+            }\n         });\n     }\n \n-    private void registerProviderFactory(AuthenticationProviderFactory aFactory) \n-            throws AuthorizationSetupException \n-    {\n-        if ( providerFactories.containsKey(aFactory.getAlias()) ) {\n-            throw new AuthorizationSetupException(\n-                    \"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");\n+    private void registerProviderFactory(AuthenticationProviderFactory aFactory) throws AuthorizationSetupException {\n+        if (providerFactories.containsKey(aFactory.getAlias())) {\n+            throw new AuthorizationSetupException(\"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");\n         }\n-        providerFactories.put( aFactory.getAlias(), aFactory);\n-        logger.log( Level.FINE, \"Registered Authentication Provider Factory {0} as {1}\", \n-                new Object[]{aFactory.getInfo(), aFactory.getAlias()});\n+        providerFactories.put(aFactory.getAlias(), aFactory);\n+        logger.log(Level.FINE,\n+                   \"Registered Authentication Provider Factory {0} as {1}\",\n+               new Object[]{aFactory.getInfo(), aFactory.getAlias()});\n     }\n     \n     /**\n@@ -142,30 +145,27 @@ public class AuthenticationProvidersRegistrationServiceBean {\n      * @throws AuthenticationProviderFactoryNotFoundException If the row specifies a non-existent factory\n      * @throws AuthorizationSetupException If the factory failed to instantiate a provider from the row.\n      */\n+\n     @Lock(WRITE)\n-    public AuthenticationProvider loadProvider( AuthenticationProviderRow aRow )\n-                throws AuthenticationProviderFactoryNotFoundException, AuthorizationSetupException {\n+    public AuthenticationProvider loadProvider(AuthenticationProviderRow aRow) throws AuthenticationProviderFactoryNotFoundException,\n+                                                                               AuthorizationSetupException {\n         AuthenticationProviderFactory fact = providerFactories.get((aRow.getFactoryAlias()));\n-        \n-        if ( fact == null ) throw new AuthenticationProviderFactoryNotFoundException(aRow.getFactoryAlias());\n-        \n+        if (fact == null) throw new AuthenticationProviderFactoryNotFoundException(aRow.getFactoryAlias());\n         return fact.buildProvider(aRow);\n     }\n-    \n+\n     @Lock(WRITE)\n     public void registerProvider(AuthenticationProvider aProvider) throws AuthorizationSetupException {\n-        if ( authenticationProviders.containsKey(aProvider.getId()) ) {\n-            throw new AuthorizationSetupException(\n-                    \"Duplicate id \" + aProvider.getId() + \" for authentication provider.\");\n+        if (authenticationProviders.containsKey(aProvider.getId())) {\n+            throw new AuthorizationSetupException(\"Duplicate id \" + aProvider.getId() + \" for authentication provider.\");\n         }\n-        authenticationProviders.put( aProvider.getId(), aProvider);\n-        actionLogSvc.log( new ActionLogRecord(ActionLogRecord.ActionType.Auth, \"registerProvider\")\n-            .setInfo(aProvider.getId() + \":\" + aProvider.getInfo().getTitle()));\n-        if ( aProvider instanceof AbstractOAuth2AuthenticationProvider ) {\n+        authenticationProviders.put(aProvider.getId(), aProvider);\n+        actionLogSvc.log(new ActionLogRecord(ActionLogRecord.ActionType.Auth, \"registerProvider\").setInfo(aProvider.getId() + \":\" + aProvider.getInfo().getTitle()));\n+        if (aProvider instanceof AbstractOAuth2AuthenticationProvider) {\n             oAuth2authenticationProviders.put(aProvider.getId(), (AbstractOAuth2AuthenticationProvider) aProvider);\n         }\n     }\n-    \n+\n     @Lock(READ)\n     public Map<String, AbstractOAuth2AuthenticationProvider> getOAuth2AuthProvidersMap() {\n         return oAuth2authenticationProviders;\n@@ -185,20 +185,19 @@ public class AuthenticationProvidersRegistrationServiceBean {\n     public Set<AbstractOAuth2AuthenticationProvider> getOAuth2Providers() {\n         return new HashSet<>(oAuth2authenticationProviders.values());\n     }*/\n-    \n+\n     @Lock(READ)\n     public Map<String, AuthenticationProvider> getAuthenticationProvidersMap() {\n         return authenticationProviders;\n     }\n-    \n+\n     @Lock(WRITE)\n-    public void deregisterProvider( String id ) {\n-        oAuth2authenticationProviders.remove( id );\n-        if ( authenticationProviders.remove(id) != null ) {\n-            actionLogSvc.log( new ActionLogRecord(ActionLogRecord.ActionType.Auth, \"deregisterProvider\")\n-                .setInfo(id));\n-            logger.log(Level.INFO,\"Deregistered provider {0}\", new Object[]{id});\n-            logger.log(Level.INFO,\"Providers left {0}\", new Object[]{authenticationProviders.values()});\n+    public void deregisterProvider(String id) {\n+        oAuth2authenticationProviders.remove(id);\n+        if (authenticationProviders.remove(id) != null) {\n+            actionLogSvc.log(new ActionLogRecord(ActionLogRecord.ActionType.Auth, \"deregisterProvider\").setInfo(id));\n+            logger.log(Level.INFO, \"Deregistered provider {0}\", new Object[] {id});\n+            logger.log(Level.INFO, \"Providers left {0}\", new Object[] {authenticationProviders.values()});\n         }\n     }\n     \n@@ -232,10 +231,10 @@ public class AuthenticationProvidersRegistrationServiceBean {\n         return retVal;\n     }\n     */\n-    \n+\n     @Lock(READ)\n     public Map<String, AuthenticationProviderFactory> getProviderFactoriesMap() {\n-        return providerFactories; \n+        return providerFactories;\n     }\n     \n     /*\n@@ -266,4 +265,4 @@ public class AuthenticationProvidersRegistrationServiceBean {\n     }\n     */\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/62/AuthenticationProvidersRegistrationServiceBean.java\nindex 6289865baf0..548c8b07db1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/62/AuthenticationProvidersRegistrationServiceBean.java\n@@ -124,8 +124,7 @@ public class AuthenticationProvidersRegistrationServiceBean {\n     }\n \n     private void registerProviderFactory(AuthenticationProviderFactory aFactory) \n-            throws AuthorizationSetupException \n-    {\n+            throws AuthorizationSetupException {\n         if ( providerFactories.containsKey(aFactory.getAlias()) ) {\n             throw new AuthorizationSetupException(\n                     \"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/62/AuthenticationProvidersRegistrationServiceBean.java\nindex 6289865baf0..e94ebea6166 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/62/AuthenticationProvidersRegistrationServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/62/AuthenticationProvidersRegistrationServiceBean.java\n@@ -124,9 +124,8 @@ public class AuthenticationProvidersRegistrationServiceBean {\n     }\n \n     private void registerProviderFactory(AuthenticationProviderFactory aFactory) \n-            throws AuthorizationSetupException \n-    {\n-        if ( providerFactories.containsKey(aFactory.getAlias()) ) {\n+            throws AuthorizationSetupException{\n+                if ( providerFactories.containsKey(aFactory.getAlias()) ) {\n             throw new AuthorizationSetupException(\n                     \"Duplicate alias \" + aFactory.getAlias() + \" for authentication provider factory.\");\n         }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}