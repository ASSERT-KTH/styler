{
    "project_name": "Angel-ML-angel",
    "error_id": "759",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/759/ServerPartitionStorageFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/759/ServerPartitionStorageFactory.java\nindex a15ae2a84e6..803f1a608fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/759/ServerPartitionStorageFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/759/ServerPartitionStorageFactory.java\n@@ -43,8 +43,8 @@ public class ServerPartitionStorageFactory {\n    * Get storage for row based partition\n    *\n    * @param storageClass storage class\n-   * @param partKey partition key\n-   * @param rowType row type\n+   * @param partKey      partition key\n+   * @param rowType      row type\n    * @return storage for row based partition\n    */\n   public static ServerRowsStorage getRowBasedStorage(\n@@ -70,12 +70,12 @@ public class ServerPartitionStorageFactory {\n    * Get storage for CSR partition\n    *\n    * @param storageClass storage class\n-   * @param partKey partition key\n-   * @param rowType row type\n+   * @param partKey      partition key\n+   * @param rowType      row type\n    * @return storage for CSR partition\n    */\n   public static CSRStorage getCSRStorage(Class<? extends IServerPartitionStorage> storageClass,\n-      PartitionKey partKey, RowType rowType) {\n+                                         PartitionKey partKey, RowType rowType) {\n     // If storage is set, just get a instance\n     if (storageClass != null) {\n       try {\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/759/ServerPartitionStorageFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/759/ServerPartitionStorageFactory.java\nindex a15ae2a84e6..fdf5dabf257 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/759/ServerPartitionStorageFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/759/ServerPartitionStorageFactory.java\n@@ -47,16 +47,14 @@ public class ServerPartitionStorageFactory {\n    * @param rowType row type\n    * @return storage for row based partition\n    */\n-  public static ServerRowsStorage getRowBasedStorage(\n-      Class<? extends IServerPartitionStorage> storageClass,\n+  public static ServerRowsStorage getRowBasedStorage(Class<? extends IServerPartitionStorage> storageClass,\n       PartitionKey partKey, RowType rowType) {\n     // If storage is set, just get a instance\n     if (storageClass != null) {\n       try {\n-        return (ServerRowsStorage) storageClass\n-            .getConstructor(int.class, int.class)\n+        return (ServerRowsStorage) storageClass.getConstructor(int.class, int.class)\n             .newInstance(partKey.getStartRow(), partKey.getEndRow() - partKey.getStartRow());\n-      } catch (Throwable e) {\n+  } catch (Throwable e) {\n         throw new RuntimeException(\"get storage failed: \", e);\n       }\n     }\n@@ -79,10 +77,9 @@ public class ServerPartitionStorageFactory {\n     // If storage is set, just get a instance\n     if (storageClass != null) {\n       try {\n-        return (CSRStorage) storageClass\n-            .getConstructor(int.class)\n+        return (CSRStorage) storageClass.getConstructor(int.class)\n             .newInstance(partKey.getStartRow());\n-      } catch (Throwable e) {\n+  } catch (Throwable e) {\n         throw new RuntimeException(\"get storage failed: \", e);\n       }\n     }\n@@ -91,8 +88,7 @@ public class ServerPartitionStorageFactory {\n     if (rowType.isInt()) {\n       return new IntCSRStorage(partKey.getStartRow());\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unsupport row type \" + rowType + \" for CSR format now\");\n+      throw new UnsupportedOperationException(\"Unsupport row type \" + rowType + \" for CSR format now\");\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/759/ServerPartitionStorageFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/759/ServerPartitionStorageFactory.java\nindex a15ae2a84e6..060e8133000 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/759/ServerPartitionStorageFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/759/ServerPartitionStorageFactory.java\n@@ -23,6 +23,7 @@ import com.tencent.angel.ml.math2.utils.RowType;\n /**\n  * Server partition storage factory\n  */\n+\n public class ServerPartitionStorageFactory {\n \n   /**\n@@ -31,6 +32,7 @@ public class ServerPartitionStorageFactory {\n    * @param storageClassName storage class name\n    * @return partition storage\n    */\n+\n   public static IServerPartitionStorage getStorage(String storageClassName) {\n     try {\n       return (IServerPartitionStorage) Class.forName(storageClassName).newInstance();\n@@ -47,23 +49,20 @@ public class ServerPartitionStorageFactory {\n    * @param rowType row type\n    * @return storage for row based partition\n    */\n+\n   public static ServerRowsStorage getRowBasedStorage(\n-      Class<? extends IServerPartitionStorage> storageClass,\n-      PartitionKey partKey, RowType rowType) {\n+    Class<? extends IServerPartitionStorage> storageClass, PartitionKey partKey, RowType rowType) {\n     // If storage is set, just get a instance\n     if (storageClass != null) {\n       try {\n-        return (ServerRowsStorage) storageClass\n-            .getConstructor(int.class, int.class)\n-            .newInstance(partKey.getStartRow(), partKey.getEndRow() - partKey.getStartRow());\n+        return (ServerRowsStorage) storageClass.getConstructor(int.class, int.class).newInstance(partKey.getStartRow(), partKey.getEndRow() - partKey.getStartRow());\n       } catch (Throwable e) {\n         throw new RuntimeException(\"get storage failed: \", e);\n       }\n     }\n \n     // If storage is not set, use default\n-    return new DenseServerRowsStorage(partKey.getStartRow(),\n-        partKey.getEndRow() - partKey.getStartRow());\n+    return new DenseServerRowsStorage(partKey.getStartRow(), partKey.getEndRow() - partKey.getStartRow());\n   }\n \n   /**\n@@ -74,25 +73,25 @@ public class ServerPartitionStorageFactory {\n    * @param rowType row type\n    * @return storage for CSR partition\n    */\n-  public static CSRStorage getCSRStorage(Class<? extends IServerPartitionStorage> storageClass,\n-      PartitionKey partKey, RowType rowType) {\n+\n+  public static CSRStorage getCSRStorage(\n+    Class<? extends IServerPartitionStorage> storageClass, PartitionKey partKey, RowType rowType) {\n     // If storage is set, just get a instance\n     if (storageClass != null) {\n       try {\n-        return (CSRStorage) storageClass\n-            .getConstructor(int.class)\n-            .newInstance(partKey.getStartRow());\n+        return (CSRStorage) storageClass.getConstructor(int.class).newInstance(partKey.getStartRow());\n       } catch (Throwable e) {\n         throw new RuntimeException(\"get storage failed: \", e);\n       }\n     }\n \n     // If storage is not set, use default\n+\n     if (rowType.isInt()) {\n       return new IntCSRStorage(partKey.getStartRow());\n     } else {\n-      throw new UnsupportedOperationException(\n-          \"Unsupport row type \" + rowType + \" for CSR format now\");\n+      throw new UnsupportedOperationException(\"Unsupport row type \" + rowType + \" for CSR format now\");\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}