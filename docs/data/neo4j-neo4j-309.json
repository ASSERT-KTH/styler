{
    "project_name": "neo4j-neo4j",
    "error_id": "309",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/309/RecordStresser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/309/RecordStresser.java\nindex ba7b1cb93c2..e683b9fb6c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/309/RecordStresser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/309/RecordStresser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.io.pagecache.stress;\n \n import java.io.IOException;\n@@ -47,13 +48,13 @@ public class RecordStresser implements Callable<Void>\n     private final PageCacheTracer cacheTracer;\n     private long countSum;\n \n-    public RecordStresser( PagedFile pagedFile,\n-                           Condition condition,\n-                           int maxRecords,\n-                           RecordFormat format,\n-                           int threadId,\n-                           TinyLockManager locks,\n-                           PageCacheTracer cacheTracer )\n+    public RecordStresser(PagedFile pagedFile,\n+                          Condition condition,\n+                          int maxRecords,\n+                          RecordFormat format,\n+                          int threadId,\n+                          TinyLockManager locks,\n+                          PageCacheTracer cacheTracer)\n     {\n         this.pagedFile = pagedFile;\n         this.condition = condition;\n@@ -70,29 +71,28 @@ public class RecordStresser implements Callable<Void>\n         Random random = new Random();\n         int recordsPerPage = format.getRecordsPerPage();\n         int recordSize = format.getRecordSize();\n-        try ( PageCursorTracer cursorTracer = cacheTracer.createPageCursorTracer( RECORD_STRESSER );\n-              PageCursor cursor = pagedFile.io( 0, PF_SHARED_WRITE_LOCK, cursorTracer ) )\n+        try (PageCursorTracer cursorTracer = cacheTracer.createPageCursorTracer(RECORD_STRESSER);\n+             PageCursor cursor = pagedFile.io(0, PF_SHARED_WRITE_LOCK, cursorTracer))\n         {\n-            while ( !condition.fulfilled() )\n+            while (!condition.fulfilled())\n             {\n-                int recordId = random.nextInt( maxRecords );\n+                int recordId = random.nextInt(maxRecords);\n                 int pageId = recordId / recordsPerPage;\n                 int recordOffset = (recordId % recordsPerPage) * recordSize;\n \n-                locks.lock( recordId );\n+                locks.lock(recordId);\n                 try\n                 {\n-                    assertTrue( cursor.next( pageId ), \"I must be able to access pages\" );\n-                    cursor.setOffset( recordOffset );\n-                    long newValue = format.incrementCounter( cursor, threadId );\n+                    assertTrue(cursor.next(pageId), \"I must be able to access pages\");\n+                    cursor.setOffset(recordOffset);\n+                    long newValue = format.incrementCounter(cursor, threadId);\n                     countSum++;\n-                    assertFalse( cursor.shouldRetry(), \"Write lock, so never a need to retry\" );\n-                    assertThat( newValue ).describedAs( \"Record-local count must be less than or equal to thread-local count sum\" )\n-                            .isLessThanOrEqualTo( countSum );\n-                }\n-                finally\n+                    assertFalse(cursor.shouldRetry(), \"Write lock, so never a need to retry\");\n+                    assertThat(newValue).describedAs(\"Record-local count must be less than or equal to thread-local count sum\")\n+                      .isLessThanOrEqualTo(countSum);\n+                } finally\n                 {\n-                    locks.unlock( recordId );\n+                    locks.unlock(recordId);\n                 }\n             }\n         }\n@@ -103,14 +103,14 @@ public class RecordStresser implements Callable<Void>\n     public void verifyCounts() throws IOException\n     {\n         long actualSum = 0;\n-        try ( PageCursorTracer cursorTracer = cacheTracer.createPageCursorTracer( RECORD_STRESSER );\n-              PageCursor cursor = pagedFile.io( 0, PF_SHARED_READ_LOCK, cursorTracer ) )\n+        try (PageCursorTracer cursorTracer = cacheTracer.createPageCursorTracer(RECORD_STRESSER);\n+             PageCursor cursor = pagedFile.io(0, PF_SHARED_READ_LOCK, cursorTracer))\n         {\n-            while ( cursor.next() )\n+            while (cursor.next())\n             {\n-                actualSum += format.sumCountsForThread( cursor, threadId );\n+                actualSum += format.sumCountsForThread(cursor, threadId);\n             }\n         }\n-        assertThat( actualSum ).describedAs( \"Thread specific sum across all records\" ).isEqualTo( countSum );\n+        assertThat(actualSum).describedAs(\"Thread specific sum across all records\").isEqualTo(countSum);\n     }\n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}