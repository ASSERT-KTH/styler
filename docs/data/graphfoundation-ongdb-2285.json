{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2285",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "171",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "175",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2285/NativeAllEntriesLabelScanReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2285/NativeAllEntriesLabelScanReader.java\nindex 5b0c626c8f7..b89b856fbca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2285/NativeAllEntriesLabelScanReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2285/NativeAllEntriesLabelScanReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.labelscan;\n \n import java.io.IOException;\n@@ -49,136 +50,132 @@ import static org.neo4j.kernel.impl.index.labelscan.LabelScanValue.RANGE_SIZE;\n  */\n class NativeAllEntriesLabelScanReader implements AllEntriesLabelScanReader\n {\n-    private final IntFunction<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> seekProvider;\n-    private final List<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> cursors = new ArrayList<>();\n-    private final int highestLabelId;\n-\n-    NativeAllEntriesLabelScanReader( IntFunction<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> seekProvider,\n-            int highestLabelId )\n+  private final IntFunction<RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException>> seekProvider;\n+  private final List<RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException>> cursors = new ArrayList<>();\n+  private final int highestLabelId;\n+\n+  NativeAllEntriesLabelScanReader(IntFunction<RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException>> seekProvider,\n+                                  int highestLabelId)\n+  {\n+    this.seekProvider = seekProvider;\n+    this.highestLabelId = highestLabelId;\n+  }\n+\n+  @Override\n+  public long maxCount()\n+  {\n+    return UNKNOWN_MAX_COUNT;\n+  }\n+\n+  @Override\n+  public int rangeSize()\n+  {\n+    return RANGE_SIZE;\n+  }\n+\n+  @Override\n+  public Iterator<NodeLabelRange> iterator()\n+  {\n+    try\n+    {\n+      long lowestRange = Long.MAX_VALUE;\n+      closeCursors();\n+      for (int labelId = 0; labelId <= highestLabelId; labelId++)\n+      {\n+        RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException> cursor = seekProvider.apply(labelId);\n+\n+        // Bootstrap the cursor, which also provides a great opportunity to exclude if empty\n+        if (cursor.next())\n+        {\n+          lowestRange = min(lowestRange, cursor.get().key().idRange);\n+          cursors.add(cursor);\n+        }\n+      }\n+      return new NodeLabelRangeIterator(lowestRange);\n+    } catch (IOException e)\n     {\n-        this.seekProvider = seekProvider;\n-        this.highestLabelId = highestLabelId;\n+      throw new RuntimeException(e);\n     }\n+  }\n \n-    @Override\n-    public long maxCount()\n+  private void closeCursors() throws IOException\n+  {\n+    for (RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException> cursor : cursors)\n     {\n-        return UNKNOWN_MAX_COUNT;\n+      cursor.close();\n     }\n-\n-    @Override\n-    public int rangeSize()\n+    cursors.clear();\n+  }\n+\n+  @Override\n+  public void close() throws Exception\n+  {\n+    closeCursors();\n+  }\n+\n+  /**\n+   * The main iterator over {@link NodeLabelRange ranges}, aggregating all the cursors as it goes.\n+   */\n+  private class NodeLabelRangeIterator extends PrefetchingIterator<NodeLabelRange>\n+  {\n+    private long currentRange;\n+\n+    // nodeId (relative to lowestRange) --> labelId[]\n+    @SuppressWarnings(\"unchecked\")\n+    private final PrimitiveLongList[] labelsForEachNode = new PrimitiveLongList[RANGE_SIZE];\n+\n+    NodeLabelRangeIterator(long lowestRange)\n     {\n-        return RANGE_SIZE;\n+      this.currentRange = lowestRange;\n     }\n \n     @Override\n-    public Iterator<NodeLabelRange> iterator()\n+    protected NodeLabelRange fetchNextOrNull()\n     {\n-        try\n+      if (currentRange == Long.MAX_VALUE)\n+      {\n+        return null;\n+      }\n+\n+      fill(labelsForEachNode, null);\n+      long nextLowestRange = Long.MAX_VALUE;\n+      try\n+      {\n+        // One \"rangeSize\" range at a time\n+        for (RawCursor<Hit<LabelScanKey, LabelScanValue>, IOException> cursor : cursors)\n         {\n-            long lowestRange = Long.MAX_VALUE;\n-            closeCursors();\n-            for ( int labelId = 0; labelId <= highestLabelId; labelId++ )\n+          long idRange = cursor.get().key().idRange;\n+          if (idRange < currentRange)\n+          {\n+            // This should only happen if the cursor has been exhausted and the iterator have moved on\n+            // from the range it returned as its last hit.\n+            assert !cursor.next();\n+          } else if (idRange == currentRange)\n+          {\n+            long bits = cursor.get().value().bits;\n+            long labelId = cursor.get().key().labelId;\n+            readBitmap(bits, labelId, labelsForEachNode);\n+\n+            // Advance cursor and look ahead to the next range\n+            if (cursor.next())\n             {\n-                RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor = seekProvider.apply( labelId );\n-\n-                // Bootstrap the cursor, which also provides a great opportunity to exclude if empty\n-                if ( cursor.next() )\n-                {\n-                    lowestRange = min( lowestRange, cursor.get().key().idRange );\n-                    cursors.add( cursor );\n-                }\n+              nextLowestRange = min(nextLowestRange, cursor.get().key().idRange);\n             }\n-            return new NodeLabelRangeIterator( lowestRange );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n-    }\n-\n-    private void closeCursors() throws IOException\n-    {\n-        for ( RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor : cursors )\n-        {\n-            cursor.close();\n-        }\n-        cursors.clear();\n-    }\n-\n-    @Override\n-    public void close() throws Exception\n-    {\n-        closeCursors();\n-    }\n-\n-    /**\n-     * The main iterator over {@link NodeLabelRange ranges}, aggregating all the cursors as it goes.\n-     */\n-    private class NodeLabelRangeIterator extends PrefetchingIterator<NodeLabelRange>\n-    {\n-        private long currentRange;\n-\n-        // nodeId (relative to lowestRange) --> labelId[]\n-        @SuppressWarnings( \"unchecked\" )\n-        private final PrimitiveLongList[] labelsForEachNode = new PrimitiveLongList[RANGE_SIZE];\n-\n-        NodeLabelRangeIterator( long lowestRange )\n-        {\n-            this.currentRange = lowestRange;\n+          } else\n+          {\n+            // Excluded from this range\n+            nextLowestRange = min(nextLowestRange, cursor.get().key().idRange);\n+          }\n         }\n \n-        @Override\n-        protected NodeLabelRange fetchNextOrNull()\n-        {\n-            if ( currentRange == Long.MAX_VALUE )\n-            {\n-                return null;\n-            }\n+        NodeLabelRange range = new NodeLabelRange(currentRange, convertState(labelsForEachNode));\n+        currentRange = nextLowestRange;\n \n-            fill( labelsForEachNode, null );\n-            long nextLowestRange = Long.MAX_VALUE;\n-            try\n-            {\n-                // One \"rangeSize\" range at a time\n-                for ( RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException> cursor : cursors )\n-                {\n-                    long idRange = cursor.get().key().idRange;\n-                    if ( idRange < currentRange )\n-                    {\n-                        // This should only happen if the cursor has been exhausted and the iterator have moved on\n-                        // from the range it returned as its last hit.\n-                        assert !cursor.next();\n-                    }\n-                    else if ( idRange == currentRange )\n-                    {\n-                        long bits = cursor.get().value().bits;\n-                        long labelId = cursor.get().key().labelId;\n-                        readBitmap( bits, labelId, labelsForEachNode );\n-\n-                        // Advance cursor and look ahead to the next range\n-                        if ( cursor.next() )\n-                        {\n-                            nextLowestRange = min( nextLowestRange, cursor.get().key().idRange );\n-                        }\n-                    }\n-                    else\n-                    {\n-                        // Excluded from this range\n-                        nextLowestRange = min( nextLowestRange, cursor.get().key().idRange );\n-                    }\n-                }\n-\n-                NodeLabelRange range = new NodeLabelRange( currentRange, convertState( labelsForEachNode ) );\n-                currentRange = nextLowestRange;\n-\n-                return range;\n-            }\n-            catch ( IOException e )\n-            {\n-                throw new RuntimeException( e );\n-            }\n-        }\n+        return range;\n+      } catch (IOException e)\n+      {\n+        throw new RuntimeException(e);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 195
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2285/NativeAllEntriesLabelScanReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2285/NativeAllEntriesLabelScanReader.java\nindex 5b0c626c8f7..650b3087170 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2285/NativeAllEntriesLabelScanReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2285/NativeAllEntriesLabelScanReader.java\n@@ -53,8 +53,7 @@ class NativeAllEntriesLabelScanReader implements AllEntriesLabelScanReader\n     private final List<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> cursors = new ArrayList<>();\n     private final int highestLabelId;\n \n-    NativeAllEntriesLabelScanReader( IntFunction<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> seekProvider,\n-            int highestLabelId )\n+    NativeAllEntriesLabelScanReader( IntFunction<RawCursor<Hit<LabelScanKey,LabelScanValue>,IOException>> seekProvider, int highestLabelId )\n     {\n         this.seekProvider = seekProvider;\n         this.highestLabelId = highestLabelId;\n@@ -181,4 +180,4 @@ class NativeAllEntriesLabelScanReader implements AllEntriesLabelScanReader\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}