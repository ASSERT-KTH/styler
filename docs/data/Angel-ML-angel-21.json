{
    "project_name": "Angel-ML-angel",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/21/CompSparseFloatVectorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/21/CompSparseFloatVectorTest.java\nindex 1f7f77f373d..9706768e2cb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/21/CompSparseFloatVectorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/21/CompSparseFloatVectorTest.java\n@@ -29,28 +29,29 @@ import static junit.framework.Assert.assertEquals;\n public class CompSparseFloatVectorTest {\n   private static final Log LOG = LogFactory.getLog(CompSparseDoubleVectorTest.class);\n   private final int dim = 10000;\n+\n   @Test\n-  public void testBaseOp(){\n+  public void testBaseOp() {\n     CompSparseFloatVector vector = initVector();\n     HashSet<Integer> indexSet = new HashSet<Integer>();\n     Random r = new Random();\n     int sampleNum = 100;\n-    while(true) {\n+    while (true) {\n       indexSet.add(r.nextInt(dim));\n-      if(indexSet.size() >= sampleNum) {\n+      if (indexSet.size() >= sampleNum) {\n         break;\n       }\n     }\n-    int [] indexes = new int[sampleNum];\n+    int[] indexes = new int[sampleNum];\n     int index = 0;\n-    for(int item:indexSet) {\n+    for (int item : indexSet) {\n       indexes[index++] = item;\n     }\n \n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       vector.plusBy(indexes[i], 1.0f);\n     }\n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       assertEquals(vector.get(indexes[i]), 1.0f);\n     }\n \n@@ -61,29 +62,29 @@ public class CompSparseFloatVectorTest {\n     assertEquals(vector.sum(), Double.valueOf(sampleNum) * 2);\n \n     CompSparseFloatVector addVector = initVector();\n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       addVector.plusBy(indexes[i], 1.0);\n     }\n \n     vector.plusBy(addVector);\n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       assertEquals(vector.get(indexes[i]), 3.0f);\n     }\n \n-    CompSparseFloatVector clonedVector = (CompSparseFloatVector)vector.clone();\n-    for(int i = 0; i < indexes.length; i++) {\n+    CompSparseFloatVector clonedVector = (CompSparseFloatVector) vector.clone();\n+    for (int i = 0; i < indexes.length; i++) {\n       assertEquals(clonedVector.get(indexes[i]), 3.0f);\n     }\n   }\n \n-  private CompSparseFloatVector initVector(){\n+  private CompSparseFloatVector initVector() {\n     PartitionKey[] partKeys = new PartitionKey[4];\n-    TFloatVector [] vectors = new TFloatVector[4];\n+    TFloatVector[] vectors = new TFloatVector[4];\n     long blockCol = dim / 4;\n-    partKeys[0] = new PartitionKey(0, 0, 0, 0 , 0, blockCol);\n-    partKeys[1] = new PartitionKey(0, 0, 0,  blockCol , 0, blockCol * 2);\n-    partKeys[2] = new PartitionKey(0, 0, 0, blockCol * 2 , 0, blockCol * 3);\n-    partKeys[3] = new PartitionKey(0, 0, 0, blockCol * 3 , 0, dim);\n+    partKeys[0] = new PartitionKey(0, 0, 0, 0, 0, blockCol);\n+    partKeys[1] = new PartitionKey(0, 0, 0, blockCol, 0, blockCol * 2);\n+    partKeys[2] = new PartitionKey(0, 0, 0, blockCol * 2, 0, blockCol * 3);\n+    partKeys[3] = new PartitionKey(0, 0, 0, blockCol * 3, 0, dim);\n \n     vectors[0] = new SparseFloatVector(dim);\n     vectors[1] = new SparseFloatVector(dim);\n",
            "diff_size": 18
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/21/CompSparseFloatVectorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/21/CompSparseFloatVectorTest.java\nindex 1f7f77f373d..b04d2cc77b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/21/CompSparseFloatVectorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/21/CompSparseFloatVectorTest.java\n@@ -30,27 +30,27 @@ public class CompSparseFloatVectorTest {\n   private static final Log LOG = LogFactory.getLog(CompSparseDoubleVectorTest.class);\n   private final int dim = 10000;\n   @Test\n-  public void testBaseOp(){\n+  public void testBaseOp() {\n     CompSparseFloatVector vector = initVector();\n     HashSet<Integer> indexSet = new HashSet<Integer>();\n     Random r = new Random();\n     int sampleNum = 100;\n     while(true) {\n       indexSet.add(r.nextInt(dim));\n-      if(indexSet.size() >= sampleNum) {\n+      if (indexSet.size() >= sampleNum) {\n         break;\n       }\n     }\n-    int [] indexes = new int[sampleNum];\n+    int[] indexes = new int[sampleNum];\n     int index = 0;\n-    for(int item:indexSet) {\n+    for (int item: indexSet) {\n       indexes[index++] = item;\n     }\n \n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       vector.plusBy(indexes[i], 1.0f);\n     }\n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       assertEquals(vector.get(indexes[i]), 1.0f);\n     }\n \n@@ -61,29 +61,29 @@ public class CompSparseFloatVectorTest {\n     assertEquals(vector.sum(), Double.valueOf(sampleNum) * 2);\n \n     CompSparseFloatVector addVector = initVector();\n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       addVector.plusBy(indexes[i], 1.0);\n     }\n \n     vector.plusBy(addVector);\n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       assertEquals(vector.get(indexes[i]), 3.0f);\n     }\n \n     CompSparseFloatVector clonedVector = (CompSparseFloatVector)vector.clone();\n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       assertEquals(clonedVector.get(indexes[i]), 3.0f);\n     }\n   }\n \n-  private CompSparseFloatVector initVector(){\n+  private CompSparseFloatVector initVector() {\n     PartitionKey[] partKeys = new PartitionKey[4];\n-    TFloatVector [] vectors = new TFloatVector[4];\n+    TFloatVector[] vectors = new TFloatVector[4];\n     long blockCol = dim / 4;\n-    partKeys[0] = new PartitionKey(0, 0, 0, 0 , 0, blockCol);\n-    partKeys[1] = new PartitionKey(0, 0, 0,  blockCol , 0, blockCol * 2);\n-    partKeys[2] = new PartitionKey(0, 0, 0, blockCol * 2 , 0, blockCol * 3);\n-    partKeys[3] = new PartitionKey(0, 0, 0, blockCol * 3 , 0, dim);\n+    partKeys[0] = new PartitionKey(0, 0, 0, 0, 0, blockCol);\n+    partKeys[1] = new PartitionKey(0, 0, 0, blockCol, 0, blockCol * 2);\n+    partKeys[2] = new PartitionKey(0, 0, 0, blockCol * 2, 0, blockCol * 3);\n+    partKeys[3] = new PartitionKey(0, 0, 0, blockCol * 3, 0, dim);\n \n     vectors[0] = new SparseFloatVector(dim);\n     vectors[1] = new SparseFloatVector(dim);\n@@ -92,4 +92,4 @@ public class CompSparseFloatVectorTest {\n \n     return new CompSparseFloatVector(0, 0, dim, partKeys, vectors);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/21/CompSparseFloatVectorTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/21/CompSparseFloatVectorTest.java\nindex 1f7f77f373d..fb543690150 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/21/CompSparseFloatVectorTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/21/CompSparseFloatVectorTest.java\n@@ -20,76 +20,74 @@ import com.tencent.angel.PartitionKey;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.junit.Test;\n-\n import java.util.HashSet;\n import java.util.Random;\n-\n import static junit.framework.Assert.assertEquals;\n \n public class CompSparseFloatVectorTest {\n+\n   private static final Log LOG = LogFactory.getLog(CompSparseDoubleVectorTest.class);\n   private final int dim = 10000;\n+\n   @Test\n-  public void testBaseOp(){\n+  public void testBaseOp() {\n     CompSparseFloatVector vector = initVector();\n     HashSet<Integer> indexSet = new HashSet<Integer>();\n     Random r = new Random();\n     int sampleNum = 100;\n-    while(true) {\n+    while (true) {\n       indexSet.add(r.nextInt(dim));\n-      if(indexSet.size() >= sampleNum) {\n+      if (indexSet.size() >= sampleNum) {\n         break;\n       }\n     }\n-    int [] indexes = new int[sampleNum];\n+\n+    int[] indexes = new int[sampleNum];\n     int index = 0;\n-    for(int item:indexSet) {\n+    for (int item : indexSet) {\n       indexes[index++] = item;\n     }\n \n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       vector.plusBy(indexes[i], 1.0f);\n     }\n-    for(int i = 0; i < indexes.length; i++) {\n+\n+    for (int i = 0; i < indexes.length; i++) {\n       assertEquals(vector.get(indexes[i]), 1.0f);\n     }\n-\n     assertEquals(vector.sum(), Double.valueOf(sampleNum));\n     assertEquals(vector.nonZeroNumber(), sampleNum);\n     assertEquals(vector.squaredNorm(), Double.valueOf(sampleNum));\n     vector.timesBy(2.0);\n     assertEquals(vector.sum(), Double.valueOf(sampleNum) * 2);\n-\n     CompSparseFloatVector addVector = initVector();\n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       addVector.plusBy(indexes[i], 1.0);\n     }\n-\n     vector.plusBy(addVector);\n-    for(int i = 0; i < indexes.length; i++) {\n+    for (int i = 0; i < indexes.length; i++) {\n       assertEquals(vector.get(indexes[i]), 3.0f);\n     }\n \n-    CompSparseFloatVector clonedVector = (CompSparseFloatVector)vector.clone();\n-    for(int i = 0; i < indexes.length; i++) {\n+    CompSparseFloatVector clonedVector = (CompSparseFloatVector) vector.clone();\n+    for (int i = 0; i < indexes.length; i++) {\n       assertEquals(clonedVector.get(indexes[i]), 3.0f);\n     }\n   }\n \n-  private CompSparseFloatVector initVector(){\n+  private CompSparseFloatVector initVector() {\n     PartitionKey[] partKeys = new PartitionKey[4];\n-    TFloatVector [] vectors = new TFloatVector[4];\n+    TFloatVector[] vectors = new TFloatVector[4];\n     long blockCol = dim / 4;\n-    partKeys[0] = new PartitionKey(0, 0, 0, 0 , 0, blockCol);\n-    partKeys[1] = new PartitionKey(0, 0, 0,  blockCol , 0, blockCol * 2);\n-    partKeys[2] = new PartitionKey(0, 0, 0, blockCol * 2 , 0, blockCol * 3);\n-    partKeys[3] = new PartitionKey(0, 0, 0, blockCol * 3 , 0, dim);\n-\n+    partKeys[0] = new PartitionKey(0, 0, 0, 0, 0, blockCol);\n+    partKeys[1] = new PartitionKey(0, 0, 0, blockCol, 0, blockCol * 2);\n+    partKeys[2] = new PartitionKey(0, 0, 0, blockCol * 2, 0, blockCol * 3);\n+    partKeys[3] = new PartitionKey(0, 0, 0, blockCol * 3, 0, dim);\n     vectors[0] = new SparseFloatVector(dim);\n     vectors[1] = new SparseFloatVector(dim);\n     vectors[2] = new SparseFloatVector(dim);\n     vectors[3] = new SparseFloatVector(dim);\n-\n     return new CompSparseFloatVector(0, 0, dim, partKeys, vectors);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}