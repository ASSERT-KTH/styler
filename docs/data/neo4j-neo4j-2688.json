{
    "project_name": "neo4j-neo4j",
    "error_id": "2688",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2688/SettingValueParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2688/SettingValueParser.java\nindex 658154078d0..69b1db51fb3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2688/SettingValueParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2688/SettingValueParser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.configuration;\n \n import org.neo4j.annotations.api.IgnoreApiCheck;\n@@ -34,19 +35,21 @@ public interface SettingValueParser<T>\n      * Parsing a textual representation of an object into a typed object\n      *\n      * @param value The String representation the object to be parsed\n-     * @throws IllegalArgumentException if the text representation can not be parsed into an object of type T\n      * @return the parsed value\n+     * @throws IllegalArgumentException if the text representation can not be parsed into an object of type T\n      */\n-    T parse( String value );\n+    T parse(String value);\n \n     /**\n      * Validates if an object is accepted by the parser\n+     *\n      * @param value The object to be validated\n      * @throws IllegalArgumentException if the object is not accepted by the parser\n      */\n-    default void validate( T value )\n+    default void validate(T value)\n     {\n     }\n+\n     /**\n      * The description describing the parser\n      *\n@@ -55,7 +58,8 @@ public interface SettingValueParser<T>\n     String getDescription();\n \n     /**\n-     *  The type of the object this parser is working on.\n+     * The type of the object this parser is working on.\n+     *\n      * @return the type of T\n      */\n     Class<T> getType();\n@@ -63,12 +67,12 @@ public interface SettingValueParser<T>\n     /**\n      * Solving a value against the default value\n      *\n-     * @param value the value associated with the Setting using this parser\n+     * @param value        the value associated with the Setting using this parser\n      * @param defaultValue the value associated with the Setting using this parser\n      * @return the solved value\n      */\n \n-    default T solveDefault( T value, T defaultValue )\n+    default T solveDefault(T value, T defaultValue)\n     {\n         return value;\n     }\n@@ -76,13 +80,13 @@ public interface SettingValueParser<T>\n     /**\n      * Solving a value against a value the Setting using this parser is depending on.\n      *\n-     * @param value the value associated with the Setting using this parser\n-     * @param dependencyValue  the value associated with the Setting that the Setting using this parser is depending on\n+     * @param value           the value associated with the Setting using this parser\n+     * @param dependencyValue the value associated with the Setting that the Setting using this parser is depending on\n      * @return\n      */\n-    default T solveDependency( T value, T dependencyValue )\n+    default T solveDependency(T value, T dependencyValue)\n     {\n-        if ( value != null )\n+        if (value != null)\n         {\n             return value;\n         }\n@@ -96,10 +100,11 @@ public interface SettingValueParser<T>\n \n     /**\n      * Converting an object to a textual representation of that object.\n+     *\n      * @param value the object to be turned in to an textual representation\n      * @return the textual representation\n      */\n-    default String valueToString( T value )\n+    default String valueToString(T value)\n     {\n         return value.toString();\n     }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}