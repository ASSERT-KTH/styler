{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3708",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "62",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "257",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "297",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "327",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "352",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "93",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "375",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "383",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "402",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "407",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "428",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "433",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "441",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "443",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "443",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "455",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "490",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "503",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "509",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "537",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "546",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "548",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "569",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "571",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "581",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "593",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3708/EnterpriseBuiltInDbmsProcedures.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3708/EnterpriseBuiltInDbmsProcedures.java\nindex 00fdaf4ae37..975af734566 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3708/EnterpriseBuiltInDbmsProcedures.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3708/EnterpriseBuiltInDbmsProcedures.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.enterprise.builtinprocs;\n \n import java.time.ZoneId;\n@@ -70,559 +71,551 @@ import static org.neo4j.kernel.enterprise.builtinprocs.QueryId.fromExternalStrin\n import static org.neo4j.kernel.enterprise.builtinprocs.QueryId.ofInternalId;\n import static org.neo4j.procedure.Mode.DBMS;\n \n-@SuppressWarnings( \"unused\" )\n+@SuppressWarnings(\"unused\")\n public class EnterpriseBuiltInDbmsProcedures\n {\n-    private static final int HARD_CHAR_LIMIT = 2048;\n-\n-    @Context\n-    public DependencyResolver resolver;\n-\n-    @Context\n-    public GraphDatabaseAPI graph;\n-\n-    @Context\n-    public SecurityContext securityContext;\n-\n-    @Description( \"Attaches a map of data to the transaction. The data will be printed when listing queries, and \" +\n-                  \"inserted into the query log.\" )\n-    @Procedure( name = \"dbms.setTXMetaData\", mode = DBMS )\n-    public void setTXMetaData( @Name( value = \"data\" ) Map<String,Object> data )\n-    {\n-        securityContext.assertCredentialsNotExpired();\n-        int totalCharSize = data.entrySet().stream()\n-                .mapToInt( e -> e.getKey().length() + e.getValue().toString().length() )\n-                .sum();\n-\n-        if ( totalCharSize >= HARD_CHAR_LIMIT )\n-        {\n-            throw new IllegalArgumentException(\n-                    format( \"Invalid transaction meta-data, expected the total number of chars for \" +\n-                            \"keys and values to be less than %d, got %d\", HARD_CHAR_LIMIT, totalCharSize ) );\n-        }\n-\n-        try ( Statement statement = getCurrentTx().acquireStatement() )\n-        {\n-            statement.queryRegistration().setMetaData( data );\n-        }\n-    }\n+  private static final int HARD_CHAR_LIMIT = 2048;\n \n-    @Description( \"Provides attached transaction metadata.\" )\n-    @Procedure( name = \"dbms.getTXMetaData\", mode = DBMS )\n-    public Stream<MetadataResult> getTXMetaData()\n-    {\n-        securityContext.assertCredentialsNotExpired();\n-        try ( Statement statement = getCurrentTx().acquireStatement() )\n-        {\n-            return Stream.of( statement.queryRegistration().getMetaData() ).map( MetadataResult::new );\n-        }\n-    }\n+  @Context\n+  public DependencyResolver resolver;\n \n-    private KernelTransaction getCurrentTx()\n-    {\n-        return graph.getDependencyResolver().resolveDependency( ThreadToStatementContextBridge.class )\n-                .getKernelTransactionBoundToThisThread( true );\n-    }\n+  @Context\n+  public GraphDatabaseAPI graph;\n \n-    /*\n-    This surface is hidden in 3.1, to possibly be completely removed or reworked later\n-    ==================================================================================\n-     */\n-    //@Procedure( name = \"dbms.terminateTransactionsForUser\", mode = DBMS )\n-    public Stream<TransactionTerminationResult> terminateTransactionsForUser( @Name( \"username\" ) String username )\n-    {\n-        assertAdminOrSelf( username );\n+  @Context\n+  public SecurityContext securityContext;\n \n-        return terminateTransactionsForValidUser( graph.getDependencyResolver(), username, getCurrentTx() );\n-    }\n+  @Description(\"Attaches a map of data to the transaction. The data will be printed when listing queries, and \" +\n+      \"inserted into the query log.\")\n+  @Procedure(name = \"dbms.setTXMetaData\", mode = DBMS)\n+  public void setTXMetaData(@Name(value = \"data\") Map<String, Object> data)\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+    int totalCharSize = data.entrySet().stream()\n+        .mapToInt(e -> e.getKey().length() + e.getValue().toString().length())\n+        .sum();\n \n-    //@Procedure( name = \"dbms.listConnections\", mode = DBMS )\n-    public Stream<ConnectionResult> listConnections()\n+    if (totalCharSize >= HARD_CHAR_LIMIT)\n     {\n-        assertAdmin();\n-\n-        BoltConnectionTracker boltConnectionTracker = getBoltConnectionTracker( graph.getDependencyResolver() );\n-        return countConnectionsByUsername(\n-            boltConnectionTracker\n-                .getActiveConnections()\n-                .stream()\n-                .filter( session -> !session.willTerminate() )\n-                .map( ManagedBoltStateMachine::owner )\n-        );\n+      throw new IllegalArgumentException(\n+          format(\"Invalid transaction meta-data, expected the total number of chars for \" +\n+              \"keys and values to be less than %d, got %d\", HARD_CHAR_LIMIT, totalCharSize));\n     }\n \n-    //@Procedure( name = \"dbms.terminateConnectionsForUser\", mode = DBMS )\n-    public Stream<ConnectionResult> terminateConnectionsForUser( @Name( \"username\" ) String username )\n+    try (Statement statement = getCurrentTx().acquireStatement())\n     {\n-        assertAdminOrSelf( username );\n-\n-        return terminateConnectionsForValidUser( graph.getDependencyResolver(), username );\n+      statement.queryRegistration().setMetaData(data);\n     }\n+  }\n \n-    /*\n-    ==================================================================================\n-     */\n-\n-    @Description( \"List all user functions in the DBMS.\" )\n-    @Procedure( name = \"dbms.functions\", mode = DBMS )\n-    public Stream<FunctionResult> listFunctions()\n+  @Description(\"Provides attached transaction metadata.\")\n+  @Procedure(name = \"dbms.getTXMetaData\", mode = DBMS)\n+  public Stream<MetadataResult> getTXMetaData()\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+    try (Statement statement = getCurrentTx().acquireStatement())\n     {\n-        securityContext.assertCredentialsNotExpired();\n-        return graph.getDependencyResolver().resolveDependency( Procedures.class ).getAllFunctions().stream()\n-                .sorted( Comparator.comparing( a -> a.name().toString() ) )\n-                .map( FunctionResult::new );\n+      return Stream.of(statement.queryRegistration().getMetaData()).map(MetadataResult::new);\n     }\n+  }\n \n-    public static class FunctionResult\n-    {\n-        public final String name;\n-        public final String signature;\n-        public final String description;\n-        public final List<String> roles;\n+  private KernelTransaction getCurrentTx()\n+  {\n+    return graph.getDependencyResolver().resolveDependency(ThreadToStatementContextBridge.class)\n+        .getKernelTransactionBoundToThisThread(true);\n+  }\n \n-        private FunctionResult( UserFunctionSignature signature )\n-        {\n-            this.name = signature.name().toString();\n-            this.signature = signature.toString();\n-            this.description = signature.description().orElse( \"\" );\n-            roles = Stream.of( \"admin\", \"reader\", \"editor\", \"publisher\", \"architect\" ).collect( toList() );\n-            roles.addAll( Arrays.asList( signature.allowed() ) );\n-        }\n-    }\n+  /*\n+  This surface is hidden in 3.1, to possibly be completely removed or reworked later\n+  ==================================================================================\n+   */\n+  //@Procedure( name = \"dbms.terminateTransactionsForUser\", mode = DBMS )\n+  public Stream<TransactionTerminationResult> terminateTransactionsForUser(@Name(\"username\") String username)\n+  {\n+    assertAdminOrSelf(username);\n \n-    @Description( \"List all procedures in the DBMS.\" )\n-    @Procedure( name = \"dbms.procedures\", mode = DBMS )\n-    public Stream<ProcedureResult> listProcedures()\n-    {\n-        securityContext.assertCredentialsNotExpired();\n-        Procedures procedures = graph.getDependencyResolver().resolveDependency( Procedures.class );\n-        return procedures.getAllProcedures().stream()\n-                .sorted( Comparator.comparing( a -> a.name().toString() ) )\n-                .map( ProcedureResult::new );\n-    }\n+    return terminateTransactionsForValidUser(graph.getDependencyResolver(), username, getCurrentTx());\n+  }\n \n-    @SuppressWarnings( \"WeakerAccess\" )\n-    public static class ProcedureResult\n-    {\n-        private static final List<String> ADMIN_PROCEDURES =\n-                Arrays.asList( \"createUser\", \"deleteUser\", \"listUsers\", \"clearAuthCache\", \"changeUserPassword\",\n-                        \"addRoleToUser\", \"removeRoleFromUser\", \"suspendUser\", \"activateUser\", \"listRoles\",\n-                        \"listRolesForUser\", \"listUsersForRole\", \"createRole\", \"deleteRole\" );\n-\n-        public final String name;\n-        public final String signature;\n-        public final String description;\n-        public final List<String> roles;\n-        public final String mode;\n-\n-        public ProcedureResult( ProcedureSignature signature )\n-        {\n-            this.name = signature.name().toString();\n-            this.signature = signature.toString();\n-            this.description = signature.description().orElse( \"\" );\n-            this.mode = signature.mode().toString();\n-            roles = new ArrayList<>();\n-            switch ( signature.mode() )\n-            {\n-            case DBMS:\n-                // TODO: not enough granularity for dbms and user management, needs fix\n-                if ( isAdminProcedure( signature.name().name() ) )\n-                {\n-                    roles.add( \"admin\" );\n-                }\n-                else\n-                {\n-                    roles.add( \"reader\" );\n-                    roles.add( \"editor\" );\n-                    roles.add( \"publisher\" );\n-                    roles.add( \"architect\" );\n-                    roles.add( \"admin\" );\n-                    roles.addAll( Arrays.asList( signature.allowed() ) );\n-                }\n-                break;\n-            case DEFAULT:\n-            case READ:\n-                roles.add( \"reader\" );\n-            case WRITE:\n-                roles.add( \"editor\" );\n-                roles.add( \"publisher\" );\n-            case SCHEMA:\n-                roles.add( \"architect\" );\n-            default:\n-                roles.add( \"admin\" );\n-                roles.addAll( Arrays.asList( signature.allowed() ) );\n-            }\n-        }\n+  //@Procedure( name = \"dbms.listConnections\", mode = DBMS )\n+  public Stream<ConnectionResult> listConnections()\n+  {\n+    assertAdmin();\n \n-        private boolean isAdminProcedure( String procedureName )\n-        {\n-            return name.startsWith( \"dbms.security.\" ) && ADMIN_PROCEDURES.contains( procedureName ) ||\n-                    name.equals( \"dbms.listConfig\" ) ||\n-                    name.equals( \"dbms.setConfigValue\" ) ||\n-                    name.equals( \"dbms.clearQueryCaches\" );\n-        }\n-    }\n+    BoltConnectionTracker boltConnectionTracker = getBoltConnectionTracker(graph.getDependencyResolver());\n+    return countConnectionsByUsername(\n+        boltConnectionTracker\n+            .getActiveConnections()\n+            .stream()\n+            .filter(session -> !session.willTerminate())\n+            .map(ManagedBoltStateMachine::owner)\n+    );\n+  }\n \n-    @Description( \"Updates a given setting value. Passing an empty value will result in removing the configured value \" +\n-            \"and falling back to the default value. Changes will not persist and will be lost if the server is restarted.\" )\n-    @Procedure( name = \"dbms.setConfigValue\", mode = DBMS )\n-    public void setConfigValue( @Name( \"setting\" ) String setting, @Name( \"value\" ) String value )\n-    {\n-        securityContext.assertCredentialsNotExpired();\n-        assertAdmin();\n+  //@Procedure( name = \"dbms.terminateConnectionsForUser\", mode = DBMS )\n+  public Stream<ConnectionResult> terminateConnectionsForUser(@Name(\"username\") String username)\n+  {\n+    assertAdminOrSelf(username);\n \n-        Config config = resolver.resolveDependency( Config.class );\n-        config.updateDynamicSetting( setting, value, \"dbms.setConfigValue\" ); // throws if something goes wrong\n-    }\n+    return terminateConnectionsForValidUser(graph.getDependencyResolver(), username);\n+  }\n \n     /*\n     ==================================================================================\n      */\n \n-    @Description( \"List all queries currently executing at this instance that are visible to the user.\" )\n-    @Procedure( name = \"dbms.listQueries\", mode = DBMS )\n-    public Stream<QueryStatusResult> listQueries() throws InvalidArgumentsException\n-    {\n-        securityContext.assertCredentialsNotExpired();\n-\n-        EmbeddedProxySPI nodeManager = resolver.resolveDependency( EmbeddedProxySPI.class );\n-        ZoneId zoneId = getConfiguredTimeZone();\n-        try\n-        {\n-            return getKernelTransactions().activeTransactions().stream()\n-                .flatMap( KernelTransactionHandle::executingQueries )\n-                    .filter( query -> isAdminOrSelf( query.username() ) )\n-                    .map( catchThrown( InvalidArgumentsException.class,\n-                            query -> new QueryStatusResult( query, nodeManager, zoneId ) ) );\n-        }\n-        catch ( UncaughtCheckedException uncaught )\n-        {\n-            throwIfPresent( uncaught.getCauseIfOfType( InvalidArgumentsException.class ) );\n-            throw uncaught;\n-        }\n-    }\n-\n-    @Description( \"List all transactions currently executing at this instance that are visible to the user.\" )\n-    @Procedure( name = \"dbms.listTransactions\", mode = DBMS )\n-    public Stream<TransactionStatusResult> listTransactions() throws InvalidArgumentsException\n-    {\n-        securityContext.assertCredentialsNotExpired();\n-        try\n-        {\n-            Set<KernelTransactionHandle> handles = getKernelTransactions().activeTransactions().stream()\n-                    .filter( transaction -> isAdminOrSelf( transaction.subject().username() ) )\n-                    .collect( toSet() );\n-\n-            Map<KernelTransactionHandle,List<QuerySnapshot>> handleQuerySnapshotsMap = handles.stream()\n-                    .collect( toMap( identity(), getTransactionQueries() ) );\n-\n-            TransactionDependenciesResolver transactionBlockerResolvers =\n-                    new TransactionDependenciesResolver( handleQuerySnapshotsMap );\n-\n-            ZoneId zoneId = getConfiguredTimeZone();\n-\n-            return handles.stream()\n-                    .map( catchThrown( InvalidArgumentsException.class,\n-                            tx -> new TransactionStatusResult( tx, transactionBlockerResolvers,\n-                                    handleQuerySnapshotsMap, zoneId ) ) );\n-        }\n-        catch ( UncaughtCheckedException uncaught )\n-        {\n-            throwIfPresent( uncaught.getCauseIfOfType( InvalidArgumentsException.class ) );\n-            throw uncaught;\n-        }\n-    }\n-\n-    private Function<KernelTransactionHandle,List<QuerySnapshot>> getTransactionQueries()\n-    {\n-        return transactionHandle -> transactionHandle.executingQueries()\n-                                              .map( ExecutingQuery::snapshot )\n-                                              .collect( toList() );\n-    }\n-\n-    @Description( \"List the active lock requests granted for the transaction executing the query with the given query id.\" )\n-    @Procedure( name = \"dbms.listActiveLocks\", mode = DBMS )\n-    public Stream<ActiveLocksResult> listActiveLocks( @Name( \"queryId\" ) String queryId )\n-            throws InvalidArgumentsException\n-    {\n-        securityContext.assertCredentialsNotExpired();\n-        try\n-        {\n-            long id = fromExternalString( queryId ).kernelQueryId();\n-            return getActiveTransactions( tx -> executingQueriesWithId( id, tx ) )\n-                    .flatMap( this::getActiveLocksForQuery );\n-        }\n-        catch ( UncaughtCheckedException uncaught )\n-        {\n-            throwIfPresent( uncaught.getCauseIfOfType( InvalidArgumentsException.class ) );\n-            throw uncaught;\n-        }\n-    }\n-\n-    @Description( \"Kill all transactions executing the query with the given query id.\" )\n-    @Procedure( name = \"dbms.killQuery\", mode = DBMS )\n-    public Stream<QueryTerminationResult> killQuery( @Name( \"id\" ) String idText ) throws InvalidArgumentsException\n-    {\n-        securityContext.assertCredentialsNotExpired();\n-        try\n-        {\n-            long queryId = fromExternalString( idText ).kernelQueryId();\n-\n-            Set<Pair<KernelTransactionHandle,ExecutingQuery>> querys = getActiveTransactions( tx -> executingQueriesWithId( queryId, tx ) ).collect( toSet() );\n-            boolean killQueryVerbose = resolver.resolveDependency( Config.class ).get( GraphDatabaseSettings.kill_query_verbose );\n-            if ( killQueryVerbose && querys.isEmpty() )\n-            {\n-                return Stream.<QueryTerminationResult>builder().add( new QueryFailedTerminationResult( fromExternalString( idText ) ) ).build();\n-            }\n-            return querys.stream().map( catchThrown( InvalidArgumentsException.class, this::killQueryTransaction ) );\n-        }\n-        catch ( UncaughtCheckedException uncaught )\n-        {\n-            throwIfPresent( uncaught.getCauseIfOfType( InvalidArgumentsException.class ) );\n-            throw uncaught;\n-        }\n-    }\n-\n-    @Description( \"Kill all transactions executing a query with any of the given query ids.\" )\n-    @Procedure( name = \"dbms.killQueries\", mode = DBMS )\n-    public Stream<QueryTerminationResult> killQueries( @Name( \"ids\" ) List<String> idTexts ) throws InvalidArgumentsException\n-    {\n-        securityContext.assertCredentialsNotExpired();\n-        try\n-        {\n-\n-            Set<Long> queryIds = idTexts.stream().map( catchThrown( InvalidArgumentsException.class, QueryId::fromExternalString ) ).map(\n-                    catchThrown( InvalidArgumentsException.class, QueryId::kernelQueryId ) ).collect( toSet() );\n-\n-            Set<QueryTerminationResult> terminatedQuerys = getActiveTransactions( tx -> executingQueriesWithIds( queryIds, tx ) ).map(\n-                    catchThrown( InvalidArgumentsException.class, this::killQueryTransaction ) ).collect( toSet() );\n-            boolean killQueryVerbose = resolver.resolveDependency( Config.class ).get( GraphDatabaseSettings.kill_query_verbose );\n-            if ( killQueryVerbose && terminatedQuerys.size() != idTexts.size() )\n-            {\n-                for ( String id : idTexts )\n-                {\n-                    if ( terminatedQuerys.stream().noneMatch( query -> query.queryId.equals( id ) ) )\n-                    {\n-                        terminatedQuerys.add( new QueryFailedTerminationResult( fromExternalString( id ) ) );\n-                    }\n-                }\n-            }\n-            return terminatedQuerys.stream();\n-        }\n-        catch ( UncaughtCheckedException uncaught )\n-        {\n-            throwIfPresent( uncaught.getCauseIfOfType( InvalidArgumentsException.class ) );\n-            throw uncaught;\n-        }\n-    }\n-\n-    private <T> Stream<Pair<KernelTransactionHandle, T>> getActiveTransactions(\n-            Function<KernelTransactionHandle,Stream<T>> selector\n-    )\n-    {\n-        return getActiveTransactions( graph.getDependencyResolver() )\n-            .stream()\n-            .flatMap( tx -> selector.apply( tx ).map( data -> Pair.of( tx, data ) ) );\n-    }\n-\n-    private Stream<ExecutingQuery> executingQueriesWithIds( Set<Long> ids, KernelTransactionHandle txHandle )\n-    {\n-        return txHandle.executingQueries().filter( q -> ids.contains( q.internalQueryId() ) );\n-    }\n+  @Description(\"List all user functions in the DBMS.\")\n+  @Procedure(name = \"dbms.functions\", mode = DBMS)\n+  public Stream<FunctionResult> listFunctions()\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+    return graph.getDependencyResolver().resolveDependency(Procedures.class).getAllFunctions().stream()\n+        .sorted(Comparator.comparing(a -> a.name().toString()))\n+        .map(FunctionResult::new);\n+  }\n+\n+  public static class FunctionResult\n+  {\n+    public final String name;\n+    public final String signature;\n+    public final String description;\n+    public final List<String> roles;\n+\n+    private FunctionResult(UserFunctionSignature signature)\n+    {\n+      this.name = signature.name().toString();\n+      this.signature = signature.toString();\n+      this.description = signature.description().orElse(\"\");\n+      roles = Stream.of(\"admin\", \"reader\", \"editor\", \"publisher\", \"architect\").collect(toList());\n+      roles.addAll(Arrays.asList(signature.allowed()));\n+    }\n+  }\n+\n+  @Description(\"List all procedures in the DBMS.\")\n+  @Procedure(name = \"dbms.procedures\", mode = DBMS)\n+  public Stream<ProcedureResult> listProcedures()\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+    Procedures procedures = graph.getDependencyResolver().resolveDependency(Procedures.class);\n+    return procedures.getAllProcedures().stream()\n+        .sorted(Comparator.comparing(a -> a.name().toString()))\n+        .map(ProcedureResult::new);\n+  }\n+\n+  @SuppressWarnings(\"WeakerAccess\")\n+  public static class ProcedureResult\n+  {\n+    private static final List<String> ADMIN_PROCEDURES =\n+        Arrays.asList(\"createUser\", \"deleteUser\", \"listUsers\", \"clearAuthCache\", \"changeUserPassword\",\n+            \"addRoleToUser\", \"removeRoleFromUser\", \"suspendUser\", \"activateUser\", \"listRoles\",\n+            \"listRolesForUser\", \"listUsersForRole\", \"createRole\", \"deleteRole\");\n+\n+    public final String name;\n+    public final String signature;\n+    public final String description;\n+    public final List<String> roles;\n+    public final String mode;\n+\n+    public ProcedureResult(ProcedureSignature signature)\n+    {\n+      this.name = signature.name().toString();\n+      this.signature = signature.toString();\n+      this.description = signature.description().orElse(\"\");\n+      this.mode = signature.mode().toString();\n+      roles = new ArrayList<>();\n+      switch (signature.mode())\n+      {\n+        case DBMS:\n+          // TODO: not enough granularity for dbms and user management, needs fix\n+          if (isAdminProcedure(signature.name().name()))\n+          {\n+            roles.add(\"admin\");\n+          } else\n+          {\n+            roles.add(\"reader\");\n+            roles.add(\"editor\");\n+            roles.add(\"publisher\");\n+            roles.add(\"architect\");\n+            roles.add(\"admin\");\n+            roles.addAll(Arrays.asList(signature.allowed()));\n+          }\n+          break;\n+        case DEFAULT:\n+        case READ:\n+          roles.add(\"reader\");\n+        case WRITE:\n+          roles.add(\"editor\");\n+          roles.add(\"publisher\");\n+        case SCHEMA:\n+          roles.add(\"architect\");\n+        default:\n+          roles.add(\"admin\");\n+          roles.addAll(Arrays.asList(signature.allowed()));\n+      }\n+    }\n+\n+    private boolean isAdminProcedure(String procedureName)\n+    {\n+      return name.startsWith(\"dbms.security.\") && ADMIN_PROCEDURES.contains(procedureName) ||\n+          name.equals(\"dbms.listConfig\") ||\n+          name.equals(\"dbms.setConfigValue\") ||\n+          name.equals(\"dbms.clearQueryCaches\");\n+    }\n+  }\n+\n+  @Description(\"Updates a given setting value. Passing an empty value will result in removing the configured value \" +\n+      \"and falling back to the default value. Changes will not persist and will be lost if the server is restarted.\")\n+  @Procedure(name = \"dbms.setConfigValue\", mode = DBMS)\n+  public void setConfigValue(@Name(\"setting\") String setting, @Name(\"value\") String value)\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+    assertAdmin();\n+\n+    Config config = resolver.resolveDependency(Config.class);\n+    config.updateDynamicSetting(setting, value, \"dbms.setConfigValue\"); // throws if something goes wrong\n+  }\n \n-    private Stream<ExecutingQuery> executingQueriesWithId( long id, KernelTransactionHandle txHandle )\n-    {\n-        return txHandle.executingQueries().filter( q -> q.internalQueryId() == id );\n-    }\n+    /*\n+    ==================================================================================\n+     */\n \n-    private QueryTerminationResult killQueryTransaction( Pair<KernelTransactionHandle, ExecutingQuery> pair )\n-            throws InvalidArgumentsException\n-    {\n-        ExecutingQuery query = pair.other();\n-        if ( isAdminOrSelf( query.username() ) )\n+  @Description(\"List all queries currently executing at this instance that are visible to the user.\")\n+  @Procedure(name = \"dbms.listQueries\", mode = DBMS)\n+  public Stream<QueryStatusResult> listQueries() throws InvalidArgumentsException\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+\n+    EmbeddedProxySPI nodeManager = resolver.resolveDependency(EmbeddedProxySPI.class);\n+    ZoneId zoneId = getConfiguredTimeZone();\n+    try\n+    {\n+      return getKernelTransactions().activeTransactions().stream()\n+          .flatMap(KernelTransactionHandle::executingQueries)\n+          .filter(query -> isAdminOrSelf(query.username()))\n+          .map(catchThrown(InvalidArgumentsException.class,\n+              query -> new QueryStatusResult(query, nodeManager, zoneId)));\n+    } catch (UncaughtCheckedException uncaught)\n+    {\n+      throwIfPresent(uncaught.getCauseIfOfType(InvalidArgumentsException.class));\n+      throw uncaught;\n+    }\n+  }\n+\n+  @Description(\"List all transactions currently executing at this instance that are visible to the user.\")\n+  @Procedure(name = \"dbms.listTransactions\", mode = DBMS)\n+  public Stream<TransactionStatusResult> listTransactions() throws InvalidArgumentsException\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+    try\n+    {\n+      Set<KernelTransactionHandle> handles = getKernelTransactions().activeTransactions().stream()\n+          .filter(transaction -> isAdminOrSelf(transaction.subject().username()))\n+          .collect(toSet());\n+\n+      Map<KernelTransactionHandle, List<QuerySnapshot>> handleQuerySnapshotsMap = handles.stream()\n+          .collect(toMap(identity(), getTransactionQueries()));\n+\n+      TransactionDependenciesResolver transactionBlockerResolvers =\n+          new TransactionDependenciesResolver(handleQuerySnapshotsMap);\n+\n+      ZoneId zoneId = getConfiguredTimeZone();\n+\n+      return handles.stream()\n+          .map(catchThrown(InvalidArgumentsException.class,\n+              tx -> new TransactionStatusResult(tx, transactionBlockerResolvers,\n+                  handleQuerySnapshotsMap, zoneId)));\n+    } catch (UncaughtCheckedException uncaught)\n+    {\n+      throwIfPresent(uncaught.getCauseIfOfType(InvalidArgumentsException.class));\n+      throw uncaught;\n+    }\n+  }\n+\n+  private Function<KernelTransactionHandle, List<QuerySnapshot>> getTransactionQueries()\n+  {\n+    return transactionHandle -> transactionHandle.executingQueries()\n+        .map(ExecutingQuery::snapshot)\n+        .collect(toList());\n+  }\n+\n+  @Description(\"List the active lock requests granted for the transaction executing the query with the given query id.\")\n+  @Procedure(name = \"dbms.listActiveLocks\", mode = DBMS)\n+  public Stream<ActiveLocksResult> listActiveLocks(@Name(\"queryId\") String queryId)\n+      throws InvalidArgumentsException\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+    try\n+    {\n+      long id = fromExternalString(queryId).kernelQueryId();\n+      return getActiveTransactions(tx -> executingQueriesWithId(id, tx))\n+          .flatMap(this::getActiveLocksForQuery);\n+    } catch (UncaughtCheckedException uncaught)\n+    {\n+      throwIfPresent(uncaught.getCauseIfOfType(InvalidArgumentsException.class));\n+      throw uncaught;\n+    }\n+  }\n+\n+  @Description(\"Kill all transactions executing the query with the given query id.\")\n+  @Procedure(name = \"dbms.killQuery\", mode = DBMS)\n+  public Stream<QueryTerminationResult> killQuery(@Name(\"id\") String idText) throws InvalidArgumentsException\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+    try\n+    {\n+      long queryId = fromExternalString(idText).kernelQueryId();\n+\n+      Set<Pair<KernelTransactionHandle, ExecutingQuery>> querys = getActiveTransactions(tx -> executingQueriesWithId(queryId, tx)).collect(toSet());\n+      boolean killQueryVerbose = resolver.resolveDependency(Config.class).get(GraphDatabaseSettings.kill_query_verbose);\n+      if (killQueryVerbose && querys.isEmpty())\n+      {\n+        return Stream.<QueryTerminationResult>builder().add(new QueryFailedTerminationResult(fromExternalString(idText))).build();\n+      }\n+      return querys.stream().map(catchThrown(InvalidArgumentsException.class, this::killQueryTransaction));\n+    } catch (UncaughtCheckedException uncaught)\n+    {\n+      throwIfPresent(uncaught.getCauseIfOfType(InvalidArgumentsException.class));\n+      throw uncaught;\n+    }\n+  }\n+\n+  @Description(\"Kill all transactions executing a query with any of the given query ids.\")\n+  @Procedure(name = \"dbms.killQueries\", mode = DBMS)\n+  public Stream<QueryTerminationResult> killQueries(@Name(\"ids\") List<String> idTexts) throws InvalidArgumentsException\n+  {\n+    securityContext.assertCredentialsNotExpired();\n+    try\n+    {\n+\n+      Set<Long> queryIds = idTexts.stream().map(catchThrown(InvalidArgumentsException.class, QueryId::fromExternalString)).map(\n+          catchThrown(InvalidArgumentsException.class, QueryId::kernelQueryId)).collect(toSet());\n+\n+      Set<QueryTerminationResult> terminatedQuerys = getActiveTransactions(tx -> executingQueriesWithIds(queryIds, tx)).map(\n+          catchThrown(InvalidArgumentsException.class, this::killQueryTransaction)).collect(toSet());\n+      boolean killQueryVerbose = resolver.resolveDependency(Config.class).get(GraphDatabaseSettings.kill_query_verbose);\n+      if (killQueryVerbose && terminatedQuerys.size() != idTexts.size())\n+      {\n+        for (String id : idTexts)\n         {\n-            pair.first().markForTermination( Status.Transaction.Terminated );\n-            return new QueryTerminationResult( ofInternalId( query.internalQueryId() ), query.username() );\n+          if (terminatedQuerys.stream().noneMatch(query -> query.queryId.equals(id)))\n+          {\n+            terminatedQuerys.add(new QueryFailedTerminationResult(fromExternalString(id)));\n+          }\n         }\n-        else\n+      }\n+      return terminatedQuerys.stream();\n+    } catch (UncaughtCheckedException uncaught)\n+    {\n+      throwIfPresent(uncaught.getCauseIfOfType(InvalidArgumentsException.class));\n+      throw uncaught;\n+    }\n+  }\n+\n+  private <T> Stream<Pair<KernelTransactionHandle, T>> getActiveTransactions(\n+      Function<KernelTransactionHandle, Stream<T>> selector\n+  )\n+  {\n+    return getActiveTransactions(graph.getDependencyResolver())\n+        .stream()\n+        .flatMap(tx -> selector.apply(tx).map(data -> Pair.of(tx, data)));\n+  }\n+\n+  private Stream<ExecutingQuery> executingQueriesWithIds(Set<Long> ids, KernelTransactionHandle txHandle)\n+  {\n+    return txHandle.executingQueries().filter(q -> ids.contains(q.internalQueryId()));\n+  }\n+\n+  private Stream<ExecutingQuery> executingQueriesWithId(long id, KernelTransactionHandle txHandle)\n+  {\n+    return txHandle.executingQueries().filter(q -> q.internalQueryId() == id);\n+  }\n+\n+  private QueryTerminationResult killQueryTransaction(Pair<KernelTransactionHandle, ExecutingQuery> pair)\n+      throws InvalidArgumentsException\n+  {\n+    ExecutingQuery query = pair.other();\n+    if (isAdminOrSelf(query.username()))\n+    {\n+      pair.first().markForTermination(Status.Transaction.Terminated);\n+      return new QueryTerminationResult(ofInternalId(query.internalQueryId()), query.username());\n+    } else\n+    {\n+      throw new AuthorizationViolationException(PERMISSION_DENIED);\n+    }\n+  }\n+\n+  private Stream<ActiveLocksResult> getActiveLocksForQuery(Pair<KernelTransactionHandle, ExecutingQuery> pair)\n+  {\n+    ExecutingQuery query = pair.other();\n+    if (isAdminOrSelf(query.username()))\n+    {\n+      return pair.first().activeLocks().map(ActiveLocksResult::new);\n+    } else\n+    {\n+      throw new AuthorizationViolationException(PERMISSION_DENIED);\n+    }\n+  }\n+\n+  private KernelTransactions getKernelTransactions()\n+  {\n+    return resolver.resolveDependency(KernelTransactions.class);\n+  }\n+\n+  // ----------------- helpers ---------------------\n+\n+  public static Stream<TransactionTerminationResult> terminateTransactionsForValidUser(\n+      DependencyResolver dependencyResolver, String username, KernelTransaction currentTx)\n+  {\n+    long terminatedCount = getActiveTransactions(dependencyResolver)\n+        .stream()\n+        .filter(tx -> tx.subject().hasUsername(username) &&\n+            !tx.isUnderlyingTransaction(currentTx))\n+        .map(tx -> tx.markForTermination(Status.Transaction.Terminated))\n+        .filter(marked -> marked)\n+        .count();\n+    return Stream.of(new TransactionTerminationResult(username, terminatedCount));\n+  }\n+\n+  public static Stream<ConnectionResult> terminateConnectionsForValidUser(\n+      DependencyResolver dependencyResolver, String username)\n+  {\n+    Long killCount = getBoltConnectionTracker(dependencyResolver)\n+        .getActiveConnections(username)\n+        .stream().map(conn ->\n         {\n-            throw new AuthorizationViolationException( PERMISSION_DENIED );\n-        }\n-    }\n+          conn.terminate();\n+          return true;\n+        })\n+        .count();\n+    return Stream.of(new ConnectionResult(username, killCount));\n+  }\n+\n+  public static Set<KernelTransactionHandle> getActiveTransactions(DependencyResolver dependencyResolver)\n+  {\n+    return dependencyResolver.resolveDependency(KernelTransactions.class).activeTransactions();\n+  }\n+\n+  public static BoltConnectionTracker getBoltConnectionTracker(DependencyResolver dependencyResolver)\n+  {\n+    return dependencyResolver.resolveDependency(BoltConnectionTracker.class);\n+  }\n+\n+  public static Stream<TransactionResult> countTransactionByUsername(Stream<String> usernames)\n+  {\n+    return usernames\n+        .collect(Collectors.groupingBy(identity(), Collectors.counting()))\n+        .entrySet()\n+        .stream()\n+        .map(entry -> new TransactionResult(entry.getKey(), entry.getValue())\n+        );\n+  }\n \n-    private Stream<ActiveLocksResult> getActiveLocksForQuery( Pair<KernelTransactionHandle, ExecutingQuery> pair )\n-    {\n-        ExecutingQuery query = pair.other();\n-        if ( isAdminOrSelf( query.username() ) )\n-        {\n-            return pair.first().activeLocks().map( ActiveLocksResult::new );\n-        }\n-        else\n-        {\n-            throw new AuthorizationViolationException( PERMISSION_DENIED );\n-        }\n-    }\n+  public static Stream<ConnectionResult> countConnectionsByUsername(Stream<String> usernames)\n+  {\n+    return usernames\n+        .collect(Collectors.groupingBy(identity(), Collectors.counting()))\n+        .entrySet()\n+        .stream()\n+        .map(entry -> new ConnectionResult(entry.getKey(), entry.getValue()));\n+  }\n \n-    private KernelTransactions getKernelTransactions()\n-    {\n-        return resolver.resolveDependency( KernelTransactions.class );\n-    }\n+  private ZoneId getConfiguredTimeZone()\n+  {\n+    Config config = resolver.resolveDependency(Config.class);\n+    return config.get(GraphDatabaseSettings.db_timezone).getZoneId();\n+  }\n \n-    // ----------------- helpers ---------------------\n+  private boolean isAdmin()\n+  {\n+    return securityContext.isAdmin();\n+  }\n \n-    public static Stream<TransactionTerminationResult> terminateTransactionsForValidUser(\n-            DependencyResolver dependencyResolver, String username, KernelTransaction currentTx )\n+  private void assertAdmin()\n+  {\n+    if (!isAdmin())\n     {\n-        long terminatedCount = getActiveTransactions( dependencyResolver )\n-            .stream()\n-            .filter( tx -> tx.subject().hasUsername( username ) &&\n-                            !tx.isUnderlyingTransaction( currentTx ) )\n-            .map( tx -> tx.markForTermination( Status.Transaction.Terminated ) )\n-            .filter( marked -> marked )\n-            .count();\n-        return Stream.of( new TransactionTerminationResult( username, terminatedCount ) );\n+      throw new AuthorizationViolationException(PERMISSION_DENIED);\n     }\n+  }\n \n-    public static Stream<ConnectionResult> terminateConnectionsForValidUser(\n-            DependencyResolver dependencyResolver, String username )\n-    {\n-        Long killCount = getBoltConnectionTracker( dependencyResolver )\n-            .getActiveConnections( username )\n-            .stream().map( conn ->\n-                {\n-                    conn.terminate();\n-                    return true;\n-                } )\n-            .count();\n-        return Stream.of( new ConnectionResult( username, killCount ) );\n-    }\n+  private boolean isAdminOrSelf(String username)\n+  {\n+    return isAdmin() || securityContext.subject().hasUsername(username);\n+  }\n \n-    public static Set<KernelTransactionHandle> getActiveTransactions( DependencyResolver dependencyResolver )\n+  private void assertAdminOrSelf(String username)\n+  {\n+    if (!isAdminOrSelf(username))\n     {\n-        return dependencyResolver.resolveDependency( KernelTransactions.class ).activeTransactions();\n+      throw new AuthorizationViolationException(PERMISSION_DENIED);\n     }\n+  }\n \n-    public static BoltConnectionTracker getBoltConnectionTracker( DependencyResolver dependencyResolver )\n-    {\n-        return dependencyResolver.resolveDependency( BoltConnectionTracker.class );\n-    }\n+  public static class QueryTerminationResult\n+  {\n+    public final String queryId;\n+    public final String username;\n+    public String message = \"Query found\";\n \n-    public static Stream<TransactionResult> countTransactionByUsername( Stream<String> usernames )\n+    public QueryTerminationResult(QueryId queryId, String username)\n     {\n-        return usernames\n-            .collect( Collectors.groupingBy( identity(), Collectors.counting() ) )\n-            .entrySet()\n-            .stream()\n-            .map( entry -> new TransactionResult( entry.getKey(), entry.getValue() )\n-        );\n+      this.queryId = queryId.toString();\n+      this.username = username;\n     }\n+  }\n \n-    public static Stream<ConnectionResult> countConnectionsByUsername( Stream<String> usernames )\n+  public static class QueryFailedTerminationResult extends QueryTerminationResult\n+  {\n+    public QueryFailedTerminationResult(QueryId queryId)\n     {\n-        return usernames\n-            .collect( Collectors.groupingBy( identity(), Collectors.counting() ) )\n-            .entrySet()\n-            .stream()\n-            .map( entry -> new ConnectionResult( entry.getKey(), entry.getValue() ) );\n+      super(queryId, \"n/a\");\n+      super.message = \"No Query found with this id\";\n     }\n+  }\n \n-    private ZoneId getConfiguredTimeZone()\n-    {\n-        Config config = resolver.resolveDependency( Config.class );\n-        return config.get( GraphDatabaseSettings.db_timezone ).getZoneId();\n-    }\n+  public static class TransactionResult\n+  {\n+    public final String username;\n+    public final Long activeTransactions;\n \n-    private boolean isAdmin()\n+    TransactionResult(String username, Long activeTransactions)\n     {\n-        return securityContext.isAdmin();\n+      this.username = username;\n+      this.activeTransactions = activeTransactions;\n     }\n+  }\n \n-    private void assertAdmin()\n-    {\n-        if ( !isAdmin() )\n-        {\n-            throw new AuthorizationViolationException( PERMISSION_DENIED );\n-        }\n-    }\n+  public static class TransactionTerminationResult\n+  {\n+    public final String username;\n+    public final Long transactionsTerminated;\n \n-    private boolean isAdminOrSelf( String username )\n+    TransactionTerminationResult(String username, Long transactionsTerminated)\n     {\n-        return isAdmin() || securityContext.subject().hasUsername( username );\n+      this.username = username;\n+      this.transactionsTerminated = transactionsTerminated;\n     }\n+  }\n \n-    private void assertAdminOrSelf( String username )\n-    {\n-        if ( !isAdminOrSelf( username ) )\n-        {\n-            throw new AuthorizationViolationException( PERMISSION_DENIED );\n-        }\n-    }\n+  public static class ConnectionResult\n+  {\n+    public final String username;\n+    public final Long connectionCount;\n \n-    public static class QueryTerminationResult\n+    ConnectionResult(String username, Long connectionCount)\n     {\n-        public final String queryId;\n-        public final String username;\n-        public String message = \"Query found\";\n-\n-        public QueryTerminationResult( QueryId queryId, String username )\n-        {\n-            this.queryId = queryId.toString();\n-            this.username = username;\n-        }\n+      this.username = username;\n+      this.connectionCount = connectionCount;\n     }\n+  }\n \n-    public static class QueryFailedTerminationResult extends QueryTerminationResult\n-    {\n-        public QueryFailedTerminationResult( QueryId queryId )\n-        {\n-            super( queryId, \"n/a\" );\n-            super.message = \"No Query found with this id\";\n-        }\n-    }\n+  public static class MetadataResult\n+  {\n+    public final Map<String, Object> metadata;\n \n-    public static class TransactionResult\n+    MetadataResult(Map<String, Object> metadata)\n     {\n-        public final String username;\n-        public final Long activeTransactions;\n-\n-        TransactionResult( String username, Long activeTransactions )\n-        {\n-            this.username = username;\n-            this.activeTransactions = activeTransactions;\n-        }\n-    }\n-\n-    public static class TransactionTerminationResult\n-    {\n-        public final String username;\n-        public final Long transactionsTerminated;\n-\n-        TransactionTerminationResult( String username, Long transactionsTerminated )\n-        {\n-            this.username = username;\n-            this.transactionsTerminated = transactionsTerminated;\n-        }\n-    }\n-\n-    public static class ConnectionResult\n-    {\n-        public final String username;\n-        public final Long connectionCount;\n-\n-        ConnectionResult( String username, Long connectionCount )\n-        {\n-            this.username = username;\n-            this.connectionCount = connectionCount;\n-        }\n-    }\n-\n-    public static class MetadataResult\n-    {\n-        public final Map<String,Object> metadata;\n-\n-        MetadataResult( Map<String,Object> metadata )\n-        {\n-            this.metadata = metadata;\n-        }\n+      this.metadata = metadata;\n     }\n+  }\n }\n",
            "diff_size": 737
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "89",
                    "severity": "error",
                    "message": "Annotation 'Procedure' have incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 309).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "244",
                    "column": "102",
                    "severity": "error",
                    "message": "'||' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 234).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "273",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 229).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "290",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "340",
                    "column": "54",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "359",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 222).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "360",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "430",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "432",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 274).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "432",
                    "column": "136",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "460",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "465",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3708/EnterpriseBuiltInDbmsProcedures.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3708/EnterpriseBuiltInDbmsProcedures.java\nindex 00fdaf4ae37..84caac12bb0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3708/EnterpriseBuiltInDbmsProcedures.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3708/EnterpriseBuiltInDbmsProcedures.java\n@@ -84,22 +84,17 @@ public class EnterpriseBuiltInDbmsProcedures\n     @Context\n     public SecurityContext securityContext;\n \n-    @Description( \"Attaches a map of data to the transaction. The data will be printed when listing queries, and \" +\n-                  \"inserted into the query log.\" )\n-    @Procedure( name = \"dbms.setTXMetaData\", mode = DBMS )\n+    @Description( \"Attaches a map of data to the transaction. The data will be printed when listing queries, and \" + \"inserted into the query log.\" )\n+\n+@Procedure( name = \"dbms.setTXMetaData\", mode = DBMS )\n     public void setTXMetaData( @Name( value = \"data\" ) Map<String,Object> data )\n     {\n         securityContext.assertCredentialsNotExpired();\n-        int totalCharSize = data.entrySet().stream()\n-                .mapToInt( e -> e.getKey().length() + e.getValue().toString().length() )\n-                .sum();\n-\n-        if ( totalCharSize >= HARD_CHAR_LIMIT )\n+        int totalCharSize = data.entrySet().stream().mapToInt( e -> e.getKey().length() + e.getValue().toString().length() ).sum();\n+if ( totalCharSize >= HARD_CHAR_LIMIT )\n         {\n-            throw new IllegalArgumentException(\n-                    format( \"Invalid transaction meta-data, expected the total number of chars for \" +\n-                            \"keys and values to be less than %d, got %d\", HARD_CHAR_LIMIT, totalCharSize ) );\n-        }\n+            throw new IllegalArgumentException( format( \"Invalid transaction meta-data, expected the total number of chars for \" + \"keys and values to be less than %d, got %d\", HARD_CHAR_LIMIT, totalCharSize ) );\n+    }\n \n         try ( Statement statement = getCurrentTx().acquireStatement() )\n         {\n@@ -120,8 +115,7 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     private KernelTransaction getCurrentTx()\n     {\n-        return graph.getDependencyResolver().resolveDependency( ThreadToStatementContextBridge.class )\n-                .getKernelTransactionBoundToThisThread( true );\n+        return graph.getDependencyResolver().resolveDependency( ThreadToStatementContextBridge.class ).getKernelTransactionBoundToThisThread( true );\n     }\n \n     /*\n@@ -132,31 +126,22 @@ public class EnterpriseBuiltInDbmsProcedures\n     public Stream<TransactionTerminationResult> terminateTransactionsForUser( @Name( \"username\" ) String username )\n     {\n         assertAdminOrSelf( username );\n-\n-        return terminateTransactionsForValidUser( graph.getDependencyResolver(), username, getCurrentTx() );\n+return terminateTransactionsForValidUser( graph.getDependencyResolver(), username, getCurrentTx() );\n     }\n \n     //@Procedure( name = \"dbms.listConnections\", mode = DBMS )\n     public Stream<ConnectionResult> listConnections()\n     {\n         assertAdmin();\n-\n-        BoltConnectionTracker boltConnectionTracker = getBoltConnectionTracker( graph.getDependencyResolver() );\n-        return countConnectionsByUsername(\n-            boltConnectionTracker\n-                .getActiveConnections()\n-                .stream()\n-                .filter( session -> !session.willTerminate() )\n-                .map( ManagedBoltStateMachine::owner )\n-        );\n+BoltConnectionTracker boltConnectionTracker = getBoltConnectionTracker( graph.getDependencyResolver() );\n+        return countConnectionsByUsername( boltConnectionTracker.getActiveConnections().stream().filter( session -> !session.willTerminate() ).map( ManagedBoltStateMachine::owner ) );\n     }\n \n     //@Procedure( name = \"dbms.terminateConnectionsForUser\", mode = DBMS )\n     public Stream<ConnectionResult> terminateConnectionsForUser( @Name( \"username\" ) String username )\n     {\n         assertAdminOrSelf( username );\n-\n-        return terminateConnectionsForValidUser( graph.getDependencyResolver(), username );\n+return terminateConnectionsForValidUser( graph.getDependencyResolver(), username );\n     }\n \n     /*\n@@ -168,17 +153,18 @@ public class EnterpriseBuiltInDbmsProcedures\n     public Stream<FunctionResult> listFunctions()\n     {\n         securityContext.assertCredentialsNotExpired();\n-        return graph.getDependencyResolver().resolveDependency( Procedures.class ).getAllFunctions().stream()\n-                .sorted( Comparator.comparing( a -> a.name().toString() ) )\n-                .map( FunctionResult::new );\n+        return graph.getDependencyResolver().resolveDependency( Procedures.class ).getAllFunctions().stream().sorted( Comparator.comparing( a -> a.name().toString() ) ).map( FunctionResult::new );\n     }\n \n     public static class FunctionResult\n     {\n         public final String name;\n-        public final String signature;\n-        public final String description;\n-        public final List<String> roles;\n+\n+public final String signature;\n+\n+public final String description;\n+\n+public final List<String> roles;\n \n         private FunctionResult( UserFunctionSignature signature )\n         {\n@@ -196,24 +182,23 @@ public class EnterpriseBuiltInDbmsProcedures\n     {\n         securityContext.assertCredentialsNotExpired();\n         Procedures procedures = graph.getDependencyResolver().resolveDependency( Procedures.class );\n-        return procedures.getAllProcedures().stream()\n-                .sorted( Comparator.comparing( a -> a.name().toString() ) )\n-                .map( ProcedureResult::new );\n+        return procedures.getAllProcedures().stream().sorted( Comparator.comparing( a -> a.name().toString() ) ).map( ProcedureResult::new );\n     }\n \n     @SuppressWarnings( \"WeakerAccess\" )\n     public static class ProcedureResult\n     {\n-        private static final List<String> ADMIN_PROCEDURES =\n-                Arrays.asList( \"createUser\", \"deleteUser\", \"listUsers\", \"clearAuthCache\", \"changeUserPassword\",\n-                        \"addRoleToUser\", \"removeRoleFromUser\", \"suspendUser\", \"activateUser\", \"listRoles\",\n-                        \"listRolesForUser\", \"listUsersForRole\", \"createRole\", \"deleteRole\" );\n+        private static final List<String> ADMIN_PROCEDURES = Arrays.asList( \"createUser\", \"deleteUser\", \"listUsers\", \"clearAuthCache\", \"changeUserPassword\", \"addRoleToUser\", \"removeRoleFromUser\", \"suspendUser\", \"activateUser\", \"listRoles\", \"listRolesForUser\", \"listUsersForRole\", \"createRole\", \"deleteRole\" );\n \n-        public final String name;\n-        public final String signature;\n-        public final String description;\n-        public final List<String> roles;\n-        public final String mode;\n+public final String name;\n+\n+public final String signature;\n+\n+public final String description;\n+\n+public final List<String> roles;\n+\n+public final String mode;\n \n         public ProcedureResult( ProcedureSignature signature )\n         {\n@@ -256,22 +241,19 @@ public class EnterpriseBuiltInDbmsProcedures\n \n         private boolean isAdminProcedure( String procedureName )\n         {\n-            return name.startsWith( \"dbms.security.\" ) && ADMIN_PROCEDURES.contains( procedureName ) ||\n-                    name.equals( \"dbms.listConfig\" ) ||\n+            return name.startsWith( \"dbms.security.\" ) && ADMIN_PROCEDURES.contains( procedureName ) ||name.equals( \"dbms.listConfig\" ) ||\n                     name.equals( \"dbms.setConfigValue\" ) ||\n                     name.equals( \"dbms.clearQueryCaches\" );\n-        }\n+    }\n     }\n \n-    @Description( \"Updates a given setting value. Passing an empty value will result in removing the configured value \" +\n-            \"and falling back to the default value. Changes will not persist and will be lost if the server is restarted.\" )\n+    @Description( \"Updates a given setting value. Passing an empty value will result in removing the configured value \" + \"and falling back to the default value. Changes will not persist and will be lost if the server is restarted.\" )\n     @Procedure( name = \"dbms.setConfigValue\", mode = DBMS )\n     public void setConfigValue( @Name( \"setting\" ) String setting, @Name( \"value\" ) String value )\n     {\n         securityContext.assertCredentialsNotExpired();\n         assertAdmin();\n-\n-        Config config = resolver.resolveDependency( Config.class );\n+Config config = resolver.resolveDependency( Config.class );\n         config.updateDynamicSetting( setting, value, \"dbms.setConfigValue\" ); // throws if something goes wrong\n     }\n \n@@ -284,17 +266,13 @@ public class EnterpriseBuiltInDbmsProcedures\n     public Stream<QueryStatusResult> listQueries() throws InvalidArgumentsException\n     {\n         securityContext.assertCredentialsNotExpired();\n-\n-        EmbeddedProxySPI nodeManager = resolver.resolveDependency( EmbeddedProxySPI.class );\n+EmbeddedProxySPI nodeManager = resolver.resolveDependency( EmbeddedProxySPI.class );\n         ZoneId zoneId = getConfiguredTimeZone();\n         try\n         {\n-            return getKernelTransactions().activeTransactions().stream()\n-                .flatMap( KernelTransactionHandle::executingQueries )\n-                    .filter( query -> isAdminOrSelf( query.username() ) )\n-                    .map( catchThrown( InvalidArgumentsException.class,\n+            return getKernelTransactions().activeTransactions().stream().flatMap( KernelTransactionHandle::executingQueries ).filter( query -> isAdminOrSelf( query.username() ) ).map( catchThrown( InvalidArgumentsException.class,\n                             query -> new QueryStatusResult( query, nodeManager, zoneId ) ) );\n-        }\n+    }\n         catch ( UncaughtCheckedException uncaught )\n         {\n             throwIfPresent( uncaught.getCauseIfOfType( InvalidArgumentsException.class ) );\n@@ -309,23 +287,14 @@ public class EnterpriseBuiltInDbmsProcedures\n         securityContext.assertCredentialsNotExpired();\n         try\n         {\n-            Set<KernelTransactionHandle> handles = getKernelTransactions().activeTransactions().stream()\n-                    .filter( transaction -> isAdminOrSelf( transaction.subject().username() ) )\n-                    .collect( toSet() );\n-\n-            Map<KernelTransactionHandle,List<QuerySnapshot>> handleQuerySnapshotsMap = handles.stream()\n-                    .collect( toMap( identity(), getTransactionQueries() ) );\n-\n-            TransactionDependenciesResolver transactionBlockerResolvers =\n-                    new TransactionDependenciesResolver( handleQuerySnapshotsMap );\n-\n-            ZoneId zoneId = getConfiguredTimeZone();\n-\n-            return handles.stream()\n-                    .map( catchThrown( InvalidArgumentsException.class,\n+            Set<KernelTransactionHandle> handles = getKernelTransactions().activeTransactions().stream().filter( transaction -> isAdminOrSelf( transaction.subject().username() ) ).collect( toSet() );\n+Map<KernelTransactionHandle,List<QuerySnapshot>> handleQuerySnapshotsMap = handles.stream().collect( toMap( identity(), getTransactionQueries() ) );\n+TransactionDependenciesResolver transactionBlockerResolvers = new TransactionDependenciesResolver( handleQuerySnapshotsMap );\n+ZoneId zoneId = getConfiguredTimeZone();\n+return handles.stream().map( catchThrown( InvalidArgumentsException.class,\n                             tx -> new TransactionStatusResult( tx, transactionBlockerResolvers,\n                                     handleQuerySnapshotsMap, zoneId ) ) );\n-        }\n+    }\n         catch ( UncaughtCheckedException uncaught )\n         {\n             throwIfPresent( uncaught.getCauseIfOfType( InvalidArgumentsException.class ) );\n@@ -335,23 +304,19 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     private Function<KernelTransactionHandle,List<QuerySnapshot>> getTransactionQueries()\n     {\n-        return transactionHandle -> transactionHandle.executingQueries()\n-                                              .map( ExecutingQuery::snapshot )\n-                                              .collect( toList() );\n+        return transactionHandle -> transactionHandle.executingQueries().map( ExecutingQuery::snapshot ).collect( toList() );\n     }\n \n     @Description( \"List the active lock requests granted for the transaction executing the query with the given query id.\" )\n     @Procedure( name = \"dbms.listActiveLocks\", mode = DBMS )\n-    public Stream<ActiveLocksResult> listActiveLocks( @Name( \"queryId\" ) String queryId )\n-            throws InvalidArgumentsException\n-    {\n+    public Stream<ActiveLocksResult> listActiveLocks( @Name( \"queryId\" ) String queryId ) throws InvalidArgumentsException\n+{\n         securityContext.assertCredentialsNotExpired();\n         try\n         {\n             long id = fromExternalString( queryId ).kernelQueryId();\n-            return getActiveTransactions( tx -> executingQueriesWithId( id, tx ) )\n-                    .flatMap( this::getActiveLocksForQuery );\n-        }\n+            return getActiveTransactions( tx -> executingQueriesWithId( id, tx ) ).flatMap( this::getActiveLocksForQuery );\n+    }\n         catch ( UncaughtCheckedException uncaught )\n         {\n             throwIfPresent( uncaught.getCauseIfOfType( InvalidArgumentsException.class ) );\n@@ -372,9 +337,10 @@ public class EnterpriseBuiltInDbmsProcedures\n             boolean killQueryVerbose = resolver.resolveDependency( Config.class ).get( GraphDatabaseSettings.kill_query_verbose );\n             if ( killQueryVerbose && querys.isEmpty() )\n             {\n-                return Stream.<QueryTerminationResult>builder().add( new QueryFailedTerminationResult( fromExternalString( idText ) ) ).build();\n+                return Stream.<QueryTerminationResult> builder().add( new QueryFailedTerminationResult( fromExternalString( idText ) ) ).build();\n             }\n-            return querys.stream().map( catchThrown( InvalidArgumentsException.class, this::killQueryTransaction ) );\n+\n+return querys.stream().map( catchThrown( InvalidArgumentsException.class, this::killQueryTransaction ) );\n         }\n         catch ( UncaughtCheckedException uncaught )\n         {\n@@ -390,13 +356,9 @@ public class EnterpriseBuiltInDbmsProcedures\n         securityContext.assertCredentialsNotExpired();\n         try\n         {\n-\n-            Set<Long> queryIds = idTexts.stream().map( catchThrown( InvalidArgumentsException.class, QueryId::fromExternalString ) ).map(\n-                    catchThrown( InvalidArgumentsException.class, QueryId::kernelQueryId ) ).collect( toSet() );\n-\n-            Set<QueryTerminationResult> terminatedQuerys = getActiveTransactions( tx -> executingQueriesWithIds( queryIds, tx ) ).map(\n-                    catchThrown( InvalidArgumentsException.class, this::killQueryTransaction ) ).collect( toSet() );\n-            boolean killQueryVerbose = resolver.resolveDependency( Config.class ).get( GraphDatabaseSettings.kill_query_verbose );\n+    Set<Long> queryIds = idTexts.stream().map( catchThrown( InvalidArgumentsException.class, QueryId::fromExternalString ) ).map( catchThrown( InvalidArgumentsException.class, QueryId::kernelQueryId ) ).collect( toSet() );\n+Set<QueryTerminationResult> terminatedQuerys = getActiveTransactions( tx -> executingQueriesWithIds( queryIds, tx ) ).map( catchThrown( InvalidArgumentsException.class, this::killQueryTransaction ) ).collect( toSet() );\n+    boolean killQueryVerbose = resolver.resolveDependency( Config.class ).get( GraphDatabaseSettings.kill_query_verbose );\n             if ( killQueryVerbose && terminatedQuerys.size() != idTexts.size() )\n             {\n                 for ( String id : idTexts )\n@@ -416,13 +378,9 @@ public class EnterpriseBuiltInDbmsProcedures\n         }\n     }\n \n-    private <T> Stream<Pair<KernelTransactionHandle, T>> getActiveTransactions(\n-            Function<KernelTransactionHandle,Stream<T>> selector\n-    )\n+    private <T> Stream<Pair<KernelTransactionHandle, T>> getActiveTransactions( Function<KernelTransactionHandle,Stream<T>> selector )\n     {\n-        return getActiveTransactions( graph.getDependencyResolver() )\n-            .stream()\n-            .flatMap( tx -> selector.apply( tx ).map( data -> Pair.of( tx, data ) ) );\n+        return getActiveTransactions( graph.getDependencyResolver() ).stream().flatMap( tx -> selector.apply( tx ).map( data -> Pair.of( tx, data ) ) );\n     }\n \n     private Stream<ExecutingQuery> executingQueriesWithIds( Set<Long> ids, KernelTransactionHandle txHandle )\n@@ -435,9 +393,8 @@ public class EnterpriseBuiltInDbmsProcedures\n         return txHandle.executingQueries().filter( q -> q.internalQueryId() == id );\n     }\n \n-    private QueryTerminationResult killQueryTransaction( Pair<KernelTransactionHandle, ExecutingQuery> pair )\n-            throws InvalidArgumentsException\n-    {\n+    private QueryTerminationResult killQueryTransaction( Pair<KernelTransactionHandle,ExecutingQuery> pair ) throws InvalidArgumentsException\n+{\n         ExecutingQuery query = pair.other();\n         if ( isAdminOrSelf( query.username() ) )\n         {\n@@ -450,7 +407,7 @@ public class EnterpriseBuiltInDbmsProcedures\n         }\n     }\n \n-    private Stream<ActiveLocksResult> getActiveLocksForQuery( Pair<KernelTransactionHandle, ExecutingQuery> pair )\n+    private Stream<ActiveLocksResult> getActiveLocksForQuery( Pair<KernelTransactionHandle,ExecutingQuery> pair )\n     {\n         ExecutingQuery query = pair.other();\n         if ( isAdminOrSelf( query.username() ) )\n@@ -470,31 +427,22 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     // ----------------- helpers ---------------------\n \n-    public static Stream<TransactionTerminationResult> terminateTransactionsForValidUser(\n-            DependencyResolver dependencyResolver, String username, KernelTransaction currentTx )\n+    public static Stream<TransactionTerminationResult> terminateTransactionsForValidUser( DependencyResolver dependencyResolver, String username, KernelTransaction currentTx )\n     {\n-        long terminatedCount = getActiveTransactions( dependencyResolver )\n-            .stream()\n-            .filter( tx -> tx.subject().hasUsername( username ) &&\n-                            !tx.isUnderlyingTransaction( currentTx ) )\n-            .map( tx -> tx.markForTermination( Status.Transaction.Terminated ) )\n-            .filter( marked -> marked )\n+        long terminatedCount = getActiveTransactions( dependencyResolver ).stream().filter( tx -> tx.subject().hasUsername( username ) &&!tx.isUnderlyingTransaction( currentTx ) ).map( tx -> tx.markForTermination( Status.Transaction.Terminated ) ).filter( marked -> marked )\n             .count();\n-        return Stream.of( new TransactionTerminationResult( username, terminatedCount ) );\n+return Stream.of( new TransactionTerminationResult( username, terminatedCount ) );\n     }\n \n-    public static Stream<ConnectionResult> terminateConnectionsForValidUser(\n-            DependencyResolver dependencyResolver, String username )\n+    public static Stream<ConnectionResult> terminateConnectionsForValidUser( DependencyResolver dependencyResolver, String username )\n     {\n-        Long killCount = getBoltConnectionTracker( dependencyResolver )\n-            .getActiveConnections( username )\n+        Long killCount = getBoltConnectionTracker( dependencyResolver ).getActiveConnections( username )\n             .stream().map( conn ->\n-                {\n+{\n                     conn.terminate();\n                     return true;\n-                } )\n-            .count();\n-        return Stream.of( new ConnectionResult( username, killCount ) );\n+                } ).count();\n+return Stream.of( new ConnectionResult( username, killCount ) );\n     }\n \n     public static Set<KernelTransactionHandle> getActiveTransactions( DependencyResolver dependencyResolver )\n@@ -509,21 +457,12 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     public static Stream<TransactionResult> countTransactionByUsername( Stream<String> usernames )\n     {\n-        return usernames\n-            .collect( Collectors.groupingBy( identity(), Collectors.counting() ) )\n-            .entrySet()\n-            .stream()\n-            .map( entry -> new TransactionResult( entry.getKey(), entry.getValue() )\n-        );\n+        return usernames.collect( Collectors.groupingBy( identity(), Collectors.counting() ) ).entrySet().stream().map( entry -> new TransactionResult( entry.getKey(), entry.getValue() ) );\n     }\n \n     public static Stream<ConnectionResult> countConnectionsByUsername( Stream<String> usernames )\n     {\n-        return usernames\n-            .collect( Collectors.groupingBy( identity(), Collectors.counting() ) )\n-            .entrySet()\n-            .stream()\n-            .map( entry -> new ConnectionResult( entry.getKey(), entry.getValue() ) );\n+        return usernames.collect( Collectors.groupingBy( identity(), Collectors.counting() ) ).entrySet().stream().map( entry -> new ConnectionResult( entry.getKey(), entry.getValue() ) );\n     }\n \n     private ZoneId getConfiguredTimeZone()\n@@ -561,7 +500,8 @@ public class EnterpriseBuiltInDbmsProcedures\n     public static class QueryTerminationResult\n     {\n         public final String queryId;\n-        public final String username;\n+\n+public final String username;\n         public String message = \"Query found\";\n \n         public QueryTerminationResult( QueryId queryId, String username )\n@@ -583,7 +523,8 @@ public class EnterpriseBuiltInDbmsProcedures\n     public static class TransactionResult\n     {\n         public final String username;\n-        public final Long activeTransactions;\n+\n+public final Long activeTransactions;\n \n         TransactionResult( String username, Long activeTransactions )\n         {\n@@ -595,7 +536,8 @@ public class EnterpriseBuiltInDbmsProcedures\n     public static class TransactionTerminationResult\n     {\n         public final String username;\n-        public final Long transactionsTerminated;\n+\n+public final Long transactionsTerminated;\n \n         TransactionTerminationResult( String username, Long transactionsTerminated )\n         {\n@@ -607,7 +549,8 @@ public class EnterpriseBuiltInDbmsProcedures\n     public static class ConnectionResult\n     {\n         public final String username;\n-        public final Long connectionCount;\n+\n+public final Long connectionCount;\n \n         ConnectionResult( String username, Long connectionCount )\n         {\n@@ -625,4 +568,4 @@ public class EnterpriseBuiltInDbmsProcedures\n             this.metadata = metadata;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 147
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "81",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "Annotation 'Context' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "Annotation 'Context' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Annotation 'Context' should be alone on line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.annotation.AnnotationLocationCheck"
                },
                {
                    "line": "88",
                    "column": "149",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 309).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "250",
                    "column": "55",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "250",
                    "column": "100",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "250",
                    "column": "135",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "250",
                    "column": "174",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "254",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 234).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "254",
                    "column": "234",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 295).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "286",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "297",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "311",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "34",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "340",
                    "column": "32",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "352",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "360",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 232).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "362",
                    "column": "34",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "364",
                    "column": "17",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "364",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "433",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 284).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "433",
                    "column": "135",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "459",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "464",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "488",
                    "column": "25",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3708/EnterpriseBuiltInDbmsProcedures.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3708/EnterpriseBuiltInDbmsProcedures.java\nindex 00fdaf4ae37..9bddc3a6567 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3708/EnterpriseBuiltInDbmsProcedures.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3708/EnterpriseBuiltInDbmsProcedures.java\n@@ -29,7 +29,6 @@ import java.util.Set;\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n-\n import org.neo4j.function.UncaughtCheckedException;\n import org.neo4j.graphdb.DependencyResolver;\n import org.neo4j.graphdb.factory.GraphDatabaseSettings;\n@@ -57,62 +56,60 @@ import org.neo4j.procedure.Context;\n import org.neo4j.procedure.Description;\n import org.neo4j.procedure.Name;\n import org.neo4j.procedure.Procedure;\n-\n import static java.lang.String.format;\n+\n import static java.util.function.Function.identity;\n+\n import static java.util.stream.Collectors.toList;\n+\n import static java.util.stream.Collectors.toMap;\n+\n import static java.util.stream.Collectors.toSet;\n+\n import static org.neo4j.function.ThrowingFunction.catchThrown;\n+\n import static org.neo4j.function.ThrowingFunction.throwIfPresent;\n+\n import static org.neo4j.graphdb.security.AuthorizationViolationException.PERMISSION_DENIED;\n+\n import static org.neo4j.kernel.enterprise.builtinprocs.QueryId.fromExternalString;\n+\n import static org.neo4j.kernel.enterprise.builtinprocs.QueryId.ofInternalId;\n+\n import static org.neo4j.procedure.Mode.DBMS;\n \n-@SuppressWarnings( \"unused\" )\n+@ SuppressWarnings( \"unused\")\n public class EnterpriseBuiltInDbmsProcedures\n {\n     private static final int HARD_CHAR_LIMIT = 2048;\n-\n-    @Context\n-    public DependencyResolver resolver;\n-\n-    @Context\n-    public GraphDatabaseAPI graph;\n-\n-    @Context\n-    public SecurityContext securityContext;\n-\n-    @Description( \"Attaches a map of data to the transaction. The data will be printed when listing queries, and \" +\n-                  \"inserted into the query log.\" )\n-    @Procedure( name = \"dbms.setTXMetaData\", mode = DBMS )\n-    public void setTXMetaData( @Name( value = \"data\" ) Map<String,Object> data )\n+    @Context public DependencyResolver resolver;\n+    @Context public GraphDatabaseAPI graph;\n+    @Context public SecurityContext securityContext;\n+    @ Description( \"Attaches a map of data to the transaction. The data will be printed when listing queries, and \" + \"inserted into the query log.\")\n+    @ Procedure( name = \"dbms.setTXMetaData\", mode = DBMS )\n+    public void setTXMetaData( @ Name( value = \"data\") Map<String,Object> data )\n     {\n         securityContext.assertCredentialsNotExpired();\n-        int totalCharSize = data.entrySet().stream()\n-                .mapToInt( e -> e.getKey().length() + e.getValue().toString().length() )\n-                .sum();\n-\n+        int totalCharSize = data.entrySet().stream().mapToInt( e -> e.getKey().length() + e.getValue().toString().length() ).sum();\n         if ( totalCharSize >= HARD_CHAR_LIMIT )\n         {\n-            throw new IllegalArgumentException(\n-                    format( \"Invalid transaction meta-data, expected the total number of chars for \" +\n-                            \"keys and values to be less than %d, got %d\", HARD_CHAR_LIMIT, totalCharSize ) );\n+            throw new IllegalArgumentException( format( \"Invalid transaction meta-data, expected the total number of chars for \" + \"keys and values to be less than %d, got %d\", HARD_CHAR_LIMIT, totalCharSize ) );\n         }\n \n-        try ( Statement statement = getCurrentTx().acquireStatement() )\n+        try\n+        ( Statement statement = getCurrentTx().acquireStatement())\n         {\n             statement.queryRegistration().setMetaData( data );\n         }\n     }\n \n-    @Description( \"Provides attached transaction metadata.\" )\n-    @Procedure( name = \"dbms.getTXMetaData\", mode = DBMS )\n+    @ Description( \"Provides attached transaction metadata.\")\n+    @ Procedure( name = \"dbms.getTXMetaData\", mode = DBMS )\n     public Stream<MetadataResult> getTXMetaData()\n     {\n         securityContext.assertCredentialsNotExpired();\n-        try ( Statement statement = getCurrentTx().acquireStatement() )\n+        try\n+        ( Statement statement = getCurrentTx().acquireStatement())\n         {\n             return Stream.of( statement.queryRegistration().getMetaData() ).map( MetadataResult::new );\n         }\n@@ -120,8 +117,7 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     private KernelTransaction getCurrentTx()\n     {\n-        return graph.getDependencyResolver().resolveDependency( ThreadToStatementContextBridge.class )\n-                .getKernelTransactionBoundToThisThread( true );\n+        return graph.getDependencyResolver().resolveDependency( ThreadToStatementContextBridge.class ).getKernelTransactionBoundToThisThread( true );\n     }\n \n     /*\n@@ -129,33 +125,27 @@ public class EnterpriseBuiltInDbmsProcedures\n     ==================================================================================\n      */\n     //@Procedure( name = \"dbms.terminateTransactionsForUser\", mode = DBMS )\n-    public Stream<TransactionTerminationResult> terminateTransactionsForUser( @Name( \"username\" ) String username )\n+\n+    public Stream<TransactionTerminationResult> terminateTransactionsForUser( @ Name( \"username\") String username )\n     {\n         assertAdminOrSelf( username );\n-\n         return terminateTransactionsForValidUser( graph.getDependencyResolver(), username, getCurrentTx() );\n     }\n \n     //@Procedure( name = \"dbms.listConnections\", mode = DBMS )\n+\n     public Stream<ConnectionResult> listConnections()\n     {\n         assertAdmin();\n-\n         BoltConnectionTracker boltConnectionTracker = getBoltConnectionTracker( graph.getDependencyResolver() );\n-        return countConnectionsByUsername(\n-            boltConnectionTracker\n-                .getActiveConnections()\n-                .stream()\n-                .filter( session -> !session.willTerminate() )\n-                .map( ManagedBoltStateMachine::owner )\n-        );\n+        return countConnectionsByUsername( boltConnectionTracker.getActiveConnections().stream().filter( session -> ! session.willTerminate() ).map( ManagedBoltStateMachine::owner ) );\n     }\n \n     //@Procedure( name = \"dbms.terminateConnectionsForUser\", mode = DBMS )\n-    public Stream<ConnectionResult> terminateConnectionsForUser( @Name( \"username\" ) String username )\n+\n+    public Stream<ConnectionResult> terminateConnectionsForUser( @ Name( \"username\") String username )\n     {\n         assertAdminOrSelf( username );\n-\n         return terminateConnectionsForValidUser( graph.getDependencyResolver(), username );\n     }\n \n@@ -163,21 +153,22 @@ public class EnterpriseBuiltInDbmsProcedures\n     ==================================================================================\n      */\n \n-    @Description( \"List all user functions in the DBMS.\" )\n-    @Procedure( name = \"dbms.functions\", mode = DBMS )\n+    @ Description( \"List all user functions in the DBMS.\")\n+    @ Procedure( name = \"dbms.functions\", mode = DBMS )\n     public Stream<FunctionResult> listFunctions()\n     {\n         securityContext.assertCredentialsNotExpired();\n-        return graph.getDependencyResolver().resolveDependency( Procedures.class ).getAllFunctions().stream()\n-                .sorted( Comparator.comparing( a -> a.name().toString() ) )\n-                .map( FunctionResult::new );\n+        return graph.getDependencyResolver().resolveDependency( Procedures.class ).getAllFunctions().stream().sorted( Comparator.comparing( a -> a.name().toString() ) ).map( FunctionResult::new );\n     }\n \n     public static class FunctionResult\n     {\n         public final String name;\n+\n         public final String signature;\n+\n         public final String description;\n+\n         public final List<String> roles;\n \n         private FunctionResult( UserFunctionSignature signature )\n@@ -190,29 +181,28 @@ public class EnterpriseBuiltInDbmsProcedures\n         }\n     }\n \n-    @Description( \"List all procedures in the DBMS.\" )\n-    @Procedure( name = \"dbms.procedures\", mode = DBMS )\n+    @ Description( \"List all procedures in the DBMS.\")\n+    @ Procedure( name = \"dbms.procedures\", mode = DBMS )\n     public Stream<ProcedureResult> listProcedures()\n     {\n         securityContext.assertCredentialsNotExpired();\n         Procedures procedures = graph.getDependencyResolver().resolveDependency( Procedures.class );\n-        return procedures.getAllProcedures().stream()\n-                .sorted( Comparator.comparing( a -> a.name().toString() ) )\n-                .map( ProcedureResult::new );\n+        return procedures.getAllProcedures().stream().sorted( Comparator.comparing( a -> a.name().toString() ) ).map( ProcedureResult::new );\n     }\n \n-    @SuppressWarnings( \"WeakerAccess\" )\n-    public static class ProcedureResult\n+    @ SuppressWarnings( \"WeakerAccess\")\n+public static class ProcedureResult\n     {\n-        private static final List<String> ADMIN_PROCEDURES =\n-                Arrays.asList( \"createUser\", \"deleteUser\", \"listUsers\", \"clearAuthCache\", \"changeUserPassword\",\n-                        \"addRoleToUser\", \"removeRoleFromUser\", \"suspendUser\", \"activateUser\", \"listRoles\",\n-                        \"listRolesForUser\", \"listUsersForRole\", \"createRole\", \"deleteRole\" );\n+        private static final List<String> ADMIN_PROCEDURES = Arrays.asList( \"createUser\", \"deleteUser\", \"listUsers\", \"clearAuthCache\", \"changeUserPassword\", \"addRoleToUser\", \"removeRoleFromUser\", \"suspendUser\", \"activateUser\", \"listRoles\", \"listRolesForUser\", \"listUsersForRole\", \"createRole\", \"deleteRole\" );\n \n         public final String name;\n+\n         public final String signature;\n+\n         public final String description;\n+\n         public final List<String> roles;\n+\n         public final String mode;\n \n         public ProcedureResult( ProcedureSignature signature )\n@@ -239,6 +229,7 @@ public class EnterpriseBuiltInDbmsProcedures\n                     roles.add( \"admin\" );\n                     roles.addAll( Arrays.asList( signature.allowed() ) );\n                 }\n+\n                 break;\n             case DEFAULT:\n             case READ:\n@@ -256,21 +247,16 @@ public class EnterpriseBuiltInDbmsProcedures\n \n         private boolean isAdminProcedure( String procedureName )\n         {\n-            return name.startsWith( \"dbms.security.\" ) && ADMIN_PROCEDURES.contains( procedureName ) ||\n-                    name.equals( \"dbms.listConfig\" ) ||\n-                    name.equals( \"dbms.setConfigValue\" ) ||\n-                    name.equals( \"dbms.clearQueryCaches\" );\n+            return name.startsWith( \"dbms.security.\" )&& ADMIN_PROCEDURES.contains( procedureName )|| name.equals( \"dbms.listConfig\" )|| name.equals( \"dbms.setConfigValue\" )|| name.equals( \"dbms.clearQueryCaches\" );\n         }\n     }\n \n-    @Description( \"Updates a given setting value. Passing an empty value will result in removing the configured value \" +\n-            \"and falling back to the default value. Changes will not persist and will be lost if the server is restarted.\" )\n-    @Procedure( name = \"dbms.setConfigValue\", mode = DBMS )\n-    public void setConfigValue( @Name( \"setting\" ) String setting, @Name( \"value\" ) String value )\n+    @ Description( \"Updates a given setting value. Passing an empty value will result in removing the configured value \" + \"and falling back to the default value. Changes will not persist and will be lost if the server is restarted.\")\n+    @ Procedure( name = \"dbms.setConfigValue\", mode = DBMS )\n+    public void setConfigValue( @ Name( \"setting\") String setting, @ Name( \"value\") String value )\n     {\n         securityContext.assertCredentialsNotExpired();\n         assertAdmin();\n-\n         Config config = resolver.resolveDependency( Config.class );\n         config.updateDynamicSetting( setting, value, \"dbms.setConfigValue\" ); // throws if something goes wrong\n     }\n@@ -279,21 +265,16 @@ public class EnterpriseBuiltInDbmsProcedures\n     ==================================================================================\n      */\n \n-    @Description( \"List all queries currently executing at this instance that are visible to the user.\" )\n-    @Procedure( name = \"dbms.listQueries\", mode = DBMS )\n+    @ Description( \"List all queries currently executing at this instance that are visible to the user.\")\n+    @ Procedure( name = \"dbms.listQueries\", mode = DBMS )\n     public Stream<QueryStatusResult> listQueries() throws InvalidArgumentsException\n     {\n         securityContext.assertCredentialsNotExpired();\n-\n         EmbeddedProxySPI nodeManager = resolver.resolveDependency( EmbeddedProxySPI.class );\n         ZoneId zoneId = getConfiguredTimeZone();\n         try\n         {\n-            return getKernelTransactions().activeTransactions().stream()\n-                .flatMap( KernelTransactionHandle::executingQueries )\n-                    .filter( query -> isAdminOrSelf( query.username() ) )\n-                    .map( catchThrown( InvalidArgumentsException.class,\n-                            query -> new QueryStatusResult( query, nodeManager, zoneId ) ) );\n+            return getKernelTransactions().activeTransactions().stream().flatMap( KernelTransactionHandle::executingQueries ).filter( query -> isAdminOrSelf( query.username() ) ).map( catchThrown( InvalidArgumentsException.class, query -> new QueryStatusResult( query, nodeManager, zoneId ) ) );\n         }\n         catch ( UncaughtCheckedException uncaught )\n         {\n@@ -302,29 +283,18 @@ public class EnterpriseBuiltInDbmsProcedures\n         }\n     }\n \n-    @Description( \"List all transactions currently executing at this instance that are visible to the user.\" )\n-    @Procedure( name = \"dbms.listTransactions\", mode = DBMS )\n+    @ Description( \"List all transactions currently executing at this instance that are visible to the user.\")\n+    @ Procedure( name = \"dbms.listTransactions\", mode = DBMS )\n     public Stream<TransactionStatusResult> listTransactions() throws InvalidArgumentsException\n     {\n         securityContext.assertCredentialsNotExpired();\n         try\n         {\n-            Set<KernelTransactionHandle> handles = getKernelTransactions().activeTransactions().stream()\n-                    .filter( transaction -> isAdminOrSelf( transaction.subject().username() ) )\n-                    .collect( toSet() );\n-\n-            Map<KernelTransactionHandle,List<QuerySnapshot>> handleQuerySnapshotsMap = handles.stream()\n-                    .collect( toMap( identity(), getTransactionQueries() ) );\n-\n-            TransactionDependenciesResolver transactionBlockerResolvers =\n-                    new TransactionDependenciesResolver( handleQuerySnapshotsMap );\n-\n+            Set<KernelTransactionHandle> handles = getKernelTransactions().activeTransactions().stream().filter( transaction -> isAdminOrSelf( transaction.subject().username() ) ).collect( toSet() );\n+            Map<KernelTransactionHandle,List<QuerySnapshot>> handleQuerySnapshotsMap = handles.stream().collect( toMap( identity(), getTransactionQueries() ) );\n+            TransactionDependenciesResolver transactionBlockerResolvers = new TransactionDependenciesResolver( handleQuerySnapshotsMap );\n             ZoneId zoneId = getConfiguredTimeZone();\n-\n-            return handles.stream()\n-                    .map( catchThrown( InvalidArgumentsException.class,\n-                            tx -> new TransactionStatusResult( tx, transactionBlockerResolvers,\n-                                    handleQuerySnapshotsMap, zoneId ) ) );\n+            return handles.stream().map( catchThrown( InvalidArgumentsException.class, tx -> new TransactionStatusResult( tx, transactionBlockerResolvers, handleQuerySnapshotsMap, zoneId ) ) );\n         }\n         catch ( UncaughtCheckedException uncaught )\n         {\n@@ -335,22 +305,18 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     private Function<KernelTransactionHandle,List<QuerySnapshot>> getTransactionQueries()\n     {\n-        return transactionHandle -> transactionHandle.executingQueries()\n-                                              .map( ExecutingQuery::snapshot )\n-                                              .collect( toList() );\n+        return transactionHandle -> transactionHandle.executingQueries().map( ExecutingQuery::snapshot ).collect( toList() );\n     }\n \n-    @Description( \"List the active lock requests granted for the transaction executing the query with the given query id.\" )\n-    @Procedure( name = \"dbms.listActiveLocks\", mode = DBMS )\n-    public Stream<ActiveLocksResult> listActiveLocks( @Name( \"queryId\" ) String queryId )\n-            throws InvalidArgumentsException\n+    @ Description( \"List the active lock requests granted for the transaction executing the query with the given query id.\")\n+    @ Procedure( name = \"dbms.listActiveLocks\", mode = DBMS )\n+    public Stream<ActiveLocksResult> listActiveLocks( @ Name( \"queryId\") String queryId ) throws InvalidArgumentsException\n     {\n         securityContext.assertCredentialsNotExpired();\n         try\n         {\n             long id = fromExternalString( queryId ).kernelQueryId();\n-            return getActiveTransactions( tx -> executingQueriesWithId( id, tx ) )\n-                    .flatMap( this::getActiveLocksForQuery );\n+            return getActiveTransactions( tx -> executingQueriesWithId( id, tx ) ).flatMap( this:: getActiveLocksForQuery );\n         }\n         catch ( UncaughtCheckedException uncaught )\n         {\n@@ -359,22 +325,22 @@ public class EnterpriseBuiltInDbmsProcedures\n         }\n     }\n \n-    @Description( \"Kill all transactions executing the query with the given query id.\" )\n-    @Procedure( name = \"dbms.killQuery\", mode = DBMS )\n-    public Stream<QueryTerminationResult> killQuery( @Name( \"id\" ) String idText ) throws InvalidArgumentsException\n+    @ Description( \"Kill all transactions executing the query with the given query id.\")\n+    @ Procedure( name = \"dbms.killQuery\", mode = DBMS )\n+    public Stream<QueryTerminationResult> killQuery( @ Name( \"id\") String idText ) throws InvalidArgumentsException\n     {\n         securityContext.assertCredentialsNotExpired();\n         try\n         {\n             long queryId = fromExternalString( idText ).kernelQueryId();\n-\n             Set<Pair<KernelTransactionHandle,ExecutingQuery>> querys = getActiveTransactions( tx -> executingQueriesWithId( queryId, tx ) ).collect( toSet() );\n             boolean killQueryVerbose = resolver.resolveDependency( Config.class ).get( GraphDatabaseSettings.kill_query_verbose );\n-            if ( killQueryVerbose && querys.isEmpty() )\n+            if ( killQueryVerbose&& querys.isEmpty() )\n             {\n-                return Stream.<QueryTerminationResult>builder().add( new QueryFailedTerminationResult( fromExternalString( idText ) ) ).build();\n+                return Stream. <QueryTerminationResult>builder().add( new QueryFailedTerminationResult( fromExternalString( idText ) ) ).build();\n             }\n-            return querys.stream().map( catchThrown( InvalidArgumentsException.class, this::killQueryTransaction ) );\n+\n+            return querys.stream().map( catchThrown( InvalidArgumentsException.class, this:: killQueryTransaction ) );\n         }\n         catch ( UncaughtCheckedException uncaught )\n         {\n@@ -383,23 +349,19 @@ public class EnterpriseBuiltInDbmsProcedures\n         }\n     }\n \n-    @Description( \"Kill all transactions executing a query with any of the given query ids.\" )\n-    @Procedure( name = \"dbms.killQueries\", mode = DBMS )\n-    public Stream<QueryTerminationResult> killQueries( @Name( \"ids\" ) List<String> idTexts ) throws InvalidArgumentsException\n+    @ Description( \"Kill all transactions executing a query with any of the given query ids.\")\n+    @ Procedure( name = \"dbms.killQueries\", mode = DBMS )\n+    public Stream<QueryTerminationResult> killQueries( @ Name( \"ids\") List<String> idTexts ) throws InvalidArgumentsException\n     {\n         securityContext.assertCredentialsNotExpired();\n         try\n         {\n-\n-            Set<Long> queryIds = idTexts.stream().map( catchThrown( InvalidArgumentsException.class, QueryId::fromExternalString ) ).map(\n-                    catchThrown( InvalidArgumentsException.class, QueryId::kernelQueryId ) ).collect( toSet() );\n-\n-            Set<QueryTerminationResult> terminatedQuerys = getActiveTransactions( tx -> executingQueriesWithIds( queryIds, tx ) ).map(\n-                    catchThrown( InvalidArgumentsException.class, this::killQueryTransaction ) ).collect( toSet() );\n+            Set<Long> queryIds = idTexts.stream().map( catchThrown( InvalidArgumentsException.class, QueryId::fromExternalString ) ).map( catchThrown( InvalidArgumentsException.class, QueryId::kernelQueryId ) ).collect( toSet() );\n+            Set<QueryTerminationResult> terminatedQuerys = getActiveTransactions( tx -> executingQueriesWithIds( queryIds, tx ) ).map( catchThrown( InvalidArgumentsException.class, this:: killQueryTransaction ) ).collect( toSet() );\n             boolean killQueryVerbose = resolver.resolveDependency( Config.class ).get( GraphDatabaseSettings.kill_query_verbose );\n-            if ( killQueryVerbose && terminatedQuerys.size() != idTexts.size() )\n+            if ( killQueryVerbose&& terminatedQuerys.size() != idTexts.size() )\n             {\n-                for ( String id : idTexts )\n+                for( String id : idTexts)\n                 {\n                     if ( terminatedQuerys.stream().noneMatch( query -> query.queryId.equals( id ) ) )\n                     {\n@@ -407,6 +369,7 @@ public class EnterpriseBuiltInDbmsProcedures\n                     }\n                 }\n             }\n+\n             return terminatedQuerys.stream();\n         }\n         catch ( UncaughtCheckedException uncaught )\n@@ -416,13 +379,9 @@ public class EnterpriseBuiltInDbmsProcedures\n         }\n     }\n \n-    private <T> Stream<Pair<KernelTransactionHandle, T>> getActiveTransactions(\n-            Function<KernelTransactionHandle,Stream<T>> selector\n-    )\n+    private <T> Stream<Pair<KernelTransactionHandle,T>> getActiveTransactions( Function<KernelTransactionHandle,Stream<T>> selector )\n     {\n-        return getActiveTransactions( graph.getDependencyResolver() )\n-            .stream()\n-            .flatMap( tx -> selector.apply( tx ).map( data -> Pair.of( tx, data ) ) );\n+        return getActiveTransactions( graph.getDependencyResolver() ).stream().flatMap( tx -> selector.apply( tx ).map( data -> Pair.of( tx, data ) ) );\n     }\n \n     private Stream<ExecutingQuery> executingQueriesWithIds( Set<Long> ids, KernelTransactionHandle txHandle )\n@@ -435,8 +394,7 @@ public class EnterpriseBuiltInDbmsProcedures\n         return txHandle.executingQueries().filter( q -> q.internalQueryId() == id );\n     }\n \n-    private QueryTerminationResult killQueryTransaction( Pair<KernelTransactionHandle, ExecutingQuery> pair )\n-            throws InvalidArgumentsException\n+    private QueryTerminationResult killQueryTransaction( Pair<KernelTransactionHandle,ExecutingQuery> pair ) throws InvalidArgumentsException\n     {\n         ExecutingQuery query = pair.other();\n         if ( isAdminOrSelf( query.username() ) )\n@@ -450,7 +408,7 @@ public class EnterpriseBuiltInDbmsProcedures\n         }\n     }\n \n-    private Stream<ActiveLocksResult> getActiveLocksForQuery( Pair<KernelTransactionHandle, ExecutingQuery> pair )\n+    private Stream<ActiveLocksResult> getActiveLocksForQuery( Pair<KernelTransactionHandle,ExecutingQuery> pair )\n     {\n         ExecutingQuery query = pair.other();\n         if ( isAdminOrSelf( query.username() ) )\n@@ -470,30 +428,19 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     // ----------------- helpers ---------------------\n \n-    public static Stream<TransactionTerminationResult> terminateTransactionsForValidUser(\n-            DependencyResolver dependencyResolver, String username, KernelTransaction currentTx )\n+    public static Stream<TransactionTerminationResult> terminateTransactionsForValidUser( DependencyResolver dependencyResolver, String username, KernelTransaction currentTx )\n     {\n-        long terminatedCount = getActiveTransactions( dependencyResolver )\n-            .stream()\n-            .filter( tx -> tx.subject().hasUsername( username ) &&\n-                            !tx.isUnderlyingTransaction( currentTx ) )\n-            .map( tx -> tx.markForTermination( Status.Transaction.Terminated ) )\n-            .filter( marked -> marked )\n-            .count();\n+        long terminatedCount = getActiveTransactions( dependencyResolver ).stream().filter( tx -> tx.subject().hasUsername( username )&& ! tx.isUnderlyingTransaction( currentTx ) ).map( tx -> tx.markForTermination( Status.Transaction.Terminated ) ).filter( marked -> marked ).count();\n         return Stream.of( new TransactionTerminationResult( username, terminatedCount ) );\n     }\n \n-    public static Stream<ConnectionResult> terminateConnectionsForValidUser(\n-            DependencyResolver dependencyResolver, String username )\n+    public static Stream<ConnectionResult> terminateConnectionsForValidUser( DependencyResolver dependencyResolver, String username )\n     {\n-        Long killCount = getBoltConnectionTracker( dependencyResolver )\n-            .getActiveConnections( username )\n-            .stream().map( conn ->\n-                {\n-                    conn.terminate();\n-                    return true;\n-                } )\n-            .count();\n+        Long killCount = getBoltConnectionTracker( dependencyResolver ).getActiveConnections( username ).stream().map( conn ->\n+                                                                                                                       {\n+                                                                                                                           conn.terminate();\n+                                                                                                                           return true;\n+                                                                                                                       } ).count();\n         return Stream.of( new ConnectionResult( username, killCount ) );\n     }\n \n@@ -509,21 +456,12 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     public static Stream<TransactionResult> countTransactionByUsername( Stream<String> usernames )\n     {\n-        return usernames\n-            .collect( Collectors.groupingBy( identity(), Collectors.counting() ) )\n-            .entrySet()\n-            .stream()\n-            .map( entry -> new TransactionResult( entry.getKey(), entry.getValue() )\n-        );\n+        return usernames.collect( Collectors.groupingBy( identity(), Collectors.counting() ) ).entrySet().stream().map( entry -> new TransactionResult( entry.getKey(), entry.getValue() ) );\n     }\n \n     public static Stream<ConnectionResult> countConnectionsByUsername( Stream<String> usernames )\n     {\n-        return usernames\n-            .collect( Collectors.groupingBy( identity(), Collectors.counting() ) )\n-            .entrySet()\n-            .stream()\n-            .map( entry -> new ConnectionResult( entry.getKey(), entry.getValue() ) );\n+        return usernames.collect( Collectors.groupingBy( identity(), Collectors.counting() ) ).entrySet().stream().map( entry -> new ConnectionResult( entry.getKey(), entry.getValue() ) );\n     }\n \n     private ZoneId getConfiguredTimeZone()\n@@ -539,7 +477,7 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     private void assertAdmin()\n     {\n-        if ( !isAdmin() )\n+        if ( ! isAdmin() )\n         {\n             throw new AuthorizationViolationException( PERMISSION_DENIED );\n         }\n@@ -547,12 +485,12 @@ public class EnterpriseBuiltInDbmsProcedures\n \n     private boolean isAdminOrSelf( String username )\n     {\n-        return isAdmin() || securityContext.subject().hasUsername( username );\n+        return isAdmin()|| securityContext.subject().hasUsername( username );\n     }\n \n     private void assertAdminOrSelf( String username )\n     {\n-        if ( !isAdminOrSelf( username ) )\n+        if ( ! isAdminOrSelf( username ) )\n         {\n             throw new AuthorizationViolationException( PERMISSION_DENIED );\n         }\n@@ -561,7 +499,9 @@ public class EnterpriseBuiltInDbmsProcedures\n     public static class QueryTerminationResult\n     {\n         public final String queryId;\n+\n         public final String username;\n+\n         public String message = \"Query found\";\n \n         public QueryTerminationResult( QueryId queryId, String username )\n@@ -583,6 +523,7 @@ public class EnterpriseBuiltInDbmsProcedures\n     public static class TransactionResult\n     {\n         public final String username;\n+\n         public final Long activeTransactions;\n \n         TransactionResult( String username, Long activeTransactions )\n@@ -595,6 +536,7 @@ public class EnterpriseBuiltInDbmsProcedures\n     public static class TransactionTerminationResult\n     {\n         public final String username;\n+\n         public final Long transactionsTerminated;\n \n         TransactionTerminationResult( String username, Long transactionsTerminated )\n@@ -607,6 +549,7 @@ public class EnterpriseBuiltInDbmsProcedures\n     public static class ConnectionResult\n     {\n         public final String username;\n+\n         public final Long connectionCount;\n \n         ConnectionResult( String username, Long connectionCount )\n@@ -625,4 +568,4 @@ public class EnterpriseBuiltInDbmsProcedures\n             this.metadata = metadata;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 192
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}