{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4150",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "292",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4150/AvailabilityGuard.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4150/AvailabilityGuard.java\nindex 4bbff2f7a4c..3fa9bf03028 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4150/AvailabilityGuard.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4150/AvailabilityGuard.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel;\n \n import java.time.Clock;\n@@ -41,298 +42,297 @@ import org.neo4j.logging.Log;\n  */\n public class AvailabilityGuard\n {\n-    public static final String DATABASE_AVAILABLE_MSG = \"Fulfilling of requirement makes database available: \";\n-    public static final String DATABASE_UNAVAILABLE_MSG = \"Requirement makes database unavailable: \";\n-\n-    public static class UnavailableException extends Exception implements Status.HasStatus\n-    {\n-        public UnavailableException( String message )\n-        {\n-            super( message );\n-        }\n-\n-        @Override\n-        public Status status()\n-        {\n-            return Status.General.DatabaseUnavailable;\n-        }\n-    }\n-\n-    public interface AvailabilityListener\n-    {\n-        void available();\n-\n-        void unavailable();\n-    }\n+  public static final String DATABASE_AVAILABLE_MSG = \"Fulfilling of requirement makes database available: \";\n+  public static final String DATABASE_UNAVAILABLE_MSG = \"Requirement makes database unavailable: \";\n \n-    /**\n-     * Represents a description of why someone is denying access to the database, to help debugging. Components\n-     * granting and revoking access should use the same denial reason for both method calls, as it is used to track\n-     * who is blocking access to the database.\n-     */\n-    public interface AvailabilityRequirement\n+  public static class UnavailableException extends Exception implements Status.HasStatus\n+  {\n+    public UnavailableException(String message)\n     {\n-        String description();\n+      super(message);\n     }\n \n-    public static AvailabilityRequirement availabilityRequirement( final String descriptionWhenBlocking )\n+    @Override\n+    public Status status()\n     {\n-        return new AvailabilityRequirement()\n-        {\n-            @Override\n-            public String description()\n-            {\n-                return descriptionWhenBlocking;\n-            }\n-\n-            @Override\n-            public boolean equals( Object o )\n-            {\n-                if ( this == o )\n-                {\n-                    return true;\n-                }\n-                if ( o == null || getClass() != o.getClass() )\n-                {\n-                    return false;\n-                }\n-\n-                AvailabilityRequirement that = (AvailabilityRequirement) o;\n-\n-                return descriptionWhenBlocking == null ?\n-                        that.description() == null :\n-                        descriptionWhenBlocking.equals( that.description() );\n-            }\n-\n-            @Override\n-            public int hashCode()\n-            {\n-                return descriptionWhenBlocking != null ? descriptionWhenBlocking.hashCode() : 0;\n-            }\n-        };\n+      return Status.General.DatabaseUnavailable;\n     }\n-\n-    private final AtomicInteger requirementCount = new AtomicInteger( 0 );\n-    private final Set<AvailabilityRequirement> blockingRequirements = new CopyOnWriteArraySet<>();\n-    private final AtomicBoolean isShutdown = new AtomicBoolean( false );\n-    private final Listeners<AvailabilityListener> listeners = new Listeners<>();\n-    private final Clock clock;\n-    private final Log log;\n-\n-    public AvailabilityGuard( Clock clock, Log log )\n+  }\n+\n+  public interface AvailabilityListener\n+  {\n+    void available();\n+\n+    void unavailable();\n+  }\n+\n+  /**\n+   * Represents a description of why someone is denying access to the database, to help debugging. Components\n+   * granting and revoking access should use the same denial reason for both method calls, as it is used to track\n+   * who is blocking access to the database.\n+   */\n+  public interface AvailabilityRequirement\n+  {\n+    String description();\n+  }\n+\n+  public static AvailabilityRequirement availabilityRequirement(final String descriptionWhenBlocking)\n+  {\n+    return new AvailabilityRequirement()\n     {\n-        this.clock = clock;\n-        this.log = log;\n-    }\n-\n-    /**\n-     * Indicate a requirement that must be fulfilled before the database is considered available.\n-     *\n-     * @param requirement the requirement object\n-     */\n-    public void require( AvailabilityRequirement requirement )\n-    {\n-        if ( !blockingRequirements.add( requirement ) )\n+      @Override\n+      public String description()\n+      {\n+        return descriptionWhenBlocking;\n+      }\n+\n+      @Override\n+      public boolean equals(Object o)\n+      {\n+        if (this == o)\n         {\n-            return;\n+          return true;\n         }\n-\n-        synchronized ( requirementCount )\n+        if (o == null || getClass() != o.getClass())\n         {\n-            if ( requirementCount.getAndIncrement() == 0 && !isShutdown.get() )\n-            {\n-                log.info( DATABASE_UNAVAILABLE_MSG + requirement.description() );\n-                listeners.notify( AvailabilityListener::unavailable );\n-            }\n+          return false;\n         }\n-    }\n \n-    /**\n-     * Indicate that a requirement has been fulfilled.\n-     *\n-     * @param requirement the requirement object\n-     */\n-    public void fulfill( AvailabilityRequirement requirement )\n+        AvailabilityRequirement that = (AvailabilityRequirement) o;\n+\n+        return descriptionWhenBlocking == null ?\n+            that.description() == null :\n+            descriptionWhenBlocking.equals(that.description());\n+      }\n+\n+      @Override\n+      public int hashCode()\n+      {\n+        return descriptionWhenBlocking != null ? descriptionWhenBlocking.hashCode() : 0;\n+      }\n+    };\n+  }\n+\n+  private final AtomicInteger requirementCount = new AtomicInteger(0);\n+  private final Set<AvailabilityRequirement> blockingRequirements = new CopyOnWriteArraySet<>();\n+  private final AtomicBoolean isShutdown = new AtomicBoolean(false);\n+  private final Listeners<AvailabilityListener> listeners = new Listeners<>();\n+  private final Clock clock;\n+  private final Log log;\n+\n+  public AvailabilityGuard(Clock clock, Log log)\n+  {\n+    this.clock = clock;\n+    this.log = log;\n+  }\n+\n+  /**\n+   * Indicate a requirement that must be fulfilled before the database is considered available.\n+   *\n+   * @param requirement the requirement object\n+   */\n+  public void require(AvailabilityRequirement requirement)\n+  {\n+    if (!blockingRequirements.add(requirement))\n     {\n-        if ( !blockingRequirements.remove( requirement ) )\n-        {\n-            return;\n-        }\n-\n-        synchronized ( requirementCount )\n-        {\n-            if ( requirementCount.getAndDecrement() == 1 && !isShutdown.get() )\n-            {\n-                log.info( DATABASE_AVAILABLE_MSG + requirement.description() );\n-                listeners.notify( AvailabilityListener::available );\n-            }\n-        }\n+      return;\n     }\n \n-    /**\n-     * Shutdown the guard. After this method is invoked, the database will always be considered unavailable.\n-     */\n-    public void shutdown()\n+    synchronized (requirementCount)\n     {\n-        synchronized ( requirementCount )\n-        {\n-            if ( isShutdown.getAndSet( true ) )\n-            {\n-                return;\n-            }\n-\n-            if ( requirementCount.get() == 0 )\n-            {\n-                listeners.notify( AvailabilityListener::unavailable );\n-            }\n-        }\n+      if (requirementCount.getAndIncrement() == 0 && !isShutdown.get())\n+      {\n+        log.info(DATABASE_UNAVAILABLE_MSG + requirement.description());\n+        listeners.notify(AvailabilityListener::unavailable);\n+      }\n     }\n-\n-    private enum Availability\n+  }\n+\n+  /**\n+   * Indicate that a requirement has been fulfilled.\n+   *\n+   * @param requirement the requirement object\n+   */\n+  public void fulfill(AvailabilityRequirement requirement)\n+  {\n+    if (!blockingRequirements.remove(requirement))\n     {\n-        AVAILABLE,\n-        UNAVAILABLE,\n-        SHUTDOWN\n+      return;\n     }\n \n-    /**\n-     * Check if the database is available for transactions to use.\n-     *\n-     * @return true if there are no requirements waiting to be fulfilled and the guard has not been shutdown\n-     */\n-    public boolean isAvailable()\n+    synchronized (requirementCount)\n     {\n-        return availability() == Availability.AVAILABLE;\n+      if (requirementCount.getAndDecrement() == 1 && !isShutdown.get())\n+      {\n+        log.info(DATABASE_AVAILABLE_MSG + requirement.description());\n+        listeners.notify(AvailabilityListener::available);\n+      }\n     }\n-\n-    /**\n-     * Check if the database has been shut down.\n-     */\n-    public boolean isShutdown()\n+  }\n+\n+  /**\n+   * Shutdown the guard. After this method is invoked, the database will always be considered unavailable.\n+   */\n+  public void shutdown()\n+  {\n+    synchronized (requirementCount)\n     {\n-        return availability() == Availability.SHUTDOWN;\n+      if (isShutdown.getAndSet(true))\n+      {\n+        return;\n+      }\n+\n+      if (requirementCount.get() == 0)\n+      {\n+        listeners.notify(AvailabilityListener::unavailable);\n+      }\n     }\n-\n-    /**\n-     * Check if the database is available for transactions to use.\n-     *\n-     * @param millis to wait for availability\n-     * @return true if there are no requirements waiting to be fulfilled and the guard has not been shutdown\n-     */\n-    public boolean isAvailable( long millis )\n+  }\n+\n+  private enum Availability\n+  {\n+    AVAILABLE,\n+    UNAVAILABLE,\n+    SHUTDOWN\n+  }\n+\n+  /**\n+   * Check if the database is available for transactions to use.\n+   *\n+   * @return true if there are no requirements waiting to be fulfilled and the guard has not been shutdown\n+   */\n+  public boolean isAvailable()\n+  {\n+    return availability() == Availability.AVAILABLE;\n+  }\n+\n+  /**\n+   * Check if the database has been shut down.\n+   */\n+  public boolean isShutdown()\n+  {\n+    return availability() == Availability.SHUTDOWN;\n+  }\n+\n+  /**\n+   * Check if the database is available for transactions to use.\n+   *\n+   * @param millis to wait for availability\n+   * @return true if there are no requirements waiting to be fulfilled and the guard has not been shutdown\n+   */\n+  public boolean isAvailable(long millis)\n+  {\n+    return availability(millis) == Availability.AVAILABLE;\n+  }\n+\n+  /**\n+   * Checks if available. If not then an {@link UnavailableException} is thrown describing why.\n+   * This methods doesn't wait like {@link #await(long)} does.\n+   *\n+   * @throws UnavailableException if not available.\n+   */\n+  public void checkAvailable() throws UnavailableException\n+  {\n+    await(0);\n+  }\n+\n+  /**\n+   * Await the database becoming available.\n+   *\n+   * @param millis to wait for availability\n+   * @throws UnavailableException thrown when the timeout has been exceeded or the guard has been shutdown\n+   */\n+  public void await(long millis) throws UnavailableException\n+  {\n+    Availability availability = availability(millis);\n+    if (availability == Availability.AVAILABLE)\n     {\n-        return availability( millis ) == Availability.AVAILABLE;\n+      return;\n     }\n \n-    /**\n-     * Checks if available. If not then an {@link UnavailableException} is thrown describing why.\n-     * This methods doesn't wait like {@link #await(long)} does.\n-     *\n-     * @throws UnavailableException if not available.\n-     */\n-    public void checkAvailable() throws UnavailableException\n-    {\n-        await( 0 );\n-    }\n+    String description = (availability == Availability.UNAVAILABLE)\n+        ? \"Timeout waiting for database to become available and allow new transactions. Waited \" +\n+        Format.duration(millis) + \". \" + describeWhoIsBlocking()\n+        : \"Database not available because it's shutting down\";\n+    throw new UnavailableException(description);\n+  }\n \n-    /**\n-     * Await the database becoming available.\n-     *\n-     * @param millis to wait for availability\n-     * @throws UnavailableException thrown when the timeout has been exceeded or the guard has been shutdown\n-     */\n-    public void await( long millis ) throws UnavailableException\n+  private Availability availability()\n+  {\n+    if (isShutdown.get())\n     {\n-        Availability availability = availability( millis );\n-        if ( availability == Availability.AVAILABLE )\n-        {\n-            return;\n-        }\n-\n-        String description = (availability == Availability.UNAVAILABLE)\n-                ? \"Timeout waiting for database to become available and allow new transactions. Waited \" +\n-                Format.duration( millis ) + \". \" + describeWhoIsBlocking()\n-                : \"Database not available because it's shutting down\";\n-        throw new UnavailableException( description );\n+      return Availability.SHUTDOWN;\n     }\n \n-    private Availability availability()\n+    int count = requirementCount.get();\n+    if (count == 0)\n     {\n-        if ( isShutdown.get() )\n-        {\n-            return Availability.SHUTDOWN;\n-        }\n-\n-        int count = requirementCount.get();\n-        if ( count == 0 )\n-        {\n-            return Availability.AVAILABLE;\n-        }\n-\n-        assert count > 0;\n-\n-        return Availability.UNAVAILABLE;\n+      return Availability.AVAILABLE;\n     }\n \n-    private Availability availability( long millis )\n-    {\n-        Availability availability = availability();\n-        if ( availability != Availability.UNAVAILABLE )\n-        {\n-            return availability;\n-        }\n+    assert count > 0;\n \n-        long timeout = clock.millis() + millis;\n-        do\n-        {\n-            try\n-            {\n-                Thread.sleep( 10 );\n-            }\n-            catch ( InterruptedException e )\n-            {\n-                Thread.interrupted();\n-                break;\n-            }\n-            availability = availability();\n-        } while ( availability == Availability.UNAVAILABLE && clock.millis() < timeout );\n-\n-        return availability;\n-    }\n+    return Availability.UNAVAILABLE;\n+  }\n \n-    /**\n-     * Add a listener for changes to availability.\n-     *\n-     * @param listener the listener to receive callbacks when availability changes\n-     */\n-    public void addListener( AvailabilityListener listener )\n+  private Availability availability(long millis)\n+  {\n+    Availability availability = availability();\n+    if (availability != Availability.UNAVAILABLE)\n     {\n-        listeners.add( listener );\n+      return availability;\n     }\n \n-    /**\n-     * Remove a listener for changes to availability.\n-     *\n-     * @param listener the listener to remove\n-     */\n-    public void removeListener( AvailabilityListener listener )\n+    long timeout = clock.millis() + millis;\n+    do\n     {\n-        listeners.remove( listener );\n-    }\n-\n-    /**\n-     * @return a textual description of what components, if any, are blocking access\n-     */\n-    public String describeWhoIsBlocking()\n+      try\n+      {\n+        Thread.sleep(10);\n+      } catch (InterruptedException e)\n+      {\n+        Thread.interrupted();\n+        break;\n+      }\n+      availability = availability();\n+    } while (availability == Availability.UNAVAILABLE && clock.millis() < timeout);\n+\n+    return availability;\n+  }\n+\n+  /**\n+   * Add a listener for changes to availability.\n+   *\n+   * @param listener the listener to receive callbacks when availability changes\n+   */\n+  public void addListener(AvailabilityListener listener)\n+  {\n+    listeners.add(listener);\n+  }\n+\n+  /**\n+   * Remove a listener for changes to availability.\n+   *\n+   * @param listener the listener to remove\n+   */\n+  public void removeListener(AvailabilityListener listener)\n+  {\n+    listeners.remove(listener);\n+  }\n+\n+  /**\n+   * @return a textual description of what components, if any, are blocking access\n+   */\n+  public String describeWhoIsBlocking()\n+  {\n+    if (blockingRequirements.size() > 0 || requirementCount.get() > 0)\n     {\n-        if ( blockingRequirements.size() > 0 || requirementCount.get() > 0 )\n-        {\n-            String causes = Iterables.join( \", \", Iterables.map( DESCRIPTION, blockingRequirements ) );\n-            return requirementCount.get() + \" reasons for blocking: \" + causes + \".\";\n-        }\n-        return \"No blocking components\";\n+      String causes = Iterables.join(\", \", Iterables.map(DESCRIPTION, blockingRequirements));\n+      return requirementCount.get() + \" reasons for blocking: \" + causes + \".\";\n     }\n+    return \"No blocking components\";\n+  }\n \n-    public static final Function<AvailabilityRequirement, String> DESCRIPTION =\n-            AvailabilityRequirement::description;\n+  public static final Function<AvailabilityRequirement, String> DESCRIPTION =\n+      AvailabilityRequirement::description;\n }\n",
            "diff_size": 406
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 276).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4150/AvailabilityGuard.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4150/AvailabilityGuard.java\nindex 4bbff2f7a4c..46d0513fdc5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4150/AvailabilityGuard.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4150/AvailabilityGuard.java\n@@ -42,7 +42,8 @@ import org.neo4j.logging.Log;\n public class AvailabilityGuard\n {\n     public static final String DATABASE_AVAILABLE_MSG = \"Fulfilling of requirement makes database available: \";\n-    public static final String DATABASE_UNAVAILABLE_MSG = \"Requirement makes database unavailable: \";\n+\n+public static final String DATABASE_UNAVAILABLE_MSG = \"Requirement makes database unavailable: \";\n \n     public static class UnavailableException extends Exception implements Status.HasStatus\n     {\n@@ -92,16 +93,15 @@ public class AvailabilityGuard\n                 {\n                     return true;\n                 }\n-                if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n                 {\n                     return false;\n                 }\n \n                 AvailabilityRequirement that = (AvailabilityRequirement) o;\n \n-                return descriptionWhenBlocking == null ?\n-                        that.description() == null :\n-                        descriptionWhenBlocking.equals( that.description() );\n+                return descriptionWhenBlocking == null ? that.description() == null : descriptionWhenBlocking.equals( that.description() );\n             }\n \n             @Override\n@@ -190,8 +190,7 @@ public class AvailabilityGuard\n \n     private enum Availability\n     {\n-        AVAILABLE,\n-        UNAVAILABLE,\n+        AVAILABLE, UNAVAILABLE,\n         SHUTDOWN\n     }\n \n@@ -249,11 +248,8 @@ public class AvailabilityGuard\n             return;\n         }\n \n-        String description = (availability == Availability.UNAVAILABLE)\n-                ? \"Timeout waiting for database to become available and allow new transactions. Waited \" +\n-                Format.duration( millis ) + \". \" + describeWhoIsBlocking()\n-                : \"Database not available because it's shutting down\";\n-        throw new UnavailableException( description );\n+        String description = (availability == Availability.UNAVAILABLE) ? \"Timeout waiting for database to become available and allow new transactions. Waited \" + Format.duration( millis ) + \". \" + describeWhoIsBlocking() : \"Database not available because it's shutting down\";\n+    throw new UnavailableException( description );\n     }\n \n     private Availability availability()\n@@ -294,10 +290,10 @@ public class AvailabilityGuard\n                 Thread.interrupted();\n                 break;\n             }\n-            availability = availability();\n-        } while ( availability == Availability.UNAVAILABLE && clock.millis() < timeout );\n \n-        return availability;\n+availability = availability();\n+        } while ( availability == Availability.UNAVAILABLE && clock.millis() < timeout );\n+return availability;\n     }\n \n     /**\n@@ -333,6 +329,6 @@ public class AvailabilityGuard\n         return \"No blocking components\";\n     }\n \n-    public static final Function<AvailabilityRequirement, String> DESCRIPTION =\n+    public static final Function<AvailabilityRequirement,String> DESCRIPTION =\n             AvailabilityRequirement::description;\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}