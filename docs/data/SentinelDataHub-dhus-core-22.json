{
    "project_name": "SentinelDataHub-dhus-core",
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "49",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 93).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      {\n         @Override\n         public String doInHibernate(Session session) throws HibernateException, SQLException\n         {\n            Criteria criteria = session.createCriteria(entityClass);\n            criteria.add(Restrictions.like(\"value\", \"%\" + sub_value + \"%\"));",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/22/KeyStoreEntryDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler/22/KeyStoreEntryDao.java\nindex e0216e98312..02780191d22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/22/KeyStoreEntryDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler/22/KeyStoreEntryDao.java\n@@ -46,9 +46,10 @@ public class KeyStoreEntryDao extends HibernateDao<KeyStoreEntry, Key>\n       return getHibernateTemplate().execute(new HibernateCallback<String>()\n       {\n          @Override\n-         public String doInHibernate(Session session) throws HibernateException, SQLException\n-         {\n-            Criteria criteria = session.createCriteria(entityClass);\n+         public String doInHibernate(Session session) throws HibernateException,\n+            SQLException\n+      {\n+             Criteria criteria = session.createCriteria(entityClass);\n             criteria.add(Restrictions.like(\"value\", \"%\" + sub_value + \"%\"));\n             List results = criteria.list();\n             if (results.isEmpty())\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/22/KeyStoreEntryDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/22/KeyStoreEntryDao.java\nindex e0216e98312..5588862ce01 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/22/KeyStoreEntryDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/22/KeyStoreEntryDao.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package fr.gael.dhus.database.dao;\n \n import fr.gael.dhus.database.dao.interfaces.HibernateDao;\n@@ -36,27 +37,29 @@ import java.util.List;\n @Repository\n public class KeyStoreEntryDao extends HibernateDao<KeyStoreEntry, Key>\n {\n-   /**\n-    * Retrieves a key from a KeyStore by a substring of its associated value.\n-    * @param sub_value substring of associate value\n-    * @return the key of searched value\n-    */\n-   public String getKeyBySubValue(final String sub_value)\n-   {\n-      return getHibernateTemplate().execute(new HibernateCallback<String>()\n-      {\n-         @Override\n-         public String doInHibernate(Session session) throws HibernateException, SQLException\n-         {\n-            Criteria criteria = session.createCriteria(entityClass);\n-            criteria.add(Restrictions.like(\"value\", \"%\" + sub_value + \"%\"));\n-            List results = criteria.list();\n-            if (results.isEmpty())\n+    /**\n+     * Retrieves a key from a KeyStore by a substring of its associated value.\n+     *\n+     * @param sub_value substring of associate value\n+     * @return the key of searched value\n+     */\n+    public String getKeyBySubValue(final String sub_value)\n+    {\n+        return getHibernateTemplate().execute(new HibernateCallback<String>()\n+        {\n+            @Override\n+            public String doInHibernate(Session session)\n+                throws HibernateException, SQLException\n             {\n-               return null;\n+                Criteria criteria = session.createCriteria(entityClass);\n+                criteria.add(Restrictions.like(\"value\", \"%\" + sub_value + \"%\"));\n+                List results = criteria.list();\n+                if (results.isEmpty())\n+                {\n+                    return null;\n+                }\n+                return ((KeyStoreEntry) results.get(0)).getEntryKey();\n             }\n-            return ((KeyStoreEntry) results.get(0)).getEntryKey();\n-         }\n-      });\n-   }\n+        });\n+    }\n }\n\\ No newline at end of file\n",
            "diff_size": 29
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 84).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/22/KeyStoreEntryDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/22/KeyStoreEntryDao.java\nindex e0216e98312..517328cd96b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/22/KeyStoreEntryDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/22/KeyStoreEntryDao.java\n@@ -22,14 +22,12 @@ package fr.gael.dhus.database.dao;\n import fr.gael.dhus.database.dao.interfaces.HibernateDao;\n import fr.gael.dhus.database.object.KeyStoreEntry;\n import fr.gael.dhus.database.object.KeyStoreEntry.Key;\n-\n import org.hibernate.Criteria;\n import org.hibernate.HibernateException;\n import org.hibernate.Session;\n import org.hibernate.criterion.Restrictions;\n import org.springframework.orm.hibernate3.HibernateCallback;\n import org.springframework.stereotype.Repository;\n-\n import java.sql.SQLException;\n import java.util.List;\n \n@@ -41,22 +39,24 @@ public class KeyStoreEntryDao extends HibernateDao<KeyStoreEntry, Key>\n     * @param sub_value substring of associate value\n     * @return the key of searched value\n     */\n-   public String getKeyBySubValue(final String sub_value)\n+   public String getKeyBySubValue (final String sub_value)\n    {\n-      return getHibernateTemplate().execute(new HibernateCallback<String>()\n-      {\n-         @Override\n-         public String doInHibernate(Session session) throws HibernateException, SQLException\n-         {\n-            Criteria criteria = session.createCriteria(entityClass);\n-            criteria.add(Restrictions.like(\"value\", \"%\" + sub_value + \"%\"));\n-            List results = criteria.list();\n-            if (results.isEmpty())\n-            {\n-               return null;\n-            }\n-            return ((KeyStoreEntry) results.get(0)).getEntryKey();\n-         }\n-      });\n+      return getHibernateTemplate ().execute (new HibernateCallback<String> ()\n+                                              {\n+                                                 @Override\n+                                                 public String doInHibernate (Session session) throws HibernateException, SQLException\n+                                                 {\n+                                                    Criteria criteria = session.createCriteria (entityClass);\n+                                                    criteria.add(Restrictions.like (\"value\", \"%\" +\n+                                                                                             sub_value +\n+                                                                                                \"%\"));\n+                                                    List results = criteria.list ();\n+                                                    if (results.isEmpty ())\n+                                                    {\n+                                                       return null;\n+                                                    }\n+                                                    return ((KeyStoreEntry) results.get (0)).getEntryKey ();\n+                                                 }\n+                                              });\n    }\n }\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/22/KeyStoreEntryDao.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler_three_grams/22/KeyStoreEntryDao.java\nindex e0216e98312..02780191d22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/22/KeyStoreEntryDao.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/styler_three_grams/22/KeyStoreEntryDao.java\n@@ -46,9 +46,10 @@ public class KeyStoreEntryDao extends HibernateDao<KeyStoreEntry, Key>\n       return getHibernateTemplate().execute(new HibernateCallback<String>()\n       {\n          @Override\n-         public String doInHibernate(Session session) throws HibernateException, SQLException\n-         {\n-            Criteria criteria = session.createCriteria(entityClass);\n+         public String doInHibernate(Session session) throws HibernateException,\n+            SQLException\n+      {\n+             Criteria criteria = session.createCriteria(entityClass);\n             criteria.add(Restrictions.like(\"value\", \"%\" + sub_value + \"%\"));\n             List results = criteria.list();\n             if (results.isEmpty())\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}