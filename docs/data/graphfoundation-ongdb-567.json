{
    "project_name": "graphfoundation-ongdb",
    "error_id": "567",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "115",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/567/RelationshipGroupRecordFormatV3_0_6.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/567/RelationshipGroupRecordFormatV3_0_6.java\nindex ed887688058..e139a189cf7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/567/RelationshipGroupRecordFormatV3_0_6.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/567/RelationshipGroupRecordFormatV3_0_6.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format.highlimit.v306;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -25,7 +26,7 @@ import org.neo4j.kernel.impl.store.record.RelationshipGroupRecord;\n /**\n  * LEGEND:\n  * V: variable between 3B-8B\n- *\n+ * <p>\n  * Record format:\n  * 1B   header\n  * 2B   relationship type\n@@ -35,7 +36,7 @@ import org.neo4j.kernel.impl.store.record.RelationshipGroupRecord;\n  * VB   owning node\n  * VB   next relationship group record\n  * => 18B-43B\n- *\n+ * <p>\n  * Fixed reference format:\n  * 1B   header\n  * 1B   modifiers\n@@ -49,176 +50,174 @@ import org.neo4j.kernel.impl.store.record.RelationshipGroupRecord;\n  */\n class RelationshipGroupRecordFormatV3_0_6 extends BaseHighLimitRecordFormatV3_0_6<RelationshipGroupRecord>\n {\n-    static final int RECORD_SIZE = 32;\n-    static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n-                                                Byte.BYTES /* modifiers */ +\n-                                                Short.BYTES /* type */ +\n-                                                Integer.BYTES /* next */ +\n-                                                Integer.BYTES /* first out */ +\n-                                                Integer.BYTES /* first in */ +\n-                                                Integer.BYTES /* first loop */ +\n-                                                Integer.BYTES /* owning node */;\n-\n-    private static final int HAS_OUTGOING_BIT = 0b0000_1000;\n-    private static final int HAS_INCOMING_BIT = 0b0001_0000;\n-    private static final int HAS_LOOP_BIT     = 0b0010_0000;\n-    private static final int HAS_NEXT_BIT     = 0b0100_0000;\n-\n-    private static final int NEXT_RECORD_BIT = 0b0000_0001;\n-    private static final int FIRST_OUT_BIT = 0b0000_0010;\n-    private static final int FIRST_IN_BIT = 0b0000_0100;\n-    private static final int FIRST_LOOP_BIT = 0b0000_1000;\n-    private static final int OWNING_NODE_BIT = 0b0001_0000;\n-\n-    private static final long ONE_BIT_OVERFLOW_BIT_MASK = 0xFFFF_FFFE_0000_0000L;\n-    private static final long HIGH_DWORD_LAST_BIT_MASK = 0x100000000L;\n-\n-    RelationshipGroupRecordFormatV3_0_6()\n-    {\n-        this( RECORD_SIZE );\n-    }\n-\n-    RelationshipGroupRecordFormatV3_0_6( int recordSize )\n+  static final int RECORD_SIZE = 32;\n+  static final int FIXED_FORMAT_RECORD_SIZE = HEADER_BYTE +\n+      Byte.BYTES /* modifiers */ +\n+      Short.BYTES /* type */ +\n+      Integer.BYTES /* next */ +\n+      Integer.BYTES /* first out */ +\n+      Integer.BYTES /* first in */ +\n+      Integer.BYTES /* first loop */ +\n+      Integer.BYTES /* owning node */;\n+\n+  private static final int HAS_OUTGOING_BIT = 0b0000_1000;\n+  private static final int HAS_INCOMING_BIT = 0b0001_0000;\n+  private static final int HAS_LOOP_BIT = 0b0010_0000;\n+  private static final int HAS_NEXT_BIT = 0b0100_0000;\n+\n+  private static final int NEXT_RECORD_BIT = 0b0000_0001;\n+  private static final int FIRST_OUT_BIT = 0b0000_0010;\n+  private static final int FIRST_IN_BIT = 0b0000_0100;\n+  private static final int FIRST_LOOP_BIT = 0b0000_1000;\n+  private static final int OWNING_NODE_BIT = 0b0001_0000;\n+\n+  private static final long ONE_BIT_OVERFLOW_BIT_MASK = 0xFFFF_FFFE_0000_0000L;\n+  private static final long HIGH_DWORD_LAST_BIT_MASK = 0x100000000L;\n+\n+  RelationshipGroupRecordFormatV3_0_6()\n+  {\n+    this(RECORD_SIZE);\n+  }\n+\n+  RelationshipGroupRecordFormatV3_0_6(int recordSize)\n+  {\n+    super(fixedRecordSize(recordSize), 0);\n+  }\n+\n+  @Override\n+  public RelationshipGroupRecord newRecord()\n+  {\n+    return new RelationshipGroupRecord(-1);\n+  }\n+\n+  @Override\n+  protected void doReadInternal(RelationshipGroupRecord record, PageCursor cursor, int recordSize, long headerByte,\n+                                boolean inUse)\n+  {\n+    if (record.isUseFixedReferences())\n     {\n-        super( fixedRecordSize( recordSize ), 0 );\n-    }\n-\n-    @Override\n-    public RelationshipGroupRecord newRecord()\n+      // read record in fixed references format\n+      readFixedReferencesMethod(record, cursor, inUse);\n+      record.setUseFixedReferences(true);\n+    } else\n     {\n-        return new RelationshipGroupRecord( -1 );\n+      record.initialize(inUse,\n+          cursor.getShort() & 0xFFFF,\n+          decodeCompressedReference(cursor, headerByte, HAS_OUTGOING_BIT, NULL),\n+          decodeCompressedReference(cursor, headerByte, HAS_INCOMING_BIT, NULL),\n+          decodeCompressedReference(cursor, headerByte, HAS_LOOP_BIT, NULL),\n+          decodeCompressedReference(cursor),\n+          decodeCompressedReference(cursor, headerByte, HAS_NEXT_BIT, NULL));\n     }\n-\n-    @Override\n-    protected void doReadInternal( RelationshipGroupRecord record, PageCursor cursor, int recordSize, long headerByte,\n-            boolean inUse )\n-    {\n-        if ( record.isUseFixedReferences() )\n-        {\n-            // read record in fixed references format\n-            readFixedReferencesMethod( record, cursor, inUse );\n-            record.setUseFixedReferences( true );\n-        }\n-        else\n-        {\n-            record.initialize( inUse,\n-                    cursor.getShort() & 0xFFFF,\n-                    decodeCompressedReference( cursor, headerByte, HAS_OUTGOING_BIT, NULL ),\n-                    decodeCompressedReference( cursor, headerByte, HAS_INCOMING_BIT, NULL ),\n-                    decodeCompressedReference( cursor, headerByte, HAS_LOOP_BIT, NULL ),\n-                    decodeCompressedReference( cursor ),\n-                    decodeCompressedReference( cursor, headerByte, HAS_NEXT_BIT, NULL ) );\n-        }\n-    }\n-\n-    @Override\n-    protected byte headerBits( RelationshipGroupRecord record )\n-    {\n-        byte header = 0;\n-        header = set( header, HAS_OUTGOING_BIT, record.getFirstOut(), NULL );\n-        header = set( header, HAS_INCOMING_BIT, record.getFirstIn(), NULL );\n-        header = set( header, HAS_LOOP_BIT, record.getFirstLoop(), NULL );\n-        header = set( header, HAS_NEXT_BIT, record.getNext(), NULL );\n-        return header;\n-    }\n-\n-    @Override\n-    protected int requiredDataLength( RelationshipGroupRecord record )\n+  }\n+\n+  @Override\n+  protected byte headerBits(RelationshipGroupRecord record)\n+  {\n+    byte header = 0;\n+    header = set(header, HAS_OUTGOING_BIT, record.getFirstOut(), NULL);\n+    header = set(header, HAS_INCOMING_BIT, record.getFirstIn(), NULL);\n+    header = set(header, HAS_LOOP_BIT, record.getFirstLoop(), NULL);\n+    header = set(header, HAS_NEXT_BIT, record.getNext(), NULL);\n+    return header;\n+  }\n+\n+  @Override\n+  protected int requiredDataLength(RelationshipGroupRecord record)\n+  {\n+    return 2 + // type\n+        length(record.getFirstOut(), NULL) +\n+        length(record.getFirstIn(), NULL) +\n+        length(record.getFirstLoop(), NULL) +\n+        length(record.getOwningNode()) +\n+        length(record.getNext(), NULL);\n+  }\n+\n+  @Override\n+  protected void doWriteInternal(RelationshipGroupRecord record, PageCursor cursor)\n+  {\n+    if (record.isUseFixedReferences())\n     {\n-        return  2 + // type\n-                length( record.getFirstOut(), NULL ) +\n-                length( record.getFirstIn(), NULL ) +\n-                length( record.getFirstLoop(), NULL ) +\n-                length( record.getOwningNode() ) +\n-                length( record.getNext(), NULL );\n-    }\n-\n-    @Override\n-    protected void doWriteInternal( RelationshipGroupRecord record, PageCursor cursor )\n-    {\n-        if ( record.isUseFixedReferences() )\n-        {\n-            // write record in fixed references format\n-            writeFixedReferencesRecord( record, cursor );\n-        }\n-        else\n-        {\n-            cursor.putShort( (short) record.getType() );\n-            encode( cursor, record.getFirstOut(), NULL );\n-            encode( cursor, record.getFirstIn(), NULL );\n-            encode( cursor, record.getFirstLoop(), NULL );\n-            encode( cursor, record.getOwningNode() );\n-            encode( cursor, record.getNext(), NULL );\n-        }\n-    }\n-\n-    @Override\n-    protected boolean canUseFixedReferences( RelationshipGroupRecord record, int recordSize )\n-    {\n-        return isRecordBigEnoughForFixedReferences( recordSize ) &&\n-                (record.getNext() == NULL || (record.getNext() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n-                (record.getFirstOut() == NULL || (record.getFirstOut() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n-                (record.getFirstIn() == NULL || (record.getFirstIn() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n-                (record.getFirstLoop() == NULL || (record.getFirstLoop() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n-                (record.getOwningNode() == NULL || (record.getOwningNode() & ONE_BIT_OVERFLOW_BIT_MASK) == 0);\n-    }\n-\n-    private boolean isRecordBigEnoughForFixedReferences( int recordSize )\n-    {\n-        return FIXED_FORMAT_RECORD_SIZE <= recordSize;\n-    }\n-\n-    private void readFixedReferencesMethod( RelationshipGroupRecord record, PageCursor cursor, boolean inUse )\n-    {\n-        // [    ,   x] high next bits\n-        // [    ,  x ] high firstOut bits\n-        // [    , x  ] high firstIn bits\n-        // [    ,x   ] high firstLoop bits\n-        // [   x,    ] high owner bits\n-        long modifiers = cursor.getByte();\n-\n-        int type = cursor.getShort() & 0xFFFF;\n-\n-        long nextLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-        long firstOutLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-        long firstInLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-        long firstLoopLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-        long owningNodeLowBits = cursor.getInt() & 0xFFFFFFFFL;\n-\n-        long nextMod = (modifiers & NEXT_RECORD_BIT) << 32;\n-        long firstOutMod = (modifiers & FIRST_OUT_BIT) << 31;\n-        long firstInMod = (modifiers & FIRST_IN_BIT) << 30;\n-        long firstLoopMod = (modifiers & FIRST_LOOP_BIT) << 29;\n-        long owningNodeMod = (modifiers & OWNING_NODE_BIT) << 28;\n-\n-        record.initialize( inUse, type,\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( firstOutLowBits, firstOutMod ),\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( firstInLowBits, firstInMod ),\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( firstLoopLowBits, firstLoopMod ),\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( owningNodeLowBits, owningNodeMod ),\n-                BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod( nextLowBits, nextMod ) );\n-    }\n-\n-    private void writeFixedReferencesRecord( RelationshipGroupRecord record, PageCursor cursor )\n+      // write record in fixed references format\n+      writeFixedReferencesRecord(record, cursor);\n+    } else\n     {\n-        long nextMod = record.getNext() == NULL ? 0 : (record.getNext() & HIGH_DWORD_LAST_BIT_MASK) >> 32;\n-        long firstOutMod = record.getFirstOut() == NULL ? 0 : (record.getFirstOut() & HIGH_DWORD_LAST_BIT_MASK) >> 31;\n-        long firstInMod = record.getFirstIn() == NULL ? 0 : (record.getFirstIn() & HIGH_DWORD_LAST_BIT_MASK) >> 30;\n-        long firstLoopMod = record.getFirstLoop() == NULL ? 0 : (record.getFirstLoop() & HIGH_DWORD_LAST_BIT_MASK) >> 29;\n-        long owningNodeMod = record.getOwningNode() == NULL ? 0 : (record.getOwningNode() & HIGH_DWORD_LAST_BIT_MASK) >> 28;\n-\n-        // [    ,   x] high next bits\n-        // [    ,  x ] high firstOut bits\n-        // [    , x  ] high firstIn bits\n-        // [    ,x   ] high firstLoop bits\n-        // [   x,    ] high owner bits\n-        cursor.putByte( (byte) (nextMod | firstOutMod | firstInMod | firstLoopMod | owningNodeMod) );\n-\n-        cursor.putShort( (short) record.getType() );\n-        cursor.putInt( (int) record.getNext() );\n-        cursor.putInt( (int) record.getFirstOut() );\n-        cursor.putInt( (int) record.getFirstIn() );\n-        cursor.putInt( (int) record.getFirstLoop() );\n-        cursor.putInt( (int) record.getOwningNode() );\n+      cursor.putShort((short) record.getType());\n+      encode(cursor, record.getFirstOut(), NULL);\n+      encode(cursor, record.getFirstIn(), NULL);\n+      encode(cursor, record.getFirstLoop(), NULL);\n+      encode(cursor, record.getOwningNode());\n+      encode(cursor, record.getNext(), NULL);\n     }\n+  }\n+\n+  @Override\n+  protected boolean canUseFixedReferences(RelationshipGroupRecord record, int recordSize)\n+  {\n+    return isRecordBigEnoughForFixedReferences(recordSize) &&\n+        (record.getNext() == NULL || (record.getNext() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n+        (record.getFirstOut() == NULL || (record.getFirstOut() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n+        (record.getFirstIn() == NULL || (record.getFirstIn() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n+        (record.getFirstLoop() == NULL || (record.getFirstLoop() & ONE_BIT_OVERFLOW_BIT_MASK) == 0) &&\n+        (record.getOwningNode() == NULL || (record.getOwningNode() & ONE_BIT_OVERFLOW_BIT_MASK) == 0);\n+  }\n+\n+  private boolean isRecordBigEnoughForFixedReferences(int recordSize)\n+  {\n+    return FIXED_FORMAT_RECORD_SIZE <= recordSize;\n+  }\n+\n+  private void readFixedReferencesMethod(RelationshipGroupRecord record, PageCursor cursor, boolean inUse)\n+  {\n+    // [    ,   x] high next bits\n+    // [    ,  x ] high firstOut bits\n+    // [    , x  ] high firstIn bits\n+    // [    ,x   ] high firstLoop bits\n+    // [   x,    ] high owner bits\n+    long modifiers = cursor.getByte();\n+\n+    int type = cursor.getShort() & 0xFFFF;\n+\n+    long nextLowBits = cursor.getInt() & 0xFFFFFFFFL;\n+    long firstOutLowBits = cursor.getInt() & 0xFFFFFFFFL;\n+    long firstInLowBits = cursor.getInt() & 0xFFFFFFFFL;\n+    long firstLoopLowBits = cursor.getInt() & 0xFFFFFFFFL;\n+    long owningNodeLowBits = cursor.getInt() & 0xFFFFFFFFL;\n+\n+    long nextMod = (modifiers & NEXT_RECORD_BIT) << 32;\n+    long firstOutMod = (modifiers & FIRST_OUT_BIT) << 31;\n+    long firstInMod = (modifiers & FIRST_IN_BIT) << 30;\n+    long firstLoopMod = (modifiers & FIRST_LOOP_BIT) << 29;\n+    long owningNodeMod = (modifiers & OWNING_NODE_BIT) << 28;\n+\n+    record.initialize(inUse, type,\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(firstOutLowBits, firstOutMod),\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(firstInLowBits, firstInMod),\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(firstLoopLowBits, firstLoopMod),\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(owningNodeLowBits, owningNodeMod),\n+        BaseHighLimitRecordFormatV3_0_6.longFromIntAndMod(nextLowBits, nextMod));\n+  }\n+\n+  private void writeFixedReferencesRecord(RelationshipGroupRecord record, PageCursor cursor)\n+  {\n+    long nextMod = record.getNext() == NULL ? 0 : (record.getNext() & HIGH_DWORD_LAST_BIT_MASK) >> 32;\n+    long firstOutMod = record.getFirstOut() == NULL ? 0 : (record.getFirstOut() & HIGH_DWORD_LAST_BIT_MASK) >> 31;\n+    long firstInMod = record.getFirstIn() == NULL ? 0 : (record.getFirstIn() & HIGH_DWORD_LAST_BIT_MASK) >> 30;\n+    long firstLoopMod = record.getFirstLoop() == NULL ? 0 : (record.getFirstLoop() & HIGH_DWORD_LAST_BIT_MASK) >> 29;\n+    long owningNodeMod = record.getOwningNode() == NULL ? 0 : (record.getOwningNode() & HIGH_DWORD_LAST_BIT_MASK) >> 28;\n+\n+    // [    ,   x] high next bits\n+    // [    ,  x ] high firstOut bits\n+    // [    , x  ] high firstIn bits\n+    // [    ,x   ] high firstLoop bits\n+    // [   x,    ] high owner bits\n+    cursor.putByte((byte) (nextMod | firstOutMod | firstInMod | firstLoopMod | owningNodeMod));\n+\n+    cursor.putShort((short) record.getType());\n+    cursor.putInt((int) record.getNext());\n+    cursor.putInt((int) record.getFirstOut());\n+    cursor.putInt((int) record.getFirstIn());\n+    cursor.putInt((int) record.getFirstLoop());\n+    cursor.putInt((int) record.getOwningNode());\n+  }\n }\n",
            "diff_size": 261
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}