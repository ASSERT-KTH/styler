{
    "project_name": "DaGeRe-peass",
    "error_id": "84",
    "information": {
        "errors": [
            {
                "line": "49",
                "column": "87",
                "severity": "error",
                "message": "'&&' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "         LOG.debug(\"Chunk size: {}\", realChunk.getResult().size());\n         for (final Result result : realChunk.getResult()) {\n            if (result.getIterations() + result.getWarmup() == config.getIterations() &&\n                  result.getRepetitions() == config.getRepetitions()) {\n               if (result.getVersion().getGitversion().equals(config.getVersionOld())) {\n                  before.add(result.getValue());",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/84/ResultLoader.java\nindex 47bd503cb32..4db32928481 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler/84/ResultLoader.java\n@@ -46,8 +46,7 @@ public class ResultLoader {\n          final Chunk realChunk = MultipleVMTestUtil.findChunk(currentChunkStart, dataCollector);\n          LOG.debug(\"Chunk size: {}\", realChunk.getResult().size());\n          for (final Result result : realChunk.getResult()) {\n-            if (result.getIterations() + result.getWarmup() == config.getIterations() &&\n-                  result.getRepetitions() == config.getRepetitions()) {\n+            if (result.getIterations() + result.getWarmup() == config.getIterations() && result.getRepetitions() == config.getRepetitions()) {\n                if (result.getVersion().getGitversion().equals(config.getVersionOld())) {\n                   before.add(result.getValue());\n                }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "49",
                    "column": "83",
                    "severity": "error",
                    "message": "'&&' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/84/ResultLoader.java\nindex 47bd503cb32..18305a90774 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/intellij/84/ResultLoader.java\n@@ -20,58 +20,58 @@ import de.dagere.peass.dependency.analysis.data.TestCase;\n \n public class ResultLoader {\n \n-   private static final Logger LOG = LogManager.getLogger(ResultLoader.class);\n+  private static final Logger LOG = LogManager.getLogger(ResultLoader.class);\n \n-   private final MeasurementConfiguration config;\n-   final File measurementFolder;\n-   final TestCase testcase;\n-   final long currentChunkStart;\n+  private final MeasurementConfiguration config;\n+  final File measurementFolder;\n+  final TestCase testcase;\n+  final long currentChunkStart;\n \n-   private final List<Double> before = new LinkedList<>();\n-   private final List<Double> after = new LinkedList<>();\n+  private final List<Double> before = new LinkedList<>();\n+  private final List<Double> after = new LinkedList<>();\n \n-   public ResultLoader(final MeasurementConfiguration config, final File measurementFolder, final TestCase testcase,\n-         final long currentChunkStart) {\n-      this.config = config;\n-      this.measurementFolder = measurementFolder;\n-      this.testcase = testcase;\n-      this.currentChunkStart = currentChunkStart;\n-   }\n+  public ResultLoader(final MeasurementConfiguration config, final File measurementFolder, final TestCase testcase,\n+                      final long currentChunkStart) {\n+    this.config = config;\n+    this.measurementFolder = measurementFolder;\n+    this.testcase = testcase;\n+    this.currentChunkStart = currentChunkStart;\n+  }\n \n-   public void loadData() throws JAXBException {\n-      final File kopemeFile = new File(measurementFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n-      final XMLDataLoader loader = new XMLDataLoader(kopemeFile);\n-      if (loader.getFullData().getTestcases().getTestcase().size() > 0) {\n-         final Datacollector dataCollector = loader.getFullData().getTestcases().getTestcase().get(0).getDatacollector().get(0);\n-         final Chunk realChunk = MultipleVMTestUtil.findChunk(currentChunkStart, dataCollector);\n-         LOG.debug(\"Chunk size: {}\", realChunk.getResult().size());\n-         for (final Result result : realChunk.getResult()) {\n-            if (result.getIterations() + result.getWarmup() == config.getIterations() &&\n-                  result.getRepetitions() == config.getRepetitions()) {\n-               if (result.getVersion().getGitversion().equals(config.getVersionOld())) {\n-                  before.add(result.getValue());\n-               }\n-               if (result.getVersion().getGitversion().equals(config.getVersion())) {\n-                  after.add(result.getValue());\n-               }\n-            }\n-         }\n+  public void loadData() throws JAXBException {\n+    final File kopemeFile = new File(measurementFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n+    final XMLDataLoader loader = new XMLDataLoader(kopemeFile);\n+    if (loader.getFullData().getTestcases().getTestcase().size() > 0) {\n+      final Datacollector dataCollector = loader.getFullData().getTestcases().getTestcase().get(0).getDatacollector().get(0);\n+      final Chunk realChunk = MultipleVMTestUtil.findChunk(currentChunkStart, dataCollector);\n+      LOG.debug(\"Chunk size: {}\", realChunk.getResult().size());\n+      for (final Result result : realChunk.getResult()) {\n+        if (result.getIterations() + result.getWarmup() == config.getIterations() &&\n+            result.getRepetitions() == config.getRepetitions()) {\n+          if (result.getVersion().getGitversion().equals(config.getVersionOld())) {\n+            before.add(result.getValue());\n+          }\n+          if (result.getVersion().getGitversion().equals(config.getVersion())) {\n+            after.add(result.getValue());\n+          }\n+        }\n       }\n-   }\n+    }\n+  }\n \n-   public DescriptiveStatistics getStatisticsBefore() {\n-      return new DescriptiveStatistics(getValsBefore());\n-   }\n+  public DescriptiveStatistics getStatisticsBefore() {\n+    return new DescriptiveStatistics(getValsBefore());\n+  }\n \n-   public DescriptiveStatistics getStatisticsAfter() {\n-      return new DescriptiveStatistics(getValsAfter());\n-   }\n+  public DescriptiveStatistics getStatisticsAfter() {\n+    return new DescriptiveStatistics(getValsAfter());\n+  }\n \n-   public double[] getValsBefore() {\n-      return ArrayUtils.toPrimitive(before.toArray(new Double[0]));\n-   }\n+  public double[] getValsBefore() {\n+    return ArrayUtils.toPrimitive(before.toArray(new Double[0]));\n+  }\n \n-   public double[] getValsAfter() {\n-      return ArrayUtils.toPrimitive(after.toArray(new Double[0]));\n-   }\n+  public double[] getValsAfter() {\n+    return ArrayUtils.toPrimitive(after.toArray(new Double[0]));\n+  }\n }\n\\ No newline at end of file\n",
            "diff_size": 46
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/84/ResultLoader.java\nindex 47bd503cb32..329dea82ef1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/codebuff/84/ResultLoader.java\n@@ -3,14 +3,11 @@ package de.dagere.peass.measurement.analysis;\n import java.io.File;\n import java.util.LinkedList;\n import java.util.List;\n-\n import javax.xml.bind.JAXBException;\n-\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n-\n import de.dagere.kopeme.datastorage.XMLDataLoader;\n import de.dagere.kopeme.generated.Result;\n import de.dagere.kopeme.generated.TestcaseType.Datacollector;\n@@ -18,60 +15,57 @@ import de.dagere.kopeme.generated.TestcaseType.Datacollector.Chunk;\n import de.dagere.peass.config.MeasurementConfiguration;\n import de.dagere.peass.dependency.analysis.data.TestCase;\n \n-public class ResultLoader {\n \n-   private static final Logger LOG = LogManager.getLogger(ResultLoader.class);\n+public class ResultLoader {\n+ private static final Logger LOG = LogManager.getLogger(ResultLoader.class);\n+ private final MeasurementConfiguration config;\n+ final File measurementFolder;\n+ final TestCase testcase;\n+ final long currentChunkStart;\n+ private final List<Double> before = new LinkedList<>();\n+ private final List<Double> after = new LinkedList<>();\n \n-   private final MeasurementConfiguration config;\n-   final File measurementFolder;\n-   final TestCase testcase;\n-   final long currentChunkStart;\n+ public ResultLoader(final MeasurementConfiguration config, final File measurementFolder, final TestCase testcase, final long currentChunkStart) {\n+  this.config = config;\n+  this.measurementFolder = measurementFolder;\n+  this.testcase = testcase;\n+  this.currentChunkStart = currentChunkStart;\n+ }\n \n-   private final List<Double> before = new LinkedList<>();\n-   private final List<Double> after = new LinkedList<>();\n \n-   public ResultLoader(final MeasurementConfiguration config, final File measurementFolder, final TestCase testcase,\n-         final long currentChunkStart) {\n-      this.config = config;\n-      this.measurementFolder = measurementFolder;\n-      this.testcase = testcase;\n-      this.currentChunkStart = currentChunkStart;\n+ public void loadData() throws JAXBException {\n+  final File kopemeFile = new File(measurementFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n+  final XMLDataLoader loader = new XMLDataLoader(kopemeFile);\n+  if (loader.getFullData().getTestcases().getTestcase().size() > 0) {\n+   final Datacollector dataCollector = loader.getFullData().getTestcases().getTestcase().get(0).getDatacollector().get(0);\n+   final Chunk realChunk = MultipleVMTestUtil.findChunk(currentChunkStart, dataCollector);\n+   LOG.debug(\"Chunk size: {}\", realChunk.getResult().size());\n+   for (final Result result : realChunk.getResult()) {\n+    if (result.getIterations() + result.getWarmup() == config.getIterations() && result.getRepetitions() == config.getRepetitions()) {\n+     if (result.getVersion().getGitversion().equals(config.getVersionOld())) {\n+      before.add(result.getValue());\n+     }\n+     if (result.getVersion().getGitversion().equals(config.getVersion())) {\n+      after.add(result.getValue());\n+     }\n+    }\n    }\n+  }\n+ }\n \n-   public void loadData() throws JAXBException {\n-      final File kopemeFile = new File(measurementFolder, testcase.getShortClazz() + \"_\" + testcase.getMethod() + \".xml\");\n-      final XMLDataLoader loader = new XMLDataLoader(kopemeFile);\n-      if (loader.getFullData().getTestcases().getTestcase().size() > 0) {\n-         final Datacollector dataCollector = loader.getFullData().getTestcases().getTestcase().get(0).getDatacollector().get(0);\n-         final Chunk realChunk = MultipleVMTestUtil.findChunk(currentChunkStart, dataCollector);\n-         LOG.debug(\"Chunk size: {}\", realChunk.getResult().size());\n-         for (final Result result : realChunk.getResult()) {\n-            if (result.getIterations() + result.getWarmup() == config.getIterations() &&\n-                  result.getRepetitions() == config.getRepetitions()) {\n-               if (result.getVersion().getGitversion().equals(config.getVersionOld())) {\n-                  before.add(result.getValue());\n-               }\n-               if (result.getVersion().getGitversion().equals(config.getVersion())) {\n-                  after.add(result.getValue());\n-               }\n-            }\n-         }\n-      }\n-   }\n+ public DescriptiveStatistics getStatisticsBefore() {\n+  return new DescriptiveStatistics(getValsBefore());\n+ }\n \n-   public DescriptiveStatistics getStatisticsBefore() {\n-      return new DescriptiveStatistics(getValsBefore());\n-   }\n+ public DescriptiveStatistics getStatisticsAfter() {\n+  return new DescriptiveStatistics(getValsAfter());\n+ }\n \n-   public DescriptiveStatistics getStatisticsAfter() {\n-      return new DescriptiveStatistics(getValsAfter());\n-   }\n+ public double[] getValsBefore() {\n+  return ArrayUtils.toPrimitive(before.toArray(new Double[0]));\n+ }\n \n-   public double[] getValsBefore() {\n-      return ArrayUtils.toPrimitive(before.toArray(new Double[0]));\n-   }\n-\n-   public double[] getValsAfter() {\n-      return ArrayUtils.toPrimitive(after.toArray(new Double[0]));\n-   }\n+ public double[] getValsAfter() {\n+  return ArrayUtils.toPrimitive(after.toArray(new Double[0]));\n+ }\n }\n\\ No newline at end of file\n",
            "diff_size": 71
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/84/ResultLoader.java\nindex 47bd503cb32..4db32928481 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_random/84/ResultLoader.java\n@@ -46,8 +46,7 @@ public class ResultLoader {\n          final Chunk realChunk = MultipleVMTestUtil.findChunk(currentChunkStart, dataCollector);\n          LOG.debug(\"Chunk size: {}\", realChunk.getResult().size());\n          for (final Result result : realChunk.getResult()) {\n-            if (result.getIterations() + result.getWarmup() == config.getIterations() &&\n-                  result.getRepetitions() == config.getRepetitions()) {\n+            if (result.getIterations() + result.getWarmup() == config.getIterations() && result.getRepetitions() == config.getRepetitions()) {\n                if (result.getVersion().getGitversion().equals(config.getVersionOld())) {\n                   before.add(result.getValue());\n                }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/84/ResultLoader.java\nindex 47bd503cb32..4db32928481 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/errored/1/84/ResultLoader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/DaGeRe-peass/styler_three_grams/84/ResultLoader.java\n@@ -46,8 +46,7 @@ public class ResultLoader {\n          final Chunk realChunk = MultipleVMTestUtil.findChunk(currentChunkStart, dataCollector);\n          LOG.debug(\"Chunk size: {}\", realChunk.getResult().size());\n          for (final Result result : realChunk.getResult()) {\n-            if (result.getIterations() + result.getWarmup() == config.getIterations() &&\n-                  result.getRepetitions() == config.getRepetitions()) {\n+            if (result.getIterations() + result.getWarmup() == config.getIterations() && result.getRepetitions() == config.getRepetitions()) {\n                if (result.getVersion().getGitversion().equals(config.getVersionOld())) {\n                   before.add(result.getValue());\n                }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize"
    ]
}