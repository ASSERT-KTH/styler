{
    "project_name": "Roboy-roboy_dialog",
    "error_id": "22",
    "information": {
        "errors": [
            {
                "line": "77",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "        (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));\n  }\n  \n  public List<DerivationPruningComputer> getPruningComputers() {\n    return new ArrayList<>(pruningComputers);\n  }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler/22/DerivationPruner.java\nindex c8755164178..b103931caa3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler/22/DerivationPruner.java\n@@ -73,8 +73,8 @@ public class DerivationPruner {\n   protected boolean containsStrategy(String name) {\n     return opts.pruningStrategies.contains(name) &&\n         (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));\n-  }\n-  \n+      }\n+\n   public List<DerivationPruningComputer> getPruningComputers() {\n     return new ArrayList<>(pruningComputers);\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/intellij/22/DerivationPruner.java\nindex c8755164178..28a705a2acc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/intellij/22/DerivationPruner.java\n@@ -2,11 +2,12 @@ package edu.stanford.nlp.sempre;\n \n import java.util.*;\n \n-import fig.basic.*; import edu.stanford.nlp.sempre.roboy.utils.logging.*;\n+import fig.basic.*;\n+import edu.stanford.nlp.sempre.roboy.utils.logging.*;\n \n /**\n  * Prune derivations during parsing.\n- *\n+ * <p>\n  * To add custom pruning criteria, implement a DerivationPruningComputer class,\n  * and put the class name in the |pruningComputers| option.\n  *\n@@ -14,98 +15,106 @@ import fig.basic.*; import edu.stanford.nlp.sempre.roboy.utils.logging.*;\n  */\n \n public class DerivationPruner {\n-  public static class Options {\n-    @Option(gloss = \"Pruning strategies to use\")\n-    public List<String> pruningStrategies = new ArrayList<>();\n-    @Option(gloss = \"DerivationPruningComputer subclasses to look for pruning strategies\")\n-    public List<String> pruningComputers = new ArrayList<>();\n-    @Option public int pruningVerbosity = 0;\n-    @Option(gloss = \"(for tooManyValues) maximum denotation size of the final formula\")\n-    public int maxNumValues = 10;\n-  }\n-  public static Options opts = new Options();\n+    public static class Options {\n+        @Option(gloss = \"Pruning strategies to use\")\n+        public List<String> pruningStrategies = new ArrayList<>();\n+        @Option(gloss = \"DerivationPruningComputer subclasses to look for pruning strategies\")\n+        public List<String> pruningComputers = new ArrayList<>();\n+        @Option\n+        public int pruningVerbosity = 0;\n+        @Option(gloss = \"(for tooManyValues) maximum denotation size of the final formula\")\n+        public int maxNumValues = 10;\n+    }\n \n-  public final Parser parser;\n-  public final Example ex;\n-  private List<DerivationPruningComputer> pruningComputers = new ArrayList<>();\n-  // If not null, limit the pruning strategies to this list in addition to opts.pruningStrategies.\n-  private List<String> customAllowedPruningStrategies;\n-  private final Set<String> allStrategyNames;\n+    public static Options opts = new Options();\n \n-  public DerivationPruner(ParserState parserState) {\n-    this.parser = parserState.parser;\n-    this.ex = parserState.ex;\n-    this.pruningComputers.add(new DefaultDerivationPruningComputer(this));\n-    for (String pruningComputer : opts.pruningComputers) {\n-      try {\n-        Class<?> pruningComputerClass = Class.forName(SempreUtils.resolveClassName(pruningComputer));\n-        pruningComputers.add((DerivationPruningComputer) pruningComputerClass.getConstructor(this.getClass()).newInstance(this));\n-      } catch (ClassNotFoundException e1) {\n-        throw new RuntimeException(\"Illegal pruning computer: \" + pruningComputer);\n-      } catch (Exception e) {\n-        e.printStackTrace();\n-        e.getCause().printStackTrace();\n-        throw new RuntimeException(\"Error while instantiating pruning computer: \" + pruningComputer);\n-      }\n+    public final Parser parser;\n+    public final Example ex;\n+    private List<DerivationPruningComputer> pruningComputers = new ArrayList<>();\n+    // If not null, limit the pruning strategies to this list in addition to opts.pruningStrategies.\n+    private List<String> customAllowedPruningStrategies;\n+    private final Set<String> allStrategyNames;\n+\n+    public DerivationPruner(ParserState parserState) {\n+        this.parser = parserState.parser;\n+        this.ex = parserState.ex;\n+        this.pruningComputers.add(new DefaultDerivationPruningComputer(this));\n+        for (String pruningComputer : opts.pruningComputers) {\n+            try {\n+                Class<?> pruningComputerClass = Class.forName(SempreUtils.resolveClassName(pruningComputer));\n+                pruningComputers.add(\n+                    (DerivationPruningComputer) pruningComputerClass.getConstructor(this.getClass()).newInstance(this));\n+            } catch (ClassNotFoundException e1) {\n+                throw new RuntimeException(\"Illegal pruning computer: \" + pruningComputer);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                e.getCause().printStackTrace();\n+                throw new RuntimeException(\"Error while instantiating pruning computer: \" + pruningComputer);\n+            }\n+        }\n+        // Compile the list of all strategies\n+        allStrategyNames = new HashSet<>();\n+        for (DerivationPruningComputer computer : pruningComputers) {\n+            allStrategyNames.addAll(computer.getAllStrategyNames());\n+        }\n+        for (String strategy : opts.pruningStrategies) {\n+            if (!allStrategyNames.contains(strategy)) {\n+                LogInfoToggle.fails(\"Pruning strategy '%s' not found!\", strategy);\n+            }\n+        }\n     }\n-    // Compile the list of all strategies\n-    allStrategyNames = new HashSet<>();\n-    for (DerivationPruningComputer computer : pruningComputers)\n-      allStrategyNames.addAll(computer.getAllStrategyNames());\n-    for (String strategy : opts.pruningStrategies) {\n-      if (!allStrategyNames.contains(strategy))\n-        LogInfoToggle.fails(\"Pruning strategy '%s' not found!\", strategy);\n+\n+    /**\n+     * Set additional restrictions on the pruning strategies.\n+     * <p>\n+     * If customAllowedPruningStrategies is not null, the pruning strategy must be in both\n+     * opts.pruningStrategies and customAllowedPruningStrategies in order to be used.\n+     * <p>\n+     * Useful when some pruning strategies can break the parsing mechanism.\n+     */\n+    public void setCustomAllowedPruningStrategies(List<String> customAllowedPruningStrategies) {\n+        this.customAllowedPruningStrategies = customAllowedPruningStrategies;\n     }\n-  }\n \n-  /**\n-   * Set additional restrictions on the pruning strategies.\n-   *\n-   * If customAllowedPruningStrategies is not null, the pruning strategy must be in both\n-   * opts.pruningStrategies and customAllowedPruningStrategies in order to be used.\n-   *\n-   * Useful when some pruning strategies can break the parsing mechanism.\n-   */\n-  public void setCustomAllowedPruningStrategies(List<String> customAllowedPruningStrategies) {\n-    this.customAllowedPruningStrategies = customAllowedPruningStrategies;\n-  }\n+    protected boolean containsStrategy(String name) {\n+        return opts.pruningStrategies.contains(name) &&\n+            (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));\n+    }\n \n-  protected boolean containsStrategy(String name) {\n-    return opts.pruningStrategies.contains(name) &&\n-        (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));\n-  }\n-  \n-  public List<DerivationPruningComputer> getPruningComputers() {\n-    return new ArrayList<>(pruningComputers);\n-  }\n+    public List<DerivationPruningComputer> getPruningComputers() {\n+        return new ArrayList<>(pruningComputers);\n+    }\n \n-  /**\n-   * Return true if the derivation should be pruned. Otherwise, return false.\n-   */\n-  public boolean isPruned(Derivation deriv) {\n-    if (opts.pruningStrategies.isEmpty() && pruningComputers.isEmpty()) return false;\n-    String matchedStrategy;\n-    for (DerivationPruningComputer computer : pruningComputers) {\n-      if ((matchedStrategy = computer.isPruned(deriv)) != null) {\n-        if (opts.pruningVerbosity >= 2)\n-          LogInfoToggle.logs(\"PRUNED [%s] %s\", matchedStrategy, deriv.formula);\n-        return true;\n-      }\n+    /**\n+     * Return true if the derivation should be pruned. Otherwise, return false.\n+     */\n+    public boolean isPruned(Derivation deriv) {\n+        if (opts.pruningStrategies.isEmpty() && pruningComputers.isEmpty()) {\n+            return false;\n+        }\n+        String matchedStrategy;\n+        for (DerivationPruningComputer computer : pruningComputers) {\n+            if ((matchedStrategy = computer.isPruned(deriv)) != null) {\n+                if (opts.pruningVerbosity >= 2) {\n+                    LogInfoToggle.logs(\"PRUNED [%s] %s\", matchedStrategy, deriv.formula);\n+                }\n+                return true;\n+            }\n+        }\n+        return false;\n     }\n-    return false;\n-  }\n \n-  /**\n-   * Run isPruned with a (temporary) custom set of allowed pruning strategies.\n-   * If customAllowedPruningStrategies is null, all strategies are allowed.\n-   * If customAllowedPruningStrategies is empty, no pruning happens.\n-   */\n-  public boolean isPruned(Derivation deriv, List<String> customAllowedPruningStategies) {\n-    List<String> old = this.customAllowedPruningStrategies;\n-    this.customAllowedPruningStrategies = customAllowedPruningStategies;\n-    boolean answer = isPruned(deriv);\n-    this.customAllowedPruningStrategies = old;\n-    return answer;\n-  }\n+    /**\n+     * Run isPruned with a (temporary) custom set of allowed pruning strategies.\n+     * If customAllowedPruningStrategies is null, all strategies are allowed.\n+     * If customAllowedPruningStrategies is empty, no pruning happens.\n+     */\n+    public boolean isPruned(Derivation deriv, List<String> customAllowedPruningStategies) {\n+        List<String> old = this.customAllowedPruningStrategies;\n+        this.customAllowedPruningStrategies = customAllowedPruningStategies;\n+        boolean answer = isPruned(deriv);\n+        this.customAllowedPruningStrategies = old;\n+        return answer;\n+    }\n \n }\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/naturalize/22/DerivationPruner.java\nindex c8755164178..fc41ba8deb0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/naturalize/22/DerivationPruner.java\n@@ -2,7 +2,8 @@ package edu.stanford.nlp.sempre;\n \n import java.util.*;\n \n-import fig.basic.*; import edu.stanford.nlp.sempre.roboy.utils.logging.*;\n+import fig.basic.*;\n+import edu.stanford.nlp.sempre.roboy.utils.logging.*;\n \n /**\n  * Prune derivations during parsing.\n@@ -74,9 +75,9 @@ public class DerivationPruner {\n     return opts.pruningStrategies.contains(name) &&\n         (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));\n   }\n-  \n-  public List<DerivationPruningComputer> getPruningComputers() {\n-    return new ArrayList<>(pruningComputers);\n+\n+public List<DerivationPruningComputer> getPruningComputers() {\n+  return new ArrayList<>(pruningComputers);\n   }\n \n   /**\n@@ -108,4 +109,4 @@ public class DerivationPruner {\n     return answer;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/codebuff/22/DerivationPruner.java\nindex c8755164178..7ef3cca898a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/codebuff/22/DerivationPruner.java\n@@ -1,8 +1,8 @@\n package edu.stanford.nlp.sempre;\n \n import java.util.*;\n-\n-import fig.basic.*; import edu.stanford.nlp.sempre.roboy.utils.logging.*;\n+import fig.basic.*;\n+import edu.stanford.nlp.sempre.roboy.utils.logging.*;\n \n /**\n  * Prune derivations during parsing.\n@@ -13,6 +13,7 @@ import fig.basic.*; import edu.stanford.nlp.sempre.roboy.utils.logging.*;\n  * @author ppasupat\n  */\n \n+\n public class DerivationPruner {\n   public static class Options {\n     @Option(gloss = \"Pruning strategies to use\")\n@@ -23,9 +24,11 @@ public class DerivationPruner {\n     @Option(gloss = \"(for tooManyValues) maximum denotation size of the final formula\")\n     public int maxNumValues = 10;\n   }\n+\n   public static Options opts = new Options();\n \n   public final Parser parser;\n+\n   public final Example ex;\n   private List<DerivationPruningComputer> pruningComputers = new ArrayList<>();\n   // If not null, limit the pruning strategies to this list in addition to opts.pruningStrategies.\n@@ -66,15 +69,16 @@ public class DerivationPruner {\n    *\n    * Useful when some pruning strategies can break the parsing mechanism.\n    */\n+\n   public void setCustomAllowedPruningStrategies(List<String> customAllowedPruningStrategies) {\n     this.customAllowedPruningStrategies = customAllowedPruningStrategies;\n   }\n \n+\n   protected boolean containsStrategy(String name) {\n-    return opts.pruningStrategies.contains(name) &&\n-        (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));\n+    return opts.pruningStrategies.contains(name) && (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));\n   }\n-  \n+\n   public List<DerivationPruningComputer> getPruningComputers() {\n     return new ArrayList<>(pruningComputers);\n   }\n@@ -82,8 +86,11 @@ public class DerivationPruner {\n   /**\n    * Return true if the derivation should be pruned. Otherwise, return false.\n    */\n+\n   public boolean isPruned(Derivation deriv) {\n-    if (opts.pruningStrategies.isEmpty() && pruningComputers.isEmpty()) return false;\n+    if (opts.pruningStrategies.isEmpty() && pruningComputers.isEmpty())\n+      return false;\n+\n     String matchedStrategy;\n     for (DerivationPruningComputer computer : pruningComputers) {\n       if ((matchedStrategy = computer.isPruned(deriv)) != null) {\n@@ -100,12 +107,13 @@ public class DerivationPruner {\n    * If customAllowedPruningStrategies is null, all strategies are allowed.\n    * If customAllowedPruningStrategies is empty, no pruning happens.\n    */\n+\n   public boolean isPruned(Derivation deriv, List<String> customAllowedPruningStategies) {\n     List<String> old = this.customAllowedPruningStrategies;\n     this.customAllowedPruningStrategies = customAllowedPruningStategies;\n+\n     boolean answer = isPruned(deriv);\n     this.customAllowedPruningStrategies = old;\n     return answer;\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_random/22/DerivationPruner.java\nindex c8755164178..b103931caa3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_random/22/DerivationPruner.java\n@@ -73,8 +73,8 @@ public class DerivationPruner {\n   protected boolean containsStrategy(String name) {\n     return opts.pruningStrategies.contains(name) &&\n         (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));\n-  }\n-  \n+      }\n+\n   public List<DerivationPruningComputer> getPruningComputers() {\n     return new ArrayList<>(pruningComputers);\n   }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "75",
                    "column": "98",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "75",
                    "column": "99",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_three_grams/22/DerivationPruner.java\nindex c8755164178..626d7470b1f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/errored/1/22/DerivationPruner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Roboy-roboy_dialog/styler_three_grams/22/DerivationPruner.java\n@@ -72,10 +72,9 @@ public class DerivationPruner {\n \n   protected boolean containsStrategy(String name) {\n     return opts.pruningStrategies.contains(name) &&\n-        (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));\n-  }\n-  \n-  public List<DerivationPruningComputer> getPruningComputers() {\n+        (customAllowedPruningStrategies == null || customAllowedPruningStrategies.contains(name));}\n+\n+        public List<DerivationPruningComputer> getPruningComputers() {\n     return new ArrayList<>(pruningComputers);\n   }\n \n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ],
    "not_repaired_by": [
        "styler_three_grams"
    ]
}