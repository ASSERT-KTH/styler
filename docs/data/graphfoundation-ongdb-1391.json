{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1391",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1391/BaseRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1391/BaseRecordFormat.java\nindex e4453d70e1d..091f99bf0f9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1391/BaseRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1391/BaseRecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format;\n \n import java.util.function.Function;\n@@ -38,70 +39,70 @@ import org.neo4j.kernel.impl.store.record.Record;\n  */\n public abstract class BaseRecordFormat<RECORD extends AbstractBaseRecord> implements RecordFormat<RECORD>\n {\n-    public static final int IN_USE_BIT = 0b0000_0001;\n-    public static final Function<StoreHeader,Integer> INT_STORE_HEADER_READER =\n-            header -> ((IntStoreHeader) header).value();\n-\n-    public static Function<StoreHeader,Integer> fixedRecordSize( int recordSize )\n-    {\n-        return header -> recordSize;\n-    }\n-\n-    private final Function<StoreHeader,Integer> recordSize;\n-    private final int recordHeaderSize;\n-    private final long maxId;\n-\n-    protected BaseRecordFormat( Function<StoreHeader,Integer> recordSize, int recordHeaderSize, int idBits )\n-    {\n-        this.recordSize = recordSize;\n-        this.recordHeaderSize = recordHeaderSize;\n-        this.maxId = (1L << idBits) - 1;\n-    }\n-\n-    @Override\n-    public int getRecordSize( StoreHeader header )\n-    {\n-        return recordSize.apply( header );\n-    }\n-\n-    @Override\n-    public int getRecordHeaderSize()\n-    {\n-        return recordHeaderSize;\n-    }\n-\n-    @Override\n-    public long getNextRecordReference( RECORD record )\n-    {\n-        return Record.NULL_REFERENCE.intValue();\n-    }\n-\n-    public static long longFromIntAndMod( long base, long modifier )\n-    {\n-        return modifier == 0 && IdValidator.isReservedId( base ) ? -1 : base | modifier;\n-    }\n-\n-    @Override\n-    public void prepare( RECORD record, int recordSize, IdSequence idSequence )\n-    {   // Do nothing by default\n-    }\n-\n-    @Override\n-    public boolean equals( Object obj )\n-    {\n-        return obj != null && getClass().equals( obj.getClass() );\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        return getClass().hashCode();\n-\n-    }\n-\n-    @Override\n-    public final long getMaxId()\n-    {\n-        return maxId;\n-    }\n+  public static final int IN_USE_BIT = 0b0000_0001;\n+  public static final Function<StoreHeader, Integer> INT_STORE_HEADER_READER =\n+      header -> ((IntStoreHeader) header).value();\n+\n+  public static Function<StoreHeader, Integer> fixedRecordSize(int recordSize)\n+  {\n+    return header -> recordSize;\n+  }\n+\n+  private final Function<StoreHeader, Integer> recordSize;\n+  private final int recordHeaderSize;\n+  private final long maxId;\n+\n+  protected BaseRecordFormat(Function<StoreHeader, Integer> recordSize, int recordHeaderSize, int idBits)\n+  {\n+    this.recordSize = recordSize;\n+    this.recordHeaderSize = recordHeaderSize;\n+    this.maxId = (1L << idBits) - 1;\n+  }\n+\n+  @Override\n+  public int getRecordSize(StoreHeader header)\n+  {\n+    return recordSize.apply(header);\n+  }\n+\n+  @Override\n+  public int getRecordHeaderSize()\n+  {\n+    return recordHeaderSize;\n+  }\n+\n+  @Override\n+  public long getNextRecordReference(RECORD record)\n+  {\n+    return Record.NULL_REFERENCE.intValue();\n+  }\n+\n+  public static long longFromIntAndMod(long base, long modifier)\n+  {\n+    return modifier == 0 && IdValidator.isReservedId(base) ? -1 : base | modifier;\n+  }\n+\n+  @Override\n+  public void prepare(RECORD record, int recordSize, IdSequence idSequence)\n+  {   // Do nothing by default\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    return obj != null && getClass().equals(obj.getClass());\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return getClass().hashCode();\n+\n+  }\n+\n+  @Override\n+  public final long getMaxId()\n+  {\n+    return maxId;\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1391/BaseRecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1391/BaseRecordFormat.java\nindex e4453d70e1d..fdbf2b12907 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1391/BaseRecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1391/BaseRecordFormat.java\n@@ -42,7 +42,7 @@ public abstract class BaseRecordFormat<RECORD extends AbstractBaseRecord> implem\n     public static final Function<StoreHeader,Integer> INT_STORE_HEADER_READER =\n             header -> ((IntStoreHeader) header).value();\n \n-    public static Function<StoreHeader,Integer> fixedRecordSize( int recordSize )\n+public static Function<StoreHeader,Integer> fixedRecordSize( int recordSize )\n     {\n         return header -> recordSize;\n     }\n@@ -55,7 +55,7 @@ public abstract class BaseRecordFormat<RECORD extends AbstractBaseRecord> implem\n     {\n         this.recordSize = recordSize;\n         this.recordHeaderSize = recordHeaderSize;\n-        this.maxId = (1L << idBits) - 1;\n+        this.maxId = ( 1L << idBits) - 1;\n     }\n \n     @Override\n@@ -83,7 +83,8 @@ public abstract class BaseRecordFormat<RECORD extends AbstractBaseRecord> implem\n \n     @Override\n     public void prepare( RECORD record, int recordSize, IdSequence idSequence )\n-    {   // Do nothing by default\n+    {\n+    // Do nothing by default\n     }\n \n     @Override\n@@ -96,7 +97,6 @@ public abstract class BaseRecordFormat<RECORD extends AbstractBaseRecord> implem\n     public int hashCode()\n     {\n         return getClass().hashCode();\n-\n     }\n \n     @Override\n@@ -104,4 +104,4 @@ public abstract class BaseRecordFormat<RECORD extends AbstractBaseRecord> implem\n     {\n         return maxId;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}