{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "366",
    "information": {
        "errors": [
            {
                "line": "78",
                "column": "47",
                "severity": "warning",
                "message": "'(' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
            }
        ]
    },
    "source_code": "\n  // \u53ea\u4f1a\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u8c03\u7528\n  public SchemaMeta getOrCreateProducerSchema( String schemaId,\n      Class<?> producerClass,\n      Object producerInstance) {\n    MicroserviceMeta microserviceMeta = SCBEngine.getInstance().getProducerMicroserviceMeta();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/366/ProducerSchemaFactory.java\nindex 5b1d0c88522..08d27895cda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/366/ProducerSchemaFactory.java\n@@ -75,7 +75,7 @@ public class ProducerSchemaFactory extends AbstractSchemaFactory<ProducerSchemaC\n   }\n \n   // \u53ea\u4f1a\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u8c03\u7528\n-  public SchemaMeta getOrCreateProducerSchema( String schemaId,\n+  public SchemaMeta getOrCreateProducerSchema(String schemaId,\n       Class<?> producerClass,\n       Object producerInstance) {\n     MicroserviceMeta microserviceMeta = SCBEngine.getInstance().getProducerMicroserviceMeta();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/366/ProducerSchemaFactory.java\nindex 5b1d0c88522..8be0093c29f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/366/ProducerSchemaFactory.java\n@@ -75,9 +75,9 @@ public class ProducerSchemaFactory extends AbstractSchemaFactory<ProducerSchemaC\n   }\n \n   // \u53ea\u4f1a\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u8c03\u7528\n-  public SchemaMeta getOrCreateProducerSchema( String schemaId,\n-      Class<?> producerClass,\n-      Object producerInstance) {\n+  public SchemaMeta getOrCreateProducerSchema(String schemaId,\n+                                              Class<?> producerClass,\n+                                              Object producerInstance) {\n     MicroserviceMeta microserviceMeta = SCBEngine.getInstance().getProducerMicroserviceMeta();\n     ProducerSchemaContext context = new ProducerSchemaContext();\n     context.setMicroserviceMeta(microserviceMeta);\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/366/ProducerSchemaFactory.java\nindex 5b1d0c88522..5fa71a4fb6b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/366/ProducerSchemaFactory.java\n@@ -75,9 +75,8 @@ public class ProducerSchemaFactory extends AbstractSchemaFactory<ProducerSchemaC\n   }\n \n   // \u53ea\u4f1a\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u8c03\u7528\n-  public SchemaMeta getOrCreateProducerSchema( String schemaId,\n-      Class<?> producerClass,\n-      Object producerInstance) {\n+  public SchemaMeta getOrCreateProducerSchema(String schemaId,\n+      Class<?> producerClass, Object producerInstance) {\n     MicroserviceMeta microserviceMeta = SCBEngine.getInstance().getProducerMicroserviceMeta();\n     ProducerSchemaContext context = new ProducerSchemaContext();\n     context.setMicroserviceMeta(microserviceMeta);\n@@ -144,4 +143,4 @@ public class ProducerSchemaFactory extends AbstractSchemaFactory<ProducerSchemaC\n     // \u6ce8\u518c\u5951\u7ea6\n     return schemaLoader.registerSchema(context.getMicroserviceMeta(), context.getSchemaId(), swagger);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "100",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/366/ProducerSchemaFactory.java\nindex 5b1d0c88522..c8f85f151fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/366/ProducerSchemaFactory.java\n@@ -25,9 +25,7 @@ import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Executor;\n-\n import javax.inject.Inject;\n-\n import org.apache.servicecomb.core.Const;\n import org.apache.servicecomb.core.SCBEngine;\n import org.apache.servicecomb.core.definition.MicroserviceMeta;\n@@ -44,11 +42,9 @@ import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n import org.springframework.util.StringUtils;\n-\n import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectWriter;\n import com.netflix.config.DynamicPropertyFactory;\n-\n import io.swagger.models.Operation;\n import io.swagger.models.Swagger;\n import io.swagger.util.Yaml;\n@@ -75,9 +71,8 @@ public class ProducerSchemaFactory extends AbstractSchemaFactory<ProducerSchemaC\n   }\n \n   // \u53ea\u4f1a\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u8c03\u7528\n-  public SchemaMeta getOrCreateProducerSchema( String schemaId,\n-      Class<?> producerClass,\n-      Object producerInstance) {\n+\n+  public SchemaMeta getOrCreateProducerSchema(String schemaId, Class<?> producerClass, Object producerInstance) {\n     MicroserviceMeta microserviceMeta = SCBEngine.getInstance().getProducerMicroserviceMeta();\n     ProducerSchemaContext context = new ProducerSchemaContext();\n     context.setMicroserviceMeta(microserviceMeta);\n@@ -86,26 +81,23 @@ public class ProducerSchemaFactory extends AbstractSchemaFactory<ProducerSchemaC\n     context.setProducerInstance(producerInstance);\n \n     SchemaMeta schemaMeta = getOrCreateSchema(context);\n-\n-    SwaggerProducer producer = swaggerEnv.createProducer(producerInstance, schemaMeta.getSwaggerIntf(),\n-        convertSwaggerOperationMap(schemaMeta));\n+    SwaggerProducer producer = swaggerEnv.createProducer(producerInstance,\n+schemaMeta.getSwaggerIntf(),\n+convertSwaggerOperationMap(schemaMeta));\n     Executor reactiveExecutor = BeanUtils.getBean(ExecutorManager.EXECUTOR_REACTIVE);\n     for (OperationMeta operationMeta : schemaMeta.getOperations()) {\n       SwaggerProducerOperation producerOperation = producer.findOperation(operationMeta.getOperationId());\n       operationMeta.putExtData(Const.PRODUCER_OPERATION, producerOperation);\n-\n       if (CompletableFuture.class.equals(producerOperation.getProducerMethod().getReturnType())) {\n         operationMeta.setExecutor(ExecutorManager.findExecutor(operationMeta, reactiveExecutor));\n       }\n     }\n-\n     return schemaMeta;\n   }\n \n   private Map<String, Operation> convertSwaggerOperationMap(SchemaMeta schemaMeta) {\n     Map<String, Operation> operationMap = new LinkedHashMap<>(schemaMeta.getOperations().size());\n-    schemaMeta.getOperations().forEach(\n-        operationMeta -> operationMap.put(operationMeta.getOperationId(), operationMeta.getSwaggerOperation()));\n+    schemaMeta.getOperations().forEach(operationMeta -> operationMap.put(operationMeta.getOperationId(), operationMeta.getSwaggerOperation()));\n     return operationMap;\n   }\n \n@@ -123,25 +115,23 @@ public class ProducerSchemaFactory extends AbstractSchemaFactory<ProducerSchemaC\n     }\n \n     // \u6839\u636eclass\u52a8\u6001\u4ea7\u751f\u5951\u7ea6\n+\n     if (swagger == null) {\n       SwaggerGenerator generator = generateSwagger(context);\n       swagger = generator.getSwagger();\n+\n       String swaggerContent = getSwaggerContent(swagger);\n-      LOGGER.info(\"generate swagger for {}/{}/{}, swagger: {}\",\n-          context.getMicroserviceMeta().getAppId(),\n-          context.getMicroserviceName(),\n-          context.getSchemaId(),\n-          swaggerContent);\n+      LOGGER.info(\"generate swagger for {}/{}/{}, swagger: {}\", context.getMicroserviceMeta().getAppId(), context.getMicroserviceName(), context.getSchemaId(), swaggerContent);\n     }\n \n     String urlPrefix = System.getProperty(URL_PREFIX);\n     if (!StringUtils.isEmpty(urlPrefix) && !swagger.getBasePath().startsWith(urlPrefix)\n-        && DynamicPropertyFactory.getInstance()\n-        .getBooleanProperty(REGISTER_URL_PREFIX, false).get()) {\n+        && DynamicPropertyFactory.getInstance().getBooleanProperty(REGISTER_URL_PREFIX, false)\n+                                               .get()) {\n       LOGGER.info(\"Add swagger base path prefix for {} with {}\", swagger.getBasePath(), urlPrefix);\n       swagger.setBasePath(urlPrefix + swagger.getBasePath());\n     }\n     // \u6ce8\u518c\u5951\u7ea6\n     return schemaLoader.registerSchema(context.getMicroserviceMeta(), context.getSchemaId(), swagger);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/366/ProducerSchemaFactory.java\nindex 5b1d0c88522..08d27895cda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/366/ProducerSchemaFactory.java\n@@ -75,7 +75,7 @@ public class ProducerSchemaFactory extends AbstractSchemaFactory<ProducerSchemaC\n   }\n \n   // \u53ea\u4f1a\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u8c03\u7528\n-  public SchemaMeta getOrCreateProducerSchema( String schemaId,\n+  public SchemaMeta getOrCreateProducerSchema(String schemaId,\n       Class<?> producerClass,\n       Object producerInstance) {\n     MicroserviceMeta microserviceMeta = SCBEngine.getInstance().getProducerMicroserviceMeta();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/366/ProducerSchemaFactory.java\nindex 5b1d0c88522..08d27895cda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/366/ProducerSchemaFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/366/ProducerSchemaFactory.java\n@@ -75,7 +75,7 @@ public class ProducerSchemaFactory extends AbstractSchemaFactory<ProducerSchemaC\n   }\n \n   // \u53ea\u4f1a\u5728\u542f\u52a8\u6d41\u7a0b\u4e2d\u8c03\u7528\n-  public SchemaMeta getOrCreateProducerSchema( String schemaId,\n+  public SchemaMeta getOrCreateProducerSchema(String schemaId,\n       Class<?> producerClass,\n       Object producerInstance) {\n     MicroserviceMeta microserviceMeta = SCBEngine.getInstance().getProducerMicroserviceMeta();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}