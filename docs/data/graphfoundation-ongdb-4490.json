{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4490",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4490/RecordFormats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4490/RecordFormats.java\nindex 89e86f82dee..b04e1ef5259 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4490/RecordFormats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4490/RecordFormats.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format;\n \n import org.neo4j.helpers.Service;\n@@ -36,90 +37,92 @@ import org.neo4j.kernel.impl.store.record.RelationshipTypeTokenRecord;\n  */\n public interface RecordFormats\n {\n-    abstract class Factory extends Service\n+  abstract class Factory extends Service\n+  {\n+    public Factory(String key, String... altKeys)\n     {\n-        public Factory( String key, String... altKeys )\n-        {\n-            super( key, altKeys );\n-        }\n-\n-        public abstract RecordFormats newInstance();\n+      super(key, altKeys);\n     }\n \n-    String storeVersion();\n-\n-    /**\n-     * @return the neo4j version where this format was introduced. It is almost certainly NOT the only version of\n-     * neo4j where this format is used.\n-     */\n-    String introductionVersion();\n-\n-    /**\n-     * Generation of this format, format family local int value which should be incrementing along with\n-     * releases, e.g. store version, e.g. official versions of the product. Use to determine generation of particular\n-     * format and to be able to find newest of among them.\n-     * When implementing new format generation can be assigned to any positive integer, but please take into account\n-     * future version generations.\n-     * When evolving an older format the generation of the new format version should\n-     * be higher than the format it evolves from.\n-     * The generation value doesn't need to correlate to any other value, the only thing needed is to\n-     * determine \"older\" or \"newer\".\n-     *\n-     * @return format generation, with the intent of usage being that a store can migrate to a newer or\n-     * same generation, but not to an older generation within same format family.\n-     */\n-    int generation();\n-\n-    RecordFormat<NodeRecord> node();\n-\n-    RecordFormat<RelationshipGroupRecord> relationshipGroup();\n-\n-    RecordFormat<RelationshipRecord> relationship();\n-\n-    RecordFormat<PropertyRecord> property();\n-\n-    RecordFormat<LabelTokenRecord> labelToken();\n-\n-    RecordFormat<PropertyKeyTokenRecord> propertyKeyToken();\n-\n-    RecordFormat<RelationshipTypeTokenRecord> relationshipTypeToken();\n-\n-    RecordFormat<DynamicRecord> dynamic();\n-\n-    RecordFormat<MetaDataRecord> metaData();\n-\n-    /**\n-     * Use when comparing one format to another, for example for migration purposes.\n-     *\n-     * @return array of {@link Capability capabilities} for comparison.\n-     */\n-    Capability[] capabilities();\n-\n-    /**\n-     * @param capability {@link Capability} to check for.\n-     * @return whether or not this format has a certain {@link Capability}.\n-     */\n-    boolean hasCapability( Capability capability );\n-\n-    /**\n-     * Get format family to which this format belongs to.\n-     * @return format family\n-     * @see FormatFamily\n-     */\n-    FormatFamily getFormatFamily();\n-\n-    /**\n-     * Whether or not changes in the {@code other} format, compared to this format, for the given {@code type}, are compatible.\n-     *\n-     * @param other {@link RecordFormats} to check compatibility with.\n-     * @param type {@link CapabilityType type} of capability to check compatibility for.\n-     * @return true if the {@code other} format have compatible capabilities of the given {@code type}.\n-     */\n-    boolean hasCompatibleCapabilities( RecordFormats other, CapabilityType type );\n-\n-    /**\n-     * Record format name\n-     * @return name of record format\n-     */\n-    String name();\n+    public abstract RecordFormats newInstance();\n+  }\n+\n+  String storeVersion();\n+\n+  /**\n+   * @return the neo4j version where this format was introduced. It is almost certainly NOT the only version of\n+   * neo4j where this format is used.\n+   */\n+  String introductionVersion();\n+\n+  /**\n+   * Generation of this format, format family local int value which should be incrementing along with\n+   * releases, e.g. store version, e.g. official versions of the product. Use to determine generation of particular\n+   * format and to be able to find newest of among them.\n+   * When implementing new format generation can be assigned to any positive integer, but please take into account\n+   * future version generations.\n+   * When evolving an older format the generation of the new format version should\n+   * be higher than the format it evolves from.\n+   * The generation value doesn't need to correlate to any other value, the only thing needed is to\n+   * determine \"older\" or \"newer\".\n+   *\n+   * @return format generation, with the intent of usage being that a store can migrate to a newer or\n+   * same generation, but not to an older generation within same format family.\n+   */\n+  int generation();\n+\n+  RecordFormat<NodeRecord> node();\n+\n+  RecordFormat<RelationshipGroupRecord> relationshipGroup();\n+\n+  RecordFormat<RelationshipRecord> relationship();\n+\n+  RecordFormat<PropertyRecord> property();\n+\n+  RecordFormat<LabelTokenRecord> labelToken();\n+\n+  RecordFormat<PropertyKeyTokenRecord> propertyKeyToken();\n+\n+  RecordFormat<RelationshipTypeTokenRecord> relationshipTypeToken();\n+\n+  RecordFormat<DynamicRecord> dynamic();\n+\n+  RecordFormat<MetaDataRecord> metaData();\n+\n+  /**\n+   * Use when comparing one format to another, for example for migration purposes.\n+   *\n+   * @return array of {@link Capability capabilities} for comparison.\n+   */\n+  Capability[] capabilities();\n+\n+  /**\n+   * @param capability {@link Capability} to check for.\n+   * @return whether or not this format has a certain {@link Capability}.\n+   */\n+  boolean hasCapability(Capability capability);\n+\n+  /**\n+   * Get format family to which this format belongs to.\n+   *\n+   * @return format family\n+   * @see FormatFamily\n+   */\n+  FormatFamily getFormatFamily();\n+\n+  /**\n+   * Whether or not changes in the {@code other} format, compared to this format, for the given {@code type}, are compatible.\n+   *\n+   * @param other {@link RecordFormats} to check compatibility with.\n+   * @param type  {@link CapabilityType type} of capability to check compatibility for.\n+   * @return true if the {@code other} format have compatible capabilities of the given {@code type}.\n+   */\n+  boolean hasCompatibleCapabilities(RecordFormats other, CapabilityType type);\n+\n+  /**\n+   * Record format name\n+   *\n+   * @return name of record format\n+   */\n+  String name();\n }\n",
            "diff_size": 91
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4490/RecordFormats.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4490/RecordFormats.java\nindex 89e86f82dee..38f787dbe43 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4490/RecordFormats.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4490/RecordFormats.java\n@@ -122,4 +122,4 @@ public interface RecordFormats\n      * @return name of record format\n      */\n     String name();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}