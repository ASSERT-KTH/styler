{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "129",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 93).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  final Config nonReplicated =\n      ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n  final Config replicated =\n      ConfigFactory.load()\n          .withFallback(ConfigFactory.load(\"test-replicated.conf\"))",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/129/PartitionedCachedViewTest.java\nindex c4ad0715be7..156311f0381 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler/129/PartitionedCachedViewTest.java\n@@ -39,8 +39,7 @@ import org.junit.Test;\n /** Test suite for {@link CachedView}. */\n public class PartitionedCachedViewTest {\n \n-  final Config nonReplicated =\n-      ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n+  final Config nonReplicated = ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n   final Config replicated =\n       ConfigFactory.load()\n           .withFallback(ConfigFactory.load(\"test-replicated.conf\"))\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/129/PartitionedCachedViewTest.java\nindex c4ad0715be7..531242f7579 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/129/PartitionedCachedViewTest.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.direct.view;\n \n import static org.junit.Assert.*;\n@@ -40,7 +41,8 @@ import org.junit.Test;\n public class PartitionedCachedViewTest {\n \n   final Config nonReplicated =\n-      ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n+      ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\"))\n+          .resolve();\n   final Config replicated =\n       ConfigFactory.load()\n           .withFallback(ConfigFactory.load(\"test-replicated.conf\"))\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "85",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/129/PartitionedCachedViewTest.java\nindex c4ad0715be7..602af7f06e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/129/PartitionedCachedViewTest.java\n@@ -38,24 +38,19 @@ import org.junit.Test;\n \n /** Test suite for {@link CachedView}. */\n public class PartitionedCachedViewTest {\n-\n-  final Config nonReplicated =\n-      ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n-  final Config replicated =\n-      ConfigFactory.load()\n+  final Config nonReplicated = ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n+final Config replicated = ConfigFactory.load()\n           .withFallback(ConfigFactory.load(\"test-replicated.conf\"))\n           .withFallback(ConfigFactory.load(\"test-reference.conf\"))\n           .resolve();\n-\n-  final ConfigRepository repo = (ConfigRepository) Repository.of(nonReplicated);\n+final ConfigRepository repo = (ConfigRepository) Repository.of(nonReplicated);\n   final DirectDataOperator direct = repo.getOrCreateOperator(DirectDataOperator.class);\n   EntityDescriptor gateway;\n \n   @Before\n   public void setUp() {\n     repo.reloadConfig(true, nonReplicated);\n-    gateway =\n-        repo.findEntity(\"gateway\")\n+    gateway = repo.findEntity(\"gateway\")\n             .orElseThrow(() -> new IllegalStateException(\"Missing entity gateway\"));\n   }\n \n@@ -73,17 +68,11 @@ public class PartitionedCachedViewTest {\n   }\n \n   private void testStatusReadWrite(final Repository repo) throws InterruptedException {\n-    AttributeDescriptor<Object> status =\n-        gateway\n-            .findAttribute(\"status\")\n+    AttributeDescriptor<Object> status = gateway.findAttribute(\"status\")\n             .orElseThrow(() -> new IllegalStateException(\"Missing attribute status\"));\n-    OnlineAttributeWriter writer =\n-        direct\n-            .getWriter(status)\n+    OnlineAttributeWriter writer = direct.getWriter(status)\n             .orElseThrow(() -> new IllegalStateException(\"Missing writer for status\"));\n-    DirectAttributeFamilyDescriptor cachedFamily =\n-        direct\n-            .getFamiliesForAttribute(status)\n+    DirectAttributeFamilyDescriptor cachedFamily = direct.getFamiliesForAttribute(status)\n             .stream()\n             .filter(af -> af.getDesc().getAccess().canCreateCachedView())\n             .findAny()\n@@ -93,7 +82,7 @@ public class PartitionedCachedViewTest {\n     AtomicReference<CountDownLatch> latch = new AtomicReference<>();\n     view.assign(\n         cachedFamily.getCommitLogReader().get().getPartitions(),\n-        (update, current) -> {\n+    (update, current) -> {\n           Optional.ofNullable(latch.get()).ifPresent(CountDownLatch::countDown);\n         });\n     latch.set(new CountDownLatch(2));\n@@ -118,34 +107,23 @@ public class PartitionedCachedViewTest {\n   }\n \n   private void testScanWildcardAll(final Repository repo) throws InterruptedException {\n-    AttributeDescriptor<Object> status =\n-        gateway\n-            .findAttribute(\"status\")\n+    AttributeDescriptor<Object> status = gateway.findAttribute(\"status\")\n             .orElseThrow(() -> new IllegalStateException(\"Missing attribute status\"));\n-    AttributeDescriptor<Object> device =\n-        gateway\n-            .findAttribute(\"device.*\")\n+AttributeDescriptor<Object> device = gateway.findAttribute(\"device.*\")\n             .orElseThrow(() -> new IllegalStateException(\"Missing attribute status\"));\n-\n-    OnlineAttributeWriter writer =\n-        direct\n-            .getWriter(status)\n+    OnlineAttributeWriter writer = direct.getWriter(status)\n             .orElseThrow(() -> new IllegalStateException(\"Missing writer for status\"));\n-\n-    DirectAttributeFamilyDescriptor cachedFamily =\n-        direct\n-            .getFamiliesForAttribute(status)\n+    DirectAttributeFamilyDescriptor cachedFamily = direct.getFamiliesForAttribute(status)\n             .stream()\n             .filter(af -> af.getDesc().getAccess().canCreateCachedView())\n             .findAny()\n             .orElseThrow(() -> new IllegalStateException(\"Status has no cached view\"));\n-\n     CachedView view = cachedFamily.getCachedView().get();\n     // read all partitions\n     AtomicReference<CountDownLatch> latch = new AtomicReference<>();\n     view.assign(\n         cachedFamily.getCommitLogReader().get().getPartitions(),\n-        (update, current) -> {\n+    (update, current) -> {\n           Optional.ofNullable(latch.get()).ifPresent(CountDownLatch::countDown);\n         });\n     latch.set(new CountDownLatch(4));\n@@ -182,4 +160,4 @@ public class PartitionedCachedViewTest {\n     view.scanWildcardAll(\"key\", kvs::add);\n     assertEquals(2, kvs.size());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "58",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "75",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "error",
                    "message": "'cachedFamily' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 140, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 140, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 140, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 138, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "'cachedFamily' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "'(' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 154).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 140, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 140, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "124",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 140, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 138, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 59, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 59, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "'block' child has incorrect indentation level 59, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "'block rcurly' has incorrect indentation level 57, expected level should be one of the following: 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/129/PartitionedCachedViewTest.java\nindex c4ad0715be7..461ba3c02f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/129/PartitionedCachedViewTest.java\n@@ -16,7 +16,6 @@\n package cz.o2.proxima.direct.view;\n \n import static org.junit.Assert.*;\n-\n import com.typesafe.config.Config;\n import com.typesafe.config.ConfigFactory;\n import cz.o2.proxima.direct.core.DirectAttributeFamilyDescriptor;\n@@ -37,26 +36,26 @@ import org.junit.Before;\n import org.junit.Test;\n \n /** Test suite for {@link CachedView}. */\n+\n+\n public class PartitionedCachedViewTest {\n \n-  final Config nonReplicated =\n-      ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n-  final Config replicated =\n-      ConfigFactory.load()\n-          .withFallback(ConfigFactory.load(\"test-replicated.conf\"))\n-          .withFallback(ConfigFactory.load(\"test-reference.conf\"))\n-          .resolve();\n+  final Config nonReplicated = ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\"))\n+                                                   .resolve();\n+\n+  final Config replicated = ConfigFactory.load().withFallback(ConfigFactory.load(\"test-replicated.conf\"))\n+                                                .withFallback(ConfigFactory.load(\"test-reference.conf\"))\n+                                                .resolve();\n \n   final ConfigRepository repo = (ConfigRepository) Repository.of(nonReplicated);\n+\n   final DirectDataOperator direct = repo.getOrCreateOperator(DirectDataOperator.class);\n   EntityDescriptor gateway;\n \n   @Before\n   public void setUp() {\n     repo.reloadConfig(true, nonReplicated);\n-    gateway =\n-        repo.findEntity(\"gateway\")\n-            .orElseThrow(() -> new IllegalStateException(\"Missing entity gateway\"));\n+    gateway = repo.findEntity(\"gateway\").orElseThrow(() -> new IllegalStateException(\"Missing entity gateway\"));\n   }\n \n   @Test(timeout = 10000)\n@@ -73,44 +72,28 @@ public class PartitionedCachedViewTest {\n   }\n \n   private void testStatusReadWrite(final Repository repo) throws InterruptedException {\n-    AttributeDescriptor<Object> status =\n-        gateway\n-            .findAttribute(\"status\")\n-            .orElseThrow(() -> new IllegalStateException(\"Missing attribute status\"));\n-    OnlineAttributeWriter writer =\n-        direct\n-            .getWriter(status)\n-            .orElseThrow(() -> new IllegalStateException(\"Missing writer for status\"));\n-    DirectAttributeFamilyDescriptor cachedFamily =\n-        direct\n-            .getFamiliesForAttribute(status)\n-            .stream()\n-            .filter(af -> af.getDesc().getAccess().canCreateCachedView())\n-            .findAny()\n-            .orElseThrow(() -> new IllegalStateException(\"Status has no cached view\"));\n+    AttributeDescriptor<Object> status = gateway.findAttribute(\"status\").orElseThrow(() -> new IllegalStateException(\"Missing attribute status\"));\n+    OnlineAttributeWriter writer = direct.getWriter(status).orElseThrow(() -> new IllegalStateException(\"Missing writer for status\"));\n+    DirectAttributeFamilyDescriptor cachedFamily = direct.getFamiliesForAttribute(status).stream()\n+                                                                                         .filter(af -> af.getDesc().getAccess()\n+                                                                                                                   .canCreateCachedView())\n+                                                                                         .findAny()\n+                                                                                         .orElseThrow(() -> new IllegalStateException(\"Status has no cached view\"));\n     CachedView view = cachedFamily.getCachedView().get();\n     // read all partitions\n     AtomicReference<CountDownLatch> latch = new AtomicReference<>();\n     view.assign(\n-        cachedFamily.getCommitLogReader().get().getPartitions(),\n-        (update, current) -> {\n-          Optional.ofNullable(latch.get()).ifPresent(CountDownLatch::countDown);\n-        });\n+      cachedFamily.getCommitLogReader().get()\n+                                       .getPartitions(),\n+      (update, current) -> {\n+        Optional.ofNullable(latch.get()).ifPresent(CountDownLatch::countDown);\n+      });\n     latch.set(new CountDownLatch(2));\n-    writer.write(\n-        StreamElement.upsert(\n-            gateway,\n-            status,\n-            \"uuid\",\n-            \"key\",\n-            status.getName(),\n-            System.currentTimeMillis(),\n-            new byte[] {1, 2, 3}),\n-        (succ, exc) -> {\n-          assertTrue(succ);\n-          assertNull(exc);\n-          latch.get().countDown();\n-        });\n+    writer.write(StreamElement.upsert(gateway, status, \"uuid\", \"key\", status.getName(), System.currentTimeMillis(), new byte[]{1, 2, 3}), (succ, exc) -> {\n+                                                                                                                                            assertTrue(succ);\n+                                                                                                                                            assertNull(exc);\n+                                                                                                                                            latch.get().countDown();\n+                                                                                                                                          });\n     latch.get().await();\n     Optional<KeyValue<Object>> kv = view.get(\"key\", status);\n     assertTrue(kv.isPresent());\n@@ -118,68 +101,43 @@ public class PartitionedCachedViewTest {\n   }\n \n   private void testScanWildcardAll(final Repository repo) throws InterruptedException {\n-    AttributeDescriptor<Object> status =\n-        gateway\n-            .findAttribute(\"status\")\n-            .orElseThrow(() -> new IllegalStateException(\"Missing attribute status\"));\n-    AttributeDescriptor<Object> device =\n-        gateway\n-            .findAttribute(\"device.*\")\n-            .orElseThrow(() -> new IllegalStateException(\"Missing attribute status\"));\n-\n-    OnlineAttributeWriter writer =\n-        direct\n-            .getWriter(status)\n-            .orElseThrow(() -> new IllegalStateException(\"Missing writer for status\"));\n-\n-    DirectAttributeFamilyDescriptor cachedFamily =\n-        direct\n-            .getFamiliesForAttribute(status)\n-            .stream()\n-            .filter(af -> af.getDesc().getAccess().canCreateCachedView())\n-            .findAny()\n-            .orElseThrow(() -> new IllegalStateException(\"Status has no cached view\"));\n-\n+    AttributeDescriptor<Object> status = gateway.findAttribute(\"status\").orElseThrow(() -> new IllegalStateException(\"Missing attribute status\"));\n+    AttributeDescriptor<Object> device = gateway.findAttribute(\"device.*\").orElseThrow(() -> new IllegalStateException(\"Missing attribute status\"));\n+    OnlineAttributeWriter writer = direct.getWriter(status).orElseThrow(() -> new IllegalStateException(\"Missing writer for status\"));\n+    DirectAttributeFamilyDescriptor cachedFamily = direct.getFamiliesForAttribute(status).stream()\n+                                                                                         .filter(af -> af.getDesc().getAccess()\n+                                                                                                                   .canCreateCachedView())\n+                                                                                         .findAny()\n+                                                                                         .orElseThrow(() -> new IllegalStateException(\"Status has no cached view\"));\n     CachedView view = cachedFamily.getCachedView().get();\n     // read all partitions\n     AtomicReference<CountDownLatch> latch = new AtomicReference<>();\n     view.assign(\n-        cachedFamily.getCommitLogReader().get().getPartitions(),\n-        (update, current) -> {\n-          Optional.ofNullable(latch.get()).ifPresent(CountDownLatch::countDown);\n-        });\n+      cachedFamily.getCommitLogReader().get()\n+                                       .getPartitions(),\n+      (update, current) -> {\n+        Optional.ofNullable(latch.get()).ifPresent(CountDownLatch::countDown);\n+      });\n     latch.set(new CountDownLatch(4));\n-    writer.write(\n-        StreamElement.upsert(\n-            gateway,\n-            status,\n-            \"uuid\",\n-            \"key\",\n-            status.getName(),\n-            System.currentTimeMillis(),\n-            new byte[] {1, 2, 3}),\n-        (succ, exc) -> {\n-          assertTrue(succ);\n-          assertNull(exc);\n-          latch.get().countDown();\n-        });\n-    writer.write(\n-        StreamElement.upsert(\n-            gateway,\n-            device,\n-            \"uuid2\",\n-            \"key\",\n-            device.toAttributePrefix() + \"1\",\n-            System.currentTimeMillis(),\n-            new byte[] {2, 3}),\n-        (succ, exc) -> {\n-          assertTrue(succ);\n-          assertNull(exc);\n-          latch.get().countDown();\n-        });\n+    writer.write(StreamElement.upsert(gateway, status, \"uuid\", \"key\", status.getName(), System.currentTimeMillis(), new byte[]{1, 2, 3}), (succ, exc) -> {\n+                                                                                                                                            assertTrue(succ);\n+                                                                                                                                            assertNull(exc);\n+                                                                                                                                            latch.get().countDown();\n+                                                                                                                                          });\n+    writer.write(StreamElement.upsert(gateway,\n+                                      device,\n+                                      \"uuid2\",\n+                                      \"key\",\n+                                      device.toAttributePrefix() + \"1\",\n+                                      System.currentTimeMillis(),\n+                                      new byte[]{2, 3}), (succ, exc) -> {\n+                                                           assertTrue(succ);\n+                                                           assertNull(exc);\n+                                                           latch.get().countDown();\n+                                                         });\n     latch.get().await();\n     List<KeyValue<?>> kvs = new ArrayList<>();\n     view.scanWildcardAll(\"key\", kvs::add);\n     assertEquals(2, kvs.size());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 104
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/129/PartitionedCachedViewTest.java\nindex c4ad0715be7..156311f0381 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_random/129/PartitionedCachedViewTest.java\n@@ -39,8 +39,7 @@ import org.junit.Test;\n /** Test suite for {@link CachedView}. */\n public class PartitionedCachedViewTest {\n \n-  final Config nonReplicated =\n-      ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n+  final Config nonReplicated = ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n   final Config replicated =\n       ConfigFactory.load()\n           .withFallback(ConfigFactory.load(\"test-replicated.conf\"))\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "44",
                    "severity": "error",
                    "message": "'ConfigFactory' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "49",
                    "column": "21",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/129/PartitionedCachedViewTest.java\nindex c4ad0715be7..bae0c8d6e45 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/129/PartitionedCachedViewTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/129/PartitionedCachedViewTest.java\n@@ -40,8 +40,9 @@ import org.junit.Test;\n public class PartitionedCachedViewTest {\n \n   final Config nonReplicated =\n-      ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve();\n-  final Config replicated =\n+\n+    ConfigFactory.load().withFallback(ConfigFactory.load(\"test-reference.conf\")).resolve()\n+  ;final Config replicated =\n       ConfigFactory.load()\n           .withFallback(ConfigFactory.load(\"test-replicated.conf\"))\n           .withFallback(ConfigFactory.load(\"test-reference.conf\"))\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}