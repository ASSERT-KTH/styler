{
    "project_name": "graphfoundation-ongdb",
    "error_id": "440",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/440/ConstraintDefinitionRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/440/ConstraintDefinitionRepresentation.java\nindex 016d24d283a..0ac127651d2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/440/ConstraintDefinitionRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/440/ConstraintDefinitionRepresentation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.repr;\n \n import java.util.function.Function;\n@@ -29,40 +30,40 @@ import static org.neo4j.server.rest.repr.RepresentationType.CONSTRAINT_DEFINITIO\n \n public class ConstraintDefinitionRepresentation extends MappingRepresentation\n {\n-    protected final ConstraintDefinition constraintDefinition;\n+  protected final ConstraintDefinition constraintDefinition;\n \n-    public ConstraintDefinitionRepresentation( ConstraintDefinition constraintDefinition )\n-    {\n-        super( CONSTRAINT_DEFINITION );\n-        this.constraintDefinition = constraintDefinition;\n-    }\n+  public ConstraintDefinitionRepresentation(ConstraintDefinition constraintDefinition)\n+  {\n+    super(CONSTRAINT_DEFINITION);\n+    this.constraintDefinition = constraintDefinition;\n+  }\n \n-    @Override\n-    protected void serialize( MappingSerializer serializer )\n+  @Override\n+  protected void serialize(MappingSerializer serializer)\n+  {\n+    switch (constraintDefinition.getConstraintType())\n     {\n-        switch ( constraintDefinition.getConstraintType() )\n-        {\n-        case UNIQUENESS:\n-        case NODE_PROPERTY_EXISTENCE:\n-            serializer.putString( \"label\", constraintDefinition.getLabel().name() );\n-            break;\n-        case RELATIONSHIP_PROPERTY_EXISTENCE:\n-            serializer.putString( \"relationshipType\", constraintDefinition.getRelationshipType().name() );\n-            break;\n-        default:\n-            throw new IllegalStateException( \"Unknown constraint type:\" + constraintDefinition.getConstraintType() );\n-        }\n-\n-        ConstraintType type = constraintDefinition.getConstraintType();\n-        serializer.putString( \"type\", type.name() );\n-        serialize( constraintDefinition, serializer );\n+      case UNIQUENESS:\n+      case NODE_PROPERTY_EXISTENCE:\n+        serializer.putString(\"label\", constraintDefinition.getLabel().name());\n+        break;\n+      case RELATIONSHIP_PROPERTY_EXISTENCE:\n+        serializer.putString(\"relationshipType\", constraintDefinition.getRelationshipType().name());\n+        break;\n+      default:\n+        throw new IllegalStateException(\"Unknown constraint type:\" + constraintDefinition.getConstraintType());\n     }\n \n-    protected void serialize( ConstraintDefinition constraintDefinition, MappingSerializer serializer )\n-    {\n-        Function<String, Representation> converter = ValueRepresentation::string;\n-        Iterable<Representation> propertyKeyRepresentations = map( converter, constraintDefinition.getPropertyKeys() );\n-        serializer.putList( \"property_keys\",\n-            new ListRepresentation( RepresentationType.STRING, propertyKeyRepresentations ) );\n-    }\n+    ConstraintType type = constraintDefinition.getConstraintType();\n+    serializer.putString(\"type\", type.name());\n+    serialize(constraintDefinition, serializer);\n+  }\n+\n+  protected void serialize(ConstraintDefinition constraintDefinition, MappingSerializer serializer)\n+  {\n+    Function<String, Representation> converter = ValueRepresentation::string;\n+    Iterable<Representation> propertyKeyRepresentations = map(converter, constraintDefinition.getPropertyKeys());\n+    serializer.putList(\"property_keys\",\n+        new ListRepresentation(RepresentationType.STRING, propertyKeyRepresentations));\n+  }\n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/440/ConstraintDefinitionRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/440/ConstraintDefinitionRepresentation.java\nindex 016d24d283a..9411dae4016 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/440/ConstraintDefinitionRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/440/ConstraintDefinitionRepresentation.java\n@@ -60,9 +60,8 @@ public class ConstraintDefinitionRepresentation extends MappingRepresentation\n \n     protected void serialize( ConstraintDefinition constraintDefinition, MappingSerializer serializer )\n     {\n-        Function<String, Representation> converter = ValueRepresentation::string;\n+        Function<String,Representation> converter = ValueRepresentation::string;\n         Iterable<Representation> propertyKeyRepresentations = map( converter, constraintDefinition.getPropertyKeys() );\n-        serializer.putList( \"property_keys\",\n-            new ListRepresentation( RepresentationType.STRING, propertyKeyRepresentations ) );\n+        serializer.putList( \"property_keys\", new ListRepresentation( RepresentationType.STRING, propertyKeyRepresentations ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}