{
    "project_name": "neo4j-neo4j",
    "error_id": "1696",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1696/NumberArrayType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1696/NumberArrayType.java\nindex 64c3255491a..f0c80d710e5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1696/NumberArrayType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1696/NumberArrayType.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.Arrays;\n@@ -38,242 +39,242 @@ class NumberArrayType extends AbstractArrayType<Number>\n     // long0Array (value)\n     // long1 (number type)\n \n-    NumberArrayType( byte typeId )\n+    NumberArrayType(byte typeId)\n     {\n-        super( ValueGroup.NUMBER_ARRAY, typeId, ( o1, o2, i ) -> NumberType.compare(\n-                        o1.long0Array[i], o1.long1,\n-                        o2.long0Array[i], o2.long1 ),\n-                null, null, null, null, null );\n+        super(ValueGroup.NUMBER_ARRAY, typeId, (o1, o2, i) -> NumberType.compare(\n+          o1.long0Array[i], o1.long1,\n+          o2.long0Array[i], o2.long1),\n+          null, null, null, null, null);\n     }\n \n     @Override\n-    int valueSize( GenericKey state )\n+    int valueSize(GenericKey state)\n     {\n-        return arrayKeySize( state, numberKeySize( state.long1 ) ) + GenericKey.SIZE_NUMBER_TYPE;\n+        return arrayKeySize(state, numberKeySize(state.long1)) + GenericKey.SIZE_NUMBER_TYPE;\n     }\n \n     @Override\n-    void copyValue( GenericKey to, GenericKey from, int length )\n+    void copyValue(GenericKey to, GenericKey from, int length)\n     {\n         to.long1 = from.long1;\n-        initializeArray( to, length );\n-        System.arraycopy( from.long0Array, 0, to.long0Array, 0, length );\n+        initializeArray(to, length);\n+        System.arraycopy(from.long0Array, 0, to.long0Array, 0, length);\n     }\n \n     @Override\n-    void initializeArray( GenericKey key, int length, ValueWriter.ArrayType arrayType )\n+    void initializeArray(GenericKey key, int length, ValueWriter.ArrayType arrayType)\n     {\n-        initializeArray( key, length );\n-        switch ( arrayType )\n+        initializeArray(key, length);\n+        switch (arrayType)\n         {\n-        case BYTE:\n-            key.long1 = RawBits.BYTE;\n-            break;\n-        case SHORT:\n-            key.long1 = RawBits.SHORT;\n-            break;\n-        case INT:\n-            key.long1 = RawBits.INT;\n-            break;\n-        case LONG:\n-            key.long1 = RawBits.LONG;\n-            break;\n-        case FLOAT:\n-            key.long1 = RawBits.FLOAT;\n-            break;\n-        case DOUBLE:\n-            key.long1 = RawBits.DOUBLE;\n-            break;\n-        default:\n-            throw new IllegalArgumentException( \"Invalid number array type \" + arrayType );\n+            case BYTE:\n+                key.long1 = RawBits.BYTE;\n+                break;\n+            case SHORT:\n+                key.long1 = RawBits.SHORT;\n+                break;\n+            case INT:\n+                key.long1 = RawBits.INT;\n+                break;\n+            case LONG:\n+                key.long1 = RawBits.LONG;\n+                break;\n+            case FLOAT:\n+                key.long1 = RawBits.FLOAT;\n+                break;\n+            case DOUBLE:\n+                key.long1 = RawBits.DOUBLE;\n+                break;\n+            default:\n+                throw new IllegalArgumentException(\"Invalid number array type \" + arrayType);\n         }\n     }\n \n-    private static void initializeArray( GenericKey key, int length )\n+    private static void initializeArray(GenericKey key, int length)\n     {\n-        key.long0Array = ensureBigEnough( key.long0Array, length );\n+        key.long0Array = ensureBigEnough(key.long0Array, length);\n         // plain long1 for number type\n     }\n \n     @Override\n-    Value asValue( GenericKey state )\n+    Value asValue(GenericKey state)\n     {\n         byte numberType = (byte) state.long1;\n-        switch ( numberType )\n+        switch (numberType)\n         {\n-        case RawBits.BYTE:\n-            byte[] byteArray = new byte[state.arrayLength];\n-            for ( int i = 0; i < state.arrayLength; i++ )\n-            {\n-                byteArray[i] = (byte) state.long0Array[i];\n-            }\n-            return Values.byteArray( byteArray );\n-        case RawBits.SHORT:\n-            short[] shortArray = new short[state.arrayLength];\n-            for ( int i = 0; i < state.arrayLength; i++ )\n-            {\n-                shortArray[i] = (short) state.long0Array[i];\n-            }\n-            return Values.shortArray( shortArray );\n-        case RawBits.INT:\n-            int[] intArray = new int[state.arrayLength];\n-            for ( int i = 0; i < state.arrayLength; i++ )\n-            {\n-                intArray[i] = (int) state.long0Array[i];\n-            }\n-            return Values.intArray( intArray );\n-        case RawBits.LONG:\n-            return Values.longArray( Arrays.copyOf( state.long0Array, state.arrayLength ) );\n-        case RawBits.FLOAT:\n-            float[] floatArray = new float[state.arrayLength];\n-            for ( int i = 0; i < state.arrayLength; i++ )\n-            {\n-                floatArray[i] = Float.intBitsToFloat( (int) state.long0Array[i] );\n-            }\n-            return Values.floatArray( floatArray );\n-        case RawBits.DOUBLE:\n-            double[] doubleArray = new double[state.arrayLength];\n-            for ( int i = 0; i < state.arrayLength; i++ )\n-            {\n-                doubleArray[i] = Double.longBitsToDouble( state.long0Array[i] );\n-            }\n-            return Values.doubleArray( doubleArray );\n-        default:\n-            throw new IllegalArgumentException( \"Unknown number type \" + numberType );\n+            case RawBits.BYTE:\n+                byte[] byteArray = new byte[state.arrayLength];\n+                for (int i = 0; i < state.arrayLength; i++)\n+                {\n+                    byteArray[i] = (byte) state.long0Array[i];\n+                }\n+                return Values.byteArray(byteArray);\n+            case RawBits.SHORT:\n+                short[] shortArray = new short[state.arrayLength];\n+                for (int i = 0; i < state.arrayLength; i++)\n+                {\n+                    shortArray[i] = (short) state.long0Array[i];\n+                }\n+                return Values.shortArray(shortArray);\n+            case RawBits.INT:\n+                int[] intArray = new int[state.arrayLength];\n+                for (int i = 0; i < state.arrayLength; i++)\n+                {\n+                    intArray[i] = (int) state.long0Array[i];\n+                }\n+                return Values.intArray(intArray);\n+            case RawBits.LONG:\n+                return Values.longArray(Arrays.copyOf(state.long0Array, state.arrayLength));\n+            case RawBits.FLOAT:\n+                float[] floatArray = new float[state.arrayLength];\n+                for (int i = 0; i < state.arrayLength; i++)\n+                {\n+                    floatArray[i] = Float.intBitsToFloat((int) state.long0Array[i]);\n+                }\n+                return Values.floatArray(floatArray);\n+            case RawBits.DOUBLE:\n+                double[] doubleArray = new double[state.arrayLength];\n+                for (int i = 0; i < state.arrayLength; i++)\n+                {\n+                    doubleArray[i] = Double.longBitsToDouble(state.long0Array[i]);\n+                }\n+                return Values.doubleArray(doubleArray);\n+            default:\n+                throw new IllegalArgumentException(\"Unknown number type \" + numberType);\n         }\n     }\n \n     @Override\n-    void putValue( PageCursor cursor, GenericKey state )\n+    void putValue(PageCursor cursor, GenericKey state)\n     {\n-        cursor.putByte( (byte) state.long1 );\n-        putArray( cursor, state, numberArrayElementWriter( state ) );\n+        cursor.putByte((byte) state.long1);\n+        putArray(cursor, state, numberArrayElementWriter(state));\n     }\n \n-    private static ArrayElementWriter numberArrayElementWriter( GenericKey key )\n+    private static ArrayElementWriter numberArrayElementWriter(GenericKey key)\n     {\n-        switch ( (int) key.long1 )\n+        switch ((int) key.long1)\n         {\n-        case RawBits.BYTE:\n-            return ( c, k, i ) -> c.putByte( (byte) k.long0Array[i] );\n-        case RawBits.SHORT:\n-            return ( c, k, i ) -> c.putShort( (short) k.long0Array[i] );\n-        case RawBits.INT:\n-        case RawBits.FLOAT:\n-            return ( c, k, i ) -> c.putInt( (int) k.long0Array[i] );\n-        case RawBits.LONG:\n-        case RawBits.DOUBLE:\n-            return ( c, k, i ) -> c.putLong( k.long0Array[i] );\n-        default:\n-            throw new IllegalArgumentException( \"Unknown number type \" + key.long1 );\n+            case RawBits.BYTE:\n+                return (c, k, i) -> c.putByte((byte) k.long0Array[i]);\n+            case RawBits.SHORT:\n+                return (c, k, i) -> c.putShort((short) k.long0Array[i]);\n+            case RawBits.INT:\n+            case RawBits.FLOAT:\n+                return (c, k, i) -> c.putInt((int) k.long0Array[i]);\n+            case RawBits.LONG:\n+            case RawBits.DOUBLE:\n+                return (c, k, i) -> c.putLong(k.long0Array[i]);\n+            default:\n+                throw new IllegalArgumentException(\"Unknown number type \" + key.long1);\n         }\n     }\n \n     @Override\n-    boolean readValue( PageCursor cursor, int size, GenericKey into )\n+    boolean readValue(PageCursor cursor, int size, GenericKey into)\n     {\n         into.long1 = cursor.getByte(); // number type, like: byte, int, short a.s.o.\n-        ValueWriter.ArrayType numberType = numberArrayTypeOf( (byte) into.long1 );\n-        if ( numberType == null )\n+        ValueWriter.ArrayType numberType = numberArrayTypeOf((byte) into.long1);\n+        if (numberType == null)\n         {\n-            setCursorException( cursor, \"non-valid number type for array, \" + into.long1 );\n+            setCursorException(cursor, \"non-valid number type for array, \" + into.long1);\n             return false;\n         }\n-        return readArray( cursor, numberType, numberArrayElementReader( into ), into );\n+        return readArray(cursor, numberType, numberArrayElementReader(into), into);\n     }\n \n     @Override\n-    void initializeAsLowest( GenericKey state )\n+    void initializeAsLowest(GenericKey state)\n     {\n-        state.initializeArrayMeta( 0 );\n-        initializeArray( state, 0, ValueWriter.ArrayType.BYTE );\n+        state.initializeArrayMeta(0);\n+        initializeArray(state, 0, ValueWriter.ArrayType.BYTE);\n     }\n \n     @Override\n-    void initializeAsHighest( GenericKey state )\n+    void initializeAsHighest(GenericKey state)\n     {\n-        state.initializeArrayMeta( 0 );\n-        initializeArray( state, 0, ValueWriter.ArrayType.BYTE );\n+        state.initializeArrayMeta(0);\n+        initializeArray(state, 0, ValueWriter.ArrayType.BYTE);\n         state.isHighestArray = true;\n     }\n \n-    private static ValueWriter.ArrayType numberArrayTypeOf( byte numberType )\n+    private static ValueWriter.ArrayType numberArrayTypeOf(byte numberType)\n     {\n-        switch ( numberType )\n+        switch (numberType)\n         {\n-        case RawBits.BYTE:\n-            return ValueWriter.ArrayType.BYTE;\n-        case RawBits.SHORT:\n-            return ValueWriter.ArrayType.SHORT;\n-        case RawBits.INT:\n-            return ValueWriter.ArrayType.INT;\n-        case RawBits.LONG:\n-            return ValueWriter.ArrayType.LONG;\n-        case RawBits.FLOAT:\n-            return ValueWriter.ArrayType.FLOAT;\n-        case RawBits.DOUBLE:\n-            return ValueWriter.ArrayType.DOUBLE;\n-        default:\n-            // bad read, hopefully\n-            return null;\n+            case RawBits.BYTE:\n+                return ValueWriter.ArrayType.BYTE;\n+            case RawBits.SHORT:\n+                return ValueWriter.ArrayType.SHORT;\n+            case RawBits.INT:\n+                return ValueWriter.ArrayType.INT;\n+            case RawBits.LONG:\n+                return ValueWriter.ArrayType.LONG;\n+            case RawBits.FLOAT:\n+                return ValueWriter.ArrayType.FLOAT;\n+            case RawBits.DOUBLE:\n+                return ValueWriter.ArrayType.DOUBLE;\n+            default:\n+                // bad read, hopefully\n+                return null;\n         }\n     }\n \n-    private static ArrayElementReader numberArrayElementReader( GenericKey key )\n+    private static ArrayElementReader numberArrayElementReader(GenericKey key)\n     {\n-        switch ( (int) key.long1 )\n+        switch ((int) key.long1)\n         {\n-        case RawBits.BYTE:\n-            return ( c, into ) ->\n-            {\n-                key.writeInteger( c.getByte() );\n-                return true;\n-            };\n-        case RawBits.SHORT:\n-            return ( c, into ) ->\n-            {\n-                key.writeInteger( c.getShort() );\n-                return true;\n-            };\n-        case RawBits.INT:\n-            return ( c, into ) ->\n-            {\n-                key.writeInteger( c.getInt() );\n-                return true;\n-            };\n-        case RawBits.LONG:\n-            return ( c, into ) ->\n-            {\n-                key.writeInteger( c.getLong() );\n-                return true;\n-            };\n-        case RawBits.FLOAT:\n-            return ( c, into ) ->\n-            {\n-                key.writeFloatingPoint( Float.intBitsToFloat( c.getInt() ) );\n-                return true;\n-            };\n-        case RawBits.DOUBLE:\n-            return ( c, into ) ->\n-            {\n-                key.writeFloatingPoint( Double.longBitsToDouble( c.getLong() ) );\n-                return true;\n-            };\n-        default:\n-            throw new IllegalArgumentException( \"Unknown number type \" + key.long1 );\n+            case RawBits.BYTE:\n+                return (c, into) ->\n+                {\n+                    key.writeInteger(c.getByte());\n+                    return true;\n+                };\n+            case RawBits.SHORT:\n+                return (c, into) ->\n+                {\n+                    key.writeInteger(c.getShort());\n+                    return true;\n+                };\n+            case RawBits.INT:\n+                return (c, into) ->\n+                {\n+                    key.writeInteger(c.getInt());\n+                    return true;\n+                };\n+            case RawBits.LONG:\n+                return (c, into) ->\n+                {\n+                    key.writeInteger(c.getLong());\n+                    return true;\n+                };\n+            case RawBits.FLOAT:\n+                return (c, into) ->\n+                {\n+                    key.writeFloatingPoint(Float.intBitsToFloat(c.getInt()));\n+                    return true;\n+                };\n+            case RawBits.DOUBLE:\n+                return (c, into) ->\n+                {\n+                    key.writeFloatingPoint(Double.longBitsToDouble(c.getLong()));\n+                    return true;\n+                };\n+            default:\n+                throw new IllegalArgumentException(\"Unknown number type \" + key.long1);\n         }\n     }\n \n-    void write( GenericKey state, int offset, long value )\n+    void write(GenericKey state, int offset, long value)\n     {\n         state.long0Array[offset] = value;\n     }\n \n     @Override\n-    protected void addTypeSpecificDetails( StringJoiner joiner, GenericKey state )\n+    protected void addTypeSpecificDetails(StringJoiner joiner, GenericKey state)\n     {\n-        joiner.add( \"long1=\" + state.long1 );\n-        joiner.add( \"long0Array=\" + Arrays.toString( state.long0Array ) );\n-        super.addTypeSpecificDetails( joiner, state );\n+        joiner.add(\"long1=\" + state.long1);\n+        joiner.add(\"long0Array=\" + Arrays.toString(state.long0Array));\n+        super.addTypeSpecificDetails(joiner, state);\n     }\n }\n",
            "diff_size": 167
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}