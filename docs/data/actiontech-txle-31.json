{
    "project_name": "actiontech-txle",
    "error_id": "31",
    "information": {
        "errors": [
            {
                "line": "88",
                "column": "3",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n            // 7.construct compensate sql\n//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n//            String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n            String compensateSql = String.format(\"DELETE T FROM %s T INNER JOIN %s T1 ON T.%s = T1.%s WHERE T1.globalTxId = '%s' AND T1.localTxId = '%s' \" + TxleConstants.ACTION_SQL, tableName, this.schema() + \".\" + txleBackupTableName, primaryKeyName, primaryKeyName, globalTxId, localTxId);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "88",
                    "column": "15",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/31/MySqlInsertHandler.java\nindex a99de760284..b78261d82cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/31/MySqlInsertHandler.java\n@@ -85,7 +85,7 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n //            List<Map<String, Object>> newDataList = selectNewData(delegate, tableName, primaryKeyName, primaryKeyValues);\n \n             // 7.construct compensate sql\n-//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n+            //\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n //            String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n             String compensateSql = String.format(\"DELETE T FROM %s T INNER JOIN %s T1 ON T.%s = T1.%s WHERE T1.globalTxId = '%s' AND T1.localTxId = '%s' \" + TxleConstants.ACTION_SQL, tableName, this.schema() + \".\" + txleBackupTableName, primaryKeyName, primaryKeyName, globalTxId, localTxId);\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "88",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/31/MySqlInsertHandler.java\nindex a99de760284..b4b6fa3fcd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/31/MySqlInsertHandler.java\n@@ -44,7 +44,7 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n \n     @Override\n     public boolean prepareCompensationAfterInserting(PreparedStatement delegate, SQLStatement sqlStatement,\n-                                            String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n+                                                     String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n         Connection connection;\n         ResultSet rs = null;\n         try {\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/31/MySqlInsertHandler.java\nindex a99de760284..cc5e582e668 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/31/MySqlInsertHandler.java\n@@ -12,7 +12,6 @@ import org.apache.servicecomb.saga.omega.context.ApplicationContextUtil;\n import org.apache.servicecomb.saga.omega.transaction.monitor.AutoCompensableSqlMetrics;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.sql.*;\n import java.util.*;\n import java.util.concurrent.atomic.AtomicInteger;\n@@ -26,8 +25,8 @@ import java.util.concurrent.atomic.AtomicInteger;\n  * 6.perform the compensation sql immediately in case of error, the compensation sql likes [ DELETE FROM txle_sample_user WHERE createtime = '2020-01-09 13:47:15.0' and balance = 2.00000 and name = 'xiongjiujiu' and id = 1006 and version = 2 ]\n  * ps: do not support complex sql, e.g. [ INSERT INTO table SELECT ... ]\n  */\n-public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n \n+public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n     private static volatile MySqlInsertHandler mySqlInsertHandler = null;\n     private static final Logger LOG = LoggerFactory.getLogger(MySqlInsertHandler.class);\n \n@@ -43,8 +42,7 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n     }\n \n     @Override\n-    public boolean prepareCompensationAfterInserting(PreparedStatement delegate, SQLStatement sqlStatement,\n-                                            String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n+    public boolean prepareCompensationAfterInserting(PreparedStatement delegate, SQLStatement sqlStatement, String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n         Connection connection;\n         ResultSet rs = null;\n         try {\n@@ -77,7 +75,11 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n             this.prepareBackupTable(connection, tableName, txleBackupTableName);\n \n             // 5.backup data, compare them with the latest data before compensating.\n-            String backupDataSql = String.format(\"INSERT INTO \" + this.schema() + \".\" + txleBackupTableName + \" SELECT *, '%s', '%s' FROM %s WHERE %s FOR UPDATE \" + TxleConstants.ACTION_SQL, globalTxId, localTxId, tableName, whereSql);\n+            String backupDataSql = String.format(\"INSERT INTO \" + this.schema() + \".\" + txleBackupTableName + \" SELECT *, '%s', '%s' FROM %s WHERE %s FOR UPDATE \" + TxleConstants.ACTION_SQL,\n+                                                 globalTxId,\n+                                                 localTxId,\n+                                                 tableName,\n+                                                 whereSql);\n             LOG.debug(TxleConstants.logDebugPrefixWithTime() + \"currentThreadId: [{}] - backupDataSql: [{}].\", Thread.currentThread().getId(), backupDataSql);\n             connection.prepareStatement(backupDataSql).executeUpdate();\n \n@@ -85,7 +87,7 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n //            List<Map<String, Object>> newDataList = selectNewData(delegate, tableName, primaryKeyName, primaryKeyValues);\n \n             // 7.construct compensate sql\n-//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n+//          String compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n //            String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n             String compensateSql = String.format(\"DELETE T FROM %s T INNER JOIN %s T1 ON T.%s = T1.%s WHERE T1.globalTxId = '%s' AND T1.localTxId = '%s' \" + TxleConstants.ACTION_SQL, tableName, this.schema() + \".\" + txleBackupTableName, primaryKeyName, primaryKeyName, globalTxId, localTxId);\n \n@@ -97,7 +99,6 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n \n             // end mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n-\n             return result;\n         } catch (SQLException e) {\n             LOG.error(TxleConstants.logErrorPrefixWithTime() + \"Fail to save auto-compensation info for insert SQL.\", e);\n@@ -117,13 +118,11 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n         if (newDataList == null || newDataList.isEmpty()) {\n             throw new SQLException(TxleConstants.LOG_ERROR_PREFIX + \"Could not get the new data when constructed the 'compensateSql' for executing insert SQL.\");\n         }\n-\n         Map<String, String> columnNameType = this.selectColumnNameType(delegate, tableName);\n         StringBuffer compensateSqls = new StringBuffer();\n         for (Map<String, Object> dataMap : newDataList) {\n             this.resetColumnValueByDBType(columnNameType, dataMap);\n             String whereSqlForCompensation = this.constructWhereSqlForCompensation(dataMap);\n-\n             String compensateSql = String.format(\"DELETE FROM %s WHERE %s\" + TxleConstants.ACTION_SQL + \";\", tableName, whereSqlForCompensation);\n             if (compensateSqls.length() == 0) {\n                 compensateSqls.append(compensateSql);\n@@ -131,7 +130,6 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n                 compensateSqls.append(\"\\n\" + compensateSql);\n             }\n         }\n-\n         return compensateSqls.toString();\n     }\n \n@@ -158,11 +156,10 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n         ResultSet dataResultSet = null;\n         try {\n             String sql = constructNewDataSql(primaryKeyValues);\n-//\t\t\tdataResultSet = delegate.getResultSet();// it's result is null.\n+//          dataResultSet = delegate.getResultSet();// it's result is null.\n \n             // start to mark duration for business sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(sql, false);\n-\n             String[] params = new String[2 + primaryKeyValues.size()];\n             params[0] = tableName;\n             params[1] = primaryKeyName;\n@@ -170,13 +167,11 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n             primaryKeyValues.forEach(value -> {\n                 params[index.getAndIncrement()] = String.valueOf(value);\n             });\n-\n             preparedStatement = delegate.getConnection().prepareStatement(String.format(sql, params));\n             dataResultSet = preparedStatement.executeQuery();\n \n             // end mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n-\n             List<Map<String, Object>> newDataList = new ArrayList<>();\n             while (dataResultSet.next()) {\n                 Map<String, Object> dataMap = new HashMap<String, Object>();\n@@ -185,7 +180,6 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n                     String column = metaData.getColumnName(i);\n                     dataMap.put(column, dataResultSet.getObject(column));\n                 }\n-\n                 newDataList.add(dataMap);\n             }\n             return newDataList;\n@@ -218,5 +212,4 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n         }\n         return \"\";\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "88",
                    "column": "15",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/31/MySqlInsertHandler.java\nindex a99de760284..29aa08ac5e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/31/MySqlInsertHandler.java\n@@ -85,8 +85,8 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n //            List<Map<String, Object>> newDataList = selectNewData(delegate, tableName, primaryKeyName, primaryKeyValues);\n \n             // 7.construct compensate sql\n-//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n-//            String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n+            //\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);//            String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n+            //            String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n             String compensateSql = String.format(\"DELETE T FROM %s T INNER JOIN %s T1 ON T.%s = T1.%s WHERE T1.globalTxId = '%s' AND T1.localTxId = '%s' \" + TxleConstants.ACTION_SQL, tableName, this.schema() + \".\" + txleBackupTableName, primaryKeyName, primaryKeyName, globalTxId, localTxId);\n \n             // start to mark duration for business sql By Gannalyo.\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "88",
                    "column": "15",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/31/MySqlInsertHandler.java\nindex a99de760284..b78261d82cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/31/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/31/MySqlInsertHandler.java\n@@ -85,7 +85,7 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n //            List<Map<String, Object>> newDataList = selectNewData(delegate, tableName, primaryKeyName, primaryKeyValues);\n \n             // 7.construct compensate sql\n-//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n+            //\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n //            String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n             String compensateSql = String.format(\"DELETE T FROM %s T INNER JOIN %s T1 ON T.%s = T1.%s WHERE T1.globalTxId = '%s' AND T1.localTxId = '%s' \" + TxleConstants.ACTION_SQL, tableName, this.schema() + \".\" + txleBackupTableName, primaryKeyName, primaryKeyName, globalTxId, localTxId);\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}