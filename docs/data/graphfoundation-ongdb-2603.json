{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2603",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2603/Message.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2603/Message.java\nindex 87550cb9890..300d0e7e9a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2603/Message.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2603/Message.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.com.message;\n \n import java.io.Serializable;\n@@ -30,196 +31,195 @@ import java.util.Map;\n  * These are typically produced and consumed by a {@link org.neo4j.cluster.statemachine.StateMachine}.\n  */\n public class Message<MESSAGETYPE extends MessageType>\n-        implements Serializable\n+    implements Serializable\n {\n-    private static final long serialVersionUID = 7043669983188264476L;\n-\n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> to( MESSAGETYPE messageType, URI to )\n-    {\n-        return to( messageType, to, null );\n-    }\n-\n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> to( MESSAGETYPE messageType, URI to,\n-                                                                             Object payload )\n-    {\n-        return new Message<>( messageType, payload ).setHeader( HEADER_TO, to.toString() );\n-    }\n-\n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> respond( MESSAGETYPE messageType,\n-            Message<?> message, Object payload )\n-    {\n-        return message.hasHeader( Message.HEADER_FROM ) ? new Message<>( messageType, payload )\n-                .setHeader( HEADER_TO, message.getHeader( Message.HEADER_FROM ) ) : internal( messageType, payload );\n-    }\n-\n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> internal( MESSAGETYPE message )\n-    {\n-        return internal( message, null );\n-    }\n-\n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> internal( MESSAGETYPE message, Object payload )\n-    {\n-        return new Message<>( message, payload );\n-    }\n-\n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> timeout( MESSAGETYPE message,\n-                                                                                  Message<?> causedBy )\n-    {\n-        return timeout( message, causedBy, null );\n-    }\n-\n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> timeout( MESSAGETYPE message,\n-                                                                                  Message<?> causedBy, Object payload )\n-    {\n-        Message<MESSAGETYPE> timeout = causedBy.copyHeadersTo( new Message<>( message, payload ),\n-                Message.HEADER_CONVERSATION_ID, Message.HEADER_CREATED_BY );\n-        int timeoutCount = 0;\n-        if ( causedBy.hasHeader( HEADER_TIMEOUT_COUNT ) )\n+  private static final long serialVersionUID = 7043669983188264476L;\n+\n+  public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> to(MESSAGETYPE messageType, URI to)\n+  {\n+    return to(messageType, to, null);\n+  }\n+\n+  public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> to(MESSAGETYPE messageType, URI to,\n+                                                                          Object payload)\n+  {\n+    return new Message<>(messageType, payload).setHeader(HEADER_TO, to.toString());\n+  }\n+\n+  public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> respond(MESSAGETYPE messageType,\n+                                                                               Message<?> message, Object payload)\n+  {\n+    return message.hasHeader(Message.HEADER_FROM) ? new Message<>(messageType, payload)\n+        .setHeader(HEADER_TO, message.getHeader(Message.HEADER_FROM)) : internal(messageType, payload);\n+  }\n+\n+  public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> internal(MESSAGETYPE message)\n+  {\n+    return internal(message, null);\n+  }\n+\n+  public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> internal(MESSAGETYPE message, Object payload)\n+  {\n+    return new Message<>(message, payload);\n+  }\n+\n+  public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> timeout(MESSAGETYPE message,\n+                                                                               Message<?> causedBy)\n+  {\n+    return timeout(message, causedBy, null);\n+  }\n+\n+  public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> timeout(MESSAGETYPE message,\n+                                                                               Message<?> causedBy, Object payload)\n+  {\n+    Message<MESSAGETYPE> timeout = causedBy.copyHeadersTo(new Message<>(message, payload),\n+        Message.HEADER_CONVERSATION_ID, Message.HEADER_CREATED_BY);\n+    int timeoutCount = 0;\n+    if (causedBy.hasHeader(HEADER_TIMEOUT_COUNT))\n+    {\n+      timeoutCount = Integer.parseInt(causedBy.getHeader(HEADER_TIMEOUT_COUNT)) + 1;\n+    }\n+    timeout.setHeader(HEADER_TIMEOUT_COUNT, \"\" + timeoutCount);\n+    return timeout;\n+  }\n+\n+  // Standard headers\n+  public static final String HEADER_CONVERSATION_ID = \"conversation-id\";\n+  public static final String HEADER_CREATED_BY = \"created-by\";\n+  public static final String HEADER_TIMEOUT_COUNT = \"timeout-count\";\n+  public static final String HEADER_FROM = \"from\";\n+  public static final String HEADER_TO = \"to\";\n+  public static final String HEADER_INSTANCE_ID = \"instance-id\";\n+  // Should be present only in configurationRequest messages. Value is a comma separated list of instance ids.\n+  // Added in 3.0.9.\n+  public static final String DISCOVERED = \"discovered\";\n+\n+  private MESSAGETYPE messageType;\n+  private Object payload;\n+  private Map<String, String> headers = new HashMap<>();\n+\n+  protected Message(MESSAGETYPE messageType, Object payload)\n+  {\n+    this.messageType = messageType;\n+    this.payload = payload;\n+  }\n+\n+  public MESSAGETYPE getMessageType()\n+  {\n+    return messageType;\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public <T> T getPayload()\n+  {\n+    return (T) payload;\n+  }\n+\n+  public Message<MESSAGETYPE> setHeader(String name, String value)\n+  {\n+    if (value == null)\n+    {\n+      throw new IllegalArgumentException(String.format(\"Header %s may not be set to null\", name));\n+    }\n+\n+    headers.put(name, value);\n+    return this;\n+  }\n+\n+  public boolean hasHeader(String name)\n+  {\n+    return headers.containsKey(name);\n+  }\n+\n+  public boolean isInternal()\n+  {\n+    return !headers.containsKey(Message.HEADER_TO);\n+  }\n+\n+  public String getHeader(String name)\n+      throws IllegalArgumentException\n+  {\n+    String value = getHeader(name, null);\n+    if (value == null)\n+    {\n+      throw new IllegalArgumentException(\"No such header:\" + name);\n+    }\n+    return value;\n+  }\n+\n+  public String getHeader(String name, String defaultValue)\n+  {\n+    String value = headers.get(name);\n+    if (value == null)\n+    {\n+      return defaultValue;\n+    }\n+    return value;\n+  }\n+\n+  public <MSGTYPE extends MessageType> Message<MSGTYPE> copyHeadersTo(Message<MSGTYPE> message,\n+                                                                      String... names)\n+  {\n+    if (names.length == 0)\n+    {\n+      for (Map.Entry<String, String> header : headers.entrySet())\n+      {\n+        if (!message.hasHeader(header.getKey()))\n         {\n-            timeoutCount = Integer.parseInt( causedBy.getHeader( HEADER_TIMEOUT_COUNT ) ) + 1;\n+          message.setHeader(header.getKey(), header.getValue());\n         }\n-        timeout.setHeader( HEADER_TIMEOUT_COUNT, \"\" + timeoutCount );\n-        return timeout;\n-    }\n-\n-    // Standard headers\n-    public static final String HEADER_CONVERSATION_ID = \"conversation-id\";\n-    public static final String HEADER_CREATED_BY = \"created-by\";\n-    public static final String HEADER_TIMEOUT_COUNT = \"timeout-count\";\n-    public static final String HEADER_FROM = \"from\";\n-    public static final String HEADER_TO = \"to\";\n-    public static final String HEADER_INSTANCE_ID = \"instance-id\";\n-    // Should be present only in configurationRequest messages. Value is a comma separated list of instance ids.\n-    // Added in 3.0.9.\n-    public static final String DISCOVERED = \"discovered\";\n-\n-    private MESSAGETYPE messageType;\n-    private Object payload;\n-    private Map<String, String> headers = new HashMap<>();\n-\n-    protected Message( MESSAGETYPE messageType, Object payload )\n-    {\n-        this.messageType = messageType;\n-        this.payload = payload;\n-    }\n-\n-    public MESSAGETYPE getMessageType()\n-    {\n-        return messageType;\n-    }\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    public <T> T getPayload()\n-    {\n-        return (T) payload;\n-    }\n-\n-    public Message<MESSAGETYPE> setHeader( String name, String value )\n+      }\n+    } else\n     {\n-        if ( value == null )\n+      for (String name : names)\n+      {\n+        String value = headers.get(name);\n+        if (value != null && !message.hasHeader(name))\n         {\n-            throw new IllegalArgumentException( String.format( \"Header %s may not be set to null\", name ) );\n+          message.setHeader(name, value);\n         }\n-\n-        headers.put( name, value );\n-        return this;\n+      }\n     }\n+    return message;\n+  }\n \n-    public boolean hasHeader( String name )\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return headers.containsKey( name );\n+      return true;\n     }\n-\n-    public boolean isInternal()\n+    if (o == null || getClass() != o.getClass())\n     {\n-        return !headers.containsKey( Message.HEADER_TO );\n+      return false;\n     }\n \n-    public String getHeader( String name )\n-            throws IllegalArgumentException\n-    {\n-        String value = getHeader( name, null );\n-        if ( value == null )\n-        {\n-            throw new IllegalArgumentException( \"No such header:\" + name );\n-        }\n-        return value;\n-    }\n+    Message<?> message = (Message<?>) o;\n \n-    public String getHeader( String name, String defaultValue )\n+    if (headers != null ? !headers.equals(message.headers) : message.headers != null)\n     {\n-        String value = headers.get( name );\n-        if ( value == null )\n-        {\n-            return defaultValue;\n-        }\n-        return value;\n+      return false;\n     }\n-\n-    public <MSGTYPE extends MessageType> Message<MSGTYPE> copyHeadersTo( Message<MSGTYPE> message,\n-                                                                         String... names )\n+    if (messageType != null ? !messageType.equals(message.messageType) : message.messageType != null)\n     {\n-        if ( names.length == 0 )\n-        {\n-            for ( Map.Entry<String, String> header : headers.entrySet() )\n-            {\n-                if ( !message.hasHeader( header.getKey() ) )\n-                {\n-                    message.setHeader( header.getKey(), header.getValue() );\n-                }\n-            }\n-        }\n-        else\n-        {\n-            for ( String name : names )\n-            {\n-                String value = headers.get( name );\n-                if ( value != null && !message.hasHeader( name ) )\n-                {\n-                    message.setHeader( name, value );\n-                }\n-            }\n-        }\n-        return message;\n+      return false;\n     }\n+    return payload != null ? payload.equals(message.payload) : message.payload == null;\n+  }\n \n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        Message<?> message = (Message<?>) o;\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = messageType != null ? messageType.hashCode() : 0;\n+    result = 31 * result + (payload != null ? payload.hashCode() : 0);\n+    result = 31 * result + (headers != null ? headers.hashCode() : 0);\n+    return result;\n+  }\n \n-        if ( headers != null ? !headers.equals( message.headers ) : message.headers != null )\n-        {\n-            return false;\n-        }\n-        if ( messageType != null ? !messageType.equals( message.messageType ) : message.messageType != null )\n-        {\n-            return false;\n-        }\n-        return payload != null ? payload.equals( message.payload ) : message.payload == null;\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        int result = messageType != null ? messageType.hashCode() : 0;\n-        result = 31 * result + (payload != null ? payload.hashCode() : 0);\n-        result = 31 * result + (headers != null ? headers.hashCode() : 0);\n-        return result;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return messageType.name() + headers + (payload instanceof String ? \": \" + payload : \"\");\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return messageType.name() + headers + (payload instanceof String ? \": \" + payload : \"\");\n+  }\n }\n",
            "diff_size": 272
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2603/Message.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2603/Message.java\nindex 87550cb9890..2fe72f11a1b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2603/Message.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2603/Message.java\n@@ -29,8 +29,7 @@ import java.util.Map;\n  * <p>\n  * These are typically produced and consumed by a {@link org.neo4j.cluster.statemachine.StateMachine}.\n  */\n-public class Message<MESSAGETYPE extends MessageType>\n-        implements Serializable\n+public class Message<MESSAGETYPE extends MessageType> implements Serializable\n {\n     private static final long serialVersionUID = 7043669983188264476L;\n \n@@ -39,17 +38,14 @@ public class Message<MESSAGETYPE extends MessageType>\n         return to( messageType, to, null );\n     }\n \n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> to( MESSAGETYPE messageType, URI to,\n-                                                                             Object payload )\n-    {\n+    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> to( MESSAGETYPE messageType, URI to, Object payload )\n+{\n         return new Message<>( messageType, payload ).setHeader( HEADER_TO, to.toString() );\n     }\n \n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> respond( MESSAGETYPE messageType,\n-            Message<?> message, Object payload )\n+    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> respond( MESSAGETYPE messageType, Message<?> message, Object payload )\n     {\n-        return message.hasHeader( Message.HEADER_FROM ) ? new Message<>( messageType, payload )\n-                .setHeader( HEADER_TO, message.getHeader( Message.HEADER_FROM ) ) : internal( messageType, payload );\n+        return message.hasHeader( Message.HEADER_FROM ) ? new Message<>( messageType, payload ).setHeader( HEADER_TO, message.getHeader( Message.HEADER_FROM ) ) : internal( messageType, payload );\n     }\n \n     public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> internal( MESSAGETYPE message )\n@@ -62,18 +58,15 @@ public class Message<MESSAGETYPE extends MessageType>\n         return new Message<>( message, payload );\n     }\n \n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> timeout( MESSAGETYPE message,\n-                                                                                  Message<?> causedBy )\n-    {\n+    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> timeout( MESSAGETYPE message, Message<?> causedBy )\n+{\n         return timeout( message, causedBy, null );\n     }\n \n-    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> timeout( MESSAGETYPE message,\n-                                                                                  Message<?> causedBy, Object payload )\n-    {\n-        Message<MESSAGETYPE> timeout = causedBy.copyHeadersTo( new Message<>( message, payload ),\n-                Message.HEADER_CONVERSATION_ID, Message.HEADER_CREATED_BY );\n-        int timeoutCount = 0;\n+    public static <MESSAGETYPE extends MessageType> Message<MESSAGETYPE> timeout( MESSAGETYPE message, Message<?> causedBy, Object payload )\n+{\n+        Message<MESSAGETYPE> timeout = causedBy.copyHeadersTo( new Message<>( message, payload ), Message.HEADER_CONVERSATION_ID, Message.HEADER_CREATED_BY );\n+    int timeoutCount = 0;\n         if ( causedBy.hasHeader( HEADER_TIMEOUT_COUNT ) )\n         {\n             timeoutCount = Integer.parseInt( causedBy.getHeader( HEADER_TIMEOUT_COUNT ) ) + 1;\n@@ -84,18 +77,23 @@ public class Message<MESSAGETYPE extends MessageType>\n \n     // Standard headers\n     public static final String HEADER_CONVERSATION_ID = \"conversation-id\";\n-    public static final String HEADER_CREATED_BY = \"created-by\";\n-    public static final String HEADER_TIMEOUT_COUNT = \"timeout-count\";\n-    public static final String HEADER_FROM = \"from\";\n-    public static final String HEADER_TO = \"to\";\n-    public static final String HEADER_INSTANCE_ID = \"instance-id\";\n+\n+public static final String HEADER_CREATED_BY = \"created-by\";\n+\n+public static final String HEADER_TIMEOUT_COUNT = \"timeout-count\";\n+\n+public static final String HEADER_FROM = \"from\";\n+\n+public static final String HEADER_TO = \"to\";\n+\n+public static final String HEADER_INSTANCE_ID = \"instance-id\";\n     // Should be present only in configurationRequest messages. Value is a comma separated list of instance ids.\n     // Added in 3.0.9.\n     public static final String DISCOVERED = \"discovered\";\n \n     private MESSAGETYPE messageType;\n     private Object payload;\n-    private Map<String, String> headers = new HashMap<>();\n+    private Map<String,String> headers = new HashMap<>();\n \n     protected Message( MESSAGETYPE messageType, Object payload )\n     {\n@@ -135,15 +133,15 @@ public class Message<MESSAGETYPE extends MessageType>\n         return !headers.containsKey( Message.HEADER_TO );\n     }\n \n-    public String getHeader( String name )\n-            throws IllegalArgumentException\n-    {\n+    public String getHeader( String name ) throws IllegalArgumentException\n+{\n         String value = getHeader( name, null );\n         if ( value == null )\n         {\n             throw new IllegalArgumentException( \"No such header:\" + name );\n         }\n-        return value;\n+\n+return value;\n     }\n \n     public String getHeader( String name, String defaultValue )\n@@ -153,15 +151,15 @@ public class Message<MESSAGETYPE extends MessageType>\n         {\n             return defaultValue;\n         }\n-        return value;\n+\n+return value;\n     }\n \n-    public <MSGTYPE extends MessageType> Message<MSGTYPE> copyHeadersTo( Message<MSGTYPE> message,\n-                                                                         String... names )\n-    {\n+    public <MSGTYPE extends MessageType> Message<MSGTYPE> copyHeadersTo( Message<MSGTYPE> message, String... names )\n+{\n         if ( names.length == 0 )\n         {\n-            for ( Map.Entry<String, String> header : headers.entrySet() )\n+            for ( Map.Entry<String,String> header : headers.entrySet() )\n             {\n                 if ( !message.hasHeader( header.getKey() ) )\n                 {\n@@ -190,7 +188,8 @@ public class Message<MESSAGETYPE extends MessageType>\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n@@ -201,25 +200,27 @@ public class Message<MESSAGETYPE extends MessageType>\n         {\n             return false;\n         }\n-        if ( messageType != null ? !messageType.equals( message.messageType ) : message.messageType != null )\n+\n+if ( messageType != null ? !messageType.equals( message.messageType ) : message.messageType != null )\n         {\n             return false;\n         }\n-        return payload != null ? payload.equals( message.payload ) : message.payload == null;\n+\n+return payload != null ? payload.equals( message.payload ) : message.payload == null;\n     }\n \n     @Override\n     public int hashCode()\n     {\n         int result = messageType != null ? messageType.hashCode() : 0;\n-        result = 31 * result + (payload != null ? payload.hashCode() : 0);\n-        result = 31 * result + (headers != null ? headers.hashCode() : 0);\n+        result = 31 * result + (payload != null ? payload.hashCode() : 0 );\n+        result = 31 * result + (headers != null ? headers.hashCode() : 0 );\n         return result;\n     }\n \n     @Override\n     public String toString()\n     {\n-        return messageType.name() + headers + (payload instanceof String ? \": \" + payload : \"\");\n+        return messageType.name() + headers + ( payload instanceof String ? \": \" + payload : \"\" );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 50
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}