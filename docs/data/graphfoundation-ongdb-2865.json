{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2865",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "86",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "137",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "140",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "164",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "268",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2865/DynamicOwner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2865/DynamicOwner.java\nindex 62d952a211d..8d931395f41 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2865/DynamicOwner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2865/DynamicOwner.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import org.neo4j.consistency.RecordType;\n@@ -38,249 +39,240 @@ import static org.neo4j.consistency.store.RecordReference.SkippingReference.skip\n \n abstract class DynamicOwner<RECORD extends AbstractBaseRecord> implements Owner\n {\n-    static final ComparativeRecordChecker<DynamicRecord, AbstractBaseRecord, ConsistencyReport.DynamicConsistencyReport>\n-            ORPHAN_CHECK =\n-            ( record, ignored, engine, records ) -> engine.report().orphanDynamicRecord();\n+  static final ComparativeRecordChecker<DynamicRecord, AbstractBaseRecord, ConsistencyReport.DynamicConsistencyReport>\n+      ORPHAN_CHECK =\n+      (record, ignored, engine, records) -> engine.report().orphanDynamicRecord();\n \n-    abstract RecordReference<RECORD> record( RecordAccess records );\n+  abstract RecordReference<RECORD> record(RecordAccess records);\n \n-    @Override\n-    public void checkOrphanage()\n+  @Override\n+  public void checkOrphanage()\n+  {\n+    // default: do nothing\n+  }\n+\n+  static class Property extends DynamicOwner<PropertyRecord>\n+      implements ComparativeRecordChecker<PropertyRecord, AbstractBaseRecord, ConsistencyReport.PropertyConsistencyReport>\n+  {\n+    private final long id;\n+    private final RecordType type;\n+\n+    Property(RecordType type, PropertyRecord record)\n     {\n-        // default: do nothing\n+      this.type = type;\n+      this.id = record.getId();\n     }\n \n-    static class Property extends DynamicOwner<PropertyRecord>\n-            implements ComparativeRecordChecker<PropertyRecord, AbstractBaseRecord, ConsistencyReport.PropertyConsistencyReport>\n+    @Override\n+    RecordReference<PropertyRecord> record(RecordAccess records)\n     {\n-        private final long id;\n-        private final RecordType type;\n+      return records.property(id);\n+    }\n \n-        Property( RecordType type, PropertyRecord record )\n+    @Override\n+    public void checkReference(PropertyRecord property, AbstractBaseRecord record,\n+                               CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+                               RecordAccess records)\n+    {\n+      if (record instanceof PropertyRecord)\n+      {\n+        if (type == RecordType.STRING_PROPERTY)\n         {\n-            this.type = type;\n-            this.id = record.getId();\n-        }\n-\n-        @Override\n-        RecordReference<PropertyRecord> record( RecordAccess records )\n+          engine.report().stringMultipleOwners((PropertyRecord) record);\n+        } else\n         {\n-            return records.property( id );\n+          engine.report().arrayMultipleOwners((PropertyRecord) record);\n         }\n-\n-        @Override\n-        public void checkReference( PropertyRecord property, AbstractBaseRecord record,\n-                                    CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n-                                    RecordAccess records )\n+      } else if (record instanceof DynamicRecord)\n+      {\n+        if (type == RecordType.STRING_PROPERTY)\n+        {\n+          engine.report().stringMultipleOwners((DynamicRecord) record);\n+        } else\n         {\n-            if ( record instanceof PropertyRecord )\n-            {\n-                if ( type == RecordType.STRING_PROPERTY )\n-                {\n-                    engine.report().stringMultipleOwners( (PropertyRecord) record );\n-                }\n-                else\n-                {\n-                    engine.report().arrayMultipleOwners( (PropertyRecord) record );\n-                }\n-            }\n-            else if ( record instanceof DynamicRecord )\n-            {\n-                if ( type == RecordType.STRING_PROPERTY )\n-                {\n-                    engine.report().stringMultipleOwners( (DynamicRecord) record );\n-                }\n-                else\n-                {\n-                    engine.report().arrayMultipleOwners( (DynamicRecord) record );\n-                }\n-            }\n+          engine.report().arrayMultipleOwners((DynamicRecord) record);\n         }\n+      }\n     }\n+  }\n \n-    static class Dynamic extends DynamicOwner<DynamicRecord>\n-            implements ComparativeRecordChecker<DynamicRecord, AbstractBaseRecord, ConsistencyReport.DynamicConsistencyReport>\n-    {\n-        private final long id;\n-        private final RecordType type;\n+  static class Dynamic extends DynamicOwner<DynamicRecord>\n+      implements ComparativeRecordChecker<DynamicRecord, AbstractBaseRecord, ConsistencyReport.DynamicConsistencyReport>\n+  {\n+    private final long id;\n+    private final RecordType type;\n \n-        Dynamic( RecordType type, DynamicRecord record )\n-        {\n-            this.type = type;\n-            this.id = record.getId();\n-        }\n-\n-        @Override\n-        RecordReference<DynamicRecord> record( RecordAccess records )\n-        {\n-            switch ( type )\n-            {\n-            case STRING_PROPERTY:\n-                return records.string( id );\n-            case ARRAY_PROPERTY:\n-                return records.array( id );\n-            case PROPERTY_KEY_NAME:\n-                return records.propertyKeyName( (int)id );\n-            case RELATIONSHIP_TYPE_NAME:\n-                return records.relationshipTypeName( (int) id );\n-            default:\n-                return skipReference();\n-            }\n-        }\n+    Dynamic(RecordType type, DynamicRecord record)\n+    {\n+      this.type = type;\n+      this.id = record.getId();\n+    }\n \n-        @Override\n-        public void checkReference( DynamicRecord block, AbstractBaseRecord record,\n-                                    CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n-                                    RecordAccess records )\n-        {\n-            if ( record instanceof PropertyRecord )\n-            {\n-                engine.report().nextMultipleOwners( (PropertyRecord) record );\n-            }\n-            else if ( record instanceof DynamicRecord )\n-            {\n-                engine.report().nextMultipleOwners( (DynamicRecord) record );\n-            }\n-            else if ( record instanceof RelationshipTypeTokenRecord )\n-            {\n-                engine.report().nextMultipleOwners( (RelationshipTypeTokenRecord) record );\n-            }\n-            else if ( record instanceof PropertyKeyTokenRecord )\n-            {\n-                engine.report().nextMultipleOwners( (PropertyKeyTokenRecord) record );\n-            }\n-        }\n+    @Override\n+    RecordReference<DynamicRecord> record(RecordAccess records)\n+    {\n+      switch (type)\n+      {\n+        case STRING_PROPERTY:\n+          return records.string(id);\n+        case ARRAY_PROPERTY:\n+          return records.array(id);\n+        case PROPERTY_KEY_NAME:\n+          return records.propertyKeyName((int) id);\n+        case RELATIONSHIP_TYPE_NAME:\n+          return records.relationshipTypeName((int) id);\n+        default:\n+          return skipReference();\n+      }\n     }\n \n-    abstract static class NameOwner<RECORD extends TokenRecord,\n-            REPORT extends ConsistencyReport.NameConsistencyReport> extends DynamicOwner<RECORD>\n-            implements ComparativeRecordChecker<RECORD, AbstractBaseRecord, REPORT>\n+    @Override\n+    public void checkReference(DynamicRecord block, AbstractBaseRecord record,\n+                               CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n+                               RecordAccess records)\n     {\n-        @SuppressWarnings( \"ConstantConditions\" )\n-        @Override\n-        public void checkReference( RECORD name, AbstractBaseRecord record, CheckerEngine<RECORD, REPORT> engine,\n-                                    RecordAccess records )\n-        {\n-            ConsistencyReport.NameConsistencyReport report = engine.report();\n-            if ( record instanceof RelationshipTypeTokenRecord )\n-            {\n-                ((ConsistencyReport.RelationshipTypeConsistencyReport) report)\n-                        .nameMultipleOwners( (RelationshipTypeTokenRecord) record );\n-            }\n-            else if ( record instanceof PropertyKeyTokenRecord )\n-            {\n-                ((ConsistencyReport.PropertyKeyTokenConsistencyReport) report)\n-                        .nameMultipleOwners( (PropertyKeyTokenRecord) record );\n-            }\n-            else if ( record instanceof DynamicRecord )\n-            {\n-                report.nameMultipleOwners( (DynamicRecord) record );\n-            }\n-        }\n+      if (record instanceof PropertyRecord)\n+      {\n+        engine.report().nextMultipleOwners((PropertyRecord) record);\n+      } else if (record instanceof DynamicRecord)\n+      {\n+        engine.report().nextMultipleOwners((DynamicRecord) record);\n+      } else if (record instanceof RelationshipTypeTokenRecord)\n+      {\n+        engine.report().nextMultipleOwners((RelationshipTypeTokenRecord) record);\n+      } else if (record instanceof PropertyKeyTokenRecord)\n+      {\n+        engine.report().nextMultipleOwners((PropertyKeyTokenRecord) record);\n+      }\n     }\n+  }\n \n-    static class PropertyKey extends NameOwner<PropertyKeyTokenRecord, ConsistencyReport.PropertyKeyTokenConsistencyReport>\n+  abstract static class NameOwner<RECORD extends TokenRecord,\n+      REPORT extends ConsistencyReport.NameConsistencyReport> extends DynamicOwner<RECORD>\n+      implements ComparativeRecordChecker<RECORD, AbstractBaseRecord, REPORT>\n+  {\n+    @SuppressWarnings(\"ConstantConditions\")\n+    @Override\n+    public void checkReference(RECORD name, AbstractBaseRecord record, CheckerEngine<RECORD, REPORT> engine,\n+                               RecordAccess records)\n     {\n-        private final int id;\n+      ConsistencyReport.NameConsistencyReport report = engine.report();\n+      if (record instanceof RelationshipTypeTokenRecord)\n+      {\n+        ((ConsistencyReport.RelationshipTypeConsistencyReport) report)\n+            .nameMultipleOwners((RelationshipTypeTokenRecord) record);\n+      } else if (record instanceof PropertyKeyTokenRecord)\n+      {\n+        ((ConsistencyReport.PropertyKeyTokenConsistencyReport) report)\n+            .nameMultipleOwners((PropertyKeyTokenRecord) record);\n+      } else if (record instanceof DynamicRecord)\n+      {\n+        report.nameMultipleOwners((DynamicRecord) record);\n+      }\n+    }\n+  }\n \n-        PropertyKey( PropertyKeyTokenRecord record )\n-        {\n-            this.id = record.getIntId();\n-        }\n+  static class PropertyKey extends NameOwner<PropertyKeyTokenRecord, ConsistencyReport.PropertyKeyTokenConsistencyReport>\n+  {\n+    private final int id;\n \n-        @Override\n-        RecordReference<PropertyKeyTokenRecord> record( RecordAccess records )\n-        {\n-            return records.propertyKey( id );\n-        }\n+    PropertyKey(PropertyKeyTokenRecord record)\n+    {\n+      this.id = record.getIntId();\n     }\n \n-    static class LabelToken extends NameOwner<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport>\n+    @Override\n+    RecordReference<PropertyKeyTokenRecord> record(RecordAccess records)\n     {\n-        private final int id;\n+      return records.propertyKey(id);\n+    }\n+  }\n \n-        LabelToken( LabelTokenRecord record )\n-        {\n-            this.id = record.getIntId();\n-        }\n+  static class LabelToken extends NameOwner<LabelTokenRecord, ConsistencyReport.LabelTokenConsistencyReport>\n+  {\n+    private final int id;\n \n-        @Override\n-        RecordReference<LabelTokenRecord> record( RecordAccess records )\n-        {\n-            return records.label( id );\n-        }\n+    LabelToken(LabelTokenRecord record)\n+    {\n+      this.id = record.getIntId();\n     }\n \n-    static class RelationshipTypeToken extends NameOwner<RelationshipTypeTokenRecord,ConsistencyReport.RelationshipTypeConsistencyReport>\n+    @Override\n+    RecordReference<LabelTokenRecord> record(RecordAccess records)\n     {\n-        private final int id;\n+      return records.label(id);\n+    }\n+  }\n \n-        RelationshipTypeToken( RelationshipTypeTokenRecord record )\n-        {\n-            this.id = record.getIntId();\n-        }\n+  static class RelationshipTypeToken extends NameOwner<RelationshipTypeTokenRecord, ConsistencyReport.RelationshipTypeConsistencyReport>\n+  {\n+    private final int id;\n \n-        @Override\n-        RecordReference<RelationshipTypeTokenRecord> record( RecordAccess records )\n-        {\n-            return records.relationshipType( id );\n-        }\n+    RelationshipTypeToken(RelationshipTypeTokenRecord record)\n+    {\n+      this.id = record.getIntId();\n     }\n \n-    static class Unknown extends DynamicOwner<AbstractBaseRecord> implements RecordReference<AbstractBaseRecord>\n+    @Override\n+    RecordReference<RelationshipTypeTokenRecord> record(RecordAccess records)\n     {\n-        private PendingReferenceCheck<AbstractBaseRecord> reporter;\n+      return records.relationshipType(id);\n+    }\n+  }\n \n-        @Override\n-        RecordReference<AbstractBaseRecord> record( RecordAccess records )\n-        {\n-            // Getting the record for this owner means that some other owner replaced it\n-            // that means that it isn't an orphan, so we skip this orphan check\n-            // and return a record for conflict check that always is ok (by skipping the check)\n-            this.markInCustody();\n-            return skipReference();\n-        }\n+  static class Unknown extends DynamicOwner<AbstractBaseRecord> implements RecordReference<AbstractBaseRecord>\n+  {\n+    private PendingReferenceCheck<AbstractBaseRecord> reporter;\n \n-        @Override\n-        public void checkOrphanage()\n-        {\n-            PendingReferenceCheck<AbstractBaseRecord> reporter = pop();\n-            if ( reporter != null )\n-            {\n-                reporter.checkReference( null, null );\n-            }\n-        }\n+    @Override\n+    RecordReference<AbstractBaseRecord> record(RecordAccess records)\n+    {\n+      // Getting the record for this owner means that some other owner replaced it\n+      // that means that it isn't an orphan, so we skip this orphan check\n+      // and return a record for conflict check that always is ok (by skipping the check)\n+      this.markInCustody();\n+      return skipReference();\n+    }\n \n-        void markInCustody()\n-        {\n-            PendingReferenceCheck<AbstractBaseRecord> reporter = pop();\n-            if ( reporter != null )\n-            {\n-                reporter.skip();\n-            }\n-        }\n+    @Override\n+    public void checkOrphanage()\n+    {\n+      PendingReferenceCheck<AbstractBaseRecord> reporter = pop();\n+      if (reporter != null)\n+      {\n+        reporter.checkReference(null, null);\n+      }\n+    }\n \n-        private synchronized PendingReferenceCheck<AbstractBaseRecord> pop()\n-        {\n-            try\n-            {\n-                return this.reporter;\n-            }\n-            finally\n-            {\n-                this.reporter = null;\n-            }\n-        }\n+    void markInCustody()\n+    {\n+      PendingReferenceCheck<AbstractBaseRecord> reporter = pop();\n+      if (reporter != null)\n+      {\n+        reporter.skip();\n+      }\n+    }\n \n-        @Override\n-        public synchronized void dispatch( PendingReferenceCheck<AbstractBaseRecord> reporter )\n-        {\n-            this.reporter = reporter;\n-        }\n+    private synchronized PendingReferenceCheck<AbstractBaseRecord> pop()\n+    {\n+      try\n+      {\n+        return this.reporter;\n+      } finally\n+      {\n+        this.reporter = null;\n+      }\n     }\n \n-    private DynamicOwner()\n+    @Override\n+    public synchronized void dispatch(PendingReferenceCheck<AbstractBaseRecord> reporter)\n     {\n-        // only internal subclasses\n+      this.reporter = reporter;\n     }\n+  }\n+\n+  private DynamicOwner()\n+  {\n+    // only internal subclasses\n+  }\n }\n",
            "diff_size": 266
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "117",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "126",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "149",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2865/DynamicOwner.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2865/DynamicOwner.java\nindex 62d952a211d..c182037df86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2865/DynamicOwner.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2865/DynamicOwner.java\n@@ -38,10 +38,7 @@ import static org.neo4j.consistency.store.RecordReference.SkippingReference.skip\n \n abstract class DynamicOwner<RECORD extends AbstractBaseRecord> implements Owner\n {\n-    static final ComparativeRecordChecker<DynamicRecord, AbstractBaseRecord, ConsistencyReport.DynamicConsistencyReport>\n-            ORPHAN_CHECK =\n-            ( record, ignored, engine, records ) -> engine.report().orphanDynamicRecord();\n-\n+    static final ComparativeRecordChecker<DynamicRecord, AbstractBaseRecord, ConsistencyReport.DynamicConsistencyReport> ORPHAN_CHECK = ( record, ignored, engine, records ) -> engine.report().orphanDynamicRecord();\n     abstract RecordReference<RECORD> record( RecordAccess records );\n \n     @Override\n@@ -50,8 +47,7 @@ abstract class DynamicOwner<RECORD extends AbstractBaseRecord> implements Owner\n         // default: do nothing\n     }\n \n-    static class Property extends DynamicOwner<PropertyRecord>\n-            implements ComparativeRecordChecker<PropertyRecord, AbstractBaseRecord, ConsistencyReport.PropertyConsistencyReport>\n+    static class Property extends DynamicOwner<PropertyRecord> implements ComparativeRecordChecker<PropertyRecord, AbstractBaseRecord, ConsistencyReport.PropertyConsistencyReport>\n     {\n         private final long id;\n         private final RecordType type;\n@@ -69,10 +65,9 @@ abstract class DynamicOwner<RECORD extends AbstractBaseRecord> implements Owner\n         }\n \n         @Override\n-        public void checkReference( PropertyRecord property, AbstractBaseRecord record,\n-                                    CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n+        public void checkReference( PropertyRecord property, AbstractBaseRecord record, CheckerEngine<PropertyRecord, ConsistencyReport.PropertyConsistencyReport> engine,\n                                     RecordAccess records )\n-        {\n+{\n             if ( record instanceof PropertyRecord )\n             {\n                 if ( type == RecordType.STRING_PROPERTY )\n@@ -98,8 +93,7 @@ abstract class DynamicOwner<RECORD extends AbstractBaseRecord> implements Owner\n         }\n     }\n \n-    static class Dynamic extends DynamicOwner<DynamicRecord>\n-            implements ComparativeRecordChecker<DynamicRecord, AbstractBaseRecord, ConsistencyReport.DynamicConsistencyReport>\n+    static class Dynamic extends DynamicOwner<DynamicRecord> implements ComparativeRecordChecker<DynamicRecord, AbstractBaseRecord, ConsistencyReport.DynamicConsistencyReport>\n     {\n         private final long id;\n         private final RecordType type;\n@@ -120,19 +114,18 @@ abstract class DynamicOwner<RECORD extends AbstractBaseRecord> implements Owner\n             case ARRAY_PROPERTY:\n                 return records.array( id );\n             case PROPERTY_KEY_NAME:\n-                return records.propertyKeyName( (int)id );\n+                return records.propertyKeyName( ( int)id );\n             case RELATIONSHIP_TYPE_NAME:\n-                return records.relationshipTypeName( (int) id );\n+                return records.relationshipTypeName( ( int) id );\n             default:\n                 return skipReference();\n             }\n         }\n \n         @Override\n-        public void checkReference( DynamicRecord block, AbstractBaseRecord record,\n-                                    CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n+        public void checkReference( DynamicRecord block, AbstractBaseRecord record, CheckerEngine<DynamicRecord, ConsistencyReport.DynamicConsistencyReport> engine,\n                                     RecordAccess records )\n-        {\n+{\n             if ( record instanceof PropertyRecord )\n             {\n                 engine.report().nextMultipleOwners( (PropertyRecord) record );\n@@ -153,24 +146,20 @@ abstract class DynamicOwner<RECORD extends AbstractBaseRecord> implements Owner\n     }\n \n     abstract static class NameOwner<RECORD extends TokenRecord,\n-            REPORT extends ConsistencyReport.NameConsistencyReport> extends DynamicOwner<RECORD>\n-            implements ComparativeRecordChecker<RECORD, AbstractBaseRecord, REPORT>\n+            REPORT extends ConsistencyReport.NameConsistencyReport> extends DynamicOwner<RECORD> implements ComparativeRecordChecker<RECORD, AbstractBaseRecord, REPORT>\n     {\n         @SuppressWarnings( \"ConstantConditions\" )\n         @Override\n-        public void checkReference( RECORD name, AbstractBaseRecord record, CheckerEngine<RECORD, REPORT> engine,\n-                                    RecordAccess records )\n-        {\n+        public void checkReference( RECORD name, AbstractBaseRecord record, CheckerEngine<RECORD,REPORT> engine, RecordAccess records )\n+{\n             ConsistencyReport.NameConsistencyReport report = engine.report();\n             if ( record instanceof RelationshipTypeTokenRecord )\n             {\n-                ((ConsistencyReport.RelationshipTypeConsistencyReport) report)\n-                        .nameMultipleOwners( (RelationshipTypeTokenRecord) record );\n+                ((ConsistencyReport.RelationshipTypeConsistencyReport) report).nameMultipleOwners( (RelationshipTypeTokenRecord) record );\n             }\n             else if ( record instanceof PropertyKeyTokenRecord )\n             {\n-                ((ConsistencyReport.PropertyKeyTokenConsistencyReport) report)\n-                        .nameMultipleOwners( (PropertyKeyTokenRecord) record );\n+                ((ConsistencyReport.PropertyKeyTokenConsistencyReport) report).nameMultipleOwners( (PropertyKeyTokenRecord) record );\n             }\n             else if ( record instanceof DynamicRecord )\n             {\n@@ -283,4 +272,4 @@ abstract class DynamicOwner<RECORD extends AbstractBaseRecord> implements Owner\n     {\n         // only internal subclasses\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}