{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "26",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n\nimport com.services.nhinc.schema.auditmessage.AuditMessageType;\nimport gov.hhs.fha.nhinc.common.nhinccommon.AssertionType;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/26/PatientDiscoveryAuditTransforms.java\nindex 718d707457e..267314db81d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/26/PatientDiscoveryAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/26/PatientDiscoveryAuditTransforms.java\nindex 718d707457e..a272f3a8271 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/26/PatientDiscoveryAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n@@ -41,36 +42,39 @@ import org.hl7.v3.PRPAIN201306UV02;\n public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<\n     PRPAIN201305UV02, PRPAIN201306UV02> {\n \n-    private static final Logger LOG = Logger.getLogger(PatientDiscoveryAuditTransforms.class);\n-\n-    @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n-        AssertionType assertion, AuditMessageType auditMsg) {\n+  private static final Logger LOG = Logger.getLogger(PatientDiscoveryAuditTransforms.class);\n \n-        auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n-        try {\n-            auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n-        } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+  @Override\n+  protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n+                                                                          AssertionType assertion,\n+                                                                          AuditMessageType auditMsg) {\n \n-        return auditMsg;\n+    auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n+    try {\n+      auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n+    } catch (JAXBException ex) {\n+      LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n+          + ex.getLocalizedMessage(), ex);\n     }\n \n-    @Override\n-    protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n-        PRPAIN201306UV02 response, AssertionType assertion, AuditMessageType auditMsg) {\n+    return auditMsg;\n+  }\n \n-        auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n+  @Override\n+  protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n+                                                                           PRPAIN201306UV02 response,\n+                                                                           AssertionType assertion,\n+                                                                           AuditMessageType auditMsg) {\n \n-        try {\n-            auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(response, auditMsg);\n-        } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+    auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n \n-        return auditMsg;\n+    try {\n+      auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(response, auditMsg);\n+    } catch (JAXBException ex) {\n+      LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n+          + ex.getLocalizedMessage(), ex);\n     }\n+\n+    return auditMsg;\n+  }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/26/PatientDiscoveryAuditTransforms.java\nindex 718d707457e..9ef0c6bd397 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/26/PatientDiscoveryAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n@@ -38,22 +39,19 @@ import org.hl7.v3.PRPAIN201306UV02;\n  *\n  * @author achidamb\n  */\n-public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<\n-    PRPAIN201305UV02, PRPAIN201306UV02> {\n+public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<PRPAIN201305UV02, PRPAIN201306UV02> {\n \n     private static final Logger LOG = Logger.getLogger(PatientDiscoveryAuditTransforms.class);\n \n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n         AssertionType assertion, AuditMessageType auditMsg) {\n-\n-        auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n+    auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n         try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n+    }\n \n         return auditMsg;\n     }\n@@ -61,16 +59,13 @@ public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAud\n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n         PRPAIN201306UV02 response, AssertionType assertion, AuditMessageType auditMsg) {\n-\n-        auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n-\n-        try {\n+    auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n+try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(response, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n-        }\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n+    }\n \n         return auditMsg;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/26/PatientDiscoveryAuditTransforms.java\nindex 718d707457e..3532755f199 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/26/PatientDiscoveryAuditTransforms.java\n@@ -38,39 +38,38 @@ import org.hl7.v3.PRPAIN201306UV02;\n  *\n  * @author achidamb\n  */\n-public class PatientDiscoveryAuditTransforms extends AbstractPatientDiscoveryAuditTransforms<\n-    PRPAIN201305UV02, PRPAIN201306UV02> {\n+\n+\n+public class PatientDiscoveryAuditTransforms extends\n+    AbstractPatientDiscoveryAuditTransforms<PRPAIN201305UV02, PRPAIN201306UV02> {\n \n     private static final Logger LOG = Logger.getLogger(PatientDiscoveryAuditTransforms.class);\n \n+\n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForRequest(PRPAIN201305UV02 request,\n         AssertionType assertion, AuditMessageType auditMsg) {\n-\n         auditMsg = getPatientParticipantObjectIdentificationForRequest(request, auditMsg);\n         try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForRequest(request, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n         }\n-\n         return auditMsg;\n     }\n \n+\n     @Override\n     protected AuditMessageType getParticipantObjectIdentificationForResponse(PRPAIN201305UV02 request,\n-        PRPAIN201306UV02 response, AssertionType assertion, AuditMessageType auditMsg) {\n-\n+        PRPAIN201306UV02 response,\n+        AssertionType assertion, AuditMessageType auditMsg) {\n         auditMsg = getPatientParticipantObjectIdentificationForResponse(response, auditMsg);\n-\n         try {\n             auditMsg = getQueryParamsParticipantObjectIdentificationForResponse(response, auditMsg);\n         } catch (JAXBException ex) {\n-            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \"\n-                + ex.getLocalizedMessage(), ex);\n+            LOG.error(\"Error while creating ParticipantObjectIdentificationQueryByParameters segment : \" + ex.getLocalizedMessage(), ex);\n         }\n-\n         return auditMsg;\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/26/PatientDiscoveryAuditTransforms.java\nindex 718d707457e..267314db81d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/26/PatientDiscoveryAuditTransforms.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/26/PatientDiscoveryAuditTransforms.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.patientdiscovery.audit.transform;\n \n import com.services.nhinc.schema.auditmessage.AuditMessageType;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}