{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4534",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "50",
                    "column": "70",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "157",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "203",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "355",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4534/HaIdGeneratorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4534/HaIdGeneratorFactory.java\nindex 310f0c44906..c5c8e9f0cc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4534/HaIdGeneratorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4534/HaIdGeneratorFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.ha.id;\n \n import java.io.File;\n@@ -46,366 +47,364 @@ import static org.neo4j.kernel.impl.store.id.IdRangeIterator.EMPTY_ID_RANGE_ITER\n \n public class HaIdGeneratorFactory implements IdGeneratorFactory\n {\n-    private final Map<IdType, HaIdGenerator> generators = new EnumMap<>( IdType.class );\n-    private final FileSystemAbstraction fs;\n-    private final IdTypeConfigurationProvider idTypeConfigurationProvider;\n-    private final IdGeneratorFactory localFactory;\n-    private final DelegateInvocationHandler<Master> master;\n+  private final Map<IdType, HaIdGenerator> generators = new EnumMap<>(IdType.class);\n+  private final FileSystemAbstraction fs;\n+  private final IdTypeConfigurationProvider idTypeConfigurationProvider;\n+  private final IdGeneratorFactory localFactory;\n+  private final DelegateInvocationHandler<Master> master;\n+  private final Log log;\n+  private final RequestContextFactory requestContextFactory;\n+  private IdGeneratorState globalState = IdGeneratorState.PENDING;\n+\n+  public HaIdGeneratorFactory(DelegateInvocationHandler<Master> master, LogProvider logProvider,\n+                              RequestContextFactory requestContextFactory, FileSystemAbstraction fs, IdTypeConfigurationProvider idTypeConfigurationProvider)\n+  {\n+    this.fs = fs;\n+    this.idTypeConfigurationProvider = idTypeConfigurationProvider;\n+    this.localFactory = new DefaultIdGeneratorFactory(fs, idTypeConfigurationProvider);\n+    this.master = master;\n+    this.log = logProvider.getLog(getClass());\n+    this.requestContextFactory = requestContextFactory;\n+  }\n+\n+  @Override\n+  public IdGenerator open(File filename, IdType idType, LongSupplier highId, long maxId)\n+  {\n+    IdTypeConfiguration idTypeConfiguration = idTypeConfigurationProvider.getIdTypeConfiguration(idType);\n+    return open(filename, idTypeConfiguration.getGrabSize(), idType, highId, maxId);\n+  }\n+\n+  @Override\n+  public IdGenerator open(File fileName, int grabSize, IdType idType, LongSupplier highId, long maxId)\n+  {\n+    HaIdGenerator previous = generators.remove(idType);\n+    if (previous != null)\n+    {\n+      previous.close();\n+    }\n+\n+    IdGenerator initialIdGenerator;\n+    switch (globalState)\n+    {\n+      case MASTER:\n+        initialIdGenerator = localFactory.open(fileName, grabSize, idType, highId, maxId);\n+        break;\n+      case SLAVE:\n+        // Initially we may call switchToSlave() before calling open, so we need this additional\n+        // (and, you might say, hacky) call to delete the .id file here as well as in switchToSlave().\n+        fs.deleteFile(fileName);\n+        initialIdGenerator = new SlaveIdGenerator(idType, highId.getAsLong(), master.cement(), log, requestContextFactory);\n+        break;\n+      default:\n+        throw new IllegalStateException(globalState.name());\n+    }\n+    HaIdGenerator haIdGenerator = new HaIdGenerator(initialIdGenerator, fileName, grabSize, idType,\n+        globalState, maxId);\n+    generators.put(idType, haIdGenerator);\n+    return haIdGenerator;\n+  }\n+\n+  @Override\n+  public void create(File fileName, long highId, boolean throwIfFileExists)\n+  {\n+    localFactory.create(fileName, highId, false);\n+  }\n+\n+  @Override\n+  public IdGenerator get(IdType idType)\n+  {\n+    return generators.get(idType);\n+  }\n+\n+  public void switchToMaster()\n+  {\n+    globalState = IdGeneratorState.MASTER;\n+    for (HaIdGenerator generator : generators.values())\n+    {\n+      generator.switchToMaster();\n+    }\n+  }\n+\n+  public void switchToSlave()\n+  {\n+    globalState = IdGeneratorState.SLAVE;\n+    for (HaIdGenerator generator : generators.values())\n+    {\n+      generator.switchToSlave(master.cement());\n+    }\n+  }\n+\n+  private enum IdGeneratorState\n+  {\n+    PENDING, SLAVE, MASTER\n+  }\n+\n+  private class HaIdGenerator implements IdGenerator\n+  {\n+    private volatile IdGenerator delegate;\n+    private final File fileName;\n+    private final int grabSize;\n+    private final IdType idType;\n+    private volatile IdGeneratorState state;\n+    private final long maxId;\n+\n+    HaIdGenerator(IdGenerator initialDelegate, File fileName, int grabSize,\n+                  IdType idType, IdGeneratorState initialState, long maxId)\n+    {\n+      delegate = initialDelegate;\n+      this.fileName = fileName;\n+      this.grabSize = grabSize;\n+      this.idType = idType;\n+      this.state = initialState;\n+      this.maxId = maxId;\n+      log.debug(\"Instantiated HaIdGenerator for \" + initialDelegate + \" \" + idType + \", \" + initialState);\n+    }\n+\n+    private void switchToSlave(Master master)\n+    {\n+      String previousDelegate = delegate.toString();\n+      long highId = delegate.getHighId();\n+      // The .id file is open and marked DIRTY\n+      delegate.delete();\n+      // The .id file underneath is now gone\n+      delegate = new SlaveIdGenerator(idType, highId, master, log, requestContextFactory);\n+      log.debug(\"Instantiated slave delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId +\n+          \" (the previous delegate was \" + previousDelegate + \").\");\n+      state = IdGeneratorState.SLAVE;\n+    }\n+\n+    private void switchToMaster()\n+    {\n+      if (state == IdGeneratorState.SLAVE)\n+      {\n+        String previousDelegate = delegate.toString();\n+        long highId = delegate.getHighId();\n+        delegate.delete();\n+\n+        localFactory.create(fileName, highId, false);\n+        delegate = localFactory.open(fileName, grabSize, idType, () -> highId, maxId);\n+        log.debug(\"Instantiated master delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId +\n+            \" (the previous delegate was \" + previousDelegate + \").\");\n+      } else\n+      {\n+        log.debug(\"Keeps \" + delegate);\n+      }\n+\n+      state = IdGeneratorState.MASTER;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return delegate.toString();\n+    }\n+\n+    @Override\n+    public final boolean equals(Object other)\n+    {\n+      return delegate.equals(other);\n+    }\n+\n+    @Override\n+    public final int hashCode()\n+    {\n+      return delegate.hashCode();\n+    }\n+\n+    @Override\n+    public long nextId()\n+    {\n+      if (state == IdGeneratorState.PENDING)\n+      {\n+        throw new IllegalStateException(state.name());\n+      }\n+\n+      return delegate.nextId();\n+    }\n+\n+    @Override\n+    public IdRange nextIdBatch(int size)\n+    {\n+      if (state == IdGeneratorState.PENDING)\n+      {\n+        throw new IllegalStateException(state.name());\n+      }\n+\n+      return delegate.nextIdBatch(size);\n+    }\n+\n+    @Override\n+    public void setHighId(long id)\n+    {\n+      delegate.setHighId(id);\n+    }\n+\n+    @Override\n+    public long getHighId()\n+    {\n+      return delegate.getHighId();\n+    }\n+\n+    @Override\n+    public long getHighestPossibleIdInUse()\n+    {\n+      return delegate.getHighestPossibleIdInUse();\n+    }\n+\n+    @Override\n+    public void freeId(long id)\n+    {\n+      delegate.freeId(id);\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+      delegate.close();\n+    }\n+\n+    @Override\n+    public long getNumberOfIdsInUse()\n+    {\n+      return delegate.getNumberOfIdsInUse();\n+    }\n+\n+    @Override\n+    public long getDefragCount()\n+    {\n+      return delegate.getDefragCount();\n+    }\n+\n+    @Override\n+    public void delete()\n+    {\n+      delegate.delete();\n+    }\n+  }\n+\n+  private static class SlaveIdGenerator implements IdGenerator\n+  {\n+    private volatile long highestIdInUse;\n+    private volatile long defragCount;\n+    private volatile IdRangeIterator idQueue;\n+    private final Master master;\n+    private final IdType idType;\n     private final Log log;\n     private final RequestContextFactory requestContextFactory;\n-    private IdGeneratorState globalState = IdGeneratorState.PENDING;\n \n-    public HaIdGeneratorFactory( DelegateInvocationHandler<Master> master, LogProvider logProvider,\n-            RequestContextFactory requestContextFactory, FileSystemAbstraction fs, IdTypeConfigurationProvider idTypeConfigurationProvider )\n+    SlaveIdGenerator(IdType idType, long highId, Master master, Log log,\n+                     RequestContextFactory requestContextFactory)\n+    {\n+      this.idType = idType;\n+      this.highestIdInUse = highId;\n+      this.master = master;\n+      this.log = log;\n+      this.requestContextFactory = requestContextFactory;\n+      idQueue = EMPTY_ID_RANGE_ITERATOR;\n+    }\n+\n+    @Override\n+    public void close()\n+    {\n+    }\n+\n+    @Override\n+    public void freeId(long id)\n+    {\n+    }\n+\n+    @Override\n+    public long getHighId()\n+    {\n+      return highestIdInUse;\n+    }\n+\n+    @Override\n+    public long getHighestPossibleIdInUse()\n+    {\n+      return highestIdInUse;\n+    }\n+\n+    @Override\n+    public long getNumberOfIdsInUse()\n+    {\n+      return highestIdInUse - defragCount;\n+    }\n+\n+    @Override\n+    public synchronized long nextId()\n+    {\n+      long nextId = nextLocalId();\n+      if (nextId == IdRangeIterator.VALUE_REPRESENTING_NULL)\n+      {\n+        askForNextRangeFromMaster();\n+        nextId = nextLocalId();\n+      }\n+      return nextId;\n+    }\n+\n+    private void askForNextRangeFromMaster()\n+    {\n+      // If we don't have anymore grabbed ids from master, grab a bunch\n+      try (Response<IdAllocation> response =\n+               master.allocateIds(requestContextFactory.newRequestContext(), idType))\n+      {\n+        IdAllocation allocation = response.response();\n+        log.info(\"Received id allocation \" + allocation + \" from master \" + master + \" for \" + idType);\n+        storeLocally(allocation);\n+      } catch (ComException e)\n+      {\n+        throw new TransientTransactionFailureException(\n+            \"Cannot allocate new entity ids from the cluster master. \" +\n+                \"The master instance is either down, or we have network connectivity problems\", e);\n+      }\n+    }\n+\n+    @Override\n+    public synchronized IdRange nextIdBatch(int size)\n+    {\n+      IdRange range = idQueue.nextIdBatch(size);\n+      if (range.totalSize() == 0)\n+      {\n+        askForNextRangeFromMaster();\n+        range = idQueue.nextIdBatch(size);\n+      }\n+      return range;\n+    }\n+\n+    private void storeLocally(IdAllocation allocation)\n     {\n-        this.fs = fs;\n-        this.idTypeConfigurationProvider = idTypeConfigurationProvider;\n-        this.localFactory = new DefaultIdGeneratorFactory( fs, idTypeConfigurationProvider );\n-        this.master = master;\n-        this.log = logProvider.getLog( getClass() );\n-        this.requestContextFactory = requestContextFactory;\n+      setHighId(allocation.getHighestIdInUse());\n+      this.defragCount = allocation.getDefragCount();\n+      this.idQueue = allocation.getIdRange().iterator();\n+    }\n+\n+    private long nextLocalId()\n+    {\n+      return this.idQueue.nextId();\n     }\n \n     @Override\n-    public IdGenerator open( File filename, IdType idType, LongSupplier highId, long maxId )\n+    public void setHighId(long id)\n     {\n-        IdTypeConfiguration idTypeConfiguration = idTypeConfigurationProvider.getIdTypeConfiguration( idType );\n-        return open( filename, idTypeConfiguration.getGrabSize(), idType, highId, maxId );\n+      this.highestIdInUse = Math.max(this.highestIdInUse, id);\n     }\n \n     @Override\n-    public IdGenerator open( File fileName, int grabSize, IdType idType, LongSupplier highId, long maxId )\n-    {\n-        HaIdGenerator previous = generators.remove( idType );\n-        if ( previous != null )\n-        {\n-            previous.close();\n-        }\n-\n-        IdGenerator initialIdGenerator;\n-        switch ( globalState )\n-        {\n-        case MASTER:\n-            initialIdGenerator = localFactory.open( fileName, grabSize, idType, highId, maxId );\n-            break;\n-        case SLAVE:\n-            // Initially we may call switchToSlave() before calling open, so we need this additional\n-            // (and, you might say, hacky) call to delete the .id file here as well as in switchToSlave().\n-            fs.deleteFile( fileName );\n-            initialIdGenerator = new SlaveIdGenerator( idType, highId.getAsLong(), master.cement(), log, requestContextFactory );\n-            break;\n-        default:\n-            throw new IllegalStateException( globalState.name() );\n-        }\n-        HaIdGenerator haIdGenerator = new HaIdGenerator( initialIdGenerator, fileName, grabSize, idType,\n-                                    globalState, maxId );\n-        generators.put( idType, haIdGenerator );\n-        return haIdGenerator;\n+    public long getDefragCount()\n+    {\n+      return this.defragCount;\n     }\n \n     @Override\n-    public void create( File fileName, long highId, boolean throwIfFileExists )\n+    public void delete()\n     {\n-        localFactory.create( fileName, highId, false );\n     }\n \n     @Override\n-    public IdGenerator get( IdType idType )\n-    {\n-        return generators.get( idType );\n-    }\n-\n-    public void switchToMaster()\n-    {\n-        globalState = IdGeneratorState.MASTER;\n-        for ( HaIdGenerator generator : generators.values() )\n-        {\n-            generator.switchToMaster();\n-        }\n-    }\n-\n-    public void switchToSlave()\n-    {\n-        globalState = IdGeneratorState.SLAVE;\n-        for ( HaIdGenerator generator : generators.values() )\n-        {\n-            generator.switchToSlave( master.cement() );\n-        }\n-    }\n-\n-    private enum IdGeneratorState\n-    {\n-        PENDING, SLAVE, MASTER\n-    }\n-\n-    private class HaIdGenerator implements IdGenerator\n-    {\n-        private volatile IdGenerator delegate;\n-        private final File fileName;\n-        private final int grabSize;\n-        private final IdType idType;\n-        private volatile IdGeneratorState state;\n-        private final long maxId;\n-\n-        HaIdGenerator( IdGenerator initialDelegate, File fileName, int grabSize,\n-                IdType idType, IdGeneratorState initialState, long maxId )\n-        {\n-            delegate = initialDelegate;\n-            this.fileName = fileName;\n-            this.grabSize = grabSize;\n-            this.idType = idType;\n-            this.state = initialState;\n-            this.maxId = maxId;\n-            log.debug( \"Instantiated HaIdGenerator for \" + initialDelegate + \" \" + idType + \", \" + initialState );\n-        }\n-\n-        private void switchToSlave( Master master )\n-        {\n-            String previousDelegate = delegate.toString();\n-            long highId = delegate.getHighId();\n-            // The .id file is open and marked DIRTY\n-            delegate.delete();\n-            // The .id file underneath is now gone\n-            delegate = new SlaveIdGenerator( idType, highId, master, log, requestContextFactory );\n-            log.debug( \"Instantiated slave delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId +\n-                    \" (the previous delegate was \" + previousDelegate + \").\" );\n-            state = IdGeneratorState.SLAVE;\n-        }\n-\n-        private void switchToMaster()\n-        {\n-            if ( state == IdGeneratorState.SLAVE )\n-            {\n-                String previousDelegate = delegate.toString();\n-                long highId = delegate.getHighId();\n-                delegate.delete();\n-\n-                localFactory.create( fileName, highId, false );\n-                delegate = localFactory.open( fileName, grabSize, idType, () -> highId, maxId );\n-                log.debug( \"Instantiated master delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId +\n-                                                   \" (the previous delegate was \" + previousDelegate + \").\"  );\n-            }\n-            else\n-            {\n-                log.debug( \"Keeps \" + delegate );\n-            }\n-\n-            state = IdGeneratorState.MASTER;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return delegate.toString();\n-        }\n-\n-        @Override\n-        public final boolean equals( Object other )\n-        {\n-            return delegate.equals( other );\n-        }\n-\n-        @Override\n-        public final int hashCode()\n-        {\n-            return delegate.hashCode();\n-        }\n-\n-        @Override\n-        public long nextId()\n-        {\n-            if ( state == IdGeneratorState.PENDING )\n-            {\n-                throw new IllegalStateException( state.name() );\n-            }\n-\n-            return delegate.nextId();\n-        }\n-\n-        @Override\n-        public IdRange nextIdBatch( int size )\n-        {\n-            if ( state == IdGeneratorState.PENDING )\n-            {\n-                throw new IllegalStateException( state.name() );\n-            }\n-\n-            return delegate.nextIdBatch( size );\n-        }\n-\n-        @Override\n-        public void setHighId( long id )\n-        {\n-            delegate.setHighId( id );\n-        }\n-\n-        @Override\n-        public long getHighId()\n-        {\n-            return delegate.getHighId();\n-        }\n-\n-        @Override\n-        public long getHighestPossibleIdInUse()\n-        {\n-            return delegate.getHighestPossibleIdInUse();\n-        }\n-\n-        @Override\n-        public void freeId( long id )\n-        {\n-            delegate.freeId( id );\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-            delegate.close();\n-        }\n-\n-        @Override\n-        public long getNumberOfIdsInUse()\n-        {\n-            return delegate.getNumberOfIdsInUse();\n-        }\n-\n-        @Override\n-        public long getDefragCount()\n-        {\n-            return delegate.getDefragCount();\n-        }\n-\n-        @Override\n-        public void delete()\n-        {\n-            delegate.delete();\n-        }\n-    }\n-\n-    private static class SlaveIdGenerator implements IdGenerator\n-    {\n-        private volatile long highestIdInUse;\n-        private volatile long defragCount;\n-        private volatile IdRangeIterator idQueue;\n-        private final Master master;\n-        private final IdType idType;\n-        private final Log log;\n-        private final RequestContextFactory requestContextFactory;\n-\n-        SlaveIdGenerator( IdType idType, long highId, Master master, Log log,\n-                RequestContextFactory requestContextFactory )\n-        {\n-            this.idType = idType;\n-            this.highestIdInUse = highId;\n-            this.master = master;\n-            this.log = log;\n-            this.requestContextFactory = requestContextFactory;\n-            idQueue = EMPTY_ID_RANGE_ITERATOR;\n-        }\n-\n-        @Override\n-        public void close()\n-        {\n-        }\n-\n-        @Override\n-        public void freeId( long id )\n-        {\n-        }\n-\n-        @Override\n-        public long getHighId()\n-        {\n-            return highestIdInUse;\n-        }\n-\n-        @Override\n-        public long getHighestPossibleIdInUse()\n-        {\n-            return highestIdInUse;\n-        }\n-\n-        @Override\n-        public long getNumberOfIdsInUse()\n-        {\n-            return highestIdInUse - defragCount;\n-        }\n-\n-        @Override\n-        public synchronized long nextId()\n-        {\n-            long nextId = nextLocalId();\n-            if ( nextId == IdRangeIterator.VALUE_REPRESENTING_NULL )\n-            {\n-                askForNextRangeFromMaster();\n-                nextId = nextLocalId();\n-            }\n-            return nextId;\n-        }\n-\n-        private void askForNextRangeFromMaster()\n-        {\n-            // If we don't have anymore grabbed ids from master, grab a bunch\n-            try ( Response<IdAllocation> response =\n-                    master.allocateIds( requestContextFactory.newRequestContext(), idType ) )\n-            {\n-                IdAllocation allocation = response.response();\n-                log.info( \"Received id allocation \" + allocation + \" from master \" + master + \" for \" + idType );\n-                storeLocally( allocation );\n-            }\n-            catch ( ComException e )\n-            {\n-                throw new TransientTransactionFailureException(\n-                        \"Cannot allocate new entity ids from the cluster master. \" +\n-                        \"The master instance is either down, or we have network connectivity problems\", e );\n-            }\n-        }\n-\n-        @Override\n-        public synchronized IdRange nextIdBatch( int size )\n-        {\n-            IdRange range = idQueue.nextIdBatch( size );\n-            if ( range.totalSize() == 0 )\n-            {\n-                askForNextRangeFromMaster();\n-                range = idQueue.nextIdBatch( size );\n-            }\n-            return range;\n-        }\n-\n-        private void storeLocally( IdAllocation allocation )\n-        {\n-            setHighId( allocation.getHighestIdInUse() );\n-            this.defragCount = allocation.getDefragCount();\n-            this.idQueue = allocation.getIdRange().iterator();\n-        }\n-\n-        private long nextLocalId()\n-        {\n-            return this.idQueue.nextId();\n-        }\n-\n-        @Override\n-        public void setHighId( long id )\n-        {\n-            this.highestIdInUse = Math.max( this.highestIdInUse, id );\n-        }\n-\n-        @Override\n-        public long getDefragCount()\n-        {\n-            return this.defragCount;\n-        }\n-\n-        @Override\n-        public void delete()\n-        {\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return getClass().getSimpleName() + \"[\" + this.idQueue + \"]\";\n-        }\n+    public String toString()\n+    {\n+      return getClass().getSimpleName() + \"[\" + this.idQueue + \"]\";\n     }\n+  }\n }\n",
            "diff_size": 663
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "355",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 209).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4534/HaIdGeneratorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4534/HaIdGeneratorFactory.java\nindex 310f0c44906..9f3b9ea860a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4534/HaIdGeneratorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4534/HaIdGeneratorFactory.java\n@@ -46,7 +46,7 @@ import static org.neo4j.kernel.impl.store.id.IdRangeIterator.EMPTY_ID_RANGE_ITER\n \n public class HaIdGeneratorFactory implements IdGeneratorFactory\n {\n-    private final Map<IdType, HaIdGenerator> generators = new EnumMap<>( IdType.class );\n+    private final Map<IdType,HaIdGenerator> generators = new EnumMap<>( IdType.class );\n     private final FileSystemAbstraction fs;\n     private final IdTypeConfigurationProvider idTypeConfigurationProvider;\n     private final IdGeneratorFactory localFactory;\n@@ -97,9 +97,9 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n         default:\n             throw new IllegalStateException( globalState.name() );\n         }\n-        HaIdGenerator haIdGenerator = new HaIdGenerator( initialIdGenerator, fileName, grabSize, idType,\n-                                    globalState, maxId );\n-        generators.put( idType, haIdGenerator );\n+\n+HaIdGenerator haIdGenerator = new HaIdGenerator( initialIdGenerator, fileName, grabSize, idType, globalState, maxId );\n+generators.put( idType, haIdGenerator );\n         return haIdGenerator;\n     }\n \n@@ -167,9 +167,8 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n             delegate.delete();\n             // The .id file underneath is now gone\n             delegate = new SlaveIdGenerator( idType, highId, master, log, requestContextFactory );\n-            log.debug( \"Instantiated slave delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId +\n-                    \" (the previous delegate was \" + previousDelegate + \").\" );\n-            state = IdGeneratorState.SLAVE;\n+            log.debug( \"Instantiated slave delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId + \" (the previous delegate was \" + previousDelegate + \").\" );\n+state = IdGeneratorState.SLAVE;\n         }\n \n         private void switchToMaster()\n@@ -179,12 +178,10 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n                 String previousDelegate = delegate.toString();\n                 long highId = delegate.getHighId();\n                 delegate.delete();\n-\n-                localFactory.create( fileName, highId, false );\n+localFactory.create( fileName, highId, false );\n                 delegate = localFactory.open( fileName, grabSize, idType, () -> highId, maxId );\n-                log.debug( \"Instantiated master delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId +\n-                                                   \" (the previous delegate was \" + previousDelegate + \").\"  );\n-            }\n+                log.debug( \"Instantiated master delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId + \" (the previous delegate was \" + previousDelegate + \").\" );\n+    }\n             else\n             {\n                 log.debug( \"Keeps \" + delegate );\n@@ -340,14 +337,14 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n                 askForNextRangeFromMaster();\n                 nextId = nextLocalId();\n             }\n-            return nextId;\n+\n+return nextId;\n         }\n \n         private void askForNextRangeFromMaster()\n         {\n             // If we don't have anymore grabbed ids from master, grab a bunch\n-            try ( Response<IdAllocation> response =\n-                    master.allocateIds( requestContextFactory.newRequestContext(), idType ) )\n+            try ( Response<IdAllocation> response = master.allocateIds( requestContextFactory.newRequestContext(), idType ) )\n             {\n                 IdAllocation allocation = response.response();\n                 log.info( \"Received id allocation \" + allocation + \" from master \" + master + \" for \" + idType );\n@@ -355,10 +352,8 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n             }\n             catch ( ComException e )\n             {\n-                throw new TransientTransactionFailureException(\n-                        \"Cannot allocate new entity ids from the cluster master. \" +\n-                        \"The master instance is either down, or we have network connectivity problems\", e );\n-            }\n+                throw new TransientTransactionFailureException( \"Cannot allocate new entity ids from the cluster master. \" + \"The master instance is either down, or we have network connectivity problems\", e );\n+    }\n         }\n \n         @Override\n@@ -370,7 +365,8 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n                 askForNextRangeFromMaster();\n                 range = idQueue.nextIdBatch( size );\n             }\n-            return range;\n+\n+return range;\n         }\n \n         private void storeLocally( IdAllocation allocation )\n@@ -408,4 +404,4 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n             return getClass().getSimpleName() + \"[\" + this.idQueue + \"]\";\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 228).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "118",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "128",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "135",
                    "column": "34",
                    "severity": "error",
                    "message": "'{' at column 34 should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "34",
                    "severity": "error",
                    "message": "'{' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "135",
                    "column": "58",
                    "severity": "error",
                    "message": "'}' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "154",
                    "column": "75",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "154",
                    "column": "89",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "165",
                    "column": "65",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "column": "87",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "165",
                    "column": "113",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "178",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "column": "70",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "178",
                    "column": "92",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "178",
                    "column": "118",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "342",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "65",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "345",
                    "column": "91",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "350",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 213).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4534/HaIdGeneratorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4534/HaIdGeneratorFactory.java\nindex 310f0c44906..a52b1838880 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4534/HaIdGeneratorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/4534/HaIdGeneratorFactory.java\n@@ -23,7 +23,6 @@ import java.io.File;\n import java.util.EnumMap;\n import java.util.Map;\n import java.util.function.LongSupplier;\n-\n import org.neo4j.com.ComException;\n import org.neo4j.com.Response;\n import org.neo4j.graphdb.TransientTransactionFailureException;\n@@ -41,12 +40,11 @@ import org.neo4j.kernel.impl.store.id.configuration.IdTypeConfiguration;\n import org.neo4j.kernel.impl.store.id.configuration.IdTypeConfigurationProvider;\n import org.neo4j.logging.Log;\n import org.neo4j.logging.LogProvider;\n-\n import static org.neo4j.kernel.impl.store.id.IdRangeIterator.EMPTY_ID_RANGE_ITERATOR;\n \n public class HaIdGeneratorFactory implements IdGeneratorFactory\n {\n-    private final Map<IdType, HaIdGenerator> generators = new EnumMap<>( IdType.class );\n+    private final Map<IdType,HaIdGenerator> generators = new EnumMap<>( IdType.class );\n     private final FileSystemAbstraction fs;\n     private final IdTypeConfigurationProvider idTypeConfigurationProvider;\n     private final IdGeneratorFactory localFactory;\n@@ -55,8 +53,7 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n     private final RequestContextFactory requestContextFactory;\n     private IdGeneratorState globalState = IdGeneratorState.PENDING;\n \n-    public HaIdGeneratorFactory( DelegateInvocationHandler<Master> master, LogProvider logProvider,\n-            RequestContextFactory requestContextFactory, FileSystemAbstraction fs, IdTypeConfigurationProvider idTypeConfigurationProvider )\n+    public HaIdGeneratorFactory( DelegateInvocationHandler<Master> master, LogProvider logProvider, RequestContextFactory requestContextFactory, FileSystemAbstraction fs, IdTypeConfigurationProvider idTypeConfigurationProvider )\n     {\n         this.fs = fs;\n         this.idTypeConfigurationProvider = idTypeConfigurationProvider;\n@@ -97,8 +94,8 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n         default:\n             throw new IllegalStateException( globalState.name() );\n         }\n-        HaIdGenerator haIdGenerator = new HaIdGenerator( initialIdGenerator, fileName, grabSize, idType,\n-                                    globalState, maxId );\n+\n+        HaIdGenerator haIdGenerator = new HaIdGenerator( initialIdGenerator, fileName, grabSize, idType, globalState, maxId );\n         generators.put( idType, haIdGenerator );\n         return haIdGenerator;\n     }\n@@ -118,7 +115,8 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n     public void switchToMaster()\n     {\n         globalState = IdGeneratorState.MASTER;\n-        for ( HaIdGenerator generator : generators.values() )\n+        for( HaIdGenerator generator : generators.values()\n+        )\n         {\n             generator.switchToMaster();\n         }\n@@ -127,16 +125,14 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n     public void switchToSlave()\n     {\n         globalState = IdGeneratorState.SLAVE;\n-        for ( HaIdGenerator generator : generators.values() )\n+        for( HaIdGenerator generator : generators.values()\n+        )\n         {\n             generator.switchToSlave( master.cement() );\n         }\n     }\n \n-    private enum IdGeneratorState\n-    {\n-        PENDING, SLAVE, MASTER\n-    }\n+    private enum IdGeneratorState{ PENDING, SLAVE, MASTER}\n \n     private class HaIdGenerator implements IdGenerator\n     {\n@@ -147,8 +143,7 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n         private volatile IdGeneratorState state;\n         private final long maxId;\n \n-        HaIdGenerator( IdGenerator initialDelegate, File fileName, int grabSize,\n-                IdType idType, IdGeneratorState initialState, long maxId )\n+        HaIdGenerator( IdGenerator initialDelegate, File fileName, int grabSize, IdType idType, IdGeneratorState initialState, long maxId )\n         {\n             delegate = initialDelegate;\n             this.fileName = fileName;\n@@ -156,7 +151,7 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n             this.idType = idType;\n             this.state = initialState;\n             this.maxId = maxId;\n-            log.debug( \"Instantiated HaIdGenerator for \" + initialDelegate + \" \" + idType + \", \" + initialState );\n+            log.debug( \"Instantiated HaIdGenerator for \" + initialDelegate+ \" \" + idType+ \", \" + initialState );\n         }\n \n         private void switchToSlave( Master master )\n@@ -167,8 +162,7 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n             delegate.delete();\n             // The .id file underneath is now gone\n             delegate = new SlaveIdGenerator( idType, highId, master, log, requestContextFactory );\n-            log.debug( \"Instantiated slave delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId +\n-                    \" (the previous delegate was \" + previousDelegate + \").\" );\n+            log.debug( \"Instantiated slave delegate \" + delegate+ \" of type \" + idType+ \" with highid \" + highId+ \" (the previous delegate was \" + previousDelegate + \").\" );\n             state = IdGeneratorState.SLAVE;\n         }\n \n@@ -179,11 +173,9 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n                 String previousDelegate = delegate.toString();\n                 long highId = delegate.getHighId();\n                 delegate.delete();\n-\n                 localFactory.create( fileName, highId, false );\n                 delegate = localFactory.open( fileName, grabSize, idType, () -> highId, maxId );\n-                log.debug( \"Instantiated master delegate \" + delegate + \" of type \" + idType + \" with highid \" + highId +\n-                                                   \" (the previous delegate was \" + previousDelegate + \").\"  );\n+                log.debug( \"Instantiated master delegate \" + delegate+ \" of type \" + idType+ \" with highid \" + highId+ \" (the previous delegate was \" + previousDelegate + \").\" );\n             }\n             else\n             {\n@@ -292,8 +284,7 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n         private final Log log;\n         private final RequestContextFactory requestContextFactory;\n \n-        SlaveIdGenerator( IdType idType, long highId, Master master, Log log,\n-                RequestContextFactory requestContextFactory )\n+        SlaveIdGenerator( IdType idType, long highId, Master master, Log log, RequestContextFactory requestContextFactory )\n         {\n             this.idType = idType;\n             this.highestIdInUse = highId;\n@@ -340,25 +331,24 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n                 askForNextRangeFromMaster();\n                 nextId = nextLocalId();\n             }\n+\n             return nextId;\n         }\n \n         private void askForNextRangeFromMaster()\n         {\n             // If we don't have anymore grabbed ids from master, grab a bunch\n-            try ( Response<IdAllocation> response =\n-                    master.allocateIds( requestContextFactory.newRequestContext(), idType ) )\n+            try\n+                ( Response<IdAllocation> response = master.allocateIds( requestContextFactory.newRequestContext(), idType ))\n             {\n                 IdAllocation allocation = response.response();\n-                log.info( \"Received id allocation \" + allocation + \" from master \" + master + \" for \" + idType );\n+                log.info( \"Received id allocation \" + allocation+ \" from master \" + master+ \" for \" + idType );\n                 storeLocally( allocation );\n             }\n-            catch ( ComException e )\n-            {\n-                throw new TransientTransactionFailureException(\n-                        \"Cannot allocate new entity ids from the cluster master. \" +\n-                        \"The master instance is either down, or we have network connectivity problems\", e );\n-            }\n+                catch ( ComException e )\n+                {\n+                    throw new TransientTransactionFailureException( \"Cannot allocate new entity ids from the cluster master. \" + \"The master instance is either down, or we have network connectivity problems\", e );\n+                }\n         }\n \n         @Override\n@@ -370,6 +360,7 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n                 askForNextRangeFromMaster();\n                 range = idQueue.nextIdBatch( size );\n             }\n+\n             return range;\n         }\n \n@@ -408,4 +399,4 @@ public class HaIdGeneratorFactory implements IdGeneratorFactory\n             return getClass().getSimpleName() + \"[\" + this.idQueue + \"]\";\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}