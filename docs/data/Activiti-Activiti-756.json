{
    "project_name": "Activiti-Activiti",
    "error_id": "756",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.runtime.api.impl;\n\nimport java.util.ArrayList;\nimport java.util.List;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/756/TaskAdminRuntimeImpl.java\nindex d2bded1ff5e..8f7fd57ce80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/756/TaskAdminRuntimeImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/756/TaskAdminRuntimeImpl.java\nindex d2bded1ff5e..e1251549185 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/756/TaskAdminRuntimeImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.ArrayList;\n@@ -149,9 +150,9 @@ public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n         if (task == null) {\n             throw new IllegalStateException(\"Task with id: \" + completeTaskPayload.getTaskId() + \" cannot be completed because it cannot be found.\");\n         }\n-        \n+\n         taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n-        \n+\n         TaskImpl competedTaskData = new TaskImpl(task.getId(),\n                 task.getName(),\n                 Task.TaskStatus.COMPLETED);\n@@ -189,7 +190,7 @@ public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n     @Override\n     public void addCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n         if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n+            for (String u : candidateUsersPayload.getCandidateUsers()) {\n                 taskService.addCandidateUser(candidateUsersPayload.getTaskId(),\n                         u);\n             }\n@@ -199,7 +200,7 @@ public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n     @Override\n     public void deleteCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n         if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n+            for (String u : candidateUsersPayload.getCandidateUsers()) {\n                 taskService.deleteCandidateUser(candidateUsersPayload.getTaskId(),\n                         u);\n             }\n@@ -209,7 +210,7 @@ public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n     @Override\n     public void addCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n         if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n+            for (String g : candidateGroupsPayload.getCandidateGroups()) {\n                 taskService.addCandidateGroup(candidateGroupsPayload.getTaskId(),\n                         g);\n             }\n@@ -219,7 +220,7 @@ public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n     @Override\n     public void deleteCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n         if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n+            for (String g : candidateGroupsPayload.getCandidateGroups()) {\n                 taskService.deleteCandidateGroup(candidateGroupsPayload.getTaskId(),\n                         g);\n             }\n@@ -231,7 +232,7 @@ public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n         List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n         List<String> userCandidates = new ArrayList<>();\n         if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n+            for (IdentityLink i : identityLinks) {\n                 if (i.getUserId() != null) {\n                     if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n                         userCandidates.add(i.getUserId());\n@@ -248,7 +249,7 @@ public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n         List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n         List<String> groupCandidates = new ArrayList<>();\n         if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n+            for (IdentityLink i : identityLinks) {\n                 if (i.getGroupId() != null) {\n                     if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n                         groupCandidates.add(i.getGroupId());\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/756/TaskAdminRuntimeImpl.java\nindex d2bded1ff5e..6d4d6222d11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/756/TaskAdminRuntimeImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.ArrayList;\n@@ -149,8 +150,7 @@ public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n         if (task == null) {\n             throw new IllegalStateException(\"Task with id: \" + completeTaskPayload.getTaskId() + \" cannot be completed because it cannot be found.\");\n         }\n-        \n-        taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n+taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n         \n         TaskImpl competedTaskData = new TaskImpl(task.getId(),\n                 task.getName(),\n@@ -264,4 +264,4 @@ public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n         return taskService.getIdentityLinksForTask(taskId);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 108.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "169",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 170.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 8, expected is 4, indentation should be the same level as line 173.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/756/TaskAdminRuntimeImpl.java\nindex d2bded1ff5e..632a2c72ba8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/756/TaskAdminRuntimeImpl.java\n@@ -17,7 +17,6 @@ package org.activiti.runtime.api.impl;\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.activiti.api.model.shared.model.VariableInstance;\n import org.activiti.api.runtime.shared.query.Page;\n import org.activiti.api.runtime.shared.query.Pageable;\n@@ -50,218 +49,201 @@ import org.springframework.security.access.prepost.PreAuthorize;\n @PreAuthorize(\"hasRole('ACTIVITI_ADMIN')\")\n public class TaskAdminRuntimeImpl implements TaskAdminRuntime {\n \n-    private final TaskService taskService;\n-\n-    private final APITaskConverter taskConverter;\n+  private final TaskService taskService;\n \n-    private final APIVariableInstanceConverter variableInstanceConverter;\n+  private final APITaskConverter taskConverter;\n \n-    private final TaskRuntimeHelper taskRuntimeHelper;\n+  private final APIVariableInstanceConverter variableInstanceConverter;\n \n-    private final SecurityManager securityManager;\n+  private final TaskRuntimeHelper taskRuntimeHelper;\n \n-    public TaskAdminRuntimeImpl(TaskService taskService,\n-                                APITaskConverter taskConverter,\n-                                APIVariableInstanceConverter variableInstanceConverter,\n-                                TaskRuntimeHelper taskRuntimeHelper,\n-                                SecurityManager securityManager) {\n-        this.taskService = taskService;\n-        this.taskConverter = taskConverter;\n-        this.variableInstanceConverter = variableInstanceConverter;\n-        this.taskRuntimeHelper = taskRuntimeHelper;\n-        this.securityManager = securityManager;\n-    }\n+  private final SecurityManager securityManager;\n \n-    @Override\n-    public Task task(String taskId) {\n-        return taskConverter.from(taskRuntimeHelper.getInternalTask(taskId));\n-    }\n+  public TaskAdminRuntimeImpl(TaskService taskService,\n+                              APITaskConverter taskConverter,\n+                              APIVariableInstanceConverter variableInstanceConverter,\n+                              TaskRuntimeHelper taskRuntimeHelper, SecurityManager securityManager) {\n+    this.taskService = taskService;\n+    this.taskConverter = taskConverter;\n+    this.variableInstanceConverter = variableInstanceConverter;\n+    this.taskRuntimeHelper = taskRuntimeHelper;\n+    this.securityManager = securityManager;\n+  }\n \n-    @Override\n-    public Page<Task> tasks(Pageable pageable) {\n-        return tasks(pageable,\n-                TaskPayloadBuilder.tasks().build());\n-    }\n+  @Override\n+  public Task task(String taskId) {\n+    return taskConverter.from(taskRuntimeHelper.getInternalTask(taskId));\n+  }\n \n-    @Override\n-    public Page<Task> tasks(Pageable pageable,\n-                            GetTasksPayload getTasksPayload) {\n-        TaskQuery taskQuery = taskService.createTaskQuery();\n+  @Override\n+  public Page<Task> tasks(Pageable pageable) {\n+    return tasks(pageable,\n+                 TaskPayloadBuilder.tasks().build());\n+  }\n \n-        if (getTasksPayload.getProcessInstanceId() != null) {\n-            taskQuery = taskQuery.processInstanceId(getTasksPayload.getProcessInstanceId());\n-        }\n-        if (getTasksPayload.getParentTaskId() != null) {\n-            taskQuery = taskQuery.taskParentTaskId(getTasksPayload.getParentTaskId());\n-        }\n-\n-        List<Task> tasks = taskConverter.from(taskQuery.listPage(pageable.getStartIndex(),\n-                pageable.getMaxItems()));\n-        return new PageImpl<>(tasks,\n-                Math.toIntExact(taskQuery.count()));\n+  @Override\n+  public Page<Task> tasks(Pageable pageable, GetTasksPayload getTasksPayload) {\n+    TaskQuery taskQuery = taskService.createTaskQuery();\n+    if (getTasksPayload.getProcessInstanceId() != null) {\n+      taskQuery = taskQuery.processInstanceId(getTasksPayload.getProcessInstanceId());\n     }\n-\n-    @Override\n-    public Task update(UpdateTaskPayload updateTaskPayload) {\n-        return taskRuntimeHelper.applyUpdateTaskPayload(true, updateTaskPayload);\n-    }\n-\n-    @Override\n-    public Task delete(DeleteTaskPayload deleteTaskPayload) {\n-\n-        //      we might need to create an empty shell with the task ID and Status only\n-        Task task = task(deleteTaskPayload.getTaskId());\n-\n-        TaskImpl deletedTaskData = new TaskImpl(task.getId(),\n-                task.getName(),\n-                Task.TaskStatus.CANCELLED);\n-\n-        String authenticatedUserId = securityManager.getAuthenticatedUserId();\n-\n-        if (!deleteTaskPayload.hasReason()) {\n-            deleteTaskPayload.setReason(\"Task deleted by \" + authenticatedUserId);\n-        }\n-\n-        taskService.deleteTask(deleteTaskPayload.getTaskId(),\n-                deleteTaskPayload.getReason(),\n-                true);\n-        return deletedTaskData;\n+    if (getTasksPayload.getParentTaskId() != null) {\n+      taskQuery = taskQuery.taskParentTaskId(getTasksPayload.getParentTaskId());\n     }\n \n-    @Override\n-    public List<VariableInstance> variables(GetTaskVariablesPayload getTaskVariablesPayload) {\n-        return variableInstanceConverter.from(taskRuntimeHelper.getInternalTaskVariables(getTaskVariablesPayload.getTaskId()).values());\n-    }\n+    List<Task> tasks = taskConverter.from(taskQuery.listPage(pageable.getStartIndex(),\n+                                                             pageable.getMaxItems()));\n+    return new PageImpl<>(tasks, Math.toIntExact(taskQuery.count()));\n+  }\n \n-    @Override\n-    public void createVariable(CreateTaskVariablePayload createTaskVariablePayload) {\n-        taskRuntimeHelper.createVariable(true, createTaskVariablePayload);\n-    }\n+  @Override\n+  public Task update(UpdateTaskPayload updateTaskPayload) {\n+    return taskRuntimeHelper.applyUpdateTaskPayload(true, updateTaskPayload);\n+  }\n \n-    @Override\n-    public void updateVariable(UpdateTaskVariablePayload updateTaskVariablePayload) {\n-        taskRuntimeHelper.updateVariable(true, updateTaskVariablePayload);\n-    }\n+  @Override\n+  public Task delete(DeleteTaskPayload deleteTaskPayload) {\n \n-    @Override\n-    public Task complete(CompleteTaskPayload completeTaskPayload) {\n-        Task task = task(completeTaskPayload.getTaskId());\n-        if (task == null) {\n-            throw new IllegalStateException(\"Task with id: \" + completeTaskPayload.getTaskId() + \" cannot be completed because it cannot be found.\");\n-        }\n-        \n-        taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n-        \n-        TaskImpl competedTaskData = new TaskImpl(task.getId(),\n-                task.getName(),\n-                Task.TaskStatus.COMPLETED);\n-        taskService.complete(completeTaskPayload.getTaskId(),\n-                completeTaskPayload.getVariables(), true);\n-        return competedTaskData;\n-    }\n-\n-    @Override\n-    public Task claim(ClaimTaskPayload claimTaskPayload) {\n-        taskService.claim(claimTaskPayload.getTaskId(),\n-                claimTaskPayload.getAssignee());\n-\n-        return task(claimTaskPayload.getTaskId());\n-    }\n-\n-    @Override\n-    public Task release(ReleaseTaskPayload releaseTaskPayload) {\n-        taskService.unclaim(releaseTaskPayload.getTaskId());\n-        return task(releaseTaskPayload.getTaskId());\n-    }\n-\n-    @Override\n-    public Task assign(AssignTaskPayload assignTaskPayload) {\n+        //      we might need to create an empty shell with the task ID and Status only\n+    Task task = task(deleteTaskPayload.getTaskId());\n+    TaskImpl deletedTaskData = new TaskImpl(task.getId(),\n+                                            task.getName(),\n+                                            Task.TaskStatus.CANCELLED);\n+    String authenticatedUserId = securityManager.getAuthenticatedUserId();\n+    if (!deleteTaskPayload.hasReason()) {\n+      deleteTaskPayload.setReason(\"Task deleted by \" + authenticatedUserId);\n+    }\n+    taskService.deleteTask(deleteTaskPayload.getTaskId(),\n+                           deleteTaskPayload.getReason(),\n+                           true);\n+    return deletedTaskData;\n+  }\n+\n+  @Override\n+  public List<VariableInstance> variables(GetTaskVariablesPayload getTaskVariablesPayload) {\n+    return variableInstanceConverter.from(taskRuntimeHelper.getInternalTaskVariables(getTaskVariablesPayload.getTaskId()).values());\n+  }\n+\n+  @Override\n+  public void createVariable(CreateTaskVariablePayload createTaskVariablePayload) {\n+    taskRuntimeHelper.createVariable(true, createTaskVariablePayload);\n+  }\n+\n+  @Override\n+  public void updateVariable(UpdateTaskVariablePayload updateTaskVariablePayload) {\n+    taskRuntimeHelper.updateVariable(true, updateTaskVariablePayload);\n+  }\n+\n+  @Override\n+  public Task complete(CompleteTaskPayload completeTaskPayload) {\n+    Task task = task(completeTaskPayload.getTaskId());\n+    if (task == null) {\n+      throw new IllegalStateException(\"Task with id: \" + completeTaskPayload.getTaskId() + \" cannot be completed because it cannot be found.\");\n+    }\n+    taskRuntimeHelper.handleCompleteTaskPayload(completeTaskPayload);\n+\n+    TaskImpl competedTaskData = new TaskImpl(task.getId(),\n+                                             task.getName(),\n+                                             Task.TaskStatus.COMPLETED);\n+    taskService.complete(completeTaskPayload.getTaskId(),\n+                         completeTaskPayload.getVariables(),\n+                         true);\n+    return competedTaskData;\n+  }\n+\n+  @Override\n+  public Task claim(ClaimTaskPayload claimTaskPayload) {\n+    taskService.claim(claimTaskPayload.getTaskId(),\n+                      claimTaskPayload.getAssignee());\n+    return task(claimTaskPayload.getTaskId());\n+  }\n+\n+  @Override\n+  public Task release(ReleaseTaskPayload releaseTaskPayload) {\n+    taskService.unclaim(releaseTaskPayload.getTaskId());\n+    return task(releaseTaskPayload.getTaskId());\n+  }\n+\n+  @Override\n+  public Task assign(AssignTaskPayload assignTaskPayload) {\n         //We need to release, claim for assigned task is not working!\n-        taskService.unclaim(assignTaskPayload.getTaskId());\n+    taskService.unclaim(assignTaskPayload.getTaskId());\n \n         //Now assign a new user\n-        taskService.claim(assignTaskPayload.getTaskId(),\n-                assignTaskPayload.getAssignee());\n-\n-        return task(assignTaskPayload.getTaskId());\n-    }\n-\n-    @Override\n-    public void addCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n-        if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n-                taskService.addCandidateUser(candidateUsersPayload.getTaskId(),\n-                        u);\n-            }\n+    taskService.claim(assignTaskPayload.getTaskId(),\n+                      assignTaskPayload.getAssignee());\n+    return task(assignTaskPayload.getTaskId());\n+  }\n+\n+  @Override\n+  public void addCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n+    if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n+        for (String u : candidateUsersPayload.getCandidateUsers()) {\n+            taskService.addCandidateUser(candidateUsersPayload.getTaskId(), u);\n         }\n     }\n+  }\n \n-    @Override\n-    public void deleteCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n-        if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n-            for ( String u : candidateUsersPayload.getCandidateUsers() ) {\n-                taskService.deleteCandidateUser(candidateUsersPayload.getTaskId(),\n-                        u);\n-            }\n+  @Override\n+  public void deleteCandidateUsers(CandidateUsersPayload candidateUsersPayload) {\n+    if (candidateUsersPayload.getCandidateUsers() != null && !candidateUsersPayload.getCandidateUsers().isEmpty()) {\n+        for (String u : candidateUsersPayload.getCandidateUsers()) {\n+            taskService.deleteCandidateUser(candidateUsersPayload.getTaskId(), u);\n         }\n     }\n+  }\n \n-    @Override\n-    public void addCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n-        if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n-                taskService.addCandidateGroup(candidateGroupsPayload.getTaskId(),\n-                        g);\n-            }\n+  @Override\n+  public void addCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n+    if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n+        for (String g : candidateGroupsPayload.getCandidateGroups()) {\n+            taskService.addCandidateGroup(candidateGroupsPayload.getTaskId(), g);\n         }\n     }\n+  }\n \n-    @Override\n-    public void deleteCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n-        if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n-            for ( String g : candidateGroupsPayload.getCandidateGroups() ) {\n-                taskService.deleteCandidateGroup(candidateGroupsPayload.getTaskId(),\n-                        g);\n-            }\n+  @Override\n+  public void deleteCandidateGroups(CandidateGroupsPayload candidateGroupsPayload) {\n+    if (candidateGroupsPayload.getCandidateGroups() != null && !candidateGroupsPayload.getCandidateGroups().isEmpty()) {\n+        for (String g : candidateGroupsPayload.getCandidateGroups()) {\n+            taskService.deleteCandidateGroup(candidateGroupsPayload.getTaskId(), g);\n         }\n     }\n-\n-    @Override\n-    public List<String> userCandidates(String taskId) {\n-        List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n-        List<String> userCandidates = new ArrayList<>();\n-        if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n-                if (i.getUserId() != null) {\n-                    if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n-                        userCandidates.add(i.getUserId());\n-                    }\n-                }\n+  }\n+\n+  @Override\n+  public List<String> userCandidates(String taskId) {\n+    List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n+    List<String> userCandidates = new ArrayList<>();\n+    if (identityLinks != null) {\n+        for (IdentityLink i : identityLinks) {\n+          if (i.getUserId() != null) {\n+            if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n+              userCandidates.add(i.getUserId());\n             }\n-\n+          }\n         }\n-        return userCandidates;\n     }\n-\n-    @Override\n-    public List<String> groupCandidates(String taskId) {\n-        List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n-        List<String> groupCandidates = new ArrayList<>();\n-        if (identityLinks != null) {\n-            for ( IdentityLink i : identityLinks ) {\n-                if (i.getGroupId() != null) {\n-                    if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n-                        groupCandidates.add(i.getGroupId());\n-                    }\n-                }\n+    return userCandidates;\n+  }\n+\n+  @Override\n+  public List<String> groupCandidates(String taskId) {\n+    List<IdentityLink> identityLinks = getIdentityLinks(taskId);\n+    List<String> groupCandidates = new ArrayList<>();\n+    if (identityLinks != null) {\n+        for (IdentityLink i : identityLinks) {\n+          if (i.getGroupId() != null) {\n+            if (i.getType().equals(IdentityLinkType.CANDIDATE)) {\n+              groupCandidates.add(i.getGroupId());\n             }\n-\n+          }\n         }\n-        return groupCandidates;\n-    }\n-\n-    private List<IdentityLink> getIdentityLinks(String taskId) {\n-        return taskService.getIdentityLinksForTask(taskId);\n     }\n+    return groupCandidates;\n+  }\n \n-}\n+  private List<IdentityLink> getIdentityLinks(String taskId) {\n+    return taskService.getIdentityLinksForTask(taskId);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 225
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/756/TaskAdminRuntimeImpl.java\nindex d2bded1ff5e..8f7fd57ce80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/756/TaskAdminRuntimeImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/756/TaskAdminRuntimeImpl.java\nindex d2bded1ff5e..8f7fd57ce80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/756/TaskAdminRuntimeImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/756/TaskAdminRuntimeImpl.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.runtime.api.impl;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}