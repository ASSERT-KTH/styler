{
    "project_name": "intuit-Tank",
    "error_id": "47",
    "information": {
        "errors": [
            {
                "line": "72",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @Nullable\n    public JobTO getJob(int jobId) throws RestServiceException {\n    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n        Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n        if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n            return null;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "86",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/47/JobServiceClient.java\nindex b8f10a34482..6be35e104f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/47/JobServiceClient.java\n@@ -69,7 +69,7 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+        WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n         Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/47/JobServiceClient.java\nindex b8f10a34482..6d5ec9fe606 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/47/JobServiceClient.java\n@@ -31,65 +31,61 @@ import com.intuit.tank.rest.util.ServiceConsants;\n \n /**\n  * JobClient\n- * \n+ *\n  * @author dangleton\n- * \n  */\n public class JobServiceClient extends BaseRestClient {\n \n-    private static final String SERVICE_BASE_URL = ServiceConsants.REST_SERVICE_CONTEXT\n-            + JobService.SERVICE_RELATIVE_PATH;\n+  private static final String SERVICE_BASE_URL = ServiceConsants.REST_SERVICE_CONTEXT\n+    + JobService.SERVICE_RELATIVE_PATH;\n \n-    /**\n-     * \n-     * @param serviceUrl\n-     */\n-    public JobServiceClient(String serviceUrl) {\n-        super(serviceUrl, null, null);\n-    }\n+  /**\n+   * @param serviceUrl\n+   */\n+  public JobServiceClient(String serviceUrl) {\n+    super(serviceUrl, null, null);\n+  }\n \n-    /**\n-     * \n-     * @param serviceUrl\n-     */\n-    public JobServiceClient(String serviceUrl, final String proxyServer, final Integer proxyPort) {\n-        super(serviceUrl, proxyServer, proxyPort);\n-    }\n+  /**\n+   * @param serviceUrl\n+   */\n+  public JobServiceClient(String serviceUrl, final String proxyServer, final Integer proxyPort) {\n+    super(serviceUrl, proxyServer, proxyPort);\n+  }\n \n-    /**\n-     * \n-     * @return\n-     */\n-    protected String getServiceBaseUrl() {\n-        return SERVICE_BASE_URL;\n-    }\n+  /**\n+   * @return\n+   */\n+  protected String getServiceBaseUrl() {\n+    return SERVICE_BASE_URL;\n+  }\n \n-    /**\n-     * @{inheritDoc\n-     */\n-    @Nullable\n-    public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n-        Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n-        if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n-            return null;\n-        }\n-        exceptionHandler.checkStatusCode(response);\n-        return response.readEntity(JobTO.class);\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Nullable\n+  public JobTO getJob(int jobId) throws RestServiceException {\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+    Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n+    if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n+      return null;\n     }\n+    exceptionHandler.checkStatusCode(response);\n+    return response.readEntity(JobTO.class);\n+  }\n \n-    /**\n-     * @{inheritDoc\n-     */\n-    @Nullable\n-    public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n-        Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n-        if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n-            return Collections.emptyList();\n-        }\n-        exceptionHandler.checkStatusCode(response);\n-        JobContainer jobContainer = response.readEntity(JobContainer.class);\n-        return jobContainer.getJobs();\n+  /**\n+   * @{inheritDoc\n+   */\n+  @Nullable\n+  public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n+    Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n+    if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n+      return Collections.emptyList();\n     }\n+    exceptionHandler.checkStatusCode(response);\n+    JobContainer jobContainer = response.readEntity(JobContainer.class);\n+    return jobContainer.getJobs();\n+  }\n }\n",
            "diff_size": 57
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/47/JobServiceClient.java\nindex b8f10a34482..d46c081e737 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/47/JobServiceClient.java\n@@ -69,8 +69,8 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n-        Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n         }\n@@ -83,8 +83,8 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n-        Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n+    WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n+Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return Collections.emptyList();\n         }\n@@ -92,4 +92,4 @@ public class JobServiceClient extends BaseRestClient {\n         JobContainer jobContainer = response.readEntity(JobContainer.class);\n         return jobContainer.getJobs();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/47/JobServiceClient.java\nindex b8f10a34482..908a5645b27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/47/JobServiceClient.java\n@@ -13,15 +13,15 @@ package com.intuit.tank.api.client.v1.job;\n  * #L%\n  */\n \n+\n+\n import java.util.Collections;\n import java.util.List;\n-\n import javax.annotation.Nullable;\n import javax.ws.rs.client.WebTarget;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.Status;\n-\n import com.intuit.tank.api.model.v1.job.JobContainer;\n import com.intuit.tank.api.model.v1.job.JobTO;\n import com.intuit.tank.api.service.v1.job.JobService;\n@@ -35,15 +35,17 @@ import com.intuit.tank.rest.util.ServiceConsants;\n  * @author dangleton\n  * \n  */\n+\n+\n public class JobServiceClient extends BaseRestClient {\n \n-    private static final String SERVICE_BASE_URL = ServiceConsants.REST_SERVICE_CONTEXT\n-            + JobService.SERVICE_RELATIVE_PATH;\n+    private static final String SERVICE_BASE_URL = ServiceConsants.REST_SERVICE_CONTEXT + JobService.SERVICE_RELATIVE_PATH;\n \n     /**\n      * \n      * @param serviceUrl\n      */\n+\n     public JobServiceClient(String serviceUrl) {\n         super(serviceUrl, null, null);\n     }\n@@ -52,6 +54,8 @@ public class JobServiceClient extends BaseRestClient {\n      * \n      * @param serviceUrl\n      */\n+\n+\n     public JobServiceClient(String serviceUrl, final String proxyServer, final Integer proxyPort) {\n         super(serviceUrl, proxyServer, proxyPort);\n     }\n@@ -60,6 +64,8 @@ public class JobServiceClient extends BaseRestClient {\n      * \n      * @return\n      */\n+\n+\n     protected String getServiceBaseUrl() {\n         return SERVICE_BASE_URL;\n     }\n@@ -67,9 +73,10 @@ public class JobServiceClient extends BaseRestClient {\n     /**\n      * @{inheritDoc\n      */\n+\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+        WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n         Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n@@ -81,9 +88,10 @@ public class JobServiceClient extends BaseRestClient {\n     /**\n      * @{inheritDoc\n      */\n+\n     @Nullable\n     public List<JobTO> getJobsForProject(int projectId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n+        WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOBS, projectId));\n         Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return Collections.emptyList();\n@@ -92,4 +100,5 @@ public class JobServiceClient extends BaseRestClient {\n         JobContainer jobContainer = response.readEntity(JobContainer.class);\n         return jobContainer.getJobs();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "86",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/47/JobServiceClient.java\nindex b8f10a34482..6be35e104f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/47/JobServiceClient.java\n@@ -69,7 +69,7 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+        WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n         Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "86",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/47/JobServiceClient.java\nindex b8f10a34482..6be35e104f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/47/JobServiceClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/47/JobServiceClient.java\n@@ -69,7 +69,7 @@ public class JobServiceClient extends BaseRestClient {\n      */\n     @Nullable\n     public JobTO getJob(int jobId) throws RestServiceException {\n-    \tWebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n+        WebTarget webTarget = client.target(urlBuilder.buildUrl(JobService.METHOD_JOB, jobId));\n         Response response = webTarget.request(MediaType.APPLICATION_XML_TYPE).get();\n         if (response.getStatus() == Status.NOT_FOUND.getStatusCode()) {\n             return null;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}