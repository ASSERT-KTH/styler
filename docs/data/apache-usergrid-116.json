{
    "project_name": "apache-usergrid",
    "error_id": "116",
    "information": {
        "errors": [
            {
                "line": "26",
                "severity": "warning",
                "message": "Use of @author javadoc keyword is prohibited.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": " * Simple factory for generating literal instance based on the runtime value\n *\n * @author tnine\n */\npublic class LiteralFactory {\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "27",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "37",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "36",
                    "column": "44",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "37",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "41",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "39",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "45",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "38",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "43",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "37",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "41",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "40",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "47",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/116/LiteralFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/116/LiteralFactory.java\nindex 6861d47d67d..3df164a8343 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/116/LiteralFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/116/LiteralFactory.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.query.tree;\n \n \n@@ -27,33 +28,35 @@ import java.util.UUID;\n  */\n public class LiteralFactory {\n \n-    /** Generate the correct literal subclass based on the runtime instance. */\n-    public static final Literal<?> getLiteral( Object value ) {\n-        if ( value instanceof Integer ) {\n-            return new LongLiteral( ( Integer ) value );\n+    /**\n+     * Generate the correct literal subclass based on the runtime instance.\n+     */\n+    public static final Literal<?> getLiteral(Object value) {\n+        if (value instanceof Integer) {\n+            return new LongLiteral((Integer) value);\n         }\n-        if ( value instanceof Long ) {\n-            return new LongLiteral( ( Long ) value );\n+        if (value instanceof Long) {\n+            return new LongLiteral((Long) value);\n         }\n \n-        if ( value instanceof String ) {\n-            return new StringLiteral( ( String ) value );\n+        if (value instanceof String) {\n+            return new StringLiteral((String) value);\n         }\n \n-        if ( value instanceof Float ) {\n-            return new FloatLiteral( ( Float ) value );\n+        if (value instanceof Float) {\n+            return new FloatLiteral((Float) value);\n         }\n \n-        if ( value instanceof UUID ) {\n-            return new UUIDLiteral( ( UUID ) value );\n+        if (value instanceof UUID) {\n+            return new UUIDLiteral((UUID) value);\n         }\n \n-        if ( value instanceof Boolean ) {\n-            return new BooleanLiteral( ( Boolean ) value );\n+        if (value instanceof Boolean) {\n+            return new BooleanLiteral((Boolean) value);\n         }\n \n         throw new UnsupportedOperationException(\n-                String.format( \"Unsupported type of %s was passed when trying to construct a literal\",\n-                        value.getClass() ) );\n+            String.format(\"Unsupported type of %s was passed when trying to construct a literal\",\n+                value.getClass()));\n     }\n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/116/LiteralFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/116/LiteralFactory.java\nindex 6861d47d67d..14a304daf8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/116/LiteralFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/116/LiteralFactory.java\n@@ -56,4 +56,4 @@ public class LiteralFactory {\n                 String.format( \"Unsupported type of %s was passed when trying to construct a literal\",\n                         value.getClass() ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/116/LiteralFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/116/LiteralFactory.java\nindex 6861d47d67d..20ea694874e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/116/LiteralFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/116/LiteralFactory.java\n@@ -25,9 +25,12 @@ import java.util.UUID;\n  *\n  * @author tnine\n  */\n+\n+\n public class LiteralFactory {\n \n     /** Generate the correct literal subclass based on the runtime instance. */\n+\n     public static final Literal<?> getLiteral( Object value ) {\n         if ( value instanceof Integer ) {\n             return new LongLiteral( ( Integer ) value );\n@@ -35,25 +38,18 @@ public class LiteralFactory {\n         if ( value instanceof Long ) {\n             return new LongLiteral( ( Long ) value );\n         }\n-\n         if ( value instanceof String ) {\n             return new StringLiteral( ( String ) value );\n         }\n-\n         if ( value instanceof Float ) {\n             return new FloatLiteral( ( Float ) value );\n         }\n-\n         if ( value instanceof UUID ) {\n             return new UUIDLiteral( ( UUID ) value );\n         }\n-\n         if ( value instanceof Boolean ) {\n             return new BooleanLiteral( ( Boolean ) value );\n         }\n-\n-        throw new UnsupportedOperationException(\n-                String.format( \"Unsupported type of %s was passed when trying to construct a literal\",\n-                        value.getClass() ) );\n+        throw new UnsupportedOperationException( String.format( \"Unsupported type of %s was passed when trying to construct a literal\", value.getClass() ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "26",
                    "severity": "warning",
                    "message": "Use of @author javadoc keyword is prohibited.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}