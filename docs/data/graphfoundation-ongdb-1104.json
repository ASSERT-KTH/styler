{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1104",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "93",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1104/LoadableConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1104/LoadableConfig.java\nindex 39a0f0428e8..107bc9eb3f3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1104/LoadableConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1104/LoadableConfig.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.configuration;\n \n import java.lang.reflect.Field;\n@@ -36,86 +37,86 @@ import org.neo4j.graphdb.config.SettingGroup;\n  */\n public interface LoadableConfig\n {\n-    /**\n-     * Collects settings from implementors which may or may not have descriptions attached to them.\n-     *\n-     * @return a list of the implementing class's ConfigOptions\n-     */\n-    default List<ConfigOptions> getConfigOptions()\n+  /**\n+   * Collects settings from implementors which may or may not have descriptions attached to them.\n+   *\n+   * @return a list of the implementing class's ConfigOptions\n+   */\n+  default List<ConfigOptions> getConfigOptions()\n+  {\n+    ArrayList<ConfigOptions> configOptions = new ArrayList<>();\n+    for (Field f : getClass().getDeclaredFields())\n     {\n-        ArrayList<ConfigOptions> configOptions = new ArrayList<>();\n-        for ( Field f : getClass().getDeclaredFields() )\n+      try\n+      {\n+        Object publicSetting = f.get(this);\n+        if (publicSetting instanceof BaseSetting)\n         {\n-            try\n-            {\n-                Object publicSetting = f.get( this );\n-                if ( publicSetting instanceof BaseSetting )\n-                {\n-                    BaseSetting setting = (BaseSetting) publicSetting;\n+          BaseSetting setting = (BaseSetting) publicSetting;\n \n-                    final Description documentation = f.getAnnotation( Description.class );\n-                    if ( documentation != null )\n-                    {\n-                        setting.setDescription( documentation.value() );\n-                    }\n+          final Description documentation = f.getAnnotation(Description.class);\n+          if (documentation != null)\n+          {\n+            setting.setDescription(documentation.value());\n+          }\n \n-                    final DocumentedDefaultValue defValue = f.getAnnotation( DocumentedDefaultValue.class );\n-                    if ( defValue != null )\n-                    {\n-                        setting.setDocumentedDefaultValue( defValue.value() );\n-                    }\n+          final DocumentedDefaultValue defValue = f.getAnnotation(DocumentedDefaultValue.class);\n+          if (defValue != null)\n+          {\n+            setting.setDocumentedDefaultValue(defValue.value());\n+          }\n \n-                    final Deprecated deprecatedAnnotation = f.getAnnotation( Deprecated.class );\n-                    setting.setDeprecated( deprecatedAnnotation != null );\n+          final Deprecated deprecatedAnnotation = f.getAnnotation(Deprecated.class);\n+          setting.setDeprecated(deprecatedAnnotation != null);\n \n-                    final ReplacedBy replacedByAnnotation = f.getAnnotation( ReplacedBy.class );\n-                    if ( replacedByAnnotation != null )\n-                    {\n-                        setting.setReplacement( replacedByAnnotation.value() );\n-                    }\n+          final ReplacedBy replacedByAnnotation = f.getAnnotation(ReplacedBy.class);\n+          if (replacedByAnnotation != null)\n+          {\n+            setting.setReplacement(replacedByAnnotation.value());\n+          }\n \n-                    final Internal internalAnnotation = f.getAnnotation( Internal.class );\n-                    setting.setInternal( internalAnnotation != null );\n+          final Internal internalAnnotation = f.getAnnotation(Internal.class);\n+          setting.setInternal(internalAnnotation != null);\n \n-                    final Secret secretAnnotation = f.getAnnotation( Secret.class );\n-                    setting.setSecret( secretAnnotation != null );\n+          final Secret secretAnnotation = f.getAnnotation(Secret.class);\n+          setting.setSecret(secretAnnotation != null);\n \n-                    final Dynamic dynamicAnnotation = f.getAnnotation( Dynamic.class );\n-                    setting.setDynamic( dynamicAnnotation != null );\n-                }\n+          final Dynamic dynamicAnnotation = f.getAnnotation(Dynamic.class);\n+          setting.setDynamic(dynamicAnnotation != null);\n+        }\n \n-                if ( publicSetting instanceof SettingGroup )\n-                {\n-                    SettingGroup setting = (SettingGroup) publicSetting;\n-                    configOptions.add( new ConfigOptions( setting ) );\n-                }\n-            }\n-            catch ( IllegalAccessException ignored )\n-            {\n-                // Field is private, ignore it\n-            }\n+        if (publicSetting instanceof SettingGroup)\n+        {\n+          SettingGroup setting = (SettingGroup) publicSetting;\n+          configOptions.add(new ConfigOptions(setting));\n         }\n-        return configOptions;\n+      } catch (IllegalAccessException ignored)\n+      {\n+        // Field is private, ignore it\n+      }\n     }\n+    return configOptions;\n+  }\n \n-    /**\n-     * @return instances of all classes with loadable configuration options\n-     */\n-    static List<LoadableConfig> allConfigClasses()\n-    {\n-        return StreamSupport.stream( ServiceLoader.load( LoadableConfig.class ).spliterator(), false )\n-                .collect( Collectors.toList() );\n-    }\n+  /**\n+   * @return instances of all classes with loadable configuration options\n+   */\n+  static List<LoadableConfig> allConfigClasses()\n+  {\n+    return StreamSupport.stream(ServiceLoader.load(LoadableConfig.class).spliterator(), false)\n+        .collect(Collectors.toList());\n+  }\n \n-    /**\n-     * Collects and returns settings of all known implementors.\n-     * @return all ConfigOptions known at runtime.\n-     */\n-    static List<ConfigOptions> loadAllAvailableConfigOptions()\n-    {\n-        return StreamSupport.stream( ServiceLoader.load( LoadableConfig.class ).spliterator(), false )\n-                .map( LoadableConfig::getConfigOptions )\n-                .flatMap( List::stream )\n-                .collect( Collectors.toList() );\n-    }\n+  /**\n+   * Collects and returns settings of all known implementors.\n+   *\n+   * @return all ConfigOptions known at runtime.\n+   */\n+  static List<ConfigOptions> loadAllAvailableConfigOptions()\n+  {\n+    return StreamSupport.stream(ServiceLoader.load(LoadableConfig.class).spliterator(), false)\n+        .map(LoadableConfig::getConfigOptions)\n+        .flatMap(List::stream)\n+        .collect(Collectors.toList());\n+  }\n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1104/LoadableConfig.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1104/LoadableConfig.java\nindex 39a0f0428e8..528afac0ccf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1104/LoadableConfig.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1104/LoadableConfig.java\n@@ -103,8 +103,7 @@ public interface LoadableConfig\n      */\n     static List<LoadableConfig> allConfigClasses()\n     {\n-        return StreamSupport.stream( ServiceLoader.load( LoadableConfig.class ).spliterator(), false )\n-                .collect( Collectors.toList() );\n+        return StreamSupport.stream( ServiceLoader.load( LoadableConfig.class ).spliterator(), false ).collect( Collectors.toList() );\n     }\n \n     /**\n@@ -113,9 +112,6 @@ public interface LoadableConfig\n      */\n     static List<ConfigOptions> loadAllAvailableConfigOptions()\n     {\n-        return StreamSupport.stream( ServiceLoader.load( LoadableConfig.class ).spliterator(), false )\n-                .map( LoadableConfig::getConfigOptions )\n-                .flatMap( List::stream )\n-                .collect( Collectors.toList() );\n+        return StreamSupport.stream( ServiceLoader.load( LoadableConfig.class ).spliterator(), false ).map( LoadableConfig::getConfigOptions ).flatMap( List::stream ).collect( Collectors.toList() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}