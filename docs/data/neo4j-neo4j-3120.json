{
    "project_name": "neo4j-neo4j",
    "error_id": "3120",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "29",
                    "severity": "error",
                    "message": "'}' at column 29 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "207",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "217",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3120/CsvInputParser.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3120/CsvInputParser.java\nindex a1ceacad8c1..ba6af4ce4a8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3120/CsvInputParser.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3120/CsvInputParser.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport.input.csv;\n \n import java.io.Closeable;\n@@ -52,8 +53,8 @@ public class CsvInputParser implements Closeable\n \n     private long lineNumber;\n \n-    public CsvInputParser( CharSeeker seeker, int delimiter, IdType idType, Header header,\n-            Collector badCollector, Extractors extractors )\n+    public CsvInputParser(CharSeeker seeker, int delimiter, IdType idType, Header header,\n+                          Collector badCollector, Extractors extractors)\n     {\n         this.seeker = seeker;\n         this.delimiter = delimiter;\n@@ -63,7 +64,7 @@ public class CsvInputParser implements Closeable\n         this.stringExtractor = extractors.string();\n     }\n \n-    boolean next( InputEntityVisitor visitor ) throws IOException\n+    boolean next(InputEntityVisitor visitor) throws IOException\n     {\n         lineNumber++;\n         int i = 0;\n@@ -72,172 +73,172 @@ public class CsvInputParser implements Closeable\n         try\n         {\n             boolean doContinue = true;\n-            for ( i = 0; i < entries.length && doContinue; i++ )\n+            for (i = 0; i < entries.length && doContinue; i++)\n             {\n                 entry = entries[i];\n-                if ( !seeker.seek( mark, delimiter ) )\n+                if (!seeker.seek(mark, delimiter))\n                 {\n-                    if ( i > 0 )\n+                    if (i > 0)\n                     {\n-                        throw new UnexpectedEndOfInputException( \"Near \" + mark );\n+                        throw new UnexpectedEndOfInputException(\"Near \" + mark);\n                     }\n                     // We're just at the end\n                     return false;\n                 }\n \n-                switch ( entry.type() )\n+                switch (entry.type())\n                 {\n-                case ID:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        switch ( idType )\n+                    case ID:\n+                        if (seeker.tryExtract(mark, entry.extractor()))\n                         {\n-                        case STRING:\n-                        case INTEGER:\n-                            Object idValue = entry.extractor().value();\n-                            doContinue = visitor.id( idValue, entry.group() );\n-                            if ( entry.name() != null )\n+                            switch (idType)\n                             {\n-                                doContinue = visitor.property( entry.name(), idValue );\n+                                case STRING:\n+                                case INTEGER:\n+                                    Object idValue = entry.extractor().value();\n+                                    doContinue = visitor.id(idValue, entry.group());\n+                                    if (entry.name() != null)\n+                                    {\n+                                        doContinue = visitor.property(entry.name(), idValue);\n+                                    }\n+                                    break;\n+                                case ACTUAL:\n+                                    doContinue = visitor.id(((LongExtractor) entry.extractor()).longValue());\n+                                    break;\n+                                default:\n+                                    throw new IllegalArgumentException(idType.name());\n                             }\n-                            break;\n-                        case ACTUAL:\n-                            doContinue = visitor.id( ((LongExtractor) entry.extractor()).longValue() );\n-                            break;\n-                        default: throw new IllegalArgumentException( idType.name() );\n                         }\n-                    }\n-                    break;\n-                case START_ID:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        switch ( idType )\n+                        break;\n+                    case START_ID:\n+                        if (seeker.tryExtract(mark, entry.extractor()))\n                         {\n-                        case STRING:\n-                            doContinue = visitor.startId( entry.extractor().value(), entry.group() );\n-                            break;\n-                        case INTEGER:\n-                            doContinue = visitor.startId( entry.extractor().value(), entry.group() );\n-                            break;\n-                        case ACTUAL:\n-                            doContinue = visitor.startId( ((LongExtractor) entry.extractor()).longValue() );\n-                            break;\n-                        default: throw new IllegalArgumentException( idType.name() );\n+                            switch (idType)\n+                            {\n+                                case STRING:\n+                                    doContinue = visitor.startId(entry.extractor().value(), entry.group());\n+                                    break;\n+                                case INTEGER:\n+                                    doContinue = visitor.startId(entry.extractor().value(), entry.group());\n+                                    break;\n+                                case ACTUAL:\n+                                    doContinue = visitor.startId(((LongExtractor) entry.extractor()).longValue());\n+                                    break;\n+                                default:\n+                                    throw new IllegalArgumentException(idType.name());\n+                            }\n                         }\n-                    }\n-                    break;\n-                case END_ID:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        switch ( idType )\n+                        break;\n+                    case END_ID:\n+                        if (seeker.tryExtract(mark, entry.extractor()))\n                         {\n-                        case STRING:\n-                            doContinue = visitor.endId( entry.extractor().value(), entry.group() );\n-                            break;\n-                        case INTEGER:\n-                            doContinue = visitor.endId( entry.extractor().value(), entry.group() );\n-                            break;\n-                        case ACTUAL:\n-                            doContinue = visitor.endId( ((LongExtractor) entry.extractor()).longValue() );\n-                            break;\n-                        default: throw new IllegalArgumentException( idType.name() );\n+                            switch (idType)\n+                            {\n+                                case STRING:\n+                                    doContinue = visitor.endId(entry.extractor().value(), entry.group());\n+                                    break;\n+                                case INTEGER:\n+                                    doContinue = visitor.endId(entry.extractor().value(), entry.group());\n+                                    break;\n+                                case ACTUAL:\n+                                    doContinue = visitor.endId(((LongExtractor) entry.extractor()).longValue());\n+                                    break;\n+                                default:\n+                                    throw new IllegalArgumentException(idType.name());\n+                            }\n                         }\n-                    }\n-                    break;\n-                 case TYPE:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        doContinue = visitor.type( (String) entry.extractor().value() );\n-                    }\n-                    break;\n-                case PROPERTY:\n-                    if ( seeker.tryExtract( mark, entry.extractor(), entry.optionalParameter() ) )\n-                    {\n-                        // TODO since PropertyStore#encodeValue takes Object there's no point splitting up\n-                        // into different primitive types\n-                        Object value = entry.extractor().value();\n-                        if ( !isEmptyArray( value ) )\n+                        break;\n+                    case TYPE:\n+                        if (seeker.tryExtract(mark, entry.extractor()))\n                         {\n-                            doContinue = visitor.property( entry.name(), value );\n+                            doContinue = visitor.type((String) entry.extractor().value());\n                         }\n-                    }\n-                    break;\n-                case LABEL:\n-                    if ( seeker.tryExtract( mark, entry.extractor() ) )\n-                    {\n-                        Object labelsValue = entry.extractor().value();\n-                        if ( labelsValue.getClass().isArray() )\n+                        break;\n+                    case PROPERTY:\n+                        if (seeker.tryExtract(mark, entry.extractor(), entry.optionalParameter()))\n                         {\n-                            doContinue = visitor.labels( (String[]) labelsValue );\n+                            // TODO since PropertyStore#encodeValue takes Object there's no point splitting up\n+                            // into different primitive types\n+                            Object value = entry.extractor().value();\n+                            if (!isEmptyArray(value))\n+                            {\n+                                doContinue = visitor.property(entry.name(), value);\n+                            }\n                         }\n-                        else\n+                        break;\n+                    case LABEL:\n+                        if (seeker.tryExtract(mark, entry.extractor()))\n                         {\n-                            doContinue = visitor.labels( new String[] {(String) labelsValue} );\n+                            Object labelsValue = entry.extractor().value();\n+                            if (labelsValue.getClass().isArray())\n+                            {\n+                                doContinue = visitor.labels((String[]) labelsValue);\n+                            } else\n+                            {\n+                                doContinue = visitor.labels(new String[] {(String) labelsValue});\n+                            }\n                         }\n-                    }\n-                    break;\n-                case IGNORE:\n-                    break;\n-                default:\n-                    throw new IllegalArgumentException( entry.type().toString() );\n+                        break;\n+                    case IGNORE:\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(entry.type().toString());\n                 }\n \n-                if ( mark.isEndOfLine() )\n+                if (mark.isEndOfLine())\n                 {\n                     // We're at the end of the line, break and return an entity with what we have.\n                     break;\n                 }\n             }\n \n-            while ( !mark.isEndOfLine() )\n+            while (!mark.isEndOfLine())\n             {\n-                seeker.seek( mark, delimiter );\n-                if ( doContinue )\n+                seeker.seek(mark, delimiter);\n+                if (doContinue)\n                 {\n-                    seeker.tryExtract( mark, stringExtractor, entry.optionalParameter() );\n+                    seeker.tryExtract(mark, stringExtractor, entry.optionalParameter());\n                     badCollector.collectExtraColumns(\n-                            seeker.sourceDescription(), lineNumber, stringExtractor.value() );\n+                      seeker.sourceDescription(), lineNumber, stringExtractor.value());\n                 }\n             }\n             visitor.endOfEntity();\n             return true;\n-        }\n-        catch ( final RuntimeException e )\n+        } catch (final RuntimeException e)\n         {\n             String stringValue = null;\n             try\n             {\n-                Extractors extractors = new Extractors( '?' );\n-                if ( seeker.tryExtract( mark, extractors.string(), entry.optionalParameter() ) )\n+                Extractors extractors = new Extractors('?');\n+                if (seeker.tryExtract(mark, extractors.string(), entry.optionalParameter()))\n                 {\n                     stringValue = extractors.string().value();\n                 }\n-            }\n-            catch ( Exception e1 )\n+            } catch (Exception e1)\n             {   // OK\n             }\n \n-            String message = format( \"ERROR in input\" +\n-                    \"%n  data source: %s\" +\n-                    \"%n  in field: %s\" +\n-                    \"%n  for header: %s\" +\n-                    \"%n  raw field value: %s\" +\n-                    \"%n  original error: %s\",\n-                    seeker, entry + \":\" + (i + 1), header,\n-                    stringValue != null ? stringValue : \"??\",\n-                    e.getMessage() );\n+            String message = format(\"ERROR in input\" +\n+                \"%n  data source: %s\" +\n+                \"%n  in field: %s\" +\n+                \"%n  for header: %s\" +\n+                \"%n  raw field value: %s\" +\n+                \"%n  original error: %s\",\n+              seeker, entry + \":\" + (i + 1), header,\n+              stringValue != null ? stringValue : \"??\",\n+              e.getMessage());\n \n-            if ( e instanceof InputException )\n+            if (e instanceof InputException)\n             {\n-                throw Exceptions.withMessage( e, message );\n+                throw Exceptions.withMessage(e, message);\n             }\n-            throw new InputException( message, e );\n+            throw new InputException(message, e);\n         }\n     }\n \n-    private static boolean isEmptyArray( Object value )\n+    private static boolean isEmptyArray(Object value)\n     {\n-        return value.getClass().isArray() && Array.getLength( value ) == 0;\n+        return value.getClass().isArray() && Array.getLength(value) == 0;\n     }\n \n     @Override\n",
            "diff_size": 150
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}