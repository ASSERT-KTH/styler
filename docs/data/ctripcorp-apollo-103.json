{
    "project_name": "ctripcorp-apollo",
    "error_id": "103",
    "information": {
        "errors": [
            {
                "line": "17",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " *\n */\npackage com.ctrip.framework.apollo.adminservice.controller;\n\nimport com.ctrip.framework.apollo.biz.entity.Item;\nimport com.ctrip.framework.apollo.biz.repository.ItemRepository;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/styler/103/ItemSetControllerTest.java\nindex 6087dbcffaa..4d19706ef66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/styler/103/ItemSetControllerTest.java\n@@ -14,6 +14,7 @@\n  * limitations under the License.\n  *\n  */\n+\n package com.ctrip.framework.apollo.adminservice.controller;\n \n import com.ctrip.framework.apollo.biz.entity.Item;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/intellij/103/ItemSetControllerTest.java\nindex 6087dbcffaa..dcf4bb8da90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/intellij/103/ItemSetControllerTest.java\n@@ -14,6 +14,7 @@\n  * limitations under the License.\n  *\n  */\n+\n package com.ctrip.framework.apollo.adminservice.controller;\n \n import com.ctrip.framework.apollo.biz.entity.Item;\n@@ -65,7 +66,7 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     itemSet.setDataChangeLastModifiedBy(\"created\");\n     RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n     createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n+\n     int createdSize = 3;\n     for (int i = 0; i < createdSize; i++) {\n       ItemDTO item = new ItemDTO();\n@@ -114,7 +115,7 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     createChangeSet.setDataChangeLastModifiedBy(\"created\");\n     RestTemplate createdRestTemplate = (new TestRestTemplate()).getRestTemplate();\n     createdRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n+\n     int createdSize = 3;\n     for (int i = 0; i < createdSize; i++) {\n       ItemDTO item = new ItemDTO();\n@@ -141,7 +142,7 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n \n     RestTemplate updatedRestTemplate = (new TestRestTemplate()).getRestTemplate();\n     updatedRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n+\n     int updatedSize = 2;\n     for (int i = 0; i < updatedSize; i++) {\n       items[i].setValue(\"updated_value_\" + i);\n@@ -188,7 +189,7 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     createChangeSet.setDataChangeLastModifiedBy(\"created\");\n     RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n     createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n+\n     int createdSize = 3;\n     for (int i = 0; i < createdSize; i++) {\n       ItemDTO item = new ItemDTO();\n@@ -214,7 +215,7 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n     RestTemplate deletedTemplate = (new TestRestTemplate()).getRestTemplate();\n     deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n+\n     int deletedSize = 1;\n     for (int i = 0; i < deletedSize; i++) {\n       items[i].setValue(\"deleted_value_\" + i);\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 3, indentation should be the same level as line 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "16",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "column": "99",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "column": "103",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "123",
                    "column": "103",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "150",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "155",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "162",
                    "column": "99",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "163",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "181",
                    "column": "99",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "182",
                    "severity": "warning",
                    "message": "'for' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/naturalize/103/ItemSetControllerTest.java\nindex 6087dbcffaa..6316cc89e73 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/naturalize/103/ItemSetControllerTest.java\n@@ -13,8 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  *\n- */\n-package com.ctrip.framework.apollo.adminservice.controller;\n+ */package com.ctrip.framework.apollo.adminservice.controller;\n \n import com.ctrip.framework.apollo.biz.entity.Item;\n import com.ctrip.framework.apollo.biz.repository.ItemRepository;\n@@ -48,26 +47,20 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     String appId = \"someAppId\";\n     AppDTO app =\n         restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n-\n-    ClusterDTO cluster = restTemplate.getForObject(\n+ClusterDTO cluster = restTemplate.getForObject(\n         \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n         ClusterDTO.class);\n-\n-    NamespaceDTO namespace =\n-        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n-            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n-\n-    Assert.assertEquals(\"someAppId\", app.getAppId());\n+NamespaceDTO namespace =\n+        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n+Assert.assertEquals(\"someAppId\", app.getAppId());\n     Assert.assertEquals(\"default\", cluster.getName());\n     Assert.assertEquals(\"application\", namespace.getNamespaceName());\n \n     ItemChangeSets itemSet = new ItemChangeSets();\n     itemSet.setDataChangeLastModifiedBy(\"created\");\n     RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n-    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n-    int createdSize = 3;\n-    for (int i = 0; i < createdSize; i++) {\n+    createdTemplate.setMessageConverters(restTemplate.getMessageConverters()); int createdSize = 3;\n+for (int i = 0; i < createdSize; i++) {\n       ItemDTO item = new ItemDTO();\n       item.setNamespaceId(namespace.getId());\n       item.setKey(\"key_\" + i);\n@@ -77,9 +70,7 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n \n     ResponseEntity<Void> response =\n         createdTemplate.postForEntity(\n-            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n-                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-            itemSet, Void.class);\n+            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", itemSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n     List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n     Assert.assertEquals(createdSize, items.size());\n@@ -97,26 +88,20 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     String appId = \"someAppId\";\n     AppDTO app =\n         restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n-\n-    ClusterDTO cluster = restTemplate.getForObject(\n+ClusterDTO cluster = restTemplate.getForObject(\n         \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n         ClusterDTO.class);\n-\n-    NamespaceDTO namespace =\n-        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n-            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n-\n-    Assert.assertEquals(\"someAppId\", app.getAppId());\n+NamespaceDTO namespace =\n+        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n+Assert.assertEquals(\"someAppId\", app.getAppId());\n     Assert.assertEquals(\"default\", cluster.getName());\n     Assert.assertEquals(\"application\", namespace.getNamespaceName());\n \n     ItemChangeSets createChangeSet = new ItemChangeSets();\n     createChangeSet.setDataChangeLastModifiedBy(\"created\");\n     RestTemplate createdRestTemplate = (new TestRestTemplate()).getRestTemplate();\n-    createdRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n-    int createdSize = 3;\n-    for (int i = 0; i < createdSize; i++) {\n+    createdRestTemplate.setMessageConverters(restTemplate.getMessageConverters()); int createdSize = 3;\n+for (int i = 0; i < createdSize; i++) {\n       ItemDTO item = new ItemDTO();\n       item.setNamespaceId(namespace.getId());\n       item.setKey(\"key_\" + i);\n@@ -125,33 +110,24 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     }\n \n     ResponseEntity<Void> response = createdRestTemplate.postForEntity(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n-            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-        createChangeSet, Void.class);\n+        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", createChangeSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n \n     ItemDTO[] items =\n         createdRestTemplate.getForObject(\n-            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n-                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n-            ItemDTO[].class);\n-\n-    ItemChangeSets updateChangeSet = new ItemChangeSets();\n+            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\", ItemDTO[].class);\n+ItemChangeSets updateChangeSet = new ItemChangeSets();\n     updateChangeSet.setDataChangeLastModifiedBy(\"updated\");\n \n     RestTemplate updatedRestTemplate = (new TestRestTemplate()).getRestTemplate();\n-    updatedRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n-    int updatedSize = 2;\n-    for (int i = 0; i < updatedSize; i++) {\n+    updatedRestTemplate.setMessageConverters(restTemplate.getMessageConverters()); int updatedSize = 2;\n+for (int i = 0; i < updatedSize; i++) {\n       items[i].setValue(\"updated_value_\" + i);\n       updateChangeSet.addUpdateItem(items[i]);\n     }\n \n     response = updatedRestTemplate.postForEntity(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n-            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-        updateChangeSet, Void.class);\n+        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", updateChangeSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n     List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n     Assert.assertEquals(createdSize, savedItems.size());\n@@ -171,26 +147,20 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     String appId = \"someAppId\";\n     AppDTO app =\n         restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n-\n-    ClusterDTO cluster = restTemplate.getForObject(\n+ClusterDTO cluster = restTemplate.getForObject(\n         \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n         ClusterDTO.class);\n-\n-    NamespaceDTO namespace =\n-        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n-            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n-\n-    Assert.assertEquals(\"someAppId\", app.getAppId());\n+NamespaceDTO namespace =\n+        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n+Assert.assertEquals(\"someAppId\", app.getAppId());\n     Assert.assertEquals(\"default\", cluster.getName());\n     Assert.assertEquals(\"application\", namespace.getNamespaceName());\n \n     ItemChangeSets createChangeSet = new ItemChangeSets();\n     createChangeSet.setDataChangeLastModifiedBy(\"created\");\n     RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n-    createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n-    int createdSize = 3;\n-    for (int i = 0; i < createdSize; i++) {\n+    createdTemplate.setMessageConverters(restTemplate.getMessageConverters()); int createdSize = 3;\n+for (int i = 0; i < createdSize; i++) {\n       ItemDTO item = new ItemDTO();\n       item.setNamespaceId(namespace.getId());\n       item.setKey(\"key_\" + i);\n@@ -199,32 +169,23 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     }\n \n     ResponseEntity<Void> response = createdTemplate.postForEntity(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n-            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-        createChangeSet, Void.class);\n+        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", createChangeSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n \n     ItemDTO[] items =\n         restTemplate.getForObject(\n-            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n-                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n-            ItemDTO[].class);\n-\n-    ItemChangeSets deleteChangeSet = new ItemChangeSets();\n+            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\", ItemDTO[].class);\n+ItemChangeSets deleteChangeSet = new ItemChangeSets();\n     deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n     RestTemplate deletedTemplate = (new TestRestTemplate()).getRestTemplate();\n-    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n-    int deletedSize = 1;\n-    for (int i = 0; i < deletedSize; i++) {\n+    deletedTemplate.setMessageConverters(restTemplate.getMessageConverters()); int deletedSize = 1;\n+for (int i = 0; i < deletedSize; i++) {\n       items[i].setValue(\"deleted_value_\" + i);\n       deleteChangeSet.addDeleteItem(items[i]);\n     }\n \n     response = deletedTemplate.postForEntity(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n-            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-        deleteChangeSet, Void.class);\n+        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", deleteChangeSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n     List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n     Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n@@ -234,4 +195,4 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n     Assert.assertNotNull(item0.getDataChangeCreatedTime());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 72
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "17",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "'ClusterDTO' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "'ClusterDTO' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "'ClusterDTO' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/codebuff/103/ItemSetControllerTest.java\nindex 6087dbcffaa..da15317dde7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/codebuff/103/ItemSetControllerTest.java\n@@ -23,7 +23,6 @@ import com.ctrip.framework.apollo.common.dto.ClusterDTO;\n import com.ctrip.framework.apollo.common.dto.ItemChangeSets;\n import com.ctrip.framework.apollo.common.dto.ItemDTO;\n import com.ctrip.framework.apollo.common.dto.NamespaceDTO;\n-\n import org.junit.Assert;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -33,39 +32,29 @@ import org.springframework.http.ResponseEntity;\n import org.springframework.test.context.jdbc.Sql;\n import org.springframework.test.context.jdbc.Sql.ExecutionPhase;\n import org.springframework.web.client.RestTemplate;\n-\n import java.util.List;\n \n+\n public class ItemSetControllerTest extends AbstractControllerTest {\n \n-  @Autowired\n-  ItemRepository itemRepository;\n+  @Autowired ItemRepository itemRepository;\n \n   @Test\n   @Sql(scripts = \"/controller/test-itemset.sql\", executionPhase = ExecutionPhase.BEFORE_TEST_METHOD)\n   @Sql(scripts = \"/controller/cleanup.sql\", executionPhase = ExecutionPhase.AFTER_TEST_METHOD)\n   public void testItemSetCreated() {\n     String appId = \"someAppId\";\n-    AppDTO app =\n-        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n-\n-    ClusterDTO cluster = restTemplate.getForObject(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n-        ClusterDTO.class);\n-\n-    NamespaceDTO namespace =\n-        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n-            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n-\n+    AppDTO app = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n+    ClusterDTO cluster = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n+      ClusterDTO.class);\n+    NamespaceDTO namespace = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n     Assert.assertEquals(\"someAppId\", app.getAppId());\n     Assert.assertEquals(\"default\", cluster.getName());\n     Assert.assertEquals(\"application\", namespace.getNamespaceName());\n-\n     ItemChangeSets itemSet = new ItemChangeSets();\n     itemSet.setDataChangeLastModifiedBy(\"created\");\n     RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n     createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n     int createdSize = 3;\n     for (int i = 0; i < createdSize; i++) {\n       ItemDTO item = new ItemDTO();\n@@ -74,12 +63,7 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n       item.setValue(\"created_value_\" + i);\n       itemSet.addCreateItem(item);\n     }\n-\n-    ResponseEntity<Void> response =\n-        createdTemplate.postForEntity(\n-            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n-                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-            itemSet, Void.class);\n+    ResponseEntity<Void> response = createdTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", itemSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n     List<Item> items = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n     Assert.assertEquals(createdSize, items.size());\n@@ -95,26 +79,17 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n   @Sql(scripts = \"/controller/cleanup.sql\", executionPhase = ExecutionPhase.AFTER_TEST_METHOD)\n   public void testItemSetUpdated() {\n     String appId = \"someAppId\";\n-    AppDTO app =\n-        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n-\n-    ClusterDTO cluster = restTemplate.getForObject(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n-        ClusterDTO.class);\n-\n-    NamespaceDTO namespace =\n-        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n-            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n-\n+    AppDTO app = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n+    ClusterDTO cluster = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n+      ClusterDTO.class);\n+    NamespaceDTO namespace = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n     Assert.assertEquals(\"someAppId\", app.getAppId());\n     Assert.assertEquals(\"default\", cluster.getName());\n     Assert.assertEquals(\"application\", namespace.getNamespaceName());\n-\n     ItemChangeSets createChangeSet = new ItemChangeSets();\n     createChangeSet.setDataChangeLastModifiedBy(\"created\");\n     RestTemplate createdRestTemplate = (new TestRestTemplate()).getRestTemplate();\n     createdRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n     int createdSize = 3;\n     for (int i = 0; i < createdSize; i++) {\n       ItemDTO item = new ItemDTO();\n@@ -123,35 +98,19 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n       item.setValue(\"created_value_\" + i);\n       createChangeSet.addCreateItem(item);\n     }\n-\n-    ResponseEntity<Void> response = createdRestTemplate.postForEntity(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n-            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-        createChangeSet, Void.class);\n+    ResponseEntity<Void> response = createdRestTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", createChangeSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n-\n-    ItemDTO[] items =\n-        createdRestTemplate.getForObject(\n-            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n-                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n-            ItemDTO[].class);\n-\n+    ItemDTO[] items = createdRestTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\", ItemDTO[].class);\n     ItemChangeSets updateChangeSet = new ItemChangeSets();\n     updateChangeSet.setDataChangeLastModifiedBy(\"updated\");\n-\n     RestTemplate updatedRestTemplate = (new TestRestTemplate()).getRestTemplate();\n     updatedRestTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n     int updatedSize = 2;\n     for (int i = 0; i < updatedSize; i++) {\n-      items[i].setValue(\"updated_value_\" + i);\n-      updateChangeSet.addUpdateItem(items[i]);\n+      items[ i].setValue(\"updated_value_\" + i);\n+      updateChangeSet.addUpdateItem(items[ i]);\n     }\n-\n-    response = updatedRestTemplate.postForEntity(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n-            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-        updateChangeSet, Void.class);\n+    response = updatedRestTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", updateChangeSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n     List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n     Assert.assertEquals(createdSize, savedItems.size());\n@@ -169,26 +128,17 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n   @Sql(scripts = \"/controller/cleanup.sql\", executionPhase = ExecutionPhase.AFTER_TEST_METHOD)\n   public void testItemSetDeleted() {\n     String appId = \"someAppId\";\n-    AppDTO app =\n-        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n-\n-    ClusterDTO cluster = restTemplate.getForObject(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n-        ClusterDTO.class);\n-\n-    NamespaceDTO namespace =\n-        restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId()\n-            + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n-\n+    AppDTO app = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + appId, AppDTO.class);\n+    ClusterDTO cluster = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/default\",\n+      ClusterDTO.class);\n+    NamespaceDTO namespace = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/application\", NamespaceDTO.class);\n     Assert.assertEquals(\"someAppId\", app.getAppId());\n     Assert.assertEquals(\"default\", cluster.getName());\n     Assert.assertEquals(\"application\", namespace.getNamespaceName());\n-\n     ItemChangeSets createChangeSet = new ItemChangeSets();\n     createChangeSet.setDataChangeLastModifiedBy(\"created\");\n     RestTemplate createdTemplate = (new TestRestTemplate()).getRestTemplate();\n     createdTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n     int createdSize = 3;\n     for (int i = 0; i < createdSize; i++) {\n       ItemDTO item = new ItemDTO();\n@@ -197,34 +147,19 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n       item.setValue(\"created_value_\" + i);\n       createChangeSet.addCreateItem(item);\n     }\n-\n-    ResponseEntity<Void> response = createdTemplate.postForEntity(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n-            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-        createChangeSet, Void.class);\n+    ResponseEntity<Void> response = createdTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", createChangeSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n-\n-    ItemDTO[] items =\n-        restTemplate.getForObject(\n-            \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\"\n-                + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\",\n-            ItemDTO[].class);\n-\n+    ItemDTO[] items = restTemplate.getForObject(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/items\", ItemDTO[].class);\n     ItemChangeSets deleteChangeSet = new ItemChangeSets();\n     deleteChangeSet.setDataChangeLastModifiedBy(\"deleted\");\n     RestTemplate deletedTemplate = (new TestRestTemplate()).getRestTemplate();\n     deletedTemplate.setMessageConverters(restTemplate.getMessageConverters());\n-    \n     int deletedSize = 1;\n     for (int i = 0; i < deletedSize; i++) {\n-      items[i].setValue(\"deleted_value_\" + i);\n-      deleteChangeSet.addDeleteItem(items[i]);\n+      items[ i].setValue(\"deleted_value_\" + i);\n+      deleteChangeSet.addDeleteItem(items[ i]);\n     }\n-\n-    response = deletedTemplate.postForEntity(\n-        \"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName()\n-            + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\",\n-        deleteChangeSet, Void.class);\n+    response = deletedTemplate.postForEntity(\"http://localhost:\" + port + \"/apps/\" + app.getAppId() + \"/clusters/\" + cluster.getName() + \"/namespaces/\" + namespace.getNamespaceName() + \"/itemset\", deleteChangeSet, Void.class);\n     Assert.assertEquals(HttpStatus.OK, response.getStatusCode());\n     List<Item> savedItems = itemRepository.findByNamespaceIdOrderByLineNumAsc(namespace.getId());\n     Assert.assertEquals(createdSize - deletedSize, savedItems.size());\n@@ -234,4 +169,4 @@ public class ItemSetControllerTest extends AbstractControllerTest {\n     Assert.assertEquals(\"created\", item0.getDataChangeCreatedBy());\n     Assert.assertNotNull(item0.getDataChangeCreatedTime());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 92
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/styler_random/103/ItemSetControllerTest.java\nindex 6087dbcffaa..e86d1900aef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/styler_random/103/ItemSetControllerTest.java\n@@ -14,6 +14,8 @@\n  * limitations under the License.\n  *\n  */\n+\n+\n package com.ctrip.framework.apollo.adminservice.controller;\n \n import com.ctrip.framework.apollo.biz.entity.Item;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/styler_three_grams/103/ItemSetControllerTest.java\nindex 6087dbcffaa..4d19706ef66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/errored/1/103/ItemSetControllerTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ctripcorp-apollo/styler_three_grams/103/ItemSetControllerTest.java\n@@ -14,6 +14,7 @@\n  * limitations under the License.\n  *\n  */\n+\n package com.ctrip.framework.apollo.adminservice.controller;\n \n import com.ctrip.framework.apollo.biz.entity.Item;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}