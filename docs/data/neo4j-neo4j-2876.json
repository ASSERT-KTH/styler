{
    "project_name": "neo4j-neo4j",
    "error_id": "2876",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "110",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2876/DetachedCheckpointAppender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2876/DetachedCheckpointAppender.java\nindex ce0fc955603..28c3d240bd1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2876/DetachedCheckpointAppender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2876/DetachedCheckpointAppender.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log.checkpoint;\n \n import java.io.IOException;\n@@ -61,59 +62,58 @@ public class DetachedCheckpointAppender extends LifecycleAdapter implements Chec\n     private PhysicalLogVersionedStoreChannel channel;\n     private LogVersionRepository logVersionRepository;\n \n-    public DetachedCheckpointAppender( TransactionLogChannelAllocator channelAllocator, TransactionLogFilesContext context, CheckpointFile checkpointFile,\n-            LogRotation checkpointRotation )\n+    public DetachedCheckpointAppender(TransactionLogChannelAllocator channelAllocator, TransactionLogFilesContext context, CheckpointFile checkpointFile,\n+                                      LogRotation checkpointRotation)\n     {\n         this.checkpointFile = checkpointFile;\n         this.context = context;\n-        this.pageCacheTracer = requireNonNull( context.getDatabaseTracers().getPageCacheTracer() );\n-        this.channelAllocator = requireNonNull( channelAllocator );\n-        this.databaseHealth = requireNonNull( context.getDatabaseHealth() );\n-        this.logRotation = requireNonNull( checkpointRotation );\n+        this.pageCacheTracer = requireNonNull(context.getDatabaseTracers().getPageCacheTracer());\n+        this.channelAllocator = requireNonNull(channelAllocator);\n+        this.databaseHealth = requireNonNull(context.getDatabaseHealth());\n+        this.logRotation = requireNonNull(checkpointRotation);\n     }\n \n     @Override\n     public void start() throws IOException\n     {\n         this.storeId = context.getStoreId();\n-        logVersionRepository = requireNonNull( context.getLogVersionRepository() );\n-        channel = channelAllocator.createLogChannel( logVersionRepository.getCheckpointLogVersion(), context::getLastCommittedTransactionId );\n-        channel.position( channel.size() );\n-        buffer = new NativeScopedBuffer( kibiBytes( 1 ), context.getMemoryTracker() );\n-        writer = new PositionAwarePhysicalFlushableChecksumChannel( channel, buffer );\n-        checkpointWriter = new DetachedCheckpointLogEntryWriter( writer );\n+        logVersionRepository = requireNonNull(context.getLogVersionRepository());\n+        channel = channelAllocator.createLogChannel(logVersionRepository.getCheckpointLogVersion(), context::getLastCommittedTransactionId);\n+        channel.position(channel.size());\n+        buffer = new NativeScopedBuffer(kibiBytes(1), context.getMemoryTracker());\n+        writer = new PositionAwarePhysicalFlushableChecksumChannel(channel, buffer);\n+        checkpointWriter = new DetachedCheckpointLogEntryWriter(writer);\n     }\n \n     @Override\n     public void shutdown() throws Exception\n     {\n-        IOUtils.closeAll( writer, buffer, channel );\n+        IOUtils.closeAll(writer, buffer, channel);\n         writer = null;\n         buffer = null;\n         channel = null;\n     }\n \n     @Override\n-    public void checkPoint( LogCheckPointEvent logCheckPointEvent, LogPosition logPosition, Instant checkpointTime, String reason ) throws IOException\n+    public void checkPoint(LogCheckPointEvent logCheckPointEvent, LogPosition logPosition, Instant checkpointTime, String reason) throws IOException\n     {\n-        synchronized ( checkpointFile )\n+        synchronized (checkpointFile)\n         {\n             try\n             {\n-                databaseHealth.assertHealthy( IOException.class );\n+                databaseHealth.assertHealthy(IOException.class);\n                 var logPositionBeforeCheckpoint = writer.getCurrentPosition();\n-                checkpointWriter.writeCheckPointEntry( logPosition, checkpointTime, storeId, reason );\n+                checkpointWriter.writeCheckPointEntry(logPosition, checkpointTime, storeId, reason);\n                 var logPositionAfterCheckpoint = writer.getCurrentPosition();\n-                logCheckPointEvent.appendToLogFile( logPositionBeforeCheckpoint, logPositionAfterCheckpoint );\n-                forceAfterAppend( logCheckPointEvent );\n-            }\n-            catch ( Throwable cause )\n+                logCheckPointEvent.appendToLogFile(logPositionBeforeCheckpoint, logPositionAfterCheckpoint);\n+                forceAfterAppend(logCheckPointEvent);\n+            } catch (Throwable cause)\n             {\n-                databaseHealth.panic( cause );\n+                databaseHealth.panic(cause);\n                 throw cause;\n             }\n         }\n-        logRotation.rotateLogIfNeeded( logCheckPointEvent );\n+        logRotation.rotateLogIfNeeded(logCheckPointEvent);\n     }\n \n     public long getCurrentPosition()\n@@ -121,9 +121,9 @@ public class DetachedCheckpointAppender extends LifecycleAdapter implements Chec\n         return channel.position();\n     }\n \n-    private void forceAfterAppend( LogCheckPointEvent logCheckPointEvent ) throws IOException\n+    private void forceAfterAppend(LogCheckPointEvent logCheckPointEvent) throws IOException\n     {\n-        try ( LogForceEvent logForceEvent = logCheckPointEvent.beginLogForce() )\n+        try (LogForceEvent logForceEvent = logCheckPointEvent.beginLogForce())\n         {\n             writer.prepareForFlush().flush();\n         }\n@@ -131,19 +131,19 @@ public class DetachedCheckpointAppender extends LifecycleAdapter implements Chec\n \n     public Path rotate() throws IOException\n     {\n-        try ( var cursorTracer = pageCacheTracer.createPageCursorTracer( CHECKPOINT_LOG_FILE_ROTATION_TAG ) )\n+        try (var cursorTracer = pageCacheTracer.createPageCursorTracer(CHECKPOINT_LOG_FILE_ROTATION_TAG))\n         {\n-            channel = rotateChannel( channel, cursorTracer );\n-            writer.setChannel( channel );\n+            channel = rotateChannel(channel, cursorTracer);\n+            writer.setChannel(channel);\n             return channel.getPath();\n         }\n     }\n \n-    private PhysicalLogVersionedStoreChannel rotateChannel( PhysicalLogVersionedStoreChannel channel, PageCursorTracer cursorTracer ) throws IOException\n+    private PhysicalLogVersionedStoreChannel rotateChannel(PhysicalLogVersionedStoreChannel channel, PageCursorTracer cursorTracer) throws IOException\n     {\n-        long newLogVersion = logVersionRepository.incrementAndGetCheckpointLogVersion( cursorTracer );\n+        long newLogVersion = logVersionRepository.incrementAndGetCheckpointLogVersion(cursorTracer);\n         writer.prepareForFlush().flush();\n-        var newChannel = channelAllocator.createLogChannel( newLogVersion, context::committingTransactionId );\n+        var newChannel = channelAllocator.createLogChannel(newLogVersion, context::committingTransactionId);\n         channel.close();\n         return newChannel;\n     }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2876/DetachedCheckpointAppender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2876/DetachedCheckpointAppender.java\nindex ce0fc955603..3a283abd4dd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2876/DetachedCheckpointAppender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2876/DetachedCheckpointAppender.java\n@@ -147,4 +147,4 @@ public class DetachedCheckpointAppender extends LifecycleAdapter implements Chec\n         channel.close();\n         return newChannel;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}