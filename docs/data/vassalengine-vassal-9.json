{
    "project_name": "vassalengine-vassal",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "663",
                "column": "7",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 6, expected level should be 8.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "      GamePiece p = i.next();\n      if (p instanceof ImageSearchTarget)\n      ((ImageSearchTarget)p).addImageNamesRecursively(s);\n    }\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/9/Stack.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler/9/Stack.java\nindex d14825ff120..597ae0de723 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/9/Stack.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler/9/Stack.java\n@@ -660,7 +660,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n     for (Iterator<GamePiece> i = getPiecesIterator(); i.hasNext(); ) {\n       GamePiece p = i.next();\n       if (p instanceof ImageSearchTarget)\n-      ((ImageSearchTarget)p).addImageNamesRecursively(s);\n+        ((ImageSearchTarget)p).addImageNamesRecursively(s);\n     }\n   }\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/9/Stack.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/intellij/9/Stack.java\nindex d14825ff120..c2d5b718f50 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/9/Stack.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/intellij/9/Stack.java\n@@ -15,6 +15,7 @@\n  * License along with this library; if not, copies are available\n  * at http://www.opensource.org.\n  */\n+\n package VASSAL.counters;\n \n import VASSAL.search.AbstractImageFinder;\n@@ -79,8 +80,8 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n \n   /**\n    * @return an Enumeration of the pieces in the stack, from the bottom up This\n-   *         is a clone of the contents so add/remove operations during read\n-   *         won't affect it.\n+   * is a clone of the contents so add/remove operations during read\n+   * won't affect it.\n    * @deprecated use {@link #asList()}\n    */\n   @Deprecated(since = \"2020-08-06\", forRemoval = true)\n@@ -127,6 +128,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n    * Returns pieces in the order in which they are visible to the player --\n    * topmost first In other words, selected pieces first, then unselected pieces\n    * from the top to the bottom.\n+   *\n    * @deprecated Use {@link #getPiecesInVisibleOrderIterator()}\n    */\n   @Deprecated(since = \"2020-08-06\", forRemoval = true)\n@@ -156,6 +158,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n \n   /**\n    * Perform some action on a GamePiece that has just been removed this Stack\n+   *\n    * @param p GamePiece\n    * @return a {@link Command} that performs the equivalent action when executed\n    */\n@@ -166,8 +169,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n   protected void insertPieceAt(GamePiece p, int index) {\n     if (index < 0) {\n       index = 0;\n-    }\n-    else if (index > pieceCount) {\n+    } else if (index > pieceCount) {\n       index = pieceCount;\n     }\n \n@@ -226,8 +228,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n   public void insertChild(GamePiece child, int index) {\n     if (child.getParent() != null) {\n       child.getParent().remove(child);\n-    }\n-    else if (child.getMap() != null) {\n+    } else if (child.getMap() != null) {\n       child.getMap().removePiece(child);\n     }\n     child.setParent(this);\n@@ -240,6 +241,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n \n   /**\n    * Return the number of pieces that could possible be drawn in the stack, regardless of visibility to any particular player\n+   *\n    * @return Piece Count\n    */\n   public int getMaximumVisiblePieceCount() {\n@@ -250,7 +252,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n    * Inserts a child GamePiece at a given index. If the child piece already\n    * belongs to this Stack, it will be repositioned to the given index.\n    *\n-   * @param p GamePiece to insert\n+   * @param p   GamePiece to insert\n    * @param pos Insert position\n    */\n   public void insert(GamePiece p, int pos) {\n@@ -265,20 +267,19 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n       if (pos > index) {\n         insertPieceAt(p, pos + 1);\n         removePieceAt(index);\n-      }\n-      else {\n+      } else {\n         removePieceAt(index);\n         insertPieceAt(p, pos);\n       }\n       setExpanded(origExpanded);\n-    }\n-    else {\n+    } else {\n       insertChild(p, pos);\n     }\n   }\n \n   /**\n    * Perform some action on a GamePiece that has just been added to this Stack\n+   *\n    * @param p Game Piece\n    * @return a {@link Command} that performs the equivalent action when executed\n    */\n@@ -298,8 +299,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n   public void draw(Graphics g, int x, int y, Component obs, double zoom) {\n     if (obs instanceof Map.View) {\n       ((Map.View) obs).getMap().getStackMetrics().draw(this, g, x, y, obs, zoom);\n-    }\n-    else {\n+    } else {\n       getDefaultMetrics().draw(this, g, x, y, obs, zoom);\n     }\n   }\n@@ -338,8 +338,8 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n     getMap().getStackMetrics().getContents(this, null, null, childBounds, 0, 0);\n \n     asList().stream()\n-            .filter(PieceIterator.VISIBLE)\n-            .forEach(p -> r.add(childBounds[indexOf(p)]));\n+      .filter(PieceIterator.VISIBLE)\n+      .forEach(p -> r.add(childBounds[indexOf(p)]));\n \n     return r;\n   }\n@@ -351,8 +351,8 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n     StackMetrics metrics = getMap() == null ? getDefaultMetrics() : getMap().getStackMetrics();\n     metrics.getContents(this, null, childBounds, null, 0, 0);\n     asList().stream()\n-            .filter(PieceIterator.VISIBLE)\n-            .forEach(p -> a.add(new Area(childBounds[indexOf(p)])));\n+      .filter(PieceIterator.VISIBLE)\n+      .forEach(p -> a.add(new Area(childBounds[indexOf(p)])));\n \n     return a;\n   }\n@@ -390,7 +390,9 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n     return null;\n   }\n \n-  /** @return the top visible piece in this stack */\n+  /**\n+   * @return the top visible piece in this stack\n+   */\n   public GamePiece topPiece() {\n     for (int i = pieceCount - 1; i >= 0; --i) {\n       if (!Boolean.TRUE.equals(contents[i].getProperty(Properties.INVISIBLE_TO_ME))) {\n@@ -401,9 +403,9 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n   }\n \n   /**\n-   * @return the top piece in this stack that is visible to the player with the\n-   *         given id\n    * @param playerId Player Id to check\n+   * @return the top piece in this stack that is visible to the player with the\n+   * given id\n    * @see GameModule#getUserId\n    */\n   public GamePiece topPiece(String playerId) {\n@@ -417,9 +419,9 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n   }\n \n   /**\n-   * @return the bottom piece in this stack that is visible to the player with\n-   *         the given id\n    * @param playerId Player Id to Check\n+   * @return the bottom piece in this stack that is visible to the player with\n+   * the given id\n    * @see GameModule#getUserId\n    */\n   public GamePiece bottomPiece(String playerId) {\n@@ -432,7 +434,9 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n     return null;\n   }\n \n-  /** @return the bottom visible piece in this stack */\n+  /**\n+   * @return the bottom visible piece in this stack\n+   */\n   public GamePiece bottomPiece() {\n     for (int i = 0; i < pieceCount; ++i) {\n       if (!Boolean.TRUE.equals(contents[i].getProperty(Properties.INVISIBLE_TO_ME))) {\n@@ -447,8 +451,8 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n    */\n   protected int nVisible() {\n     return (int) asList().stream()\n-                         .filter(PieceIterator.VISIBLE)\n-                         .count();\n+      .filter(PieceIterator.VISIBLE)\n+      .count();\n   }\n \n   @Override\n@@ -456,8 +460,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n     GamePiece p = topPiece();\n     if (p != null) {\n       return p.keyEvent(stroke);\n-    }\n-    else {\n+    } else {\n       return null;\n     }\n   }\n@@ -473,7 +476,8 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n   @Override\n   public String getState() {\n     SequenceEncoder se = new SequenceEncoder(';');\n-    se.append(getMap() == null ? \"null\" : getMap().getIdentifier()).append(getPosition().x).append(getPosition().y); //$NON-NLS-1$//\n+    se.append(getMap() == null ? \"null\" : getMap().getIdentifier()).append(getPosition().x)\n+      .append(getPosition().y); //$NON-NLS-1$//\n     for (int i = 0; i < pieceCount; ++i) {\n       se.append(contents[i].getId());\n     }\n@@ -490,7 +494,9 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n     final GameState gs = GameModule.getGameModule().getGameState();\n     while (st.hasMoreTokens()) {\n       final GamePiece child = gs.getPieceForId(st.nextToken());\n-      if (child != null) insertChild(child, pieceCount);\n+      if (child != null) {\n+        insertChild(child, pieceCount);\n+      }\n     }\n \n     Map m = null;\n@@ -504,8 +510,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n     if (m != getMap()) {\n       if (m != null) {\n         m.addPiece(this);\n-      }\n-      else {\n+      } else {\n         setMap(null);\n       }\n     }\n@@ -653,14 +658,16 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n   /**\n    * See {@link AbstractImageFinder}\n    * Tells each of the pieces in the stack to add its images to the collection\n+   *\n    * @param s Collection to add image names to\n    */\n   @Override\n   public void addImageNamesRecursively(Collection<String> s) {\n     for (Iterator<GamePiece> i = getPiecesIterator(); i.hasNext(); ) {\n       GamePiece p = i.next();\n-      if (p instanceof ImageSearchTarget)\n-      ((ImageSearchTarget)p).addImageNamesRecursively(s);\n+      if (p instanceof ImageSearchTarget) {\n+        ((ImageSearchTarget) p).addImageNamesRecursively(s);\n+      }\n     }\n   }\n \n@@ -690,7 +697,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n       while (index >= 0) {\n         final GamePiece p = getPieceAt(index--);\n         if (doingSelected ^ !Boolean.TRUE.equals(\n-                              p.getProperty(Properties.SELECTED))) {\n+          p.getProperty(Properties.SELECTED))) {\n           ret = p;\n           break;\n         }\n",
            "diff_size": 52
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/9/Stack.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_random/9/Stack.java\nindex d14825ff120..597ae0de723 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/9/Stack.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_random/9/Stack.java\n@@ -660,7 +660,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n     for (Iterator<GamePiece> i = getPiecesIterator(); i.hasNext(); ) {\n       GamePiece p = i.next();\n       if (p instanceof ImageSearchTarget)\n-      ((ImageSearchTarget)p).addImageNamesRecursively(s);\n+        ((ImageSearchTarget)p).addImageNamesRecursively(s);\n     }\n   }\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/9/Stack.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_three_grams/9/Stack.java\nindex d14825ff120..532a3bf108e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/errored/1/9/Stack.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/vassalengine-vassal/styler_three_grams/9/Stack.java\n@@ -659,8 +659,7 @@ public class Stack extends AbstractImageFinder implements GamePiece, StateMergea\n   public void addImageNamesRecursively(Collection<String> s) {\n     for (Iterator<GamePiece> i = getPiecesIterator(); i.hasNext(); ) {\n       GamePiece p = i.next();\n-      if (p instanceof ImageSearchTarget)\n-      ((ImageSearchTarget)p).addImageNamesRecursively(s);\n+      if (p instanceof ImageSearchTarget)((ImageSearchTarget)p).addImageNamesRecursively(s);\n     }\n   }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}