{
    "project_name": "codefollower-H2-Research",
    "error_id": "214",
    "information": {
        "errors": [
            {
                "line": "111",
                "column": "9",
                "severity": "warning",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        MVStore.TxCounter counter = txCounter;\n        txCounter = null;\n        if(counter != null) {\n            store.store.deregisterVersionUsage(counter);\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/214/Transaction.java\nindex ba1c77bd610..e609b9d1cd1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/214/Transaction.java\n@@ -108,7 +108,7 @@ public class Transaction {\n     public void markStatementEnd() {\n         MVStore.TxCounter counter = txCounter;\n         txCounter = null;\n-        if(counter != null) {\n+        if (counter != null) {\n             store.store.deregisterVersionUsage(counter);\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/214/Transaction.java\nindex ba1c77bd610..9df1903a288 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/214/Transaction.java\n@@ -3,12 +3,14 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.mvstore.tx;\n \n import org.h2.mvstore.DataUtils;\n import org.h2.mvstore.MVMap;\n import org.h2.mvstore.MVStore;\n import org.h2.mvstore.type.DataType;\n+\n import java.util.Iterator;\n \n /**\n@@ -16,243 +18,243 @@ import java.util.Iterator;\n  */\n public class Transaction {\n \n-    /**\n-     * The status of a closed transaction (committed or rolled back).\n-     */\n-    public static final int STATUS_CLOSED = 0;\n-\n-    /**\n-     * The status of an open transaction.\n-     */\n-    public static final int STATUS_OPEN = 1;\n-\n-    /**\n-     * The status of a prepared transaction.\n-     */\n-    public static final int STATUS_PREPARED = 2;\n-\n-    /**\n-     * The status of a transaction that is being committed, but possibly not\n-     * yet finished. A transactions can go into this state when the store is\n-     * closed while the transaction is committing. When opening a store,\n-     * such transactions should be committed.\n-     */\n-    public static final int STATUS_COMMITTING = 3;\n-\n-    /**\n-     * The transaction store.\n-     */\n-    final TransactionStore store;\n-\n-    /**\n-     * The transaction id.\n-     */\n-    final int transactionId;\n-\n-    /**\n-     * The log id of the last entry in the undo log map.\n-     */\n-    long logId;\n-\n-    private int status;\n-\n-    private MVStore.TxCounter txCounter;\n-\n-    private String name;\n-\n-    Transaction(TransactionStore store, int transactionId, int status,\n-                String name, long logId) {\n-        this.store = store;\n-        this.transactionId = transactionId;\n-        this.status = status;\n-        this.name = name;\n-        this.logId = logId;\n-    }\n-\n-    public int getId() {\n-        return transactionId;\n-    }\n-\n-    public int getStatus() {\n-        return status;\n-    }\n-\n-    void setStatus(int status) {\n-        this.status = status;\n-    }\n-\n-    public void setName(String name) {\n-        checkNotClosed();\n-        this.name = name;\n-        store.storeTransaction(this);\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    /**\n-     * Create a new savepoint.\n-     *\n-     * @return the savepoint id\n-     */\n-    public long setSavepoint() {\n-        return logId;\n-    }\n-\n-    public void markStatementStart() {\n-        markStatementEnd();\n-        txCounter = store.store.registerVersionUsage();\n-    }\n-\n-    public void markStatementEnd() {\n-        MVStore.TxCounter counter = txCounter;\n-        txCounter = null;\n-        if(counter != null) {\n-            store.store.deregisterVersionUsage(counter);\n-        }\n-    }\n-\n-    /**\n-     * Add a log entry.\n-     *\n-     * @param mapId the map id\n-     * @param key the key\n-     * @param oldValue the old value\n-     */\n-    void log(int mapId, Object key, Object oldValue) {\n-        store.log(this, logId, mapId, key, oldValue);\n-        // only increment the log id if logging was successful\n-        logId++;\n-    }\n-\n-    /**\n-     * Remove the last log entry.\n-     */\n-    void logUndo() {\n-        store.logUndo(this, --logId);\n+  /**\n+   * The status of a closed transaction (committed or rolled back).\n+   */\n+  public static final int STATUS_CLOSED = 0;\n+\n+  /**\n+   * The status of an open transaction.\n+   */\n+  public static final int STATUS_OPEN = 1;\n+\n+  /**\n+   * The status of a prepared transaction.\n+   */\n+  public static final int STATUS_PREPARED = 2;\n+\n+  /**\n+   * The status of a transaction that is being committed, but possibly not\n+   * yet finished. A transactions can go into this state when the store is\n+   * closed while the transaction is committing. When opening a store,\n+   * such transactions should be committed.\n+   */\n+  public static final int STATUS_COMMITTING = 3;\n+\n+  /**\n+   * The transaction store.\n+   */\n+  final TransactionStore store;\n+\n+  /**\n+   * The transaction id.\n+   */\n+  final int transactionId;\n+\n+  /**\n+   * The log id of the last entry in the undo log map.\n+   */\n+  long logId;\n+\n+  private int status;\n+\n+  private MVStore.TxCounter txCounter;\n+\n+  private String name;\n+\n+  Transaction(TransactionStore store, int transactionId, int status,\n+              String name, long logId) {\n+    this.store = store;\n+    this.transactionId = transactionId;\n+    this.status = status;\n+    this.name = name;\n+    this.logId = logId;\n+  }\n+\n+  public int getId() {\n+    return transactionId;\n+  }\n+\n+  public int getStatus() {\n+    return status;\n+  }\n+\n+  void setStatus(int status) {\n+    this.status = status;\n+  }\n+\n+  public void setName(String name) {\n+    checkNotClosed();\n+    this.name = name;\n+    store.storeTransaction(this);\n+  }\n+\n+  public String getName() {\n+    return name;\n+  }\n+\n+  /**\n+   * Create a new savepoint.\n+   *\n+   * @return the savepoint id\n+   */\n+  public long setSavepoint() {\n+    return logId;\n+  }\n+\n+  public void markStatementStart() {\n+    markStatementEnd();\n+    txCounter = store.store.registerVersionUsage();\n+  }\n+\n+  public void markStatementEnd() {\n+    MVStore.TxCounter counter = txCounter;\n+    txCounter = null;\n+    if (counter != null) {\n+      store.store.deregisterVersionUsage(counter);\n     }\n-\n-    /**\n-     * Open a data map.\n-     *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param name the name of the map\n-     * @return the transaction map\n-     */\n-    public <K, V> TransactionMap<K, V> openMap(String name) {\n-        return openMap(name, null, null);\n-    }\n-\n-    /**\n-     * Open the map to store the data.\n-     *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param name the name of the map\n-     * @param keyType the key data type\n-     * @param valueType the value data type\n-     * @return the transaction map\n-     */\n-    public <K, V> TransactionMap<K, V> openMap(String name,\n-                                               DataType keyType, DataType valueType) {\n-        checkNotClosed();\n-        MVMap<K, VersionedValue> map = store.openMap(name, keyType,\n-                valueType);\n-        int mapId = map.getId();\n-        return new TransactionMap<>(this, map, mapId);\n-    }\n-\n-    /**\n-     * Open the transactional version of the given map.\n-     *\n-     * @param <K> the key type\n-     * @param <V> the value type\n-     * @param map the base map\n-     * @return the transactional map\n-     */\n-    public <K, V> TransactionMap<K, V> openMap(\n-            MVMap<K, VersionedValue> map) {\n-        checkNotClosed();\n-        int mapId = map.getId();\n-        return new TransactionMap<>(this, map, mapId);\n-    }\n-\n-    /**\n-     * Prepare the transaction. Afterwards, the transaction can only be\n-     * committed or rolled back.\n-     */\n-    public void prepare() {\n-        checkNotClosed();\n-        status = STATUS_PREPARED;\n-        store.storeTransaction(this);\n-    }\n-\n-    /**\n-     * Commit the transaction. Afterwards, this transaction is closed.\n-     */\n-    public void commit() {\n-        checkNotClosed();\n-        store.commit(this, logId);\n-    }\n-\n-    /**\n-     * Roll back to the given savepoint. This is only allowed if the\n-     * transaction is open.\n-     *\n-     * @param savepointId the savepoint id\n-     */\n-    public void rollbackToSavepoint(long savepointId) {\n-        checkNotClosed();\n-        store.rollbackTo(this, logId, savepointId);\n-        logId = savepointId;\n-    }\n-\n-    /**\n-     * Roll the transaction back. Afterwards, this transaction is closed.\n-     */\n-    public void rollback() {\n-        checkNotClosed();\n-        store.rollbackTo(this, logId, 0);\n-        store.endTransaction(this, status);\n-    }\n-\n-    /**\n-     * Get the list of changes, starting with the latest change, up to the\n-     * given savepoint (in reverse order than they occurred). The value of\n-     * the change is the value before the change was applied.\n-     *\n-     * @param savepointId the savepoint id, 0 meaning the beginning of the\n-     *            transaction\n-     * @return the changes\n-     */\n-    public Iterator<TransactionStore.Change> getChanges(long savepointId) {\n-        return store.getChanges(this, logId, savepointId);\n-    }\n-\n-    /**\n-     * Check whether this transaction is open or prepared.\n-     */\n-    void checkNotClosed() {\n-        if (status == STATUS_CLOSED) {\n-            throw DataUtils.newIllegalStateException(\n-                    DataUtils.ERROR_CLOSED, \"Transaction is closed\");\n-        }\n-    }\n-\n-    /**\n-     * Remove the map.\n-     *\n-     * @param map the map\n-     */\n-    public <K, V> void removeMap(TransactionMap<K, V> map) {\n-        store.removeMap(map);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"\" + transactionId;\n+  }\n+\n+  /**\n+   * Add a log entry.\n+   *\n+   * @param mapId    the map id\n+   * @param key      the key\n+   * @param oldValue the old value\n+   */\n+  void log(int mapId, Object key, Object oldValue) {\n+    store.log(this, logId, mapId, key, oldValue);\n+    // only increment the log id if logging was successful\n+    logId++;\n+  }\n+\n+  /**\n+   * Remove the last log entry.\n+   */\n+  void logUndo() {\n+    store.logUndo(this, --logId);\n+  }\n+\n+  /**\n+   * Open a data map.\n+   *\n+   * @param <K>  the key type\n+   * @param <V>  the value type\n+   * @param name the name of the map\n+   * @return the transaction map\n+   */\n+  public <K, V> TransactionMap<K, V> openMap(String name) {\n+    return openMap(name, null, null);\n+  }\n+\n+  /**\n+   * Open the map to store the data.\n+   *\n+   * @param <K>       the key type\n+   * @param <V>       the value type\n+   * @param name      the name of the map\n+   * @param keyType   the key data type\n+   * @param valueType the value data type\n+   * @return the transaction map\n+   */\n+  public <K, V> TransactionMap<K, V> openMap(String name,\n+                                             DataType keyType, DataType valueType) {\n+    checkNotClosed();\n+    MVMap<K, VersionedValue> map = store.openMap(name, keyType,\n+        valueType);\n+    int mapId = map.getId();\n+    return new TransactionMap<>(this, map, mapId);\n+  }\n+\n+  /**\n+   * Open the transactional version of the given map.\n+   *\n+   * @param <K> the key type\n+   * @param <V> the value type\n+   * @param map the base map\n+   * @return the transactional map\n+   */\n+  public <K, V> TransactionMap<K, V> openMap(\n+      MVMap<K, VersionedValue> map) {\n+    checkNotClosed();\n+    int mapId = map.getId();\n+    return new TransactionMap<>(this, map, mapId);\n+  }\n+\n+  /**\n+   * Prepare the transaction. Afterwards, the transaction can only be\n+   * committed or rolled back.\n+   */\n+  public void prepare() {\n+    checkNotClosed();\n+    status = STATUS_PREPARED;\n+    store.storeTransaction(this);\n+  }\n+\n+  /**\n+   * Commit the transaction. Afterwards, this transaction is closed.\n+   */\n+  public void commit() {\n+    checkNotClosed();\n+    store.commit(this, logId);\n+  }\n+\n+  /**\n+   * Roll back to the given savepoint. This is only allowed if the\n+   * transaction is open.\n+   *\n+   * @param savepointId the savepoint id\n+   */\n+  public void rollbackToSavepoint(long savepointId) {\n+    checkNotClosed();\n+    store.rollbackTo(this, logId, savepointId);\n+    logId = savepointId;\n+  }\n+\n+  /**\n+   * Roll the transaction back. Afterwards, this transaction is closed.\n+   */\n+  public void rollback() {\n+    checkNotClosed();\n+    store.rollbackTo(this, logId, 0);\n+    store.endTransaction(this, status);\n+  }\n+\n+  /**\n+   * Get the list of changes, starting with the latest change, up to the\n+   * given savepoint (in reverse order than they occurred). The value of\n+   * the change is the value before the change was applied.\n+   *\n+   * @param savepointId the savepoint id, 0 meaning the beginning of the\n+   *                    transaction\n+   * @return the changes\n+   */\n+  public Iterator<TransactionStore.Change> getChanges(long savepointId) {\n+    return store.getChanges(this, logId, savepointId);\n+  }\n+\n+  /**\n+   * Check whether this transaction is open or prepared.\n+   */\n+  void checkNotClosed() {\n+    if (status == STATUS_CLOSED) {\n+      throw DataUtils.newIllegalStateException(\n+          DataUtils.ERROR_CLOSED, \"Transaction is closed\");\n     }\n+  }\n+\n+  /**\n+   * Remove the map.\n+   *\n+   * @param map the map\n+   */\n+  public <K, V> void removeMap(TransactionMap<K, V> map) {\n+    store.removeMap(map);\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"\" + transactionId;\n+  }\n \n }\n",
            "diff_size": 259
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/214/Transaction.java\nindex ba1c77bd610..88796afe58c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/214/Transaction.java\n@@ -60,8 +60,7 @@ public class Transaction {\n \n     private String name;\n \n-    Transaction(TransactionStore store, int transactionId, int status,\n-                String name, long logId) {\n+    Transaction(TransactionStore store, int transactionId, int status, String name, long logId) {\n         this.store = store;\n         this.transactionId = transactionId;\n         this.status = status;\n@@ -108,7 +107,7 @@ public class Transaction {\n     public void markStatementEnd() {\n         MVStore.TxCounter counter = txCounter;\n         txCounter = null;\n-        if(counter != null) {\n+        if (counter != null) {\n             store.store.deregisterVersionUsage(counter);\n         }\n     }\n@@ -155,9 +154,8 @@ public class Transaction {\n      * @param valueType the value data type\n      * @return the transaction map\n      */\n-    public <K, V> TransactionMap<K, V> openMap(String name,\n-                                               DataType keyType, DataType valueType) {\n-        checkNotClosed();\n+    public <K, V> TransactionMap<K, V> openMap(String name, DataType keyType, DataType valueType) {\n+    checkNotClosed();\n         MVMap<K, VersionedValue> map = store.openMap(name, keyType,\n                 valueType);\n         int mapId = map.getId();\n@@ -255,4 +253,4 @@ public class Transaction {\n         return \"\" + transactionId;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/214/Transaction.java\nindex ba1c77bd610..82cbc799353 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/214/Transaction.java\n@@ -14,21 +14,29 @@ import java.util.Iterator;\n /**\n  * A transaction.\n  */\n+\n+\n public class Transaction {\n \n     /**\n      * The status of a closed transaction (committed or rolled back).\n      */\n+\n+\n     public static final int STATUS_CLOSED = 0;\n \n     /**\n      * The status of an open transaction.\n      */\n+\n+\n     public static final int STATUS_OPEN = 1;\n \n     /**\n      * The status of a prepared transaction.\n      */\n+\n+\n     public static final int STATUS_PREPARED = 2;\n \n     /**\n@@ -37,31 +45,35 @@ public class Transaction {\n      * closed while the transaction is committing. When opening a store,\n      * such transactions should be committed.\n      */\n+\n+\n     public static final int STATUS_COMMITTING = 3;\n \n     /**\n      * The transaction store.\n      */\n+\n+\n     final TransactionStore store;\n \n     /**\n      * The transaction id.\n      */\n+\n+\n     final int transactionId;\n \n     /**\n      * The log id of the last entry in the undo log map.\n      */\n-    long logId;\n \n-    private int status;\n \n+    long logId;\n+    private int status;\n     private MVStore.TxCounter txCounter;\n-\n     private String name;\n \n-    Transaction(TransactionStore store, int transactionId, int status,\n-                String name, long logId) {\n+    Transaction(TransactionStore store, int transactionId, int status, String name, long logId) {\n         this.store = store;\n         this.transactionId = transactionId;\n         this.status = status;\n@@ -69,24 +81,29 @@ public class Transaction {\n         this.logId = logId;\n     }\n \n+\n     public int getId() {\n         return transactionId;\n     }\n \n+\n     public int getStatus() {\n         return status;\n     }\n \n+\n     void setStatus(int status) {\n         this.status = status;\n     }\n \n+\n     public void setName(String name) {\n         checkNotClosed();\n         this.name = name;\n         store.storeTransaction(this);\n     }\n \n+\n     public String getName() {\n         return name;\n     }\n@@ -96,19 +113,23 @@ public class Transaction {\n      *\n      * @return the savepoint id\n      */\n+\n+\n     public long setSavepoint() {\n         return logId;\n     }\n \n+\n     public void markStatementStart() {\n         markStatementEnd();\n         txCounter = store.store.registerVersionUsage();\n     }\n \n+\n     public void markStatementEnd() {\n         MVStore.TxCounter counter = txCounter;\n         txCounter = null;\n-        if(counter != null) {\n+        if (counter != null) {\n             store.store.deregisterVersionUsage(counter);\n         }\n     }\n@@ -120,6 +141,8 @@ public class Transaction {\n      * @param key the key\n      * @param oldValue the old value\n      */\n+\n+\n     void log(int mapId, Object key, Object oldValue) {\n         store.log(this, logId, mapId, key, oldValue);\n         // only increment the log id if logging was successful\n@@ -129,6 +152,8 @@ public class Transaction {\n     /**\n      * Remove the last log entry.\n      */\n+\n+\n     void logUndo() {\n         store.logUndo(this, --logId);\n     }\n@@ -141,6 +166,8 @@ public class Transaction {\n      * @param name the name of the map\n      * @return the transaction map\n      */\n+\n+\n     public <K, V> TransactionMap<K, V> openMap(String name) {\n         return openMap(name, null, null);\n     }\n@@ -155,13 +182,13 @@ public class Transaction {\n      * @param valueType the value data type\n      * @return the transaction map\n      */\n-    public <K, V> TransactionMap<K, V> openMap(String name,\n-                                               DataType keyType, DataType valueType) {\n+\n+\n+    public <K, V> TransactionMap<K, V> openMap(String name, DataType keyType, DataType valueType) {\n         checkNotClosed();\n-        MVMap<K, VersionedValue> map = store.openMap(name, keyType,\n-                valueType);\n+        MVMap<K, VersionedValue> map = store.openMap(name, keyType, valueType);\n         int mapId = map.getId();\n-        return new TransactionMap<>(this, map, mapId);\n+        return new TransactionMap< >(this, map, mapId);\n     }\n \n     /**\n@@ -172,17 +199,20 @@ public class Transaction {\n      * @param map the base map\n      * @return the transactional map\n      */\n-    public <K, V> TransactionMap<K, V> openMap(\n-            MVMap<K, VersionedValue> map) {\n+\n+\n+    public <K, V> TransactionMap<K, V> openMap(MVMap<K, VersionedValue> map) {\n         checkNotClosed();\n         int mapId = map.getId();\n-        return new TransactionMap<>(this, map, mapId);\n+        return new TransactionMap< >(this, map, mapId);\n     }\n \n     /**\n      * Prepare the transaction. Afterwards, the transaction can only be\n      * committed or rolled back.\n      */\n+\n+\n     public void prepare() {\n         checkNotClosed();\n         status = STATUS_PREPARED;\n@@ -192,6 +222,8 @@ public class Transaction {\n     /**\n      * Commit the transaction. Afterwards, this transaction is closed.\n      */\n+\n+\n     public void commit() {\n         checkNotClosed();\n         store.commit(this, logId);\n@@ -203,6 +235,8 @@ public class Transaction {\n      *\n      * @param savepointId the savepoint id\n      */\n+\n+\n     public void rollbackToSavepoint(long savepointId) {\n         checkNotClosed();\n         store.rollbackTo(this, logId, savepointId);\n@@ -212,6 +246,8 @@ public class Transaction {\n     /**\n      * Roll the transaction back. Afterwards, this transaction is closed.\n      */\n+\n+\n     public void rollback() {\n         checkNotClosed();\n         store.rollbackTo(this, logId, 0);\n@@ -227,6 +263,8 @@ public class Transaction {\n      *            transaction\n      * @return the changes\n      */\n+\n+\n     public Iterator<TransactionStore.Change> getChanges(long savepointId) {\n         return store.getChanges(this, logId, savepointId);\n     }\n@@ -234,10 +272,11 @@ public class Transaction {\n     /**\n      * Check whether this transaction is open or prepared.\n      */\n+\n+\n     void checkNotClosed() {\n         if (status == STATUS_CLOSED) {\n-            throw DataUtils.newIllegalStateException(\n-                    DataUtils.ERROR_CLOSED, \"Transaction is closed\");\n+            throw DataUtils.newIllegalStateException(DataUtils.ERROR_CLOSED, \"Transaction is closed\");\n         }\n     }\n \n@@ -246,6 +285,8 @@ public class Transaction {\n      *\n      * @param map the map\n      */\n+\n+\n     public <K, V> void removeMap(TransactionMap<K, V> map) {\n         store.removeMap(map);\n     }\n@@ -255,4 +296,4 @@ public class Transaction {\n         return \"\" + transactionId;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/214/Transaction.java\nindex ba1c77bd610..e609b9d1cd1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/214/Transaction.java\n@@ -108,7 +108,7 @@ public class Transaction {\n     public void markStatementEnd() {\n         MVStore.TxCounter counter = txCounter;\n         txCounter = null;\n-        if(counter != null) {\n+        if (counter != null) {\n             store.store.deregisterVersionUsage(counter);\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/214/Transaction.java\nindex ba1c77bd610..e609b9d1cd1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/214/Transaction.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/214/Transaction.java\n@@ -108,7 +108,7 @@ public class Transaction {\n     public void markStatementEnd() {\n         MVStore.TxCounter counter = txCounter;\n         txCounter = null;\n-        if(counter != null) {\n+        if (counter != null) {\n             store.store.deregisterVersionUsage(counter);\n         }\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}