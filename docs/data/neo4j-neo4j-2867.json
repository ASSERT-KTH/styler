{
    "project_name": "neo4j-neo4j",
    "error_id": "2867",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2867/Converters.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2867/Converters.java\nindex d07f5c156e3..87ac9a89fcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2867/Converters.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2867/Converters.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util;\n \n import java.nio.file.Path;\n@@ -36,43 +37,43 @@ public class Converters\n     {\n     }\n \n-    public static <T> Function<String,T> optional()\n+    public static <T> Function<String, T> optional()\n     {\n         return from -> null;\n     }\n \n-    private static final Comparator<Path> BY_FILE_NAME = Comparator.comparing( Path::getFileName );\n+    private static final Comparator<Path> BY_FILE_NAME = Comparator.comparing(Path::getFileName);\n \n     private static final Comparator<Path> BY_FILE_NAME_WITH_CLEVER_NUMBERS =\n-            ( o1, o2 ) -> NumberAwareStringComparator.INSTANCE.compare( o1.toAbsolutePath().toString(), o2.toAbsolutePath().toString() );\n+      (o1, o2) -> NumberAwareStringComparator.INSTANCE.compare(o1.toAbsolutePath().toString(), o2.toAbsolutePath().toString());\n \n-    public static Function<String,Path[]> regexFiles( final boolean cleverNumberRegexSort )\n+    public static Function<String, Path[]> regexFiles(final boolean cleverNumberRegexSort)\n     {\n         return name ->\n         {\n             Comparator<Path> sorting = cleverNumberRegexSort ? BY_FILE_NAME_WITH_CLEVER_NUMBERS : BY_FILE_NAME;\n-            List<Path> files = Validators.matchingFiles( name.trim() );\n-            files.sort( sorting );\n-            return files.toArray( new Path[0] );\n+            List<Path> files = Validators.matchingFiles(name.trim());\n+            files.sort(sorting);\n+            return files.toArray(new Path[0]);\n         };\n     }\n \n-    public static Function<String,Path[]> toFiles( final String delimiter, final Function<String,Path[]> eachFileConverter )\n+    public static Function<String, Path[]> toFiles(final String delimiter, final Function<String, Path[]> eachFileConverter)\n     {\n         return from ->\n         {\n-            if ( from == null )\n+            if (from == null)\n             {\n                 return new Path[0];\n             }\n \n-            String[] names = quotationAwareSplit( from, delimiter );\n+            String[] names = quotationAwareSplit(from, delimiter);\n             List<Path> files = new ArrayList<>();\n-            for ( String name : names )\n+            for (String name : names)\n             {\n-                files.addAll( Arrays.asList( eachFileConverter.apply( name ) ) );\n+                files.addAll(Arrays.asList(eachFileConverter.apply(name)));\n             }\n-            return files.toArray( new Path[0] );\n+            return files.toArray(new Path[0]);\n         };\n     }\n \n@@ -82,7 +83,7 @@ public class Converters\n      * <pre>\n      * The first part,'the second, but longer part',the third part\n      * </pre>\n-     *\n+     * <p>\n      * Will be split into:\n      * <ol>\n      *     <li>The first part</li>\n@@ -90,29 +91,29 @@ public class Converters\n      *     <li>the third part</li>\n      * </ol>\n      *\n-     * @param from string to be split into smaller parts.\n+     * @param from      string to be split into smaller parts.\n      * @param delimiter the delimiter to split on.\n      * @return an array of parts split from the provided string, where delimiters inside quoted strings will not be split.\n      */\n-    private static String[] quotationAwareSplit( String from, String delimiter )\n+    private static String[] quotationAwareSplit(String from, String delimiter)\n     {\n-        String[] parts = from.split( delimiter );\n+        String[] parts = from.split(delimiter);\n         List<String> mendedParts = new ArrayList<>();\n-        for ( int i = 0; i < parts.length; i++ )\n+        for (int i = 0; i < parts.length; i++)\n         {\n             String part = parts[i];\n-            if ( part.startsWith( \"'\" ) )\n+            if (part.startsWith(\"'\"))\n             {\n                 // put back together the parts which were split by a comma, but where inside quotation\n-                while ( !part.endsWith( \"'\" ) )\n+                while (!part.endsWith(\"'\"))\n                 {\n-                    checkState( i + 1 < parts.length, \"When splitting \\\"%s\\\" the inner start quote in part \\\"%s\\\" had no matching end quote\", from, part );\n+                    checkState(i + 1 < parts.length, \"When splitting \\\"%s\\\" the inner start quote in part \\\"%s\\\" had no matching end quote\", from, part);\n                     part += delimiter + parts[++i];\n                 }\n-                part = part.substring( 1, part.length() - 1 ); // remove the quotation\n+                part = part.substring(1, part.length() - 1); // remove the quotation\n             }\n-            mendedParts.add( part );\n+            mendedParts.add(part);\n         }\n-        return mendedParts.toArray( new String[0] );\n+        return mendedParts.toArray(new String[0]);\n     }\n }\n",
            "diff_size": 25
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}