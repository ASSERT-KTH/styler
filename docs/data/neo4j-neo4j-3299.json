{
    "project_name": "neo4j-neo4j",
    "error_id": "3299",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3299/TokenHoldersIdLookup.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3299/TokenHoldersIdLookup.java\nindex a18e9e9bbf4..4363e7600e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3299/TokenHoldersIdLookup.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3299/TokenHoldersIdLookup.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api;\n \n import java.util.function.Predicate;\n@@ -34,72 +35,72 @@ class TokenHoldersIdLookup implements LoginContext.IdLookup\n     private final TokenHolders tokens;\n     private final GlobalProcedures globalProcedures;\n \n-    TokenHoldersIdLookup( TokenHolders tokens, GlobalProcedures globalProcedures )\n+    TokenHoldersIdLookup(TokenHolders tokens, GlobalProcedures globalProcedures)\n     {\n         this.tokens = tokens;\n         this.globalProcedures = globalProcedures;\n     }\n \n     @Override\n-    public int getPropertyKeyId( String name )\n+    public int getPropertyKeyId(String name)\n     {\n-        return tokens.propertyKeyTokens().getIdByName( name );\n+        return tokens.propertyKeyTokens().getIdByName(name);\n     }\n \n     @Override\n-    public int getLabelId( String name )\n+    public int getLabelId(String name)\n     {\n-        return tokens.labelTokens().getIdByName( name );\n+        return tokens.labelTokens().getIdByName(name);\n     }\n \n     @Override\n-    public int getRelTypeId( String name )\n+    public int getRelTypeId(String name)\n     {\n-        return tokens.relationshipTypeTokens().getIdByName( name );\n+        return tokens.relationshipTypeTokens().getIdByName(name);\n     }\n \n     @Override\n-    public int[] getProcedureIds( String procedureGlobbing )\n+    public int[] getProcedureIds(String procedureGlobbing)\n     {\n-        Predicate<String> matcherPredicate = predicate( procedureGlobbing );\n-        return globalProcedures.getIdsOfProceduresMatching( p -> matcherPredicate.test( p.signature().name().toString() ) );\n+        Predicate<String> matcherPredicate = predicate(procedureGlobbing);\n+        return globalProcedures.getIdsOfProceduresMatching(p -> matcherPredicate.test(p.signature().name().toString()));\n     }\n \n     @Override\n     public int[] getAdminProcedureIds()\n     {\n-        return globalProcedures.getIdsOfProceduresMatching( p -> p.signature().admin() );\n+        return globalProcedures.getIdsOfProceduresMatching(p -> p.signature().admin());\n     }\n \n     @Override\n-    public int[] getFunctionIds( String functionGlobbing )\n+    public int[] getFunctionIds(String functionGlobbing)\n     {\n-        Predicate<String> matcherPredicate = predicate( functionGlobbing );\n-        return globalProcedures.getIdsOfFunctionsMatching( f -> matcherPredicate.test( f.signature().name().toString() ) );\n+        Predicate<String> matcherPredicate = predicate(functionGlobbing);\n+        return globalProcedures.getIdsOfFunctionsMatching(f -> matcherPredicate.test(f.signature().name().toString()));\n     }\n \n     @Override\n-    public int[] getAggregatingFunctionIds( String functionGlobbing )\n+    public int[] getAggregatingFunctionIds(String functionGlobbing)\n     {\n-        Predicate<String> matcherPredicate = predicate( functionGlobbing );\n-        return globalProcedures.getIdsOfAggregatingFunctionsMatching( f -> matcherPredicate.test( f.signature().name().toString() ) );\n+        Predicate<String> matcherPredicate = predicate(functionGlobbing);\n+        return globalProcedures.getIdsOfAggregatingFunctionsMatching(f -> matcherPredicate.test(f.signature().name().toString()));\n     }\n \n     // These are characters that have special meaning in java regex, * and ? are omitted since we have special handling for those\n     private final String specialCharacters = \"<([{\\\\^-=$!|]})+.>\";\n     // To construct a pattern with the special characters they must first be escaped\n     // the '.' is a regex matching every character in the string once and replacing it with the escaped form\n-    @SuppressWarnings( \"ReplaceAllDot\" )\n-    private final String escapedSpecialCharacters = specialCharacters.replaceAll( \".\", \"\\\\\\\\$0\" );\n-    private final Pattern specialCharacterPattern = Pattern.compile( \"[\" + escapedSpecialCharacters + \"]\" );\n+    @SuppressWarnings(\"ReplaceAllDot\")\n+    private final String escapedSpecialCharacters = specialCharacters.replaceAll(\".\", \"\\\\\\\\$0\");\n+    private final Pattern specialCharacterPattern = Pattern.compile(\"[\" + escapedSpecialCharacters + \"]\");\n \n-    private Predicate<String> predicate( String globbing )\n+    private Predicate<String> predicate(String globbing)\n     {\n-        Matcher m = specialCharacterPattern.matcher( globbing );\n+        Matcher m = specialCharacterPattern.matcher(globbing);\n         // escape all special character that were found\n-        String escaped = m.replaceAll( \"\\\\\\\\$0\" );\n-        String escapedString = escaped.replaceAll( \"\\\\*\", \".*\" )\n-                                      .replaceAll( \"\\\\?\", \".{1}\" );\n-        return Pattern.compile( escapedString, CASE_INSENSITIVE ).asMatchPredicate();\n+        String escaped = m.replaceAll(\"\\\\\\\\$0\");\n+        String escapedString = escaped.replaceAll(\"\\\\*\", \".*\")\n+          .replaceAll(\"\\\\?\", \".{1}\");\n+        return Pattern.compile(escapedString, CASE_INSENSITIVE).asMatchPredicate();\n     }\n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}