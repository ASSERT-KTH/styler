{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2688",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "19",
                    "severity": "error",
                    "message": "'}' at column 19 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "174",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "190",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "200",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "216",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2688/StateMachines.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2688/StateMachines.java\nindex b22aaec5f50..f3564d7f1fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2688/StateMachines.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2688/StateMachines.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster;\n \n import java.util.ArrayDeque;\n@@ -52,228 +53,224 @@ import static org.neo4j.cluster.com.message.Message.HEADER_CREATED_BY;\n  * Only one message at a time can be processed.\n  */\n public class StateMachines\n-        implements MessageProcessor, MessageSource\n+    implements MessageProcessor, MessageSource\n {\n-    public interface Monitor\n-    {\n-        void beganProcessing( Message message );\n-\n-        void finishedProcessing( Message message );\n-    }\n-\n-    private final Log log;\n-\n-    private final Monitor monitor;\n-    private final MessageSender sender;\n-    private DelayedDirectExecutor executor;\n-    private Executor stateMachineExecutor;\n-    private Timeouts timeouts;\n-    private final Map<Class<? extends MessageType>, StateMachine> stateMachines = new LinkedHashMap<>();\n-\n-    private final List<MessageProcessor> outgoingProcessors = new ArrayList<>();\n-    private final OutgoingMessageHolder outgoing;\n-    // This is used to ensure fairness of message delivery\n-    private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock( true );\n-    private final String instanceIdHeaderValue;\n-\n-    public StateMachines( LogProvider logProvider, Monitor monitor, MessageSource source,\n-                          final MessageSender sender,\n-                          Timeouts timeouts,\n-                          DelayedDirectExecutor executor, Executor stateMachineExecutor, InstanceId instanceId )\n+  public interface Monitor\n+  {\n+    void beganProcessing(Message message);\n+\n+    void finishedProcessing(Message message);\n+  }\n+\n+  private final Log log;\n+\n+  private final Monitor monitor;\n+  private final MessageSender sender;\n+  private DelayedDirectExecutor executor;\n+  private Executor stateMachineExecutor;\n+  private Timeouts timeouts;\n+  private final Map<Class<? extends MessageType>, StateMachine> stateMachines = new LinkedHashMap<>();\n+\n+  private final List<MessageProcessor> outgoingProcessors = new ArrayList<>();\n+  private final OutgoingMessageHolder outgoing;\n+  // This is used to ensure fairness of message delivery\n+  private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock(true);\n+  private final String instanceIdHeaderValue;\n+\n+  public StateMachines(LogProvider logProvider, Monitor monitor, MessageSource source,\n+                       final MessageSender sender,\n+                       Timeouts timeouts,\n+                       DelayedDirectExecutor executor, Executor stateMachineExecutor, InstanceId instanceId)\n+  {\n+    this.log = logProvider.getLog(getClass());\n+    this.monitor = monitor;\n+    this.sender = sender;\n+    this.executor = executor;\n+    this.stateMachineExecutor = stateMachineExecutor;\n+    this.timeouts = timeouts;\n+    this.instanceIdHeaderValue = instanceId.toString();\n+\n+    outgoing = new OutgoingMessageHolder();\n+    timeouts.addMessageProcessor(this);\n+    source.addMessageProcessor(this);\n+\n+  }\n+\n+  public Timeouts getTimeouts()\n+  {\n+    return timeouts;\n+  }\n+\n+  public synchronized void addStateMachine(StateMachine stateMachine)\n+  {\n+    stateMachines.put(stateMachine.getMessageType(), stateMachine);\n+  }\n+\n+  public synchronized void removeStateMachine(StateMachine stateMachine)\n+  {\n+    stateMachines.remove(stateMachine.getMessageType());\n+  }\n+\n+  public Iterable<StateMachine> getStateMachines()\n+  {\n+    return stateMachines.values();\n+  }\n+\n+  @Override\n+  public void addMessageProcessor(MessageProcessor messageProcessor)\n+  {\n+    outgoingProcessors.add(messageProcessor);\n+  }\n+\n+  public OutgoingMessageHolder getOutgoing()\n+  {\n+    return outgoing;\n+  }\n+\n+  @Override\n+  public boolean process(final Message<? extends MessageType> message)\n+  {\n+    stateMachineExecutor.execute(new Runnable()\n     {\n-        this.log = logProvider.getLog( getClass() );\n-        this.monitor = monitor;\n-        this.sender = sender;\n-        this.executor = executor;\n-        this.stateMachineExecutor = stateMachineExecutor;\n-        this.timeouts = timeouts;\n-        this.instanceIdHeaderValue = instanceId.toString();\n-\n-        outgoing = new OutgoingMessageHolder();\n-        timeouts.addMessageProcessor( this );\n-        source.addMessageProcessor( this );\n-\n-    }\n+      OutgoingMessageHolder temporaryOutgoing = new OutgoingMessageHolder();\n \n-    public Timeouts getTimeouts()\n-    {\n-        return timeouts;\n-    }\n-\n-    public synchronized void addStateMachine( StateMachine stateMachine )\n-    {\n-        stateMachines.put( stateMachine.getMessageType(), stateMachine );\n-    }\n-\n-    public synchronized void removeStateMachine( StateMachine stateMachine )\n-    {\n-        stateMachines.remove( stateMachine.getMessageType() );\n-    }\n+      @Override\n+      public void run()\n+      {\n+        monitor.beganProcessing(message);\n \n-    public Iterable<StateMachine> getStateMachines()\n-    {\n-        return stateMachines.values();\n-    }\n-\n-    @Override\n-    public void addMessageProcessor( MessageProcessor messageProcessor )\n-    {\n-        outgoingProcessors.add( messageProcessor );\n-    }\n-\n-    public OutgoingMessageHolder getOutgoing()\n-    {\n-        return outgoing;\n-    }\n-\n-    @Override\n-    public boolean process( final Message<? extends MessageType> message )\n-    {\n-        stateMachineExecutor.execute( new Runnable()\n+        lock.writeLock().lock();\n+        try\n         {\n-            OutgoingMessageHolder temporaryOutgoing = new OutgoingMessageHolder();\n+          // Lock timeouts while we are processing the message\n+          synchronized (timeouts)\n+          {\n+            StateMachine stateMachine = stateMachines.get(message.getMessageType().getClass());\n+            if (stateMachine == null)\n+            {\n+              return; // No StateMachine registered for this MessageType type - Ignore this\n+            }\n \n-            @Override\n-            public void run()\n+            handleMessage(stateMachine, message);\n+\n+            // Process and send messages\n+            // Allow state machines to send messages to each other as well in this loop\n+            Message<? extends MessageType> outgoingMessage;\n+            List<Message<? extends MessageType>> toSend = new LinkedList<>();\n+            try\n             {\n-                monitor.beganProcessing( message );\n+              while ((outgoingMessage = outgoing.nextOutgoingMessage()) != null)\n+              {\n+                message.copyHeadersTo(outgoingMessage, HEADER_CONVERSATION_ID, HEADER_CREATED_BY);\n \n-                lock.writeLock().lock();\n-                try\n+                for (MessageProcessor outgoingProcessor : outgoingProcessors)\n                 {\n-                    // Lock timeouts while we are processing the message\n-                    synchronized ( timeouts )\n+                  try\n+                  {\n+                    if (!outgoingProcessor.process(outgoingMessage))\n                     {\n-                        StateMachine stateMachine = stateMachines.get( message.getMessageType().getClass() );\n-                        if ( stateMachine == null )\n-                        {\n-                            return; // No StateMachine registered for this MessageType type - Ignore this\n-                        }\n-\n-                        handleMessage( stateMachine, message );\n-\n-                        // Process and send messages\n-                        // Allow state machines to send messages to each other as well in this loop\n-                        Message<? extends MessageType> outgoingMessage;\n-                        List<Message<? extends MessageType>> toSend = new LinkedList<>();\n-                        try\n-                        {\n-                            while ( (outgoingMessage = outgoing.nextOutgoingMessage()) != null )\n-                            {\n-                                message.copyHeadersTo( outgoingMessage, HEADER_CONVERSATION_ID, HEADER_CREATED_BY );\n-\n-                                for ( MessageProcessor outgoingProcessor : outgoingProcessors )\n-                                {\n-                                    try\n-                                    {\n-                                        if ( !outgoingProcessor.process( outgoingMessage ) )\n-                                        {\n-                                            break;\n-                                        }\n-                                    }\n-                                    catch ( Throwable e )\n-                                    {\n-                                        log.warn( \"Outgoing message processor threw exception\", e );\n-                                    }\n-                                }\n-\n-                                if ( outgoingMessage.hasHeader( Message.HEADER_TO ) )\n-                                {\n-                                    outgoingMessage.setHeader( Message.HEADER_INSTANCE_ID, instanceIdHeaderValue );\n-                                    toSend.add( outgoingMessage );\n-                                }\n-                                else\n-                                {\n-                                    // Deliver internally if possible\n-                                    StateMachine internalStatemachine = stateMachines.get( outgoingMessage\n-                                            .getMessageType()\n-                                            .getClass() );\n-                                    if ( internalStatemachine != null )\n-                                    {\n-                                        handleMessage( internalStatemachine, outgoingMessage );\n-                                    }\n-                                }\n-                            }\n-                            if ( !toSend.isEmpty() ) // the check is necessary, sender may not have started yet\n-                            {\n-                                sender.process( toSend );\n-                            }\n-                        }\n-                        catch ( Exception e )\n-                        {\n-                            log.warn( \"Error processing message \" + message, e );\n-                        }\n+                      break;\n                     }\n-                }\n-                finally\n-                {\n-                    lock.writeLock().unlock();\n+                  } catch (Throwable e)\n+                  {\n+                    log.warn(\"Outgoing message processor threw exception\", e);\n+                  }\n                 }\n \n-                // Before returning, process delayed executions so that they are done before returning\n-                // This will effectively trigger all notifications created by contexts\n-                executor.drain();\n-                monitor.finishedProcessing( message );\n-            }\n-\n-            private void handleMessage( StateMachine stateMachine, Message<? extends MessageType> message )\n-            {\n-                stateMachine.handle( message, temporaryOutgoing );\n-                for ( Message<? extends MessageType> next; (next = temporaryOutgoing.nextOutgoingMessage()) != null; )\n+                if (outgoingMessage.hasHeader(Message.HEADER_TO))\n+                {\n+                  outgoingMessage.setHeader(Message.HEADER_INSTANCE_ID, instanceIdHeaderValue);\n+                  toSend.add(outgoingMessage);\n+                } else\n                 {\n-                    outgoing.offer( next );\n+                  // Deliver internally if possible\n+                  StateMachine internalStatemachine = stateMachines.get(outgoingMessage\n+                      .getMessageType()\n+                      .getClass());\n+                  if (internalStatemachine != null)\n+                  {\n+                    handleMessage(internalStatemachine, outgoingMessage);\n+                  }\n                 }\n+              }\n+              if (!toSend.isEmpty()) // the check is necessary, sender may not have started yet\n+              {\n+                sender.process(toSend);\n+              }\n+            } catch (Exception e)\n+            {\n+              log.warn(\"Error processing message \" + message, e);\n             }\n-        } );\n-        return true;\n-    }\n-\n-    public void addStateTransitionListener( StateTransitionListener stateTransitionListener )\n-    {\n-        for ( StateMachine stateMachine : stateMachines.values() )\n+          }\n+        } finally\n         {\n-            stateMachine.addStateTransitionListener( stateTransitionListener );\n+          lock.writeLock().unlock();\n         }\n-    }\n \n-    public void removeStateTransitionListener( StateTransitionListener stateTransitionListener )\n-    {\n-        for ( StateMachine stateMachine : stateMachines.values() )\n+        // Before returning, process delayed executions so that they are done before returning\n+        // This will effectively trigger all notifications created by contexts\n+        executor.drain();\n+        monitor.finishedProcessing(message);\n+      }\n+\n+      private void handleMessage(StateMachine stateMachine, Message<? extends MessageType> message)\n+      {\n+        stateMachine.handle(message, temporaryOutgoing);\n+        for (Message<? extends MessageType> next; (next = temporaryOutgoing.nextOutgoingMessage()) != null; )\n         {\n-            stateMachine.removeStateTransitionListener( stateTransitionListener );\n+          outgoing.offer(next);\n         }\n+      }\n+    });\n+    return true;\n+  }\n+\n+  public void addStateTransitionListener(StateTransitionListener stateTransitionListener)\n+  {\n+    for (StateMachine stateMachine : stateMachines.values())\n+    {\n+      stateMachine.addStateTransitionListener(stateTransitionListener);\n     }\n+  }\n \n-    @Override\n-    public String toString()\n+  public void removeStateTransitionListener(StateTransitionListener stateTransitionListener)\n+  {\n+    for (StateMachine stateMachine : stateMachines.values())\n     {\n-        List<String> states = new ArrayList<>();\n-        for ( StateMachine stateMachine : stateMachines.values() )\n-        {\n-            states.add( stateMachine.getState().getClass().getSuperclass().getSimpleName() + \":\" + stateMachine\n-                    .getState().toString() );\n-        }\n-        return states.toString();\n+      stateMachine.removeStateTransitionListener(stateTransitionListener);\n     }\n+  }\n \n-    public StateMachine getStateMachine( Class<? extends MessageType> messageType )\n+  @Override\n+  public String toString()\n+  {\n+    List<String> states = new ArrayList<>();\n+    for (StateMachine stateMachine : stateMachines.values())\n     {\n-        return stateMachines.get( messageType );\n+      states.add(stateMachine.getState().getClass().getSuperclass().getSimpleName() + \":\" + stateMachine\n+          .getState().toString());\n     }\n+    return states.toString();\n+  }\n \n-    private class OutgoingMessageHolder implements MessageHolder\n-    {\n-        private Deque<Message<? extends MessageType>> outgoingMessages = new ArrayDeque<>();\n+  public StateMachine getStateMachine(Class<? extends MessageType> messageType)\n+  {\n+    return stateMachines.get(messageType);\n+  }\n \n-        @Override\n-        public synchronized void offer( Message<? extends MessageType> message )\n-        {\n-            outgoingMessages.addFirst( message );\n-        }\n+  private class OutgoingMessageHolder implements MessageHolder\n+  {\n+    private Deque<Message<? extends MessageType>> outgoingMessages = new ArrayDeque<>();\n \n-        public synchronized Message<? extends MessageType> nextOutgoingMessage()\n-        {\n-            return outgoingMessages.pollFirst();\n-        }\n+    @Override\n+    public synchronized void offer(Message<? extends MessageType> message)\n+    {\n+      outgoingMessages.addFirst(message);\n+    }\n+\n+    public synchronized Message<? extends MessageType> nextOutgoingMessage()\n+    {\n+      return outgoingMessages.pollFirst();\n     }\n+  }\n }\n",
            "diff_size": 307
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2688/StateMachines.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2688/StateMachines.java\nindex b22aaec5f50..e11f01c1fea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2688/StateMachines.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2688/StateMachines.java\n@@ -44,15 +44,13 @@ import org.neo4j.logging.LogProvider;\n import static org.neo4j.cluster.com.message.Message.HEADER_CONVERSATION_ID;\n import static org.neo4j.cluster.com.message.Message.HEADER_CREATED_BY;\n \n-\n /**\n  * Combines a set of state machines into one. This will\n  * typically receive messages from the network and then delegate\n  * to the correct state machine based on what type of message comes in.\n  * Only one message at a time can be processed.\n  */\n-public class StateMachines\n-        implements MessageProcessor, MessageSource\n+public class StateMachines implements MessageProcessor, MessageSource\n {\n     public interface Monitor\n     {\n@@ -76,11 +74,10 @@ public class StateMachines\n     private final ReentrantReadWriteLock lock = new ReentrantReadWriteLock( true );\n     private final String instanceIdHeaderValue;\n \n-    public StateMachines( LogProvider logProvider, Monitor monitor, MessageSource source,\n-                          final MessageSender sender,\n+    public StateMachines( LogProvider logProvider, Monitor monitor, MessageSource source, final MessageSender sender,\n                           Timeouts timeouts,\n                           DelayedDirectExecutor executor, Executor stateMachineExecutor, InstanceId instanceId )\n-    {\n+{\n         this.log = logProvider.getLog( getClass() );\n         this.monitor = monitor;\n         this.sender = sender;\n@@ -92,7 +89,6 @@ public class StateMachines\n         outgoing = new OutgoingMessageHolder();\n         timeouts.addMessageProcessor( this );\n         source.addMessageProcessor( this );\n-\n     }\n \n     public Timeouts getTimeouts()\n@@ -137,8 +133,7 @@ public class StateMachines\n             public void run()\n             {\n                 monitor.beganProcessing( message );\n-\n-                lock.writeLock().lock();\n+lock.writeLock().lock();\n                 try\n                 {\n                     // Lock timeouts while we are processing the message\n@@ -161,8 +156,7 @@ public class StateMachines\n                             while ( (outgoingMessage = outgoing.nextOutgoingMessage()) != null )\n                             {\n                                 message.copyHeadersTo( outgoingMessage, HEADER_CONVERSATION_ID, HEADER_CREATED_BY );\n-\n-                                for ( MessageProcessor outgoingProcessor : outgoingProcessors )\n+for ( MessageProcessor outgoingProcessor : outgoingProcessors )\n                                 {\n                                     try\n                                     {\n@@ -185,10 +179,8 @@ public class StateMachines\n                                 else\n                                 {\n                                     // Deliver internally if possible\n-                                    StateMachine internalStatemachine = stateMachines.get( outgoingMessage\n-                                            .getMessageType()\n-                                            .getClass() );\n-                                    if ( internalStatemachine != null )\n+                                    StateMachine internalStatemachine = stateMachines.get( outgoingMessage.getMessageType().getClass() );\n+if ( internalStatemachine != null )\n                                     {\n                                         handleMessage( internalStatemachine, outgoingMessage );\n                                     }\n@@ -250,10 +242,10 @@ public class StateMachines\n         List<String> states = new ArrayList<>();\n         for ( StateMachine stateMachine : stateMachines.values() )\n         {\n-            states.add( stateMachine.getState().getClass().getSuperclass().getSimpleName() + \":\" + stateMachine\n-                    .getState().toString() );\n+            states.add( stateMachine.getState().getClass().getSuperclass().getSimpleName() + \":\" + stateMachine.getState().toString() );\n         }\n-        return states.toString();\n+\n+return states.toString();\n     }\n \n     public StateMachine getStateMachine( Class<? extends MessageType> messageType )\n@@ -276,4 +268,4 @@ public class StateMachines\n             return outgoingMessages.pollFirst();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}