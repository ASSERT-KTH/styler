{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "913",
    "information": {
        "errors": [
            {
                "line": "185",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        .setRetryMaxAttempts(10)\n        .build();\n    ExceptionHandler handler = ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build();\n    final int sleepOnAttempt = 8;\n    final AtomicInteger timesCalled = new AtomicInteger(0);\n    try {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/913/RetryHelperTest.java\nindex 68bb7ce3531..db207cdecd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/913/RetryHelperTest.java\n@@ -182,7 +182,8 @@ public class RetryHelperTest {\n         .setRetryMinAttempts(5)\n         .setRetryMaxAttempts(10)\n         .build();\n-    ExceptionHandler handler = ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build();\n+    ExceptionHandler handler = ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build(\n+    ) ;\n     final int sleepOnAttempt = 8;\n     final AtomicInteger timesCalled = new AtomicInteger(0);\n     try {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/913/RetryHelperTest.java\nindex 68bb7ce3531..6d661aac238 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/913/RetryHelperTest.java\n@@ -66,7 +66,8 @@ public class RetryHelperTest {\n     final AtomicInteger count = new AtomicInteger(3);\n     try {\n       RetryHelper.runWithRetries(new Callable<Void>() {\n-        @Override public Void call() throws IOException, NullPointerException {\n+        @Override\n+        public Void call() throws IOException, NullPointerException {\n           if (count.decrementAndGet() == 2) {\n             assertEquals(1, RetryHelper.getContext().getAttemptNumber());\n             throw new IOException(\"should be retried\");\n@@ -90,7 +91,8 @@ public class RetryHelperTest {\n         new E1Exception(), new E2Exception(), new E4Exception(), new E3Exception()).iterator();\n     try {\n       RetryHelper.runWithRetries(new Callable<Void>() {\n-        @Override public Void call() throws E1Exception {\n+        @Override\n+        public Void call() throws E1Exception {\n           throw exceptions.next();\n         }\n       }, params, handler);\n@@ -113,7 +115,9 @@ public class RetryHelperTest {\n     assertNull(RetryHelper.getContext());\n     int attempted = RetryHelper.runWithRetries(new Callable<Integer>() {\n       int timesCalled;\n-      @Override public Integer call() throws IOException {\n+\n+      @Override\n+      public Integer call() throws IOException {\n         timesCalled++;\n         assertEquals(timesCalled, RetryHelper.getContext().getAttemptNumber());\n         assertEquals(10, RetryHelper.getContext().getRetryParams().getRetryMaxAttempts());\n@@ -140,7 +144,8 @@ public class RetryHelperTest {\n     final AtomicInteger timesCalled = new AtomicInteger(0);\n     try {\n       RetryHelper.runWithRetries(callable(new Runnable() {\n-        @Override public void run() {\n+        @Override\n+        public void run() {\n           // Throw an exception up to maxAttempts times, should never be called beyond that\n           if (timesCalled.incrementAndGet() <= maxAttempts) {\n             throw new RuntimeException();\n@@ -182,12 +187,14 @@ public class RetryHelperTest {\n         .setRetryMinAttempts(5)\n         .setRetryMaxAttempts(10)\n         .build();\n-    ExceptionHandler handler = ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build();\n+    ExceptionHandler handler =\n+        ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build();\n     final int sleepOnAttempt = 8;\n     final AtomicInteger timesCalled = new AtomicInteger(0);\n     try {\n       RetryHelper.runWithRetries(callable(new Runnable() {\n-        @Override public void run() {\n+        @Override\n+        public void run() {\n           timesCalled.incrementAndGet();\n           if (timesCalled.get() == sleepOnAttempt) {\n             fakeClock.advance(1000, TimeUnit.MILLISECONDS);\n",
            "diff_size": 13
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'try' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "161",
                    "severity": "warning",
                    "message": "'class def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "261",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 2, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/913/RetryHelperTest.java\nindex 68bb7ce3531..baa6fe46b26 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/913/RetryHelperTest.java\n@@ -41,19 +41,23 @@ import java.util.concurrent.atomic.AtomicLong;\n public class RetryHelperTest {\n \n   static class E1Exception extends Exception {\n-    private static final long serialVersionUID = 3874933713392137001L;\n+\n+  private static final long serialVersionUID = 3874933713392137001L;\n   }\n \n   static class E2Exception extends E1Exception {\n-    private static final long serialVersionUID = -8710227162480133598L;\n+\n+  private static final long serialVersionUID = -8710227162480133598L;\n   }\n \n   static class E3Exception extends E1Exception {\n-    private static final long serialVersionUID = -7794256022024001666L;\n+\n+  private static final long serialVersionUID = -7794256022024001666L;\n   }\n \n   static class E4Exception extends E2Exception {\n-    private static final long serialVersionUID = -5508018234693709156L;\n+\n+  private static final long serialVersionUID = -5508018234693709156L;\n   }\n \n   @Test\n@@ -63,7 +67,7 @@ public class RetryHelperTest {\n         RetryParams.newBuilder().setInitialRetryDelayMillis(0).setRetryMaxAttempts(3).build();\n     ExceptionHandler handler = ExceptionHandler.newBuilder()\n         .retryOn(IOException.class).abortOn(RuntimeException.class).build();\n-    final AtomicInteger count = new AtomicInteger(3);\n+final AtomicInteger count = new AtomicInteger(3);\n     try {\n       RetryHelper.runWithRetries(new Callable<Void>() {\n         @Override public Void call() throws IOException, NullPointerException {\n@@ -86,9 +90,8 @@ public class RetryHelperTest {\n     handler = ExceptionHandler.newBuilder()\n         .retryOn(E1Exception.class, E4Exception.class)\n         .abortOn(E3Exception.class).build();\n-    final Iterator<? extends E1Exception> exceptions = Arrays.asList(\n-        new E1Exception(), new E2Exception(), new E4Exception(), new E3Exception()).iterator();\n-    try {\n+final Iterator<? extends E1Exception> exceptions = Arrays.asList(new E1Exception(), new E2Exception(), new E4Exception(), new E3Exception()).iterator();\n+try {\n       RetryHelper.runWithRetries(new Callable<Void>() {\n         @Override public Void call() throws E1Exception {\n           throw exceptions.next();\n@@ -127,8 +130,7 @@ public class RetryHelperTest {\n     assertNull(RetryHelper.getContext());\n   }\n \n-\n-  @Test\n+@Test\n   public void testTriesNoMoreThanMaxTimes() {\n     // Total retry period set to 60 seconds so as to not factor into test\n     final int maxAttempts = 10;\n@@ -137,7 +139,7 @@ public class RetryHelperTest {\n         .setRetryMinAttempts(0)\n         .setRetryMaxAttempts(maxAttempts)\n         .build();\n-    final AtomicInteger timesCalled = new AtomicInteger(0);\n+final AtomicInteger timesCalled = new AtomicInteger(0);\n     try {\n       RetryHelper.runWithRetries(callable(new Runnable() {\n         @Override public void run() {\n@@ -156,8 +158,7 @@ public class RetryHelperTest {\n     }\n   }\n \n-\n-  private static class FakeClock extends Clock {\n+private static class FakeClock extends Clock {\n \n     private final AtomicLong millis = new AtomicLong();\n \n@@ -207,13 +208,11 @@ public class RetryHelperTest {\n     // Total retry period set to 60 seconds so as to not factor into test\n     RetryParams params = RetryParams.newBuilder()\n         .setInitialRetryDelayMillis(10)\n-        .setMaxRetryDelayMillis(10_000_000)\n-        .setRetryDelayBackoffFactor(2)\n-        .setTotalRetryPeriodMillis(60_000)\n-        .setRetryMinAttempts(0)\n+        .setMaxRetryDelayMillis(10_000_000).setRetryDelayBackoffFactor(2)\n+        .setTotalRetryPeriodMillis(60_000).setRetryMinAttempts(0)\n         .setRetryMaxAttempts(100)\n         .build();\n-    long sleepDuration = RetryHelper.getSleepDuration(params, 1);\n+long sleepDuration = RetryHelper.getSleepDuration(params, 1);\n     assertTrue(String.valueOf(sleepDuration), sleepDuration < 13 && sleepDuration >= 7);\n     sleepDuration = RetryHelper.getSleepDuration(params, 2);\n     assertTrue(String.valueOf(sleepDuration), sleepDuration < 25 && sleepDuration >= 15);\n@@ -259,5 +258,4 @@ public class RetryHelperTest {\n       }\n     });\n   }\n-\n-}\n+  }\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 2, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 4, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "74",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 6, expected level should be one of the following: 12, 14, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 6, expected level should be one of the following: 12, 14, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 4, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "77",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 2, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 0, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "89",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 156).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 2, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 2, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 0, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 2, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "98",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "'object def' child has incorrect indentation level 49, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 49, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 51, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 51, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 51, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 51, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 53, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "123",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 51, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 51, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "125",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 49, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "126",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 47, expected level should be one of the following: 4, 6, 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "139",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 35, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 37, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "143",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 39, expected level should be one of the following: 12, 14, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "144",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 37, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 37, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 35, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 33, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "147",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 35, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 37, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "186",
                    "severity": "warning",
                    "message": "'if' has incorrect indentation level 37, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "187",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 39, expected level should be one of the following: 12, 14, 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "188",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 37, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 37, expected level should be one of the following: 10, 12, 14.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "'method def rcurly' has incorrect indentation level 35, expected level should be one of the following: 8, 10, 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "'object def rcurly' has incorrect indentation level 33, expected level should be one of the following: 6, 8, 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "202",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 236).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/913/RetryHelperTest.java\nindex 68bb7ce3531..99ea9dfd232 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/913/RetryHelperTest.java\n@@ -24,9 +24,7 @@ import static org.junit.Assert.fail;\n \n import com.google.cloud.RetryHelper.NonRetriableException;\n import com.google.cloud.RetryHelper.RetriesExhaustedException;\n-\n import org.junit.Test;\n-\n import java.io.IOException;\n import java.util.Arrays;\n import java.util.Iterator;\n@@ -38,62 +36,66 @@ import java.util.concurrent.atomic.AtomicLong;\n /**\n  * Tests for {@link RetryHelper}.\n  */\n+\n+\n public class RetryHelperTest {\n \n   static class E1Exception extends Exception {\n+\n     private static final long serialVersionUID = 3874933713392137001L;\n   }\n \n   static class E2Exception extends E1Exception {\n+\n     private static final long serialVersionUID = -8710227162480133598L;\n   }\n \n   static class E3Exception extends E1Exception {\n+\n     private static final long serialVersionUID = -7794256022024001666L;\n   }\n \n   static class E4Exception extends E2Exception {\n+\n     private static final long serialVersionUID = -5508018234693709156L;\n   }\n \n   @Test\n   public void testTriesWithExceptionHandling() {\n     assertNull(RetryHelper.getContext());\n-    RetryParams params =\n-        RetryParams.newBuilder().setInitialRetryDelayMillis(0).setRetryMaxAttempts(3).build();\n-    ExceptionHandler handler = ExceptionHandler.newBuilder()\n-        .retryOn(IOException.class).abortOn(RuntimeException.class).build();\n+    RetryParams params = RetryParams.newBuilder().setInitialRetryDelayMillis(0).setRetryMaxAttempts(3).build();\n+    ExceptionHandler handler = ExceptionHandler.newBuilder().retryOn(IOException.class).abortOn(RuntimeException.class).build();\n     final AtomicInteger count = new AtomicInteger(3);\n     try {\n       RetryHelper.runWithRetries(new Callable<Void>() {\n-        @Override public Void call() throws IOException, NullPointerException {\n-          if (count.decrementAndGet() == 2) {\n-            assertEquals(1, RetryHelper.getContext().getAttemptNumber());\n-            throw new IOException(\"should be retried\");\n-          }\n-          assertEquals(2, RetryHelper.getContext().getAttemptNumber());\n-          throw new NullPointerException(\"Boo!\");\n-        }\n-      }, params, handler);\n+  @Override\n+  public Void call() throws IOException, NullPointerException {\n+    if (count.decrementAndGet() == 2) {\n+      assertEquals(1, RetryHelper.getContext().getAttemptNumber());\n+      throw new IOException(\"should be retried\");\n+    }\n+    assertEquals(2, RetryHelper.getContext().getAttemptNumber());\n+    throw new NullPointerException(\"Boo!\");\n+  }\n+}, params, handler);\n       fail(\"Exception should have been thrown\");\n     } catch (NonRetriableException ex) {\n       assertEquals(\"Boo!\", ex.getCause().getMessage());\n       assertEquals(1, count.intValue());\n     }\n     assertNull(RetryHelper.getContext());\n-\n     params = RetryParams.newBuilder().setInitialRetryDelayMillis(0).setRetryMaxAttempts(5).build();\n-    handler = ExceptionHandler.newBuilder()\n-        .retryOn(E1Exception.class, E4Exception.class)\n-        .abortOn(E3Exception.class).build();\n-    final Iterator<? extends E1Exception> exceptions = Arrays.asList(\n-        new E1Exception(), new E2Exception(), new E4Exception(), new E3Exception()).iterator();\n+    handler = ExceptionHandler.newBuilder().retryOn(E1Exception.class, E4Exception.class).abortOn(E3Exception.class).build();\n+    final Iterator<? extends E1Exception> exceptions = Arrays.asList(new E1Exception(), new E2Exception(), new E4Exception(), new E3Exception()).iterator();\n     try {\n       RetryHelper.runWithRetries(new Callable<Void>() {\n-        @Override public Void call() throws E1Exception {\n-          throw exceptions.next();\n-        }\n-      }, params, handler);\n+  @Override\n+  public Void call() throws E1Exception {\n+    throw exceptions.next();\n+  }\n+},\n+  params,\n+    handler);\n       fail(\"Exception should have been thrown\");\n     } catch (NonRetriableException ex) {\n       assertTrue(ex.getCause() instanceof E3Exception);\n@@ -104,50 +106,45 @@ public class RetryHelperTest {\n   @Test\n   public void testTriesAtLeastMinTimes() {\n     // Total retry period set to 60 seconds so as to not factor into test\n-    RetryParams params = RetryParams.newBuilder().setInitialRetryDelayMillis(0)\n-        .setTotalRetryPeriodMillis(60000)\n-        .setRetryMinAttempts(5)\n-        .setRetryMaxAttempts(10)\n-        .build();\n+    RetryParams params = RetryParams.newBuilder().setInitialRetryDelayMillis(0).setTotalRetryPeriodMillis(60000).setRetryMinAttempts(5).setRetryMaxAttempts(10).build();\n     final int timesToFail = 7;\n     assertNull(RetryHelper.getContext());\n     int attempted = RetryHelper.runWithRetries(new Callable<Integer>() {\n-      int timesCalled;\n-      @Override public Integer call() throws IOException {\n-        timesCalled++;\n-        assertEquals(timesCalled, RetryHelper.getContext().getAttemptNumber());\n-        assertEquals(10, RetryHelper.getContext().getRetryParams().getRetryMaxAttempts());\n-        if (timesCalled <= timesToFail) {\n-          throw new IOException();\n-        }\n-        return timesCalled;\n-      }\n-    }, params, ExceptionHandler.getDefaultInstance());\n+\n+                                                 int timesCalled;\n+\n+                                                 @Override\n+                                                 public Integer call() throws IOException {\n+                                                   timesCalled++;\n+                                                   assertEquals(timesCalled, RetryHelper.getContext().getAttemptNumber());\n+                                                   assertEquals(10, RetryHelper.getContext().getRetryParams().getRetryMaxAttempts());\n+                                                   if (timesCalled <= timesToFail) {\n+                                                     throw new IOException();\n+                                                   }\n+                                                   return timesCalled;\n+                                                 }\n+                                               }, params, ExceptionHandler.getDefaultInstance());\n     assertEquals(timesToFail + 1, attempted);\n     assertNull(RetryHelper.getContext());\n   }\n \n-\n   @Test\n   public void testTriesNoMoreThanMaxTimes() {\n     // Total retry period set to 60 seconds so as to not factor into test\n     final int maxAttempts = 10;\n-    RetryParams params = RetryParams.newBuilder().setInitialRetryDelayMillis(0)\n-        .setTotalRetryPeriodMillis(60000)\n-        .setRetryMinAttempts(0)\n-        .setRetryMaxAttempts(maxAttempts)\n-        .build();\n+    RetryParams params = RetryParams.newBuilder().setInitialRetryDelayMillis(0).setTotalRetryPeriodMillis(60000).setRetryMinAttempts(0).setRetryMaxAttempts(maxAttempts).build();\n     final AtomicInteger timesCalled = new AtomicInteger(0);\n     try {\n       RetryHelper.runWithRetries(callable(new Runnable() {\n-        @Override public void run() {\n+                                   @Override\n+                                   public void run() {\n           // Throw an exception up to maxAttempts times, should never be called beyond that\n-          if (timesCalled.incrementAndGet() <= maxAttempts) {\n-            throw new RuntimeException();\n-          }\n-          fail(\"Body was executed too many times: \" + timesCalled.get());\n-        }\n-      }), params, ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build());\n+                                     if (timesCalled.incrementAndGet() <= maxAttempts) {\n+                                       throw new RuntimeException();\n+                                     }\n+                                     fail(\"Body was executed too many times: \" + timesCalled.get());\n+                                   }\n+                                 }), params, ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build());\n       // Unnecessary as this line should not be possible reach even if RetryHandler is broken\n       fail(\"Should not have succeeded, expected all attempts to fail and give up.\");\n     } catch (RetriesExhaustedException expected) {\n@@ -156,12 +153,12 @@ public class RetryHelperTest {\n     }\n   }\n \n-\n   private static class FakeClock extends Clock {\n \n     private final AtomicLong millis = new AtomicLong();\n \n     // Advances the clock value by {@code time} in {@code timeUnit}.\n+\n     void advance(long time, TimeUnit timeUnit) {\n       millis.addAndGet(timeUnit.toMillis(time));\n     }\n@@ -177,24 +174,21 @@ public class RetryHelperTest {\n     final FakeClock fakeClock = new FakeClock();\n     // The 8th attempt (after min and before max) will trigger a 1 second (virtual) delay exceeding\n     // total retry period which is set just under 1 second. Test occurs faster than realtime.\n-    RetryParams params = RetryParams.newBuilder().setInitialRetryDelayMillis(0)\n-        .setTotalRetryPeriodMillis(999)\n-        .setRetryMinAttempts(5)\n-        .setRetryMaxAttempts(10)\n-        .build();\n+    RetryParams params = RetryParams.newBuilder().setInitialRetryDelayMillis(0).setTotalRetryPeriodMillis(999).setRetryMinAttempts(5).setRetryMaxAttempts(10).build();\n     ExceptionHandler handler = ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build();\n     final int sleepOnAttempt = 8;\n     final AtomicInteger timesCalled = new AtomicInteger(0);\n     try {\n       RetryHelper.runWithRetries(callable(new Runnable() {\n-        @Override public void run() {\n-          timesCalled.incrementAndGet();\n-          if (timesCalled.get() == sleepOnAttempt) {\n-            fakeClock.advance(1000, TimeUnit.MILLISECONDS);\n-          }\n-          throw new RuntimeException();\n-        }\n-      }), params, handler, fakeClock);\n+                                   @Override\n+                                   public void run() {\n+                                     timesCalled.incrementAndGet();\n+                                     if (timesCalled.get() == sleepOnAttempt) {\n+                                       fakeClock.advance(1000, TimeUnit.MILLISECONDS);\n+                                     }\n+                                     throw new RuntimeException();\n+                                   }\n+                                 }), params, handler, fakeClock);\n       fail();\n     } catch (RetriesExhaustedException expected) {\n       // verify timesCalled\n@@ -205,14 +199,7 @@ public class RetryHelperTest {\n   @Test\n   public void testBackoffIsExponential() {\n     // Total retry period set to 60 seconds so as to not factor into test\n-    RetryParams params = RetryParams.newBuilder()\n-        .setInitialRetryDelayMillis(10)\n-        .setMaxRetryDelayMillis(10_000_000)\n-        .setRetryDelayBackoffFactor(2)\n-        .setTotalRetryPeriodMillis(60_000)\n-        .setRetryMinAttempts(0)\n-        .setRetryMaxAttempts(100)\n-        .build();\n+    RetryParams params = RetryParams.newBuilder().setInitialRetryDelayMillis(10).setMaxRetryDelayMillis(10_000_000).setRetryDelayBackoffFactor(2).setTotalRetryPeriodMillis(60_000).setRetryMinAttempts(0).setRetryMaxAttempts(100).build();\n     long sleepDuration = RetryHelper.getSleepDuration(params, 1);\n     assertTrue(String.valueOf(sleepDuration), sleepDuration < 13 && sleepDuration >= 7);\n     sleepDuration = RetryHelper.getSleepDuration(params, 2);\n@@ -259,5 +246,4 @@ public class RetryHelperTest {\n       }\n     });\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 94
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/913/RetryHelperTest.java\nindex 68bb7ce3531..db207cdecd0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/913/RetryHelperTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/913/RetryHelperTest.java\n@@ -182,7 +182,8 @@ public class RetryHelperTest {\n         .setRetryMinAttempts(5)\n         .setRetryMaxAttempts(10)\n         .build();\n-    ExceptionHandler handler = ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build();\n+    ExceptionHandler handler = ExceptionHandler.newBuilder().retryOn(RuntimeException.class).build(\n+    ) ;\n     final int sleepOnAttempt = 8;\n     final AtomicInteger timesCalled = new AtomicInteger(0);\n     try {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}