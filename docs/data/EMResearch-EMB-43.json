{
    "project_name": "EMResearch-EMB",
    "error_id": "43",
    "information": {
        "errors": [
            {
                "line": "41",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 137).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  @Override\n  public Expression.BaseExpression<ChunkTaggedToken> create(String expr) {\n    LogicExpression<ChunkTaggedToken> logicExpression = LogicExpression.compile(expr, input -> new TokenPredicate(input, caseSensitive));\n    return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n      @Override\n      public boolean apply(ChunkTaggedToken token) {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "42",
                    "column": "24",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "42",
                    "column": "59",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "43",
                    "column": "22",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/43/TokenExpressionFactory.java\nindex 6c1a8f0f3f9..22382cf65d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/43/TokenExpressionFactory.java\n@@ -38,8 +38,10 @@ final class TokenExpressionFactory extends ExpressionFactory<ChunkTaggedToken> {\n \n   @Override\n   public Expression.BaseExpression<ChunkTaggedToken> create(String expr) {\n-    LogicExpression<ChunkTaggedToken> logicExpression = LogicExpression.compile(expr, input -> new TokenPredicate(input, caseSensitive));\n-    return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n+    LogicExpression\n+      <ChunkTaggedToken>logicExpression = LogicExpression . compile(expr, input-> new\n+      TokenPredicate (input, caseSensitive));\n+     return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n       @Override\n       public boolean apply(ChunkTaggedToken token) {\n         return logicExpression.apply(token);\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/43/TokenExpressionFactory.java\nindex 6c1a8f0f3f9..f8f1d31356b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/43/TokenExpressionFactory.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.chunking;\n \n import edu.washington.cs.knowitall.logic.LogicExpression;\n@@ -27,24 +28,25 @@ import edu.washington.cs.knowitall.regex.ExpressionFactory;\n  */\n final class TokenExpressionFactory extends ExpressionFactory<ChunkTaggedToken> {\n \n-  private final boolean caseSensitive;\n+    private final boolean caseSensitive;\n \n-  /**\n-   * @param caseSensitive whether word tokens should be compared case-sensitively - also used for regular expressions\n-   */\n-  TokenExpressionFactory(boolean caseSensitive) {\n-    this.caseSensitive = caseSensitive;\n-  }\n+    /**\n+     * @param caseSensitive whether word tokens should be compared case-sensitively - also used for regular expressions\n+     */\n+    TokenExpressionFactory(boolean caseSensitive) {\n+        this.caseSensitive = caseSensitive;\n+    }\n \n-  @Override\n-  public Expression.BaseExpression<ChunkTaggedToken> create(String expr) {\n-    LogicExpression<ChunkTaggedToken> logicExpression = LogicExpression.compile(expr, input -> new TokenPredicate(input, caseSensitive));\n-    return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n-      @Override\n-      public boolean apply(ChunkTaggedToken token) {\n-        return logicExpression.apply(token);\n-      }\n-    };\n-  }\n+    @Override\n+    public Expression.BaseExpression<ChunkTaggedToken> create(String expr) {\n+        LogicExpression<ChunkTaggedToken> logicExpression =\n+            LogicExpression.compile(expr, input -> new TokenPredicate(input, caseSensitive));\n+        return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n+            @Override\n+            public boolean apply(ChunkTaggedToken token) {\n+                return logicExpression.apply(token);\n+            }\n+        };\n+    }\n \n }\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/43/TokenExpressionFactory.java\nindex 6c1a8f0f3f9..5555f83180c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/naturalize/43/TokenExpressionFactory.java\n@@ -47,4 +47,4 @@ final class TokenExpressionFactory extends ExpressionFactory<ChunkTaggedToken> {\n     };\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "44",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/43/TokenExpressionFactory.java\nindex 6c1a8f0f3f9..098b26634d8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/43/TokenExpressionFactory.java\n@@ -25,26 +25,28 @@ import edu.washington.cs.knowitall.regex.ExpressionFactory;\n /**\n  * @since 2.9\n  */\n+\n+\n final class TokenExpressionFactory extends ExpressionFactory<ChunkTaggedToken> {\n \n-  private final boolean caseSensitive;\n+    private final boolean caseSensitive;\n \n   /**\n    * @param caseSensitive whether word tokens should be compared case-sensitively - also used for regular expressions\n    */\n-  TokenExpressionFactory(boolean caseSensitive) {\n+\n+    TokenExpressionFactory(boolean caseSensitive) {\n     this.caseSensitive = caseSensitive;\n-  }\n-\n-  @Override\n-  public Expression.BaseExpression<ChunkTaggedToken> create(String expr) {\n-    LogicExpression<ChunkTaggedToken> logicExpression = LogicExpression.compile(expr, input -> new TokenPredicate(input, caseSensitive));\n-    return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n-      @Override\n-      public boolean apply(ChunkTaggedToken token) {\n-        return logicExpression.apply(token);\n-      }\n-    };\n-  }\n-\n-}\n+    }\n+\n+    @Override\n+    public Expression.BaseExpression<ChunkTaggedToken> create(String expr) {\n+        LogicExpression<ChunkTaggedToken> logicExpression = LogicExpression.compile(expr, input -> new TokenPredicate(input, caseSensitive));\n+        return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n+            @Override\n+            public boolean apply(ChunkTaggedToken token) {\n+                return logicExpression.apply(token);\n+            }\n+        };\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "41",
                    "column": "120",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "41",
                    "column": "135",
                    "severity": "warning",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "137",
                    "severity": "warning",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "41",
                    "column": "138",
                    "severity": "warning",
                    "message": "'return' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/43/TokenExpressionFactory.java\nindex 6c1a8f0f3f9..2bfb512b572 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/43/TokenExpressionFactory.java\n@@ -38,8 +38,8 @@ final class TokenExpressionFactory extends ExpressionFactory<ChunkTaggedToken> {\n \n   @Override\n   public Expression.BaseExpression<ChunkTaggedToken> create(String expr) {\n-    LogicExpression<ChunkTaggedToken> logicExpression = LogicExpression.compile(expr, input -> new TokenPredicate(input, caseSensitive));\n-    return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n+    LogicExpression<ChunkTaggedToken> logicExpression = LogicExpression.compile(expr, input -> new TokenPredicate(input,caseSensitive ));return\n+    new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n       @Override\n       public boolean apply(ChunkTaggedToken token) {\n         return logicExpression.apply(token);\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "42",
                    "column": "24",
                    "severity": "warning",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "42",
                    "column": "59",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "43",
                    "column": "22",
                    "severity": "warning",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/43/TokenExpressionFactory.java\nindex 6c1a8f0f3f9..22382cf65d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/43/TokenExpressionFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/43/TokenExpressionFactory.java\n@@ -38,8 +38,10 @@ final class TokenExpressionFactory extends ExpressionFactory<ChunkTaggedToken> {\n \n   @Override\n   public Expression.BaseExpression<ChunkTaggedToken> create(String expr) {\n-    LogicExpression<ChunkTaggedToken> logicExpression = LogicExpression.compile(expr, input -> new TokenPredicate(input, caseSensitive));\n-    return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n+    LogicExpression\n+      <ChunkTaggedToken>logicExpression = LogicExpression . compile(expr, input-> new\n+      TokenPredicate (input, caseSensitive));\n+     return new Expression.BaseExpression<ChunkTaggedToken>(expr) {\n       @Override\n       public boolean apply(ChunkTaggedToken token) {\n         return logicExpression.apply(token);\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}