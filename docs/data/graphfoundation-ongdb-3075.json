{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3075",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "90",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "198",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "208",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "260",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "275",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3075/PrimitiveArrays.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3075/PrimitiveArrays.java\nindex 276c2ade136..9940e488be4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3075/PrimitiveArrays.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3075/PrimitiveArrays.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.collection.primitive;\n \n import java.util.Arrays;\n@@ -25,290 +26,286 @@ import static org.neo4j.collection.primitive.PrimitiveLongCollections.EMPTY_LONG\n \n /**\n  * Specialized methods for operations on primitive arrays.\n- *\n+ * <p>\n  * For set operations (union, intersect, symmetricDifference), input and output arrays\n  * are arrays containing unique values in sorted ascending order.\n  */\n public class PrimitiveArrays\n {\n-    /**\n-     * Compute union of two sets of integers represented as sorted arrays.\n-     *\n-     * @param lhs\n-     *         a set of integers, represented as a sorted array.\n-     * @param rhs\n-     *         a set of integers, represented as a sorted array.\n-     * @return a set of integers, represented as a sorted array.\n-     */\n-    // NOTE: this implementation was measured to be faster than an implementation\n-    // with countUnique for arrays on size 100+.\n-    public static int[] union( int[] lhs, int[] rhs )\n+  /**\n+   * Compute union of two sets of integers represented as sorted arrays.\n+   *\n+   * @param lhs a set of integers, represented as a sorted array.\n+   * @param rhs a set of integers, represented as a sorted array.\n+   * @return a set of integers, represented as a sorted array.\n+   */\n+  // NOTE: this implementation was measured to be faster than an implementation\n+  // with countUnique for arrays on size 100+.\n+  public static int[] union(int[] lhs, int[] rhs)\n+  {\n+    if (lhs == null || rhs == null)\n     {\n-        if ( lhs == null || rhs == null )\n-        {\n-            return lhs == null ? rhs : lhs;\n-        }\n+      return lhs == null ? rhs : lhs;\n+    }\n \n-        assert isSortedSet( lhs ) && isSortedSet( rhs );\n-        if ( lhs.length < rhs.length )\n-        {\n-            return union( rhs, lhs );\n-        }\n-        int[] merged = null;\n-        int m = 0;\n-        int l = 0;\n-        for ( int r = 0; l <= lhs.length && r < rhs.length; )\n+    assert isSortedSet(lhs) && isSortedSet(rhs);\n+    if (lhs.length < rhs.length)\n+    {\n+      return union(rhs, lhs);\n+    }\n+    int[] merged = null;\n+    int m = 0;\n+    int l = 0;\n+    for (int r = 0; l <= lhs.length && r < rhs.length; )\n+    {\n+      while (l < lhs.length && lhs[l] < rhs[r])\n+      {\n+        if (merged != null)\n         {\n-            while ( l < lhs.length && lhs[l] < rhs[r] )\n-            {\n-                if ( merged != null )\n-                {\n-                    merged[m++] = lhs[l];\n-                }\n-                l++;\n-            }\n-            if ( l == lhs.length )\n-            {\n-                if ( merged == null )\n-                {\n-                    merged = Arrays.copyOf( lhs, lhs.length + rhs.length - r );\n-                    m = l;\n-                }\n-                System.arraycopy( rhs, r, merged, m, rhs.length - r );\n-                m += rhs.length - r;\n-                break;\n-            }\n-            if ( lhs[l] > rhs[r] )\n-            {\n-                if ( merged == null )\n-                {\n-                    merged = Arrays.copyOf( lhs, lhs.length + rhs.length - r );\n-                    m = l;\n-                }\n-                merged[m++] = rhs[r++];\n-            }\n-            else // i.e. ( lhs[l] == rhs[r] )\n-            {\n-                if ( merged != null )\n-                {\n-                    merged[m++] = lhs[l];\n-                }\n-                l++;\n-                r++;\n-            }\n+          merged[m++] = lhs[l];\n         }\n-        if ( merged == null )\n+        l++;\n+      }\n+      if (l == lhs.length)\n+      {\n+        if (merged == null)\n         {\n-            return lhs;\n+          merged = Arrays.copyOf(lhs, lhs.length + rhs.length - r);\n+          m = l;\n         }\n-        if ( l < lhs.length ) // get tail of lhs\n+        System.arraycopy(rhs, r, merged, m, rhs.length - r);\n+        m += rhs.length - r;\n+        break;\n+      }\n+      if (lhs[l] > rhs[r])\n+      {\n+        if (merged == null)\n         {\n-            System.arraycopy( lhs, l, merged, m, lhs.length - l );\n-            m += lhs.length - l;\n+          merged = Arrays.copyOf(lhs, lhs.length + rhs.length - r);\n+          m = l;\n         }\n-        if ( m < merged.length ) // truncate extra elements\n+        merged[m++] = rhs[r++];\n+      } else // i.e. ( lhs[l] == rhs[r] )\n+      {\n+        if (merged != null)\n         {\n-            merged = Arrays.copyOf( merged, m );\n+          merged[m++] = lhs[l];\n         }\n-        return merged;\n+        l++;\n+        r++;\n+      }\n     }\n-\n-    /**\n-     * Compute the intersection of two sorted long array sets.\n-     * @param left a sorted array set\n-     * @param right another sorted array set\n-     * @return the intersection, represented as a sorted long array\n-     */\n-    public static long[] intersect( long[] left, long[] right )\n+    if (merged == null)\n     {\n-        if ( left == null || right == null )\n-        {\n-            return EMPTY_LONG_ARRAY;\n-        }\n-\n-        assert isSortedSet( left ) && isSortedSet( right );\n-\n-        long uniqueCounts = countUnique( left, right );\n-        if ( uniqueCounts == 0 ) // complete intersection\n-        {\n-            return right;\n-        }\n-        if ( right( uniqueCounts ) == right.length || left( uniqueCounts ) == left.length ) // non-intersecting\n-        {\n-            return EMPTY_LONG_ARRAY;\n-        }\n+      return lhs;\n+    }\n+    if (l < lhs.length) // get tail of lhs\n+    {\n+      System.arraycopy(lhs, l, merged, m, lhs.length - l);\n+      m += lhs.length - l;\n+    }\n+    if (m < merged.length) // truncate extra elements\n+    {\n+      merged = Arrays.copyOf(merged, m);\n+    }\n+    return merged;\n+  }\n \n-        long[] intersect = new long[left.length - left( uniqueCounts )];\n+  /**\n+   * Compute the intersection of two sorted long array sets.\n+   *\n+   * @param left  a sorted array set\n+   * @param right another sorted array set\n+   * @return the intersection, represented as a sorted long array\n+   */\n+  public static long[] intersect(long[] left, long[] right)\n+  {\n+    if (left == null || right == null)\n+    {\n+      return EMPTY_LONG_ARRAY;\n+    }\n \n-        int cursor = 0;\n-        int l = 0;\n-        int r = 0;\n-        while ( l < left.length && r < right.length )\n-        {\n-            if ( left[l] == right[r] )\n-            {\n-                intersect[cursor++] = left[l];\n-                l++;\n-                r++;\n-            }\n-            else if ( left[l] < right[r] )\n-            {\n-                l++;\n-            }\n-            else\n-            {\n-                r++;\n-            }\n-        }\n+    assert isSortedSet(left) && isSortedSet(right);\n \n-        assert cursor == intersect.length;\n-        return intersect;\n+    long uniqueCounts = countUnique(left, right);\n+    if (uniqueCounts == 0) // complete intersection\n+    {\n+      return right;\n     }\n-    /**\n-     * Compute the symmetric difference (set XOR basically) of two sorted long array sets.\n-     * @param left a sorted array set\n-     * @param right another sorted array set\n-     * @return the symmetric difference, represented as a sorted long array\n-     */\n-    public static long[] symmetricDifference( long[] left, long[] right )\n+    if (right(uniqueCounts) == right.length || left(uniqueCounts) == left.length) // non-intersecting\n     {\n-        if ( left == null || right == null )\n-        {\n-            return left == null ? right : left;\n-        }\n-\n-        assert isSortedSet( left ) && isSortedSet( right );\n+      return EMPTY_LONG_ARRAY;\n+    }\n \n-        long uniqueCounts = countUnique( left, right );\n-        if ( uniqueCounts == 0 ) // complete intersection\n-        {\n-            return EMPTY_LONG_ARRAY;\n-        }\n+    long[] intersect = new long[left.length - left(uniqueCounts)];\n \n-        long[] difference = new long[left( uniqueCounts ) + right( uniqueCounts )];\n+    int cursor = 0;\n+    int l = 0;\n+    int r = 0;\n+    while (l < left.length && r < right.length)\n+    {\n+      if (left[l] == right[r])\n+      {\n+        intersect[cursor++] = left[l];\n+        l++;\n+        r++;\n+      } else if (left[l] < right[r])\n+      {\n+        l++;\n+      } else\n+      {\n+        r++;\n+      }\n+    }\n \n-        int cursor = 0;\n-        int l = 0;\n-        int r = 0;\n-        while ( l < left.length && r < right.length )\n-        {\n-            if ( left[l] == right[r] )\n-            {\n-                l++;\n-                r++;\n-            }\n-            else if ( left[l] < right[r] )\n-            {\n-                difference[cursor++] = left[l];\n-                l++;\n-            }\n-            else\n-            {\n-                difference[cursor++] = right[r];\n-                r++;\n-            }\n-        }\n-        while ( l < left.length )\n-        {\n-            difference[cursor++] = left[l];\n-            l++;\n-        }\n-        while ( r < right.length )\n-        {\n-            difference[cursor++] = right[r];\n-            r++;\n-        }\n+    assert cursor == intersect.length;\n+    return intersect;\n+  }\n \n-        assert cursor == difference.length;\n-        return difference;\n+  /**\n+   * Compute the symmetric difference (set XOR basically) of two sorted long array sets.\n+   *\n+   * @param left  a sorted array set\n+   * @param right another sorted array set\n+   * @return the symmetric difference, represented as a sorted long array\n+   */\n+  public static long[] symmetricDifference(long[] left, long[] right)\n+  {\n+    if (left == null || right == null)\n+    {\n+      return left == null ? right : left;\n     }\n \n-    /**\n-     * Copy PrimitiveLongCollection into new long array\n-     * @param collection the collection to copy\n-     * @return the new long array\n-     */\n-    public static long[] of( PrimitiveLongCollection collection )\n+    assert isSortedSet(left) && isSortedSet(right);\n+\n+    long uniqueCounts = countUnique(left, right);\n+    if (uniqueCounts == 0) // complete intersection\n     {\n-        int i = 0;\n-        long[] result = new long[collection.size()];\n-        PrimitiveLongIterator iterator = collection.iterator();\n-        while ( iterator.hasNext() )\n-        {\n-            result[i++] = iterator.next();\n-        }\n-        return result;\n+      return EMPTY_LONG_ARRAY;\n     }\n \n-    /**\n-     * Compute the number of unique values in two sorted long array sets\n-     * @param left a sorted array set\n-     * @param right another sorted array set\n-     * @return int pair packed into long\n-     */\n-    static long countUnique( long[] left, long[] right )\n+    long[] difference = new long[left(uniqueCounts) + right(uniqueCounts)];\n+\n+    int cursor = 0;\n+    int l = 0;\n+    int r = 0;\n+    while (l < left.length && r < right.length)\n     {\n-        int l = 0;\n-        int r = 0;\n-        int uniqueInLeft = 0;\n-        int uniqueInRight = 0;\n-        while ( l < left.length && r < right.length )\n-        {\n-            if ( left[l] == right[r] )\n-            {\n-                l++;\n-                r++;\n-            }\n-            else if ( left[l] < right[r] )\n-            {\n-                uniqueInLeft++;\n-                l++;\n-            }\n-            else\n-            {\n-                uniqueInRight++;\n-                r++;\n-            }\n-        }\n-        uniqueInLeft += left.length - l;\n-        uniqueInRight += right.length - r;\n-        return intPair( uniqueInLeft, uniqueInRight );\n+      if (left[l] == right[r])\n+      {\n+        l++;\n+        r++;\n+      } else if (left[l] < right[r])\n+      {\n+        difference[cursor++] = left[l];\n+        l++;\n+      } else\n+      {\n+        difference[cursor++] = right[r];\n+        r++;\n+      }\n     }\n-\n-    private static long intPair( int left, int right )\n+    while (l < left.length)\n     {\n-        return (((long) left) << Integer.SIZE) | right;\n+      difference[cursor++] = left[l];\n+      l++;\n     }\n-\n-    private static int left( long pair )\n+    while (r < right.length)\n     {\n-        return (int)(pair >> Integer.SIZE);\n+      difference[cursor++] = right[r];\n+      r++;\n     }\n \n-    private static int right( long pair )\n+    assert cursor == difference.length;\n+    return difference;\n+  }\n+\n+  /**\n+   * Copy PrimitiveLongCollection into new long array\n+   *\n+   * @param collection the collection to copy\n+   * @return the new long array\n+   */\n+  public static long[] of(PrimitiveLongCollection collection)\n+  {\n+    int i = 0;\n+    long[] result = new long[collection.size()];\n+    PrimitiveLongIterator iterator = collection.iterator();\n+    while (iterator.hasNext())\n     {\n-        return (int)(pair & 0xFFFF_FFFFL);\n+      result[i++] = iterator.next();\n     }\n+    return result;\n+  }\n \n-    private static boolean isSortedSet( int[] set )\n+  /**\n+   * Compute the number of unique values in two sorted long array sets\n+   *\n+   * @param left  a sorted array set\n+   * @param right another sorted array set\n+   * @return int pair packed into long\n+   */\n+  static long countUnique(long[] left, long[] right)\n+  {\n+    int l = 0;\n+    int r = 0;\n+    int uniqueInLeft = 0;\n+    int uniqueInRight = 0;\n+    while (l < left.length && r < right.length)\n     {\n-        for ( int i = 0; i < set.length - 1; i++ )\n-        {\n-            assert set[i] < set[i + 1] : \"Array is not a sorted set: has \" + set[i] + \" before \" + set[i + 1];\n-        }\n-        return true;\n+      if (left[l] == right[r])\n+      {\n+        l++;\n+        r++;\n+      } else if (left[l] < right[r])\n+      {\n+        uniqueInLeft++;\n+        l++;\n+      } else\n+      {\n+        uniqueInRight++;\n+        r++;\n+      }\n     }\n+    uniqueInLeft += left.length - l;\n+    uniqueInRight += right.length - r;\n+    return intPair(uniqueInLeft, uniqueInRight);\n+  }\n \n-    private static boolean isSortedSet( long[] set )\n+  private static long intPair(int left, int right)\n+  {\n+    return (((long) left) << Integer.SIZE) | right;\n+  }\n+\n+  private static int left(long pair)\n+  {\n+    return (int) (pair >> Integer.SIZE);\n+  }\n+\n+  private static int right(long pair)\n+  {\n+    return (int) (pair & 0xFFFF_FFFFL);\n+  }\n+\n+  private static boolean isSortedSet(int[] set)\n+  {\n+    for (int i = 0; i < set.length - 1; i++)\n     {\n-        for ( int i = 0; i < set.length - 1; i++ )\n-        {\n-            assert set[i] < set[i + 1] : \"Array is not a sorted set: has \" + set[i] + \" before \" + set[i + 1];\n-        }\n-        return true;\n+      assert set[i] < set[i + 1] : \"Array is not a sorted set: has \" + set[i] + \" before \" + set[i + 1];\n     }\n+    return true;\n+  }\n \n-    private PrimitiveArrays()\n-    {   // No instances allowed\n+  private static boolean isSortedSet(long[] set)\n+  {\n+    for (int i = 0; i < set.length - 1; i++)\n+    {\n+      assert set[i] < set[i + 1] : \"Array is not a sorted set: has \" + set[i] + \" before \" + set[i + 1];\n     }\n+    return true;\n+  }\n+\n+  private PrimitiveArrays()\n+  {   // No instances allowed\n+  }\n }\n",
            "diff_size": 372
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "294",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3075/PrimitiveArrays.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3075/PrimitiveArrays.java\nindex 276c2ade136..ef1c2490de3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3075/PrimitiveArrays.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3075/PrimitiveArrays.java\n@@ -67,7 +67,8 @@ public class PrimitiveArrays\n                 }\n                 l++;\n             }\n-            if ( l == lhs.length )\n+\n+if ( l == lhs.length )\n             {\n                 if ( merged == null )\n                 {\n@@ -78,14 +79,16 @@ public class PrimitiveArrays\n                 m += rhs.length - r;\n                 break;\n             }\n-            if ( lhs[l] > rhs[r] )\n+\n+if ( lhs[l] > rhs[r] )\n             {\n                 if ( merged == null )\n                 {\n                     merged = Arrays.copyOf( lhs, lhs.length + rhs.length - r );\n                     m = l;\n                 }\n-                merged[m++] = rhs[r++];\n+\n+merged[m++] = rhs[r++];\n             }\n             else // i.e. ( lhs[l] == rhs[r] )\n             {\n@@ -101,16 +104,19 @@ public class PrimitiveArrays\n         {\n             return lhs;\n         }\n-        if ( l < lhs.length ) // get tail of lhs\n+\n+if ( l < lhs.length ) // get tail of lhs\n         {\n             System.arraycopy( lhs, l, merged, m, lhs.length - l );\n             m += lhs.length - l;\n         }\n-        if ( m < merged.length ) // truncate extra elements\n+\n+if ( m < merged.length ) // truncate extra elements\n         {\n             merged = Arrays.copyOf( merged, m );\n         }\n-        return merged;\n+\n+return merged;\n     }\n \n     /**\n@@ -133,7 +139,8 @@ public class PrimitiveArrays\n         {\n             return right;\n         }\n-        if ( right( uniqueCounts ) == right.length || left( uniqueCounts ) == left.length ) // non-intersecting\n+\n+if ( right( uniqueCounts ) == right.length || left( uniqueCounts ) == left.length ) // non-intersecting\n         {\n             return EMPTY_LONG_ARRAY;\n         }\n@@ -164,7 +171,8 @@ public class PrimitiveArrays\n         assert cursor == intersect.length;\n         return intersect;\n     }\n-    /**\n+\n+/**\n      * Compute the symmetric difference (set XOR basically) of two sorted long array sets.\n      * @param left a sorted array set\n      * @param right another sorted array set\n@@ -237,7 +245,8 @@ public class PrimitiveArrays\n         {\n             result[i++] = iterator.next();\n         }\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -282,12 +291,12 @@ public class PrimitiveArrays\n \n     private static int left( long pair )\n     {\n-        return (int)(pair >> Integer.SIZE);\n+        return ( int)( pair >> Integer.SIZE);\n     }\n \n     private static int right( long pair )\n     {\n-        return (int)(pair & 0xFFFF_FFFFL);\n+        return ( int)( pair & 0xFFFF_FFFFL);\n     }\n \n     private static boolean isSortedSet( int[] set )\n@@ -309,6 +318,7 @@ public class PrimitiveArrays\n     }\n \n     private PrimitiveArrays()\n-    {   // No instances allowed\n+    {\n+    // No instances allowed\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 23
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}