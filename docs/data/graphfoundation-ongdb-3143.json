{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3143",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "32",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "32",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3143/RelationshipValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3143/RelationshipValue.java\nindex f7c89649887..98e24ccc5a5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3143/RelationshipValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3143/RelationshipValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.virtual;\n \n import org.neo4j.values.AnyValueWriter;\n@@ -26,95 +27,95 @@ import static java.lang.String.format;\n \n public abstract class RelationshipValue extends VirtualRelationshipValue\n {\n-    private final long id;\n-\n-    protected RelationshipValue( long id )\n+  private final long id;\n+\n+  protected RelationshipValue(long id)\n+  {\n+    this.id = id;\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n+  {\n+    writer.writeRelationship(id, startNode().id(), endNode().id(), type(), properties());\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"-[%d]-\", id);\n+  }\n+\n+  public abstract NodeValue startNode();\n+\n+  public abstract NodeValue endNode();\n+\n+  @Override\n+  public long id()\n+  {\n+    return id;\n+  }\n+\n+  public abstract TextValue type();\n+\n+  public abstract MapValue properties();\n+\n+  public NodeValue otherNode(VirtualNodeValue node)\n+  {\n+    return node.equals(startNode()) ? endNode() : startNode();\n+  }\n+\n+  public long otherNodeId(long node)\n+  {\n+    return node == startNode().id() ? endNode().id() : startNode().id();\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"Relationship\";\n+  }\n+\n+  static class DirectRelationshipValue extends RelationshipValue\n+  {\n+    private final NodeValue startNode;\n+    private final NodeValue endNode;\n+    private final TextValue type;\n+    private final MapValue properties;\n+\n+    DirectRelationshipValue(long id, NodeValue startNode, NodeValue endNode, TextValue type, MapValue properties)\n     {\n-        this.id = id;\n-    }\n+      super(id);\n+      assert properties != null;\n \n-    @Override\n-    public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n-    {\n-        writer.writeRelationship( id, startNode().id(), endNode().id(), type(), properties() );\n+      this.startNode = startNode;\n+      this.endNode = endNode;\n+      this.type = type;\n+      this.properties = properties;\n     }\n \n     @Override\n-    public String toString()\n+    public NodeValue startNode()\n     {\n-        return format( \"-[%d]-\", id );\n+      return startNode;\n     }\n \n-    public abstract NodeValue startNode();\n-\n-    public abstract NodeValue endNode();\n-\n     @Override\n-    public long id()\n-    {\n-        return id;\n-    }\n-\n-    public abstract TextValue type();\n-\n-    public abstract MapValue properties();\n-\n-    public NodeValue otherNode( VirtualNodeValue node )\n+    public NodeValue endNode()\n     {\n-        return node.equals( startNode() ) ? endNode() : startNode();\n-    }\n-\n-    public long otherNodeId( long node )\n-    {\n-        return node == startNode().id() ? endNode().id() : startNode().id();\n+      return endNode;\n     }\n \n     @Override\n-    public String getTypeName()\n+    public TextValue type()\n     {\n-        return \"Relationship\";\n+      return type;\n     }\n \n-    static class DirectRelationshipValue extends RelationshipValue\n+    @Override\n+    public MapValue properties()\n     {\n-        private final NodeValue startNode;\n-        private final NodeValue endNode;\n-        private final TextValue type;\n-        private final MapValue properties;\n-\n-        DirectRelationshipValue( long id, NodeValue startNode, NodeValue endNode, TextValue type, MapValue properties )\n-        {\n-            super( id );\n-            assert properties != null;\n-\n-            this.startNode = startNode;\n-            this.endNode = endNode;\n-            this.type = type;\n-            this.properties = properties;\n-        }\n-\n-        @Override\n-        public NodeValue startNode()\n-        {\n-            return startNode;\n-        }\n-\n-        @Override\n-        public NodeValue endNode()\n-        {\n-            return endNode;\n-        }\n-\n-        @Override\n-        public TextValue type()\n-        {\n-            return type;\n-        }\n-\n-        @Override\n-        public MapValue properties()\n-        {\n-            return properties;\n-        }\n+      return properties;\n     }\n+  }\n }\n",
            "diff_size": 130
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3143/RelationshipValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3143/RelationshipValue.java\nindex f7c89649887..526e06d2afe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3143/RelationshipValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3143/RelationshipValue.java\n@@ -86,8 +86,7 @@ public abstract class RelationshipValue extends VirtualRelationshipValue\n         {\n             super( id );\n             assert properties != null;\n-\n-            this.startNode = startNode;\n+this.startNode = startNode;\n             this.endNode = endNode;\n             this.type = type;\n             this.properties = properties;\n@@ -117,4 +116,4 @@ public abstract class RelationshipValue extends VirtualRelationshipValue\n             return properties;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}