{
    "project_name": "SentinelDataHub-dhus-core",
    "error_id": "11",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 96).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    * Implementer shall return a list of the classes he supports.\n    * This method is automatically called by {@link #hasImpl(Class)}.\n    * It the implemented requires a different behavior, this latter method shall be overwritten.\n    *\n    * @return the list of supported classes by {@link HasImpl#hasImpl(Class)}\n    */",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "28",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/11/AbstractHasImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/11/AbstractHasImpl.java\nindex bad20f53b44..8b0e8f55252 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/11/AbstractHasImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/intellij/11/AbstractHasImpl.java\n@@ -17,32 +17,33 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.dhus.store;\n \n public abstract class AbstractHasImpl implements HasImpl\n {\n-   /**\n-    * Implementer shall return a list of the classes he supports.\n-    * This method is automatically called by {@link #hasImpl(Class)}.\n-    * It the implemented requires a different behavior, this latter method shall be overwritten.\n-    *\n-    * @return the list of supported classes by {@link HasImpl#hasImpl(Class)}\n-    */\n-   protected Class<?>[] implsTypes()\n-   {\n-      throw new UnsupportedOperationException(\"Not implemented\");\n-   }\n+    /**\n+     * Implementer shall return a list of the classes he supports.\n+     * This method is automatically called by {@link #hasImpl(Class)}.\n+     * It the implemented requires a different behavior, this latter method shall be overwritten.\n+     *\n+     * @return the list of supported classes by {@link HasImpl#hasImpl(Class)}\n+     */\n+    protected Class<?>[] implsTypes()\n+    {\n+        throw new UnsupportedOperationException(\"Not implemented\");\n+    }\n \n-   @Override\n-   public boolean hasImpl(Class<?> cl)\n-   {\n-      for (Class<?> impl: implsTypes())\n-      {\n-         if (cl.isAssignableFrom(impl))\n-         {\n-            return true;\n-         }\n-      }\n-      return false;\n-   }\n+    @Override\n+    public boolean hasImpl(Class<?> cl)\n+    {\n+        for (Class<?> impl : implsTypes())\n+        {\n+            if (cl.isAssignableFrom(impl))\n+            {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n }\n",
            "diff_size": 24
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/11/AbstractHasImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/11/AbstractHasImpl.java\nindex bad20f53b44..4a751fe406d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/11/AbstractHasImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/naturalize/11/AbstractHasImpl.java\n@@ -45,4 +45,4 @@ public abstract class AbstractHasImpl implements HasImpl\n       }\n       return false;\n    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/11/AbstractHasImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/11/AbstractHasImpl.java\nindex bad20f53b44..fd0a4e530ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/errored/1/11/AbstractHasImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/SentinelDataHub-dhus-core/codebuff/11/AbstractHasImpl.java\n@@ -28,21 +28,21 @@ public abstract class AbstractHasImpl implements HasImpl\n     *\n     * @return the list of supported classes by {@link HasImpl#hasImpl(Class)}\n     */\n-   protected Class<?>[] implsTypes()\n+   protected Class<?>[] implsTypes ()\n    {\n       throw new UnsupportedOperationException(\"Not implemented\");\n    }\n \n    @Override\n-   public boolean hasImpl(Class<?> cl)\n+   public boolean hasImpl (Class<?> cl)\n    {\n-      for (Class<?> impl: implsTypes())\n+      for (Class<?> impl : implsTypes ())\n       {\n-         if (cl.isAssignableFrom(impl))\n+         if (cl.isAssignableFrom (impl))\n          {\n             return true;\n          }\n       }\n       return false;\n    }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}