{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4500",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "74",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "89",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "193",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4500/RagManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4500/RagManager.java\nindex e1ec6be1648..1deb623a417 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4500/RagManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4500/RagManager.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.locking.community;\n \n import java.util.ArrayDeque;\n@@ -53,179 +54,177 @@ import org.neo4j.kernel.DeadlockDetectedException;\n  */\n public class RagManager\n {\n-    // if a runtime exception is thrown from any method it means that the\n-    // RWLock class hasn't kept the contract to the RagManager\n-    // The contract is:\n-    // o When a transaction gets a lock on a resource and both the readCount and\n-    // writeCount for that transaction on the resource was 0\n-    // RagManager.lockAcquired( resource ) must be invoked\n-    // o When a tx releases a lock on a resource and both the readCount and\n-    // writeCount for that transaction on the resource goes down to zero\n-    // RagManager.lockReleased( resource ) must be invoked\n-    // o After invoke to the checkWaitOn( resource ) method that didn't result\n-    // in a DeadlockDetectedException the transaction must wait\n-    // o When the transaction wakes up from waiting on a resource the\n-    // stopWaitOn( resource ) method must be invoked\n+  // if a runtime exception is thrown from any method it means that the\n+  // RWLock class hasn't kept the contract to the RagManager\n+  // The contract is:\n+  // o When a transaction gets a lock on a resource and both the readCount and\n+  // writeCount for that transaction on the resource was 0\n+  // RagManager.lockAcquired( resource ) must be invoked\n+  // o When a tx releases a lock on a resource and both the readCount and\n+  // writeCount for that transaction on the resource goes down to zero\n+  // RagManager.lockReleased( resource ) must be invoked\n+  // o After invoke to the checkWaitOn( resource ) method that didn't result\n+  // in a DeadlockDetectedException the transaction must wait\n+  // o When the transaction wakes up from waiting on a resource the\n+  // stopWaitOn( resource ) method must be invoked\n \n-    private final Map<Object,List<Object>> resourceMap = new HashMap<>();\n-    private final Map<Object, Object> waitingTxMap = new HashMap<>();\n+  private final Map<Object, List<Object>> resourceMap = new HashMap<>();\n+  private final Map<Object, Object> waitingTxMap = new HashMap<>();\n \n-    synchronized void lockAcquired( Object resource, Object tx )\n+  synchronized void lockAcquired(Object resource, Object tx)\n+  {\n+    List<Object> lockingTxList = resourceMap.get(resource);\n+    if (lockingTxList != null)\n     {\n-        List<Object> lockingTxList = resourceMap.get( resource );\n-        if ( lockingTxList != null )\n-        {\n-            assert !lockingTxList.contains( tx );\n-            lockingTxList.add( tx );\n-        }\n-        else\n-        {\n-            lockingTxList = new LinkedList<>();\n-            lockingTxList.add( tx );\n-            resourceMap.put( resource, lockingTxList );\n-        }\n+      assert !lockingTxList.contains(tx);\n+      lockingTxList.add(tx);\n+    } else\n+    {\n+      lockingTxList = new LinkedList<>();\n+      lockingTxList.add(tx);\n+      resourceMap.put(resource, lockingTxList);\n     }\n+  }\n \n-    synchronized void lockReleased( Object resource, Object tx )\n+  synchronized void lockReleased(Object resource, Object tx)\n+  {\n+    List<Object> lockingTxList = resourceMap.get(resource);\n+    if (lockingTxList == null)\n     {\n-        List<Object> lockingTxList = resourceMap.get( resource );\n-        if ( lockingTxList == null )\n-        {\n-            throw new LockException( resource + \" not found in resource map\" );\n-        }\n-\n-        if ( !lockingTxList.remove( tx ) )\n-        {\n-            throw new LockException( tx + \"not found in locking tx list\" );\n-        }\n-        if ( lockingTxList.size() == 0 )\n-        {\n-            resourceMap.remove( resource );\n-        }\n+      throw new LockException(resource + \" not found in resource map\");\n     }\n \n-    synchronized void stopWaitOn( Object resource, Object tx )\n+    if (!lockingTxList.remove(tx))\n     {\n-        if ( waitingTxMap.remove( tx ) == null )\n-        {\n-            throw new LockException( tx + \" not waiting on \" + resource );\n-        }\n+      throw new LockException(tx + \"not found in locking tx list\");\n+    }\n+    if (lockingTxList.size() == 0)\n+    {\n+      resourceMap.remove(resource);\n     }\n+  }\n \n-    // after invoke the transaction must wait on the resource\n-    synchronized void checkWaitOn( Object resource, Object tx )\n-            throws DeadlockDetectedException\n+  synchronized void stopWaitOn(Object resource, Object tx)\n+  {\n+    if (waitingTxMap.remove(tx) == null)\n     {\n-        List<Object> lockingTxList = resourceMap.get( resource );\n-        if ( lockingTxList == null )\n-        {\n-            throw new LockException( \"Illegal resource[\" + resource\n-                                     + \"], not found in map\" );\n-        }\n+      throw new LockException(tx + \" not waiting on \" + resource);\n+    }\n+  }\n \n-        if ( waitingTxMap.get( tx ) != null )\n-        {\n-            throw new LockException( tx + \" already waiting for resource\" );\n-        }\n+  // after invoke the transaction must wait on the resource\n+  synchronized void checkWaitOn(Object resource, Object tx)\n+      throws DeadlockDetectedException\n+  {\n+    List<Object> lockingTxList = resourceMap.get(resource);\n+    if (lockingTxList == null)\n+    {\n+      throw new LockException(\"Illegal resource[\" + resource\n+          + \"], not found in map\");\n+    }\n \n-        Iterator<Object> itr = lockingTxList.iterator();\n-        List<Object> checkedTransactions = new LinkedList<>();\n-        final Deque<Object> graphStack = new ArrayDeque<>();\n-        // has resource,transaction interleaved\n-        graphStack.push( resource );\n-        while ( itr.hasNext() )\n-        {\n-            Object lockingTx = itr.next();\n-            // the if statement bellow is valid because:\n-            // t1 -> r1 -> t1 (can happened with RW locks) is ok but,\n-            // t1 -> r1 -> t1&t2 where t2 -> r1 is a deadlock\n-            // think like this, we have two transactions and one resource\n-            // o t1 takes read lock on r1\n-            // o t2 takes read lock on r1\n-            // o t1 wanna take write lock on r1 but has to wait for t2\n-            // to release the read lock ( t1->r1->(t1&t2), ok not deadlock yet\n-            // o t2 wanna take write lock on r1 but has to wait for t1\n-            // to release read lock....\n-            // DEADLOCK t1->r1->(t1&t2) and t2->r1->(t1&t2) ===>\n-            // t1->r1->t2->r1->t1, t2->r1->t1->r1->t2 etc...\n-            // to allow the first three steps above we check if lockingTx ==\n-            // waitingTx on first level.\n-            // because of this special case we have to keep track on the\n-            // already \"checked\" tx since it is (now) legal for one type of\n-            // circular reference to exist (t1->r1->t1) otherwise we may\n-            // traverse t1->r1->t2->r1->t2->r1->t2... until SOE\n-            // ... KISS to you too\n-            if ( lockingTx.equals( tx ) )\n-            {\n-                continue;\n-            }\n-            graphStack.push( lockingTx );\n-            checkWaitOnRecursive( lockingTx, tx, checkedTransactions, graphStack );\n-            graphStack.pop();\n-        }\n+    if (waitingTxMap.get(tx) != null)\n+    {\n+      throw new LockException(tx + \" already waiting for resource\");\n+    }\n \n-        // ok no deadlock, we can wait on resource\n-        waitingTxMap.put( tx, resource );\n+    Iterator<Object> itr = lockingTxList.iterator();\n+    List<Object> checkedTransactions = new LinkedList<>();\n+    final Deque<Object> graphStack = new ArrayDeque<>();\n+    // has resource,transaction interleaved\n+    graphStack.push(resource);\n+    while (itr.hasNext())\n+    {\n+      Object lockingTx = itr.next();\n+      // the if statement bellow is valid because:\n+      // t1 -> r1 -> t1 (can happened with RW locks) is ok but,\n+      // t1 -> r1 -> t1&t2 where t2 -> r1 is a deadlock\n+      // think like this, we have two transactions and one resource\n+      // o t1 takes read lock on r1\n+      // o t2 takes read lock on r1\n+      // o t1 wanna take write lock on r1 but has to wait for t2\n+      // to release the read lock ( t1->r1->(t1&t2), ok not deadlock yet\n+      // o t2 wanna take write lock on r1 but has to wait for t1\n+      // to release read lock....\n+      // DEADLOCK t1->r1->(t1&t2) and t2->r1->(t1&t2) ===>\n+      // t1->r1->t2->r1->t1, t2->r1->t1->r1->t2 etc...\n+      // to allow the first three steps above we check if lockingTx ==\n+      // waitingTx on first level.\n+      // because of this special case we have to keep track on the\n+      // already \"checked\" tx since it is (now) legal for one type of\n+      // circular reference to exist (t1->r1->t1) otherwise we may\n+      // traverse t1->r1->t2->r1->t2->r1->t2... until SOE\n+      // ... KISS to you too\n+      if (lockingTx.equals(tx))\n+      {\n+        continue;\n+      }\n+      graphStack.push(lockingTx);\n+      checkWaitOnRecursive(lockingTx, tx, checkedTransactions, graphStack);\n+      graphStack.pop();\n     }\n \n-    private synchronized void checkWaitOnRecursive( Object lockingTx,\n-                                                    Object waitingTx, List<Object> checkedTransactions,\n-                                                    Deque<Object> graphStack ) throws DeadlockDetectedException\n+    // ok no deadlock, we can wait on resource\n+    waitingTxMap.put(tx, resource);\n+  }\n+\n+  private synchronized void checkWaitOnRecursive(Object lockingTx,\n+                                                 Object waitingTx, List<Object> checkedTransactions,\n+                                                 Deque<Object> graphStack) throws DeadlockDetectedException\n+  {\n+    if (lockingTx.equals(waitingTx))\n     {\n-        if ( lockingTx.equals( waitingTx ) )\n+      StringBuilder circle = null;\n+      Object resource;\n+      do\n+      {\n+        lockingTx = graphStack.pop();\n+        resource = graphStack.pop();\n+        if (circle == null)\n+        {\n+          circle = new StringBuilder();\n+          circle.append(lockingTx).append(\" <-[:HELD_BY]- \").append(resource);\n+        } else\n         {\n-            StringBuilder circle = null;\n-            Object resource;\n-            do\n-            {\n-                lockingTx = graphStack.pop();\n-                resource = graphStack.pop();\n-                if ( circle == null )\n-                {\n-                    circle = new StringBuilder();\n-                    circle.append( lockingTx ).append( \" <-[:HELD_BY]- \" ).append( resource );\n-                }\n-                else\n-                {\n-                    circle.append( \" <-[:WAITING_FOR]- \" ).append( lockingTx ).append( \" <-[:HELD_BY]- \" )\n-                          .append( resource );\n-                }\n-            }\n-            while ( !graphStack.isEmpty() );\n-            throw new DeadlockDetectedException(\n-                    waitingTx + \" can't wait on resource \" + resource + \" since => \" + circle );\n+          circle.append(\" <-[:WAITING_FOR]- \").append(lockingTx).append(\" <-[:HELD_BY]- \")\n+              .append(resource);\n         }\n-        checkedTransactions.add( lockingTx );\n-        Object resource = waitingTxMap.get( lockingTx );\n-        if ( resource != null )\n+      }\n+      while (!graphStack.isEmpty());\n+      throw new DeadlockDetectedException(\n+          waitingTx + \" can't wait on resource \" + resource + \" since => \" + circle);\n+    }\n+    checkedTransactions.add(lockingTx);\n+    Object resource = waitingTxMap.get(lockingTx);\n+    if (resource != null)\n+    {\n+      graphStack.push(resource);\n+      // if the resource doesn't exist in resorceMap that means all the\n+      // locks on the resource has been released\n+      // it is possible when this tx was in RWLock.acquire and\n+      // saw it had to wait for the lock the scheduler changes to some\n+      // other tx that will release the locks on the resource and\n+      // remove it from the map\n+      // this is ok since current tx or any other tx will wake\n+      // in the synchronized block and will be forced to do the deadlock\n+      // check once more if lock cannot be acquired\n+      List<Object> lockingTxList = resourceMap.get(resource);\n+      if (lockingTxList != null)\n+      {\n+        for (Object aLockingTxList : lockingTxList)\n         {\n-            graphStack.push( resource );\n-            // if the resource doesn't exist in resorceMap that means all the\n-            // locks on the resource has been released\n-            // it is possible when this tx was in RWLock.acquire and\n-            // saw it had to wait for the lock the scheduler changes to some\n-            // other tx that will release the locks on the resource and\n-            // remove it from the map\n-            // this is ok since current tx or any other tx will wake\n-            // in the synchronized block and will be forced to do the deadlock\n-            // check once more if lock cannot be acquired\n-            List<Object> lockingTxList = resourceMap.get( resource );\n-            if ( lockingTxList != null )\n-            {\n-                for ( Object aLockingTxList : lockingTxList )\n-                {\n-                    lockingTx = aLockingTxList;\n-                    // so we don't\n-                    if ( !checkedTransactions.contains( lockingTx ) )\n-                    {\n-                        graphStack.push( lockingTx );\n-                        checkWaitOnRecursive( lockingTx, waitingTx,\n-                                checkedTransactions, graphStack );\n-                        graphStack.pop();\n-                    }\n-                }\n-            }\n+          lockingTx = aLockingTxList;\n+          // so we don't\n+          if (!checkedTransactions.contains(lockingTx))\n+          {\n+            graphStack.push(lockingTx);\n+            checkWaitOnRecursive(lockingTx, waitingTx,\n+                checkedTransactions, graphStack);\n             graphStack.pop();\n+          }\n         }\n+      }\n+      graphStack.pop();\n     }\n+  }\n }\n",
            "diff_size": 239
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4500/RagManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4500/RagManager.java\nindex e1ec6be1648..8c7f19129f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4500/RagManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4500/RagManager.java\n@@ -68,7 +68,7 @@ public class RagManager\n     // stopWaitOn( resource ) method must be invoked\n \n     private final Map<Object,List<Object>> resourceMap = new HashMap<>();\n-    private final Map<Object, Object> waitingTxMap = new HashMap<>();\n+    private final Map<Object,Object> waitingTxMap = new HashMap<>();\n \n     synchronized void lockAcquired( Object resource, Object tx )\n     {\n@@ -98,7 +98,8 @@ public class RagManager\n         {\n             throw new LockException( tx + \"not found in locking tx list\" );\n         }\n-        if ( lockingTxList.size() == 0 )\n+\n+if ( lockingTxList.size() == 0 )\n         {\n             resourceMap.remove( resource );\n         }\n@@ -113,15 +114,13 @@ public class RagManager\n     }\n \n     // after invoke the transaction must wait on the resource\n-    synchronized void checkWaitOn( Object resource, Object tx )\n-            throws DeadlockDetectedException\n-    {\n+    synchronized void checkWaitOn( Object resource, Object tx ) throws DeadlockDetectedException\n+{\n         List<Object> lockingTxList = resourceMap.get( resource );\n         if ( lockingTxList == null )\n         {\n-            throw new LockException( \"Illegal resource[\" + resource\n-                                     + \"], not found in map\" );\n-        }\n+            throw new LockException( \"Illegal resource[\" + resource + \"], not found in map\" );\n+    }\n \n         if ( waitingTxMap.get( tx ) != null )\n         {\n@@ -168,10 +167,8 @@ public class RagManager\n         waitingTxMap.put( tx, resource );\n     }\n \n-    private synchronized void checkWaitOnRecursive( Object lockingTx,\n-                                                    Object waitingTx, List<Object> checkedTransactions,\n-                                                    Deque<Object> graphStack ) throws DeadlockDetectedException\n-    {\n+    private synchronized void checkWaitOnRecursive( Object lockingTx, Object waitingTx, List<Object> checkedTransactions, Deque<Object> graphStack ) throws DeadlockDetectedException\n+{\n         if ( lockingTx.equals( waitingTx ) )\n         {\n             StringBuilder circle = null;\n@@ -187,13 +184,11 @@ public class RagManager\n                 }\n                 else\n                 {\n-                    circle.append( \" <-[:WAITING_FOR]- \" ).append( lockingTx ).append( \" <-[:HELD_BY]- \" )\n-                          .append( resource );\n-                }\n+                    circle.append( \" <-[:WAITING_FOR]- \" ).append( lockingTx ).append( \" <-[:HELD_BY]- \" ).append( resource );\n+    }\n             }\n             while ( !graphStack.isEmpty() );\n-            throw new DeadlockDetectedException(\n-                    waitingTx + \" can't wait on resource \" + resource + \" since => \" + circle );\n+            throw new DeadlockDetectedException( waitingTx + \" can't wait on resource \" + resource + \" since => \" + circle );\n         }\n         checkedTransactions.add( lockingTx );\n         Object resource = waitingTxMap.get( lockingTx );\n@@ -221,11 +216,11 @@ public class RagManager\n                         graphStack.push( lockingTx );\n                         checkWaitOnRecursive( lockingTx, waitingTx,\n                                 checkedTransactions, graphStack );\n-                        graphStack.pop();\n+graphStack.pop();\n                     }\n                 }\n             }\n             graphStack.pop();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}