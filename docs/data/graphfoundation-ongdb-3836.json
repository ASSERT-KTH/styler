{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3836",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "102",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "262",
                    "column": "79",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3836/NotificationDetail.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3836/NotificationDetail.java\nindex b02e6cbf60a..d06ae73ce14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3836/NotificationDetail.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3836/NotificationDetail.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphdb.impl.notification;\n \n import java.util.Arrays;\n@@ -26,262 +27,260 @@ import java.util.stream.Collectors;\n \n public interface NotificationDetail\n {\n-    String name();\n+  String name();\n+\n+  String value();\n+\n+  final class Factory\n+  {\n+    private Factory()\n+    {\n+    }\n+\n+    public static NotificationDetail deprecatedName(final String oldName, final String newName)\n+    {\n+      return createDeprecationNotificationDetail(oldName, newName);\n+    }\n+\n+    public static NotificationDetail index(final String labelName, final String... propertyKeyNames)\n+    {\n+      return createNotificationDetail(\"hinted index\",\n+          String.format(\"index on :%s(%s)\", labelName,\n+              Arrays.stream(propertyKeyNames).collect(Collectors.joining(\",\"))), true);\n+    }\n+\n+    public static NotificationDetail suboptimalIndex(final String labelName, final String... propertyKeyNames)\n+    {\n+      return createNotificationDetail(\"index\",\n+          String.format(\"index on :%s(%s)\", labelName,\n+              Arrays.stream(propertyKeyNames).collect(Collectors.joining(\",\"))), true);\n+    }\n+\n+    public static NotificationDetail label(final String labelName)\n+    {\n+      return createNotificationDetail(\"the missing label name\", labelName, true);\n+    }\n+\n+    public static NotificationDetail relationshipType(final String relType)\n+    {\n+      return createNotificationDetail(\"the missing relationship type\", relType, true);\n+    }\n+\n+    public static NotificationDetail procedureWarning(final String procedure, final String warning)\n+    {\n+      return createProcedureWarningNotificationDetail(procedure, warning);\n+    }\n+\n+    public static NotificationDetail propertyName(final String name)\n+    {\n+      return createNotificationDetail(\"the missing property name\", name, true);\n+    }\n \n-    String value();\n+    public static NotificationDetail joinKey(List<String> identifiers)\n+    {\n+      boolean singular = identifiers.size() == 1;\n+      StringBuilder builder = new StringBuilder();\n+      boolean first = true;\n+      for (String identifier : identifiers)\n+      {\n+        if (first)\n+        {\n+          first = false;\n+        } else\n+        {\n+          builder.append(\", \");\n+        }\n+        builder.append(identifier);\n+      }\n+      return createNotificationDetail(\n+          singular ? \"hinted join key identifier\" : \"hinted join key identifiers\",\n+          builder.toString(),\n+          singular\n+      );\n+    }\n \n-    final class Factory\n+    public static NotificationDetail cartesianProduct(Set<String> identifiers)\n     {\n-        private Factory()\n+      return createNotificationDetail(identifiers, \"identifier\", \"identifiers\");\n+    }\n+\n+    public static NotificationDetail indexSeekOrScan(Set<String> labels)\n+    {\n+      return createNotificationDetail(labels, \"indexed label\", \"indexed labels\");\n+    }\n+\n+    public static NotificationDetail message(String name, String message)\n+    {\n+      return new NotificationDetail()\n+      {\n+        @Override\n+        public String name()\n         {\n+          return name;\n         }\n \n-        public static NotificationDetail deprecatedName( final String oldName, final String newName )\n+        @Override\n+        public String value()\n         {\n-            return createDeprecationNotificationDetail( oldName, newName );\n+          return message;\n         }\n \n-        public static NotificationDetail index( final String labelName, final String... propertyKeyNames )\n+        @Override\n+        public String toString()\n         {\n-            return createNotificationDetail( \"hinted index\",\n-                    String.format( \"index on :%s(%s)\", labelName,\n-                            Arrays.stream( propertyKeyNames ).collect( Collectors.joining( \",\" ) ) ), true );\n+          return message;\n         }\n+      };\n+    }\n \n-        public static NotificationDetail suboptimalIndex( final String labelName, final String... propertyKeyNames )\n+    public static NotificationDetail deprecatedField(final String procedure, final String field)\n+    {\n+      return new NotificationDetail()\n+      {\n+        @Override\n+        public String name()\n         {\n-            return createNotificationDetail( \"index\",\n-                    String.format( \"index on :%s(%s)\", labelName,\n-                            Arrays.stream( propertyKeyNames ).collect( Collectors.joining( \",\" ) ) ), true );\n+          return procedure;\n         }\n \n-        public static NotificationDetail label( final String labelName )\n+        @Override\n+        public String value()\n         {\n-            return createNotificationDetail( \"the missing label name\", labelName, true );\n+          return field;\n         }\n \n-        public static NotificationDetail relationshipType( final String relType )\n+        @Override\n+        public String toString()\n         {\n-            return createNotificationDetail( \"the missing relationship type\", relType, true );\n+          return String.format(\"'%s' returned by '%s' is no longer supported.\", field, procedure);\n         }\n+      };\n+    }\n \n-        public static NotificationDetail procedureWarning( final String procedure, final String warning )\n+    public static NotificationDetail bindingVarLengthRelationship(final String element)\n+    {\n+      return new NotificationDetail()\n+      {\n+        @Override\n+        public String name()\n         {\n-            return createProcedureWarningNotificationDetail( procedure, warning );\n+          return element;\n         }\n \n-        public static NotificationDetail propertyName( final String name )\n+        @Override\n+        public String value()\n         {\n-            return createNotificationDetail( \"the missing property name\", name, true );\n+          return String.format(\n+              \"Binding a variable length relationship pattern to a variable ('%s') is deprecated and \"\n+                  + \"will be unsupported in a future version. The recommended way is to bind the \"\n+                  + \"whole path to a variable, then extract the relationships:%n\"\n+                  + \"\\tMATCH p = (...)-[...]-(...)%n\"\n+                  + \"\\tWITH *, relationships(p) AS %s\",\n+              element, element);\n         }\n \n-        public static NotificationDetail joinKey( List<String> identifiers )\n+        @Override\n+        public String toString()\n         {\n-            boolean singular = identifiers.size() == 1;\n-            StringBuilder builder = new StringBuilder();\n-            boolean first = true;\n-            for ( String identifier : identifiers )\n-            {\n-                if ( first )\n-                {\n-                    first = false;\n-                }\n-                else\n-                {\n-                    builder.append( \", \" );\n-                }\n-                builder.append( identifier );\n-            }\n-            return createNotificationDetail(\n-                singular ? \"hinted join key identifier\" : \"hinted join key identifiers\",\n-                builder.toString(),\n-                singular\n-            );\n+          return value();\n         }\n+      };\n+    }\n+\n+    private static NotificationDetail createNotificationDetail(Set<String> elements, String singularTerm,\n+                                                               String pluralTerm)\n+    {\n+      StringBuilder builder = new StringBuilder();\n+      builder.append('(');\n+      String separator = \"\";\n+      for (String element : elements)\n+      {\n+        builder.append(separator);\n+        builder.append(element);\n+        separator = \", \";\n+      }\n+      builder.append(')');\n+      boolean singular = elements.size() == 1;\n+      return createNotificationDetail(singular ? singularTerm : pluralTerm, builder.toString(), singular);\n+    }\n \n-        public static NotificationDetail cartesianProduct( Set<String> identifiers )\n+    private static NotificationDetail createNotificationDetail(final String name, final String value,\n+                                                               final boolean singular)\n+    {\n+      return new NotificationDetail()\n+      {\n+        @Override\n+        public String name()\n         {\n-            return createNotificationDetail( identifiers, \"identifier\", \"identifiers\" );\n+          return name;\n         }\n \n-        public static NotificationDetail indexSeekOrScan( Set<String> labels )\n+        @Override\n+        public String value()\n         {\n-            return createNotificationDetail( labels, \"indexed label\", \"indexed labels\" );\n+          return value;\n         }\n \n-        public static NotificationDetail message( String name, String message )\n+        @Override\n+        public String toString()\n         {\n-            return new NotificationDetail()\n-            {\n-                @Override\n-                public String name()\n-                {\n-                    return name;\n-                }\n-\n-                @Override\n-                public String value()\n-                {\n-                    return message;\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    return message;\n-                }\n-            };\n+          return String.format(\"%s %s %s\", name, singular ? \"is:\" : \"are:\", value);\n         }\n+      };\n+    }\n \n-        public static NotificationDetail deprecatedField( final String procedure, final String field )\n+    private static NotificationDetail createDeprecationNotificationDetail(final String oldName, final String newName)\n+    {\n+      return new NotificationDetail()\n+      {\n+        @Override\n+        public String name()\n         {\n-            return new NotificationDetail()\n-            {\n-                @Override\n-                public String name()\n-                {\n-                    return procedure;\n-                }\n-\n-                @Override\n-                public String value()\n-                {\n-                    return field;\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    return String.format( \"'%s' returned by '%s' is no longer supported.\", field, procedure );\n-                }\n-            };\n+          return oldName;\n         }\n \n-        public static NotificationDetail bindingVarLengthRelationship( final String element )\n+        @Override\n+        public String value()\n         {\n-            return new NotificationDetail()\n-            {\n-                @Override\n-                public String name()\n-                {\n-                    return element;\n-                }\n-\n-                @Override\n-                public String value()\n-                {\n-                    return String.format(\n-                            \"Binding a variable length relationship pattern to a variable ('%s') is deprecated and \"\n-                                    + \"will be unsupported in a future version. The recommended way is to bind the \"\n-                                    + \"whole path to a variable, then extract the relationships:%n\"\n-                                    + \"\\tMATCH p = (...)-[...]-(...)%n\"\n-                                    + \"\\tWITH *, relationships(p) AS %s\",\n-                            element, element );\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    return value();\n-                }\n-            };\n+          return newName;\n         }\n \n-        private static NotificationDetail createNotificationDetail( Set<String> elements, String singularTerm,\n-                String pluralTerm )\n+        @Override\n+        public String toString()\n         {\n-            StringBuilder builder = new StringBuilder();\n-            builder.append( '(' );\n-            String separator = \"\";\n-            for ( String element : elements )\n-            {\n-                builder.append( separator );\n-                builder.append( element );\n-                separator = \", \";\n-            }\n-            builder.append( ')' );\n-            boolean singular = elements.size() == 1;\n-            return createNotificationDetail( singular ? singularTerm : pluralTerm, builder.toString(), singular );\n+          if (newName == null || newName.trim().isEmpty())\n+          {\n+            return String.format(\"'%s' is no longer supported\", oldName);\n+          } else\n+          {\n+            return String.format(\"'%s' has been replaced by '%s'\", oldName, newName);\n+          }\n         }\n+      };\n+    }\n \n-        private static NotificationDetail createNotificationDetail( final String name, final String value,\n-                final boolean singular )\n+    private static NotificationDetail createProcedureWarningNotificationDetail(String procedure, String warning)\n+    {\n+      return new NotificationDetail()\n+      {\n+        @Override\n+        public String name()\n         {\n-            return new NotificationDetail()\n-            {\n-                @Override\n-                public String name()\n-                {\n-                    return name;\n-                }\n-\n-                @Override\n-                public String value()\n-                {\n-                    return value;\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    return String.format( \"%s %s %s\", name, singular ? \"is:\" : \"are:\", value );\n-                }\n-            };\n+          return procedure;\n         }\n \n-        private static NotificationDetail createDeprecationNotificationDetail( final String oldName, final String newName )\n+        @Override\n+        public String value()\n         {\n-            return new NotificationDetail()\n-            {\n-                @Override\n-                public String name()\n-                {\n-                    return oldName;\n-                }\n-\n-                @Override\n-                public String value()\n-                {\n-                    return newName;\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    if ( newName == null || newName.trim().isEmpty() )\n-                    {\n-                        return String.format( \"'%s' is no longer supported\", oldName );\n-                    }\n-                    else\n-                    {\n-                        return String.format( \"'%s' has been replaced by '%s'\", oldName, newName );\n-                    }\n-                }\n-            };\n+          return warning;\n         }\n \n-        private static NotificationDetail createProcedureWarningNotificationDetail( String procedure, String warning )\n+        @Override\n+        public String toString()\n         {\n-            return new NotificationDetail()\n-            {\n-                @Override\n-                public String name()\n-                {\n-                    return procedure;\n-                }\n-\n-                @Override\n-                public String value()\n-                {\n-                    return warning;\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    return String.format( warning, procedure );\n-                }\n-            };\n+          return String.format(warning, procedure);\n         }\n+      };\n     }\n+  }\n }\n",
            "diff_size": 355
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 369).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3836/NotificationDetail.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3836/NotificationDetail.java\nindex b02e6cbf60a..5a251f25f1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3836/NotificationDetail.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3836/NotificationDetail.java\n@@ -46,14 +46,14 @@ public interface NotificationDetail\n             return createNotificationDetail( \"hinted index\",\n                     String.format( \"index on :%s(%s)\", labelName,\n                             Arrays.stream( propertyKeyNames ).collect( Collectors.joining( \",\" ) ) ), true );\n-        }\n+    }\n \n         public static NotificationDetail suboptimalIndex( final String labelName, final String... propertyKeyNames )\n         {\n             return createNotificationDetail( \"index\",\n                     String.format( \"index on :%s(%s)\", labelName,\n                             Arrays.stream( propertyKeyNames ).collect( Collectors.joining( \",\" ) ) ), true );\n-        }\n+    }\n \n         public static NotificationDetail label( final String labelName )\n         {\n@@ -92,11 +92,9 @@ public interface NotificationDetail\n                 }\n                 builder.append( identifier );\n             }\n-            return createNotificationDetail(\n-                singular ? \"hinted join key identifier\" : \"hinted join key identifiers\",\n-                builder.toString(),\n-                singular\n-            );\n+\n+return createNotificationDetail( singular ? \"hinted join key identifier\" : \"hinted join key identifiers\",\n+                builder.toString(), singular );\n         }\n \n         public static NotificationDetail cartesianProduct( Set<String> identifiers )\n@@ -170,13 +168,7 @@ public interface NotificationDetail\n                 @Override\n                 public String value()\n                 {\n-                    return String.format(\n-                            \"Binding a variable length relationship pattern to a variable ('%s') is deprecated and \"\n-                                    + \"will be unsupported in a future version. The recommended way is to bind the \"\n-                                    + \"whole path to a variable, then extract the relationships:%n\"\n-                                    + \"\\tMATCH p = (...)-[...]-(...)%n\"\n-                                    + \"\\tWITH *, relationships(p) AS %s\",\n-                            element, element );\n+                    return String.format( \"Binding a variable length relationship pattern to a variable ('%s') is deprecated and \" + \"will be unsupported in a future version. The recommended way is to bind the \" + \"whole path to a variable, then extract the relationships:%n\" + \"\\tMATCH p = (...)-[...]-(...)%n\" + \"\\tWITH *, relationships(p) AS %s\", element, element );\n                 }\n \n                 @Override\n@@ -204,8 +196,7 @@ public interface NotificationDetail\n             return createNotificationDetail( singular ? singularTerm : pluralTerm, builder.toString(), singular );\n         }\n \n-        private static NotificationDetail createNotificationDetail( final String name, final String value,\n-                final boolean singular )\n+        private static NotificationDetail createNotificationDetail( final String name, final String value, final boolean singular )\n         {\n             return new NotificationDetail()\n             {\n@@ -284,4 +275,4 @@ public interface NotificationDetail\n             };\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "31",
                    "column": "7",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "44",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "77",
                    "column": "17",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "77",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 357).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "column": "17",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "181",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "29",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3836/NotificationDetail.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3836/NotificationDetail.java\nindex b02e6cbf60a..fc2727579c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3836/NotificationDetail.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/3836/NotificationDetail.java\n@@ -26,262 +26,248 @@ import java.util.stream.Collectors;\n \n public interface NotificationDetail\n {\n-    String name();\n-\n-    String value();\n-\n-    final class Factory\n-    {\n-        private Factory()\n+    String name()\n+    ; String value()\n+      ; final class Factory\n         {\n-        }\n+            private Factory()\n+            {\n+            }\n \n-        public static NotificationDetail deprecatedName( final String oldName, final String newName )\n-        {\n-            return createDeprecationNotificationDetail( oldName, newName );\n-        }\n+            public static NotificationDetail deprecatedName( final String oldName, final String newName )\n+            {\n+                return createDeprecationNotificationDetail( oldName, newName );\n+            }\n \n-        public static NotificationDetail index( final String labelName, final String... propertyKeyNames )\n-        {\n-            return createNotificationDetail( \"hinted index\",\n-                    String.format( \"index on :%s(%s)\", labelName,\n-                            Arrays.stream( propertyKeyNames ).collect( Collectors.joining( \",\" ) ) ), true );\n-        }\n+            public static NotificationDetail index( final String labelName, final String ... propertyKeyNames )\n+            {\n+                return createNotificationDetail( \"hinted index\", String.format( \"index on :%s(%s)\", labelName, Arrays.stream( propertyKeyNames ).collect( Collectors.joining( \",\" ) ) ), true );\n+            }\n \n-        public static NotificationDetail suboptimalIndex( final String labelName, final String... propertyKeyNames )\n-        {\n-            return createNotificationDetail( \"index\",\n-                    String.format( \"index on :%s(%s)\", labelName,\n-                            Arrays.stream( propertyKeyNames ).collect( Collectors.joining( \",\" ) ) ), true );\n-        }\n+            public static NotificationDetail suboptimalIndex( final String labelName, final String ... propertyKeyNames )\n+            {\n+                return createNotificationDetail( \"index\", String.format( \"index on :%s(%s)\", labelName, Arrays.stream( propertyKeyNames ).collect( Collectors.joining( \",\" ) ) ), true );\n+            }\n \n-        public static NotificationDetail label( final String labelName )\n-        {\n-            return createNotificationDetail( \"the missing label name\", labelName, true );\n-        }\n+            public static NotificationDetail label( final String labelName )\n+            {\n+                return createNotificationDetail( \"the missing label name\", labelName, true );\n+            }\n \n-        public static NotificationDetail relationshipType( final String relType )\n-        {\n-            return createNotificationDetail( \"the missing relationship type\", relType, true );\n-        }\n+            public static NotificationDetail relationshipType( final String relType )\n+            {\n+                return createNotificationDetail( \"the missing relationship type\", relType, true );\n+            }\n \n-        public static NotificationDetail procedureWarning( final String procedure, final String warning )\n-        {\n-            return createProcedureWarningNotificationDetail( procedure, warning );\n-        }\n+            public static NotificationDetail procedureWarning( final String procedure, final String warning )\n+            {\n+                return createProcedureWarningNotificationDetail( procedure, warning );\n+            }\n \n-        public static NotificationDetail propertyName( final String name )\n-        {\n-            return createNotificationDetail( \"the missing property name\", name, true );\n-        }\n+            public static NotificationDetail propertyName( final String name )\n+            {\n+                return createNotificationDetail( \"the missing property name\", name, true );\n+            }\n \n-        public static NotificationDetail joinKey( List<String> identifiers )\n-        {\n-            boolean singular = identifiers.size() == 1;\n-            StringBuilder builder = new StringBuilder();\n-            boolean first = true;\n-            for ( String identifier : identifiers )\n+            public static NotificationDetail joinKey( List<String> identifiers )\n             {\n-                if ( first )\n+                boolean singular = identifiers.size() == 1;\n+                StringBuilder builder = new StringBuilder();\n+                boolean first = true;\n+                for( String identifier : identifiers)\n                 {\n-                    first = false;\n-                }\n-                else\n-                {\n-                    builder.append( \", \" );\n+                    if ( first )\n+                    {\n+                        first = false;\n+                    }\n+                    else\n+                    {\n+                        builder.append( \", \" );\n+                    }\n+\n+                    builder.append( identifier );\n                 }\n-                builder.append( identifier );\n+\n+                return createNotificationDetail( singular ? \"hinted join key identifier\" : \"hinted join key identifiers\", builder.toString(), singular );\n             }\n-            return createNotificationDetail(\n-                singular ? \"hinted join key identifier\" : \"hinted join key identifiers\",\n-                builder.toString(),\n-                singular\n-            );\n-        }\n \n-        public static NotificationDetail cartesianProduct( Set<String> identifiers )\n-        {\n-            return createNotificationDetail( identifiers, \"identifier\", \"identifiers\" );\n-        }\n+            public static NotificationDetail cartesianProduct( Set<String> identifiers )\n+            {\n+                return createNotificationDetail( identifiers, \"identifier\", \"identifiers\" );\n+            }\n \n-        public static NotificationDetail indexSeekOrScan( Set<String> labels )\n-        {\n-            return createNotificationDetail( labels, \"indexed label\", \"indexed labels\" );\n-        }\n+            public static NotificationDetail indexSeekOrScan( Set<String> labels )\n+            {\n+                return createNotificationDetail( labels, \"indexed label\", \"indexed labels\" );\n+            }\n \n-        public static NotificationDetail message( String name, String message )\n-        {\n-            return new NotificationDetail()\n+            public static NotificationDetail message( String name, String message )\n             {\n-                @Override\n-                public String name()\n-                {\n-                    return name;\n-                }\n+                return new NotificationDetail()\n+{\n+    @Override\n+    public String name()\n+    {\n+        return name;\n+    }\n \n-                @Override\n-                public String value()\n-                {\n-                    return message;\n-                }\n+    @Override\n+    public String value()\n+    {\n+        return message;\n+    }\n \n-                @Override\n-                public String toString()\n-                {\n-                    return message;\n-                }\n-            };\n-        }\n+    @Override\n+    public String toString()\n+    {\n+        return message;\n+    }\n+};\n+            }\n \n-        public static NotificationDetail deprecatedField( final String procedure, final String field )\n-        {\n-            return new NotificationDetail()\n+            public static NotificationDetail deprecatedField( final String procedure, final String field )\n             {\n-                @Override\n-                public String name()\n-                {\n-                    return procedure;\n-                }\n+                return new NotificationDetail()\n+{\n+    @Override\n+    public String name()\n+    {\n+        return procedure;\n+    }\n \n-                @Override\n-                public String value()\n-                {\n-                    return field;\n-                }\n+    @Override\n+    public String value()\n+    {\n+        return field;\n+    }\n \n-                @Override\n-                public String toString()\n-                {\n-                    return String.format( \"'%s' returned by '%s' is no longer supported.\", field, procedure );\n-                }\n-            };\n-        }\n+    @Override\n+    public String toString()\n+    {\n+        return String.format( \"'%s' returned by '%s' is no longer supported.\", field, procedure );\n+    }\n+};\n+            }\n \n-        public static NotificationDetail bindingVarLengthRelationship( final String element )\n-        {\n-            return new NotificationDetail()\n+            public static NotificationDetail bindingVarLengthRelationship( final String element )\n             {\n-                @Override\n-                public String name()\n-                {\n-                    return element;\n-                }\n+                return new NotificationDetail()\n+{\n+    @Override\n+    public String name()\n+    {\n+        return element;\n+    }\n \n-                @Override\n-                public String value()\n-                {\n-                    return String.format(\n-                            \"Binding a variable length relationship pattern to a variable ('%s') is deprecated and \"\n-                                    + \"will be unsupported in a future version. The recommended way is to bind the \"\n-                                    + \"whole path to a variable, then extract the relationships:%n\"\n-                                    + \"\\tMATCH p = (...)-[...]-(...)%n\"\n-                                    + \"\\tWITH *, relationships(p) AS %s\",\n-                            element, element );\n-                }\n+    @Override\n+    public String value()\n+    {\n+        return String.format( \"Binding a variable length relationship pattern to a variable ('%s') is deprecated and \" + \"will be unsupported in a future version. The recommended way is to bind the \" + \"whole path to a variable, then extract the relationships:%n\" + \"\\tMATCH p = (...)-[...]-(...)%n\" + \"\\tWITH *, relationships(p) AS %s\", element, element );\n+    }\n \n-                @Override\n-                public String toString()\n+    @Override\n+    public String toString()\n+    {\n+        return value();\n+    }\n+};\n+            }\n+\n+            private static NotificationDetail createNotificationDetail( Set<String> elements, String singularTerm, String pluralTerm )\n+            {\n+                StringBuilder builder = new StringBuilder();\n+                builder.append( '(' );\n+                String separator = \"\";\n+                for( String element : elements)\n                 {\n-                    return value();\n+                    builder.append( separator );\n+                    builder.append( element );\n+                    separator = \", \";\n                 }\n-            };\n-        }\n \n-        private static NotificationDetail createNotificationDetail( Set<String> elements, String singularTerm,\n-                String pluralTerm )\n-        {\n-            StringBuilder builder = new StringBuilder();\n-            builder.append( '(' );\n-            String separator = \"\";\n-            for ( String element : elements )\n-            {\n-                builder.append( separator );\n-                builder.append( element );\n-                separator = \", \";\n+                builder.append( ')' );\n+                boolean singular = elements.size() == 1;\n+                return createNotificationDetail( singular ? singularTerm : pluralTerm, builder.toString(), singular );\n             }\n-            builder.append( ')' );\n-            boolean singular = elements.size() == 1;\n-            return createNotificationDetail( singular ? singularTerm : pluralTerm, builder.toString(), singular );\n-        }\n \n-        private static NotificationDetail createNotificationDetail( final String name, final String value,\n-                final boolean singular )\n-        {\n-            return new NotificationDetail()\n+            private static NotificationDetail createNotificationDetail( final String name, final String value, final boolean singular )\n             {\n-                @Override\n-                public String name()\n-                {\n-                    return name;\n-                }\n+                return new NotificationDetail()\n+{\n+    @Override\n+    public String name()\n+    {\n+        return name;\n+    }\n \n-                @Override\n-                public String value()\n-                {\n-                    return value;\n-                }\n+    @Override\n+    public String value()\n+    {\n+        return value;\n+    }\n \n-                @Override\n-                public String toString()\n-                {\n-                    return String.format( \"%s %s %s\", name, singular ? \"is:\" : \"are:\", value );\n-                }\n-            };\n-        }\n+    @Override\n+    public String toString()\n+    {\n+        return String.format( \"%s %s %s\", name, singular ? \"is:\" : \"are:\", value );\n+    }\n+};\n+            }\n \n-        private static NotificationDetail createDeprecationNotificationDetail( final String oldName, final String newName )\n-        {\n-            return new NotificationDetail()\n+            private static NotificationDetail createDeprecationNotificationDetail( final String oldName, final String newName )\n             {\n-                @Override\n-                public String name()\n-                {\n-                    return oldName;\n-                }\n+                return new NotificationDetail()\n+{\n+    @Override\n+    public String name()\n+    {\n+        return oldName;\n+    }\n \n-                @Override\n-                public String value()\n-                {\n-                    return newName;\n-                }\n+    @Override\n+    public String value()\n+    {\n+        return newName;\n+    }\n \n-                @Override\n-                public String toString()\n-                {\n-                    if ( newName == null || newName.trim().isEmpty() )\n-                    {\n-                        return String.format( \"'%s' is no longer supported\", oldName );\n-                    }\n-                    else\n-                    {\n-                        return String.format( \"'%s' has been replaced by '%s'\", oldName, newName );\n-                    }\n-                }\n-            };\n+    @Override\n+    public String toString()\n+    {\n+        if ( newName == null|| newName.trim().isEmpty() )\n+        {\n+            return String.format( \"'%s' is no longer supported\", oldName );\n         }\n-\n-        private static NotificationDetail createProcedureWarningNotificationDetail( String procedure, String warning )\n+        else\n         {\n-            return new NotificationDetail()\n+            return String.format( \"'%s' has been replaced by '%s'\", oldName, newName );\n+        }\n+    }\n+};\n+            }\n+\n+            private static NotificationDetail createProcedureWarningNotificationDetail( String procedure, String warning )\n             {\n-                @Override\n-                public String name()\n-                {\n-                    return procedure;\n-                }\n+                return new NotificationDetail()\n+{\n+    @Override\n+    public String name()\n+    {\n+        return procedure;\n+    }\n \n-                @Override\n-                public String value()\n-                {\n-                    return warning;\n-                }\n+    @Override\n+    public String value()\n+    {\n+        return warning;\n+    }\n \n-                @Override\n-                public String toString()\n-                {\n-                    return String.format( warning, procedure );\n-                }\n-            };\n-        }\n+    @Override\n+    public String toString()\n+    {\n+        return String.format( warning, procedure );\n     }\n-}\n+};\n+            }\n+        }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 261
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}