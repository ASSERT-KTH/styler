{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1143",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "65",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1143/NodeImporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1143/NodeImporter.java\nindex f565a37f083..886a9eb95cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1143/NodeImporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1143/NodeImporter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport;\n \n import java.util.Collections;\n@@ -46,122 +47,122 @@ import static org.neo4j.kernel.impl.store.record.Record.NULL_REFERENCE;\n  */\n public class NodeImporter extends EntityImporter\n {\n-    private final BatchingLabelTokenRepository labelTokenRepository;\n-    private final NodeStore nodeStore;\n-    private final NodeRecord nodeRecord;\n-    private final IdMapper idMapper;\n-    private final BatchingIdGetter nodeIds;\n-    private final PropertyStore idPropertyStore;\n-    private final PropertyRecord idPropertyRecord;\n-    private final PropertyBlock idPropertyBlock = new PropertyBlock();\n-    private String[] labels = new String[10];\n-    private int labelsCursor;\n-\n-    private long nodeCount;\n-    private long highestId = -1;\n-    private boolean hasLabelField;\n-\n-    public NodeImporter( BatchingNeoStores stores, IdMapper idMapper, Monitor monitor )\n-    {\n-        super( stores, monitor );\n-        this.labelTokenRepository = stores.getLabelRepository();\n-        this.idMapper = idMapper;\n-        this.nodeStore = stores.getNodeStore();\n-        this.nodeRecord = nodeStore.newRecord();\n-        this.nodeIds = new BatchingIdGetter( nodeStore );\n-        this.idPropertyStore = stores.getTemporaryPropertyStore();\n-        this.idPropertyRecord = idPropertyStore.newRecord();\n-        nodeRecord.setInUse( true );\n-    }\n-\n-    @Override\n-    public boolean id( long id )\n+  private final BatchingLabelTokenRepository labelTokenRepository;\n+  private final NodeStore nodeStore;\n+  private final NodeRecord nodeRecord;\n+  private final IdMapper idMapper;\n+  private final BatchingIdGetter nodeIds;\n+  private final PropertyStore idPropertyStore;\n+  private final PropertyRecord idPropertyRecord;\n+  private final PropertyBlock idPropertyBlock = new PropertyBlock();\n+  private String[] labels = new String[10];\n+  private int labelsCursor;\n+\n+  private long nodeCount;\n+  private long highestId = -1;\n+  private boolean hasLabelField;\n+\n+  public NodeImporter(BatchingNeoStores stores, IdMapper idMapper, Monitor monitor)\n+  {\n+    super(stores, monitor);\n+    this.labelTokenRepository = stores.getLabelRepository();\n+    this.idMapper = idMapper;\n+    this.nodeStore = stores.getNodeStore();\n+    this.nodeRecord = nodeStore.newRecord();\n+    this.nodeIds = new BatchingIdGetter(nodeStore);\n+    this.idPropertyStore = stores.getTemporaryPropertyStore();\n+    this.idPropertyRecord = idPropertyStore.newRecord();\n+    nodeRecord.setInUse(true);\n+  }\n+\n+  @Override\n+  public boolean id(long id)\n+  {\n+    nodeRecord.setId(id);\n+    highestId = max(highestId, id);\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean id(Object id, Group group)\n+  {\n+    long nodeId = nodeIds.next();\n+    nodeRecord.setId(nodeId);\n+    idMapper.put(id, nodeId, group);\n+\n+    // also store this id as property in temp property store\n+    if (id != null)\n     {\n-        nodeRecord.setId( id );\n-        highestId = max( highestId, id );\n-        return true;\n+      idPropertyStore.encodeValue(idPropertyBlock, 0, Values.of(id));\n+      idPropertyRecord.addPropertyBlock(idPropertyBlock);\n+      idPropertyRecord.setId(nodeId); // yes nodeId\n+      idPropertyRecord.setInUse(true);\n+      idPropertyStore.updateRecord(idPropertyRecord);\n+      idPropertyRecord.clear();\n     }\n-\n-    @Override\n-    public boolean id( Object id, Group group )\n-    {\n-        long nodeId = nodeIds.next();\n-        nodeRecord.setId( nodeId );\n-        idMapper.put( id, nodeId, group );\n-\n-        // also store this id as property in temp property store\n-        if ( id != null )\n-        {\n-            idPropertyStore.encodeValue( idPropertyBlock, 0, Values.of( id ) );\n-            idPropertyRecord.addPropertyBlock( idPropertyBlock );\n-            idPropertyRecord.setId( nodeId ); // yes nodeId\n-            idPropertyRecord.setInUse( true );\n-            idPropertyStore.updateRecord( idPropertyRecord );\n-            idPropertyRecord.clear();\n-        }\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean labels( String[] labels )\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean labels(String[] labels)\n+  {\n+    assert !hasLabelField;\n+    if (labelsCursor + labels.length > this.labels.length)\n     {\n-        assert !hasLabelField;\n-        if ( labelsCursor + labels.length > this.labels.length )\n-        {\n-            this.labels = copyOf( this.labels, this.labels.length * 2 );\n-        }\n-        System.arraycopy( labels, 0, this.labels, labelsCursor, labels.length );\n-        labelsCursor += labels.length;\n-        return true;\n+      this.labels = copyOf(this.labels, this.labels.length * 2);\n     }\n-\n-    @Override\n-    public boolean labelField( long labelField )\n-    {\n-        hasLabelField = true;\n-        nodeRecord.setLabelField( labelField, Collections.emptyList() );\n-        return true;\n-    }\n-\n-    @Override\n-    public void endOfEntity()\n-    {\n-        // Make sure we have an ID\n-        if ( nodeRecord.getId() == NULL_REFERENCE.longValue() )\n-        {\n-            nodeRecord.setId( nodeIds.next() );\n-        }\n-\n-        // Compose the labels\n-        if ( !hasLabelField )\n-        {\n-            long[] labelIds = labelTokenRepository.getOrCreateIds( labels, labelsCursor );\n-            InlineNodeLabels.putSorted( nodeRecord, labelIds, null, nodeStore.getDynamicLabelStore() );\n-        }\n-        labelsCursor = 0;\n-\n-        // Write data to stores\n-        nodeRecord.setNextProp( createAndWritePropertyChain() );\n-        nodeRecord.setInUse( true );\n-        nodeStore.updateRecord( nodeRecord );\n-        nodeCount++;\n-        nodeRecord.clear();\n-        nodeRecord.setId( NULL_REFERENCE.longValue() );\n-        hasLabelField = false;\n-        super.endOfEntity();\n-    }\n-\n-    @Override\n-    protected PrimitiveRecord primitiveRecord()\n+    System.arraycopy(labels, 0, this.labels, labelsCursor, labels.length);\n+    labelsCursor += labels.length;\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean labelField(long labelField)\n+  {\n+    hasLabelField = true;\n+    nodeRecord.setLabelField(labelField, Collections.emptyList());\n+    return true;\n+  }\n+\n+  @Override\n+  public void endOfEntity()\n+  {\n+    // Make sure we have an ID\n+    if (nodeRecord.getId() == NULL_REFERENCE.longValue())\n     {\n-        return nodeRecord;\n+      nodeRecord.setId(nodeIds.next());\n     }\n \n-    @Override\n-    public void close()\n+    // Compose the labels\n+    if (!hasLabelField)\n     {\n-        super.close();\n-        monitor.nodesImported( nodeCount );\n-        nodeStore.setHighestPossibleIdInUse( highestId ); // for the case of #id(long)\n+      long[] labelIds = labelTokenRepository.getOrCreateIds(labels, labelsCursor);\n+      InlineNodeLabels.putSorted(nodeRecord, labelIds, null, nodeStore.getDynamicLabelStore());\n     }\n+    labelsCursor = 0;\n+\n+    // Write data to stores\n+    nodeRecord.setNextProp(createAndWritePropertyChain());\n+    nodeRecord.setInUse(true);\n+    nodeStore.updateRecord(nodeRecord);\n+    nodeCount++;\n+    nodeRecord.clear();\n+    nodeRecord.setId(NULL_REFERENCE.longValue());\n+    hasLabelField = false;\n+    super.endOfEntity();\n+  }\n+\n+  @Override\n+  protected PrimitiveRecord primitiveRecord()\n+  {\n+    return nodeRecord;\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    super.close();\n+    monitor.nodesImported(nodeCount);\n+    nodeStore.setHighestPossibleIdInUse(highestId); // for the case of #id(long)\n+  }\n }\n",
            "diff_size": 154
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "109",
                    "column": "42",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1143/NodeImporter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1143/NodeImporter.java\nindex f565a37f083..b634c905295 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1143/NodeImporter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1143/NodeImporter.java\n@@ -106,7 +106,7 @@ public class NodeImporter extends EntityImporter\n     public boolean labels( String[] labels )\n     {\n         assert !hasLabelField;\n-        if ( labelsCursor + labels.length > this.labels.length )\n+        if ( labelsCursor + labels.length> this.labels.length )\n         {\n             this.labels = copyOf( this.labels, this.labels.length * 2 );\n         }\n@@ -138,7 +138,8 @@ public class NodeImporter extends EntityImporter\n             long[] labelIds = labelTokenRepository.getOrCreateIds( labels, labelsCursor );\n             InlineNodeLabels.putSorted( nodeRecord, labelIds, null, nodeStore.getDynamicLabelStore() );\n         }\n-        labelsCursor = 0;\n+\n+labelsCursor = 0;\n \n         // Write data to stores\n         nodeRecord.setNextProp( createAndWritePropertyChain() );\n@@ -164,4 +165,4 @@ public class NodeImporter extends EntityImporter\n         monitor.nodesImported( nodeCount );\n         nodeStore.setHighestPossibleIdInUse( highestId ); // for the case of #id(long)\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}