{
    "project_name": "codefollower-H2-Research",
    "error_id": "161",
    "information": {
        "errors": [
            {
                "line": "147",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public TableType getTableType() {\n    \treturn TableType.SYSTEM_TABLE;\n    }\n\n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/161/RangeTable.java\nindex 54e6ea6f42f..a91df627f11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/161/RangeTable.java\n@@ -144,7 +144,7 @@ public class RangeTable extends Table {\n \n     @Override\n     public TableType getTableType() {\n-    \treturn TableType.SYSTEM_TABLE;\n+    return TableType.SYSTEM_TABLE;\n     }\n \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/161/RangeTable.java\nindex 54e6ea6f42f..31b183cb4a9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/161/RangeTable.java\n@@ -3,9 +3,11 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.table;\n \n import java.util.ArrayList;\n+\n import org.h2.api.ErrorCode;\n import org.h2.engine.Session;\n import org.h2.expression.Expression;\n@@ -23,223 +25,223 @@ import org.h2.value.Value;\n  */\n public class RangeTable extends Table {\n \n-    /**\n-     * The name of the range table.\n-     */\n-    public static final String NAME = \"SYSTEM_RANGE\";\n-\n-    /**\n-     * The PostgreSQL alias for the range table.\n-     */\n-    public static final String ALIAS = \"GENERATE_SERIES\";\n-\n-    private Expression min, max, step;\n-    private boolean optimized;\n-\n-    /**\n-     * Create a new range with the given start and end expressions.\n-     *\n-     * @param schema the schema (always the main schema)\n-     * @param min the start expression\n-     * @param max the end expression\n-     * @param noColumns whether this table has no columns\n-     */\n-    public RangeTable(Schema schema, Expression min, Expression max,\n-            boolean noColumns) {\n-        super(schema, 0, NAME, true, true);\n-        Column[] cols = noColumns ? new Column[0] : new Column[] { new Column(\n-                \"X\", Value.LONG) };\n-        this.min = min;\n-        this.max = max;\n-        setColumns(cols);\n-    }\n-\n-    public RangeTable(Schema schema, Expression min, Expression max,\n-            Expression step, boolean noColumns) {\n-        this(schema, min, max, noColumns);\n-        this.step = step;\n-    }\n-\n-    @Override\n-    public String getDropSQL() {\n-        return null;\n-    }\n-\n-    @Override\n-    public String getCreateSQL() {\n-        return null;\n-    }\n-\n-    @Override\n-    public String getSQL() {\n-        String sql = NAME + \"(\" + min.getSQL() + \", \" + max.getSQL();\n-        if (step != null) {\n-            sql += \", \" + step.getSQL();\n-        }\n-        return sql + \")\";\n-    }\n-\n-    @Override\n-    public boolean lock(Session session, boolean exclusive, boolean forceLockEvenInMvcc) {\n-        // nothing to do\n-        return false;\n-    }\n-\n-    @Override\n-    public void close(Session session) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public void unlock(Session s) {\n-        // nothing to do\n-    }\n-\n-    @Override\n-    public boolean isLockedExclusively() {\n-        return false;\n-    }\n-\n-    @Override\n-    public Index addIndex(Session session, String indexName,\n-            int indexId, IndexColumn[] cols, IndexType indexType,\n-            boolean create, String indexComment) {\n-        throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n-    }\n-\n-    @Override\n-    public void removeRow(Session session, Row row) {\n-        throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n-    }\n-\n-    @Override\n-    public void addRow(Session session, Row row) {\n-        throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n-    }\n-\n-    @Override\n-    public void checkSupportAlter() {\n-        throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n-    }\n-\n-    @Override\n-    public void checkRename() {\n-        throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n-    }\n-\n-    @Override\n-    public boolean canGetRowCount() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean canDrop() {\n-        return false;\n-    }\n-\n-    @Override\n-    public long getRowCount(Session session) {\n-        return Math.max(0, getMax(session) - getMin(session) + 1);\n-    }\n-\n-    @Override\n-    public TableType getTableType() {\n-    \treturn TableType.SYSTEM_TABLE;\n-    }\n-\n-    @Override\n-    public Index getScanIndex(Session session) {\n-        if (getStep(session) == 0) {\n-            throw DbException.get(ErrorCode.STEP_SIZE_MUST_NOT_BE_ZERO);\n-        }\n-        return new RangeIndex(this, IndexColumn.wrap(columns));\n-    }\n-\n-    /**\n-     * Calculate and get the start value of this range.\n-     *\n-     * @param session the session\n-     * @return the start value\n-     */\n-    public long getMin(Session session) {\n-        optimize(session);\n-        return min.getValue(session).getLong();\n-    }\n-\n-    /**\n-     * Calculate and get the end value of this range.\n-     *\n-     * @param session the session\n-     * @return the end value\n-     */\n-    public long getMax(Session session) {\n-        optimize(session);\n-        return max.getValue(session).getLong();\n-    }\n-\n-    /**\n-     * Get the increment.\n-     *\n-     * @param session the session\n-     * @return the increment (1 by default)\n-     */\n-    public long getStep(Session session) {\n-        optimize(session);\n-        if (step == null) {\n-            return 1;\n-        }\n-        return step.getValue(session).getLong();\n-    }\n-\n-    private void optimize(Session s) {\n-        if (!optimized) {\n-            min = min.optimize(s);\n-            max = max.optimize(s);\n-            if (step != null) {\n-                step = step.optimize(s);\n-            }\n-            optimized = true;\n-        }\n-    }\n-\n-    @Override\n-    public ArrayList<Index> getIndexes() {\n-        return null;\n-    }\n-\n-    @Override\n-    public void truncate(Session session) {\n-        throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n-    }\n-\n-    @Override\n-    public long getMaxDataModificationId() {\n-        return 0;\n-    }\n-\n-    @Override\n-    public Index getUniqueIndex() {\n-        return null;\n-    }\n-\n-    @Override\n-    public long getRowCountApproximation() {\n-        return 100;\n-    }\n-\n-    @Override\n-    public long getDiskSpaceUsed() {\n-        return 0;\n-    }\n-\n-    @Override\n-    public boolean isDeterministic() {\n-        return true;\n-    }\n-\n-    @Override\n-    public boolean canReference() {\n-        return false;\n-    }\n+  /**\n+   * The name of the range table.\n+   */\n+  public static final String NAME = \"SYSTEM_RANGE\";\n+\n+  /**\n+   * The PostgreSQL alias for the range table.\n+   */\n+  public static final String ALIAS = \"GENERATE_SERIES\";\n+\n+  private Expression min, max, step;\n+  private boolean optimized;\n+\n+  /**\n+   * Create a new range with the given start and end expressions.\n+   *\n+   * @param schema    the schema (always the main schema)\n+   * @param min       the start expression\n+   * @param max       the end expression\n+   * @param noColumns whether this table has no columns\n+   */\n+  public RangeTable(Schema schema, Expression min, Expression max,\n+                    boolean noColumns) {\n+    super(schema, 0, NAME, true, true);\n+    Column[] cols = noColumns ? new Column[0] : new Column[] {new Column(\n+        \"X\", Value.LONG)};\n+    this.min = min;\n+    this.max = max;\n+    setColumns(cols);\n+  }\n+\n+  public RangeTable(Schema schema, Expression min, Expression max,\n+                    Expression step, boolean noColumns) {\n+    this(schema, min, max, noColumns);\n+    this.step = step;\n+  }\n+\n+  @Override\n+  public String getDropSQL() {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getCreateSQL() {\n+    return null;\n+  }\n+\n+  @Override\n+  public String getSQL() {\n+    String sql = NAME + \"(\" + min.getSQL() + \", \" + max.getSQL();\n+    if (step != null) {\n+      sql += \", \" + step.getSQL();\n+    }\n+    return sql + \")\";\n+  }\n+\n+  @Override\n+  public boolean lock(Session session, boolean exclusive, boolean forceLockEvenInMvcc) {\n+    // nothing to do\n+    return false;\n+  }\n+\n+  @Override\n+  public void close(Session session) {\n+    // nothing to do\n+  }\n+\n+  @Override\n+  public void unlock(Session s) {\n+    // nothing to do\n+  }\n+\n+  @Override\n+  public boolean isLockedExclusively() {\n+    return false;\n+  }\n+\n+  @Override\n+  public Index addIndex(Session session, String indexName,\n+                        int indexId, IndexColumn[] cols, IndexType indexType,\n+                        boolean create, String indexComment) {\n+    throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n+  }\n+\n+  @Override\n+  public void removeRow(Session session, Row row) {\n+    throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n+  }\n+\n+  @Override\n+  public void addRow(Session session, Row row) {\n+    throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n+  }\n+\n+  @Override\n+  public void checkSupportAlter() {\n+    throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n+  }\n+\n+  @Override\n+  public void checkRename() {\n+    throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n+  }\n+\n+  @Override\n+  public boolean canGetRowCount() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean canDrop() {\n+    return false;\n+  }\n+\n+  @Override\n+  public long getRowCount(Session session) {\n+    return Math.max(0, getMax(session) - getMin(session) + 1);\n+  }\n+\n+  @Override\n+  public TableType getTableType() {\n+    return TableType.SYSTEM_TABLE;\n+  }\n+\n+  @Override\n+  public Index getScanIndex(Session session) {\n+    if (getStep(session) == 0) {\n+      throw DbException.get(ErrorCode.STEP_SIZE_MUST_NOT_BE_ZERO);\n+    }\n+    return new RangeIndex(this, IndexColumn.wrap(columns));\n+  }\n+\n+  /**\n+   * Calculate and get the start value of this range.\n+   *\n+   * @param session the session\n+   * @return the start value\n+   */\n+  public long getMin(Session session) {\n+    optimize(session);\n+    return min.getValue(session).getLong();\n+  }\n+\n+  /**\n+   * Calculate and get the end value of this range.\n+   *\n+   * @param session the session\n+   * @return the end value\n+   */\n+  public long getMax(Session session) {\n+    optimize(session);\n+    return max.getValue(session).getLong();\n+  }\n+\n+  /**\n+   * Get the increment.\n+   *\n+   * @param session the session\n+   * @return the increment (1 by default)\n+   */\n+  public long getStep(Session session) {\n+    optimize(session);\n+    if (step == null) {\n+      return 1;\n+    }\n+    return step.getValue(session).getLong();\n+  }\n+\n+  private void optimize(Session s) {\n+    if (!optimized) {\n+      min = min.optimize(s);\n+      max = max.optimize(s);\n+      if (step != null) {\n+        step = step.optimize(s);\n+      }\n+      optimized = true;\n+    }\n+  }\n+\n+  @Override\n+  public ArrayList<Index> getIndexes() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void truncate(Session session) {\n+    throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n+  }\n+\n+  @Override\n+  public long getMaxDataModificationId() {\n+    return 0;\n+  }\n+\n+  @Override\n+  public Index getUniqueIndex() {\n+    return null;\n+  }\n+\n+  @Override\n+  public long getRowCountApproximation() {\n+    return 100;\n+  }\n+\n+  @Override\n+  public long getDiskSpaceUsed() {\n+    return 0;\n+  }\n+\n+  @Override\n+  public boolean isDeterministic() {\n+    return true;\n+  }\n+\n+  @Override\n+  public boolean canReference() {\n+    return false;\n+  }\n \n }\n",
            "diff_size": 220
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/161/RangeTable.java\nindex 54e6ea6f42f..2735d8f7ab5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/161/RangeTable.java\n@@ -144,7 +144,7 @@ public class RangeTable extends Table {\n \n     @Override\n     public TableType getTableType() {\n-    \treturn TableType.SYSTEM_TABLE;\n+    return TableType.SYSTEM_TABLE;\n     }\n \n     @Override\n@@ -242,4 +242,4 @@ public class RangeTable extends Table {\n         return false;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/161/RangeTable.java\nindex 54e6ea6f42f..1d08841168a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/161/RangeTable.java\n@@ -21,18 +21,23 @@ import org.h2.value.Value;\n  * The table SYSTEM_RANGE is a virtual table that generates incrementing numbers\n  * with a given start end end point.\n  */\n+\n+\n public class RangeTable extends Table {\n \n     /**\n      * The name of the range table.\n      */\n+\n+\n     public static final String NAME = \"SYSTEM_RANGE\";\n \n     /**\n      * The PostgreSQL alias for the range table.\n      */\n-    public static final String ALIAS = \"GENERATE_SERIES\";\n \n+\n+    public static final String ALIAS = \"GENERATE_SERIES\";\n     private Expression min, max, step;\n     private boolean optimized;\n \n@@ -44,18 +49,18 @@ public class RangeTable extends Table {\n      * @param max the end expression\n      * @param noColumns whether this table has no columns\n      */\n-    public RangeTable(Schema schema, Expression min, Expression max,\n-            boolean noColumns) {\n+\n+    public RangeTable(Schema schema,\n+        Expression min,\n+            Expression max, boolean noColumns) {\n         super(schema, 0, NAME, true, true);\n-        Column[] cols = noColumns ? new Column[0] : new Column[] { new Column(\n-                \"X\", Value.LONG) };\n+        Column[] cols = noColumns ? new Column[0] : new Column[] { new Column(\"X\", Value.LONG)};\n         this.min = min;\n         this.max = max;\n         setColumns(cols);\n     }\n \n-    public RangeTable(Schema schema, Expression min, Expression max,\n-            Expression step, boolean noColumns) {\n+    public RangeTable(Schema schema, Expression min, Expression max, Expression step, boolean noColumns) {\n         this(schema, min, max, noColumns);\n         this.step = step;\n     }\n@@ -72,7 +77,8 @@ public class RangeTable extends Table {\n \n     @Override\n     public String getSQL() {\n-        String sql = NAME + \"(\" + min.getSQL() + \", \" + max.getSQL();\n+        String sql = NAME + \"(\"\n+        + min.getSQL() + \", \" + max.getSQL();\n         if (step != null) {\n             sql += \", \" + step.getSQL();\n         }\n@@ -88,11 +94,13 @@ public class RangeTable extends Table {\n     @Override\n     public void close(Session session) {\n         // nothing to do\n+\n     }\n \n     @Override\n     public void unlock(Session s) {\n         // nothing to do\n+\n     }\n \n     @Override\n@@ -101,9 +109,7 @@ public class RangeTable extends Table {\n     }\n \n     @Override\n-    public Index addIndex(Session session, String indexName,\n-            int indexId, IndexColumn[] cols, IndexType indexType,\n-            boolean create, String indexComment) {\n+    public Index addIndex(Session session, String indexName, int indexId, IndexColumn[] cols, IndexType indexType, boolean create, String indexComment) {\n         throw DbException.getUnsupportedException(\"SYSTEM_RANGE\");\n     }\n \n@@ -144,7 +150,7 @@ public class RangeTable extends Table {\n \n     @Override\n     public TableType getTableType() {\n-    \treturn TableType.SYSTEM_TABLE;\n+        return TableType.SYSTEM_TABLE;\n     }\n \n     @Override\n@@ -161,6 +167,8 @@ public class RangeTable extends Table {\n      * @param session the session\n      * @return the start value\n      */\n+\n+\n     public long getMin(Session session) {\n         optimize(session);\n         return min.getValue(session).getLong();\n@@ -172,6 +180,8 @@ public class RangeTable extends Table {\n      * @param session the session\n      * @return the end value\n      */\n+\n+\n     public long getMax(Session session) {\n         optimize(session);\n         return max.getValue(session).getLong();\n@@ -183,6 +193,8 @@ public class RangeTable extends Table {\n      * @param session the session\n      * @return the increment (1 by default)\n      */\n+\n+\n     public long getStep(Session session) {\n         optimize(session);\n         if (step == null) {\n@@ -242,4 +254,4 @@ public class RangeTable extends Table {\n         return false;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/161/RangeTable.java\nindex 54e6ea6f42f..a91df627f11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/161/RangeTable.java\n@@ -144,7 +144,7 @@ public class RangeTable extends Table {\n \n     @Override\n     public TableType getTableType() {\n-    \treturn TableType.SYSTEM_TABLE;\n+    return TableType.SYSTEM_TABLE;\n     }\n \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/161/RangeTable.java\nindex 54e6ea6f42f..afe6c496d57 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/161/RangeTable.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/161/RangeTable.java\n@@ -144,7 +144,7 @@ public class RangeTable extends Table {\n \n     @Override\n     public TableType getTableType() {\n-    \treturn TableType.SYSTEM_TABLE;\n+        return TableType.SYSTEM_TABLE;\n     }\n \n     @Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}