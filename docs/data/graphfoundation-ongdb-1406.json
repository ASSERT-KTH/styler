{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1406",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "258",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "309",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "311",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "369",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "416",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "436",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1406/DbStructureCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1406/DbStructureCollector.java\nindex 68969dbf6e8..f936da4a7ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1406/DbStructureCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1406/DbStructureCollector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.util.dbstructure;\n \n import java.util.HashMap;\n@@ -44,440 +45,439 @@ import static org.neo4j.kernel.api.schema.index.SchemaIndexDescriptor.Type.UNIQU\n \n public class DbStructureCollector implements DbStructureVisitor\n {\n-    private final TokenMap labels = new TokenMap( \"label\" );\n-    private final TokenMap propertyKeys = new TokenMap( \"property key\" );\n-    private final TokenMap relationshipTypes = new TokenMap( \"relationship types\" );\n-    private final IndexDescriptorMap regularIndices = new IndexDescriptorMap( \"regular\" );\n-    private final IndexDescriptorMap uniqueIndices = new IndexDescriptorMap( \"unique\" );\n-    private final Set<UniquenessConstraintDescriptor> uniquenessConstraints = new HashSet<>();\n-    private final Set<NodeExistenceConstraintDescriptor> nodePropertyExistenceConstraints = new HashSet<>();\n-    private final Set<RelExistenceConstraintDescriptor> relPropertyExistenceConstraints = new HashSet<>();\n-    private final Set<NodeKeyConstraintDescriptor> nodeKeyConstraints = new HashSet<>();\n-    private final PrimitiveIntLongMap nodeCounts = Primitive.intLongMap();\n-    private final Map<RelSpecifier, Long> relCounts = new HashMap<>();\n-    private long allNodesCount = -1L;\n-\n-    public DbStructureLookup lookup()\n+  private final TokenMap labels = new TokenMap(\"label\");\n+  private final TokenMap propertyKeys = new TokenMap(\"property key\");\n+  private final TokenMap relationshipTypes = new TokenMap(\"relationship types\");\n+  private final IndexDescriptorMap regularIndices = new IndexDescriptorMap(\"regular\");\n+  private final IndexDescriptorMap uniqueIndices = new IndexDescriptorMap(\"unique\");\n+  private final Set<UniquenessConstraintDescriptor> uniquenessConstraints = new HashSet<>();\n+  private final Set<NodeExistenceConstraintDescriptor> nodePropertyExistenceConstraints = new HashSet<>();\n+  private final Set<RelExistenceConstraintDescriptor> relPropertyExistenceConstraints = new HashSet<>();\n+  private final Set<NodeKeyConstraintDescriptor> nodeKeyConstraints = new HashSet<>();\n+  private final PrimitiveIntLongMap nodeCounts = Primitive.intLongMap();\n+  private final Map<RelSpecifier, Long> relCounts = new HashMap<>();\n+  private long allNodesCount = -1L;\n+\n+  public DbStructureLookup lookup()\n+  {\n+    return new DbStructureLookup()\n     {\n-        return new DbStructureLookup()\n+      @Override\n+      public Iterator<Pair<Integer, String>> labels()\n+      {\n+        return labels.iterator();\n+      }\n+\n+      @Override\n+      public Iterator<Pair<Integer, String>> properties()\n+      {\n+        return propertyKeys.iterator();\n+      }\n+\n+      @Override\n+      public Iterator<Pair<Integer, String>> relationshipTypes()\n+      {\n+        return relationshipTypes.iterator();\n+      }\n+\n+      @Override\n+      public Iterator<Pair<String, String[]>> knownIndices()\n+      {\n+        return regularIndices.iterator();\n+      }\n+\n+      @Override\n+      public Iterator<Pair<String, String[]>> knownUniqueIndices()\n+      {\n+        return uniqueIndices.iterator();\n+      }\n+\n+      @Override\n+      public Iterator<Pair<String, String[]>> knownUniqueConstraints()\n+      {\n+        return idsToNames(uniquenessConstraints);\n+      }\n+\n+      @Override\n+      public Iterator<Pair<String, String[]>> knownNodePropertyExistenceConstraints()\n+      {\n+        return idsToNames(nodePropertyExistenceConstraints);\n+      }\n+\n+      @Override\n+      public Iterator<Pair<String, String[]>> knownNodeKeyConstraints()\n+      {\n+        return idsToNames(nodeKeyConstraints);\n+      }\n+\n+      @Override\n+      public long nodesAllCardinality()\n+      {\n+        return allNodesCount;\n+      }\n+\n+      @Override\n+      public Iterator<Pair<String, String[]>> knownRelationshipPropertyExistenceConstraints()\n+      {\n+        return Iterators.map(relConstraint ->\n+        {\n+          String label = labels.byIdOrFail(relConstraint.schema().getRelTypeId());\n+          String[] propertyKeyNames = propertyKeys\n+              .byIdOrFail(relConstraint.schema().getPropertyIds());\n+          return Pair.of(label, propertyKeyNames);\n+        }, relPropertyExistenceConstraints.iterator());\n+      }\n+\n+      @Override\n+      public long nodesWithLabelCardinality(int labelId)\n+      {\n+        Long result = nodeCounts.get(labelId);\n+        return result == null ? 0L : result;\n+      }\n+\n+      @Override\n+      public long cardinalityByLabelsAndRelationshipType(int fromLabelId, int relTypeId, int toLabelId)\n+      {\n+        RelSpecifier specifier = new RelSpecifier(fromLabelId, relTypeId, toLabelId);\n+        Long result = relCounts.get(specifier);\n+        return result == null ? 0L : result;\n+      }\n+\n+      @Override\n+      public double indexSelectivity(int labelId, int... propertyKeyIds)\n+      {\n+        SchemaDescriptor descriptor = SchemaDescriptorFactory.forLabel(labelId, propertyKeyIds);\n+        IndexStatistics result1 = regularIndices.getIndex(descriptor);\n+        IndexStatistics result2 = result1 == null ? uniqueIndices.getIndex(descriptor) : result1;\n+        return result2 == null ? Double.NaN : result2.uniqueValuesPercentage;\n+      }\n+\n+      @Override\n+      public double indexPropertyExistsSelectivity(int labelId, int... propertyKeyIds)\n+      {\n+        SchemaDescriptor descriptor = SchemaDescriptorFactory.forLabel(labelId, propertyKeyIds);\n+        IndexStatistics result1 = regularIndices.getIndex(descriptor);\n+        IndexStatistics result2 = result1 == null ? uniqueIndices.getIndex(descriptor) : result1;\n+        return result2 == null ? Double.NaN : result2.size;\n+      }\n+\n+      private Iterator<Pair<String, String[]>> idsToNames(Iterable<? extends LabelSchemaSupplier> nodeConstraints)\n+      {\n+        return Iterators.map(nodeConstraint ->\n         {\n-            @Override\n-            public Iterator<Pair<Integer, String>> labels()\n-            {\n-                return labels.iterator();\n-            }\n-\n-            @Override\n-            public Iterator<Pair<Integer, String>> properties()\n-            {\n-                return propertyKeys.iterator();\n-            }\n-\n-            @Override\n-            public Iterator<Pair<Integer, String>> relationshipTypes()\n-            {\n-                return relationshipTypes.iterator();\n-            }\n-\n-            @Override\n-            public Iterator<Pair<String,String[]>> knownIndices()\n-            {\n-                return regularIndices.iterator();\n-            }\n-\n-            @Override\n-            public Iterator<Pair<String,String[]>> knownUniqueIndices()\n-            {\n-                return uniqueIndices.iterator();\n-            }\n-\n-            @Override\n-            public Iterator<Pair<String,String[]>> knownUniqueConstraints()\n-            {\n-                return idsToNames( uniquenessConstraints );\n-            }\n-\n-            @Override\n-            public Iterator<Pair<String,String[]>> knownNodePropertyExistenceConstraints()\n-            {\n-                return idsToNames( nodePropertyExistenceConstraints );\n-            }\n-\n-            @Override\n-            public Iterator<Pair<String,String[]>> knownNodeKeyConstraints()\n-            {\n-                return idsToNames( nodeKeyConstraints );\n-            }\n-\n-            @Override\n-            public long nodesAllCardinality()\n-            {\n-                return allNodesCount;\n-            }\n-\n-            @Override\n-            public Iterator<Pair<String,String[]>> knownRelationshipPropertyExistenceConstraints()\n-            {\n-                return Iterators.map( relConstraint ->\n-                {\n-                    String label = labels.byIdOrFail( relConstraint.schema().getRelTypeId() );\n-                    String[] propertyKeyNames = propertyKeys\n-                            .byIdOrFail( relConstraint.schema().getPropertyIds() );\n-                    return Pair.of( label, propertyKeyNames );\n-                }, relPropertyExistenceConstraints.iterator() );\n-            }\n-\n-            @Override\n-            public long nodesWithLabelCardinality( int labelId )\n-            {\n-                Long result = nodeCounts.get( labelId );\n-                return result == null ? 0L : result;\n-            }\n-\n-            @Override\n-            public long cardinalityByLabelsAndRelationshipType( int fromLabelId, int relTypeId, int toLabelId )\n-            {\n-                RelSpecifier specifier = new RelSpecifier( fromLabelId, relTypeId, toLabelId );\n-                Long result = relCounts.get( specifier );\n-                return result == null ? 0L : result;\n-            }\n-\n-            @Override\n-            public double indexSelectivity( int labelId, int... propertyKeyIds )\n-            {\n-                SchemaDescriptor descriptor = SchemaDescriptorFactory.forLabel( labelId, propertyKeyIds );\n-                IndexStatistics result1 = regularIndices.getIndex( descriptor );\n-                IndexStatistics result2 = result1 == null ? uniqueIndices.getIndex( descriptor ) : result1;\n-                return result2 == null ? Double.NaN : result2.uniqueValuesPercentage;\n-            }\n-\n-            @Override\n-            public double indexPropertyExistsSelectivity( int labelId, int... propertyKeyIds )\n-            {\n-                SchemaDescriptor descriptor = SchemaDescriptorFactory.forLabel( labelId, propertyKeyIds );\n-                IndexStatistics result1 = regularIndices.getIndex( descriptor );\n-                IndexStatistics result2 = result1 == null ? uniqueIndices.getIndex( descriptor ) : result1;\n-                return result2 == null ? Double.NaN : result2.size;\n-            }\n-\n-            private Iterator<Pair<String,String[]>> idsToNames( Iterable<? extends LabelSchemaSupplier> nodeConstraints )\n-            {\n-                return Iterators.map( nodeConstraint ->\n-                {\n-                    String label = labels.byIdOrFail( nodeConstraint.schema().getLabelId() );\n-                    String[] propertyKeyNames = propertyKeys\n-                            .byIdOrFail( nodeConstraint.schema().getPropertyIds() );\n-                    return Pair.of( label, propertyKeyNames );\n-                }, nodeConstraints.iterator() );\n-            }\n-        };\n+          String label = labels.byIdOrFail(nodeConstraint.schema().getLabelId());\n+          String[] propertyKeyNames = propertyKeys\n+              .byIdOrFail(nodeConstraint.schema().getPropertyIds());\n+          return Pair.of(label, propertyKeyNames);\n+        }, nodeConstraints.iterator());\n+      }\n+    };\n+  }\n+\n+  @Override\n+  public void visitLabel(int labelId, String labelName)\n+  {\n+    labels.putToken(labelId, labelName);\n+  }\n+\n+  @Override\n+  public void visitPropertyKey(int propertyKeyId, String propertyKeyName)\n+  {\n+    propertyKeys.putToken(propertyKeyId, propertyKeyName);\n+  }\n+\n+  @Override\n+  public void visitRelationshipType(int relTypeId, String relTypeName)\n+  {\n+    relationshipTypes.putToken(relTypeId, relTypeName);\n+  }\n+\n+  @Override\n+  public void visitIndex(SchemaIndexDescriptor descriptor, String userDescription,\n+                         double uniqueValuesPercentage, long size)\n+  {\n+    IndexDescriptorMap indices = descriptor.type() == UNIQUE ? uniqueIndices : regularIndices;\n+    indices.putIndex(descriptor.schema(), userDescription, uniqueValuesPercentage, size);\n+  }\n+\n+  @Override\n+  public void visitUniqueConstraint(UniquenessConstraintDescriptor constraint, String userDescription)\n+  {\n+    if (!uniquenessConstraints.add(constraint))\n+    {\n+      throw new IllegalArgumentException(\n+          format(\"Duplicated unique constraint %s for %s\", constraint, userDescription)\n+      );\n     }\n+  }\n \n-    @Override\n-    public void visitLabel( int labelId, String labelName )\n+  @Override\n+  public void visitNodePropertyExistenceConstraint(NodeExistenceConstraintDescriptor constraint,\n+                                                   String userDescription)\n+  {\n+    if (!nodePropertyExistenceConstraints.add(constraint))\n     {\n-        labels.putToken( labelId, labelName );\n+      throw new IllegalArgumentException(\n+          format(\"Duplicated node property existence constraint %s for %s\", constraint, userDescription)\n+      );\n     }\n+  }\n \n-    @Override\n-    public void visitPropertyKey( int propertyKeyId, String propertyKeyName )\n+  @Override\n+  public void visitRelationshipPropertyExistenceConstraint(RelExistenceConstraintDescriptor constraint,\n+                                                           String userDescription)\n+  {\n+    if (!relPropertyExistenceConstraints.add(constraint))\n     {\n-        propertyKeys.putToken( propertyKeyId, propertyKeyName );\n+      throw new IllegalArgumentException(\n+          format(\"Duplicated relationship property existence constraint %s for %s\",\n+              constraint, userDescription)\n+      );\n     }\n+  }\n \n-    @Override\n-    public void visitRelationshipType( int relTypeId, String relTypeName )\n+  @Override\n+  public void visitNodeKeyConstraint(NodeKeyConstraintDescriptor constraint, String userDescription)\n+  {\n+    if (!nodeKeyConstraints.add(constraint))\n     {\n-        relationshipTypes.putToken( relTypeId, relTypeName );\n+      throw new IllegalArgumentException(\n+          format(\"Duplicated node key constraint %s for %s\", constraint, userDescription)\n+      );\n     }\n+  }\n \n-    @Override\n-    public void visitIndex( SchemaIndexDescriptor descriptor, String userDescription,\n-                            double uniqueValuesPercentage, long size )\n+  @Override\n+  public void visitAllNodesCount(long nodeCount)\n+  {\n+    if (allNodesCount < 0)\n     {\n-        IndexDescriptorMap indices = descriptor.type() == UNIQUE ? uniqueIndices : regularIndices;\n-        indices.putIndex( descriptor.schema(), userDescription, uniqueValuesPercentage, size );\n+      allNodesCount = nodeCount;\n+    } else\n+    {\n+      throw new IllegalStateException(\"Already received node count\");\n     }\n+  }\n \n-    @Override\n-    public void visitUniqueConstraint( UniquenessConstraintDescriptor constraint, String userDescription )\n+  @Override\n+  public void visitNodeCount(int labelId, String labelName, long nodeCount)\n+  {\n+    if (nodeCounts.put(labelId, nodeCount) != IntKeyLongValueTable.NULL)\n     {\n-        if ( !uniquenessConstraints.add( constraint ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicated unique constraint %s for %s\", constraint, userDescription )\n-            );\n-        }\n+      throw new IllegalArgumentException(\n+          format(\"Duplicate node count %s for label with id %s\", nodeCount, labelName)\n+      );\n     }\n+  }\n \n-    @Override\n-    public void visitNodePropertyExistenceConstraint( NodeExistenceConstraintDescriptor constraint,\n-            String userDescription )\n+  @Override\n+  public void visitRelCount(int startLabelId, int relTypeId, int endLabelId, String relCountQuery, long relCount)\n+  {\n+    RelSpecifier specifier = new RelSpecifier(startLabelId, relTypeId, endLabelId);\n+\n+    if (relCounts.put(specifier, relCount) != null)\n     {\n-        if ( !nodePropertyExistenceConstraints.add( constraint ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicated node property existence constraint %s for %s\", constraint, userDescription )\n-            );\n-        }\n+      throw new IllegalArgumentException(\n+          format(\"Duplicate rel count %s for relationship specifier %s (corresponding query: %s)\", relCount,\n+              specifier, relCountQuery)\n+      );\n     }\n+  }\n \n-    @Override\n-    public void visitRelationshipPropertyExistenceConstraint( RelExistenceConstraintDescriptor constraint,\n-            String userDescription )\n+  private static class RelSpecifier\n+  {\n+    public final int fromLabelId;\n+    public final int relTypeId;\n+    public final int toLabelId;\n+\n+    RelSpecifier(int fromLabelId, int relTypeId, int toLabelId)\n     {\n-        if ( !relPropertyExistenceConstraints.add( constraint ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicated relationship property existence constraint %s for %s\",\n-                            constraint, userDescription )\n-            );\n-        }\n+      this.fromLabelId = fromLabelId;\n+      this.relTypeId = relTypeId;\n+      this.toLabelId = toLabelId;\n     }\n \n     @Override\n-    public void visitNodeKeyConstraint( NodeKeyConstraintDescriptor constraint, String userDescription )\n+    public String toString()\n     {\n-        if ( !nodeKeyConstraints.add( constraint ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicated node key constraint %s for %s\", constraint, userDescription )\n-            );\n-        }\n+      return format(\n+          \"RelSpecifier{fromLabelId=%d, relTypeId=%d, toLabelId=%d}\", fromLabelId, relTypeId, toLabelId\n+      );\n     }\n \n     @Override\n-    public void visitAllNodesCount( long nodeCount )\n+    public boolean equals(Object o)\n     {\n-        if ( allNodesCount < 0 )\n-        {\n-            allNodesCount = nodeCount;\n-        }\n-        else\n-        {\n-            throw new IllegalStateException( \"Already received node count\" );\n-        }\n+      if (this == o)\n+      {\n+        return true;\n+      }\n+      if (o == null || getClass() != o.getClass())\n+      {\n+        return false;\n+      }\n+\n+      RelSpecifier that = (RelSpecifier) o;\n+      return fromLabelId == that.fromLabelId && relTypeId == that.relTypeId && toLabelId == that.toLabelId;\n     }\n \n     @Override\n-    public void visitNodeCount( int labelId, String labelName, long nodeCount )\n+    public int hashCode()\n     {\n-        if ( nodeCounts.put( labelId, nodeCount ) != IntKeyLongValueTable.NULL )\n-        {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicate node count %s for label with id %s\", nodeCount, labelName )\n-            );\n-        }\n+      int result = fromLabelId;\n+      result = 31 * result + relTypeId;\n+      result = 31 * result + toLabelId;\n+      return result;\n     }\n+  }\n \n-    @Override\n-    public void visitRelCount( int startLabelId, int relTypeId, int endLabelId, String relCountQuery, long relCount )\n+  private static class IndexStatistics\n+  {\n+    private final double uniqueValuesPercentage;\n+    private final long size;\n+\n+    private IndexStatistics(double uniqueValuesPercentage, long size)\n     {\n-        RelSpecifier specifier = new RelSpecifier( startLabelId, relTypeId, endLabelId );\n+      this.uniqueValuesPercentage = uniqueValuesPercentage;\n+      this.size = size;\n+    }\n+  }\n \n-        if ( relCounts.put( specifier, relCount ) != null )\n-        {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicate rel count %s for relationship specifier %s (corresponding query: %s)\", relCount,\n-                            specifier, relCountQuery )\n-            );\n-        }\n+  private class IndexDescriptorMap implements Iterable<Pair<String, String[]>>\n+  {\n+    private final String indexType;\n+    private final Map<SchemaDescriptor, IndexStatistics> indexMap = new HashMap<>();\n+\n+    IndexDescriptorMap(String indexType)\n+    {\n+      this.indexType = indexType;\n     }\n \n-    private static class RelSpecifier\n+    public void putIndex(SchemaDescriptor descriptor, String userDescription, double uniqueValuesPercentage, long size)\n     {\n-        public final int fromLabelId;\n-        public final int relTypeId;\n-        public final int toLabelId;\n+      if (indexMap.containsKey(descriptor))\n+      {\n+        throw new IllegalArgumentException(\n+            format(\"Duplicate index descriptor %s for %s index %s\", descriptor, indexType,\n+                userDescription)\n+        );\n+      }\n+\n+      indexMap.put(descriptor, new IndexStatistics(uniqueValuesPercentage, size));\n+    }\n \n-        RelSpecifier( int fromLabelId, int relTypeId, int toLabelId )\n-        {\n-            this.fromLabelId = fromLabelId;\n-            this.relTypeId = relTypeId;\n-            this.toLabelId = toLabelId;\n-        }\n+    public IndexStatistics getIndex(SchemaDescriptor descriptor)\n+    {\n+      return indexMap.get(descriptor);\n+    }\n \n+    @Override\n+    public Iterator<Pair<String, String[]>> iterator()\n+    {\n+      final Iterator<SchemaDescriptor> iterator = indexMap.keySet().iterator();\n+      return new Iterator<Pair<String, String[]>>()\n+      {\n         @Override\n-        public String toString()\n+        public boolean hasNext()\n         {\n-            return format(\n-                \"RelSpecifier{fromLabelId=%d, relTypeId=%d, toLabelId=%d}\", fromLabelId, relTypeId, toLabelId\n-            );\n+          return iterator.hasNext();\n         }\n \n         @Override\n-        public boolean equals( Object o )\n+        public Pair<String, String[]> next()\n         {\n-            if ( this == o )\n-            {\n-                return true;\n-            }\n-            if ( o == null || getClass() != o.getClass() )\n-            {\n-                return false;\n-            }\n-\n-            RelSpecifier that = (RelSpecifier) o;\n-            return fromLabelId == that.fromLabelId && relTypeId == that.relTypeId && toLabelId == that.toLabelId;\n+          //TODO: Add support for composite indexes\n+          SchemaDescriptor next = iterator.next();\n+          String label = labels.byIdOrFail(next.keyId());\n+          String[] propertyKeyNames = propertyKeys.byIdOrFail(next.getPropertyIds());\n+          return Pair.of(label, propertyKeyNames);\n         }\n \n         @Override\n-        public int hashCode()\n+        public void remove()\n         {\n-            int result = fromLabelId;\n-            result = 31 * result + relTypeId;\n-            result = 31 * result + toLabelId;\n-            return result;\n+          iterator.remove();\n         }\n+      };\n     }\n+  }\n \n-    private static class IndexStatistics\n-    {\n-        private final double uniqueValuesPercentage;\n-        private final long size;\n+  private static class TokenMap implements Iterable<Pair<Integer, String>>\n+  {\n+    private final String tokenType;\n+    private final Map<Integer, String> forward = new HashMap<>();\n+    private final Map<String, Integer> backward = new HashMap<>();\n \n-        private IndexStatistics( double uniqueValuesPercentage, long size )\n-        {\n-            this.uniqueValuesPercentage = uniqueValuesPercentage;\n-            this.size = size;\n-        }\n+    TokenMap(String tokenType)\n+    {\n+      this.tokenType = tokenType;\n     }\n \n-    private class IndexDescriptorMap implements Iterable<Pair<String,String[]>>\n+    public String byIdOrFail(int token)\n     {\n-        private final String indexType;\n-        private final Map<SchemaDescriptor, IndexStatistics> indexMap = new HashMap<>();\n-\n-        IndexDescriptorMap( String indexType )\n-        {\n-            this.indexType = indexType;\n-        }\n-\n-        public void putIndex( SchemaDescriptor descriptor, String userDescription, double uniqueValuesPercentage, long size )\n-        {\n-            if ( indexMap.containsKey( descriptor ) )\n-            {\n-                throw new IllegalArgumentException(\n-                        format( \"Duplicate index descriptor %s for %s index %s\", descriptor, indexType,\n-                                userDescription )\n-                );\n-            }\n-\n-            indexMap.put( descriptor, new IndexStatistics( uniqueValuesPercentage, size ) );\n-        }\n-\n-        public IndexStatistics getIndex( SchemaDescriptor descriptor )\n-        {\n-            return indexMap.get( descriptor );\n-        }\n-\n-        @Override\n-        public Iterator<Pair<String,String[]>> iterator()\n-        {\n-            final Iterator<SchemaDescriptor> iterator = indexMap.keySet().iterator();\n-            return new Iterator<Pair<String,String[]>>()\n-            {\n-                @Override\n-                public boolean hasNext()\n-                {\n-                    return iterator.hasNext();\n-                }\n-\n-                @Override\n-                public Pair<String,String[]> next()\n-                {\n-                    //TODO: Add support for composite indexes\n-                    SchemaDescriptor next = iterator.next();\n-                    String label = labels.byIdOrFail( next.keyId() );\n-                    String[] propertyKeyNames = propertyKeys.byIdOrFail( next.getPropertyIds() );\n-                    return Pair.of( label, propertyKeyNames );\n-                }\n-\n-                @Override\n-                public void remove()\n-                {\n-                    iterator.remove();\n-                }\n-            };\n-        }\n+      String result = forward.get(token);\n+      if (result == null)\n+      {\n+        throw new IllegalArgumentException(format(\"Didn't find %s token with id %s\", tokenType, token));\n+      }\n+      return result;\n     }\n \n-    private static class TokenMap implements Iterable<Pair<Integer, String>>\n+    public String[] byIdOrFail(int[] tokens)\n     {\n-        private final String tokenType;\n-        private final Map<Integer, String> forward = new HashMap<>();\n-        private final Map<String, Integer> backward = new HashMap<>();\n-\n-        TokenMap( String tokenType )\n-        {\n-            this.tokenType = tokenType;\n-        }\n+      String[] results = new String[tokens.length];\n+      for (int i = 0; i < tokens.length; i++)\n+      {\n+        results[i] = byIdOrFail(tokens[i]);\n+      }\n+      return results;\n+    }\n \n-        public String byIdOrFail( int token )\n-        {\n-            String result = forward.get( token );\n-            if ( result == null )\n-            {\n-                throw new IllegalArgumentException( format( \"Didn't find %s token with id %s\", tokenType, token ) );\n-            }\n-            return result;\n-        }\n+    public void putToken(int token, String name)\n+    {\n+      if (forward.containsKey(token))\n+      {\n+        throw new IllegalArgumentException(\n+            format(\"Duplicate id %s for name %s in %s token map\", token, name, tokenType)\n+        );\n+      }\n+\n+      if (backward.containsKey(name))\n+      {\n+        throw new IllegalArgumentException(\n+            format(\"Duplicate name %s for id %s in %s token map\", name, token, tokenType)\n+        );\n+      }\n+\n+      forward.put(token, name);\n+      backward.put(name, token);\n+    }\n \n-        public String[] byIdOrFail( int[] tokens )\n+    @Override\n+    public Iterator<Pair<Integer, String>> iterator()\n+    {\n+      final Iterator<Map.Entry<Integer, String>> iterator = forward.entrySet().iterator();\n+      return new Iterator<Pair<Integer, String>>()\n+      {\n+        @Override\n+        public boolean hasNext()\n         {\n-            String[] results = new String[tokens.length];\n-            for ( int i = 0; i < tokens.length; i++ )\n-            {\n-                results[i] = byIdOrFail( tokens[i] );\n-            }\n-            return results;\n+          return iterator.hasNext();\n         }\n \n-        public void putToken( int token, String name )\n+        @Override\n+        public Pair<Integer, String> next()\n         {\n-            if ( forward.containsKey( token ) )\n-            {\n-                throw new IllegalArgumentException(\n-                        format( \"Duplicate id %s for name %s in %s token map\", token, name, tokenType )\n-                );\n-            }\n-\n-            if ( backward.containsKey( name ) )\n-            {\n-                throw new IllegalArgumentException(\n-                        format( \"Duplicate name %s for id %s in %s token map\", name, token, tokenType )\n-                );\n-            }\n-\n-            forward.put( token, name );\n-            backward.put( name, token );\n+          Map.Entry<Integer, String> next = iterator.next();\n+          return Pair.of(next.getKey(), next.getValue());\n         }\n \n         @Override\n-        public Iterator<Pair<Integer, String>> iterator()\n+        public void remove()\n         {\n-            final Iterator<Map.Entry<Integer, String>> iterator = forward.entrySet().iterator();\n-            return new Iterator<Pair<Integer, String>>()\n-            {\n-                @Override\n-                public boolean hasNext()\n-                {\n-                    return iterator.hasNext();\n-                }\n-\n-                @Override\n-                public Pair<Integer, String> next()\n-                {\n-                    Map.Entry<Integer, String> next = iterator.next();\n-                    return Pair.of( next.getKey(), next.getValue() );\n-                }\n-\n-                @Override\n-                public void remove()\n-                {\n-                    iterator.remove();\n-                }\n-            };\n+          iterator.remove();\n         }\n+      };\n     }\n+  }\n }\n",
            "diff_size": 546
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1406/DbStructureCollector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1406/DbStructureCollector.java\nindex 68969dbf6e8..74b849b946d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1406/DbStructureCollector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1406/DbStructureCollector.java\n@@ -54,7 +54,7 @@ public class DbStructureCollector implements DbStructureVisitor\n     private final Set<RelExistenceConstraintDescriptor> relPropertyExistenceConstraints = new HashSet<>();\n     private final Set<NodeKeyConstraintDescriptor> nodeKeyConstraints = new HashSet<>();\n     private final PrimitiveIntLongMap nodeCounts = Primitive.intLongMap();\n-    private final Map<RelSpecifier, Long> relCounts = new HashMap<>();\n+    private final Map<RelSpecifier,Long> relCounts = new HashMap<>();\n     private long allNodesCount = -1L;\n \n     public DbStructureLookup lookup()\n@@ -121,9 +121,8 @@ public class DbStructureCollector implements DbStructureVisitor\n                 return Iterators.map( relConstraint ->\n                 {\n                     String label = labels.byIdOrFail( relConstraint.schema().getRelTypeId() );\n-                    String[] propertyKeyNames = propertyKeys\n-                            .byIdOrFail( relConstraint.schema().getPropertyIds() );\n-                    return Pair.of( label, propertyKeyNames );\n+                    String[] propertyKeyNames = propertyKeys.byIdOrFail( relConstraint.schema().getPropertyIds() );\n+return Pair.of( label, propertyKeyNames );\n                 }, relPropertyExistenceConstraints.iterator() );\n             }\n \n@@ -165,9 +164,8 @@ public class DbStructureCollector implements DbStructureVisitor\n                 return Iterators.map( nodeConstraint ->\n                 {\n                     String label = labels.byIdOrFail( nodeConstraint.schema().getLabelId() );\n-                    String[] propertyKeyNames = propertyKeys\n-                            .byIdOrFail( nodeConstraint.schema().getPropertyIds() );\n-                    return Pair.of( label, propertyKeyNames );\n+                    String[] propertyKeyNames = propertyKeys.byIdOrFail( nodeConstraint.schema().getPropertyIds() );\n+return Pair.of( label, propertyKeyNames );\n                 }, nodeConstraints.iterator() );\n             }\n         };\n@@ -192,9 +190,8 @@ public class DbStructureCollector implements DbStructureVisitor\n     }\n \n     @Override\n-    public void visitIndex( SchemaIndexDescriptor descriptor, String userDescription,\n-                            double uniqueValuesPercentage, long size )\n-    {\n+    public void visitIndex( SchemaIndexDescriptor descriptor, String userDescription, double uniqueValuesPercentage, long size )\n+{\n         IndexDescriptorMap indices = descriptor.type() == UNIQUE ? uniqueIndices : regularIndices;\n         indices.putIndex( descriptor.schema(), userDescription, uniqueValuesPercentage, size );\n     }\n@@ -204,9 +201,7 @@ public class DbStructureCollector implements DbStructureVisitor\n     {\n         if ( !uniquenessConstraints.add( constraint ) )\n         {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicated unique constraint %s for %s\", constraint, userDescription )\n-            );\n+            throw new IllegalArgumentException( format( \"Duplicated unique constraint %s for %s\", constraint, userDescription ) );\n         }\n     }\n \n@@ -216,9 +211,7 @@ public class DbStructureCollector implements DbStructureVisitor\n     {\n         if ( !nodePropertyExistenceConstraints.add( constraint ) )\n         {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicated node property existence constraint %s for %s\", constraint, userDescription )\n-            );\n+            throw new IllegalArgumentException( format( \"Duplicated node property existence constraint %s for %s\", constraint, userDescription ) );\n         }\n     }\n \n@@ -228,10 +221,8 @@ public class DbStructureCollector implements DbStructureVisitor\n     {\n         if ( !relPropertyExistenceConstraints.add( constraint ) )\n         {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicated relationship property existence constraint %s for %s\",\n-                            constraint, userDescription )\n-            );\n+            throw new IllegalArgumentException( format( \"Duplicated relationship property existence constraint %s for %s\",\n+                            constraint, userDescription ) );\n         }\n     }\n \n@@ -240,9 +231,7 @@ public class DbStructureCollector implements DbStructureVisitor\n     {\n         if ( !nodeKeyConstraints.add( constraint ) )\n         {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicated node key constraint %s for %s\", constraint, userDescription )\n-            );\n+            throw new IllegalArgumentException( format( \"Duplicated node key constraint %s for %s\", constraint, userDescription ) );\n         }\n     }\n \n@@ -264,9 +253,7 @@ public class DbStructureCollector implements DbStructureVisitor\n     {\n         if ( nodeCounts.put( labelId, nodeCount ) != IntKeyLongValueTable.NULL )\n         {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicate node count %s for label with id %s\", nodeCount, labelName )\n-            );\n+            throw new IllegalArgumentException( format( \"Duplicate node count %s for label with id %s\", nodeCount, labelName ) );\n         }\n     }\n \n@@ -274,21 +261,20 @@ public class DbStructureCollector implements DbStructureVisitor\n     public void visitRelCount( int startLabelId, int relTypeId, int endLabelId, String relCountQuery, long relCount )\n     {\n         RelSpecifier specifier = new RelSpecifier( startLabelId, relTypeId, endLabelId );\n-\n-        if ( relCounts.put( specifier, relCount ) != null )\n+if ( relCounts.put( specifier, relCount ) != null )\n         {\n-            throw new IllegalArgumentException(\n-                    format( \"Duplicate rel count %s for relationship specifier %s (corresponding query: %s)\", relCount,\n-                            specifier, relCountQuery )\n-            );\n+            throw new IllegalArgumentException( format( \"Duplicate rel count %s for relationship specifier %s (corresponding query: %s)\", relCount,\n+                            specifier, relCountQuery ) );\n         }\n     }\n \n     private static class RelSpecifier\n     {\n         public final int fromLabelId;\n-        public final int relTypeId;\n-        public final int toLabelId;\n+\n+public final int relTypeId;\n+\n+public final int toLabelId;\n \n         RelSpecifier( int fromLabelId, int relTypeId, int toLabelId )\n         {\n@@ -300,9 +286,7 @@ public class DbStructureCollector implements DbStructureVisitor\n         @Override\n         public String toString()\n         {\n-            return format(\n-                \"RelSpecifier{fromLabelId=%d, relTypeId=%d, toLabelId=%d}\", fromLabelId, relTypeId, toLabelId\n-            );\n+            return format( \"RelSpecifier{fromLabelId=%d, relTypeId=%d, toLabelId=%d}\", fromLabelId, relTypeId, toLabelId );\n         }\n \n         @Override\n@@ -312,7 +296,8 @@ public class DbStructureCollector implements DbStructureVisitor\n             {\n                 return true;\n             }\n-            if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n             {\n                 return false;\n             }\n@@ -346,7 +331,7 @@ public class DbStructureCollector implements DbStructureVisitor\n     private class IndexDescriptorMap implements Iterable<Pair<String,String[]>>\n     {\n         private final String indexType;\n-        private final Map<SchemaDescriptor, IndexStatistics> indexMap = new HashMap<>();\n+        private final Map<SchemaDescriptor,IndexStatistics> indexMap = new HashMap<>();\n \n         IndexDescriptorMap( String indexType )\n         {\n@@ -357,10 +342,8 @@ public class DbStructureCollector implements DbStructureVisitor\n         {\n             if ( indexMap.containsKey( descriptor ) )\n             {\n-                throw new IllegalArgumentException(\n-                        format( \"Duplicate index descriptor %s for %s index %s\", descriptor, indexType,\n-                                userDescription )\n-                );\n+                throw new IllegalArgumentException( format( \"Duplicate index descriptor %s for %s index %s\", descriptor, indexType,\n+                                userDescription ) );\n             }\n \n             indexMap.put( descriptor, new IndexStatistics( uniqueValuesPercentage, size ) );\n@@ -405,8 +388,8 @@ public class DbStructureCollector implements DbStructureVisitor\n     private static class TokenMap implements Iterable<Pair<Integer, String>>\n     {\n         private final String tokenType;\n-        private final Map<Integer, String> forward = new HashMap<>();\n-        private final Map<String, Integer> backward = new HashMap<>();\n+        private final Map<Integer,String> forward = new HashMap<>();\n+        private final Map<String,Integer> backward = new HashMap<>();\n \n         TokenMap( String tokenType )\n         {\n@@ -420,7 +403,8 @@ public class DbStructureCollector implements DbStructureVisitor\n             {\n                 throw new IllegalArgumentException( format( \"Didn't find %s token with id %s\", tokenType, token ) );\n             }\n-            return result;\n+\n+return result;\n         }\n \n         public String[] byIdOrFail( int[] tokens )\n@@ -430,23 +414,20 @@ public class DbStructureCollector implements DbStructureVisitor\n             {\n                 results[i] = byIdOrFail( tokens[i] );\n             }\n-            return results;\n+\n+return results;\n         }\n \n         public void putToken( int token, String name )\n         {\n             if ( forward.containsKey( token ) )\n             {\n-                throw new IllegalArgumentException(\n-                        format( \"Duplicate id %s for name %s in %s token map\", token, name, tokenType )\n-                );\n+                throw new IllegalArgumentException( format( \"Duplicate id %s for name %s in %s token map\", token, name, tokenType ) );\n             }\n \n             if ( backward.containsKey( name ) )\n             {\n-                throw new IllegalArgumentException(\n-                        format( \"Duplicate name %s for id %s in %s token map\", name, token, tokenType )\n-                );\n+                throw new IllegalArgumentException( format( \"Duplicate name %s for id %s in %s token map\", name, token, tokenType ) );\n             }\n \n             forward.put( token, name );\n@@ -466,9 +447,9 @@ public class DbStructureCollector implements DbStructureVisitor\n                 }\n \n                 @Override\n-                public Pair<Integer, String> next()\n+                public Pair<Integer,String> next()\n                 {\n-                    Map.Entry<Integer, String> next = iterator.next();\n+                    Map.Entry<Integer,String> next = iterator.next();\n                     return Pair.of( next.getKey(), next.getValue() );\n                 }\n \n@@ -480,4 +461,4 @@ public class DbStructureCollector implements DbStructureVisitor\n             };\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 61
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}