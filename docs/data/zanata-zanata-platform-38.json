{
    "project_name": "zanata-zanata-platform",
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "132",
                "column": "33",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        HProject hProject = projectDAO.getBySlug(getProjectSlug());\n\n        if (hProject == null) { // must be a create operation\n            response = request.evaluatePreconditions();\n            if (response != null) {\n                return response.build();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/38/ProjectService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/38/ProjectService.java\nindex c2c14f4bbfd..696f5b95b2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/38/ProjectService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/38/ProjectService.java\n@@ -129,8 +129,9 @@ public class ProjectService implements ProjectResource {\n \n         HProject hProject = projectDAO.getBySlug(getProjectSlug());\n \n-        if (hProject == null) { // must be a create operation\n-            response = request.evaluatePreconditions();\n+        if (hProject == null) {\n+            // must be a create operation\n+             response = request.evaluatePreconditions();\n             if (response != null) {\n                 return response.build();\n             }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "134",
                    "column": "29",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/38/ProjectService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/38/ProjectService.java\nindex c2c14f4bbfd..36d92e6cff3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/38/ProjectService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/38/ProjectService.java\n@@ -54,244 +54,246 @@ import com.google.common.base.Objects;\n @Path(ProjectResource.SERVICE_PATH)\n @Transactional\n public class ProjectService implements ProjectResource {\n-    /** Project Identifier. */\n-    @PathParam(\"projectSlug\")\n-    String projectSlug;\n-\n-    @SuppressFBWarnings(\"SE_BAD_FIELD\")\n-    @HeaderParam(HttpHeaderNames.ACCEPT)\n-    @DefaultValue(MediaType.APPLICATION_XML)\n-    @Context\n-    private MediaType accept;\n-\n-    @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n-    @Context\n-    private UriInfo uri;\n-    @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n-    @Context\n-    private Request request;\n-\n-    @Inject\n-    ProjectDAO projectDAO;\n-\n-    @Inject\n-    AccountDAO accountDAO;\n-\n-    @Inject\n-    ZanataIdentity identity;\n-\n-    @Inject\n-    WebhookServiceImpl webhookServiceImpl;\n-\n-    @Inject\n-    ETagUtils eTagUtils;\n-\n-    @Inject\n-    UrlUtil urlUtil;\n-\n-    @Nonnull\n-    public String getProjectSlug() {\n-        return projectSlug;\n+  /**\n+   * Project Identifier.\n+   */\n+  @PathParam(\"projectSlug\")\n+  String projectSlug;\n+\n+  @SuppressFBWarnings(\"SE_BAD_FIELD\")\n+  @HeaderParam(HttpHeaderNames.ACCEPT)\n+  @DefaultValue(MediaType.APPLICATION_XML)\n+  @Context\n+  private MediaType accept;\n+\n+  @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n+  @Context\n+  private UriInfo uri;\n+  @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n+  @Context\n+  private Request request;\n+\n+  @Inject\n+  ProjectDAO projectDAO;\n+\n+  @Inject\n+  AccountDAO accountDAO;\n+\n+  @Inject\n+  ZanataIdentity identity;\n+\n+  @Inject\n+  WebhookServiceImpl webhookServiceImpl;\n+\n+  @Inject\n+  ETagUtils eTagUtils;\n+\n+  @Inject\n+  UrlUtil urlUtil;\n+\n+  @Nonnull\n+  public String getProjectSlug() {\n+    return projectSlug;\n+  }\n+\n+  @Override\n+  public Response head() {\n+    EntityTag etag = eTagUtils.generateTagForProject(projectSlug);\n+    ResponseBuilder response = request.evaluatePreconditions(etag);\n+    if (response != null) {\n+      return response.build();\n+    }\n+    return Response.ok().tag(etag).build();\n+  }\n+\n+  @Override\n+  public Response get() {\n+    try {\n+      EntityTag etag = eTagUtils.generateTagForProject(getProjectSlug());\n+\n+      ResponseBuilder response = request.evaluatePreconditions(etag);\n+      if (response != null) {\n+        return response.build();\n+      }\n+\n+      HProject hProject = projectDAO.getBySlug(getProjectSlug());\n+      Project project = toResource(hProject, accept);\n+      return Response.ok(project).tag(etag).build();\n+    } catch (NoSuchEntityException e) {\n+      return Response.status(Status.NOT_FOUND).build();\n+    }\n+  }\n+\n+  @Override\n+  public Response put(Project project) {\n+    ResponseBuilder response;\n+    EntityTag etag;\n+\n+    HProject hProject = projectDAO.getBySlug(getProjectSlug());\n+\n+    if (hProject == null) { // must be a create operation\n+      response = request.evaluatePreconditions();\n+      if (response != null) {\n+        return response.build();\n+      }\n+      hProject = new HProject();\n+      hProject.setSlug(projectSlug);\n+      // pre-emptive entity permission check\n+      identity.checkPermission(hProject, \"insert\");\n+\n+      response = Response.created(urlUtil.restPathURI(uri.getPath()));\n+    } else if (Objects.equal(hProject.getStatus(), OBSOLETE)) {\n+      // Project is obsolete\n+      return Response.status(Status.FORBIDDEN)\n+        .entity(\"Project '\" + projectSlug + \"' is obsolete.\")\n+        .build();\n+    } else {\n+      // must be an update operation\n+      // pre-emptive entity permission check\n+      identity.checkPermission(hProject, \"update\");\n+      etag = eTagUtils.generateTagForProject(projectSlug);\n+      response = request.evaluatePreconditions(etag);\n+      if (response != null) {\n+        return response.build();\n+      }\n+\n+      response = Response.ok();\n     }\n \n-    @Override\n-    public Response head() {\n-        EntityTag etag = eTagUtils.generateTagForProject(projectSlug);\n-        ResponseBuilder response = request.evaluatePreconditions(etag);\n-        if (response != null) {\n-            return response.build();\n-        }\n-        return Response.ok().tag(etag).build();\n+    if (Objects.equal(hProject.getStatus(), READONLY)\n+      && !Objects.equal(project.getStatus(), ACTIVE)) {\n+      // User attempting to update a ReadOnly project\n+      return Response.status(Status.FORBIDDEN)\n+        .entity(\"Project '\" + projectSlug + \"' is read-only.\")\n+        .build();\n     }\n \n-    @Override\n-    public Response get() {\n-        try {\n-            EntityTag etag = eTagUtils.generateTagForProject(getProjectSlug());\n-\n-            ResponseBuilder response = request.evaluatePreconditions(etag);\n-            if (response != null) {\n-                return response.build();\n-            }\n-\n-            HProject hProject = projectDAO.getBySlug(getProjectSlug());\n-            Project project = toResource(hProject, accept);\n-            return Response.ok(project).tag(etag).build();\n-        } catch (NoSuchEntityException e) {\n-            return Response.status(Status.NOT_FOUND).build();\n-        }\n+    // null project type accepted for compatibility with old clients\n+    if (project.getDefaultType() != null) {\n+      if (project.getDefaultType().isEmpty()) {\n+        return Response.status(Status.BAD_REQUEST)\n+          .entity(\"No valid default project type was specified.\")\n+          .build();\n+      }\n+\n+      try {\n+        ProjectType.getValueOf(project.getDefaultType());\n+      } catch (Exception e) {\n+        String validTypes =\n+          StringUtils.join(ProjectType.values(), \", \");\n+        return Response\n+          .status(Status.BAD_REQUEST)\n+          .entity(\"Project type \\\"\" + project.getDefaultType()\n+            + \"\\\" not valid for this server.\"\n+            + \" Valid types: [\" + validTypes + \"]\").build();\n+      }\n     }\n \n-    @Override\n-    public Response put(Project project) {\n-        ResponseBuilder response;\n-        EntityTag etag;\n-\n-        HProject hProject = projectDAO.getBySlug(getProjectSlug());\n-\n-        if (hProject == null) { // must be a create operation\n-            response = request.evaluatePreconditions();\n-            if (response != null) {\n-                return response.build();\n-            }\n-            hProject = new HProject();\n-            hProject.setSlug(projectSlug);\n-            // pre-emptive entity permission check\n-            identity.checkPermission(hProject, \"insert\");\n-\n-            response = Response.created(urlUtil.restPathURI(uri.getPath()));\n-        } else if (Objects.equal(hProject.getStatus(), OBSOLETE)) {\n-            // Project is obsolete\n-            return Response.status(Status.FORBIDDEN)\n-                    .entity(\"Project '\" + projectSlug + \"' is obsolete.\")\n-                    .build();\n-        } else {\n-            // must be an update operation\n-            // pre-emptive entity permission check\n-            identity.checkPermission(hProject, \"update\");\n-            etag = eTagUtils.generateTagForProject(projectSlug);\n-            response = request.evaluatePreconditions(etag);\n-            if (response != null) {\n-                return response.build();\n-            }\n-\n-            response = Response.ok();\n-        }\n-\n-        if (Objects.equal(hProject.getStatus(), READONLY)\n-                && !Objects.equal(project.getStatus(), ACTIVE)) {\n-            // User attempting to update a ReadOnly project\n-            return Response.status(Status.FORBIDDEN)\n-                    .entity(\"Project '\" + projectSlug + \"' is read-only.\")\n-                    .build();\n-        }\n-\n-        // null project type accepted for compatibility with old clients\n-        if (project.getDefaultType() != null) {\n-            if (project.getDefaultType().isEmpty()) {\n-                return Response.status(Status.BAD_REQUEST)\n-                        .entity(\"No valid default project type was specified.\")\n-                        .build();\n-            }\n-\n-            try {\n-                ProjectType.getValueOf(project.getDefaultType());\n-            } catch (Exception e) {\n-                String validTypes =\n-                        StringUtils.join(ProjectType.values(), \", \");\n-                return Response\n-                        .status(Status.BAD_REQUEST)\n-                        .entity(\"Project type \\\"\" + project.getDefaultType()\n-                                + \"\\\" not valid for this server.\"\n-                                + \" Valid types: [\" + validTypes + \"]\").build();\n-            }\n-        }\n-\n-        updateProject(project, hProject);\n-\n-        if (hProject.getMaintainers().isEmpty()) {\n-            HAccount hAccount =\n-                    accountDAO.getByUsername(identity.getCredentials()\n-                            .getUsername());\n-            if (hAccount != null && hAccount.getPerson() != null) {\n-                hProject.addMaintainer(hAccount.getPerson());\n-            }\n-        }\n-\n-        projectDAO.makePersistent(hProject);\n-        projectDAO.flush();\n-        etag = eTagUtils.generateTagForProject(projectSlug);\n-\n-        webhookServiceImpl.processWebhookMaintainerChanged(\n-                hProject.getSlug(),\n-                identity.getCredentials().getUsername(),\n-                Maintainer, hProject.getWebHooks(),\n-                ProjectMaintainerChangedEvent.ChangeType.ADD);\n-        return response.tag(etag).build();\n+    updateProject(project, hProject);\n \n+    if (hProject.getMaintainers().isEmpty()) {\n+      HAccount hAccount =\n+        accountDAO.getByUsername(identity.getCredentials()\n+          .getUsername());\n+      if (hAccount != null && hAccount.getPerson() != null) {\n+        hProject.addMaintainer(hAccount.getPerson());\n+      }\n     }\n \n-    @Override\n-    public Response getGlossaryQualifiedName() {\n-        try {\n-            EntityTag etag = eTagUtils.generateTagForProject(getProjectSlug());\n-            ResponseBuilder response = request.evaluatePreconditions(etag);\n-            if (response != null) {\n-                return response.build();\n-            }\n-\n-            QualifiedName qualifiedName =\n-                    new QualifiedName(getGlossaryQualifiedName(projectSlug));\n-            return Response.ok(qualifiedName).tag(etag).build();\n-        } catch (NoSuchEntityException e) {\n-            return Response.status(Status.NOT_FOUND).build();\n-        }\n+    projectDAO.makePersistent(hProject);\n+    projectDAO.flush();\n+    etag = eTagUtils.generateTagForProject(projectSlug);\n+\n+    webhookServiceImpl.processWebhookMaintainerChanged(\n+      hProject.getSlug(),\n+      identity.getCredentials().getUsername(),\n+      Maintainer, hProject.getWebHooks(),\n+      ProjectMaintainerChangedEvent.ChangeType.ADD);\n+    return response.tag(etag).build();\n+\n+  }\n+\n+  @Override\n+  public Response getGlossaryQualifiedName() {\n+    try {\n+      EntityTag etag = eTagUtils.generateTagForProject(getProjectSlug());\n+      ResponseBuilder response = request.evaluatePreconditions(etag);\n+      if (response != null) {\n+        return response.build();\n+      }\n+\n+      QualifiedName qualifiedName =\n+        new QualifiedName(getGlossaryQualifiedName(projectSlug));\n+      return Response.ok(qualifiedName).tag(etag).build();\n+    } catch (NoSuchEntityException e) {\n+      return Response.status(Status.NOT_FOUND).build();\n     }\n-\n-    public static String getGlossaryQualifiedName(String projectSlug) {\n-        return GlossaryUtil.generateQualifiedName(PROJECT_QUALIFIER_PREFIX,\n-                projectSlug);\n+  }\n+\n+  public static String getGlossaryQualifiedName(String projectSlug) {\n+    return GlossaryUtil.generateQualifiedName(PROJECT_QUALIFIER_PREFIX,\n+      projectSlug);\n+  }\n+\n+  private static void updateProject(Project from, HProject to) {\n+    to.setName(from.getName());\n+    to.setDescription(from.getDescription());\n+    if (from.getDefaultType() != null) {\n+      ProjectType projectType;\n+      try {\n+        projectType = ProjectType.getValueOf(from.getDefaultType());\n+      } catch (Exception e) {\n+        projectType = null;\n+      }\n+\n+      if (projectType != null) {\n+        to.setDefaultProjectType(projectType);\n+      }\n     }\n-\n-    private static void updateProject(Project from, HProject to) {\n-        to.setName(from.getName());\n-        to.setDescription(from.getDescription());\n-        if (from.getDefaultType() != null) {\n-            ProjectType projectType;\n-            try {\n-                projectType = ProjectType.getValueOf(from.getDefaultType());\n-            } catch (Exception e) {\n-                projectType = null;\n-            }\n-\n-            if (projectType != null) {\n-                to.setDefaultProjectType(projectType);\n-            }\n-        }\n-        if (from.getStatus() != null) {\n-            to.setStatus(from.getStatus());\n-        }\n-\n-        // keep source URLs unless they are specifically overwritten\n-        if (from.getSourceViewURL() != null) {\n-            to.setSourceViewURL(from.getSourceViewURL());\n-        }\n-        if (from.getSourceCheckoutURL() != null) {\n-            to.setSourceCheckoutURL(from.getSourceCheckoutURL());\n-        }\n+    if (from.getStatus() != null) {\n+      to.setStatus(from.getStatus());\n     }\n \n-    private static void getProjectDetails(HProject from, Project to) {\n-        to.setId(from.getSlug());\n-        to.setName(from.getName());\n-        to.setDescription(from.getDescription());\n-        to.setStatus(from.getStatus());\n-        if (from.getDefaultProjectType() != null) {\n-            to.setDefaultType(from.getDefaultProjectType().toString());\n-        }\n-        to.setSourceViewURL(from.getSourceViewURL());\n-        to.setSourceCheckoutURL(from.getSourceCheckoutURL());\n+    // keep source URLs unless they are specifically overwritten\n+    if (from.getSourceViewURL() != null) {\n+      to.setSourceViewURL(from.getSourceViewURL());\n     }\n-\n-    public static Project toResource(HProject hProject, MediaType mediaType) {\n-        Project project = new Project();\n-        getProjectDetails(hProject, project);\n-        for (HProjectIteration pIt : hProject.getProjectIterations()) {\n-            ProjectIteration iteration = new ProjectIteration();\n-            ProjectVersionService.getProjectVersionDetails(pIt, iteration);\n-\n-            iteration\n-                    .getLinks(true)\n-                    .add(new Link(\n-                            URI.create(\"iterations/i/\" + pIt.getSlug()),\n-                            \"self\",\n-                            MediaTypes\n-                                    .createFormatSpecificType(\n-                                            MediaTypes.APPLICATION_ZANATA_PROJECT_ITERATION,\n-                                            mediaType)));\n-            project.getIterations(true).add(iteration);\n-        }\n-        return project;\n+    if (from.getSourceCheckoutURL() != null) {\n+      to.setSourceCheckoutURL(from.getSourceCheckoutURL());\n+    }\n+  }\n+\n+  private static void getProjectDetails(HProject from, Project to) {\n+    to.setId(from.getSlug());\n+    to.setName(from.getName());\n+    to.setDescription(from.getDescription());\n+    to.setStatus(from.getStatus());\n+    if (from.getDefaultProjectType() != null) {\n+      to.setDefaultType(from.getDefaultProjectType().toString());\n+    }\n+    to.setSourceViewURL(from.getSourceViewURL());\n+    to.setSourceCheckoutURL(from.getSourceCheckoutURL());\n+  }\n+\n+  public static Project toResource(HProject hProject, MediaType mediaType) {\n+    Project project = new Project();\n+    getProjectDetails(hProject, project);\n+    for (HProjectIteration pIt : hProject.getProjectIterations()) {\n+      ProjectIteration iteration = new ProjectIteration();\n+      ProjectVersionService.getProjectVersionDetails(pIt, iteration);\n+\n+      iteration\n+        .getLinks(true)\n+        .add(new Link(\n+          URI.create(\"iterations/i/\" + pIt.getSlug()),\n+          \"self\",\n+          MediaTypes\n+            .createFormatSpecificType(\n+              MediaTypes.APPLICATION_ZANATA_PROJECT_ITERATION,\n+              mediaType)));\n+      project.getIterations(true).add(iteration);\n     }\n+    return project;\n+  }\n \n }\n",
            "diff_size": 345
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "117",
                    "column": "33",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/38/ProjectService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/38/ProjectService.java\nindex c2c14f4bbfd..a0665d27bcb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/38/ProjectService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/38/ProjectService.java\n@@ -7,7 +7,6 @@ import static org.zanata.model.ProjectRole.Maintainer;\n import static org.zanata.rest.service.GlossaryService.PROJECT_QUALIFIER_PREFIX;\n \n import java.net.URI;\n-\n import javax.annotation.Nonnull;\n import javax.enterprise.context.RequestScoped;\n import javax.ws.rs.DefaultValue;\n@@ -22,7 +21,6 @@ import javax.ws.rs.core.Response;\n import javax.ws.rs.core.Response.ResponseBuilder;\n import javax.ws.rs.core.Response.Status;\n import javax.ws.rs.core.UriInfo;\n-\n import edu.umd.cs.findbugs.annotations.SuppressFBWarnings;\n import org.apache.commons.lang3.StringUtils;\n import org.jboss.resteasy.util.HttpHeaderNames;\n@@ -46,9 +44,9 @@ import org.zanata.service.impl.WebhookServiceImpl;\n import org.zanata.util.GlossaryUtil;\n import org.zanata.util.UrlUtil;\n import org.zanata.webhook.events.ProjectMaintainerChangedEvent;\n-\n import com.google.common.base.Objects;\n \n+\n @RequestScoped\n @Named(\"projectService\")\n @Path(ProjectResource.SERVICE_PATH)\n@@ -57,38 +55,29 @@ public class ProjectService implements ProjectResource {\n     /** Project Identifier. */\n     @PathParam(\"projectSlug\")\n     String projectSlug;\n-\n     @SuppressFBWarnings(\"SE_BAD_FIELD\")\n     @HeaderParam(HttpHeaderNames.ACCEPT)\n     @DefaultValue(MediaType.APPLICATION_XML)\n     @Context\n     private MediaType accept;\n-\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n     @Context\n     private UriInfo uri;\n     @SuppressFBWarnings(value = \"SE_BAD_FIELD\")\n     @Context\n     private Request request;\n-\n     @Inject\n     ProjectDAO projectDAO;\n-\n     @Inject\n     AccountDAO accountDAO;\n-\n     @Inject\n     ZanataIdentity identity;\n-\n     @Inject\n     WebhookServiceImpl webhookServiceImpl;\n-\n     @Inject\n     ETagUtils eTagUtils;\n-\n     @Inject\n     UrlUtil urlUtil;\n-\n     @Nonnull\n     public String getProjectSlug() {\n         return projectSlug;\n@@ -108,12 +97,10 @@ public class ProjectService implements ProjectResource {\n     public Response get() {\n         try {\n             EntityTag etag = eTagUtils.generateTagForProject(getProjectSlug());\n-\n             ResponseBuilder response = request.evaluatePreconditions(etag);\n             if (response != null) {\n                 return response.build();\n             }\n-\n             HProject hProject = projectDAO.getBySlug(getProjectSlug());\n             Project project = toResource(hProject, accept);\n             return Response.ok(project).tag(etag).build();\n@@ -126,9 +113,7 @@ public class ProjectService implements ProjectResource {\n     public Response put(Project project) {\n         ResponseBuilder response;\n         EntityTag etag;\n-\n         HProject hProject = projectDAO.getBySlug(getProjectSlug());\n-\n         if (hProject == null) { // must be a create operation\n             response = request.evaluatePreconditions();\n             if (response != null) {\n@@ -138,13 +123,10 @@ public class ProjectService implements ProjectResource {\n             hProject.setSlug(projectSlug);\n             // pre-emptive entity permission check\n             identity.checkPermission(hProject, \"insert\");\n-\n             response = Response.created(urlUtil.restPathURI(uri.getPath()));\n         } else if (Objects.equal(hProject.getStatus(), OBSOLETE)) {\n             // Project is obsolete\n-            return Response.status(Status.FORBIDDEN)\n-                    .entity(\"Project '\" + projectSlug + \"' is obsolete.\")\n-                    .build();\n+            return Response.status(Status.FORBIDDEN).entity(\"Project '\" + projectSlug + \"' is obsolete.\").build();\n         } else {\n             // must be an update operation\n             // pre-emptive entity permission check\n@@ -154,61 +136,37 @@ public class ProjectService implements ProjectResource {\n             if (response != null) {\n                 return response.build();\n             }\n-\n             response = Response.ok();\n         }\n-\n-        if (Objects.equal(hProject.getStatus(), READONLY)\n-                && !Objects.equal(project.getStatus(), ACTIVE)) {\n+        if (Objects.equal(hProject.getStatus(), READONLY) && !Objects.equal(project.getStatus(), ACTIVE)) {\n             // User attempting to update a ReadOnly project\n-            return Response.status(Status.FORBIDDEN)\n-                    .entity(\"Project '\" + projectSlug + \"' is read-only.\")\n-                    .build();\n+            return Response.status(Status.FORBIDDEN).entity(\"Project '\" + projectSlug + \"' is read-only.\").build();\n         }\n \n         // null project type accepted for compatibility with old clients\n         if (project.getDefaultType() != null) {\n             if (project.getDefaultType().isEmpty()) {\n-                return Response.status(Status.BAD_REQUEST)\n-                        .entity(\"No valid default project type was specified.\")\n-                        .build();\n+                return Response.status(Status.BAD_REQUEST).entity(\"No valid default project type was specified.\").build();\n             }\n-\n             try {\n                 ProjectType.getValueOf(project.getDefaultType());\n             } catch (Exception e) {\n-                String validTypes =\n-                        StringUtils.join(ProjectType.values(), \", \");\n-                return Response\n-                        .status(Status.BAD_REQUEST)\n-                        .entity(\"Project type \\\"\" + project.getDefaultType()\n-                                + \"\\\" not valid for this server.\"\n-                                + \" Valid types: [\" + validTypes + \"]\").build();\n+                String validTypes = StringUtils.join(ProjectType.values(), \", \");\n+                return Response.status(Status.BAD_REQUEST).entity(\"Project type \\\"\" + project.getDefaultType() + \"\\\" not valid for this server.\" + \" Valid types: [\" + validTypes + \"]\").build();\n             }\n         }\n-\n         updateProject(project, hProject);\n-\n         if (hProject.getMaintainers().isEmpty()) {\n-            HAccount hAccount =\n-                    accountDAO.getByUsername(identity.getCredentials()\n-                            .getUsername());\n+            HAccount hAccount = accountDAO.getByUsername(identity.getCredentials().getUsername());\n             if (hAccount != null && hAccount.getPerson() != null) {\n                 hProject.addMaintainer(hAccount.getPerson());\n             }\n         }\n-\n         projectDAO.makePersistent(hProject);\n         projectDAO.flush();\n         etag = eTagUtils.generateTagForProject(projectSlug);\n-\n-        webhookServiceImpl.processWebhookMaintainerChanged(\n-                hProject.getSlug(),\n-                identity.getCredentials().getUsername(),\n-                Maintainer, hProject.getWebHooks(),\n-                ProjectMaintainerChangedEvent.ChangeType.ADD);\n+        webhookServiceImpl.processWebhookMaintainerChanged(hProject.getSlug(), identity.getCredentials().getUsername(), Maintainer, hProject.getWebHooks(), ProjectMaintainerChangedEvent.ChangeType.ADD);\n         return response.tag(etag).build();\n-\n     }\n \n     @Override\n@@ -219,9 +177,7 @@ public class ProjectService implements ProjectResource {\n             if (response != null) {\n                 return response.build();\n             }\n-\n-            QualifiedName qualifiedName =\n-                    new QualifiedName(getGlossaryQualifiedName(projectSlug));\n+            QualifiedName qualifiedName = new QualifiedName(getGlossaryQualifiedName(projectSlug));\n             return Response.ok(qualifiedName).tag(etag).build();\n         } catch (NoSuchEntityException e) {\n             return Response.status(Status.NOT_FOUND).build();\n@@ -229,8 +185,7 @@ public class ProjectService implements ProjectResource {\n     }\n \n     public static String getGlossaryQualifiedName(String projectSlug) {\n-        return GlossaryUtil.generateQualifiedName(PROJECT_QUALIFIER_PREFIX,\n-                projectSlug);\n+        return GlossaryUtil.generateQualifiedName(PROJECT_QUALIFIER_PREFIX, projectSlug);\n     }\n \n     private static void updateProject(Project from, HProject to) {\n@@ -243,7 +198,6 @@ public class ProjectService implements ProjectResource {\n             } catch (Exception e) {\n                 projectType = null;\n             }\n-\n             if (projectType != null) {\n                 to.setDefaultProjectType(projectType);\n             }\n@@ -279,19 +233,9 @@ public class ProjectService implements ProjectResource {\n         for (HProjectIteration pIt : hProject.getProjectIterations()) {\n             ProjectIteration iteration = new ProjectIteration();\n             ProjectVersionService.getProjectVersionDetails(pIt, iteration);\n-\n-            iteration\n-                    .getLinks(true)\n-                    .add(new Link(\n-                            URI.create(\"iterations/i/\" + pIt.getSlug()),\n-                            \"self\",\n-                            MediaTypes\n-                                    .createFormatSpecificType(\n-                                            MediaTypes.APPLICATION_ZANATA_PROJECT_ITERATION,\n-                                            mediaType)));\n+            iteration.getLinks(true).add(new Link(URI.create(\"iterations/i/\" + pIt.getSlug()), \"self\", MediaTypes.createFormatSpecificType(MediaTypes.APPLICATION_ZANATA_PROJECT_ITERATION, mediaType)));\n             project.getIterations(true).add(iteration);\n         }\n         return project;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 70
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "132",
                    "column": "33",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/38/ProjectService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/38/ProjectService.java\nindex c2c14f4bbfd..696f5b95b2d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/38/ProjectService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/38/ProjectService.java\n@@ -129,8 +129,9 @@ public class ProjectService implements ProjectResource {\n \n         HProject hProject = projectDAO.getBySlug(getProjectSlug());\n \n-        if (hProject == null) { // must be a create operation\n-            response = request.evaluatePreconditions();\n+        if (hProject == null) {\n+            // must be a create operation\n+             response = request.evaluatePreconditions();\n             if (response != null) {\n                 return response.build();\n             }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}