{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "544",
    "information": {
        "errors": [
            {
                "line": "69",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  private static final CustomerEncryption CUSTOMER_ENCRYPTION =\n      new CustomerEncryption(ENCRYPTION_ALGORITHM, KEY_SHA256);\n  private static final String KMS_KEY_NAME = \"projects/p/locations/kr-loc/keyRings/kr/cryptoKeys/key\";\n  private static final StorageClass STORAGE_CLASS = StorageClass.COLDLINE;\n\n  // Unit tests include Customer Supplied encryption which may be confusing with the KMS KEY NAME",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/544/BlobInfoTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/544/BlobInfoTest.java\nindex 3160af0cc8d..c3af14928ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/544/BlobInfoTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/544/BlobInfoTest.java\n@@ -66,7 +66,8 @@ public class BlobInfoTest {\n   private static final String KEY_SHA256 = \"keySha\";\n   private static final CustomerEncryption CUSTOMER_ENCRYPTION =\n       new CustomerEncryption(ENCRYPTION_ALGORITHM, KEY_SHA256);\n-  private static final String KMS_KEY_NAME = \"projects/p/locations/kr-loc/keyRings/kr/cryptoKeys/key\";\n+  private static final String KMS_KEY_NAME =\n+      \"projects/p/locations/kr-loc/keyRings/kr/cryptoKeys/key\";\n   private static final StorageClass STORAGE_CLASS = StorageClass.COLDLINE;\n \n   // Unit tests include Customer Supplied encryption which may be confusing with the KMS KEY NAME\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/544/BlobInfoTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/544/BlobInfoTest.java\nindex 3160af0cc8d..32d6db1cecc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/544/BlobInfoTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/544/BlobInfoTest.java\n@@ -101,7 +101,7 @@ public class BlobInfoTest {\n       .setIsDirectory(true)\n       .build();\n \n-  @Test\n+@Test\n   public void testCustomerEncryption() {\n     assertEquals(ENCRYPTION_ALGORITHM, CUSTOMER_ENCRYPTION.getEncryptionAlgorithm());\n     assertEquals(KEY_SHA256, CUSTOMER_ENCRYPTION.getKeySha256());\n@@ -269,4 +269,4 @@ public class BlobInfoTest {\n   public void testBlobId() {\n     assertEquals(BlobId.of(\"b\", \"n\", GENERATION), BLOB_INFO.getBlobId());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "64",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 708).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "71",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "86",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/544/BlobInfoTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/544/BlobInfoTest.java\nindex 3160af0cc8d..1fd9972a893 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/544/BlobInfoTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/544/BlobInfoTest.java\n@@ -30,18 +30,15 @@ import com.google.cloud.storage.Acl.User;\n import com.google.cloud.storage.BlobInfo.CustomerEncryption;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n-\n import org.junit.Test;\n-\n import java.math.BigInteger;\n import java.util.List;\n import java.util.Map;\n \n+\n public class BlobInfoTest {\n \n-  private static final List<Acl> ACL = ImmutableList.of(\n-      Acl.of(User.ofAllAuthenticatedUsers(), READER),\n-      Acl.of(new Project(VIEWERS, \"p1\"), WRITER));\n+  private static final List<Acl> ACL = ImmutableList.of(Acl.of(User.ofAllAuthenticatedUsers(), READER), Acl.of(new Project(VIEWERS, \"p1\"), WRITER));\n   private static final Integer COMPONENT_COUNT = 2;\n   private static final String CONTENT_TYPE = \"text/html\";\n   private static final String CACHE_CONTROL = \"cache\";\n@@ -64,42 +61,14 @@ public class BlobInfoTest {\n   private static final Long CREATE_TIME = UPDATE_TIME - 1L;\n   private static final String ENCRYPTION_ALGORITHM = \"AES256\";\n   private static final String KEY_SHA256 = \"keySha\";\n-  private static final CustomerEncryption CUSTOMER_ENCRYPTION =\n-      new CustomerEncryption(ENCRYPTION_ALGORITHM, KEY_SHA256);\n+  private static final CustomerEncryption CUSTOMER_ENCRYPTION = new CustomerEncryption(ENCRYPTION_ALGORITHM, KEY_SHA256);\n   private static final String KMS_KEY_NAME = \"projects/p/locations/kr-loc/keyRings/kr/cryptoKeys/key\";\n   private static final StorageClass STORAGE_CLASS = StorageClass.COLDLINE;\n \n   // Unit tests include Customer Supplied encryption which may be confusing with the KMS KEY NAME\n   // as both can't be set at the same time. At least not right now.\n-  private static final BlobInfo BLOB_INFO = BlobInfo.newBuilder(\"b\", \"n\", GENERATION)\n-      .setAcl(ACL)\n-      .setComponentCount(COMPONENT_COUNT)\n-      .setContentType(CONTENT_TYPE)\n-      .setCacheControl(CACHE_CONTROL)\n-      .setContentDisposition(CONTENT_DISPOSITION)\n-      .setContentEncoding(CONTENT_ENCODING)\n-      .setContentLanguage(CONTENT_LANGUAGE)\n-      .setCustomerEncryption(CUSTOMER_ENCRYPTION)\n-      .setCrc32c(CRC32)\n-      .setDeleteTime(DELETE_TIME)\n-      .setEtag(ETAG)\n-      .setGeneratedId(GENERATED_ID)\n-      .setMd5(MD5)\n-      .setMediaLink(MEDIA_LINK)\n-      .setMetadata(METADATA)\n-      .setMetageneration(META_GENERATION)\n-      .setOwner(OWNER)\n-      .setSelfLink(SELF_LINK)\n-      .setSize(SIZE)\n-      .setUpdateTime(UPDATE_TIME)\n-      .setCreateTime(CREATE_TIME)\n-      .setStorageClass(STORAGE_CLASS)\n-      .setKmsKeyName(KMS_KEY_NAME)\n-      .build();\n-  private static final BlobInfo DIRECTORY_INFO = BlobInfo.newBuilder(\"b\", \"n/\")\n-      .setSize(0L)\n-      .setIsDirectory(true)\n-      .build();\n+  private static final BlobInfo BLOB_INFO = BlobInfo.newBuilder(\"b\", \"n\", GENERATION).setAcl(ACL).setComponentCount(COMPONENT_COUNT).setContentType(CONTENT_TYPE).setCacheControl(CACHE_CONTROL).setContentDisposition(CONTENT_DISPOSITION).setContentEncoding(CONTENT_ENCODING).setContentLanguage(CONTENT_LANGUAGE).setCustomerEncryption(CUSTOMER_ENCRYPTION).setCrc32c(CRC32).setDeleteTime(DELETE_TIME).setEtag(ETAG).setGeneratedId(GENERATED_ID).setMd5(MD5).setMediaLink(MEDIA_LINK).setMetadata(METADATA).setMetageneration(META_GENERATION).setOwner(OWNER).setSelfLink(SELF_LINK).setSize(SIZE).setUpdateTime(UPDATE_TIME).setCreateTime(CREATE_TIME).setStorageClass(STORAGE_CLASS).setKmsKeyName(KMS_KEY_NAME).build();\n+  private static final BlobInfo DIRECTORY_INFO = BlobInfo.newBuilder(\"b\", \"n/\").setSize(0L).setIsDirectory(true).build();\n \n   @Test\n   public void testCustomerEncryption() {\n@@ -110,17 +79,11 @@ public class BlobInfoTest {\n   @Test\n   public void testToBuilder() {\n     compareBlobs(BLOB_INFO, BLOB_INFO.toBuilder().build());\n-    BlobInfo blobInfo = BLOB_INFO.toBuilder()\n-        .setBlobId(BlobId.of(\"b2\", \"n2\"))\n-        .setSize(200L)\n-        .build();\n+    BlobInfo blobInfo = BLOB_INFO.toBuilder().setBlobId(BlobId.of(\"b2\", \"n2\")).setSize(200L).build();\n     assertEquals(\"n2\", blobInfo.getName());\n     assertEquals(\"b2\", blobInfo.getBucket());\n     assertEquals(Long.valueOf(200), blobInfo.getSize());\n-    blobInfo = blobInfo.toBuilder()\n-        .setBlobId(BlobId.of(\"b\", \"n\", GENERATION))\n-        .setSize(SIZE)\n-        .build();\n+    blobInfo = blobInfo.toBuilder().setBlobId(BlobId.of(\"b\", \"n\", GENERATION)).setSize(SIZE).build();\n     compareBlobs(BLOB_INFO, blobInfo);\n   }\n \n@@ -225,16 +188,11 @@ public class BlobInfoTest {\n \n   @Test\n   public void testToPbAndFromPb() {\n-    compareCustomerEncryptions(CUSTOMER_ENCRYPTION,\n-        CustomerEncryption.fromPb(CUSTOMER_ENCRYPTION.toPb()));\n+    compareCustomerEncryptions(CUSTOMER_ENCRYPTION, CustomerEncryption.fromPb(CUSTOMER_ENCRYPTION.toPb()));\n     compareBlobs(BLOB_INFO, BlobInfo.fromPb(BLOB_INFO.toPb()));\n     BlobInfo blobInfo = BlobInfo.newBuilder(BlobId.of(\"b\", \"n\")).build();\n     compareBlobs(blobInfo, BlobInfo.fromPb(blobInfo.toPb()));\n-    StorageObject object = new StorageObject()\n-        .setName(\"n/\")\n-        .setBucket(\"b\")\n-        .setSize(BigInteger.ZERO)\n-        .set(\"isDirectory\", true);\n+    StorageObject object = new StorageObject().setName(\"n/\").setBucket(\"b\").setSize(BigInteger.ZERO).set(\"isDirectory\", true);\n     blobInfo = BlobInfo.fromPb(object);\n     assertEquals(\"b\", blobInfo.getBucket());\n     assertEquals(\"n/\", blobInfo.getName());\n@@ -269,4 +227,4 @@ public class BlobInfoTest {\n   public void testBlobId() {\n     assertEquals(BlobId.of(\"b\", \"n\", GENERATION), BLOB_INFO.getBlobId());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}