{
    "project_name": "IQSS-dataverse",
    "error_id": "5",
    "information": {
        "errors": [
            {
                "line": "436",
                "column": "13",
                "severity": "error",
                "message": "'{' at column 13 should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
            }
        ]
    },
    "source_code": "            if ((withDatasetPerms && this.rolePermissionHelper.hasDatasetPermissions(roleId))\n                || (withFilePerms && this.rolePermissionHelper.hasFilePermissions(roleId)))\n            {\n                String roleName = this.rolePermissionHelper.getRoleName(roleId);\n                if (roleName != null){\n                    roleNames.add(roleName);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/5/RoleTagRetriever.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/5/RoleTagRetriever.java\nindex 4556c92ff19..d746e15d405 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/5/RoleTagRetriever.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/5/RoleTagRetriever.java\n@@ -432,9 +432,8 @@ public class RoleTagRetriever {\n         List<String> roleNames = new ArrayList<>();\n         for (Long roleId : this.idToRoleListHash.get(dvId) ){\n             if ((withDatasetPerms && this.rolePermissionHelper.hasDatasetPermissions(roleId))\n-                || (withFilePerms && this.rolePermissionHelper.hasFilePermissions(roleId)))\n-            {\n-                String roleName = this.rolePermissionHelper.getRoleName(roleId);\n+                || (withFilePerms && this.rolePermissionHelper.hasFilePermissions(roleId))) {\n+                    String roleName = this.rolePermissionHelper.getRoleName(roleId);\n                 if (roleName != null){\n                     roleNames.add(roleName);\n                 }\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/5/RoleTagRetriever.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/5/RoleTagRetriever.java\nindex 4556c92ff19..72fd880a286 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/5/RoleTagRetriever.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/5/RoleTagRetriever.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse.mydata;\n \n import edu.harvard.iq.dataverse.DvObject;\n@@ -30,598 +31,593 @@ import org.apache.commons.lang3.StringUtils;\n /**\n  * Input:  dvObject id, parent Id, and dvObject type (from Solr)\n  * Output: For each dvObject id, a list of Role names\n- * \n+ *\n  * @author rmp553\n  */\n public class RoleTagRetriever {\n-    \n-    private static final Logger logger = Logger.getLogger(RoleTagRetriever.class.getCanonicalName());\n-\n-    private final DataverseRolePermissionHelper rolePermissionHelper;\n-    private final RoleAssigneeServiceBean roleAssigneeService;\n-    private final DvObjectServiceBean dvObjectServiceBean;\n-\n-    public boolean errorFound = false;\n-    public String errorMessage = null;\n-    \n-    //public Map<Long, String> roleNameLookup = new HashMap<>();    // { role id : role name }\n-\n-    \n-    private Map<Long, List<Long>> idToRoleListHash;    // { dvobject id : [role id, role id] }\n-    \n-    private Map<Long, Long> childToParentIdHash;     // { dvobject id : parent id }\n-    \n-    private Map<Long, String> idToDvObjectType;     // { dvobject id : dvobject type }\n-    \n-    private List<Long> datasetIdsNeedingParentIds;\n-    \n-    private List<Long> finalCardIds;\n-    \n-    private Map<Long, List<String>> finalIdToRolesHash;  // { dvobject id : [role name, role name] }\n+\n+  private static final Logger logger = Logger.getLogger(RoleTagRetriever.class.getCanonicalName());\n+\n+  private final DataverseRolePermissionHelper rolePermissionHelper;\n+  private final RoleAssigneeServiceBean roleAssigneeService;\n+  private final DvObjectServiceBean dvObjectServiceBean;\n+\n+  public boolean errorFound = false;\n+  public String errorMessage = null;\n+\n+  //public Map<Long, String> roleNameLookup = new HashMap<>();    // { role id : role name }\n+\n+\n+  private Map<Long, List<Long>> idToRoleListHash;    // { dvobject id : [role id, role id] }\n+\n+  private Map<Long, Long> childToParentIdHash;     // { dvobject id : parent id }\n+\n+  private Map<Long, String> idToDvObjectType;     // { dvobject id : dvobject type }\n+\n+  private List<Long> datasetIdsNeedingParentIds;\n+\n+  private List<Long> finalCardIds;\n+\n+  private Map<Long, List<String>> finalIdToRolesHash;  // { dvobject id : [role name, role name] }\n+\n+  // ----------------------------------\n+  // Constructor\n+  // ----------------------------------\n+  public RoleTagRetriever(DataverseRolePermissionHelper rolePermissionHelper\n+    , RoleAssigneeServiceBean roleAssigneeService\n+    , DvObjectServiceBean dvObjectServiceBean) {\n+    this.rolePermissionHelper = rolePermissionHelper;\n+    this.roleAssigneeService = roleAssigneeService;\n+    this.dvObjectServiceBean = dvObjectServiceBean;\n+  }\n+\n+  public void loadRoles(DataverseRequest dataverseRequest, SolrQueryResponse solrQueryResponse) {\n+    if (dataverseRequest == null) {\n+      throw new NullPointerException(\"RoleTagRetriever.constructor. dataverseRequest cannot be null\");\n+    }\n+\n+    AuthenticatedUser au = dataverseRequest.getAuthenticatedUser();\n+\n+    if (au == null) {\n+      throw new NullPointerException(\"RoleTagRetriever.constructor. au cannot be null\");\n+    }\n+\n+    String userIdentifier = au.getUserIdentifier();\n+    if (userIdentifier == null) {\n+      throw new NullPointerException(\"RoleTagRetriever.constructor. userIdentifier cannot be null\");\n+    }\n+\n+    if (solrQueryResponse == null) {\n+      throw new NullPointerException(\"RoleTagRetriever.constructor. solrQueryResponse cannot be null\");\n+    }\n+\n+    // (1) Reset variables\n+    initLookups();\n+\n+    // (2) Load roles from solr docs\n+    loadInfoFromSolrResponseDocs(solrQueryResponse);\n+\n+    // (3) Load grandparent ids, if needed\n+    findDataverseIdsForFiles();\n+\n+    // (4) Retrieve the role ids\n+    retrieveRoleIdsForDvObjects(dataverseRequest, au);\n+\n+    // (5) Prepare final role lists\n+    prepareFinalRoleLists();\n+\n+    //showRoleListHash();\n+\n+  }\n+\n+\n+  private void initLookups() {\n+\n+    this.errorFound = false;\n+    this.errorMessage = null;\n+\n+    this.idToRoleListHash = new HashMap<>();    // { dvobject id : [role id, role id] }\n+\n+    this.childToParentIdHash = new HashMap<>();     // { dvobject id : parent id }\n+\n+    this.idToDvObjectType = new HashMap<>();     // { dvobject id : dvobject type }\n+\n+    this.finalIdToRolesHash = new HashMap<>();\n+\n+    this.datasetIdsNeedingParentIds = new ArrayList<>();\n+\n+    this.finalCardIds = new ArrayList<>();\n+  }\n+\n+  private void addIdNeedingRoleRetrieval(Long dvObjectId) {\n+    if (dvObjectId == null) {\n+      return;\n+    }\n+\n+    // initialize with dvObject id and empty list of role ids\n+    //\n+    if (!this.idToRoleListHash.containsKey(dvObjectId)) {\n+      this.idToRoleListHash.put(dvObjectId, new ArrayList<>());\n+    }\n+  }\n+\n+  public void showRoleListHash() {\n+\n+    msgt(\"showRoleListHash\");\n+    for (Map.Entry<Long, List<Long>> entry : idToRoleListHash.entrySet()) {\n+      msg(\"id: \" + entry.getKey() + \" | values: \" + entry.getValue().toString());\n+    }\n+\n+    msgt(\"show idToDvObjectType\");\n+    for (Map.Entry<Long, String> entry : idToDvObjectType.entrySet()) {\n+      msg(\"dv id: \" + entry.getKey() + \" | type: \" + entry.getValue());\n+    }\n+\n+    for (Map.Entry<Long, List<String>> entry : finalIdToRolesHash.entrySet()) {\n+      msg(\"id: \" + entry.getKey() + \" | values: \" + entry.getValue().toString());\n+    }\n+\n+  }\n+\n+\n+  private void addRoleIdForHash(Long dvObjectId, Long roleId) {\n+    if ((dvObjectId == null) || (roleId == null)) {\n+      return;\n+    }\n+\n+    if (!this.idToRoleListHash.containsKey(dvObjectId)) {\n+      logger.warning(\"DvObject id not found in hash (shouldn't happen): \" + dvObjectId);\n+      return;\n+    }\n+    List<Long> roldIdList = this.idToRoleListHash.get(dvObjectId);\n+    roldIdList.add(roleId);\n+\n+    this.idToRoleListHash.put(dvObjectId, roldIdList);\n+\n+  }\n+\n+  /**\n+   * Iterate through the Solr Cards and collect\n+   * - DvObject Id + Parent ID\n+   * - Dtype for object and parent\n+   * - Whether a \"grandparent id\" is needed for a file object\n+   *\n+   * @param solrQueryResponse\n+   */\n+  private void loadInfoFromSolrResponseDocs(SolrQueryResponse solrQueryResponse) {\n+\n+    if (solrQueryResponse == null) {\n+      throw new NullPointerException(\"RoleTagRetriever.constructor. solrQueryResponse cannot be null\");\n+    }\n \n     // ----------------------------------\n-    // Constructor\n+    // Load initial data\n     // ----------------------------------\n-    public RoleTagRetriever(DataverseRolePermissionHelper rolePermissionHelper\n-                        , RoleAssigneeServiceBean roleAssigneeService\n-                        , DvObjectServiceBean dvObjectServiceBean){\n-       this.rolePermissionHelper = rolePermissionHelper;\n-       this.roleAssigneeService = roleAssigneeService;\n-       this.dvObjectServiceBean = dvObjectServiceBean;\n-    }\n-    \n-    public void loadRoles(DataverseRequest dataverseRequest , SolrQueryResponse solrQueryResponse){\n-        if (dataverseRequest == null){\n-            throw new NullPointerException(\"RoleTagRetriever.constructor. dataverseRequest cannot be null\");\n-        }\n-        \n-        AuthenticatedUser au = dataverseRequest.getAuthenticatedUser();\n-        \n-        if (au == null){\n-            throw new NullPointerException(\"RoleTagRetriever.constructor. au cannot be null\");\n-        }\n-        \n-        String userIdentifier = au.getUserIdentifier();\n-        if (userIdentifier == null){\n-            throw new NullPointerException(\"RoleTagRetriever.constructor. userIdentifier cannot be null\");\n-        }\n-        \n-        if (solrQueryResponse == null){\n-            throw new NullPointerException(\"RoleTagRetriever.constructor. solrQueryResponse cannot be null\");\n-        }\n-        \n-        // (1) Reset variables\n-        initLookups();\n-        \n-        // (2) Load roles from solr docs\n-        loadInfoFromSolrResponseDocs(solrQueryResponse);\n-        \n-        // (3) Load grandparent ids, if needed\n-        findDataverseIdsForFiles();\n-        \n-        // (4) Retrieve the role ids\n-        retrieveRoleIdsForDvObjects(dataverseRequest, au);\n+    msgt(\"load initial data\");\n+    //  Iterate through Solr cards\n+    //\n+    for (SolrSearchResult doc : solrQueryResponse.getSolrSearchResults()) {\n+\n+      // -------------------------------------------------\n+      // (a) retrieve Card Id and DvObject type\n+      // -------------------------------------------------\n+      finalCardIds.add(doc.getEntityId());\n+\n+      String dtype = doc.getType();\n+      Long entityId = doc.getEntityId();\n+\n+      if (dtype == null) {\n+        throw new NullPointerException(\"The dvobject type cannot be null for SolrSearchResult\");\n+      }\n+      logger.fine(\"\\nid: \" + doc.getEntityId() + \" dtype: \" + dtype);\n+\n+      // -------------------------------------------------\n+      // (b) Populate dict of { dvObject id : dtype }\n+      //      e.g. { 3 : 'Dataverse' }\n+      // -------------------------------------------------\n+      this.idToDvObjectType.put(entityId, dtype);\n+\n+      // -------------------------------------------------\n+      // (c) initialize dict of { dvObject id : [ (empty list for role ids) ] }\n+      // -------------------------------------------------\n+      addIdNeedingRoleRetrieval(entityId);\n+\n+      Long parentId = doc.getParentIdAsLong();\n+\n+      // -------------------------------------------------\n+      // For datasets and files, check parents\n+      // -------------------------------------------------\n+      if (!(dtype.equals(SearchConstants.SOLR_DATAVERSES))) {\n+\n+        // -------------------------------------------------\n+        // (d) Add to the childToParentIdHash  { child id : parent id }\n+        // -------------------------------------------------\n+        if (parentId == null) {\n+          throw new NullPointerException(\"A dataset or file parent cannot be null for SolrSearchResult\");\n+        }\n+\n+        logger.fine(\"\\nparentId: \" + parentId);\n+\n+        this.childToParentIdHash.put(doc.getEntityId(), parentId);\n+\n+        // -------------------------------------------------\n+        // (e) For the parent, add to dict of\n+        //      { dvObject id : [ (empty list for role ids) ] }\n+        //          - similar to (c) above\n+        // -------------------------------------------------\n+        addIdNeedingRoleRetrieval(parentId);\n+\n+        // -------------------------------------------------\n+        // (f) Add the parent to the DvObject type lookup { dvObject id : dtype }\n+        //          - similar to (b) above\n+        // -------------------------------------------------\n+        if (doc.getType().equals(SearchConstants.SOLR_FILES)) {\n+          logger.fine(\"It's a file\");\n+\n+          // -------------------------------------------------\n+          // (f1) This is a file, we know the parent is a Dataset\n+          // -------------------------------------------------\n+          this.idToDvObjectType.put(parentId, SearchConstants.SOLR_DATASETS);\n+\n+          // -------------------------------------------------\n+          // (g) For files, we'll need to get roles from the grandparent--e.g., the dataverse\n+          // -------------------------------------------------\n+          this.datasetIdsNeedingParentIds.add(parentId);\n+\n+        }\n+        if (dtype.equals(SearchConstants.SOLR_DATASETS)) {\n+          logger.fine(\"It's a dataset\");\n+\n+          // -------------------------------------------------\n+          // (f2) This is a Dataset, we know the parent is a Dataverse\n+          // -------------------------------------------------\n+          this.idToDvObjectType.put(parentId, SearchConstants.SOLR_DATAVERSES);\n+        }\n+      }\n+\n+      // -------------------------------------------------\n+      // initialize final hash of dvObject id and empty list of role names\n+      //          { dvObject id : [ (empty list for role nams) ] }\n+      // -------------------------------------------------\n+      this.finalIdToRolesHash.put(doc.getEntityId(), new ArrayList<>());\n+\n+    }\n \n-        // (5) Prepare final role lists\n-        prepareFinalRoleLists();\n+  }\n+\n+  /**\n+   * From the Cards, we know the Parent Ids of all the DvObjects\n+   * <p>\n+   * However, for files, the roles may trickle down from the Dataverses\n+   * <p>\n+   * Dataverse (file downloader) -> Dataset (file downloader) -> File (file downloader)\n+   * <p>\n+   * Grandparent -> Parent -> Child\n+   * <p>\n+   * Therefore, we need the File's \"grandparent id\" -- the Dataverse ID\n+   * <p>\n+   * File (from card) -> Parent (from card) -> Grandparent (NEED TO FIND)\n+   */\n+  private void findDataverseIdsForFiles() {\n+    msgt(\"findDataverseIdsForFiles: \" + datasetIdsNeedingParentIds.toString());\n+\n+    // -------------------------------------\n+    // (1) Do we have any dataset Ids where we need to find the parent dataverse?\n+    // -------------------------------------\n+    if (this.datasetIdsNeedingParentIds == null) {\n+      throw new NullPointerException(\"findDataverseIdsForFiles should not be null\");\n+    }\n \n-        //showRoleListHash();\n+    if (this.datasetIdsNeedingParentIds.isEmpty()) {\n+      logger.fine(\"No ids found!\");\n+      return;\n+    }\n \n+    // -------------------------------------\n+    // (2) Do we have any dataset Ids where we need to find the parent dataverse?\n+    // -------------------------------------\n+    List<Object[]> results = this.dvObjectServiceBean.getDvObjectInfoForMyData(this.datasetIdsNeedingParentIds);\n+    logger.fine(\"findDataverseIdsForFiles results count: \" + results.size());\n+\n+    // -------------------------------------\n+    // (2a) Nope, return\n+    // -------------------------------------\n+    if (results.isEmpty()) {\n+      return;\n     }\n-    \n-    \n-    private void initLookups(){\n-        \n-        this.errorFound = false;\n-        this.errorMessage = null;\n-        \n-        this.idToRoleListHash = new HashMap<>();    // { dvobject id : [role id, role id] }\n \n-        this.childToParentIdHash = new HashMap<>();     // { dvobject id : parent id }\n \n-        this.idToDvObjectType = new HashMap<>();     // { dvobject id : dvobject type }\n+    // -------------------------------------\n+    // (3) Process the results -- the parent ID is the Dataverse that we're interested in\n+    // -------------------------------------\n+    Integer dvIdAsInteger;\n+    Long dvId;\n+    String dtype;\n+    Long parentId;\n+\n+    // -------------------------------------\n+    // Iterate through object list\n+    // -------------------------------------\n+    for (Object[] ra : results) {\n+      dvIdAsInteger = (Integer) ra[0];     // ?? Why, should be a Long\n+      dvId = new Long(dvIdAsInteger);\n+      dtype = (String) ra[1];\n+      parentId = (Long) ra[2];\n+\n+      //msg(\"result: dvId: \" + dvId + \" |dtype: \" + dtype + \" |parentId: \" + parentId);\n+      // Should ALWAYS be a Dataset!\n+      if (dtype.equals(DvObject.DATASET_DTYPE_STRING)) {\n+        this.childToParentIdHash.put(dvId, parentId); // Store the parent child relation\n+        this.addIdNeedingRoleRetrieval(parentId); // We need the roles for this dataverse\n+        this.idToDvObjectType.put(parentId, SearchConstants.SOLR_DATAVERSES); // store the dv object type\n+      }\n+    }\n+  }\n \n-        this.finalIdToRolesHash = new HashMap<>();  \n \n-        this.datasetIdsNeedingParentIds = new ArrayList<>();\n+  private boolean retrieveRoleIdsForDvObjects(DataverseRequest dataverseRequest, AuthenticatedUser au) {\n \n-        this.finalCardIds = new ArrayList<>();\n+    String userIdentifier = au.getUserIdentifier();\n+    if (userIdentifier == null) {\n+      throw new NullPointerException(\"RoleTagRetriever.constructor. userIdentifier cannot be null\");\n     }\n-        \n-    private void addIdNeedingRoleRetrieval(Long dvObjectId){\n-        if (dvObjectId == null){\n-            return;\n-        }\n-        \n-        // initialize with dvObject id and empty list of role ids\n-        //\n-        if (!this.idToRoleListHash.containsKey(dvObjectId)){\n-            this.idToRoleListHash.put(dvObjectId, new ArrayList<>());\n-        }\n+\n+    if (this.idToRoleListHash.isEmpty()) {\n+      return true;\n     }\n-    \n-    public void showRoleListHash(){\n-        \n-        msgt(\"showRoleListHash\");\n-        for (Map.Entry<Long, List<Long>> entry : idToRoleListHash.entrySet()) {\n-            msg(\"id: \" + entry.getKey() + \" | values: \" + entry.getValue().toString());            \n-        }\n-        \n-        msgt(\"show idToDvObjectType\");\n-        for (Map.Entry<Long, String> entry : idToDvObjectType.entrySet()) {\n-            msg(\"dv id: \" + entry.getKey() + \" | type: \" + entry.getValue());            \n-        }\n \n-        for (Map.Entry<Long, List<String>> entry : finalIdToRolesHash.entrySet()) {\n-            msg(\"id: \" + entry.getKey() + \" | values: \" + entry.getValue().toString());            \n-        }\n-        \n+    List<Long> dvObjectIdList = new ArrayList<>(this.idToRoleListHash.keySet());\n+    if (dvObjectIdList.isEmpty()) {\n+      return true;\n     }\n-    \n-    \n-    private void addRoleIdForHash(Long dvObjectId, Long roleId){\n-        if ((dvObjectId == null)||(roleId == null)){\n-            return;\n-        }\n-        \n-        if (!this.idToRoleListHash.containsKey(dvObjectId)){\n-            logger.warning(\"DvObject id not found in hash (shouldn't happen): \" + dvObjectId);\n-            return;\n-        }\n-        List<Long> roldIdList = this.idToRoleListHash.get(dvObjectId);\n-        roldIdList.add(roleId);   \n-        \n-        this.idToRoleListHash.put(dvObjectId, roldIdList);\n-        \n-    }\n-    \n-    /**\n-     * Iterate through the Solr Cards and collect\n-     *  - DvObject Id + Parent ID\n-     *  - Dtype for object and parent\n-     *  - Whether a \"grandparent id\" is needed for a file object\n-     * \n-     * @param solrQueryResponse \n-     */\n-    private void loadInfoFromSolrResponseDocs(SolrQueryResponse solrQueryResponse){\n-\n-        if (solrQueryResponse == null){\n-            throw new NullPointerException(\"RoleTagRetriever.constructor. solrQueryResponse cannot be null\");\n-        }\n+    //msg(\"dvObjectIdList: \" + dvObjectIdList.toString());\n \n-        // ----------------------------------\n-        // Load initial data\n-        // ----------------------------------\n-        msgt(\"load initial data\");\n-        //  Iterate through Solr cards\n-        //\n-        for (SolrSearchResult doc : solrQueryResponse.getSolrSearchResults()){\n-\n-            // -------------------------------------------------\n-            // (a) retrieve Card Id and DvObject type\n-            // -------------------------------------------------\n-            finalCardIds.add(doc.getEntityId());\n-\n-            String dtype = doc.getType();\n-            Long entityId = doc.getEntityId();\n-                        \n-            if (dtype == null){\n-                throw new NullPointerException(\"The dvobject type cannot be null for SolrSearchResult\");\n-            }\n-            logger.fine(\"\\nid: \" + doc.getEntityId() + \" dtype: \" + dtype);\n-            \n-            // -------------------------------------------------\n-            // (b) Populate dict of { dvObject id : dtype } \n-            //      e.g. { 3 : 'Dataverse' }\n-            // -------------------------------------------------\n-            this.idToDvObjectType.put(entityId, dtype);\n-\n-            // -------------------------------------------------\n-            // (c) initialize dict of { dvObject id : [ (empty list for role ids) ] } \n-            // -------------------------------------------------\n-            addIdNeedingRoleRetrieval(entityId);\n-            \n-            Long parentId = doc.getParentIdAsLong();\n-\n-            // -------------------------------------------------\n-            // For datasets and files, check parents\n-            // -------------------------------------------------\n-            if (!(dtype.equals(SearchConstants.SOLR_DATAVERSES))){   \n-\n-                // -------------------------------------------------\n-                // (d) Add to the childToParentIdHash  { child id : parent id }\n-                // -------------------------------------------------\n-                if (parentId == null){\n-                    throw new NullPointerException(\"A dataset or file parent cannot be null for SolrSearchResult\");\n-                }\n-\n-                logger.fine(\"\\nparentId: \" + parentId);\n-\n-                this.childToParentIdHash.put(doc.getEntityId(), parentId);\n-\n-                // -------------------------------------------------\n-                // (e) For the parent, add to dict of \n-                //      { dvObject id : [ (empty list for role ids) ] } \n-                //          - similar to (c) above\n-                // -------------------------------------------------\n-                addIdNeedingRoleRetrieval(parentId);\n-                \n-                // -------------------------------------------------\n-                // (f) Add the parent to the DvObject type lookup { dvObject id : dtype } \n-                //          - similar to (b) above\n-                // -------------------------------------------------\n-                if (doc.getType().equals(SearchConstants.SOLR_FILES)){\n-                    logger.fine(\"It's a file\");\n-\n-                    // -------------------------------------------------\n-                    // (f1) This is a file, we know the parent is a Dataset\n-                    // -------------------------------------------------\n-                    this.idToDvObjectType.put(parentId, SearchConstants.SOLR_DATASETS);\n-                    \n-                    // -------------------------------------------------\n-                    // (g) For files, we'll need to get roles from the grandparent--e.g., the dataverse\n-                    // -------------------------------------------------\n-                    this.datasetIdsNeedingParentIds.add(parentId);\n-    \n-                }if (dtype.equals(SearchConstants.SOLR_DATASETS)){\n-                    logger.fine(\"It's a dataset\");\n-\n-                    // -------------------------------------------------\n-                    // (f2) This is a Dataset, we know the parent is a Dataverse\n-                    // -------------------------------------------------\n-                    this.idToDvObjectType.put(parentId, SearchConstants.SOLR_DATAVERSES);\n-                }\n-            }\n-                        \n-            // -------------------------------------------------\n-            // initialize final hash of dvObject id and empty list of role names\n-            //          { dvObject id : [ (empty list for role nams) ] } \n-            // -------------------------------------------------\n-            this.finalIdToRolesHash.put(doc.getEntityId(), new ArrayList<>());\n+    List<Object[]> results = this.roleAssigneeService.getRoleIdsFor(dataverseRequest, dvObjectIdList);\n \n-        }\n-        \n-    }\n-    \n-    /**\n-     *  From the Cards, we know the Parent Ids of all the DvObjects\n-     * \n-     *  However, for files, the roles may trickle down from the Dataverses\n-     * \n-     *      Dataverse (file downloader) -> Dataset (file downloader) -> File (file downloader)\n-     *  \n-     *      Grandparent -> Parent -> Child\n-     * \n-     *  Therefore, we need the File's \"grandparent id\" -- the Dataverse ID\n-     * \n-     *      File (from card) -> Parent (from card) -> Grandparent (NEED TO FIND)\n-     * \n-     * \n-     */\n-    private void findDataverseIdsForFiles(){\n-        msgt(\"findDataverseIdsForFiles: \" + datasetIdsNeedingParentIds.toString());\n-        \n-        // -------------------------------------\n-        // (1) Do we have any dataset Ids where we need to find the parent dataverse?\n-        // -------------------------------------\n-        if (this.datasetIdsNeedingParentIds == null){\n-            throw new NullPointerException(\"findDataverseIdsForFiles should not be null\");\n-        }\n-        \n-        if (this.datasetIdsNeedingParentIds.isEmpty()){\n-            logger.fine(\"No ids found!\");\n-            return;\n-        }\n-        \n-        // -------------------------------------\n-        // (2) Do we have any dataset Ids where we need to find the parent dataverse?\n-        // -------------------------------------\n-        List<Object[]> results = this.dvObjectServiceBean.getDvObjectInfoForMyData(this.datasetIdsNeedingParentIds);\n-        logger.fine(\"findDataverseIdsForFiles results count: \" + results.size());\n-       \n-        // -------------------------------------\n-        // (2a) Nope, return\n-        // -------------------------------------\n-        if (results.isEmpty()){\n-            return;       \n-        }\n-        \n-\n-        // -------------------------------------\n-        // (3) Process the results -- the parent ID is the Dataverse that we're interested in\n-        // -------------------------------------\n-        Integer dvIdAsInteger;\n-        Long dvId;\n-        String dtype;\n-        Long parentId;\n-        \n-        // -------------------------------------\n-        // Iterate through object list\n-        // -------------------------------------\n-        for (Object[] ra : results) {\n-            dvIdAsInteger = (Integer)ra[0];     // ?? Why, should be a Long\n-            dvId = new Long(dvIdAsInteger);\n-            dtype = (String)ra[1];\n-            parentId = (Long)ra[2];\n-                       \n-            //msg(\"result: dvId: \" + dvId + \" |dtype: \" + dtype + \" |parentId: \" + parentId);\n-            // Should ALWAYS be a Dataset!\n-            if (dtype.equals(DvObject.DATASET_DTYPE_STRING)){  \n-                this.childToParentIdHash.put(dvId, parentId); // Store the parent child relation\n-                this.addIdNeedingRoleRetrieval(parentId); // We need the roles for this dataverse\n-                this.idToDvObjectType.put(parentId, SearchConstants.SOLR_DATAVERSES); // store the dv object type\n-            }\n-        }\n+    //msgt(\"runStep1RoleAssignments results: \" + results.toString());\n+\n+    if (results == null) {\n+      this.addErrorMessage(\"Sorry, the roleAssigneeService isn't working.\");\n+      return false;\n+    } else if (results.isEmpty()) {\n+      logger.log(Level.WARNING, \"No roles were found for user {0} with ids {1}\",\n+        new Object[] {userIdentifier, dvObjectIdList.toString()});\n+      this.addErrorMessage(\"Sorry, no roles were found.\");\n+      return false;\n     }\n-    \n-    \n-    private boolean retrieveRoleIdsForDvObjects(DataverseRequest dataverseRequest, AuthenticatedUser au){\n-        \n-        String userIdentifier = au.getUserIdentifier();\n-        if (userIdentifier == null){\n-            throw new NullPointerException(\"RoleTagRetriever.constructor. userIdentifier cannot be null\");\n-        }        \n-        \n-        if (this.idToRoleListHash.isEmpty()){\n-            return true;\n-        }\n \n-        List<Long> dvObjectIdList = new ArrayList<>(this.idToRoleListHash.keySet());\n-        if (dvObjectIdList.isEmpty()){\n-            return true;\n-        }\n-        //msg(\"dvObjectIdList: \" + dvObjectIdList.toString());\n-\n-        List<Object[]> results = this.roleAssigneeService.getRoleIdsFor(dataverseRequest, dvObjectIdList);\n-        \n-        //msgt(\"runStep1RoleAssignments results: \" + results.toString());\n-\n-        if (results == null){\n-            this.addErrorMessage(\"Sorry, the roleAssigneeService isn't working.\");\n-            return false;\n-        }else if (results.isEmpty()){\n-            logger.log(Level.WARNING, \"No roles were found for user {0} with ids {1}\", new Object[]{userIdentifier, dvObjectIdList.toString()});\n-            this.addErrorMessage(\"Sorry, no roles were found.\");              \n-            return false;\n-        }\n-    \n-        // Iterate through assigned objects, a single object may end up in \n-        // multiple \"buckets\"\n-        for (Object[] ra : results) {\n-            Long dvId = (Long)ra[0];\n-            Long roleId = (Long)ra[1];\n-            \n-            this.addRoleIdForHash(dvId, roleId);\n-            //msg(\"dv id: \" + dvId + \"(\" + this.idToDvObjectType.get(dvId) + \") | roleId: \" \n-            //        + roleId + \"(\" +  this.rolePermissionHelper.getRoleName(roleId)+\")\");\n-        }      \n-        return true;\n-    }\n-    \n-    private List<String> getFormattedRoleListForId(Long dvId){\n-        \n-        if (dvId==null){\n-            return null;\n-        }\n-        if (!this.idToRoleListHash.containsKey(dvId)){\n-            return null;\n-        }\n-        \n-        List<String> roleNames = new ArrayList<>();\n-        for (Long roleId : this.idToRoleListHash.get(dvId) ){\n-            String roleName = this.rolePermissionHelper.getRoleName(roleId);\n-            if (roleName != null){\n-                roleNames.add(roleName);\n-            }\n-        }\n-        return roleNames;\n-        \n+    // Iterate through assigned objects, a single object may end up in\n+    // multiple \"buckets\"\n+    for (Object[] ra : results) {\n+      Long dvId = (Long) ra[0];\n+      Long roleId = (Long) ra[1];\n+\n+      this.addRoleIdForHash(dvId, roleId);\n+      //msg(\"dv id: \" + dvId + \"(\" + this.idToDvObjectType.get(dvId) + \") | roleId: \"\n+      //        + roleId + \"(\" +  this.rolePermissionHelper.getRoleName(roleId)+\")\");\n     }\n+    return true;\n+  }\n \n-    private List<String> getFormattedRoleListForId(Long dvId, \n-                                                boolean withDatasetPerms, \n-                                                boolean withFilePerms){\n-        \n-        if (dvId==null){\n-            return null;\n-        }\n-        if (!this.idToRoleListHash.containsKey(dvId)){\n-            return null;\n-        }\n-        \n-        List<String> roleNames = new ArrayList<>();\n-        for (Long roleId : this.idToRoleListHash.get(dvId) ){\n-            if ((withDatasetPerms && this.rolePermissionHelper.hasDatasetPermissions(roleId))\n-                || (withFilePerms && this.rolePermissionHelper.hasFilePermissions(roleId)))\n-            {\n-                String roleName = this.rolePermissionHelper.getRoleName(roleId);\n-                if (roleName != null){\n-                    roleNames.add(roleName);\n-                }\n-            }\n-        }\n-        return roleNames;\n-        \n+  private List<String> getFormattedRoleListForId(Long dvId) {\n+\n+    if (dvId == null) {\n+      return null;\n+    }\n+    if (!this.idToRoleListHash.containsKey(dvId)) {\n+      return null;\n     }\n \n-    \n-    \n-    public boolean hasRolesForCard(Long dvObjectId){\n-        if (dvObjectId == null){\n-            return false;\n-        }\n-        return this.finalIdToRolesHash.containsKey(dvObjectId);\n+    List<String> roleNames = new ArrayList<>();\n+    for (Long roleId : this.idToRoleListHash.get(dvId)) {\n+      String roleName = this.rolePermissionHelper.getRoleName(roleId);\n+      if (roleName != null) {\n+        roleNames.add(roleName);\n+      }\n     }\n+    return roleNames;\n \n-    public List<String> getRolesForCard(Long dvObjectId){\n-        if (!this.hasRolesForCard(dvObjectId)){\n-            return null;\n-        }\n+  }\n+\n+  private List<String> getFormattedRoleListForId(Long dvId,\n+                                                 boolean withDatasetPerms,\n+                                                 boolean withFilePerms) {\n \n-        return this.finalIdToRolesHash.get(dvObjectId);\n+    if (dvId == null) {\n+      return null;\n+    }\n+    if (!this.idToRoleListHash.containsKey(dvId)) {\n+      return null;\n     }\n \n-    public JsonArrayBuilder getRolesForCardAsJSON(Long dvObjectId){\n-        if (!this.hasRolesForCard(dvObjectId)){\n-            return null;\n-        }\n-               \n-        JsonArrayBuilder jsonArray = Json.createArrayBuilder();\n-        \n-        for (String roleName : this.finalIdToRolesHash.get(dvObjectId)){            \n-            jsonArray.add(roleName);            \n+    List<String> roleNames = new ArrayList<>();\n+    for (Long roleId : this.idToRoleListHash.get(dvId)) {\n+      if ((withDatasetPerms && this.rolePermissionHelper.hasDatasetPermissions(roleId))\n+        || (withFilePerms && this.rolePermissionHelper.hasFilePermissions(roleId))) {\n+        String roleName = this.rolePermissionHelper.getRoleName(roleId);\n+        if (roleName != null) {\n+          roleNames.add(roleName);\n         }\n-        return jsonArray;             \n-    }\n-    \n-    \n-            \n-    \n-    /**\n-     * For the cards, make a dict of { dv object id : [role name, role name, etc ]}\n-     * \n-     */\n-    public void prepareFinalRoleLists(){\n-        \n-        msgt(\"prepareFinalRoleLists\");\n-        \n-        if (finalCardIds.isEmpty()){\n-            return;\n-        }\n-        \n-        List<String> formattedRoleNames;\n-        List<String> finalRoleNames;\n-        \n-        for (Long dvIdForCard : this.finalCardIds) {\n-           //msgt(\"dvIdForCard: \" + dvIdForCard + \"(\" + this.idToDvObjectType.get(dvIdForCard) + \")\");\n-           \n-            // -------------------------------------------------\n-            // (a) Make a new array with the role names for the card\n-            // -------------------------------------------------\n-            finalRoleNames = new ArrayList<>();\n-            if (!this.idToDvObjectType.containsKey(dvIdForCard)){\n-                throw new IllegalStateException(\"All dvObject ids from solr should have their dvObject types in this hash\");                 \n-            }\n+      }\n+    }\n+    return roleNames;\n+\n+  }\n+\n+\n+  public boolean hasRolesForCard(Long dvObjectId) {\n+    if (dvObjectId == null) {\n+      return false;\n+    }\n+    return this.finalIdToRolesHash.containsKey(dvObjectId);\n+  }\n+\n+  public List<String> getRolesForCard(Long dvObjectId) {\n+    if (!this.hasRolesForCard(dvObjectId)) {\n+      return null;\n+    }\n+\n+    return this.finalIdToRolesHash.get(dvObjectId);\n+  }\n+\n+  public JsonArrayBuilder getRolesForCardAsJSON(Long dvObjectId) {\n+    if (!this.hasRolesForCard(dvObjectId)) {\n+      return null;\n+    }\n+\n+    JsonArrayBuilder jsonArray = Json.createArrayBuilder();\n+\n+    for (String roleName : this.finalIdToRolesHash.get(dvObjectId)) {\n+      jsonArray.add(roleName);\n+    }\n+    return jsonArray;\n+  }\n+\n+\n+  /**\n+   * For the cards, make a dict of { dv object id : [role name, role name, etc ]}\n+   */\n+  public void prepareFinalRoleLists() {\n+\n+    msgt(\"prepareFinalRoleLists\");\n+\n+    if (finalCardIds.isEmpty()) {\n+      return;\n+    }\n+\n+    List<String> formattedRoleNames;\n+    List<String> finalRoleNames;\n+\n+    for (Long dvIdForCard : this.finalCardIds) {\n+      //msgt(\"dvIdForCard: \" + dvIdForCard + \"(\" + this.idToDvObjectType.get(dvIdForCard) + \")\");\n+\n+      // -------------------------------------------------\n+      // (a) Make a new array with the role names for the card\n+      // -------------------------------------------------\n+      finalRoleNames = new ArrayList<>();\n+      if (!this.idToDvObjectType.containsKey(dvIdForCard)) {\n+        throw new IllegalStateException(\"All dvObject ids from solr should have their dvObject types in this hash\");\n+      }\n+\n+      // -------------------------------------------------\n+      // (b) Add direct role assignments -- may be empty\n+      // -------------------------------------------------\n+      formattedRoleNames = getFormattedRoleListForId(dvIdForCard);\n+      //msg(\"(a) direct assignments: \" + StringUtils.join(formattedRoleNames, \", \"));\n+      if (formattedRoleNames != null) {\n+        finalRoleNames.addAll(formattedRoleNames);\n+      }\n+      //msg(\"Roles so far: \" + finalRoleNames.toString());\n+\n+      // -------------------------------------------------\n+      // (c) get parent id\n+      // -------------------------------------------------\n+      Long parentId = null;\n+      if (this.childToParentIdHash.containsKey(dvIdForCard)) {\n+        parentId = this.childToParentIdHash.get(dvIdForCard);\n+        //msg(\"(b) parentId: \" + parentId);\n+      } else {\n+        // -------------------------------------------------\n+        // No parent!  Store roles and move to next id\n+        // -------------------------------------------------\n+        finalIdToRolesHash.put(dvIdForCard, this.formatRoleNames(finalRoleNames));\n+        continue;\n+      }\n+\n+      // -------------------------------------------------\n+      // (d) get dtype\n+      // -------------------------------------------------\n+      String dtype = this.idToDvObjectType.get(dvIdForCard);\n+\n+      switch (dtype) {\n+        //case(SearchConstants.SOLR_DATAVERSES  // No indirect assignments\n+\n+        case (SearchConstants.SOLR_DATASETS):\n+\n+          // -------------------------------------------------\n+          // (d1) May have indirect assignments re: dataverse\n+          // -------------------------------------------------\n+          formattedRoleNames = getFormattedRoleListForId(parentId, true, true);\n+          if (formattedRoleNames != null) {\n+            //msg(\"(d) indirect assignments: \" + StringUtils.join(formattedRoleNames, \", \"));\n+\n+            finalRoleNames.addAll(formattedRoleNames);\n+            //msg(\"Roles from dataverse: \" + finalRoleNames.toString());\n+          }\n+          break;\n+        case (SearchConstants.SOLR_FILES):\n+          //msg(\"(c) FILES\");\n+\n+          // -------------------------------------------------\n+          // (d2) May have indirect assignments re: dataset\n+          // -------------------------------------------------\n+          formattedRoleNames = getFormattedRoleListForId(parentId, false, true);\n+          if (formattedRoleNames != null) {\n+            //msg(\"(d) indirect assignments: \" + StringUtils.join(formattedRoleNames, \", \"));\n+            finalRoleNames.addAll(formattedRoleNames);\n+\n+          }\n+          // May have indirect assignments re: dataverse\n+          //\n+          if (this.childToParentIdHash.containsKey(parentId)) {\n+            Long grandparentId = this.childToParentIdHash.get(parentId);\n+            formattedRoleNames = getFormattedRoleListForId(grandparentId, false, true);\n+            if (formattedRoleNames != null) {\n+              //msg(\"(e) 2-step indirect assignments: \" + StringUtils.join(formattedRoleNames, \", \"));\n+              finalRoleNames.addAll(formattedRoleNames);\n \n-            // -------------------------------------------------\n-            // (b) Add direct role assignments -- may be empty\n-            // -------------------------------------------------\n-            formattedRoleNames = getFormattedRoleListForId(dvIdForCard);\n-            //msg(\"(a) direct assignments: \" + StringUtils.join(formattedRoleNames, \", \"));\n-            if (formattedRoleNames != null){\n-                finalRoleNames.addAll(formattedRoleNames);\n-            }\n-            //msg(\"Roles so far: \" + finalRoleNames.toString());\n-            \n-            // -------------------------------------------------\n-            // (c) get parent id\n-            // -------------------------------------------------\n-            Long parentId = null;\n-            if (this.childToParentIdHash.containsKey(dvIdForCard)){\n-                parentId = this.childToParentIdHash.get(dvIdForCard);\n-                //msg(\"(b) parentId: \" + parentId);\n-            }else{\n-                // -------------------------------------------------\n-                // No parent!  Store roles and move to next id\n-                // -------------------------------------------------\n-                finalIdToRolesHash.put(dvIdForCard, this.formatRoleNames(finalRoleNames));\n-                continue;\n             }\n-            \n-            // -------------------------------------------------\n-            // (d) get dtype\n-            // -------------------------------------------------\n-            String dtype = this.idToDvObjectType.get(dvIdForCard);\n-            \n-            switch(dtype){                \n-                //case(SearchConstants.SOLR_DATAVERSES  // No indirect assignments                   \n-\n-                case(SearchConstants.SOLR_DATASETS):\n-                    \n-                    // -------------------------------------------------\n-                    // (d1) May have indirect assignments re: dataverse\n-                    // -------------------------------------------------\n-                    formattedRoleNames = getFormattedRoleListForId(parentId, true, true);\n-                    if (formattedRoleNames != null){\n-                        //msg(\"(d) indirect assignments: \" + StringUtils.join(formattedRoleNames, \", \"));\n-\n-                        finalRoleNames.addAll(formattedRoleNames);\n-                        //msg(\"Roles from dataverse: \" + finalRoleNames.toString());\n-                    }\n-                    break;\n-                case(SearchConstants.SOLR_FILES):\n-                    //msg(\"(c) FILES\");\n-\n-                    // -------------------------------------------------\n-                    // (d2) May have indirect assignments re: dataset \n-                    // -------------------------------------------------\n-                    formattedRoleNames = getFormattedRoleListForId(parentId, false, true);\n-                    if (formattedRoleNames != null){\n-                        //msg(\"(d) indirect assignments: \" + StringUtils.join(formattedRoleNames, \", \"));\n-                        finalRoleNames.addAll(formattedRoleNames);\n-\n-                    }\n-                    // May have indirect assignments re: dataverse\n-                    //\n-                    if (this.childToParentIdHash.containsKey(parentId)){\n-                        Long grandparentId = this.childToParentIdHash.get(parentId);\n-                        formattedRoleNames = getFormattedRoleListForId(grandparentId, false, true);\n-                        if (formattedRoleNames != null){\n-                            //msg(\"(e) 2-step indirect assignments: \" + StringUtils.join(formattedRoleNames, \", \"));\n-                            finalRoleNames.addAll(formattedRoleNames);\n-                            \n-                        }\n-                    }  \n-                   \n-                    break;\n-            } // end switch\n-            //msg(\"Roles from dataverse: \" + formattedRoleNames.toString());\n-            finalIdToRolesHash.put(dvIdForCard, formatRoleNames(finalRoleNames));\n-            //String key = \n-            //Object value = entry.getValue();\n-            // ...\n-        }\n-        \n+          }\n+\n+          break;\n+      } // end switch\n+      //msg(\"Roles from dataverse: \" + formattedRoleNames.toString());\n+      finalIdToRolesHash.put(dvIdForCard, formatRoleNames(finalRoleNames));\n+      //String key =\n+      //Object value = entry.getValue();\n+      // ...\n     }\n-  \n-    private List<String> formatRoleNames(List<String> roleNames){\n-        if (roleNames==null){\n-            return null;\n-        }\n \n-        // remove duplicates\n-        Set<String> distinctRoleNames = new HashSet<>(roleNames);\n-            \n-        // back to list\n-        roleNames = new ArrayList<>(distinctRoleNames);\n-\n-        // sort list\n-        Collections.sort(roleNames);\n-        \n-        return roleNames;\n-        \n-    }\n-    \n-    public boolean hasError(){\n-        return this.errorFound;\n-    }\n-    \n-    public String getErrorMessage(){\n-        return this.errorMessage;\n-    }\n-    \n-    private void addErrorMessage(String s){\n-        this.errorFound = true;\n-        this.errorMessage = s;\n-    }\n-   \n-    private void msg(String s){\n-        //System.out.println(s);\n-    }\n-    \n-    private void msgt(String s){\n-        msg(\"-------------------------------\");\n-        msg(s);\n-        msg(\"-------------------------------\");\n+  }\n+\n+  private List<String> formatRoleNames(List<String> roleNames) {\n+    if (roleNames == null) {\n+      return null;\n     }\n+\n+    // remove duplicates\n+    Set<String> distinctRoleNames = new HashSet<>(roleNames);\n+\n+    // back to list\n+    roleNames = new ArrayList<>(distinctRoleNames);\n+\n+    // sort list\n+    Collections.sort(roleNames);\n+\n+    return roleNames;\n+\n+  }\n+\n+  public boolean hasError() {\n+    return this.errorFound;\n+  }\n+\n+  public String getErrorMessage() {\n+    return this.errorMessage;\n+  }\n+\n+  private void addErrorMessage(String s) {\n+    this.errorFound = true;\n+    this.errorMessage = s;\n+  }\n+\n+  private void msg(String s) {\n+    //System.out.println(s);\n+  }\n+\n+  private void msgt(String s) {\n+    msg(\"-------------------------------\");\n+    msg(s);\n+    msg(\"-------------------------------\");\n+  }\n }\n",
            "diff_size": 940
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/5/RoleTagRetriever.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/5/RoleTagRetriever.java\nindex 4556c92ff19..d746e15d405 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/5/RoleTagRetriever.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/5/RoleTagRetriever.java\n@@ -432,9 +432,8 @@ public class RoleTagRetriever {\n         List<String> roleNames = new ArrayList<>();\n         for (Long roleId : this.idToRoleListHash.get(dvId) ){\n             if ((withDatasetPerms && this.rolePermissionHelper.hasDatasetPermissions(roleId))\n-                || (withFilePerms && this.rolePermissionHelper.hasFilePermissions(roleId)))\n-            {\n-                String roleName = this.rolePermissionHelper.getRoleName(roleId);\n+                || (withFilePerms && this.rolePermissionHelper.hasFilePermissions(roleId))) {\n+                    String roleName = this.rolePermissionHelper.getRoleName(roleId);\n                 if (roleName != null){\n                     roleNames.add(roleName);\n                 }\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/5/RoleTagRetriever.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/5/RoleTagRetriever.java\nindex 4556c92ff19..d746e15d405 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/5/RoleTagRetriever.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/5/RoleTagRetriever.java\n@@ -432,9 +432,8 @@ public class RoleTagRetriever {\n         List<String> roleNames = new ArrayList<>();\n         for (Long roleId : this.idToRoleListHash.get(dvId) ){\n             if ((withDatasetPerms && this.rolePermissionHelper.hasDatasetPermissions(roleId))\n-                || (withFilePerms && this.rolePermissionHelper.hasFilePermissions(roleId)))\n-            {\n-                String roleName = this.rolePermissionHelper.getRoleName(roleId);\n+                || (withFilePerms && this.rolePermissionHelper.hasFilePermissions(roleId))) {\n+                    String roleName = this.rolePermissionHelper.getRoleName(roleId);\n                 if (roleName != null){\n                     roleNames.add(roleName);\n                 }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}