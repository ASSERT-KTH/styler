{
    "project_name": "ibinti-bugvm",
    "error_id": "139",
    "information": {
        "errors": [
            {
                "line": "146",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 100).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     *\n     * <p>The returned set has an ordering equivalent to\n     * <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.\n     * The expression {@code s.descendingSet().descendingSet()} returns a\n     * view of {@code s} essentially equivalent to {@code s}.\n     *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "66",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 95).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "187",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "190",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 81).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 88).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "216",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 98).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "219",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "224",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "245",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "246",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "247",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 94).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "253",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 96).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/139/NavigableSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/139/NavigableSet.java\nindex f4103132c03..7688a170ff9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/139/NavigableSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/intellij/139/NavigableSet.java\n@@ -49,242 +49,243 @@ package java.util;\n  * of this interface are encouraged to override these methods to return\n  * {@code NavigableSet}.\n  *\n+ * @param <E> the type of elements maintained by this set\n  * @author Doug Lea\n  * @author Josh Bloch\n- * @param <E> the type of elements maintained by this set\n  * @since 1.6\n  */\n public interface NavigableSet<E> extends SortedSet<E> {\n-    /**\n-     * Returns the greatest element in this set strictly less than the\n-     * given element, or {@code null} if there is no such element.\n-     *\n-     * @param e the value to match\n-     * @return the greatest element less than {@code e},\n-     *         or {@code null} if there is no such element\n-     * @throws ClassCastException if the specified element cannot be\n-     *         compared with the elements currently in the set\n-     * @throws NullPointerException if the specified element is null\n-     *         and this set does not permit null elements\n-     */\n-    E lower(E e);\n+  /**\n+   * Returns the greatest element in this set strictly less than the\n+   * given element, or {@code null} if there is no such element.\n+   *\n+   * @param e the value to match\n+   * @return the greatest element less than {@code e},\n+   * or {@code null} if there is no such element\n+   * @throws ClassCastException   if the specified element cannot be\n+   *                              compared with the elements currently in the set\n+   * @throws NullPointerException if the specified element is null\n+   *                              and this set does not permit null elements\n+   */\n+  E lower(E e);\n \n-    /**\n-     * Returns the greatest element in this set less than or equal to\n-     * the given element, or {@code null} if there is no such element.\n-     *\n-     * @param e the value to match\n-     * @return the greatest element less than or equal to {@code e},\n-     *         or {@code null} if there is no such element\n-     * @throws ClassCastException if the specified element cannot be\n-     *         compared with the elements currently in the set\n-     * @throws NullPointerException if the specified element is null\n-     *         and this set does not permit null elements\n-     */\n-    E floor(E e);\n+  /**\n+   * Returns the greatest element in this set less than or equal to\n+   * the given element, or {@code null} if there is no such element.\n+   *\n+   * @param e the value to match\n+   * @return the greatest element less than or equal to {@code e},\n+   * or {@code null} if there is no such element\n+   * @throws ClassCastException   if the specified element cannot be\n+   *                              compared with the elements currently in the set\n+   * @throws NullPointerException if the specified element is null\n+   *                              and this set does not permit null elements\n+   */\n+  E floor(E e);\n \n-    /**\n-     * Returns the least element in this set greater than or equal to\n-     * the given element, or {@code null} if there is no such element.\n-     *\n-     * @param e the value to match\n-     * @return the least element greater than or equal to {@code e},\n-     *         or {@code null} if there is no such element\n-     * @throws ClassCastException if the specified element cannot be\n-     *         compared with the elements currently in the set\n-     * @throws NullPointerException if the specified element is null\n-     *         and this set does not permit null elements\n-     */\n-    E ceiling(E e);\n+  /**\n+   * Returns the least element in this set greater than or equal to\n+   * the given element, or {@code null} if there is no such element.\n+   *\n+   * @param e the value to match\n+   * @return the least element greater than or equal to {@code e},\n+   * or {@code null} if there is no such element\n+   * @throws ClassCastException   if the specified element cannot be\n+   *                              compared with the elements currently in the set\n+   * @throws NullPointerException if the specified element is null\n+   *                              and this set does not permit null elements\n+   */\n+  E ceiling(E e);\n \n-    /**\n-     * Returns the least element in this set strictly greater than the\n-     * given element, or {@code null} if there is no such element.\n-     *\n-     * @param e the value to match\n-     * @return the least element greater than {@code e},\n-     *         or {@code null} if there is no such element\n-     * @throws ClassCastException if the specified element cannot be\n-     *         compared with the elements currently in the set\n-     * @throws NullPointerException if the specified element is null\n-     *         and this set does not permit null elements\n-     */\n-    E higher(E e);\n+  /**\n+   * Returns the least element in this set strictly greater than the\n+   * given element, or {@code null} if there is no such element.\n+   *\n+   * @param e the value to match\n+   * @return the least element greater than {@code e},\n+   * or {@code null} if there is no such element\n+   * @throws ClassCastException   if the specified element cannot be\n+   *                              compared with the elements currently in the set\n+   * @throws NullPointerException if the specified element is null\n+   *                              and this set does not permit null elements\n+   */\n+  E higher(E e);\n \n-    /**\n-     * Retrieves and removes the first (lowest) element,\n-     * or returns {@code null} if this set is empty.\n-     *\n-     * @return the first element, or {@code null} if this set is empty\n-     */\n-    E pollFirst();\n+  /**\n+   * Retrieves and removes the first (lowest) element,\n+   * or returns {@code null} if this set is empty.\n+   *\n+   * @return the first element, or {@code null} if this set is empty\n+   */\n+  E pollFirst();\n \n-    /**\n-     * Retrieves and removes the last (highest) element,\n-     * or returns {@code null} if this set is empty.\n-     *\n-     * @return the last element, or {@code null} if this set is empty\n-     */\n-    E pollLast();\n+  /**\n+   * Retrieves and removes the last (highest) element,\n+   * or returns {@code null} if this set is empty.\n+   *\n+   * @return the last element, or {@code null} if this set is empty\n+   */\n+  E pollLast();\n \n-    /**\n-     * Returns an iterator over the elements in this set, in ascending order.\n-     *\n-     * @return an iterator over the elements in this set, in ascending order\n-     */\n-    Iterator<E> iterator();\n+  /**\n+   * Returns an iterator over the elements in this set, in ascending order.\n+   *\n+   * @return an iterator over the elements in this set, in ascending order\n+   */\n+  Iterator<E> iterator();\n \n-    /**\n-     * Returns a reverse order view of the elements contained in this set.\n-     * The descending set is backed by this set, so changes to the set are\n-     * reflected in the descending set, and vice-versa.  If either set is\n-     * modified while an iteration over either set is in progress (except\n-     * through the iterator's own {@code remove} operation), the results of\n-     * the iteration are undefined.\n-     *\n-     * <p>The returned set has an ordering equivalent to\n-     * <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.\n-     * The expression {@code s.descendingSet().descendingSet()} returns a\n-     * view of {@code s} essentially equivalent to {@code s}.\n-     *\n-     * @return a reverse order view of this set\n-     */\n-    NavigableSet<E> descendingSet();\n+  /**\n+   * Returns a reverse order view of the elements contained in this set.\n+   * The descending set is backed by this set, so changes to the set are\n+   * reflected in the descending set, and vice-versa.  If either set is\n+   * modified while an iteration over either set is in progress (except\n+   * through the iterator's own {@code remove} operation), the results of\n+   * the iteration are undefined.\n+   *\n+   * <p>The returned set has an ordering equivalent to\n+   * <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.\n+   * The expression {@code s.descendingSet().descendingSet()} returns a\n+   * view of {@code s} essentially equivalent to {@code s}.\n+   *\n+   * @return a reverse order view of this set\n+   */\n+  NavigableSet<E> descendingSet();\n \n-    /**\n-     * Returns an iterator over the elements in this set, in descending order.\n-     * Equivalent in effect to {@code descendingSet().iterator()}.\n-     *\n-     * @return an iterator over the elements in this set, in descending order\n-     */\n-    Iterator<E> descendingIterator();\n+  /**\n+   * Returns an iterator over the elements in this set, in descending order.\n+   * Equivalent in effect to {@code descendingSet().iterator()}.\n+   *\n+   * @return an iterator over the elements in this set, in descending order\n+   */\n+  Iterator<E> descendingIterator();\n \n-    /**\n-     * Returns a view of the portion of this set whose elements range from\n-     * {@code fromElement} to {@code toElement}.  If {@code fromElement} and\n-     * {@code toElement} are equal, the returned set is empty unless {@code\n-     * fromExclusive} and {@code toExclusive} are both true.  The returned set\n-     * is backed by this set, so changes in the returned set are reflected in\n-     * this set, and vice-versa.  The returned set supports all optional set\n-     * operations that this set supports.\n-     *\n-     * <p>The returned set will throw an {@code IllegalArgumentException}\n-     * on an attempt to insert an element outside its range.\n-     *\n-     * @param fromElement low endpoint of the returned set\n-     * @param fromInclusive {@code true} if the low endpoint\n-     *        is to be included in the returned view\n-     * @param toElement high endpoint of the returned set\n-     * @param toInclusive {@code true} if the high endpoint\n-     *        is to be included in the returned view\n-     * @return a view of the portion of this set whose elements range from\n-     *         {@code fromElement}, inclusive, to {@code toElement}, exclusive\n-     * @throws ClassCastException if {@code fromElement} and\n-     *         {@code toElement} cannot be compared to one another using this\n-     *         set's comparator (or, if the set has no comparator, using\n-     *         natural ordering).  Implementations may, but are not required\n-     *         to, throw this exception if {@code fromElement} or\n-     *         {@code toElement} cannot be compared to elements currently in\n-     *         the set.\n-     * @throws NullPointerException if {@code fromElement} or\n-     *         {@code toElement} is null and this set does\n-     *         not permit null elements\n-     * @throws IllegalArgumentException if {@code fromElement} is\n-     *         greater than {@code toElement}; or if this set itself\n-     *         has a restricted range, and {@code fromElement} or\n-     *         {@code toElement} lies outside the bounds of the range.\n-     */\n-    NavigableSet<E> subSet(E fromElement, boolean fromInclusive,\n-                           E toElement,   boolean toInclusive);\n+  /**\n+   * Returns a view of the portion of this set whose elements range from\n+   * {@code fromElement} to {@code toElement}.  If {@code fromElement} and\n+   * {@code toElement} are equal, the returned set is empty unless {@code\n+   * fromExclusive} and {@code toExclusive} are both true.  The returned set\n+   * is backed by this set, so changes in the returned set are reflected in\n+   * this set, and vice-versa.  The returned set supports all optional set\n+   * operations that this set supports.\n+   *\n+   * <p>The returned set will throw an {@code IllegalArgumentException}\n+   * on an attempt to insert an element outside its range.\n+   *\n+   * @param fromElement   low endpoint of the returned set\n+   * @param fromInclusive {@code true} if the low endpoint\n+   *                      is to be included in the returned view\n+   * @param toElement     high endpoint of the returned set\n+   * @param toInclusive   {@code true} if the high endpoint\n+   *                      is to be included in the returned view\n+   * @return a view of the portion of this set whose elements range from\n+   * {@code fromElement}, inclusive, to {@code toElement}, exclusive\n+   * @throws ClassCastException       if {@code fromElement} and\n+   *                                  {@code toElement} cannot be compared to one another using this\n+   *                                  set's comparator (or, if the set has no comparator, using\n+   *                                  natural ordering).  Implementations may, but are not required\n+   *                                  to, throw this exception if {@code fromElement} or\n+   *                                  {@code toElement} cannot be compared to elements currently in\n+   *                                  the set.\n+   * @throws NullPointerException     if {@code fromElement} or\n+   *                                  {@code toElement} is null and this set does\n+   *                                  not permit null elements\n+   * @throws IllegalArgumentException if {@code fromElement} is\n+   *                                  greater than {@code toElement}; or if this set itself\n+   *                                  has a restricted range, and {@code fromElement} or\n+   *                                  {@code toElement} lies outside the bounds of the range.\n+   */\n+  NavigableSet<E> subSet(E fromElement, boolean fromInclusive,\n+                         E toElement, boolean toInclusive);\n \n-    /**\n-     * Returns a view of the portion of this set whose elements are less than\n-     * (or equal to, if {@code inclusive} is true) {@code toElement}.  The\n-     * returned set is backed by this set, so changes in the returned set are\n-     * reflected in this set, and vice-versa.  The returned set supports all\n-     * optional set operations that this set supports.\n-     *\n-     * <p>The returned set will throw an {@code IllegalArgumentException}\n-     * on an attempt to insert an element outside its range.\n-     *\n-     * @param toElement high endpoint of the returned set\n-     * @param inclusive {@code true} if the high endpoint\n-     *        is to be included in the returned view\n-     * @return a view of the portion of this set whose elements are less than\n-     *         (or equal to, if {@code inclusive} is true) {@code toElement}\n-     * @throws ClassCastException if {@code toElement} is not compatible\n-     *         with this set's comparator (or, if the set has no comparator,\n-     *         if {@code toElement} does not implement {@link Comparable}).\n-     *         Implementations may, but are not required to, throw this\n-     *         exception if {@code toElement} cannot be compared to elements\n-     *         currently in the set.\n-     * @throws NullPointerException if {@code toElement} is null and\n-     *         this set does not permit null elements\n-     * @throws IllegalArgumentException if this set itself has a\n-     *         restricted range, and {@code toElement} lies outside the\n-     *         bounds of the range\n-     */\n-    NavigableSet<E> headSet(E toElement, boolean inclusive);\n+  /**\n+   * Returns a view of the portion of this set whose elements are less than\n+   * (or equal to, if {@code inclusive} is true) {@code toElement}.  The\n+   * returned set is backed by this set, so changes in the returned set are\n+   * reflected in this set, and vice-versa.  The returned set supports all\n+   * optional set operations that this set supports.\n+   *\n+   * <p>The returned set will throw an {@code IllegalArgumentException}\n+   * on an attempt to insert an element outside its range.\n+   *\n+   * @param toElement high endpoint of the returned set\n+   * @param inclusive {@code true} if the high endpoint\n+   *                  is to be included in the returned view\n+   * @return a view of the portion of this set whose elements are less than\n+   * (or equal to, if {@code inclusive} is true) {@code toElement}\n+   * @throws ClassCastException       if {@code toElement} is not compatible\n+   *                                  with this set's comparator (or, if the set has no comparator,\n+   *                                  if {@code toElement} does not implement {@link Comparable}).\n+   *                                  Implementations may, but are not required to, throw this\n+   *                                  exception if {@code toElement} cannot be compared to elements\n+   *                                  currently in the set.\n+   * @throws NullPointerException     if {@code toElement} is null and\n+   *                                  this set does not permit null elements\n+   * @throws IllegalArgumentException if this set itself has a\n+   *                                  restricted range, and {@code toElement} lies outside the\n+   *                                  bounds of the range\n+   */\n+  NavigableSet<E> headSet(E toElement, boolean inclusive);\n \n-    /**\n-     * Returns a view of the portion of this set whose elements are greater\n-     * than (or equal to, if {@code inclusive} is true) {@code fromElement}.\n-     * The returned set is backed by this set, so changes in the returned set\n-     * are reflected in this set, and vice-versa.  The returned set supports\n-     * all optional set operations that this set supports.\n-     *\n-     * <p>The returned set will throw an {@code IllegalArgumentException}\n-     * on an attempt to insert an element outside its range.\n-     *\n-     * @param fromElement low endpoint of the returned set\n-     * @param inclusive {@code true} if the low endpoint\n-     *        is to be included in the returned view\n-     * @return a view of the portion of this set whose elements are greater\n-     *         than or equal to {@code fromElement}\n-     * @throws ClassCastException if {@code fromElement} is not compatible\n-     *         with this set's comparator (or, if the set has no comparator,\n-     *         if {@code fromElement} does not implement {@link Comparable}).\n-     *         Implementations may, but are not required to, throw this\n-     *         exception if {@code fromElement} cannot be compared to elements\n-     *         currently in the set.\n-     * @throws NullPointerException if {@code fromElement} is null\n-     *         and this set does not permit null elements\n-     * @throws IllegalArgumentException if this set itself has a\n-     *         restricted range, and {@code fromElement} lies outside the\n-     *         bounds of the range\n-     */\n-    NavigableSet<E> tailSet(E fromElement, boolean inclusive);\n+  /**\n+   * Returns a view of the portion of this set whose elements are greater\n+   * than (or equal to, if {@code inclusive} is true) {@code fromElement}.\n+   * The returned set is backed by this set, so changes in the returned set\n+   * are reflected in this set, and vice-versa.  The returned set supports\n+   * all optional set operations that this set supports.\n+   *\n+   * <p>The returned set will throw an {@code IllegalArgumentException}\n+   * on an attempt to insert an element outside its range.\n+   *\n+   * @param fromElement low endpoint of the returned set\n+   * @param inclusive   {@code true} if the low endpoint\n+   *                    is to be included in the returned view\n+   * @return a view of the portion of this set whose elements are greater\n+   * than or equal to {@code fromElement}\n+   * @throws ClassCastException       if {@code fromElement} is not compatible\n+   *                                  with this set's comparator (or, if the set has no comparator,\n+   *                                  if {@code fromElement} does not implement {@link Comparable}).\n+   *                                  Implementations may, but are not required to, throw this\n+   *                                  exception if {@code fromElement} cannot be compared to elements\n+   *                                  currently in the set.\n+   * @throws NullPointerException     if {@code fromElement} is null\n+   *                                  and this set does not permit null elements\n+   * @throws IllegalArgumentException if this set itself has a\n+   *                                  restricted range, and {@code fromElement} lies outside the\n+   *                                  bounds of the range\n+   */\n+  NavigableSet<E> tailSet(E fromElement, boolean inclusive);\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * <p>Equivalent to {@code subSet(fromElement, true, toElement, false)}.\n-     *\n-     * @throws ClassCastException       {@inheritDoc}\n-     * @throws NullPointerException     {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     */\n-    SortedSet<E> subSet(E fromElement, E toElement);\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <p>Equivalent to {@code subSet(fromElement, true, toElement, false)}.\n+   *\n+   * @throws ClassCastException       {@inheritDoc}\n+   * @throws NullPointerException     {@inheritDoc}\n+   * @throws IllegalArgumentException {@inheritDoc}\n+   */\n+  SortedSet<E> subSet(E fromElement, E toElement);\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * <p>Equivalent to {@code headSet(toElement, false)}.\n-     *\n-     * @throws ClassCastException       {@inheritDoc}\n-     * @throws NullPointerException     {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-na     */\n-    SortedSet<E> headSet(E toElement);\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <p>Equivalent to {@code headSet(toElement, false)}.\n+   *\n+   * @throws ClassCastException       {@inheritDoc}\n+   * @throws NullPointerException     {@inheritDoc}\n+   * @throws IllegalArgumentException {@inheritDoc}\n+   *                                  na\n+   */\n+  SortedSet<E> headSet(E toElement);\n \n-    /**\n-     * {@inheritDoc}\n-     *\n-     * <p>Equivalent to {@code tailSet(fromElement, true)}.\n-     *\n-     * @throws ClassCastException       {@inheritDoc}\n-     * @throws NullPointerException     {@inheritDoc}\n-     * @throws IllegalArgumentException {@inheritDoc}\n-     */\n-    SortedSet<E> tailSet(E fromElement);\n+  /**\n+   * {@inheritDoc}\n+   *\n+   * <p>Equivalent to {@code tailSet(fromElement, true)}.\n+   *\n+   * @throws ClassCastException       {@inheritDoc}\n+   * @throws NullPointerException     {@inheritDoc}\n+   * @throws IllegalArgumentException {@inheritDoc}\n+   */\n+  SortedSet<E> tailSet(E fromElement);\n }\n",
            "diff_size": 221
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 99).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/139/NavigableSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/139/NavigableSet.java\nindex f4103132c03..6135b1db2aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/139/NavigableSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/naturalize/139/NavigableSet.java\n@@ -194,10 +194,9 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      *         has a restricted range, and {@code fromElement} or\n      *         {@code toElement} lies outside the bounds of the range.\n      */\n-    NavigableSet<E> subSet(E fromElement, boolean fromInclusive,\n-                           E toElement,   boolean toInclusive);\n+    NavigableSet<E> subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive);\n \n-    /**\n+/**\n      * Returns a view of the portion of this set whose elements are less than\n      * (or equal to, if {@code inclusive} is true) {@code toElement}.  The\n      * returned set is backed by this set, so changes in the returned set are\n@@ -287,4 +286,4 @@ na     */\n      * @throws IllegalArgumentException {@inheritDoc}\n      */\n     SortedSet<E> tailSet(E fromElement);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/139/NavigableSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/139/NavigableSet.java\nindex f4103132c03..62f3a4db1f6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/139/NavigableSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/codebuff/139/NavigableSet.java\n@@ -54,6 +54,8 @@ package java.util;\n  * @param <E> the type of elements maintained by this set\n  * @since 1.6\n  */\n+\n+\n public interface NavigableSet<E> extends SortedSet<E> {\n     /**\n      * Returns the greatest element in this set strictly less than the\n@@ -67,6 +69,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      * @throws NullPointerException if the specified element is null\n      *         and this set does not permit null elements\n      */\n+\n+\n     E lower(E e);\n \n     /**\n@@ -81,6 +85,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      * @throws NullPointerException if the specified element is null\n      *         and this set does not permit null elements\n      */\n+\n+\n     E floor(E e);\n \n     /**\n@@ -95,6 +101,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      * @throws NullPointerException if the specified element is null\n      *         and this set does not permit null elements\n      */\n+\n+\n     E ceiling(E e);\n \n     /**\n@@ -109,6 +117,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      * @throws NullPointerException if the specified element is null\n      *         and this set does not permit null elements\n      */\n+\n+\n     E higher(E e);\n \n     /**\n@@ -117,6 +127,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      *\n      * @return the first element, or {@code null} if this set is empty\n      */\n+\n+\n     E pollFirst();\n \n     /**\n@@ -125,6 +137,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      *\n      * @return the last element, or {@code null} if this set is empty\n      */\n+\n+\n     E pollLast();\n \n     /**\n@@ -132,6 +146,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      *\n      * @return an iterator over the elements in this set, in ascending order\n      */\n+\n+\n     Iterator<E> iterator();\n \n     /**\n@@ -149,6 +165,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      *\n      * @return a reverse order view of this set\n      */\n+\n+\n     NavigableSet<E> descendingSet();\n \n     /**\n@@ -157,6 +175,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      *\n      * @return an iterator over the elements in this set, in descending order\n      */\n+\n+\n     Iterator<E> descendingIterator();\n \n     /**\n@@ -194,8 +214,11 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      *         has a restricted range, and {@code fromElement} or\n      *         {@code toElement} lies outside the bounds of the range.\n      */\n-    NavigableSet<E> subSet(E fromElement, boolean fromInclusive,\n-                           E toElement,   boolean toInclusive);\n+\n+\n+    NavigableSet<E> subSet(E fromElement,\n+                           boolean fromInclusive,\n+                           E toElement, boolean toInclusive);\n \n     /**\n      * Returns a view of the portion of this set whose elements are less than\n@@ -224,6 +247,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      *         restricted range, and {@code toElement} lies outside the\n      *         bounds of the range\n      */\n+\n+\n     NavigableSet<E> headSet(E toElement, boolean inclusive);\n \n     /**\n@@ -253,6 +278,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      *         restricted range, and {@code fromElement} lies outside the\n      *         bounds of the range\n      */\n+\n+\n     NavigableSet<E> tailSet(E fromElement, boolean inclusive);\n \n     /**\n@@ -264,6 +291,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      * @throws NullPointerException     {@inheritDoc}\n      * @throws IllegalArgumentException {@inheritDoc}\n      */\n+\n+\n     SortedSet<E> subSet(E fromElement, E toElement);\n \n     /**\n@@ -275,6 +304,8 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      * @throws NullPointerException     {@inheritDoc}\n      * @throws IllegalArgumentException {@inheritDoc}\n na     */\n+\n+\n     SortedSet<E> headSet(E toElement);\n \n     /**\n@@ -286,5 +317,8 @@ na     */\n      * @throws NullPointerException     {@inheritDoc}\n      * @throws IllegalArgumentException {@inheritDoc}\n      */\n+\n+\n     SortedSet<E> tailSet(E fromElement);\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 37
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "145",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/139/NavigableSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/styler_three_grams/139/NavigableSet.java\nindex f4103132c03..704aa2fc61b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/errored/1/139/NavigableSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/ibinti-bugvm/styler_three_grams/139/NavigableSet.java\n@@ -133,7 +133,6 @@ public interface NavigableSet<E> extends SortedSet<E> {\n      * @return an iterator over the elements in this set, in ascending order\n      */\n     Iterator<E> iterator();\n-\n     /**\n      * Returns a reverse order view of the elements contained in this set.\n      * The descending set is backed by this set, so changes to the set are\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}