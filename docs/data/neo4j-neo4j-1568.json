{
    "project_name": "neo4j-neo4j",
    "error_id": "1568",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "87",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "92",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "81",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "286",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "286",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "294",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "415",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "434",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "437",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "446",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "460",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "467",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1568/SchemaRuleSerialization35.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1568/SchemaRuleSerialization35.java\nindex 90e9ea58a53..d94c050f7f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1568/SchemaRuleSerialization35.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1568/SchemaRuleSerialization35.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.storemigration.legacy;\n \n import java.nio.ByteBuffer;\n@@ -83,44 +84,43 @@ public class SchemaRuleSerialization35\n      *\n      * @param schemaRule the SchemaRule to serialize\n      */\n-    public static byte[] serialize( SchemaRule schemaRule, MemoryTracker memoryTracker )\n+    public static byte[] serialize(SchemaRule schemaRule, MemoryTracker memoryTracker)\n     {\n-        if ( schemaRule instanceof IndexDescriptor )\n+        if (schemaRule instanceof IndexDescriptor)\n         {\n-            return serialize( (IndexDescriptor) schemaRule, memoryTracker );\n-        }\n-        else if ( schemaRule instanceof ConstraintDescriptor )\n+            return serialize((IndexDescriptor) schemaRule, memoryTracker);\n+        } else if (schemaRule instanceof ConstraintDescriptor)\n         {\n-            return serialize( (ConstraintDescriptor) schemaRule, memoryTracker );\n+            return serialize((ConstraintDescriptor) schemaRule, memoryTracker);\n         }\n-        throw new IllegalStateException( \"Unknown schema rule type: \" + schemaRule.getClass() );\n+        throw new IllegalStateException(\"Unknown schema rule type: \" + schemaRule.getClass());\n     }\n \n     /**\n      * Parse a SchemaRule from the provided buffer.\n      *\n-     * @param id the id to give the returned Schema Rule\n+     * @param id     the id to give the returned Schema Rule\n      * @param source the buffer to parse from\n      * @return a SchemaRule\n      * @throws MalformedSchemaRuleException if bytes in the buffer do encode a valid SchemaRule\n      */\n-    public static SchemaRule deserialize( long id, ByteBuffer source ) throws MalformedSchemaRuleException\n+    public static SchemaRule deserialize(long id, ByteBuffer source) throws MalformedSchemaRuleException\n     {\n         int legacyLabelOrRelTypeId = source.getInt();\n         byte schemaRuleType = source.get();\n \n-        switch ( schemaRuleType )\n+        switch (schemaRuleType)\n         {\n-        case INDEX_RULE:\n-            return readIndexRule( id, source );\n-        case CONSTRAINT_RULE:\n-            return readConstraintRule( id, source );\n-        default:\n-            if ( SchemaRuleDeserializer2_0to3_1.isLegacySchemaRule( schemaRuleType ) )\n-            {\n-                return SchemaRuleDeserializer2_0to3_1.deserialize( id, legacyLabelOrRelTypeId, schemaRuleType, source );\n-            }\n-            throw new MalformedSchemaRuleException( format( \"Got unknown schema rule type '%d'.\", schemaRuleType ) );\n+            case INDEX_RULE:\n+                return readIndexRule(id, source);\n+            case CONSTRAINT_RULE:\n+                return readConstraintRule(id, source);\n+            default:\n+                if (SchemaRuleDeserializer2_0to3_1.isLegacySchemaRule(schemaRuleType))\n+                {\n+                    return SchemaRuleDeserializer2_0to3_1.deserialize(id, legacyLabelOrRelTypeId, schemaRuleType, source);\n+                }\n+                throw new MalformedSchemaRuleException(format(\"Got unknown schema rule type '%d'.\", schemaRuleType));\n         }\n     }\n \n@@ -130,116 +130,118 @@ public class SchemaRuleSerialization35\n      * @param indexDescriptor the StoreIndexDescriptor to serialize\n      * @throws IllegalStateException if the StoreIndexDescriptor is of type unique, but the owning constrain has not been set\n      */\n-    public static byte[] serialize( IndexDescriptor indexDescriptor, MemoryTracker memoryTracker )\n+    public static byte[] serialize(IndexDescriptor indexDescriptor, MemoryTracker memoryTracker)\n     {\n-        try ( var scopedBuffer = new HeapScopedBuffer( lengthOf( indexDescriptor ), memoryTracker ) )\n+        try (var scopedBuffer = new HeapScopedBuffer(lengthOf(indexDescriptor), memoryTracker))\n         {\n             var target = scopedBuffer.getBuffer();\n-            target.putInt( LEGACY_LABEL_OR_REL_TYPE_ID );\n-            target.put( INDEX_RULE );\n+            target.putInt(LEGACY_LABEL_OR_REL_TYPE_ID);\n+            target.put(INDEX_RULE);\n \n-            UTF8.putEncodedStringInto( indexDescriptor.getIndexProvider().getKey(), target );\n-            UTF8.putEncodedStringInto( indexDescriptor.getIndexProvider().getVersion(), target );\n+            UTF8.putEncodedStringInto(indexDescriptor.getIndexProvider().getKey(), target);\n+            UTF8.putEncodedStringInto(indexDescriptor.getIndexProvider().getVersion(), target);\n \n-            if ( !indexDescriptor.isUnique() )\n+            if (!indexDescriptor.isUnique())\n             {\n-                target.put( GENERAL_INDEX );\n-            }\n-            else\n+                target.put(GENERAL_INDEX);\n+            } else\n             {\n-                target.put( UNIQUE_INDEX );\n+                target.put(UNIQUE_INDEX);\n \n                 // The owning constraint can be null. See IndexRule.getOwningConstraint()\n-                target.putLong( indexDescriptor.getOwningConstraintId().orElse( NO_OWNING_CONSTRAINT_YET ) );\n+                target.putLong(indexDescriptor.getOwningConstraintId().orElse(NO_OWNING_CONSTRAINT_YET));\n             }\n \n-            indexDescriptor.schema().processWith( new SchemaDescriptorSerializer( target ) );\n-            UTF8.putEncodedStringInto( indexDescriptor.getName(), target );\n+            indexDescriptor.schema().processWith(new SchemaDescriptorSerializer(target));\n+            UTF8.putEncodedStringInto(indexDescriptor.getName(), target);\n             return target.array();\n         }\n     }\n \n     /**\n      * Serialize the provided ConstraintDescriptor onto the target buffer\n+     *\n      * @param constraint the ConstraintDescriptor to serialize\n      * @throws IllegalStateException if the ConstraintDescriptor is of type unique, but the owned index has not been set\n      */\n-    public static byte[] serialize( ConstraintDescriptor constraint, MemoryTracker memoryTracker )\n+    public static byte[] serialize(ConstraintDescriptor constraint, MemoryTracker memoryTracker)\n     {\n-        try ( var scopedBuffer = new HeapScopedBuffer( lengthOf( constraint ), memoryTracker ) )\n+        try (var scopedBuffer = new HeapScopedBuffer(lengthOf(constraint), memoryTracker))\n         {\n             ByteBuffer target = scopedBuffer.getBuffer();\n-            target.putInt( LEGACY_LABEL_OR_REL_TYPE_ID );\n-            target.put( CONSTRAINT_RULE );\n+            target.putInt(LEGACY_LABEL_OR_REL_TYPE_ID);\n+            target.put(CONSTRAINT_RULE);\n \n-            switch ( constraint.type() )\n+            switch (constraint.type())\n             {\n-            case EXISTS:\n-                target.put( EXISTS_CONSTRAINT );\n-                break;\n-\n-            case UNIQUE:\n-                target.put( UNIQUE_CONSTRAINT );\n-                target.putLong( constraint.asIndexBackedConstraint().ownedIndexId() );\n-                break;\n-\n-            case UNIQUE_EXISTS:\n-                target.put( UNIQUE_EXISTS_CONSTRAINT );\n-                target.putLong( constraint.asIndexBackedConstraint().ownedIndexId() );\n-                break;\n-\n-            default:\n-                throw new UnsupportedOperationException( format( \"Got unknown index descriptor type '%s'.\", constraint.type() ) );\n+                case EXISTS:\n+                    target.put(EXISTS_CONSTRAINT);\n+                    break;\n+\n+                case UNIQUE:\n+                    target.put(UNIQUE_CONSTRAINT);\n+                    target.putLong(constraint.asIndexBackedConstraint().ownedIndexId());\n+                    break;\n+\n+                case UNIQUE_EXISTS:\n+                    target.put(UNIQUE_EXISTS_CONSTRAINT);\n+                    target.putLong(constraint.asIndexBackedConstraint().ownedIndexId());\n+                    break;\n+\n+                default:\n+                    throw new UnsupportedOperationException(format(\"Got unknown index descriptor type '%s'.\", constraint.type()));\n             }\n \n-            constraint.schema().processWith( new SchemaDescriptorSerializer( target ) );\n-            UTF8.putEncodedStringInto( constraint.getName(), target );\n+            constraint.schema().processWith(new SchemaDescriptorSerializer(target));\n+            UTF8.putEncodedStringInto(constraint.getName(), target);\n             return target.array();\n         }\n     }\n \n     /**\n      * Compute the byte size needed to serialize the provided IndexRule using serialize.\n+     *\n      * @param indexDescriptor the StoreIndexDescriptor\n      * @return the byte size of StoreIndexDescriptor\n      */\n-    static int lengthOf( IndexDescriptor indexDescriptor )\n+    static int lengthOf(IndexDescriptor indexDescriptor)\n     {\n         int length = 4; // legacy label or relType id\n         length += 1;    // schema rule type\n \n-        length += UTF8.computeRequiredByteBufferSize( indexDescriptor.getIndexProvider().getKey() );\n-        length += UTF8.computeRequiredByteBufferSize( indexDescriptor.getIndexProvider().getVersion() );\n+        length += UTF8.computeRequiredByteBufferSize(indexDescriptor.getIndexProvider().getKey());\n+        length += UTF8.computeRequiredByteBufferSize(indexDescriptor.getIndexProvider().getVersion());\n \n         length += 1; // index type\n-        if ( indexDescriptor.isUnique() )\n+        if (indexDescriptor.isUnique())\n         {\n             length += 8; // owning constraint id\n         }\n \n-        length += computeSchemaSize( indexDescriptor.schema() );\n-        length += UTF8.computeRequiredByteBufferSize( indexDescriptor.getName() );\n+        length += computeSchemaSize(indexDescriptor.schema());\n+        length += UTF8.computeRequiredByteBufferSize(indexDescriptor.getName());\n         return length;\n     }\n \n     /**\n      * Compute the byte size needed to serialize the provided ConstraintDescriptor using serialize.\n+     *\n      * @param constraint the ConstraintDescriptor\n      * @return the byte size of ConstraintDescriptor\n      */\n-    static int lengthOf( ConstraintDescriptor constraint )\n+    static int lengthOf(ConstraintDescriptor constraint)\n     {\n         int length = 4; // legacy label or relType id\n         length += 1; // schema rule type\n \n         length += 1; // constraint type\n-        if ( constraint.enforcesUniqueness() )\n+        if (constraint.enforcesUniqueness())\n         {\n             length += 8; // owned index id\n         }\n \n-        length += computeSchemaSize( constraint.schema() );\n-        length += UTF8.computeRequiredByteBufferSize( constraint.getName() );\n+        length += computeSchemaSize(constraint.schema());\n+        length += UTF8.computeRequiredByteBufferSize(constraint.getName());\n         return length;\n     }\n \n@@ -247,153 +249,151 @@ public class SchemaRuleSerialization35\n \n     // READ INDEX\n \n-    private static IndexDescriptor readIndexRule( long id, ByteBuffer source ) throws MalformedSchemaRuleException\n+    private static IndexDescriptor readIndexRule(long id, ByteBuffer source) throws MalformedSchemaRuleException\n     {\n-        String providerKey = getDecodedStringFrom( source );\n-        String providerVersion = getDecodedStringFrom( source );\n-        IndexProviderDescriptor providerDescriptor = new IndexProviderDescriptor( providerKey, providerVersion );\n+        String providerKey = getDecodedStringFrom(source);\n+        String providerVersion = getDecodedStringFrom(source);\n+        IndexProviderDescriptor providerDescriptor = new IndexProviderDescriptor(providerKey, providerVersion);\n         byte indexRuleType = source.get();\n         Optional<String> name;\n-        switch ( indexRuleType )\n-        {\n-        case GENERAL_INDEX:\n+        switch (indexRuleType)\n         {\n-            SchemaDescriptor schema = readSchema( source );\n-            name = readRuleName( source );\n-            IndexPrototype prototype = IndexPrototype.forSchema( schema, providerDescriptor );\n-            if ( schema.isFulltextSchemaDescriptor() )\n-            {\n-                prototype = prototype.withIndexType( IndexType.FULLTEXT );\n-            }\n-            if ( name.isPresent() )\n+            case GENERAL_INDEX:\n             {\n-                prototype = prototype.withName( name.get() );\n+                SchemaDescriptor schema = readSchema(source);\n+                name = readRuleName(source);\n+                IndexPrototype prototype = IndexPrototype.forSchema(schema, providerDescriptor);\n+                if (schema.isFulltextSchemaDescriptor())\n+                {\n+                    prototype = prototype.withIndexType(IndexType.FULLTEXT);\n+                }\n+                if (name.isPresent())\n+                {\n+                    prototype = prototype.withName(name.get());\n+                } else\n+                {\n+                    prototype = prototype.withName(defaultIndexName(id));\n+                }\n+                return prototype.materialise(id);\n             }\n-            else\n+            case UNIQUE_INDEX:\n             {\n-                prototype = prototype.withName( defaultIndexName( id ) );\n+                long readOwningConstraint = source.getLong();\n+                SchemaDescriptor schema = readSchema(source);\n+                name = readRuleName(source);\n+\n+                IndexPrototype prototype = IndexPrototype.uniqueForSchema(schema, providerDescriptor);\n+                if (name.isPresent())\n+                {\n+                    prototype = prototype.withName(name.get());\n+                } else\n+                {\n+                    prototype = prototype.withName(defaultIndexName(id));\n+                }\n+                IndexDescriptor index = prototype.materialise(id);\n+                if (readOwningConstraint != NO_OWNING_CONSTRAINT_YET)\n+                {\n+                    index = index.withOwningConstraintId(readOwningConstraint);\n+                }\n+                return index;\n             }\n-            return prototype.materialise( id );\n-        }\n-        case UNIQUE_INDEX:\n-        {\n-            long readOwningConstraint = source.getLong();\n-            SchemaDescriptor schema = readSchema( source );\n-            name = readRuleName( source );\n-\n-            IndexPrototype prototype = IndexPrototype.uniqueForSchema( schema, providerDescriptor );\n-            if ( name.isPresent() )\n-            {\n-                prototype = prototype.withName( name.get() );\n-            }\n-            else\n-            {\n-                prototype = prototype.withName( defaultIndexName( id ) );\n-            }\n-            IndexDescriptor index = prototype.materialise( id );\n-            if ( readOwningConstraint != NO_OWNING_CONSTRAINT_YET )\n-            {\n-                index = index.withOwningConstraintId( readOwningConstraint );\n-            }\n-            return index;\n-        }\n-        default:\n-            throw new MalformedSchemaRuleException( format( \"Got unknown index rule type '%d'.\", indexRuleType ) );\n+            default:\n+                throw new MalformedSchemaRuleException(format(\"Got unknown index rule type '%d'.\", indexRuleType));\n         }\n     }\n \n     // READ CONSTRAINT\n \n-    private static ConstraintDescriptor readConstraintRule( long id, ByteBuffer source ) throws MalformedSchemaRuleException\n+    private static ConstraintDescriptor readConstraintRule(long id, ByteBuffer source) throws MalformedSchemaRuleException\n     {\n         SchemaDescriptor schema;\n         byte constraintRuleType = source.get();\n         String name;\n-        switch ( constraintRuleType )\n+        switch (constraintRuleType)\n         {\n-        case EXISTS_CONSTRAINT:\n-            schema = readSchema( source );\n-            name = readRuleName( source ).orElse( null );\n-            return ConstraintDescriptorFactory.existsForSchema( schema ).withId( id ).withName( name );\n-\n-        case UNIQUE_CONSTRAINT:\n-            long ownedUniqueIndex = source.getLong();\n-            schema = readSchema( source );\n-            UniquenessConstraintDescriptor descriptor = ConstraintDescriptorFactory.uniqueForSchema( schema );\n-            name = readRuleName( source ).orElse( null );\n-            return descriptor.withId( id ).withOwnedIndexId( ownedUniqueIndex ).withName( name );\n-\n-        case UNIQUE_EXISTS_CONSTRAINT:\n-            long ownedNodeKeyIndex = source.getLong();\n-            schema = readSchema( source );\n-            NodeKeyConstraintDescriptor nodeKeyConstraintDescriptor = ConstraintDescriptorFactory.nodeKeyForSchema( schema );\n-            name = readRuleName( source ).orElse( null );\n-            return nodeKeyConstraintDescriptor.withId( id ).withOwnedIndexId( ownedNodeKeyIndex ).withName( name );\n-\n-        default:\n-            throw new MalformedSchemaRuleException( format( \"Got unknown constraint rule type '%d'.\", constraintRuleType ) );\n+            case EXISTS_CONSTRAINT:\n+                schema = readSchema(source);\n+                name = readRuleName(source).orElse(null);\n+                return ConstraintDescriptorFactory.existsForSchema(schema).withId(id).withName(name);\n+\n+            case UNIQUE_CONSTRAINT:\n+                long ownedUniqueIndex = source.getLong();\n+                schema = readSchema(source);\n+                UniquenessConstraintDescriptor descriptor = ConstraintDescriptorFactory.uniqueForSchema(schema);\n+                name = readRuleName(source).orElse(null);\n+                return descriptor.withId(id).withOwnedIndexId(ownedUniqueIndex).withName(name);\n+\n+            case UNIQUE_EXISTS_CONSTRAINT:\n+                long ownedNodeKeyIndex = source.getLong();\n+                schema = readSchema(source);\n+                NodeKeyConstraintDescriptor nodeKeyConstraintDescriptor = ConstraintDescriptorFactory.nodeKeyForSchema(schema);\n+                name = readRuleName(source).orElse(null);\n+                return nodeKeyConstraintDescriptor.withId(id).withOwnedIndexId(ownedNodeKeyIndex).withName(name);\n+\n+            default:\n+                throw new MalformedSchemaRuleException(format(\"Got unknown constraint rule type '%d'.\", constraintRuleType));\n         }\n     }\n \n-    private static Optional<String> readRuleName( ByteBuffer source )\n+    private static Optional<String> readRuleName(ByteBuffer source)\n     {\n-        if ( source.remaining() >= UTF8.MINIMUM_SERIALISED_LENGTH_BYTES )\n+        if (source.remaining() >= UTF8.MINIMUM_SERIALISED_LENGTH_BYTES)\n         {\n-            String ruleName = UTF8.getDecodedStringFrom( source );\n-            return ruleName.isEmpty() ? Optional.empty() : Optional.of( ruleName );\n+            String ruleName = UTF8.getDecodedStringFrom(source);\n+            return ruleName.isEmpty() ? Optional.empty() : Optional.of(ruleName);\n         }\n         return Optional.empty();\n     }\n \n     // READ HELP\n \n-    private static SchemaDescriptor readSchema( ByteBuffer source ) throws MalformedSchemaRuleException\n+    private static SchemaDescriptor readSchema(ByteBuffer source) throws MalformedSchemaRuleException\n     {\n         int[] propertyIds;\n         byte schemaDescriptorType = source.get();\n-        switch ( schemaDescriptorType )\n+        switch (schemaDescriptorType)\n         {\n-        case SIMPLE_LABEL:\n-            int labelId = source.getInt();\n-            propertyIds = readTokenIdList( source );\n-            return SchemaDescriptor.forLabel( labelId, propertyIds );\n-        case SIMPLE_REL_TYPE:\n-            int relTypeId = source.getInt();\n-            propertyIds = readTokenIdList( source );\n-            return SchemaDescriptor.forRelType( relTypeId, propertyIds );\n-        case GENERIC_MULTI_TOKEN_TYPE:\n-            return readMultiTokenSchema( source );\n-        default:\n-            throw new MalformedSchemaRuleException( format( \"Got unknown schema descriptor type '%d'.\",\n-                    schemaDescriptorType ) );\n+            case SIMPLE_LABEL:\n+                int labelId = source.getInt();\n+                propertyIds = readTokenIdList(source);\n+                return SchemaDescriptor.forLabel(labelId, propertyIds);\n+            case SIMPLE_REL_TYPE:\n+                int relTypeId = source.getInt();\n+                propertyIds = readTokenIdList(source);\n+                return SchemaDescriptor.forRelType(relTypeId, propertyIds);\n+            case GENERIC_MULTI_TOKEN_TYPE:\n+                return readMultiTokenSchema(source);\n+            default:\n+                throw new MalformedSchemaRuleException(format(\"Got unknown schema descriptor type '%d'.\",\n+                  schemaDescriptorType));\n         }\n     }\n \n-    private static SchemaDescriptor readMultiTokenSchema( ByteBuffer source ) throws MalformedSchemaRuleException\n+    private static SchemaDescriptor readMultiTokenSchema(ByteBuffer source) throws MalformedSchemaRuleException\n     {\n         byte schemaDescriptorType = source.get();\n         EntityType type;\n-        switch ( schemaDescriptorType )\n+        switch (schemaDescriptorType)\n         {\n-        case SIMPLE_LABEL:\n-            type = EntityType.NODE;\n-            break;\n-        case SIMPLE_REL_TYPE:\n-            type = EntityType.RELATIONSHIP;\n-            break;\n-        default:\n-            throw new MalformedSchemaRuleException( format( \"Got unknown schema descriptor type '%d'.\", schemaDescriptorType ) );\n+            case SIMPLE_LABEL:\n+                type = EntityType.NODE;\n+                break;\n+            case SIMPLE_REL_TYPE:\n+                type = EntityType.RELATIONSHIP;\n+                break;\n+            default:\n+                throw new MalformedSchemaRuleException(format(\"Got unknown schema descriptor type '%d'.\", schemaDescriptorType));\n         }\n-        int[] entityTokenIds = readTokenIdList( source );\n-        int[] propertyIds = readTokenIdList( source );\n-        return SchemaDescriptor.fulltext( type, entityTokenIds, propertyIds );\n+        int[] entityTokenIds = readTokenIdList(source);\n+        int[] propertyIds = readTokenIdList(source);\n+        return SchemaDescriptor.fulltext(type, entityTokenIds, propertyIds);\n     }\n \n-    private static int[] readTokenIdList( ByteBuffer source )\n+    private static int[] readTokenIdList(ByteBuffer source)\n     {\n         short numProperties = source.getShort();\n         int[] propertyIds = new int[numProperties];\n-        for ( int i = 0; i < numProperties; i++ )\n+        for (int i = 0; i < numProperties; i++)\n         {\n             propertyIds[i] = source.getInt();\n         }\n@@ -406,77 +406,76 @@ public class SchemaRuleSerialization35\n     {\n         private final ByteBuffer target;\n \n-        SchemaDescriptorSerializer( ByteBuffer target )\n+        SchemaDescriptorSerializer(ByteBuffer target)\n         {\n             this.target = target;\n         }\n \n         @Override\n-        public void processSpecific( LabelSchemaDescriptor schema )\n+        public void processSpecific(LabelSchemaDescriptor schema)\n         {\n-            target.put( SIMPLE_LABEL );\n-            target.putInt( schema.getLabelId() );\n-            putIds( schema.getPropertyIds() );\n+            target.put(SIMPLE_LABEL);\n+            target.putInt(schema.getLabelId());\n+            putIds(schema.getPropertyIds());\n         }\n \n         @Override\n-        public void processSpecific( RelationTypeSchemaDescriptor schema )\n+        public void processSpecific(RelationTypeSchemaDescriptor schema)\n         {\n-            target.put( SIMPLE_REL_TYPE );\n-            target.putInt( schema.getRelTypeId() );\n-            putIds( schema.getPropertyIds() );\n+            target.put(SIMPLE_REL_TYPE);\n+            target.putInt(schema.getRelTypeId());\n+            putIds(schema.getPropertyIds());\n         }\n \n         @Override\n-        public void processSpecific( SchemaDescriptor schema )\n+        public void processSpecific(SchemaDescriptor schema)\n         {\n-            target.put( GENERIC_MULTI_TOKEN_TYPE );\n-            if ( schema.entityType() == EntityType.NODE )\n+            target.put(GENERIC_MULTI_TOKEN_TYPE);\n+            if (schema.entityType() == EntityType.NODE)\n             {\n-                target.put( SIMPLE_LABEL );\n-            }\n-            else\n+                target.put(SIMPLE_LABEL);\n+            } else\n             {\n-                target.put( SIMPLE_REL_TYPE );\n+                target.put(SIMPLE_REL_TYPE);\n             }\n \n-            putIds( schema.getEntityTokenIds() );\n-            putIds( schema.getPropertyIds() );\n+            putIds(schema.getEntityTokenIds());\n+            putIds(schema.getPropertyIds());\n         }\n \n-        private void putIds( int[] ids )\n+        private void putIds(int[] ids)\n         {\n-            target.putShort( (short) ids.length );\n-            for ( int entityTokenId : ids )\n+            target.putShort((short) ids.length);\n+            for (int entityTokenId : ids)\n             {\n-                target.putInt( entityTokenId );\n+                target.putInt(entityTokenId);\n             }\n         }\n     }\n \n     // LENGTH OF\n \n-    private static int computeSchemaSize( SchemaDescriptor schema )\n+    private static int computeSchemaSize(SchemaDescriptor schema)\n     {\n-        if ( schema.isLabelSchemaDescriptor() )\n+        if (schema.isLabelSchemaDescriptor())\n         {\n-            return    1 // schema descriptor type\n-                    + 4 // label id\n-                    + 2 // property id count\n-                    + 4 * schema.getPropertyIds().length; // the actual property ids\n+            return 1 // schema descriptor type\n+              + 4 // label id\n+              + 2 // property id count\n+              + 4 * schema.getPropertyIds().length; // the actual property ids\n         }\n-        if ( schema.isRelationshipTypeSchemaDescriptor() )\n+        if (schema.isRelationshipTypeSchemaDescriptor())\n         {\n-            return    1 // schema descriptor type\n-                    + 4 // rel type id\n-                    + 2 // property id count\n-                    + 4 * schema.getPropertyIds().length; // the actual property ids\n+            return 1 // schema descriptor type\n+              + 4 // rel type id\n+              + 2 // property id count\n+              + 4 * schema.getPropertyIds().length; // the actual property ids\n         }\n-        return    1 // schema descriptor type\n-                + 1 // entity token type\n-                + 2 // entity token count\n-                + 4 * schema.getEntityTokenIds().length // the actual property ids\n-                + 2 // property id count\n-                + 4 * schema.getPropertyIds().length; // the actual property ids\n+        return 1 // schema descriptor type\n+          + 1 // entity token type\n+          + 2 // entity token count\n+          + 4 * schema.getEntityTokenIds().length // the actual property ids\n+          + 2 // property id count\n+          + 4 * schema.getPropertyIds().length; // the actual property ids\n     }\n }\n",
            "diff_size": 242
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1568/SchemaRuleSerialization35.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1568/SchemaRuleSerialization35.java\nindex 90e9ea58a53..7beeb24af1c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1568/SchemaRuleSerialization35.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1568/SchemaRuleSerialization35.java\n@@ -479,4 +479,4 @@ public class SchemaRuleSerialization35\n                 + 2 // property id count\n                 + 4 * schema.getPropertyIds().length; // the actual property ids\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}