{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2696",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "183",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "230",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "251",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "273",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "278",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "297",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "307",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "347",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2696/BatchingTransactionAppender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2696/BatchingTransactionAppender.java\nindex 61ee662ecf3..24bd1522dc8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2696/BatchingTransactionAppender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2696/BatchingTransactionAppender.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log;\n \n import java.io.Flushable;\n@@ -53,309 +54,302 @@ import static org.neo4j.kernel.impl.transaction.log.entry.LogEntryStart.checksum\n  */\n public class BatchingTransactionAppender extends LifecycleAdapter implements TransactionAppender\n {\n-    // For the graph store and schema indexes order-of-updates are managed by the high level entity locks\n-    // such that changes are applied to the affected records in the same order that they are written to the\n-    // log. For the explicit indexes there are no such locks, and hence no such ordering. This queue below\n-    // is introduced to manage just that and is only used for transactions that contain any explicit index changes.\n-    private final IdOrderingQueue explicitIndexTransactionOrdering;\n+  // For the graph store and schema indexes order-of-updates are managed by the high level entity locks\n+  // such that changes are applied to the affected records in the same order that they are written to the\n+  // log. For the explicit indexes there are no such locks, and hence no such ordering. This queue below\n+  // is introduced to manage just that and is only used for transactions that contain any explicit index changes.\n+  private final IdOrderingQueue explicitIndexTransactionOrdering;\n \n-    private final AtomicReference<ThreadLink> threadLinkHead = new AtomicReference<>( ThreadLink.END );\n-    private final TransactionMetadataCache transactionMetadataCache;\n-    private final LogFile logFile;\n-    private final LogRotation logRotation;\n-    private final TransactionIdStore transactionIdStore;\n-    private final LogPositionMarker positionMarker = new LogPositionMarker();\n-    private final DatabaseHealth databaseHealth;\n-    private final Lock forceLock = new ReentrantLock();\n+  private final AtomicReference<ThreadLink> threadLinkHead = new AtomicReference<>(ThreadLink.END);\n+  private final TransactionMetadataCache transactionMetadataCache;\n+  private final LogFile logFile;\n+  private final LogRotation logRotation;\n+  private final TransactionIdStore transactionIdStore;\n+  private final LogPositionMarker positionMarker = new LogPositionMarker();\n+  private final DatabaseHealth databaseHealth;\n+  private final Lock forceLock = new ReentrantLock();\n \n-    private FlushablePositionAwareChannel writer;\n-    private TransactionLogWriter transactionLogWriter;\n-    private IndexCommandDetector indexCommandDetector;\n+  private FlushablePositionAwareChannel writer;\n+  private TransactionLogWriter transactionLogWriter;\n+  private IndexCommandDetector indexCommandDetector;\n \n-    public BatchingTransactionAppender( LogFiles logFiles, LogRotation logRotation,\n-            TransactionMetadataCache transactionMetadataCache, TransactionIdStore transactionIdStore,\n-            IdOrderingQueue explicitIndexTransactionOrdering, DatabaseHealth databaseHealth )\n-    {\n-        this.logFile = logFiles.getLogFile();\n-        this.logRotation = logRotation;\n-        this.transactionIdStore = transactionIdStore;\n-        this.explicitIndexTransactionOrdering = explicitIndexTransactionOrdering;\n-        this.databaseHealth = databaseHealth;\n-        this.transactionMetadataCache = transactionMetadataCache;\n-    }\n+  public BatchingTransactionAppender(LogFiles logFiles, LogRotation logRotation,\n+                                     TransactionMetadataCache transactionMetadataCache, TransactionIdStore transactionIdStore,\n+                                     IdOrderingQueue explicitIndexTransactionOrdering, DatabaseHealth databaseHealth)\n+  {\n+    this.logFile = logFiles.getLogFile();\n+    this.logRotation = logRotation;\n+    this.transactionIdStore = transactionIdStore;\n+    this.explicitIndexTransactionOrdering = explicitIndexTransactionOrdering;\n+    this.databaseHealth = databaseHealth;\n+    this.transactionMetadataCache = transactionMetadataCache;\n+  }\n \n-    @Override\n-    public void start()\n-    {\n-        this.writer = logFile.getWriter();\n-        this.indexCommandDetector = new IndexCommandDetector();\n-        this.transactionLogWriter = new TransactionLogWriter( new LogEntryWriter( writer ) );\n-    }\n+  @Override\n+  public void start()\n+  {\n+    this.writer = logFile.getWriter();\n+    this.indexCommandDetector = new IndexCommandDetector();\n+    this.transactionLogWriter = new TransactionLogWriter(new LogEntryWriter(writer));\n+  }\n \n-    @Override\n-    public long append( TransactionToApply batch, LogAppendEvent logAppendEvent ) throws IOException\n+  @Override\n+  public long append(TransactionToApply batch, LogAppendEvent logAppendEvent) throws IOException\n+  {\n+    // Assigned base tx id just to make compiler happy\n+    long lastTransactionId = TransactionIdStore.BASE_TX_ID;\n+    // Synchronized with logFile to get absolute control over concurrent rotations happening\n+    synchronized (logFile)\n     {\n-        // Assigned base tx id just to make compiler happy\n-        long lastTransactionId = TransactionIdStore.BASE_TX_ID;\n-        // Synchronized with logFile to get absolute control over concurrent rotations happening\n-        synchronized ( logFile )\n+      // Assert that kernel is healthy before making any changes\n+      databaseHealth.assertHealthy(IOException.class);\n+      try (SerializeTransactionEvent serialiseEvent = logAppendEvent.beginSerializeTransaction())\n+      {\n+        // Append all transactions in this batch to the log under the same logFile monitor\n+        TransactionToApply tx = batch;\n+        while (tx != null)\n         {\n-            // Assert that kernel is healthy before making any changes\n-            databaseHealth.assertHealthy( IOException.class );\n-            try ( SerializeTransactionEvent serialiseEvent = logAppendEvent.beginSerializeTransaction() )\n-            {\n-                // Append all transactions in this batch to the log under the same logFile monitor\n-                TransactionToApply tx = batch;\n-                while ( tx != null )\n-                {\n-                    long transactionId = transactionIdStore.nextCommittingTransactionId();\n-\n-                    // If we're in a scenario where we're merely replicating transactions, i.e. transaction\n-                    // id have already been generated by another entity we simply check that our id\n-                    // that we generated match that id. If it doesn't we've run into a problem we can't \u00b4\n-                    // really recover from and would point to a bug somewhere.\n-                    matchAgainstExpectedTransactionIdIfAny( transactionId, tx );\n+          long transactionId = transactionIdStore.nextCommittingTransactionId();\n \n-                    TransactionCommitment commitment = appendToLog( tx.transactionRepresentation(), transactionId );\n-                    tx.commitment( commitment, transactionId );\n-                    tx.logPosition( commitment.logPosition() );\n-                    tx = tx.next();\n-                    lastTransactionId = transactionId;\n-                }\n-            }\n-        }\n+          // If we're in a scenario where we're merely replicating transactions, i.e. transaction\n+          // id have already been generated by another entity we simply check that our id\n+          // that we generated match that id. If it doesn't we've run into a problem we can't \u00b4\n+          // really recover from and would point to a bug somewhere.\n+          matchAgainstExpectedTransactionIdIfAny(transactionId, tx);\n \n-        // At this point we've appended all transactions in this batch, but we can't mark any of them\n-        // as committed since they haven't been forced to disk yet. So here we force, or potentially\n-        // piggy-back on another force, but anyway after this call below we can be sure that all our transactions\n-        // in this batch exist durably on disk.\n-        if ( forceAfterAppend( logAppendEvent ) )\n-        {\n-            // We got lucky and were the one forcing the log. It's enough if ones of all doing concurrent committerss\n-            // checks the need for log rotation.\n-            boolean logRotated = logRotation.rotateLogIfNeeded( logAppendEvent );\n-            logAppendEvent.setLogRotated( logRotated );\n+          TransactionCommitment commitment = appendToLog(tx.transactionRepresentation(), transactionId);\n+          tx.commitment(commitment, transactionId);\n+          tx.logPosition(commitment.logPosition());\n+          tx = tx.next();\n+          lastTransactionId = transactionId;\n         }\n-\n-        // Mark all transactions as committed\n-        publishAsCommitted( batch );\n-\n-        return lastTransactionId;\n+      }\n     }\n \n-    private void matchAgainstExpectedTransactionIdIfAny( long transactionId, TransactionToApply tx )\n+    // At this point we've appended all transactions in this batch, but we can't mark any of them\n+    // as committed since they haven't been forced to disk yet. So here we force, or potentially\n+    // piggy-back on another force, but anyway after this call below we can be sure that all our transactions\n+    // in this batch exist durably on disk.\n+    if (forceAfterAppend(logAppendEvent))\n     {\n-        long expectedTransactionId = tx.transactionId();\n-        if ( expectedTransactionId != TRANSACTION_ID_NOT_SPECIFIED )\n-        {\n-            if ( transactionId != expectedTransactionId )\n-            {\n-                IllegalStateException ex = new IllegalStateException(\n-                        \"Received \" + tx.transactionRepresentation() + \" with txId:\" + expectedTransactionId +\n-                                \" to be applied, but appending it ended up generating an unexpected txId:\" +\n-                                transactionId );\n-                databaseHealth.panic( ex );\n-                throw ex;\n-            }\n-        }\n+      // We got lucky and were the one forcing the log. It's enough if ones of all doing concurrent committerss\n+      // checks the need for log rotation.\n+      boolean logRotated = logRotation.rotateLogIfNeeded(logAppendEvent);\n+      logAppendEvent.setLogRotated(logRotated);\n     }\n \n-    private void publishAsCommitted( TransactionToApply batch )\n+    // Mark all transactions as committed\n+    publishAsCommitted(batch);\n+\n+    return lastTransactionId;\n+  }\n+\n+  private void matchAgainstExpectedTransactionIdIfAny(long transactionId, TransactionToApply tx)\n+  {\n+    long expectedTransactionId = tx.transactionId();\n+    if (expectedTransactionId != TRANSACTION_ID_NOT_SPECIFIED)\n     {\n-        while ( batch != null )\n-        {\n-            batch.commitment().publishAsCommitted();\n-            batch = batch.next();\n-        }\n+      if (transactionId != expectedTransactionId)\n+      {\n+        IllegalStateException ex = new IllegalStateException(\n+            \"Received \" + tx.transactionRepresentation() + \" with txId:\" + expectedTransactionId +\n+                \" to be applied, but appending it ended up generating an unexpected txId:\" +\n+                transactionId);\n+        databaseHealth.panic(ex);\n+        throw ex;\n+      }\n     }\n+  }\n \n-    @Override\n-    public void checkPoint( LogPosition logPosition, LogCheckPointEvent logCheckPointEvent ) throws IOException\n+  private void publishAsCommitted(TransactionToApply batch)\n+  {\n+    while (batch != null)\n     {\n-        try\n-        {\n-            // Synchronized with logFile to get absolute control over concurrent rotations happening\n-            synchronized ( logFile )\n-            {\n-                transactionLogWriter.checkPoint( logPosition );\n-            }\n-        }\n-        catch ( Throwable cause )\n-        {\n-            databaseHealth.panic( cause );\n-            throw cause;\n-        }\n-\n-        forceAfterAppend( logCheckPointEvent );\n+      batch.commitment().publishAsCommitted();\n+      batch = batch.next();\n     }\n+  }\n \n-    /**\n-     * @return A TransactionCommitment instance with metadata about the committed transaction, such as whether or not\n-     * this transaction contains any explicit index changes.\n-     */\n-    private TransactionCommitment appendToLog( TransactionRepresentation transaction, long transactionId )\n-            throws IOException\n+  @Override\n+  public void checkPoint(LogPosition logPosition, LogCheckPointEvent logCheckPointEvent) throws IOException\n+  {\n+    try\n     {\n-        // Reset command writer so that we, after we've written the transaction, can ask it whether or\n-        // not any explicit index command was written. If so then there's additional ordering to care about below.\n-        indexCommandDetector.reset();\n+      // Synchronized with logFile to get absolute control over concurrent rotations happening\n+      synchronized (logFile)\n+      {\n+        transactionLogWriter.checkPoint(logPosition);\n+      }\n+    } catch (Throwable cause)\n+    {\n+      databaseHealth.panic(cause);\n+      throw cause;\n+    }\n \n-        // The outcome of this try block is either of:\n-        // a) transaction successfully appended, at which point we return a Commitment to be used after force\n-        // b) transaction failed to be appended, at which point a kernel panic is issued\n-        // The reason that we issue a kernel panic on failure in here is that at this point we're still\n-        // holding the logFile monitor, and a failure to append needs to be communicated with potential\n-        // log rotation, which will wait for all transactions closed or fail on kernel panic.\n-        try\n-        {\n-            LogPosition logPositionBeforeCommit = writer.getCurrentPosition( positionMarker ).newPosition();\n-            transactionLogWriter.append( transaction, transactionId );\n-            LogPosition logPositionAfterCommit = writer.getCurrentPosition( positionMarker ).newPosition();\n+    forceAfterAppend(logCheckPointEvent);\n+  }\n \n-            long transactionChecksum =\n-                    checksum( transaction.additionalHeader(), transaction.getMasterId(), transaction.getAuthorId() );\n-            transactionMetadataCache\n-                    .cacheTransactionMetadata( transactionId, logPositionBeforeCommit, transaction.getMasterId(),\n-                            transaction.getAuthorId(), transactionChecksum, transaction.getTimeCommitted() );\n+  /**\n+   * @return A TransactionCommitment instance with metadata about the committed transaction, such as whether or not\n+   * this transaction contains any explicit index changes.\n+   */\n+  private TransactionCommitment appendToLog(TransactionRepresentation transaction, long transactionId)\n+      throws IOException\n+  {\n+    // Reset command writer so that we, after we've written the transaction, can ask it whether or\n+    // not any explicit index command was written. If so then there's additional ordering to care about below.\n+    indexCommandDetector.reset();\n \n-            transaction.accept( indexCommandDetector );\n-            boolean hasExplicitIndexChanges = indexCommandDetector.hasWrittenAnyExplicitIndexCommand();\n-            if ( hasExplicitIndexChanges )\n-            {\n-                // Offer this transaction id to the queue so that the explicit index applier can take part in the ordering\n-                explicitIndexTransactionOrdering.offer( transactionId );\n-            }\n-            return new TransactionCommitment( hasExplicitIndexChanges, transactionId, transactionChecksum,\n-                    transaction.getTimeCommitted(), logPositionAfterCommit, transactionIdStore );\n-        }\n-        catch ( final Throwable panic )\n-        {\n-            databaseHealth.panic( panic );\n-            throw panic;\n-        }\n-    }\n-\n-    /**\n-     * Called by the appender that just appended a transaction to the log.\n-     *\n-     * @param logForceEvents A trace event for the given log append operation.\n-     * @return {@code true} if we got lucky and were the ones forcing the log.\n-     */\n-    protected boolean forceAfterAppend( LogForceEvents logForceEvents ) throws IOException\n+    // The outcome of this try block is either of:\n+    // a) transaction successfully appended, at which point we return a Commitment to be used after force\n+    // b) transaction failed to be appended, at which point a kernel panic is issued\n+    // The reason that we issue a kernel panic on failure in here is that at this point we're still\n+    // holding the logFile monitor, and a failure to append needs to be communicated with potential\n+    // log rotation, which will wait for all transactions closed or fail on kernel panic.\n+    try\n     {\n-        // There's a benign race here, where we add our link before we update our next pointer.\n-        // This is okay, however, because unparkAll() spins when it sees a null next pointer.\n-        ThreadLink threadLink = new ThreadLink( Thread.currentThread() );\n-        threadLink.next = threadLinkHead.getAndSet( threadLink );\n-        boolean attemptedForce = false;\n-\n-        try ( LogForceWaitEvent logForceWaitEvent = logForceEvents.beginLogForceWait() )\n-        {\n-            do\n-            {\n-                if ( forceLock.tryLock() )\n-                {\n-                    attemptedForce = true;\n-                    try\n-                    {\n-                        forceLog( logForceEvents );\n-                        // In the event of any failure a database panic will be raised and thrown here\n-                    }\n-                    finally\n-                    {\n-                        forceLock.unlock();\n+      LogPosition logPositionBeforeCommit = writer.getCurrentPosition(positionMarker).newPosition();\n+      transactionLogWriter.append(transaction, transactionId);\n+      LogPosition logPositionAfterCommit = writer.getCurrentPosition(positionMarker).newPosition();\n \n-                        // We've released the lock, so unpark anyone who might have decided park while we were working.\n-                        // The most recently parked thread is the one most likely to still have warm caches, so that's\n-                        // the one we would prefer to unpark. Luckily, the stack nature of the ThreadLinks makes it easy\n-                        // to get to.\n-                        ThreadLink nextWaiter = threadLinkHead.get();\n-                        nextWaiter.unpark();\n-                    }\n-                }\n-                else\n-                {\n-                    waitForLogForce();\n-                }\n-            }\n-            while ( !threadLink.done );\n+      long transactionChecksum =\n+          checksum(transaction.additionalHeader(), transaction.getMasterId(), transaction.getAuthorId());\n+      transactionMetadataCache\n+          .cacheTransactionMetadata(transactionId, logPositionBeforeCommit, transaction.getMasterId(),\n+              transaction.getAuthorId(), transactionChecksum, transaction.getTimeCommitted());\n \n-            // If there were many threads committing simultaneously and I wasn't the lucky one\n-            // actually doing the forcing (where failure would throw panic exception) I need to\n-            // explicitly check if everything is OK before considering this transaction committed.\n-            if ( !attemptedForce )\n-            {\n-                databaseHealth.assertHealthy( IOException.class );\n-            }\n-        }\n-        return attemptedForce;\n+      transaction.accept(indexCommandDetector);\n+      boolean hasExplicitIndexChanges = indexCommandDetector.hasWrittenAnyExplicitIndexCommand();\n+      if (hasExplicitIndexChanges)\n+      {\n+        // Offer this transaction id to the queue so that the explicit index applier can take part in the ordering\n+        explicitIndexTransactionOrdering.offer(transactionId);\n+      }\n+      return new TransactionCommitment(hasExplicitIndexChanges, transactionId, transactionChecksum,\n+          transaction.getTimeCommitted(), logPositionAfterCommit, transactionIdStore);\n+    } catch (final Throwable panic)\n+    {\n+      databaseHealth.panic(panic);\n+      throw panic;\n     }\n+  }\n+\n+  /**\n+   * Called by the appender that just appended a transaction to the log.\n+   *\n+   * @param logForceEvents A trace event for the given log append operation.\n+   * @return {@code true} if we got lucky and were the ones forcing the log.\n+   */\n+  protected boolean forceAfterAppend(LogForceEvents logForceEvents) throws IOException\n+  {\n+    // There's a benign race here, where we add our link before we update our next pointer.\n+    // This is okay, however, because unparkAll() spins when it sees a null next pointer.\n+    ThreadLink threadLink = new ThreadLink(Thread.currentThread());\n+    threadLink.next = threadLinkHead.getAndSet(threadLink);\n+    boolean attemptedForce = false;\n \n-    private void forceLog( LogForceEvents logForceEvents ) throws IOException\n+    try (LogForceWaitEvent logForceWaitEvent = logForceEvents.beginLogForceWait())\n     {\n-        ThreadLink links = threadLinkHead.getAndSet( ThreadLink.END );\n-        try ( LogForceEvent logForceEvent = logForceEvents.beginLogForce() )\n+      do\n+      {\n+        if (forceLock.tryLock())\n         {\n-            force();\n-        }\n-        catch ( final Throwable panic )\n-        {\n-            databaseHealth.panic( panic );\n-            throw panic;\n-        }\n-        finally\n+          attemptedForce = true;\n+          try\n+          {\n+            forceLog(logForceEvents);\n+            // In the event of any failure a database panic will be raised and thrown here\n+          } finally\n+          {\n+            forceLock.unlock();\n+\n+            // We've released the lock, so unpark anyone who might have decided park while we were working.\n+            // The most recently parked thread is the one most likely to still have warm caches, so that's\n+            // the one we would prefer to unpark. Luckily, the stack nature of the ThreadLinks makes it easy\n+            // to get to.\n+            ThreadLink nextWaiter = threadLinkHead.get();\n+            nextWaiter.unpark();\n+          }\n+        } else\n         {\n-            unparkAll( links );\n+          waitForLogForce();\n         }\n+      }\n+      while (!threadLink.done);\n+\n+      // If there were many threads committing simultaneously and I wasn't the lucky one\n+      // actually doing the forcing (where failure would throw panic exception) I need to\n+      // explicitly check if everything is OK before considering this transaction committed.\n+      if (!attemptedForce)\n+      {\n+        databaseHealth.assertHealthy(IOException.class);\n+      }\n     }\n+    return attemptedForce;\n+  }\n \n-    private void unparkAll( ThreadLink links )\n+  private void forceLog(LogForceEvents logForceEvents) throws IOException\n+  {\n+    ThreadLink links = threadLinkHead.getAndSet(ThreadLink.END);\n+    try (LogForceEvent logForceEvent = logForceEvents.beginLogForce())\n     {\n-        do\n-        {\n-            links.done = true;\n-            links.unpark();\n-            ThreadLink tmp;\n-            do\n-            {\n-                // Spin because of the race:y update when consing.\n-                tmp = links.next;\n-            }\n-            while ( tmp == null );\n-            links = tmp;\n-        }\n-        while ( links != ThreadLink.END );\n+      force();\n+    } catch (final Throwable panic)\n+    {\n+      databaseHealth.panic(panic);\n+      throw panic;\n+    } finally\n+    {\n+      unparkAll(links);\n     }\n+  }\n \n-    private void waitForLogForce()\n+  private void unparkAll(ThreadLink links)\n+  {\n+    do\n     {\n-        long parkTime = TimeUnit.MILLISECONDS.toNanos( 100 );\n-        LockSupport.parkNanos( this, parkTime );\n+      links.done = true;\n+      links.unpark();\n+      ThreadLink tmp;\n+      do\n+      {\n+        // Spin because of the race:y update when consing.\n+        tmp = links.next;\n+      }\n+      while (tmp == null);\n+      links = tmp;\n     }\n+    while (links != ThreadLink.END);\n+  }\n+\n+  private void waitForLogForce()\n+  {\n+    long parkTime = TimeUnit.MILLISECONDS.toNanos(100);\n+    LockSupport.parkNanos(this, parkTime);\n+  }\n \n-    private void force() throws IOException\n+  private void force() throws IOException\n+  {\n+    // Empty buffer into writer. We want to synchronize with appenders somehow so that they\n+    // don't append while we're doing that. The way rotation is coordinated we can't synchronize\n+    // on logFile because it would cause deadlocks. Synchronizing on writer assumes that appenders\n+    // also synchronize on writer.\n+    Flushable flushable;\n+    synchronized (logFile)\n     {\n-        // Empty buffer into writer. We want to synchronize with appenders somehow so that they\n-        // don't append while we're doing that. The way rotation is coordinated we can't synchronize\n-        // on logFile because it would cause deadlocks. Synchronizing on writer assumes that appenders\n-        // also synchronize on writer.\n-        Flushable flushable;\n-        synchronized ( logFile )\n-        {\n-            flushable = writer.prepareForFlush();\n-        }\n-        // Force the writer outside of the lock.\n-        // This allows other threads access to the buffer while the writer is being forced.\n-        try\n-        {\n-            flushable.flush();\n-        }\n-        catch ( ClosedChannelException ignored )\n-        {\n-            // This is ok, we were already successful in emptying the buffer, so the channel being closed here means\n-            // that some other thread is rotating the log and has closed the underlying channel. But since we were\n-            // successful in emptying the buffer *UNDER THE LOCK* we know that the rotating thread included the changes\n-            // we emptied into the channel, and thus it is already flushed by that thread.\n-        }\n+      flushable = writer.prepareForFlush();\n+    }\n+    // Force the writer outside of the lock.\n+    // This allows other threads access to the buffer while the writer is being forced.\n+    try\n+    {\n+      flushable.flush();\n+    } catch (ClosedChannelException ignored)\n+    {\n+      // This is ok, we were already successful in emptying the buffer, so the channel being closed here means\n+      // that some other thread is rotating the log and has closed the underlying channel. But since we were\n+      // successful in emptying the buffer *UNDER THE LOCK* we know that the rotating thread included the changes\n+      // we emptied into the channel, and thus it is already flushed by that thread.\n     }\n+  }\n }\n",
            "diff_size": 373
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 250).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 199).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2696/BatchingTransactionAppender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2696/BatchingTransactionAppender.java\nindex 61ee662ecf3..a8251cee921 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2696/BatchingTransactionAppender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2696/BatchingTransactionAppender.java\n@@ -115,8 +115,7 @@ public class BatchingTransactionAppender extends LifecycleAdapter implements Tra\n                     // that we generated match that id. If it doesn't we've run into a problem we can't \u00b4\n                     // really recover from and would point to a bug somewhere.\n                     matchAgainstExpectedTransactionIdIfAny( transactionId, tx );\n-\n-                    TransactionCommitment commitment = appendToLog( tx.transactionRepresentation(), transactionId );\n+TransactionCommitment commitment = appendToLog( tx.transactionRepresentation(), transactionId );\n                     tx.commitment( commitment, transactionId );\n                     tx.logPosition( commitment.logPosition() );\n                     tx = tx.next();\n@@ -139,8 +138,7 @@ public class BatchingTransactionAppender extends LifecycleAdapter implements Tra\n \n         // Mark all transactions as committed\n         publishAsCommitted( batch );\n-\n-        return lastTransactionId;\n+return lastTransactionId;\n     }\n \n     private void matchAgainstExpectedTransactionIdIfAny( long transactionId, TransactionToApply tx )\n@@ -150,11 +148,8 @@ public class BatchingTransactionAppender extends LifecycleAdapter implements Tra\n         {\n             if ( transactionId != expectedTransactionId )\n             {\n-                IllegalStateException ex = new IllegalStateException(\n-                        \"Received \" + tx.transactionRepresentation() + \" with txId:\" + expectedTransactionId +\n-                                \" to be applied, but appending it ended up generating an unexpected txId:\" +\n-                                transactionId );\n-                databaseHealth.panic( ex );\n+                IllegalStateException ex = new IllegalStateException( \"Received \" + tx.transactionRepresentation() + \" with txId:\" + expectedTransactionId + \" to be applied, but appending it ended up generating an unexpected txId:\" + transactionId );\n+databaseHealth.panic( ex );\n                 throw ex;\n             }\n         }\n@@ -193,9 +188,8 @@ public class BatchingTransactionAppender extends LifecycleAdapter implements Tra\n      * @return A TransactionCommitment instance with metadata about the committed transaction, such as whether or not\n      * this transaction contains any explicit index changes.\n      */\n-    private TransactionCommitment appendToLog( TransactionRepresentation transaction, long transactionId )\n-            throws IOException\n-    {\n+    private TransactionCommitment appendToLog( TransactionRepresentation transaction, long transactionId ) throws IOException\n+{\n         // Reset command writer so that we, after we've written the transaction, can ask it whether or\n         // not any explicit index command was written. If so then there's additional ordering to care about below.\n         indexCommandDetector.reset();\n@@ -212,13 +206,9 @@ public class BatchingTransactionAppender extends LifecycleAdapter implements Tra\n             transactionLogWriter.append( transaction, transactionId );\n             LogPosition logPositionAfterCommit = writer.getCurrentPosition( positionMarker ).newPosition();\n \n-            long transactionChecksum =\n-                    checksum( transaction.additionalHeader(), transaction.getMasterId(), transaction.getAuthorId() );\n-            transactionMetadataCache\n-                    .cacheTransactionMetadata( transactionId, logPositionBeforeCommit, transaction.getMasterId(),\n-                            transaction.getAuthorId(), transactionChecksum, transaction.getTimeCommitted() );\n-\n-            transaction.accept( indexCommandDetector );\n+            long transactionChecksum = checksum( transaction.additionalHeader(), transaction.getMasterId(), transaction.getAuthorId() );\n+transactionMetadataCache.cacheTransactionMetadata( transactionId, logPositionBeforeCommit, transaction.getMasterId(), transaction.getAuthorId(), transactionChecksum, transaction.getTimeCommitted() );\n+transaction.accept( indexCommandDetector );\n             boolean hasExplicitIndexChanges = indexCommandDetector.hasWrittenAnyExplicitIndexCommand();\n             if ( hasExplicitIndexChanges )\n             {\n@@ -227,7 +217,7 @@ public class BatchingTransactionAppender extends LifecycleAdapter implements Tra\n             }\n             return new TransactionCommitment( hasExplicitIndexChanges, transactionId, transactionChecksum,\n                     transaction.getTimeCommitted(), logPositionAfterCommit, transactionIdStore );\n-        }\n+    }\n         catch ( final Throwable panic )\n         {\n             databaseHealth.panic( panic );\n@@ -358,4 +348,4 @@ public class BatchingTransactionAppender extends LifecycleAdapter implements Tra\n             // we emptied into the channel, and thus it is already flushed by that thread.\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}