{
    "project_name": "zanata-zanata-platform",
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "186",
                "column": "61",
                "severity": "error",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        final List<HDocument> allIterationDocs = documentDAO\n                .getAllByProjectIteration(projectSlug, iterationSlug);\n        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n        // the zanata.xml\n        // file\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/15/TranslationArchiveServiceImpl.java\nindex fe8fec170b1..ccc448e03ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/15/TranslationArchiveServiceImpl.java\n@@ -183,8 +183,9 @@ public class TranslationArchiveServiceImpl\n         // Max documents to process\n         final List<HDocument> allIterationDocs = documentDAO\n                 .getAllByProjectIteration(projectSlug, iterationSlug);\n-        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n-        // the zanata.xml\n+        handle.setMaxProgress(allIterationDocs.size() + 1);\n+        // all files plus\n+         // the zanata.xml\n         // file\n     }\n \n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "187",
                    "column": "57",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/15/TranslationArchiveServiceImpl.java\nindex fe8fec170b1..581d091a5e6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/15/TranslationArchiveServiceImpl.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.service.impl;\n \n import com.google.common.base.Optional;\n@@ -60,141 +61,141 @@ import static org.zanata.common.ProjectType.*;\n \n /**\n  * @author Carlos Munoz\n- *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n+ * <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n @Named(\"translationArchiveServiceImpl\")\n @RequestScoped\n @Transactional\n public class TranslationArchiveServiceImpl\n-        implements TranslationArchiveService {\n-    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory\n-            .getLogger(TranslationArchiveServiceImpl.class);\n-    private static final long serialVersionUID = 1929063191914482238L;\n+  implements TranslationArchiveService {\n+  private static final org.slf4j.Logger log = org.slf4j.LoggerFactory\n+    .getLogger(TranslationArchiveServiceImpl.class);\n+  private static final long serialVersionUID = 1929063191914482238L;\n \n-    @Inject\n-    private DocumentDAO documentDAO;\n-    @Inject\n-    private LocaleDAO localeDAO;\n-    @Inject\n-    private ProjectIterationDAO projectIterationDAO;\n-    @Inject\n-    private ResourceUtils resourceUtils;\n-    @Inject\n-    private TextFlowTargetDAO textFlowTargetDAO;\n-    @Inject\n-    private FileSystemService fileSystemServiceImpl;\n-    @Inject\n-    private ConfigurationService configurationServiceImpl;\n+  @Inject\n+  private DocumentDAO documentDAO;\n+  @Inject\n+  private LocaleDAO localeDAO;\n+  @Inject\n+  private ProjectIterationDAO projectIterationDAO;\n+  @Inject\n+  private ResourceUtils resourceUtils;\n+  @Inject\n+  private TextFlowTargetDAO textFlowTargetDAO;\n+  @Inject\n+  private FileSystemService fileSystemServiceImpl;\n+  @Inject\n+  private ConfigurationService configurationServiceImpl;\n \n-    @Override\n-    public String buildTranslationFileArchive(String projectSlug,\n-            String iterationSlug, String localeId, String userName,\n-            AsyncTaskHandle<String> handle) throws Exception {\n-        Optional<AsyncTaskHandle<String>> handleOpt =\n-                Optional.fromNullable(handle);\n-        if (handleOpt.isPresent()) {\n-            prepareHandle(handleOpt.get(), projectSlug, iterationSlug);\n-        }\n-        boolean isPoProject = isPoProject(projectSlug, iterationSlug);\n-        final String projectDirectory = projectSlug + \"-\" + iterationSlug + \"/\";\n-        final HLocale hLocale =\n-                localeDAO.findByLocaleId(new LocaleId(localeId));\n-        if (hLocale == null) {\n-            throw new EntityNotFoundException(\"Locale not support \" + localeId);\n-        }\n-        final String mappedLocale = hLocale.getLocaleId().getId();\n-        final String localeDirectory = projectDirectory + mappedLocale + \"/\";\n-        final File downloadFile =\n-                fileSystemServiceImpl.createDownloadStagingFile(\"zip\");\n-        final FileOutputStream output = new FileOutputStream(downloadFile);\n-        final ZipOutputStream zipOutput = new ZipOutputStream(output);\n-        zipOutput.setMethod(ZipOutputStream.DEFLATED);\n-        // TODO should we have an option for approvedOnly?\n-        final PoWriter2 poWriter =\n-                new PoWriter2.Builder().mapIdToMsgctxt(!isPoProject)\n-                        .create();\n-        final Set<String> extensions = new HashSet<String>();\n-        extensions.add(\"gettext\");\n-        extensions.add(\"comment\");\n-        // Generate the download descriptor file\n-        String downloadId = fileSystemServiceImpl.createDownloadDescriptorFile(\n-                downloadFile,\n-                projectSlug + \"_\" + iterationSlug + \"_\" + localeId + \".zip\",\n-                userName);\n-        // Add the config file at the root of the project directory\n-        String configFilename = projectDirectory\n-                + configurationServiceImpl.getConfigurationFileName();\n-        zipOutput.putNextEntry(new ZipEntry(configFilename));\n-        zipOutput\n-                .write(configurationServiceImpl\n-                        .getConfigForOfflineTranslation(projectSlug,\n-                                iterationSlug, hLocale)\n-                        .getBytes(StandardCharsets.UTF_8));\n-        zipOutput.closeEntry();\n-        handle.increaseProgress(1);\n-        final List<HDocument> allIterationDocs = documentDAO\n-                .getAllByProjectIteration(projectSlug, iterationSlug);\n-        for (HDocument document : allIterationDocs) {\n-            // Stop the process if signaled to do so\n-            if (handleOpt.isPresent() && handleOpt.get().isCancelled()) {\n-                zipOutput.close();\n-                boolean deleted = downloadFile.delete();\n-                if (deleted) {\n-                    log.debug(\"File {} deleted\", downloadFile);\n-                } else {\n-                    log.debug(\"File {} cannot be deleted\", downloadFile);\n-                }\n-                fileSystemServiceImpl.deleteDownloadDescriptorFile(downloadId);\n-                return null;\n-            }\n-            TranslationsResource translationResource =\n-                    new TranslationsResource();\n-            List<HTextFlowTarget> hTargets =\n-                    textFlowTargetDAO.findTranslations(document, hLocale);\n-            resourceUtils.transferToTranslationsResource(translationResource,\n-                    document, hLocale, extensions, hTargets,\n-                    true);\n-            Resource res = resourceUtils.buildResource(document);\n-            String filename = localeDirectory + document.getDocId() + \".po\";\n-            zipOutput.putNextEntry(new ZipEntry(filename));\n-            poWriter.writePo(zipOutput, \"UTF-8\", res, translationResource);\n-            zipOutput.closeEntry();\n-            if (handleOpt.isPresent()) {\n-                handleOpt.get().increaseProgress(1);\n-            }\n-        }\n-        zipOutput.flush();\n+  @Override\n+  public String buildTranslationFileArchive(String projectSlug,\n+                                            String iterationSlug, String localeId, String userName,\n+                                            AsyncTaskHandle<String> handle) throws Exception {\n+    Optional<AsyncTaskHandle<String>> handleOpt =\n+      Optional.fromNullable(handle);\n+    if (handleOpt.isPresent()) {\n+      prepareHandle(handleOpt.get(), projectSlug, iterationSlug);\n+    }\n+    boolean isPoProject = isPoProject(projectSlug, iterationSlug);\n+    final String projectDirectory = projectSlug + \"-\" + iterationSlug + \"/\";\n+    final HLocale hLocale =\n+      localeDAO.findByLocaleId(new LocaleId(localeId));\n+    if (hLocale == null) {\n+      throw new EntityNotFoundException(\"Locale not support \" + localeId);\n+    }\n+    final String mappedLocale = hLocale.getLocaleId().getId();\n+    final String localeDirectory = projectDirectory + mappedLocale + \"/\";\n+    final File downloadFile =\n+      fileSystemServiceImpl.createDownloadStagingFile(\"zip\");\n+    final FileOutputStream output = new FileOutputStream(downloadFile);\n+    final ZipOutputStream zipOutput = new ZipOutputStream(output);\n+    zipOutput.setMethod(ZipOutputStream.DEFLATED);\n+    // TODO should we have an option for approvedOnly?\n+    final PoWriter2 poWriter =\n+      new PoWriter2.Builder().mapIdToMsgctxt(!isPoProject)\n+        .create();\n+    final Set<String> extensions = new HashSet<String>();\n+    extensions.add(\"gettext\");\n+    extensions.add(\"comment\");\n+    // Generate the download descriptor file\n+    String downloadId = fileSystemServiceImpl.createDownloadDescriptorFile(\n+      downloadFile,\n+      projectSlug + \"_\" + iterationSlug + \"_\" + localeId + \".zip\",\n+      userName);\n+    // Add the config file at the root of the project directory\n+    String configFilename = projectDirectory\n+      + configurationServiceImpl.getConfigurationFileName();\n+    zipOutput.putNextEntry(new ZipEntry(configFilename));\n+    zipOutput\n+      .write(configurationServiceImpl\n+        .getConfigForOfflineTranslation(projectSlug,\n+          iterationSlug, hLocale)\n+        .getBytes(StandardCharsets.UTF_8));\n+    zipOutput.closeEntry();\n+    handle.increaseProgress(1);\n+    final List<HDocument> allIterationDocs = documentDAO\n+      .getAllByProjectIteration(projectSlug, iterationSlug);\n+    for (HDocument document : allIterationDocs) {\n+      // Stop the process if signaled to do so\n+      if (handleOpt.isPresent() && handleOpt.get().isCancelled()) {\n         zipOutput.close();\n-        return downloadId;\n+        boolean deleted = downloadFile.delete();\n+        if (deleted) {\n+          log.debug(\"File {} deleted\", downloadFile);\n+        } else {\n+          log.debug(\"File {} cannot be deleted\", downloadFile);\n+        }\n+        fileSystemServiceImpl.deleteDownloadDescriptorFile(downloadId);\n+        return null;\n+      }\n+      TranslationsResource translationResource =\n+        new TranslationsResource();\n+      List<HTextFlowTarget> hTargets =\n+        textFlowTargetDAO.findTranslations(document, hLocale);\n+      resourceUtils.transferToTranslationsResource(translationResource,\n+        document, hLocale, extensions, hTargets,\n+        true);\n+      Resource res = resourceUtils.buildResource(document);\n+      String filename = localeDirectory + document.getDocId() + \".po\";\n+      zipOutput.putNextEntry(new ZipEntry(filename));\n+      poWriter.writePo(zipOutput, \"UTF-8\", res, translationResource);\n+      zipOutput.closeEntry();\n+      if (handleOpt.isPresent()) {\n+        handleOpt.get().increaseProgress(1);\n+      }\n     }\n+    zipOutput.flush();\n+    zipOutput.close();\n+    return downloadId;\n+  }\n \n-    @Override\n-    @Async\n-    public Future<String> startBuildingTranslationFileArchive(\n-            String projectSlug, String iterationSlug, String localeId,\n-            String userName, AsyncTaskHandle<String> handle) throws Exception {\n-        String archiveId = buildTranslationFileArchive(projectSlug,\n-                iterationSlug, localeId, userName, handle);\n-        return AsyncTaskResult.completed(archiveId);\n-    }\n+  @Override\n+  @Async\n+  public Future<String> startBuildingTranslationFileArchive(\n+    String projectSlug, String iterationSlug, String localeId,\n+    String userName, AsyncTaskHandle<String> handle) throws Exception {\n+    String archiveId = buildTranslationFileArchive(projectSlug,\n+      iterationSlug, localeId, userName, handle);\n+    return AsyncTaskResult.completed(archiveId);\n+  }\n \n-    private void prepareHandle(AsyncTaskHandle<String> handle,\n-            String projectSlug, String iterationSlug) {\n-        // Max documents to process\n-        final List<HDocument> allIterationDocs = documentDAO\n-                .getAllByProjectIteration(projectSlug, iterationSlug);\n-        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n-        // the zanata.xml\n-        // file\n-    }\n+  private void prepareHandle(AsyncTaskHandle<String> handle,\n+                             String projectSlug, String iterationSlug) {\n+    // Max documents to process\n+    final List<HDocument> allIterationDocs = documentDAO\n+      .getAllByProjectIteration(projectSlug, iterationSlug);\n+    handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n+    // the zanata.xml\n+    // file\n+  }\n \n-    private boolean isPoProject(String projectSlug, String versionSlug) {\n-        HProjectIteration projectIteration =\n-                projectIterationDAO.getBySlug(projectSlug, versionSlug);\n-        ProjectType type = projectIteration.getProjectType();\n-        if (type == null) {\n-            type = projectIteration.getProject().getDefaultProjectType();\n-        }\n-        return type == Gettext || type == Podir;\n+  private boolean isPoProject(String projectSlug, String versionSlug) {\n+    HProjectIteration projectIteration =\n+      projectIterationDAO.getBySlug(projectSlug, versionSlug);\n+    ProjectType type = projectIteration.getProjectType();\n+    if (type == null) {\n+      type = projectIteration.getProject().getDefaultProjectType();\n     }\n+    return type == Gettext || type == Podir;\n+  }\n }\n",
            "diff_size": 154
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/15/TranslationArchiveServiceImpl.java\nindex fe8fec170b1..919f70528aa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/15/TranslationArchiveServiceImpl.java\n@@ -183,7 +183,8 @@ public class TranslationArchiveServiceImpl\n         // Max documents to process\n         final List<HDocument> allIterationDocs = documentDAO\n                 .getAllByProjectIteration(projectSlug, iterationSlug);\n-        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n+        handle.setMaxProgress(allIterationDocs.size() + 1);\n+// all files plus\n         // the zanata.xml\n         // file\n     }\n@@ -197,4 +198,4 @@ public class TranslationArchiveServiceImpl\n         }\n         return type == Gettext || type == Podir;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "165",
                    "column": "61",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/15/TranslationArchiveServiceImpl.java\nindex fe8fec170b1..f64be6aa471 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/15/TranslationArchiveServiceImpl.java\n@@ -25,7 +25,6 @@ import javax.enterprise.context.RequestScoped;\n import javax.inject.Inject;\n import javax.inject.Named;\n import javax.persistence.EntityNotFoundException;\n-\n import org.apache.deltaspike.jpa.api.transaction.Transactional;\n import org.zanata.adapter.po.PoWriter2;\n import org.zanata.async.Async;\n@@ -56,21 +55,20 @@ import java.util.Set;\n import java.util.concurrent.Future;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n+\n import static org.zanata.common.ProjectType.*;\n \n /**\n  * @author Carlos Munoz\n  *         <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n+\n @Named(\"translationArchiveServiceImpl\")\n @RequestScoped\n @Transactional\n-public class TranslationArchiveServiceImpl\n-        implements TranslationArchiveService {\n-    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory\n-            .getLogger(TranslationArchiveServiceImpl.class);\n+public class TranslationArchiveServiceImpl implements TranslationArchiveService {\n+    private static final org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(TranslationArchiveServiceImpl.class);\n     private static final long serialVersionUID = 1929063191914482238L;\n-\n     @Inject\n     private DocumentDAO documentDAO;\n     @Inject\n@@ -85,55 +83,42 @@ public class TranslationArchiveServiceImpl\n     private FileSystemService fileSystemServiceImpl;\n     @Inject\n     private ConfigurationService configurationServiceImpl;\n-\n     @Override\n     public String buildTranslationFileArchive(String projectSlug,\n-            String iterationSlug, String localeId, String userName,\n-            AsyncTaskHandle<String> handle) throws Exception {\n-        Optional<AsyncTaskHandle<String>> handleOpt =\n-                Optional.fromNullable(handle);\n+        String iterationSlug,\n+            String localeId,\n+                String userName, AsyncTaskHandle<String> handle) throws Exception {\n+        Optional<AsyncTaskHandle<String>> handleOpt = Optional.fromNullable(handle);\n         if (handleOpt.isPresent()) {\n             prepareHandle(handleOpt.get(), projectSlug, iterationSlug);\n         }\n+\n         boolean isPoProject = isPoProject(projectSlug, iterationSlug);\n         final String projectDirectory = projectSlug + \"-\" + iterationSlug + \"/\";\n-        final HLocale hLocale =\n-                localeDAO.findByLocaleId(new LocaleId(localeId));\n+        final HLocale hLocale = localeDAO.findByLocaleId(new LocaleId(localeId));\n         if (hLocale == null) {\n             throw new EntityNotFoundException(\"Locale not support \" + localeId);\n         }\n         final String mappedLocale = hLocale.getLocaleId().getId();\n         final String localeDirectory = projectDirectory + mappedLocale + \"/\";\n-        final File downloadFile =\n-                fileSystemServiceImpl.createDownloadStagingFile(\"zip\");\n+        final File downloadFile = fileSystemServiceImpl.createDownloadStagingFile(\"zip\");\n         final FileOutputStream output = new FileOutputStream(downloadFile);\n         final ZipOutputStream zipOutput = new ZipOutputStream(output);\n         zipOutput.setMethod(ZipOutputStream.DEFLATED);\n         // TODO should we have an option for approvedOnly?\n-        final PoWriter2 poWriter =\n-                new PoWriter2.Builder().mapIdToMsgctxt(!isPoProject)\n-                        .create();\n+        final PoWriter2 poWriter = new PoWriter2.Builder().mapIdToMsgctxt(!isPoProject).create();\n         final Set<String> extensions = new HashSet<String>();\n         extensions.add(\"gettext\");\n         extensions.add(\"comment\");\n         // Generate the download descriptor file\n-        String downloadId = fileSystemServiceImpl.createDownloadDescriptorFile(\n-                downloadFile,\n-                projectSlug + \"_\" + iterationSlug + \"_\" + localeId + \".zip\",\n-                userName);\n+        String downloadId = fileSystemServiceImpl.createDownloadDescriptorFile(downloadFile, projectSlug + \"_\" + iterationSlug + \"_\" + localeId + \".zip\", userName);\n         // Add the config file at the root of the project directory\n-        String configFilename = projectDirectory\n-                + configurationServiceImpl.getConfigurationFileName();\n+        String configFilename = projectDirectory + configurationServiceImpl.getConfigurationFileName();\n         zipOutput.putNextEntry(new ZipEntry(configFilename));\n-        zipOutput\n-                .write(configurationServiceImpl\n-                        .getConfigForOfflineTranslation(projectSlug,\n-                                iterationSlug, hLocale)\n-                        .getBytes(StandardCharsets.UTF_8));\n+        zipOutput.write(configurationServiceImpl.getConfigForOfflineTranslation(projectSlug, iterationSlug, hLocale).getBytes(StandardCharsets.UTF_8));\n         zipOutput.closeEntry();\n         handle.increaseProgress(1);\n-        final List<HDocument> allIterationDocs = documentDAO\n-                .getAllByProjectIteration(projectSlug, iterationSlug);\n+        final List<HDocument> allIterationDocs = documentDAO.getAllByProjectIteration(projectSlug, iterationSlug);\n         for (HDocument document : allIterationDocs) {\n             // Stop the process if signaled to do so\n             if (handleOpt.isPresent() && handleOpt.get().isCancelled()) {\n@@ -147,13 +132,9 @@ public class TranslationArchiveServiceImpl\n                 fileSystemServiceImpl.deleteDownloadDescriptorFile(downloadId);\n                 return null;\n             }\n-            TranslationsResource translationResource =\n-                    new TranslationsResource();\n-            List<HTextFlowTarget> hTargets =\n-                    textFlowTargetDAO.findTranslations(document, hLocale);\n-            resourceUtils.transferToTranslationsResource(translationResource,\n-                    document, hLocale, extensions, hTargets,\n-                    true);\n+            TranslationsResource translationResource = new TranslationsResource();\n+            List<HTextFlowTarget> hTargets = textFlowTargetDAO.findTranslations(document, hLocale);\n+            resourceUtils.transferToTranslationsResource(translationResource, document, hLocale, extensions, hTargets, true);\n             Resource res = resourceUtils.buildResource(document);\n             String filename = localeDirectory + document.getDocId() + \".po\";\n             zipOutput.putNextEntry(new ZipEntry(filename));\n@@ -170,31 +151,29 @@ public class TranslationArchiveServiceImpl\n \n     @Override\n     @Async\n-    public Future<String> startBuildingTranslationFileArchive(\n-            String projectSlug, String iterationSlug, String localeId,\n-            String userName, AsyncTaskHandle<String> handle) throws Exception {\n-        String archiveId = buildTranslationFileArchive(projectSlug,\n-                iterationSlug, localeId, userName, handle);\n+    public Future<String> startBuildingTranslationFileArchive(String projectSlug,\n+        String iterationSlug,\n+            String localeId,\n+                String userName, AsyncTaskHandle<String> handle) throws Exception {\n+        String archiveId = buildTranslationFileArchive(projectSlug, iterationSlug, localeId, userName, handle);\n         return AsyncTaskResult.completed(archiveId);\n     }\n \n-    private void prepareHandle(AsyncTaskHandle<String> handle,\n-            String projectSlug, String iterationSlug) {\n+    private void prepareHandle(AsyncTaskHandle<String> handle, String projectSlug, String iterationSlug) {\n         // Max documents to process\n-        final List<HDocument> allIterationDocs = documentDAO\n-                .getAllByProjectIteration(projectSlug, iterationSlug);\n+        final List<HDocument> allIterationDocs = documentDAO.getAllByProjectIteration(projectSlug, iterationSlug);\n         handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n         // the zanata.xml\n         // file\n     }\n \n     private boolean isPoProject(String projectSlug, String versionSlug) {\n-        HProjectIteration projectIteration =\n-                projectIterationDAO.getBySlug(projectSlug, versionSlug);\n+        HProjectIteration projectIteration = projectIterationDAO.getBySlug(projectSlug, versionSlug);\n         ProjectType type = projectIteration.getProjectType();\n         if (type == null) {\n             type = projectIteration.getProject().getDefaultProjectType();\n         }\n-        return type == Gettext || type == Podir;\n+        return type == Gettext\n+                || type == Podir;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "186",
                    "column": "59",
                    "severity": "error",
                    "message": "';' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "186",
                    "column": "60",
                    "severity": "error",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/15/TranslationArchiveServiceImpl.java\nindex fe8fec170b1..725ac2b3744 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/15/TranslationArchiveServiceImpl.java\n@@ -183,7 +183,7 @@ public class TranslationArchiveServiceImpl\n         // Max documents to process\n         final List<HDocument> allIterationDocs = documentDAO\n                 .getAllByProjectIteration(projectSlug, iterationSlug);\n-        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n+        handle.setMaxProgress(allIterationDocs.size() + 1);// all files plus// the zanata.xml\n         // the zanata.xml\n         // file\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/15/TranslationArchiveServiceImpl.java\nindex fe8fec170b1..ccc448e03ff 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/15/TranslationArchiveServiceImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/15/TranslationArchiveServiceImpl.java\n@@ -183,8 +183,9 @@ public class TranslationArchiveServiceImpl\n         // Max documents to process\n         final List<HDocument> allIterationDocs = documentDAO\n                 .getAllByProjectIteration(projectSlug, iterationSlug);\n-        handle.setMaxProgress(allIterationDocs.size() + 1); // all files plus\n-        // the zanata.xml\n+        handle.setMaxProgress(allIterationDocs.size() + 1);\n+        // all files plus\n+         // the zanata.xml\n         // file\n     }\n \n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff",
        "styler_random"
    ]
}