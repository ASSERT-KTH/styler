{
    "project_name": "Angel-ML-angel",
    "error_id": "68",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "262",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "264",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/68/LongIntVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/68/LongIntVector.java\nindex 482a1f1aa0f..0f3e2cd89e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/68/LongIntVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/68/LongIntVector.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.vector;\n \n import com.tencent.angel.ml.math2.storage.LongIntSparseVectorStorage;\n@@ -70,7 +69,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public int max() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+  return 0;\n     int maxval = Integer.MIN_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -92,7 +92,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public int min() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+  return 0;\n     int minval = Integer.MAX_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -114,7 +115,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public long argmax() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+  return -1;\n     int maxval = Integer.MIN_VALUE;\n     long maxidx = -1;\n     if (idstorage.isSparse()) {\n@@ -145,7 +147,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public long argmin() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+  return -1;\n     int minval = Integer.MAX_VALUE;\n     long minidx = -1;\n     if (idstorage.isSparse()) {\n@@ -176,7 +179,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public double std() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+  return 0;\n     double sumval = 0.0;\n     double sumval2 = 0.0;\n     if (dstorage.isSparse()) {\n@@ -199,7 +203,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public double average() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+  return 0;\n     double sumval = 0.0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -222,7 +227,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public long numZeros() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return (long) dim;\n+    if (dstorage.size() == 0)\n+  return (long) dim;\n     long numZero = 0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -242,24 +248,20 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n   }\n \n   public LongIntVector clone() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).clone());\n+    return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).clone());\n   }\n \n   @Override\n   public LongIntVector copy() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).copy());\n+    return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).copy());\n   }\n \n   @Override\n   public LongIntVector emptyLike() {\n     if (storage.isSparse()) {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySparse());\n-    } else {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySorted());\n+      return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).emptySparse());\n+  } else {\n+      return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).emptySorted());\n     }\n   }\n \n@@ -310,8 +312,7 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   @Override\n   public Vector ifilter(double threshold) {\n-\n-    if (storage.isDense()) {\n+  if (storage.isDense()) {\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n       for (int i = 0; i < values.length; i++) {\n         if (Math.abs(values[i]) <= threshold) {\n@@ -377,4 +378,4 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n     return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "268",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "270",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "295",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "326",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "359",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/68/LongIntVector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/68/LongIntVector.java\nindex 482a1f1aa0f..620da1fd844 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/68/LongIntVector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/68/LongIntVector.java\n@@ -26,6 +26,7 @@ import it.unimi.dsi.fastutil.objects.ObjectIterator;\n import org.apache.commons.lang.ArrayUtils;\n \n public class LongIntVector extends IntVector implements LongKeyVector, SimpleVector {\n+\n   private long dim;\n \n   public LongIntVector() {\n@@ -70,7 +71,9 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public int max() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+      return 0;\n+\n     int maxval = Integer.MIN_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -92,7 +95,9 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public int min() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return 0;\n+    if (idstorage.size() == 0)\n+      return 0;\n+\n     int minval = Integer.MAX_VALUE;\n     if (idstorage.isSparse()) {\n       IntIterator iter = idstorage.valueIterator();\n@@ -114,7 +119,9 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public long argmax() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+      return -1;\n+\n     int maxval = Integer.MIN_VALUE;\n     long maxidx = -1;\n     if (idstorage.isSparse()) {\n@@ -145,7 +152,9 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public long argmin() {\n     LongIntVectorStorage idstorage = (LongIntVectorStorage) storage;\n-    if (idstorage.size() == 0) return -1;\n+    if (idstorage.size() == 0)\n+      return -1;\n+\n     int minval = Integer.MAX_VALUE;\n     long minidx = -1;\n     if (idstorage.isSparse()) {\n@@ -176,7 +185,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public double std() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+      return 0;\n     double sumval = 0.0;\n     double sumval2 = 0.0;\n     if (dstorage.isSparse()) {\n@@ -199,7 +209,8 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public double average() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return 0;\n+    if (dstorage.size() == 0)\n+      return 0;\n     double sumval = 0.0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -211,7 +222,6 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n         sumval += val;\n       }\n     }\n-\n     sumval /= getDim();\n     return sumval;\n   }\n@@ -222,7 +232,9 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n \n   public long numZeros() {\n     LongIntVectorStorage dstorage = (LongIntVectorStorage) storage;\n-    if (dstorage.size() == 0) return (long) dim;\n+    if (dstorage.size() == 0)\n+      return (long) dim;\n+\n     long numZero = 0;\n     if (dstorage.isSparse()) {\n       IntIterator iter = dstorage.valueIterator();\n@@ -242,24 +254,20 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n   }\n \n   public LongIntVector clone() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).clone());\n+    return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).clone());\n   }\n \n   @Override\n   public LongIntVector copy() {\n-    return new LongIntVector(matrixId, rowId, clock, dim,\n-        ((LongIntVectorStorage) storage).copy());\n+    return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).copy());\n   }\n \n   @Override\n   public LongIntVector emptyLike() {\n     if (storage.isSparse()) {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySparse());\n+      return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).emptySparse());\n     } else {\n-      return new LongIntVector(matrixId, rowId, clock, dim,\n-          ((LongIntVectorStorage) storage).emptySorted());\n+      return new LongIntVector(matrixId, rowId, clock, dim, ((LongIntVectorStorage) storage).emptySorted());\n     }\n   }\n \n@@ -276,7 +284,6 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n   @Override\n   public Vector filter(double threshold) {\n     LongIntSparseVectorStorage newStorage = new LongIntSparseVectorStorage(size());\n-\n     if (storage.isDense()) {\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n       for (int i = 0; i < values.length; i++) {\n@@ -285,18 +292,17 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n         }\n       }\n     } else if (storage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) >= threshold) {\n-          newStorage.set(entry.getLongKey(), value);\n-        }\n-      }\n+             ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n+             while (iter.hasNext()) {\n+               Long2IntMap.Entry entry = iter.next();\n+               int value = entry.getIntValue();\n+               if (Math.abs(value) >= threshold) {\n+                 newStorage.set(entry.getLongKey(), value);\n+               }\n+             }\n     } else {\n       long[] indices = ((LongIntVectorStorage) storage).getIndices();\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n-\n       long size = ((LongIntVectorStorage) storage).size();\n       for (int k = 0; k < size; k++) {\n         if (Math.abs(values[k]) >= threshold) {\n@@ -304,13 +310,11 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n         }\n       }\n     }\n-\n     return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n   }\n \n   @Override\n   public Vector ifilter(double threshold) {\n-\n     if (storage.isDense()) {\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n       for (int i = 0; i < values.length; i++) {\n@@ -319,18 +323,17 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n         }\n       }\n     } else if (storage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (Math.abs(value) <= threshold) {\n-          iter.remove();\n-        }\n-      }\n+             ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n+             while (iter.hasNext()) {\n+               Long2IntMap.Entry entry = iter.next();\n+               int value = entry.getIntValue();\n+               if (Math.abs(value) <= threshold) {\n+                 iter.remove();\n+               }\n+             }\n     } else {\n       long[] indices = ((LongIntVectorStorage) storage).getIndices();\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n-\n       long size = ((LongIntVectorStorage) storage).size();\n       for (int k = 0; k < size; k++) {\n         if (Math.abs(values[k]) <= threshold) {\n@@ -339,14 +342,12 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n         }\n       }\n     }\n-\n     return new LongIntVector(matrixId, rowId, clock, getDim(), (LongIntVectorStorage) storage);\n   }\n \n   @Override\n   public Vector filterUp(double threshold) {\n     LongIntSparseVectorStorage newStorage = new LongIntSparseVectorStorage(size());\n-\n     if (storage.isDense()) {\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n       for (int i = 0; i < values.length; i++) {\n@@ -355,18 +356,17 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n         }\n       }\n     } else if (storage.isSparse()) {\n-      ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n-      while (iter.hasNext()) {\n-        Long2IntMap.Entry entry = iter.next();\n-        int value = entry.getIntValue();\n-        if (value >= threshold) {\n-          newStorage.set(entry.getLongKey(), value);\n-        }\n-      }\n+             ObjectIterator<Long2IntMap.Entry> iter = ((LongIntVectorStorage) storage).entryIterator();\n+             while (iter.hasNext()) {\n+               Long2IntMap.Entry entry = iter.next();\n+               int value = entry.getIntValue();\n+               if (value >= threshold) {\n+                 newStorage.set(entry.getLongKey(), value);\n+               }\n+             }\n     } else {\n       long[] indices = ((LongIntVectorStorage) storage).getIndices();\n       int[] values = ((LongIntVectorStorage) storage).getValues();\n-\n       long size = ((LongIntVectorStorage) storage).size();\n       for (int k = 0; k < size; k++) {\n         if (values[k] >= threshold) {\n@@ -374,7 +374,7 @@ public class LongIntVector extends IntVector implements LongKeyVector, SimpleVec\n         }\n       }\n     }\n-\n     return new LongIntVector(matrixId, rowId, clock, getDim(), newStorage);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}