{
    "project_name": "neo4j-neo4j",
    "error_id": "1347",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1347/DefaultForceOperation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1347/DefaultForceOperation.java\nindex bace18959c3..3a16cdcc05a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1347/DefaultForceOperation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1347/DefaultForceOperation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.database;\n \n import java.io.IOException;\n@@ -36,8 +37,8 @@ public class DefaultForceOperation implements CheckPointerImpl.ForceOperation\n     private final RelationshipTypeScanStore relationshipTypeScanStore;\n     private final StorageEngine storageEngine;\n \n-    public DefaultForceOperation( IndexingService indexingService, LabelScanStore labelScanStore,\n-            RelationshipTypeScanStore relationshipTypeScanStore, StorageEngine storageEngine )\n+    public DefaultForceOperation(IndexingService indexingService, LabelScanStore labelScanStore,\n+                                 RelationshipTypeScanStore relationshipTypeScanStore, StorageEngine storageEngine)\n     {\n         this.indexingService = indexingService;\n         this.labelScanStore = labelScanStore;\n@@ -46,11 +47,11 @@ public class DefaultForceOperation implements CheckPointerImpl.ForceOperation\n     }\n \n     @Override\n-    public void flushAndForce( IOLimiter ioLimiter, PageCursorTracer cursorTracer ) throws IOException\n+    public void flushAndForce(IOLimiter ioLimiter, PageCursorTracer cursorTracer) throws IOException\n     {\n-        indexingService.forceAll( ioLimiter, cursorTracer );\n-        labelScanStore.force( ioLimiter, cursorTracer );\n-        relationshipTypeScanStore.force( ioLimiter, cursorTracer );\n-        storageEngine.flushAndForce( ioLimiter, cursorTracer );\n+        indexingService.forceAll(ioLimiter, cursorTracer);\n+        labelScanStore.force(ioLimiter, cursorTracer);\n+        relationshipTypeScanStore.force(ioLimiter, cursorTracer);\n+        storageEngine.flushAndForce(ioLimiter, cursorTracer);\n     }\n }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}