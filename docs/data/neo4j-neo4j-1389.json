{
    "project_name": "neo4j-neo4j",
    "error_id": "1389",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "77",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1389/FloydWarshall.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1389/FloydWarshall.java\nindex 19c4abad993..deecad763ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1389/FloydWarshall.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1389/FloydWarshall.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.Comparator;\n@@ -35,12 +36,12 @@ import org.neo4j.graphdb.Relationship;\n /**\n  * This provides an implementation of the Floyd Warshall algorithm solving the\n  * all pair shortest path problem.\n+ *\n+ * @param <CostType> The datatype the edge weights are represented by.\n  * @complexity The {@link CostEvaluator} is called once for every relationship.\n- *             The {@link CostAccumulator} and cost comparator are both called\n- *             n^3 times. Assuming they run in constant time, the time\n- *             complexity for this algorithm is O(n^3).\n- * @param <CostType>\n- *            The datatype the edge weights are represented by.\n+ * The {@link CostAccumulator} and cost comparator are both called\n+ * n^3 times. Assuming they run in constant time, the time\n+ * complexity for this algorithm is O(n^3).\n  */\n public class FloydWarshall<CostType>\n {\n@@ -54,35 +55,30 @@ public class FloydWarshall<CostType>\n     protected Set<Relationship> relationshipSet;\n     CostType[][] costMatrix;\n     Integer[][] predecessors;\n-    Map<Node,Integer> nodeIndexes; // node ->index\n+    Map<Node, Integer> nodeIndexes; // node ->index\n     Node[] IndexedNodes; // index -> node\n     protected boolean doneCalculation;\n \n     /**\n-     * @param startCost\n-     *            The cost for just starting (or ending) a path in a node.\n-     * @param infinitelyBad\n-     *            A cost worse than all others. This is used to initialize the\n-     *            distance matrix.\n-     * @param relationDirection\n-     *            The direction in which the paths should follow the\n-     *            relationships.\n+     * @param startCost         The cost for just starting (or ending) a path in a node.\n+     * @param infinitelyBad     A cost worse than all others. This is used to initialize the\n+     *                          distance matrix.\n+     * @param relationDirection The direction in which the paths should follow the\n+     *                          relationships.\n      * @param costEvaluator\n-     * @see {@link CostEvaluator}\n      * @param costAccumulator\n-     * @see {@link CostAccumulator}\n      * @param costComparator\n+     * @param nodeSet           The set of nodes the calculation should be run on.\n+     * @param relationshipSet   The set of relationships that should be processed.\n+     * @see {@link CostEvaluator}\n+     * @see {@link CostAccumulator}\n      * @see {@link CostAccumulator} or {@link CostEvaluator}\n-     * @param nodeSet\n-     *            The set of nodes the calculation should be run on.\n-     * @param relationshipSet\n-     *            The set of relationships that should be processed.\n      */\n-    public FloydWarshall( CostType startCost, CostType infinitelyBad,\n-        Direction relationDirection, CostEvaluator<CostType> costEvaluator,\n-        CostAccumulator<CostType> costAccumulator,\n-        Comparator<CostType> costComparator, Set<Node> nodeSet,\n-        Set<Relationship> relationshipSet )\n+    public FloydWarshall(CostType startCost, CostType infinitelyBad,\n+                         Direction relationDirection, CostEvaluator<CostType> costEvaluator,\n+                         CostAccumulator<CostType> costAccumulator,\n+                         Comparator<CostType> costComparator, Set<Node> nodeSet,\n+                         Set<Relationship> relationshipSet)\n     {\n         super();\n         this.startCost = startCost;\n@@ -107,11 +103,11 @@ public class FloydWarshall<CostType>\n      * Internal calculate method that will do the calculation. This can however\n      * be called externally to manually trigger the calculation.\n      */\n-    @SuppressWarnings( \"unchecked\" )\n+    @SuppressWarnings(\"unchecked\")\n     public void calculate()\n     {\n         // Don't do it more than once\n-        if ( doneCalculation )\n+        if (doneCalculation)\n         {\n             return;\n         }\n@@ -122,56 +118,56 @@ public class FloydWarshall<CostType>\n         predecessors = new Integer[n][n];\n         IndexedNodes = new Node[n];\n         nodeIndexes = new HashMap<>();\n-        for ( int i = 0; i < n; ++i )\n+        for (int i = 0; i < n; ++i)\n         {\n-            for ( int j = 0; j < n; ++j )\n+            for (int j = 0; j < n; ++j)\n             {\n                 costMatrix[i][j] = infinitelyBad;\n             }\n             costMatrix[i][i] = startCost;\n         }\n         int nodeIndex = 0;\n-        for ( Node node : nodeSet )\n+        for (Node node : nodeSet)\n         {\n-            nodeIndexes.put( node, nodeIndex );\n+            nodeIndexes.put(node, nodeIndex);\n             IndexedNodes[nodeIndex] = node;\n             ++nodeIndex;\n         }\n         // Put the relationships in there\n-        for ( Relationship relationship : relationshipSet )\n+        for (Relationship relationship : relationshipSet)\n         {\n-            Integer i1 = nodeIndexes.get( relationship.getStartNode() );\n-            Integer i2 = nodeIndexes.get( relationship.getEndNode() );\n-            if ( i1 == null || i2 == null )\n+            Integer i1 = nodeIndexes.get(relationship.getStartNode());\n+            Integer i2 = nodeIndexes.get(relationship.getEndNode());\n+            if (i1 == null || i2 == null)\n             {\n                 // TODO: what to do here? pretend nothing happened? cast\n                 // exception?\n                 continue;\n             }\n-            if ( relationDirection.equals( Direction.BOTH )\n-                || relationDirection.equals( Direction.OUTGOING ) )\n+            if (relationDirection.equals(Direction.BOTH)\n+              || relationDirection.equals(Direction.OUTGOING))\n             {\n-                costMatrix[i1][i2] = costEvaluator.getCost( relationship, Direction.OUTGOING );\n+                costMatrix[i1][i2] = costEvaluator.getCost(relationship, Direction.OUTGOING);\n                 predecessors[i1][i2] = i1;\n             }\n-            if ( relationDirection.equals( Direction.BOTH )\n-                || relationDirection.equals( Direction.INCOMING ) )\n+            if (relationDirection.equals(Direction.BOTH)\n+              || relationDirection.equals(Direction.INCOMING))\n             {\n-                costMatrix[i2][i1] = costEvaluator.getCost( relationship,\n-                        Direction.INCOMING );\n+                costMatrix[i2][i1] = costEvaluator.getCost(relationship,\n+                  Direction.INCOMING);\n                 predecessors[i2][i1] = i2;\n             }\n         }\n         // Do it!\n-        for ( int v = 0; v < n; ++v )\n+        for (int v = 0; v < n; ++v)\n         {\n-            for ( int i = 0; i < n; ++i )\n+            for (int i = 0; i < n; ++i)\n             {\n-                for ( int j = 0; j < n; ++j )\n+                for (int j = 0; j < n; ++j)\n                 {\n                     CostType alternative = costAccumulator.addCosts(\n-                        costMatrix[i][v], costMatrix[v][j] );\n-                    if ( costComparator.compare( costMatrix[i][j], alternative ) > 0 )\n+                      costMatrix[i][v], costMatrix[v][j]);\n+                    if (costComparator.compare(costMatrix[i][j], alternative) > 0)\n                     {\n                         costMatrix[i][j] = alternative;\n                         predecessors[i][j] = predecessors[v][j];\n@@ -184,40 +180,38 @@ public class FloydWarshall<CostType>\n \n     /**\n      * This returns the cost for the shortest path between two nodes.\n-     * @param node1\n-     *            The start node.\n-     * @param node2\n-     *            The end node.\n+     *\n+     * @param node1 The start node.\n+     * @param node2 The end node.\n      * @return The cost for the shortest path.\n      */\n-    public CostType getCost( Node node1, Node node2 )\n+    public CostType getCost(Node node1, Node node2)\n     {\n         calculate();\n-        return costMatrix[nodeIndexes.get( node1 )][nodeIndexes.get( node2 )];\n+        return costMatrix[nodeIndexes.get(node1)][nodeIndexes.get(node2)];\n     }\n \n     /**\n      * This returns the shortest path between two nodes as list of nodes.\n-     * @param startNode\n-     *            The start node.\n-     * @param targetNode\n-     *            The end node.\n+     *\n+     * @param startNode  The start node.\n+     * @param targetNode The end node.\n      * @return The shortest path as a list of nodes.\n      */\n-    public List<Node> getPath( Node startNode, Node targetNode )\n+    public List<Node> getPath(Node startNode, Node targetNode)\n     {\n         calculate();\n         LinkedList<Node> path = new LinkedList<>();\n-        int index = nodeIndexes.get( targetNode );\n-        int startIndex = nodeIndexes.get( startNode );\n+        int index = nodeIndexes.get(targetNode);\n+        int startIndex = nodeIndexes.get(startNode);\n         Node n = targetNode;\n-        while ( !n.equals( startNode ) )\n+        while (!n.equals(startNode))\n         {\n-            path.addFirst( n );\n+            path.addFirst(n);\n             index = predecessors[startIndex][index];\n             n = IndexedNodes[index];\n         }\n-        path.addFirst( n );\n+        path.addFirst(n);\n         return path;\n     }\n }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1389/FloydWarshall.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1389/FloydWarshall.java\nindex 19c4abad993..94b4cefb931 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1389/FloydWarshall.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1389/FloydWarshall.java\n@@ -78,8 +78,7 @@ public class FloydWarshall<CostType>\n      * @param relationshipSet\n      *            The set of relationships that should be processed.\n      */\n-    public FloydWarshall( CostType startCost, CostType infinitelyBad,\n-        Direction relationDirection, CostEvaluator<CostType> costEvaluator,\n+    public FloydWarshall( CostType startCost, CostType infinitelyBad, Direction relationDirection, CostEvaluator<CostType> costEvaluator,\n         CostAccumulator<CostType> costAccumulator,\n         Comparator<CostType> costComparator, Set<Node> nodeSet,\n         Set<Relationship> relationshipSet )\n@@ -169,9 +168,8 @@ public class FloydWarshall<CostType>\n             {\n                 for ( int j = 0; j < n; ++j )\n                 {\n-                    CostType alternative = costAccumulator.addCosts(\n-                        costMatrix[i][v], costMatrix[v][j] );\n-                    if ( costComparator.compare( costMatrix[i][j], alternative ) > 0 )\n+                    CostType alternative = costAccumulator.addCosts( costMatrix[i][v], costMatrix[v][j] );\n+if ( costComparator.compare( costMatrix[i][j], alternative ) > 0 )\n                     {\n                         costMatrix[i][j] = alternative;\n                         predecessors[i][j] = predecessors[v][j];\n@@ -220,4 +218,4 @@ public class FloydWarshall<CostType>\n         path.addFirst( n );\n         return path;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}