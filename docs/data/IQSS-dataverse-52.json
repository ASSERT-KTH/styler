{
    "project_name": "IQSS-dataverse",
    "error_id": "52",
    "information": {
        "errors": [
            {
                "line": "45",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @EJB\n    BuiltinUserServiceBean usersSvc;\n\t\n    @EJB \n    ActionLogServiceBean logSvc;\n    ",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/52/DataverseSession.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/52/DataverseSession.java\nindex c6016939c08..ad7ce083cbd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/52/DataverseSession.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/52/DataverseSession.java\n@@ -27,236 +27,234 @@ import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpSession;\n \n /**\n- *\n  * @author gdurand\n  */\n @Named\n @SessionScoped\n-public class DataverseSession implements Serializable{\n-    \n-    /* Note that on logout, variables must be cleared manually in DataverseHeaderFragment*/\n-    private User user;\n-\n-    @EJB\n-    PermissionServiceBean permissionsService;\n-\n-    @EJB\n-    BuiltinUserServiceBean usersSvc;\n-\t\n-    @EJB \n-    ActionLogServiceBean logSvc;\n-    \n-    @Inject\n-    SettingsWrapper settingsWrapper;\n-    \n-    @Inject\n-    DataverseHeaderFragment headerFragment;\n-    \n-    @EJB\n-    SystemConfig systemConfig;\n-    \n-    @EJB\n-    BannerMessageServiceBean bannerMessageService;\n-\n-    @EJB\n-    AuthenticationServiceBean authenticationService;\n-\n-    private static final Logger logger = Logger.getLogger(DataverseSession.class.getCanonicalName());\n-    \n-    private boolean statusDismissed = false;\n-    \n-    private List<BannerMessage> dismissedMessages = new ArrayList<>();\n-\n-    public List<BannerMessage> getDismissedMessages() {\n-        return dismissedMessages;\n-    }\n+public class DataverseSession implements Serializable {\n \n-    public void setDismissedMessages(List<BannerMessage> dismissedMessages) {\n-        this.dismissedMessages = dismissedMessages;\n-    }\n+  /* Note that on logout, variables must be cleared manually in DataverseHeaderFragment*/\n+  private User user;\n \n-    /**\n-     * If debug is set to true, some pages show extra debugging information to\n-     * superusers.\n-     *\n-     * The way to set the Boolean to true is to pass debug=true as a query\n-     * parameter. The Boolean will remain true (even if nothing is passed to it)\n-     * until debug=false is passed.\n-     *\n-     * Because a boolean is false by default when it comes from a viewParam we\n-     * use a Boolean instead. That way, if the debug viewParam is null, we can\n-     * leave the state alone (see setDebug()).\n-     */\n-    private Boolean debug;\n-    \n-    public User getUser() {\n-        return getUser(false);\n-    }\n+  @EJB\n+  PermissionServiceBean permissionsService;\n \n-    /**\n-     * For performance reasons, we only lookup the authenticated user again (to\n-     * check if it has been deleted or deactivated, for example) when we have\n-     * to.\n-     *\n-     * @param lookupAuthenticatedUserAgain A boolean to indicate if we should go\n-     * to the database again to lookup the user to get the latest values that\n-     * may have been updated outside the session.\n-     */\n-    public User getUser(boolean lookupAuthenticatedUserAgain) {\n-        if ( user == null ) {\n-            user = GuestUser.get();\n-        }\n-        if (lookupAuthenticatedUserAgain && user instanceof AuthenticatedUser) {\n-            AuthenticatedUser auFromSession = (AuthenticatedUser) user;\n-            AuthenticatedUser auFreshLookup = authenticationService.findByID(auFromSession.getId());\n-            if (auFreshLookup == null) {\n-                logger.fine(\"getUser found user no longer exists (was deleted). Returning GuestUser.\");\n-                user = GuestUser.get();\n-            } else {\n-                if (auFreshLookup.isDeactivated()) {\n-                    logger.fine(\"getUser found user is deactivated. Returning GuestUser.\");\n-                    user = GuestUser.get();\n-                }\n-            }\n-        }\n-        return user;\n-    }\n+  @EJB\n+  BuiltinUserServiceBean usersSvc;\n \n-    /**\n-     * Sets the user and configures the session timeout.\n-     */\n-    public void setUser(User aUser) {\n-        // We check for deactivated status here in \"setUser\" to ensure a common user\n-        // experience across Builtin, Shib, OAuth, and OIDC users.\n-        // If we want a different user experience for Builtin users, we can\n-        // modify getUpdateAuthenticatedUser in AuthenticationServiceBean\n-        // (and probably other places).\n-        if (aUser instanceof AuthenticatedUser && aUser.isDeactivated()) {\n-            logger.info(\"Login attempt by deactivated user \" + aUser.getIdentifier() + \".\");\n-            JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"deactivated.error\"));\n-            return;\n-        }\n-        FacesContext context = FacesContext.getCurrentInstance();\n-\t\t// Log the login/logout and Change the session id if we're using the UI and have\n-\t\t// a session, versus an API call with no session - (i.e. /admin/submitToArchive()\n-\t\t// which sets the user in the session to pass it through to the underlying command)\n-        // TODO: reformat to remove tabs etc.\n-\t\tif(context != null) {\n-          logSvc.log( \n-                      new ActionLogRecord(ActionLogRecord.ActionType.SessionManagement,(aUser==null) ? \"logout\" : \"login\")\n-                          .setUserIdentifier((aUser!=null) ? aUser.getIdentifier() : (user!=null ? user.getIdentifier() : \"\") ));\n-\n-          //#3254 - change session id when user changes\n-          SessionUtil.changeSessionId((HttpServletRequest) context.getExternalContext().getRequest());\n-            HttpSession httpSession = (HttpSession) context.getExternalContext().getSession(false);\n-            if (httpSession != null) {\n-                // Configure session timeout.\n-                logger.fine(\"jsession: \" + httpSession.getId() + \" setting the lifespan of the session to \" + systemConfig.getLoginSessionTimeout() + \" minutes\");\n-                httpSession.setMaxInactiveInterval(systemConfig.getLoginSessionTimeout() * 60); // session timeout, in seconds\n-            }\n-        }\n-        this.user = aUser;\n-    }\n+  @EJB\n+  ActionLogServiceBean logSvc;\n+\n+  @Inject\n+  SettingsWrapper settingsWrapper;\n+\n+  @Inject\n+  DataverseHeaderFragment headerFragment;\n+\n+  @EJB\n+  SystemConfig systemConfig;\n \n-    public boolean isStatusDismissed() {\n-        return statusDismissed;\n+  @EJB\n+  BannerMessageServiceBean bannerMessageService;\n+\n+  @EJB\n+  AuthenticationServiceBean authenticationService;\n+\n+  private static final Logger logger = Logger.getLogger(DataverseSession.class.getCanonicalName());\n+\n+  private boolean statusDismissed = false;\n+\n+  private List<BannerMessage> dismissedMessages = new ArrayList<>();\n+\n+  public List<BannerMessage> getDismissedMessages() {\n+    return dismissedMessages;\n+  }\n+\n+  public void setDismissedMessages(List<BannerMessage> dismissedMessages) {\n+    this.dismissedMessages = dismissedMessages;\n+  }\n+\n+  /**\n+   * If debug is set to true, some pages show extra debugging information to\n+   * superusers.\n+   * <p>\n+   * The way to set the Boolean to true is to pass debug=true as a query\n+   * parameter. The Boolean will remain true (even if nothing is passed to it)\n+   * until debug=false is passed.\n+   * <p>\n+   * Because a boolean is false by default when it comes from a viewParam we\n+   * use a Boolean instead. That way, if the debug viewParam is null, we can\n+   * leave the state alone (see setDebug()).\n+   */\n+  private Boolean debug;\n+\n+  public User getUser() {\n+    return getUser(false);\n+  }\n+\n+  /**\n+   * For performance reasons, we only lookup the authenticated user again (to\n+   * check if it has been deleted or deactivated, for example) when we have\n+   * to.\n+   *\n+   * @param lookupAuthenticatedUserAgain A boolean to indicate if we should go\n+   *                                     to the database again to lookup the user to get the latest values that\n+   *                                     may have been updated outside the session.\n+   */\n+  public User getUser(boolean lookupAuthenticatedUserAgain) {\n+    if (user == null) {\n+      user = GuestUser.get();\n     }\n-    \n-    public void setStatusDismissed(boolean status) {\n-        statusDismissed = status; //MAD: Set to true to enable code!\n+    if (lookupAuthenticatedUserAgain && user instanceof AuthenticatedUser) {\n+      AuthenticatedUser auFromSession = (AuthenticatedUser) user;\n+      AuthenticatedUser auFreshLookup = authenticationService.findByID(auFromSession.getId());\n+      if (auFreshLookup == null) {\n+        logger.fine(\"getUser found user no longer exists (was deleted). Returning GuestUser.\");\n+        user = GuestUser.get();\n+      } else {\n+        if (auFreshLookup.isDeactivated()) {\n+          logger.fine(\"getUser found user is deactivated. Returning GuestUser.\");\n+          user = GuestUser.get();\n+        }\n+      }\n     }\n+    return user;\n+  }\n \n-    public Boolean getDebug() {\n-        // Only superusers get extra debugging information.\n-        if (!getUser().isSuperuser()) {\n-            return false;\n-        }\n-        return debug;\n+  /**\n+   * Sets the user and configures the session timeout.\n+   */\n+  public void setUser(User aUser) {\n+    // We check for deactivated status here in \"setUser\" to ensure a common user\n+    // experience across Builtin, Shib, OAuth, and OIDC users.\n+    // If we want a different user experience for Builtin users, we can\n+    // modify getUpdateAuthenticatedUser in AuthenticationServiceBean\n+    // (and probably other places).\n+    if (aUser instanceof AuthenticatedUser && aUser.isDeactivated()) {\n+      logger.info(\"Login attempt by deactivated user \" + aUser.getIdentifier() + \".\");\n+      JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"deactivated.error\"));\n+      return;\n     }\n+    FacesContext context = FacesContext.getCurrentInstance();\n+    // Log the login/logout and Change the session id if we're using the UI and have\n+    // a session, versus an API call with no session - (i.e. /admin/submitToArchive()\n+    // which sets the user in the session to pass it through to the underlying command)\n+    // TODO: reformat to remove tabs etc.\n+    if (context != null) {\n+      logSvc.log(\n+        new ActionLogRecord(ActionLogRecord.ActionType.SessionManagement, (aUser == null) ? \"logout\" : \"login\")\n+          .setUserIdentifier((aUser != null) ? aUser.getIdentifier() : (user != null ? user.getIdentifier() : \"\")));\n \n-    public void setDebug(Boolean debug) {\n-        // Leave the debug state alone if nothing is passed.\n-        if (debug != null) {\n-            this.debug = debug;\n-        }\n+      //#3254 - change session id when user changes\n+      SessionUtil.changeSessionId((HttpServletRequest) context.getExternalContext().getRequest());\n+      HttpSession httpSession = (HttpSession) context.getExternalContext().getSession(false);\n+      if (httpSession != null) {\n+        // Configure session timeout.\n+        logger.fine(\"jsession: \" + httpSession.getId() + \" setting the lifespan of the session to \" +\n+          systemConfig.getLoginSessionTimeout() + \" minutes\");\n+        httpSession.setMaxInactiveInterval(systemConfig.getLoginSessionTimeout() * 60); // session timeout, in seconds\n+      }\n     }\n+    this.user = aUser;\n+  }\n+\n+  public boolean isStatusDismissed() {\n+    return statusDismissed;\n+  }\n+\n+  public void setStatusDismissed(boolean status) {\n+    statusDismissed = status; //MAD: Set to true to enable code!\n+  }\n \n-    public StaticPermissionQuery on( Dataverse d ) {\n-            return permissionsService.userOn(user, d);\n+  public Boolean getDebug() {\n+    // Only superusers get extra debugging information.\n+    if (!getUser().isSuperuser()) {\n+      return false;\n     }\n-    \n-    // Language Locale methods: \n-    \n-    private String localeCode;\n-    \n-    public String getLocaleCode() {\n-        if (localeCode == null) {\n-            initLocale();\n-        }\n-        return localeCode;\n+    return debug;\n+  }\n+\n+  public void setDebug(Boolean debug) {\n+    // Leave the debug state alone if nothing is passed.\n+    if (debug != null) {\n+      this.debug = debug;\n     }\n+  }\n+\n+  public StaticPermissionQuery on(Dataverse d) {\n+    return permissionsService.userOn(user, d);\n+  }\n \n-    public void setLocaleCode(String localeCode) {\n-        this.localeCode = localeCode;\n+  // Language Locale methods:\n+\n+  private String localeCode;\n+\n+  public String getLocaleCode() {\n+    if (localeCode == null) {\n+      initLocale();\n     }\n+    return localeCode;\n+  }\n \n-    public String getLocaleTitle() {\n-        if (localeCode == null) {\n-            initLocale();\n-        }\n-        return settingsWrapper.getConfiguredLocales().get(localeCode);\n+  public void setLocaleCode(String localeCode) {\n+    this.localeCode = localeCode;\n+  }\n+\n+  public String getLocaleTitle() {\n+    if (localeCode == null) {\n+      initLocale();\n     }\n-    \n-    public void initLocale() {\n-        \n-        if(FacesContext.getCurrentInstance() == null) {\n-            localeCode = \"en\";\n-        }\n-        else if (FacesContext.getCurrentInstance().getViewRoot() == null ) {\n-            localeCode = FacesContext.getCurrentInstance().getExternalContext().getRequestLocale().getLanguage();\n-        }\n-        else if (FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage().equals(\"en_US\")) {\n-            localeCode = \"en\";\n-        }\n-        else {\n-            localeCode = FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage();\n-        }\n-        \n-        logger.fine(\"init: locale set to \"+localeCode);\n+    return settingsWrapper.getConfiguredLocales().get(localeCode);\n+  }\n+\n+  public void initLocale() {\n+\n+    if (FacesContext.getCurrentInstance() == null) {\n+      localeCode = \"en\";\n+    } else if (FacesContext.getCurrentInstance().getViewRoot() == null) {\n+      localeCode = FacesContext.getCurrentInstance().getExternalContext().getRequestLocale().getLanguage();\n+    } else if (FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage().equals(\"en_US\")) {\n+      localeCode = \"en\";\n+    } else {\n+      localeCode = FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage();\n     }\n \n-    public void updateLocaleInViewRootAndRedirect(String code) {\n+    logger.fine(\"init: locale set to \" + localeCode);\n+  }\n \n-        localeCode = code;\n-        FacesContext.getCurrentInstance().getViewRoot().setLocale(new Locale(code));\n-        try {\n-            String url = ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getHeader(\"referer\");\n-            FacesContext.getCurrentInstance().getExternalContext().redirect(url);\n-        } catch (IOException ioe) {\n-            ioe.printStackTrace();\n-        }\n+  public void updateLocaleInViewRootAndRedirect(String code) {\n+\n+    localeCode = code;\n+    FacesContext.getCurrentInstance().getViewRoot().setLocale(new Locale(code));\n+    try {\n+      String url =\n+        ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getHeader(\"referer\");\n+      FacesContext.getCurrentInstance().getExternalContext().redirect(url);\n+    } catch (IOException ioe) {\n+      ioe.printStackTrace();\n     }\n+  }\n \n-    public void updateLocaleInViewRoot() {\n-        if (localeCode != null \n-                && FacesContext.getCurrentInstance() != null \n-                && FacesContext.getCurrentInstance().getViewRoot() != null \n-                && !localeCode.equals(FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage())) {\n-            FacesContext.getCurrentInstance().getViewRoot().setLocale(new Locale(localeCode));\n-        } \n+  public void updateLocaleInViewRoot() {\n+    if (localeCode != null\n+      && FacesContext.getCurrentInstance() != null\n+      && FacesContext.getCurrentInstance().getViewRoot() != null\n+      && !localeCode.equals(FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage())) {\n+      FacesContext.getCurrentInstance().getViewRoot().setLocale(new Locale(localeCode));\n     }\n-    \n-    public void dismissMessage(BannerMessage message){\n-               \n-        if (message.isDismissibleByUser()){\n-            if (user.isAuthenticated()){\n-                bannerMessageService.dismissMessageByUser(message, (AuthenticatedUser) user);\n-            }\n-\n-        } else {\n-            dismissedMessages.add(message);\n-        }\n-        \n+  }\n+\n+  public void dismissMessage(BannerMessage message) {\n+\n+    if (message.isDismissibleByUser()) {\n+      if (user.isAuthenticated()) {\n+        bannerMessageService.dismissMessageByUser(message, (AuthenticatedUser) user);\n+      }\n+\n+    } else {\n+      dismissedMessages.add(message);\n     }\n \n+  }\n+\n }\n",
            "diff_size": 313
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/52/DataverseSession.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/52/DataverseSession.java\nindex c6016939c08..1c17c969479 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/52/DataverseSession.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/52/DataverseSession.java\n@@ -30,11 +30,14 @@ import javax.servlet.http.HttpSession;\n  *\n  * @author gdurand\n  */\n+\n+\n @Named\n @SessionScoped\n-public class DataverseSession implements Serializable{\n+public class DataverseSession implements Serializable {\n     \n     /* Note that on logout, variables must be cleared manually in DataverseHeaderFragment*/\n+\n     private User user;\n \n     @EJB\n@@ -42,29 +45,26 @@ public class DataverseSession implements Serializable{\n \n     @EJB\n     BuiltinUserServiceBean usersSvc;\n-\t\n-    @EJB \n+\n+    @EJB\n     ActionLogServiceBean logSvc;\n-    \n+\n     @Inject\n     SettingsWrapper settingsWrapper;\n-    \n+\n     @Inject\n     DataverseHeaderFragment headerFragment;\n-    \n+\n     @EJB\n     SystemConfig systemConfig;\n-    \n+\n     @EJB\n     BannerMessageServiceBean bannerMessageService;\n \n     @EJB\n     AuthenticationServiceBean authenticationService;\n-\n     private static final Logger logger = Logger.getLogger(DataverseSession.class.getCanonicalName());\n-    \n     private boolean statusDismissed = false;\n-    \n     private List<BannerMessage> dismissedMessages = new ArrayList<>();\n \n     public List<BannerMessage> getDismissedMessages() {\n@@ -87,8 +87,9 @@ public class DataverseSession implements Serializable{\n      * use a Boolean instead. That way, if the debug viewParam is null, we can\n      * leave the state alone (see setDebug()).\n      */\n+\n     private Boolean debug;\n-    \n+\n     public User getUser() {\n         return getUser(false);\n     }\n@@ -102,10 +103,12 @@ public class DataverseSession implements Serializable{\n      * to the database again to lookup the user to get the latest values that\n      * may have been updated outside the session.\n      */\n+\n     public User getUser(boolean lookupAuthenticatedUserAgain) {\n-        if ( user == null ) {\n+        if (user == null) {\n             user = GuestUser.get();\n         }\n+\n         if (lookupAuthenticatedUserAgain && user instanceof AuthenticatedUser) {\n             AuthenticatedUser auFromSession = (AuthenticatedUser) user;\n             AuthenticatedUser auFreshLookup = authenticationService.findByID(auFromSession.getId());\n@@ -125,6 +128,7 @@ public class DataverseSession implements Serializable{\n     /**\n      * Sets the user and configures the session timeout.\n      */\n+\n     public void setUser(User aUser) {\n         // We check for deactivated status here in \"setUser\" to ensure a common user\n         // experience across Builtin, Shib, OAuth, and OIDC users.\n@@ -136,18 +140,17 @@ public class DataverseSession implements Serializable{\n             JsfHelper.addErrorMessage(BundleUtil.getStringFromBundle(\"deactivated.error\"));\n             return;\n         }\n+\n         FacesContext context = FacesContext.getCurrentInstance();\n-\t\t// Log the login/logout and Change the session id if we're using the UI and have\n-\t\t// a session, versus an API call with no session - (i.e. /admin/submitToArchive()\n-\t\t// which sets the user in the session to pass it through to the underlying command)\n+        // Log the login/logout and Change the session id if we're using the UI and have\n+        // a session, versus an API call with no session - (i.e. /admin/submitToArchive()\n+        // which sets the user in the session to pass it through to the underlying command)\n         // TODO: reformat to remove tabs etc.\n-\t\tif(context != null) {\n-          logSvc.log( \n-                      new ActionLogRecord(ActionLogRecord.ActionType.SessionManagement,(aUser==null) ? \"logout\" : \"login\")\n-                          .setUserIdentifier((aUser!=null) ? aUser.getIdentifier() : (user!=null ? user.getIdentifier() : \"\") ));\n+        if (context != null) {\n+            logSvc.log(new ActionLogRecord(ActionLogRecord.ActionType.SessionManagement, (aUser == null) ? \"logout\" : \"login\").setUserIdentifier((aUser != null) ? aUser.getIdentifier() : (user != null ? user.getIdentifier() : \"\")));\n \n           //#3254 - change session id when user changes\n-          SessionUtil.changeSessionId((HttpServletRequest) context.getExternalContext().getRequest());\n+            SessionUtil.changeSessionId((HttpServletRequest) context.getExternalContext().getRequest());\n             HttpSession httpSession = (HttpSession) context.getExternalContext().getSession(false);\n             if (httpSession != null) {\n                 // Configure session timeout.\n@@ -161,7 +164,7 @@ public class DataverseSession implements Serializable{\n     public boolean isStatusDismissed() {\n         return statusDismissed;\n     }\n-    \n+\n     public void setStatusDismissed(boolean status) {\n         statusDismissed = status; //MAD: Set to true to enable code!\n     }\n@@ -181,14 +184,14 @@ public class DataverseSession implements Serializable{\n         }\n     }\n \n-    public StaticPermissionQuery on( Dataverse d ) {\n-            return permissionsService.userOn(user, d);\n+    public StaticPermissionQuery on(Dataverse d) {\n+        return permissionsService.userOn(user, d);\n     }\n     \n     // Language Locale methods: \n-    \n+\n     private String localeCode;\n-    \n+\n     public String getLocaleCode() {\n         if (localeCode == null) {\n             initLocale();\n@@ -206,27 +209,21 @@ public class DataverseSession implements Serializable{\n         }\n         return settingsWrapper.getConfiguredLocales().get(localeCode);\n     }\n-    \n+\n     public void initLocale() {\n-        \n-        if(FacesContext.getCurrentInstance() == null) {\n+        if (FacesContext.getCurrentInstance() == null) {\n             localeCode = \"en\";\n-        }\n-        else if (FacesContext.getCurrentInstance().getViewRoot() == null ) {\n+        } else if (FacesContext.getCurrentInstance().getViewRoot() == null) {\n             localeCode = FacesContext.getCurrentInstance().getExternalContext().getRequestLocale().getLanguage();\n-        }\n-        else if (FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage().equals(\"en_US\")) {\n-            localeCode = \"en\";\n-        }\n-        else {\n-            localeCode = FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage();\n-        }\n-        \n-        logger.fine(\"init: locale set to \"+localeCode);\n+        } else if (FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage().equals(\"en_US\")) {\n+                   localeCode = \"en\";\n+               } else {\n+                   localeCode = FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage();\n+               }\n+        logger.fine(\"init: locale set to \" + localeCode);\n     }\n \n     public void updateLocaleInViewRootAndRedirect(String code) {\n-\n         localeCode = code;\n         FacesContext.getCurrentInstance().getViewRoot().setLocale(new Locale(code));\n         try {\n@@ -238,25 +235,18 @@ public class DataverseSession implements Serializable{\n     }\n \n     public void updateLocaleInViewRoot() {\n-        if (localeCode != null \n-                && FacesContext.getCurrentInstance() != null \n-                && FacesContext.getCurrentInstance().getViewRoot() != null \n-                && !localeCode.equals(FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage())) {\n+        if (localeCode != null && FacesContext.getCurrentInstance() != null && FacesContext.getCurrentInstance().getViewRoot() != null && !localeCode.equals(FacesContext.getCurrentInstance().getViewRoot().getLocale().getLanguage())) {\n             FacesContext.getCurrentInstance().getViewRoot().setLocale(new Locale(localeCode));\n-        } \n+        }\n     }\n-    \n-    public void dismissMessage(BannerMessage message){\n-               \n-        if (message.isDismissibleByUser()){\n-            if (user.isAuthenticated()){\n+\n+    public void dismissMessage(BannerMessage message) {\n+        if (message.isDismissibleByUser()) {\n+            if (user.isAuthenticated()) {\n                 bannerMessageService.dismissMessageByUser(message, (AuthenticatedUser) user);\n             }\n-\n         } else {\n             dismissedMessages.add(message);\n         }\n-        \n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 62
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "45",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}