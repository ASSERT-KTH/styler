{
    "project_name": "kitodo-kitodo-production",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "90",
                "column": "5",
                "severity": "warning",
                "message": "'METHOD_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @return list of search fields\n     */\n    public List<String> getSearchFields() {\n        if (this.hitModel.getSelectedCatalog().isEmpty()) {\n            return new LinkedList<>();\n        } else {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/16/CatalogImportDialog.java\nindex 69b0507da5d..1a19f1820fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/16/CatalogImportDialog.java\n@@ -87,6 +87,7 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return list of search fields\n      */\n+\n     public List<String> getSearchFields() {\n         if (this.hitModel.getSelectedCatalog().isEmpty()) {\n             return new LinkedList<>();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/16/CatalogImportDialog.java\nindex 69b0507da5d..2cb3971d8b0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/16/CatalogImportDialog.java\n@@ -51,7 +51,7 @@ import org.primefaces.component.datatable.DataTable;\n import org.primefaces.model.SortOrder;\n import org.xml.sax.SAXException;\n \n-public class CatalogImportDialog  extends MetadataImportDialog implements Serializable {\n+public class CatalogImportDialog extends MetadataImportDialog implements Serializable {\n     private static final Logger logger = LogManager.getLogger(CatalogImportDialog.class);\n     private final LazyHitModel hitModel = new LazyHitModel();\n \n@@ -82,6 +82,7 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n         this.createProcessForm.setProcesses(new LinkedList<>());\n         getRecordById(Helper.getRequestParameter(ID_PARAMETER_NAME));\n     }\n+\n     /**\n      * Get list of search fields.\n      *\n@@ -165,41 +166,41 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n                 // import children\n                 if (this.importChildren) {\n                     this.createProcessForm.setChildProcesses(ServiceManager.getImportService().getChildProcesses(\n-                            opac, this.currentRecordId, projectId, templateId, numberOfChildren));\n+                        opac, this.currentRecordId, projectId, templateId, numberOfChildren));\n                 }\n                 // import ancestors\n                 LinkedList<TempProcess> processes = ServiceManager.getImportService().importProcessHierarchy(\n-                        this.currentRecordId, opac, projectId, templateId, this.importDepth,\n-                        this.createProcessForm.getRulesetManagement().getFunctionalKeys(\n-                                FunctionalMetadata.HIGHERLEVEL_IDENTIFIER));\n+                    this.currentRecordId, opac, projectId, templateId, this.importDepth,\n+                    this.createProcessForm.getRulesetManagement().getFunctionalKeys(\n+                        FunctionalMetadata.HIGHERLEVEL_IDENTIFIER));\n                 this.createProcessForm.setProcesses(processes);\n \n                 // Fill metadata fields in metadata tab with metadata values of first process on successful import\n                 if (!processes.isEmpty() && processes.getFirst().getMetadataNodes().getLength() > 0) {\n                     TempProcess firstProcess = processes.getFirst();\n                     this.createProcessForm.getProcessDataTab().setDocType(\n-                            firstProcess.getWorkpiece().getRootElement().getType());\n+                        firstProcess.getWorkpiece().getRootElement().getType());\n                     Collection<Metadata> metadata = ImportService.importMetadata(firstProcess.getMetadataNodes(),\n-                            MdSec.DMD_SEC);\n+                        MdSec.DMD_SEC);\n                     createProcessForm.getProcessMetadataTab().getProcessDetails().setMetadata(metadata);\n                 }\n \n                 String summary = Helper.getTranslation(\"newProcess.catalogueSearch.importSuccessfulSummary\");\n                 String detail = Helper.getTranslation(\"newProcess.catalogueSearch.importSuccessfulDetail\",\n-                        Arrays.asList(String.valueOf(processes.size()), opac));\n+                    Arrays.asList(String.valueOf(processes.size()), opac));\n                 showGrowlMessage(summary, detail);\n \n                 if (this.importChildren) {\n                     summary = Helper.getTranslation(\"newProcess.catalogueSearch.loadingChilrenSuccessfulSummary\");\n                     detail = Helper.getTranslation(\"newProcess.catalogueSearch.loadingChilrenSuccessfulDetail\",\n-                            Collections.singletonList(String.valueOf(this.createProcessForm.getChildProcesses().size())));\n+                        Collections.singletonList(String.valueOf(this.createProcessForm.getChildProcesses().size())));\n                     showGrowlMessage(summary, detail);\n                 }\n \n                 showRecord();\n             } catch (IOException | ProcessGenerationException | XPathExpressionException | URISyntaxException\n-                    | ParserConfigurationException | UnsupportedFormatException | SAXException | NoRecordFoundException\n-                    | DAOException | ConfigException e) {\n+                | ParserConfigurationException | UnsupportedFormatException | SAXException | NoRecordFoundException\n+                | DAOException | ConfigException e) {\n                 Helper.setErrorMessage(e.getLocalizedMessage(), logger, e);\n             }\n         }\n@@ -210,7 +211,7 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n         try {\n             if (this.importChildren) {\n                 this.numberOfChildren = ServiceManager.getImportService().getNumberOfChildren(\n-                        this.hitModel.getSelectedCatalog(), this.currentRecordId);\n+                    this.hitModel.getSelectedCatalog(), this.currentRecordId);\n             }\n             if (this.importChildren && this.numberOfChildren > NUMBER_OF_CHILDREN_WARNING_THRESHOLD) {\n                 Ajax.update(\"manyChildrenWarningDialog\");\n@@ -285,15 +286,15 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n     public void setSelectedExemplarRecord(ExemplarRecord selectedExemplarRecord) {\n         try {\n             ImportService.setSelectedExemplarRecord(selectedExemplarRecord, this.hitModel.getSelectedCatalog(),\n-                    this.createProcessForm.getProcessMetadataTab().getProcessDetailsElements());\n+                this.createProcessForm.getProcessMetadataTab().getProcessDetailsElements());\n             String summary = Helper.getTranslation(\"newProcess.catalogueSearch.exemplarRecordSelectedSummary\");\n             String detail = Helper.getTranslation(\"newProcess.catalogueSearch.exemplarRecordSelectedDetail\",\n-                    Arrays.asList(selectedExemplarRecord.getOwner(), selectedExemplarRecord.getSignature()));\n+                Arrays.asList(selectedExemplarRecord.getOwner(), selectedExemplarRecord.getSignature()));\n             showGrowlMessage(summary, detail);\n             Ajax.update(FORM_CLIENTID);\n         } catch (ParameterNotFoundException e) {\n             Helper.setErrorMessage(\"newProcess.catalogueSearch.exemplarRecordParameterNotFoundError\",\n-                    new Object[] {e.getMessage(), this.hitModel.getSelectedCatalog() });\n+                new Object[] {e.getMessage(), this.hitModel.getSelectedCatalog()});\n         }\n     }\n \n@@ -326,6 +327,6 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      */\n     public String getNumberOfChildProcessesWarning() {\n         return Helper.getTranslation(\"newProcess.catalogueSearch.manyChildrenWarning\",\n-                Collections.singletonList(String.valueOf(this.numberOfChildren)));\n+            Collections.singletonList(String.valueOf(this.numberOfChildren)));\n     }\n }\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "86",
                    "column": "1",
                    "severity": "warning",
                    "message": "Block comment has incorrect indentation level 0, expected is 4, indentation should be the same level as line 91.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "168",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "172",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 157).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "174",
                    "column": "1",
                    "severity": "warning",
                    "message": "'try' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/16/CatalogImportDialog.java\nindex 69b0507da5d..6b1489819bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/16/CatalogImportDialog.java\n@@ -51,7 +51,7 @@ import org.primefaces.component.datatable.DataTable;\n import org.primefaces.model.SortOrder;\n import org.xml.sax.SAXException;\n \n-public class CatalogImportDialog  extends MetadataImportDialog implements Serializable {\n+public class CatalogImportDialog extends MetadataImportDialog implements Serializable {\n     private static final Logger logger = LogManager.getLogger(CatalogImportDialog.class);\n     private final LazyHitModel hitModel = new LazyHitModel();\n \n@@ -82,7 +82,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n         this.createProcessForm.setProcesses(new LinkedList<>());\n         getRecordById(Helper.getRequestParameter(ID_PARAMETER_NAME));\n     }\n-    /**\n+\n+/**\n      * Get list of search fields.\n      *\n      * @return list of search fields\n@@ -164,15 +165,13 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n                 String opac = this.hitModel.getSelectedCatalog();\n                 // import children\n                 if (this.importChildren) {\n-                    this.createProcessForm.setChildProcesses(ServiceManager.getImportService().getChildProcesses(\n-                            opac, this.currentRecordId, projectId, templateId, numberOfChildren));\n+                    this.createProcessForm.setChildProcesses(ServiceManager.getImportService().getChildProcesses(opac, this.currentRecordId, projectId, templateId, numberOfChildren));\n                 }\n                 // import ancestors\n                 LinkedList<TempProcess> processes = ServiceManager.getImportService().importProcessHierarchy(\n-                        this.currentRecordId, opac, projectId, templateId, this.importDepth,\n-                        this.createProcessForm.getRulesetManagement().getFunctionalKeys(\n+                        this.currentRecordId, opac, projectId, templateId, this.importDepth, this.createProcessForm.getRulesetManagement().getFunctionalKeys(\n                                 FunctionalMetadata.HIGHERLEVEL_IDENTIFIER));\n-                this.createProcessForm.setProcesses(processes);\n+this.createProcessForm.setProcesses(processes);\n \n                 // Fill metadata fields in metadata tab with metadata values of first process on successful import\n                 if (!processes.isEmpty() && processes.getFirst().getMetadataNodes().getLength() > 0) {\n@@ -328,4 +327,4 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n         return Helper.getTranslation(\"newProcess.catalogueSearch.manyChildrenWarning\",\n                 Collections.singletonList(String.valueOf(this.numberOfChildren)));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "176",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 183).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "179",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 286).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "195",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "199",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 247).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "210",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 152).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "298",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "300",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "304",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "342",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 153).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/16/CatalogImportDialog.java\nindex 69b0507da5d..742c52e1f86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/16/CatalogImportDialog.java\n@@ -20,11 +20,9 @@ import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.Objects;\n-\n import javax.faces.context.FacesContext;\n import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.xpath.XPathExpressionException;\n-\n import org.apache.commons.lang.StringUtils;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n@@ -51,14 +49,13 @@ import org.primefaces.component.datatable.DataTable;\n import org.primefaces.model.SortOrder;\n import org.xml.sax.SAXException;\n \n-public class CatalogImportDialog  extends MetadataImportDialog implements Serializable {\n+public class CatalogImportDialog extends MetadataImportDialog implements Serializable {\n+\n     private static final Logger logger = LogManager.getLogger(CatalogImportDialog.class);\n     private final LazyHitModel hitModel = new LazyHitModel();\n-\n     private static final String ID_PARAMETER_NAME = \"ID\";\n     private static final String HITSTABLE_NAME = \"hitlistDialogForm:hitlistDialogTable\";\n     private static final int NUMBER_OF_CHILDREN_WARNING_THRESHOLD = 5;\n-\n     private String currentRecordId = \"\";\n     private int importDepth = 1;\n     private boolean importChildren = false;\n@@ -70,6 +67,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @param createProcessForm CreateProcessForm instance to which this ImportTab is assigned.\n      */\n+\n+\n     CatalogImportDialog(CreateProcessForm createProcessForm) {\n         super(createProcessForm);\n     }\n@@ -77,6 +76,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n     /**\n      * Get the full record with the given ID from the catalog.\n      */\n+\n+\n     public void getSelectedRecord() {\n         this.createProcessForm.setChildProcesses(new LinkedList<>());\n         this.createProcessForm.setProcesses(new LinkedList<>());\n@@ -87,6 +88,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return list of search fields\n      */\n+\n+\n     public List<String> getSearchFields() {\n         if (this.hitModel.getSelectedCatalog().isEmpty()) {\n             return new LinkedList<>();\n@@ -103,6 +106,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n     /**\n      * Call search method of ImportService.\n      */\n+\n+\n     public void search() {\n         List<?> hits;\n         try {\n@@ -130,6 +135,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return hits\n      */\n+\n+\n     public List<SingleHit> getHits() {\n         if (Objects.nonNull(this.hitModel)) {\n             return this.hitModel.getHits();\n@@ -154,6 +161,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      * Retrieve complete record hierarchy of record from currently selected catalog, including\n      * potential child records and ancestor records.\n      */\n+\n+\n     public void getRecordHierarchy() {\n         if (StringUtils.isBlank(this.currentRecordId)) {\n             Helper.setErrorMessage(\"No record selected!\");\n@@ -164,53 +173,41 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n                 String opac = this.hitModel.getSelectedCatalog();\n                 // import children\n                 if (this.importChildren) {\n-                    this.createProcessForm.setChildProcesses(ServiceManager.getImportService().getChildProcesses(\n-                            opac, this.currentRecordId, projectId, templateId, numberOfChildren));\n+                    this.createProcessForm.setChildProcesses(ServiceManager.getImportService().getChildProcesses(opac, this.currentRecordId, projectId, templateId, numberOfChildren));\n                 }\n                 // import ancestors\n-                LinkedList<TempProcess> processes = ServiceManager.getImportService().importProcessHierarchy(\n-                        this.currentRecordId, opac, projectId, templateId, this.importDepth,\n-                        this.createProcessForm.getRulesetManagement().getFunctionalKeys(\n-                                FunctionalMetadata.HIGHERLEVEL_IDENTIFIER));\n+                LinkedList<TempProcess> processes = ServiceManager.getImportService().importProcessHierarchy(this.currentRecordId, opac, projectId, templateId, this.importDepth, this.createProcessForm.getRulesetManagement().getFunctionalKeys(FunctionalMetadata.HIGHERLEVEL_IDENTIFIER));\n                 this.createProcessForm.setProcesses(processes);\n \n                 // Fill metadata fields in metadata tab with metadata values of first process on successful import\n                 if (!processes.isEmpty() && processes.getFirst().getMetadataNodes().getLength() > 0) {\n                     TempProcess firstProcess = processes.getFirst();\n-                    this.createProcessForm.getProcessDataTab().setDocType(\n-                            firstProcess.getWorkpiece().getRootElement().getType());\n-                    Collection<Metadata> metadata = ImportService.importMetadata(firstProcess.getMetadataNodes(),\n-                            MdSec.DMD_SEC);\n+                    this.createProcessForm.getProcessDataTab().setDocType(firstProcess.getWorkpiece().getRootElement().getType());\n+                    Collection<Metadata> metadata = ImportService.importMetadata(firstProcess.getMetadataNodes(), MdSec.DMD_SEC);\n                     createProcessForm.getProcessMetadataTab().getProcessDetails().setMetadata(metadata);\n                 }\n-\n                 String summary = Helper.getTranslation(\"newProcess.catalogueSearch.importSuccessfulSummary\");\n                 String detail = Helper.getTranslation(\"newProcess.catalogueSearch.importSuccessfulDetail\",\n-                        Arrays.asList(String.valueOf(processes.size()), opac));\n+                    Arrays.asList(String.valueOf(processes.size()), opac));\n                 showGrowlMessage(summary, detail);\n-\n                 if (this.importChildren) {\n                     summary = Helper.getTranslation(\"newProcess.catalogueSearch.loadingChilrenSuccessfulSummary\");\n-                    detail = Helper.getTranslation(\"newProcess.catalogueSearch.loadingChilrenSuccessfulDetail\",\n-                            Collections.singletonList(String.valueOf(this.createProcessForm.getChildProcesses().size())));\n+                    detail = Helper.getTranslation(\"newProcess.catalogueSearch.loadingChilrenSuccessfulDetail\", Collections.singletonList(String.valueOf(this.createProcessForm.getChildProcesses().size())));\n                     showGrowlMessage(summary, detail);\n                 }\n-\n                 showRecord();\n-            } catch (IOException | ProcessGenerationException | XPathExpressionException | URISyntaxException\n-                    | ParserConfigurationException | UnsupportedFormatException | SAXException | NoRecordFoundException\n-                    | DAOException | ConfigException e) {\n+            } catch (IOException | ProcessGenerationException | XPathExpressionException | URISyntaxException | ParserConfigurationException | UnsupportedFormatException | SAXException | NoRecordFoundException | DAOException | ConfigException e) {\n                 Helper.setErrorMessage(e.getLocalizedMessage(), logger, e);\n             }\n         }\n     }\n \n+\n     private void getRecordById(String recordId) {\n         this.currentRecordId = recordId;\n         try {\n             if (this.importChildren) {\n-                this.numberOfChildren = ServiceManager.getImportService().getNumberOfChildren(\n-                        this.hitModel.getSelectedCatalog(), this.currentRecordId);\n+                this.numberOfChildren = ServiceManager.getImportService().getNumberOfChildren(this.hitModel.getSelectedCatalog(), this.currentRecordId);\n             }\n             if (this.importChildren && this.numberOfChildren > NUMBER_OF_CHILDREN_WARNING_THRESHOLD) {\n                 Ajax.update(\"manyChildrenWarningDialog\");\n@@ -228,6 +225,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return LazyHitModel of this ImportTab\n      */\n+\n+\n     public LazyHitModel getHitModel() {\n         return this.hitModel;\n     }\n@@ -237,6 +236,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return import depth\n      */\n+\n+\n     public int getImportDepth() {\n         return importDepth;\n     }\n@@ -246,6 +247,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @param depth import depth\n      */\n+\n+\n     public void setImportDepth(int depth) {\n         importDepth = depth;\n     }\n@@ -255,6 +258,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return import children\n      */\n+\n+\n     public boolean isImportChildren() {\n         return importChildren;\n     }\n@@ -264,6 +269,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @param childImport import children\n      */\n+\n+\n     public void setImportChildren(boolean childImport) {\n         this.importChildren = childImport;\n     }\n@@ -273,6 +280,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return value of exemplarRecords\n      */\n+\n+\n     public LinkedList<ExemplarRecord> getExemplarRecords() {\n         return ServiceManager.getImportService().getExemplarRecords();\n     }\n@@ -282,18 +291,17 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @param selectedExemplarRecord as org.kitodo.api.schemaconverter.ExemplarRecord\n      */\n+\n+\n     public void setSelectedExemplarRecord(ExemplarRecord selectedExemplarRecord) {\n         try {\n-            ImportService.setSelectedExemplarRecord(selectedExemplarRecord, this.hitModel.getSelectedCatalog(),\n-                    this.createProcessForm.getProcessMetadataTab().getProcessDetailsElements());\n+            ImportService.setSelectedExemplarRecord(selectedExemplarRecord, this.hitModel.getSelectedCatalog(), this.createProcessForm.getProcessMetadataTab().getProcessDetailsElements());\n             String summary = Helper.getTranslation(\"newProcess.catalogueSearch.exemplarRecordSelectedSummary\");\n-            String detail = Helper.getTranslation(\"newProcess.catalogueSearch.exemplarRecordSelectedDetail\",\n-                    Arrays.asList(selectedExemplarRecord.getOwner(), selectedExemplarRecord.getSignature()));\n+            String detail = Helper.getTranslation(\"newProcess.catalogueSearch.exemplarRecordSelectedDetail\", Arrays.asList(selectedExemplarRecord.getOwner(), selectedExemplarRecord.getSignature()));\n             showGrowlMessage(summary, detail);\n             Ajax.update(FORM_CLIENTID);\n         } catch (ParameterNotFoundException e) {\n-            Helper.setErrorMessage(\"newProcess.catalogueSearch.exemplarRecordParameterNotFoundError\",\n-                    new Object[] {e.getMessage(), this.hitModel.getSelectedCatalog() });\n+            Helper.setErrorMessage(\"newProcess.catalogueSearch.exemplarRecordParameterNotFoundError\", new Object[] {e.getMessage(), this.hitModel.getSelectedCatalog() });\n         }\n     }\n \n@@ -302,6 +310,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return whether \"parentElement\" is configured for current OPAC\n      */\n+\n+\n     public boolean isParentElementConfigured() {\n         try {\n             return ServiceManager.getImportService().isParentElementConfigured(this.hitModel.getSelectedCatalog());\n@@ -315,6 +325,8 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return OPAC error message\n      */\n+\n+\n     public String getOpacErrorMessage() {\n         return this.opacErrorMessage;\n     }\n@@ -324,8 +336,9 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return warning about high number of child processes to be imported\n      */\n+\n+\n     public String getNumberOfChildProcessesWarning() {\n-        return Helper.getTranslation(\"newProcess.catalogueSearch.manyChildrenWarning\",\n-                Collections.singletonList(String.valueOf(this.numberOfChildren)));\n+        return Helper.getTranslation(\"newProcess.catalogueSearch.manyChildrenWarning\", Collections.singletonList(String.valueOf(this.numberOfChildren)));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 69
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/16/CatalogImportDialog.java\nindex 69b0507da5d..1a19f1820fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/16/CatalogImportDialog.java\n@@ -87,6 +87,7 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return list of search fields\n      */\n+\n     public List<String> getSearchFields() {\n         if (this.hitModel.getSelectedCatalog().isEmpty()) {\n             return new LinkedList<>();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/16/CatalogImportDialog.java\nindex 69b0507da5d..1a19f1820fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/16/CatalogImportDialog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/16/CatalogImportDialog.java\n@@ -87,6 +87,7 @@ public class CatalogImportDialog  extends MetadataImportDialog implements Serial\n      *\n      * @return list of search fields\n      */\n+\n     public List<String> getSearchFields() {\n         if (this.hitModel.getSelectedCatalog().isEmpty()) {\n             return new LinkedList<>();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}