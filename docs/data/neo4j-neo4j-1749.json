{
    "project_name": "neo4j-neo4j",
    "error_id": "1749",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "149",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "105",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1749/IndexEntryConflictException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1749/IndexEntryConflictException.java\nindex 28db1ff5a5f..a36427a0603 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1749/IndexEntryConflictException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1749/IndexEntryConflictException.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.exceptions.index;\n \n import java.util.Arrays;\n@@ -41,43 +42,42 @@ public class IndexEntryConflictException extends KernelException\n     /**\n      * Make IOUtils happy\n      */\n-    public IndexEntryConflictException( String message, Throwable cause )\n+    public IndexEntryConflictException(String message, Throwable cause)\n     {\n-        super( Status.Schema.ConstraintViolation, message, cause );\n+        super(Status.Schema.ConstraintViolation, message, cause);\n         propertyValues = null;\n         addedNodeId = -1;\n         existingNodeId = -1;\n     }\n \n-    public IndexEntryConflictException( long existingNodeId, long addedNodeId, Value... propertyValue )\n+    public IndexEntryConflictException(long existingNodeId, long addedNodeId, Value... propertyValue)\n     {\n-        this( existingNodeId, addedNodeId, ValueTuple.of( propertyValue ) );\n+        this(existingNodeId, addedNodeId, ValueTuple.of(propertyValue));\n     }\n \n-    public IndexEntryConflictException( long existingNodeId, long addedNodeId, ValueTuple propertyValues )\n+    public IndexEntryConflictException(long existingNodeId, long addedNodeId, ValueTuple propertyValues)\n     {\n-        super( Status.Schema.ConstraintViolation, \"Both node %d and node %d share the property value %s\", existingNodeId, addedNodeId, propertyValues );\n+        super(Status.Schema.ConstraintViolation, \"Both node %d and node %d share the property value %s\", existingNodeId, addedNodeId, propertyValues);\n         this.existingNodeId = existingNodeId;\n         this.addedNodeId = addedNodeId;\n         this.propertyValues = propertyValues;\n     }\n \n-    public String evidenceMessage( TokenNameLookup tokenNameLookup, SchemaDescriptor schema )\n+    public String evidenceMessage(TokenNameLookup tokenNameLookup, SchemaDescriptor schema)\n     {\n         assert schema.getPropertyIds().length == propertyValues.size();\n \n-        String labelName = Arrays.stream( schema.getEntityTokenIds() )\n-                .mapToObj( tokenNameLookup::labelGetName )\n-                .collect( Collectors.joining( \"`, `\", \"`\", \"`\") );\n-        if ( addedNodeId == NO_SUCH_NODE )\n+        String labelName = Arrays.stream(schema.getEntityTokenIds())\n+          .mapToObj(tokenNameLookup::labelGetName)\n+          .collect(Collectors.joining(\"`, `\", \"`\", \"`\"));\n+        if (addedNodeId == NO_SUCH_NODE)\n         {\n-            return format( \"Node(%d) already exists with label %s and %s\",\n-                    existingNodeId, labelName, propertyString( tokenNameLookup, schema.getPropertyIds() ) );\n-        }\n-        else\n+            return format(\"Node(%d) already exists with label %s and %s\",\n+              existingNodeId, labelName, propertyString(tokenNameLookup, schema.getPropertyIds()));\n+        } else\n         {\n-            return format( \"Both Node(%d) and Node(%d) have the label %s and %s\",\n-                    existingNodeId, addedNodeId, labelName, propertyString( tokenNameLookup, schema.getPropertyIds() ) );\n+            return format(\"Both Node(%d) and Node(%d) have the label %s and %s\",\n+              existingNodeId, addedNodeId, labelName, propertyString(tokenNameLookup, schema.getPropertyIds()));\n         }\n     }\n \n@@ -102,13 +102,13 @@ public class IndexEntryConflictException extends KernelException\n     }\n \n     @Override\n-    public boolean equals( Object o )\n+    public boolean equals(Object o)\n     {\n-        if ( this == o )\n+        if (this == o)\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+        if (o == null || getClass() != o.getClass())\n         {\n             return false;\n         }\n@@ -116,8 +116,8 @@ public class IndexEntryConflictException extends KernelException\n         IndexEntryConflictException that = (IndexEntryConflictException) o;\n \n         return addedNodeId == that.addedNodeId &&\n-                existingNodeId == that.existingNodeId &&\n-                !(propertyValues != null ? !propertyValues.equals( that.propertyValues ) : that.propertyValues != null);\n+          existingNodeId == that.existingNodeId &&\n+          !(propertyValues != null ? !propertyValues.equals(that.propertyValues) : that.propertyValues != null);\n     }\n \n     @Override\n@@ -133,24 +133,24 @@ public class IndexEntryConflictException extends KernelException\n     public String toString()\n     {\n         return \"IndexEntryConflictException{\" +\n-                \"propertyValues=\" + propertyValues +\n-                \", addedNodeId=\" + addedNodeId +\n-                \", existingNodeId=\" + existingNodeId +\n-                '}';\n+          \"propertyValues=\" + propertyValues +\n+          \", addedNodeId=\" + addedNodeId +\n+          \", existingNodeId=\" + existingNodeId +\n+          '}';\n     }\n \n-    private String propertyString( TokenNameLookup tokenNameLookup, int[] propertyIds )\n+    private String propertyString(TokenNameLookup tokenNameLookup, int[] propertyIds)\n     {\n         StringBuilder sb = new StringBuilder();\n         String sep = propertyIds.length > 1 ? \"properties \" : \"property \";\n-        for ( int i = 0; i < propertyIds.length; i++ )\n+        for (int i = 0; i < propertyIds.length; i++)\n         {\n-            sb.append( sep );\n+            sb.append(sep);\n             sep = \", \";\n-            sb.append( '`' );\n-            sb.append( tokenNameLookup.propertyKeyGetName( propertyIds[i] ) );\n-            sb.append( \"` = \" );\n-            sb.append( propertyValues.valueAt( i ).prettyPrint() );\n+            sb.append('`');\n+            sb.append(tokenNameLookup.propertyKeyGetName(propertyIds[i]));\n+            sb.append(\"` = \");\n+            sb.append(propertyValues.valueAt(i).prettyPrint());\n         }\n         return sb.toString();\n     }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1749/IndexEntryConflictException.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1749/IndexEntryConflictException.java\nindex 28db1ff5a5f..e4ac1964b86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1749/IndexEntryConflictException.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1749/IndexEntryConflictException.java\n@@ -154,4 +154,4 @@ public class IndexEntryConflictException extends KernelException\n         }\n         return sb.toString();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}