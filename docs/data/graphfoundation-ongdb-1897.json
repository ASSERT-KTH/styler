{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1897",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "59",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "129",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "234",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "314",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "358",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1897/FibonacciHeap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1897/FibonacciHeap.java\nindex 6342595567d..c60d1437162 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1897/FibonacciHeap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1897/FibonacciHeap.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import java.util.ArrayList;\n@@ -34,344 +35,339 @@ import java.util.List;\n  * KeyType parameter, all it needs is a comparator for that type. To achieve the\n  * stated running times, it is needed that this comparator can do comparisons in\n  * constant time (usually the case).\n+ *\n+ * @param <KeyType> The datatype to be stored in this heap.\n  * @author Patrik Larsson\n- * @param <KeyType>\n- *            The datatype to be stored in this heap.\n  */\n public class FibonacciHeap<KeyType>\n {\n+  /**\n+   * One entry in the fibonacci heap is stored as an instance of this class.\n+   * References to such entries are required for some operations, like\n+   * decreaseKey().\n+   */\n+  public class FibonacciHeapNode\n+  {\n+    FibonacciHeapNode left;\n+    FibonacciHeapNode right;\n+    FibonacciHeapNode parent;\n+    FibonacciHeapNode child;\n+    boolean marked;\n+    KeyType key;\n+    int degree;\n+\n+    public FibonacciHeapNode(KeyType key)\n+    {\n+      super();\n+      this.key = key;\n+      left = this;\n+      right = this;\n+    }\n+\n     /**\n-     * One entry in the fibonacci heap is stored as an instance of this class.\n-     * References to such entries are required for some operations, like\n-     * decreaseKey().\n+     * @return the key\n      */\n-    public class FibonacciHeapNode\n+    public KeyType getKey()\n     {\n-        FibonacciHeapNode left;\n-        FibonacciHeapNode right;\n-        FibonacciHeapNode parent;\n-        FibonacciHeapNode child;\n-        boolean marked;\n-        KeyType key;\n-        int degree;\n+      return key;\n+    }\n+  }\n \n-        public FibonacciHeapNode( KeyType key )\n-        {\n-            super();\n-            this.key = key;\n-            left = this;\n-            right = this;\n-        }\n+  Comparator<KeyType> keyComparator;\n+  FibonacciHeapNode minimum;\n+  int nrNodes;\n \n-        /**\n-         * @return the key\n-         */\n-        public KeyType getKey()\n-        {\n-            return key;\n-        }\n-    }\n+  public FibonacciHeap(Comparator<KeyType> keyComparator)\n+  {\n+    super();\n+    this.keyComparator = keyComparator;\n+  }\n \n-    Comparator<KeyType> keyComparator;\n-    FibonacciHeapNode minimum;\n-    int nrNodes;\n+  /**\n+   * @return True if the heap is empty.\n+   */\n+  public boolean isEmpty()\n+  {\n+    return minimum == null;\n+  }\n \n-    public FibonacciHeap( Comparator<KeyType> keyComparator )\n+  /**\n+   * @return The number of entries in this heap.\n+   */\n+  public int size()\n+  {\n+    return nrNodes;\n+  }\n+\n+  /**\n+   * @return The entry with the highest priority or null if the heap is empty.\n+   */\n+  public FibonacciHeapNode getMinimum()\n+  {\n+    return minimum;\n+  }\n+\n+  /**\n+   * Internal helper function for moving nodes into the root list\n+   */\n+  protected void insertInRootList(FibonacciHeapNode fNode)\n+  {\n+    fNode.parent = null;\n+    fNode.marked = false;\n+    if (minimum == null)\n+    {\n+      minimum = fNode;\n+      minimum.right = minimum;\n+      minimum.left = minimum;\n+    } else\n     {\n-        super();\n-        this.keyComparator = keyComparator;\n+      // insert in root list\n+      fNode.left = minimum.left;\n+      fNode.right = minimum;\n+      fNode.left.right = fNode;\n+      fNode.right.left = fNode;\n+      if (keyComparator.compare(fNode.key, minimum.key) < 0)\n+      {\n+        minimum = fNode;\n+      }\n     }\n+  }\n \n-    /**\n-     * @return True if the heap is empty.\n-     */\n-    public boolean isEmpty()\n+  /**\n+   * Inserts a new value into the heap.\n+   *\n+   * @param key the value to be inserted.\n+   * @return The entry made into the heap.\n+   */\n+  public FibonacciHeapNode insert(KeyType key)\n+  {\n+    FibonacciHeapNode node = new FibonacciHeapNode(key);\n+    insertInRootList(node);\n+    ++nrNodes;\n+    return node;\n+  }\n+\n+  /**\n+   * Creates the union of two heaps by absorbing the other into this one.\n+   * Note: Destroys other\n+   */\n+  public void union(FibonacciHeap<KeyType> other)\n+  {\n+    nrNodes += other.nrNodes;\n+    if (other.minimum == null)\n     {\n-        return minimum == null;\n+      return;\n     }\n-\n-    /**\n-     * @return The number of entries in this heap.\n-     */\n-    public int size()\n+    if (minimum == null)\n     {\n-        return nrNodes;\n+      minimum = other.minimum;\n+      return;\n     }\n-\n-    /**\n-     * @return The entry with the highest priority or null if the heap is empty.\n-     */\n-    public FibonacciHeapNode getMinimum()\n+    // swap left nodes\n+    FibonacciHeapNode otherLeft = other.minimum.left;\n+    other.minimum.left = minimum.left;\n+    minimum.left = otherLeft;\n+    // update their right pointers\n+    minimum.left.right = minimum;\n+    other.minimum.left.right = other.minimum;\n+    // get min\n+    if (keyComparator.compare(other.minimum.key, minimum.key) < 0)\n     {\n-        return minimum;\n+      minimum = other.minimum;\n     }\n+  }\n \n-    /**\n-     * Internal helper function for moving nodes into the root list\n-     */\n-    protected void insertInRootList( FibonacciHeapNode fNode )\n+  /**\n+   * This removes and returns the entry with the highest priority.\n+   *\n+   * @return The value with the highest priority.\n+   */\n+  public KeyType extractMin()\n+  {\n+    if (minimum == null)\n     {\n-        fNode.parent = null;\n-        fNode.marked = false;\n-        if ( minimum == null )\n-        {\n-            minimum = fNode;\n-            minimum.right = minimum;\n-            minimum.left = minimum;\n-        }\n-        else\n-        {\n-            // insert in root list\n-            fNode.left = minimum.left;\n-            fNode.right = minimum;\n-            fNode.left.right = fNode;\n-            fNode.right.left = fNode;\n-            if ( keyComparator.compare( fNode.key, minimum.key ) < 0 )\n-            {\n-                minimum = fNode;\n-            }\n-        }\n+      return null;\n     }\n-\n-    /**\n-     * Inserts a new value into the heap.\n-     * @param key\n-     *            the value to be inserted.\n-     * @return The entry made into the heap.\n-     */\n-    public FibonacciHeapNode insert( KeyType key )\n+    FibonacciHeapNode minNode = minimum;\n+    // move all children to root list\n+    if (minNode.child != null)\n     {\n-        FibonacciHeapNode node = new FibonacciHeapNode( key );\n-        insertInRootList( node );\n-        ++nrNodes;\n-        return node;\n+      FibonacciHeapNode child = minNode.child;\n+      while (minNode.equals(child.parent))\n+      {\n+        FibonacciHeapNode nextChild = child.right;\n+        insertInRootList(child);\n+        child = nextChild;\n+      }\n     }\n-\n-    /**\n-     * Creates the union of two heaps by absorbing the other into this one.\n-     * Note: Destroys other\n-     */\n-    public void union( FibonacciHeap<KeyType> other )\n+    // remove minNode from root list\n+    minNode.left.right = minNode.right;\n+    minNode.right.left = minNode.left;\n+    // update minimum\n+    if (minNode.right.equals(minNode))\n     {\n-        nrNodes += other.nrNodes;\n-        if ( other.minimum == null )\n-        {\n-            return;\n-        }\n-        if ( minimum == null )\n-        {\n-            minimum = other.minimum;\n-            return;\n-        }\n-        // swap left nodes\n-        FibonacciHeapNode otherLeft = other.minimum.left;\n-        other.minimum.left = minimum.left;\n-        minimum.left = otherLeft;\n-        // update their right pointers\n-        minimum.left.right = minimum;\n-        other.minimum.left.right = other.minimum;\n-        // get min\n-        if ( keyComparator.compare( other.minimum.key, minimum.key ) < 0 )\n-        {\n-            minimum = other.minimum;\n-        }\n+      minimum = null;\n+    } else\n+    {\n+      minimum = minimum.right;\n+      consolidate();\n     }\n+    --nrNodes;\n+    return minNode.key;\n+  }\n \n-    /**\n-     * This removes and returns the entry with the highest priority.\n-     * @return The value with the highest priority.\n-     */\n-    public KeyType extractMin()\n+  /**\n+   * Internal helper function.\n+   */\n+  protected void consolidate()\n+  {\n+    // TODO: lower the size of this (log(n))\n+    int arraySize = nrNodes + 1;\n+    // arraySize = 2;\n+    // for ( int a = nrNodes + 1; a < 0; a /= 2 )\n+    // {\n+    // arraySize++;\n+    // }\n+    // arraySize = (int) Math.log( (double) nrNodes )+1;\n+    // FibonacciHeapNode[] A = (FibonacciHeapNode[]) new Object[arraySize];\n+    // FibonacciHeapNode[] A = new FibonacciHeapNode[arraySize];\n+    ArrayList<FibonacciHeapNode> nodes = new ArrayList<>(arraySize);\n+    for (int i = 0; i < arraySize; ++i)\n     {\n-        if ( minimum == null )\n-        {\n-            return null;\n-        }\n-        FibonacciHeapNode minNode = minimum;\n-        // move all children to root list\n-        if ( minNode.child != null )\n-        {\n-            FibonacciHeapNode child = minNode.child;\n-            while ( minNode.equals( child.parent ) )\n-            {\n-                FibonacciHeapNode nextChild = child.right;\n-                insertInRootList( child );\n-                child = nextChild;\n-            }\n-        }\n-        // remove minNode from root list\n-        minNode.left.right = minNode.right;\n-        minNode.right.left = minNode.left;\n-        // update minimum\n-        if ( minNode.right.equals( minNode ) )\n-        {\n-            minimum = null;\n-        }\n-        else\n-        {\n-            minimum = minimum.right;\n-            consolidate();\n-        }\n-        --nrNodes;\n-        return minNode.key;\n+      nodes.add(null);\n     }\n-\n-    /**\n-     * Internal helper function.\n-     */\n-    protected void consolidate()\n+    List<FibonacciHeapNode> rootNodes = new LinkedList<>();\n+    rootNodes.add(minimum);\n+    for (FibonacciHeapNode n = minimum.right; !n.equals(minimum); n = n.right)\n     {\n-        // TODO: lower the size of this (log(n))\n-        int arraySize = nrNodes + 1;\n-        // arraySize = 2;\n-        // for ( int a = nrNodes + 1; a < 0; a /= 2 )\n-        // {\n-        // arraySize++;\n-        // }\n-        // arraySize = (int) Math.log( (double) nrNodes )+1;\n-        // FibonacciHeapNode[] A = (FibonacciHeapNode[]) new Object[arraySize];\n-        // FibonacciHeapNode[] A = new FibonacciHeapNode[arraySize];\n-        ArrayList<FibonacciHeapNode> nodes = new ArrayList<>( arraySize );\n-        for ( int i = 0; i < arraySize; ++i )\n-        {\n-            nodes.add( null );\n-        }\n-        List<FibonacciHeapNode> rootNodes = new LinkedList<>();\n-        rootNodes.add( minimum );\n-        for ( FibonacciHeapNode n = minimum.right; !n.equals( minimum ); n = n.right )\n-        {\n-            rootNodes.add( n );\n-        }\n-        for ( FibonacciHeapNode node : rootNodes )\n-        {\n-            // no longer a root node?\n-            if ( node.parent != null )\n-            {\n-                continue;\n-            }\n-            int d = node.degree;\n-            while ( nodes.get( d ) != null )\n-            {\n-                FibonacciHeapNode y = nodes.get( d );\n-                // swap?\n-                if ( keyComparator.compare( node.key, y.key ) > 0 )\n-                {\n-                    FibonacciHeapNode tmp = node;\n-                    node = y;\n-                    y = tmp;\n-                }\n-                link( y, node );\n-                nodes.set( d, null );\n-                ++d;\n-            }\n-            nodes.set( d, node );\n-        }\n-        // throw away the root list\n-        minimum = null;\n-        // and rebuild it from A\n-        for ( FibonacciHeapNode node : nodes )\n+      rootNodes.add(n);\n+    }\n+    for (FibonacciHeapNode node : rootNodes)\n+    {\n+      // no longer a root node?\n+      if (node.parent != null)\n+      {\n+        continue;\n+      }\n+      int d = node.degree;\n+      while (nodes.get(d) != null)\n+      {\n+        FibonacciHeapNode y = nodes.get(d);\n+        // swap?\n+        if (keyComparator.compare(node.key, y.key) > 0)\n         {\n-            if ( node != null )\n-            {\n-                insertInRootList( node );\n-            }\n+          FibonacciHeapNode tmp = node;\n+          node = y;\n+          y = tmp;\n         }\n+        link(y, node);\n+        nodes.set(d, null);\n+        ++d;\n+      }\n+      nodes.set(d, node);\n+    }\n+    // throw away the root list\n+    minimum = null;\n+    // and rebuild it from A\n+    for (FibonacciHeapNode node : nodes)\n+    {\n+      if (node != null)\n+      {\n+        insertInRootList(node);\n+      }\n     }\n+  }\n \n-    /**\n-     * Internal helper function. Makes root node y a child of root node x.\n-     */\n-    protected void link( FibonacciHeapNode y, FibonacciHeapNode x )\n+  /**\n+   * Internal helper function. Makes root node y a child of root node x.\n+   */\n+  protected void link(FibonacciHeapNode y, FibonacciHeapNode x)\n+  {\n+    // remove y from root list\n+    y.left.right = y.right;\n+    y.right.left = y.left;\n+    // make y a child of x\n+    if (x.child == null) // no previous children?\n     {\n-        // remove y from root list\n-        y.left.right = y.right;\n-        y.right.left = y.left;\n-        // make y a child of x\n-        if ( x.child == null ) // no previous children?\n-        {\n-            y.right = y;\n-            y.left = y;\n-        }\n-        else\n-        {\n-            y.left = x.child.left;\n-            y.right = x.child;\n-            y.right.left = y;\n-            y.left.right = y;\n-        }\n-        x.child = y;\n-        y.parent = x;\n-        // adjust degree and mark\n-        x.degree++;\n-        y.marked = false;\n+      y.right = y;\n+      y.left = y;\n+    } else\n+    {\n+      y.left = x.child.left;\n+      y.right = x.child;\n+      y.right.left = y;\n+      y.left.right = y;\n     }\n+    x.child = y;\n+    y.parent = x;\n+    // adjust degree and mark\n+    x.degree++;\n+    y.marked = false;\n+  }\n \n-    /**\n-     * Raises the priority for an entry.\n-     * @param node\n-     *            The entry to recieve a higher priority.\n-     * @param newKey\n-     *            The new value.\n-     */\n-    public void decreaseKey( FibonacciHeapNode node, KeyType newKey )\n+  /**\n+   * Raises the priority for an entry.\n+   *\n+   * @param node   The entry to recieve a higher priority.\n+   * @param newKey The new value.\n+   */\n+  public void decreaseKey(FibonacciHeapNode node, KeyType newKey)\n+  {\n+    if (keyComparator.compare(newKey, node.key) > 0)\n     {\n-        if ( keyComparator.compare( newKey, node.key ) > 0 )\n-        {\n-            throw new RuntimeException( \"Trying to decrease to a greater key\" );\n-        }\n-        node.key = newKey;\n-        FibonacciHeapNode parent = node.parent;\n-        if ( parent != null\n-            && keyComparator.compare( node.key, parent.key ) < 0 )\n-        {\n-            cut( node, parent );\n-            cascadingCut( parent );\n-        }\n-        if ( keyComparator.compare( node.key, minimum.key ) < 0 )\n-        {\n-            minimum = node;\n-        }\n+      throw new RuntimeException(\"Trying to decrease to a greater key\");\n+    }\n+    node.key = newKey;\n+    FibonacciHeapNode parent = node.parent;\n+    if (parent != null\n+        && keyComparator.compare(node.key, parent.key) < 0)\n+    {\n+      cut(node, parent);\n+      cascadingCut(parent);\n+    }\n+    if (keyComparator.compare(node.key, minimum.key) < 0)\n+    {\n+      minimum = node;\n     }\n+  }\n \n-    /**\n-     * Internal helper function. This removes y's child x and moves x to the\n-     * root list.\n-     */\n-    protected void cut( FibonacciHeapNode x, FibonacciHeapNode y )\n+  /**\n+   * Internal helper function. This removes y's child x and moves x to the\n+   * root list.\n+   */\n+  protected void cut(FibonacciHeapNode x, FibonacciHeapNode y)\n+  {\n+    // remove x from child list of y\n+    x.left.right = x.right;\n+    x.right.left = x.left;\n+    if (x.right.equals(x))\n     {\n-        // remove x from child list of y\n-        x.left.right = x.right;\n-        x.right.left = x.left;\n-        if ( x.right.equals( x ) )\n-        {\n-            y.child = null;\n-        }\n-        else\n-        {\n-            y.child = x.right;\n-        }\n-        y.degree--;\n-        // add x to root list\n-        insertInRootList( x );\n+      y.child = null;\n+    } else\n+    {\n+      y.child = x.right;\n     }\n+    y.degree--;\n+    // add x to root list\n+    insertInRootList(x);\n+  }\n \n-    /**\n-     * Internal helper function.\n-     */\n-    protected void cascadingCut( FibonacciHeapNode y )\n+  /**\n+   * Internal helper function.\n+   */\n+  protected void cascadingCut(FibonacciHeapNode y)\n+  {\n+    FibonacciHeapNode parent = y.parent;\n+    if (parent != null)\n     {\n-        FibonacciHeapNode parent = y.parent;\n-        if ( parent != null )\n-        {\n-            if ( !parent.marked )\n-            {\n-                parent.marked = true;\n-            }\n-            else\n-            {\n-                cut( y, parent );\n-                cascadingCut( parent );\n-            }\n-        }\n+      if (!parent.marked)\n+      {\n+        parent.marked = true;\n+      } else\n+      {\n+        cut(y, parent);\n+        cascadingCut(parent);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 449
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1897/FibonacciHeap.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1897/FibonacciHeap.java\nindex 6342595567d..379a955abcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1897/FibonacciHeap.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1897/FibonacciHeap.java\n@@ -158,7 +158,8 @@ public class FibonacciHeap<KeyType>\n         {\n             return;\n         }\n-        if ( minimum == null )\n+\n+if ( minimum == null )\n         {\n             minimum = other.minimum;\n             return;\n@@ -187,7 +188,8 @@ public class FibonacciHeap<KeyType>\n         {\n             return null;\n         }\n-        FibonacciHeapNode minNode = minimum;\n+\n+FibonacciHeapNode minNode = minimum;\n         // move all children to root list\n         if ( minNode.child != null )\n         {\n@@ -260,7 +262,8 @@ public class FibonacciHeap<KeyType>\n                     node = y;\n                     y = tmp;\n                 }\n-                link( y, node );\n+\n+link( y, node );\n                 nodes.set( d, null );\n                 ++d;\n             }\n@@ -321,13 +324,13 @@ public class FibonacciHeap<KeyType>\n         }\n         node.key = newKey;\n         FibonacciHeapNode parent = node.parent;\n-        if ( parent != null\n-            && keyComparator.compare( node.key, parent.key ) < 0 )\n-        {\n+        if ( parent != null && keyComparator.compare( node.key, parent.key ) < 0 )\n+{\n             cut( node, parent );\n             cascadingCut( parent );\n         }\n-        if ( keyComparator.compare( node.key, minimum.key ) < 0 )\n+\n+if ( keyComparator.compare( node.key, minimum.key ) < 0 )\n         {\n             minimum = node;\n         }\n@@ -374,4 +377,4 @@ public class FibonacciHeap<KeyType>\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}