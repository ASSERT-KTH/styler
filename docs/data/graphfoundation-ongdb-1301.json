{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1301",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1301/MultiClusterRoutingResultFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1301/MultiClusterRoutingResultFormat.java\nindex c46576e751c..410e5347d19 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1301/MultiClusterRoutingResultFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1301/MultiClusterRoutingResultFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.routing.multi_cluster.procedure;\n \n \n@@ -40,58 +41,58 @@ import static java.util.concurrent.TimeUnit.MILLISECONDS;\n public class MultiClusterRoutingResultFormat\n {\n \n-    private static final String DB_NAME_KEY = \"database\";\n-    private static final String ADDRESSES_KEY = \"addresses\";\n-\n-    private MultiClusterRoutingResultFormat()\n-    {\n-    }\n-\n-    static Object[] build( MultiClusterRoutingResult result )\n-    {\n-        Function<List<Endpoint>, Object[]> stringifyAddresses = es ->\n-                es.stream().map( e -> e.address().toString() ).toArray();\n-\n-        List<Map<String,Object>> response = result.routers().entrySet().stream().map( entry ->\n-        {\n-            String dbName = entry.getKey();\n-            Object[] addresses = stringifyAddresses.apply( entry.getValue() );\n-\n-            Map<String,Object> responseRow = new TreeMap<>();\n+  private static final String DB_NAME_KEY = \"database\";\n+  private static final String ADDRESSES_KEY = \"addresses\";\n \n-            responseRow.put( DB_NAME_KEY, dbName );\n-            responseRow.put( ADDRESSES_KEY, addresses );\n-\n-            return responseRow;\n-        } ).collect( Collectors.toList() );\n-\n-        long ttlSeconds = MILLISECONDS.toSeconds( result.ttlMillis() );\n-        return new Object[]{ttlSeconds, response};\n-    }\n-\n-    public static MultiClusterRoutingResult parse( Map<String,Object> record )\n-    {\n-        return parse( new Object[]{\n-                record.get( ParameterNames.TTL.parameterName() ),\n-                record.get( ParameterNames.ROUTERS.parameterName() )\n-        } );\n-    }\n-\n-    public static MultiClusterRoutingResult parse( Object[] record )\n-    {\n-        long ttlSeconds = (long) record[0];\n-        @SuppressWarnings( \"unchecked\" )\n-        List<Map<String,Object>> rows = (List<Map<String,Object>>) record[1];\n-        Map<String,List<Endpoint>> routers = parseRouters( rows );\n+  private MultiClusterRoutingResultFormat()\n+  {\n+  }\n \n-        return new MultiClusterRoutingResult( routers, ttlSeconds * 1000 );\n-    }\n+  static Object[] build(MultiClusterRoutingResult result)\n+  {\n+    Function<List<Endpoint>, Object[]> stringifyAddresses = es ->\n+        es.stream().map(e -> e.address().toString()).toArray();\n \n-    private static Map<String,List<Endpoint>> parseRouters( List<Map<String,Object>> responseRows )\n+    List<Map<String, Object>> response = result.routers().entrySet().stream().map(entry ->\n     {\n-        Function<Map<String,Object>,String> dbNameFromRow = row -> (String) row.get( DB_NAME_KEY );\n-        Function<Map<String,Object>,List<Endpoint>> endpointsFromRow =\n-                row -> parseEndpoints( (Object[]) row.get( ADDRESSES_KEY ), Role.ROUTE );\n-        return responseRows.stream().collect( Collectors.toMap( dbNameFromRow, endpointsFromRow ) );\n-    }\n+      String dbName = entry.getKey();\n+      Object[] addresses = stringifyAddresses.apply(entry.getValue());\n+\n+      Map<String, Object> responseRow = new TreeMap<>();\n+\n+      responseRow.put(DB_NAME_KEY, dbName);\n+      responseRow.put(ADDRESSES_KEY, addresses);\n+\n+      return responseRow;\n+    }).collect(Collectors.toList());\n+\n+    long ttlSeconds = MILLISECONDS.toSeconds(result.ttlMillis());\n+    return new Object[] {ttlSeconds, response};\n+  }\n+\n+  public static MultiClusterRoutingResult parse(Map<String, Object> record)\n+  {\n+    return parse(new Object[] {\n+        record.get(ParameterNames.TTL.parameterName()),\n+        record.get(ParameterNames.ROUTERS.parameterName())\n+    });\n+  }\n+\n+  public static MultiClusterRoutingResult parse(Object[] record)\n+  {\n+    long ttlSeconds = (long) record[0];\n+    @SuppressWarnings(\"unchecked\")\n+    List<Map<String, Object>> rows = (List<Map<String, Object>>) record[1];\n+    Map<String, List<Endpoint>> routers = parseRouters(rows);\n+\n+    return new MultiClusterRoutingResult(routers, ttlSeconds * 1000);\n+  }\n+\n+  private static Map<String, List<Endpoint>> parseRouters(List<Map<String, Object>> responseRows)\n+  {\n+    Function<Map<String, Object>, String> dbNameFromRow = row -> (String) row.get(DB_NAME_KEY);\n+    Function<Map<String, Object>, List<Endpoint>> endpointsFromRow =\n+        row -> parseEndpoints((Object[]) row.get(ADDRESSES_KEY), Role.ROUTE);\n+    return responseRows.stream().collect(Collectors.toMap(dbNameFromRow, endpointsFromRow));\n+  }\n }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1301/MultiClusterRoutingResultFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1301/MultiClusterRoutingResultFormat.java\nindex c46576e751c..f50a9f8b0a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1301/MultiClusterRoutingResultFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1301/MultiClusterRoutingResultFormat.java\n@@ -18,8 +18,6 @@\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n package org.neo4j.causalclustering.routing.multi_cluster.procedure;\n-\n-\n import java.util.List;\n import java.util.Map;\n import java.util.TreeMap;\n@@ -39,7 +37,6 @@ import static java.util.concurrent.TimeUnit.MILLISECONDS;\n  */\n public class MultiClusterRoutingResultFormat\n {\n-\n     private static final String DB_NAME_KEY = \"database\";\n     private static final String ADDRESSES_KEY = \"addresses\";\n \n@@ -49,20 +46,16 @@ public class MultiClusterRoutingResultFormat\n \n     static Object[] build( MultiClusterRoutingResult result )\n     {\n-        Function<List<Endpoint>, Object[]> stringifyAddresses = es ->\n-                es.stream().map( e -> e.address().toString() ).toArray();\n-\n-        List<Map<String,Object>> response = result.routers().entrySet().stream().map( entry ->\n+        Function<List<Endpoint>, Object[]> stringifyAddresses = es -> es.stream().map( e -> e.address().toString() ).toArray();\n+List<Map<String,Object>> response = result.routers().entrySet().stream().map( entry ->\n         {\n             String dbName = entry.getKey();\n             Object[] addresses = stringifyAddresses.apply( entry.getValue() );\n \n             Map<String,Object> responseRow = new TreeMap<>();\n-\n-            responseRow.put( DB_NAME_KEY, dbName );\n+responseRow.put( DB_NAME_KEY, dbName );\n             responseRow.put( ADDRESSES_KEY, addresses );\n-\n-            return responseRow;\n+return responseRow;\n         } ).collect( Collectors.toList() );\n \n         long ttlSeconds = MILLISECONDS.toSeconds( result.ttlMillis() );\n@@ -71,10 +64,7 @@ public class MultiClusterRoutingResultFormat\n \n     public static MultiClusterRoutingResult parse( Map<String,Object> record )\n     {\n-        return parse( new Object[]{\n-                record.get( ParameterNames.TTL.parameterName() ),\n-                record.get( ParameterNames.ROUTERS.parameterName() )\n-        } );\n+        return parse( new Object[]{record.get( ParameterNames.TTL.parameterName() ), record.get( ParameterNames.ROUTERS.parameterName() )} );\n     }\n \n     public static MultiClusterRoutingResult parse( Object[] record )\n@@ -83,15 +73,14 @@ public class MultiClusterRoutingResultFormat\n         @SuppressWarnings( \"unchecked\" )\n         List<Map<String,Object>> rows = (List<Map<String,Object>>) record[1];\n         Map<String,List<Endpoint>> routers = parseRouters( rows );\n-\n-        return new MultiClusterRoutingResult( routers, ttlSeconds * 1000 );\n+return new MultiClusterRoutingResult( routers, ttlSeconds * 1000 );\n     }\n \n     private static Map<String,List<Endpoint>> parseRouters( List<Map<String,Object>> responseRows )\n     {\n         Function<Map<String,Object>,String> dbNameFromRow = row -> (String) row.get( DB_NAME_KEY );\n-        Function<Map<String,Object>,List<Endpoint>> endpointsFromRow =\n+        Function<Map<String,Object>, List<Endpoint>> endpointsFromRow =\n                 row -> parseEndpoints( (Object[]) row.get( ADDRESSES_KEY ), Role.ROUTE );\n-        return responseRows.stream().collect( Collectors.toMap( dbNameFromRow, endpointsFromRow ) );\n+return responseRows.stream().collect( Collectors.toMap( dbNameFromRow, endpointsFromRow ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}