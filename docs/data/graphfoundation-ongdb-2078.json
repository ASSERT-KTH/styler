{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2078",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "75",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "129",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "117",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "120",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "154",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "158",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "162",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "165",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "170",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "228",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "234",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "243",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "159",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "290",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2078/ConstraintIndexCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2078/ConstraintIndexCreator.java\nindex 28dd797c7cd..c2bbd8f5094 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2078/ConstraintIndexCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2078/ConstraintIndexCreator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.state;\n \n import java.io.IOException;\n@@ -66,240 +67,229 @@ import static org.neo4j.kernel.impl.locking.ResourceTypes.LABEL;\n \n public class ConstraintIndexCreator\n {\n-    private final IndexingService indexingService;\n-    private final Supplier<Kernel> kernelSupplier;\n-    private final PropertyAccessor propertyAccessor;\n-    private final Log log;\n+  private final IndexingService indexingService;\n+  private final Supplier<Kernel> kernelSupplier;\n+  private final PropertyAccessor propertyAccessor;\n+  private final Log log;\n+\n+  public ConstraintIndexCreator(Supplier<Kernel> kernelSupplier, IndexingService indexingService, PropertyAccessor propertyAccessor,\n+                                LogProvider logProvider)\n+  {\n+    this.kernelSupplier = kernelSupplier;\n+    this.indexingService = indexingService;\n+    this.propertyAccessor = propertyAccessor;\n+    this.log = logProvider.getLog(ConstraintIndexCreator.class);\n+  }\n \n-    public ConstraintIndexCreator( Supplier<Kernel> kernelSupplier, IndexingService indexingService, PropertyAccessor propertyAccessor,\n-            LogProvider logProvider )\n+  /**\n+   * You MUST hold a label write lock before you call this method.\n+   * However the label write lock is temporarily released while populating the index backing the constraint.\n+   * It goes a little like this:\n+   * <ol>\n+   * <li>Prerequisite: Getting here means that there's an open schema transaction which has acquired the\n+   * LABEL WRITE lock.</li>\n+   * <li>Index schema rule which is backing the constraint is created in a nested mini-transaction\n+   * which doesn't acquire any locking, merely adds tx state and commits so that the index rule is applied\n+   * to the store, which triggers the index population</li>\n+   * <li>Release the LABEL WRITE lock</li>\n+   * <li>Await index population to complete</li>\n+   * <li>Acquire the LABEL WRITE lock (effectively blocking concurrent transactions changing\n+   * data related to this constraint, and it so happens, most other transactions as well) and verify\n+   * the uniqueness of the built index</li>\n+   * <li>Leave this method, knowing that the uniqueness constraint rule will be added to tx state\n+   * and this tx committed, which will create the uniqueness constraint</li>\n+   * </ol>\n+   * <p>\n+   * Btw providerDescriptor is allowed to be null, where default configured will be used.\n+   */\n+  public long createUniquenessConstraintIndex(KernelTransactionImplementation transaction,\n+                                              SchemaDescriptor descriptor, @Nullable IndexProvider.Descriptor providerDescriptor)\n+      throws TransactionFailureException, CreateConstraintFailureException, UniquePropertyValueValidationException, AlreadyConstrainedException\n+  {\n+    UniquenessConstraintDescriptor constraint = ConstraintDescriptorFactory.uniqueForSchema(descriptor);\n+    log.info(\"Starting constraint creation: %s.\", constraint.ownedIndexDescriptor());\n+\n+    CapableIndexReference index;\n+    SchemaRead schemaRead = transaction.schemaRead();\n+    try\n+    {\n+      index = getOrCreateUniquenessConstraintIndex(schemaRead, transaction.tokenRead(), descriptor, providerDescriptor);\n+    } catch (AlreadyConstrainedException e)\n     {\n-        this.kernelSupplier = kernelSupplier;\n-        this.indexingService = indexingService;\n-        this.propertyAccessor = propertyAccessor;\n-        this.log = logProvider.getLog( ConstraintIndexCreator.class );\n+      throw e;\n+    } catch (SchemaKernelException | IndexNotFoundKernelException e)\n+    {\n+      throw new CreateConstraintFailureException(constraint, e);\n     }\n \n-    /**\n-     * You MUST hold a label write lock before you call this method.\n-     * However the label write lock is temporarily released while populating the index backing the constraint.\n-     * It goes a little like this:\n-     * <ol>\n-     * <li>Prerequisite: Getting here means that there's an open schema transaction which has acquired the\n-     * LABEL WRITE lock.</li>\n-     * <li>Index schema rule which is backing the constraint is created in a nested mini-transaction\n-     * which doesn't acquire any locking, merely adds tx state and commits so that the index rule is applied\n-     * to the store, which triggers the index population</li>\n-     * <li>Release the LABEL WRITE lock</li>\n-     * <li>Await index population to complete</li>\n-     * <li>Acquire the LABEL WRITE lock (effectively blocking concurrent transactions changing\n-     * data related to this constraint, and it so happens, most other transactions as well) and verify\n-     * the uniqueness of the built index</li>\n-     * <li>Leave this method, knowing that the uniqueness constraint rule will be added to tx state\n-     * and this tx committed, which will create the uniqueness constraint</li>\n-     * </ol>\n-     *\n-     * Btw providerDescriptor is allowed to be null, where default configured will be used.\n-     */\n-    public long createUniquenessConstraintIndex( KernelTransactionImplementation transaction,\n-            SchemaDescriptor descriptor, @Nullable IndexProvider.Descriptor providerDescriptor )\n-            throws TransactionFailureException, CreateConstraintFailureException, UniquePropertyValueValidationException, AlreadyConstrainedException\n+    boolean success = false;\n+    boolean reacquiredLabelLock = false;\n+    Client locks = transaction.statementLocks().pessimistic();\n+    try\n     {\n-        UniquenessConstraintDescriptor constraint = ConstraintDescriptorFactory.uniqueForSchema( descriptor );\n-        log.info( \"Starting constraint creation: %s.\", constraint.ownedIndexDescriptor() );\n-\n-        CapableIndexReference index;\n-        SchemaRead schemaRead = transaction.schemaRead();\n-        try\n-        {\n-            index = getOrCreateUniquenessConstraintIndex( schemaRead, transaction.tokenRead(), descriptor, providerDescriptor );\n-        }\n-        catch ( AlreadyConstrainedException e )\n-        {\n-            throw e;\n-        }\n-        catch ( SchemaKernelException | IndexNotFoundKernelException e )\n-        {\n-            throw new CreateConstraintFailureException( constraint, e );\n-        }\n-\n-        boolean success = false;\n-        boolean reacquiredLabelLock = false;\n-        Client locks = transaction.statementLocks().pessimistic();\n-        try\n-        {\n-            long indexId = schemaRead.indexGetCommittedId( index );\n-            IndexProxy proxy = indexingService.getIndexProxy( indexId );\n+      long indexId = schemaRead.indexGetCommittedId(index);\n+      IndexProxy proxy = indexingService.getIndexProxy(indexId);\n \n-            // Release the LABEL WRITE lock during index population.\n-            // At this point the integrity of the constraint to be created was checked\n-            // while holding the lock and the index rule backing the soon-to-be-created constraint\n-            // has been created. Now it's just the population left, which can take a long time\n-            releaseLabelLock( locks, descriptor.keyId() );\n+      // Release the LABEL WRITE lock during index population.\n+      // At this point the integrity of the constraint to be created was checked\n+      // while holding the lock and the index rule backing the soon-to-be-created constraint\n+      // has been created. Now it's just the population left, which can take a long time\n+      releaseLabelLock(locks, descriptor.keyId());\n \n-            awaitConstrainIndexPopulation( constraint, proxy );\n-            log.info( \"Constraint %s populated, starting verification.\", constraint.ownedIndexDescriptor() );\n+      awaitConstrainIndexPopulation(constraint, proxy);\n+      log.info(\"Constraint %s populated, starting verification.\", constraint.ownedIndexDescriptor());\n \n-            // Index population was successful, but at this point we don't know if the uniqueness constraint holds.\n-            // Acquire LABEL WRITE lock and verify the constraints here in this user transaction\n-            // and if everything checks out then it will be held until after the constraint has been\n-            // created and activated.\n-            acquireLabelLock( transaction, locks, descriptor.keyId() );\n-            reacquiredLabelLock = true;\n+      // Index population was successful, but at this point we don't know if the uniqueness constraint holds.\n+      // Acquire LABEL WRITE lock and verify the constraints here in this user transaction\n+      // and if everything checks out then it will be held until after the constraint has been\n+      // created and activated.\n+      acquireLabelLock(transaction, locks, descriptor.keyId());\n+      reacquiredLabelLock = true;\n \n-            indexingService.getIndexProxy( indexId ).verifyDeferredConstraints( propertyAccessor );\n-            log.info( \"Constraint %s verified.\", constraint.ownedIndexDescriptor() );\n+      indexingService.getIndexProxy(indexId).verifyDeferredConstraints(propertyAccessor);\n+      log.info(\"Constraint %s verified.\", constraint.ownedIndexDescriptor());\n \n-            success = true;\n-            return indexId;\n-        }\n-        catch ( SchemaKernelException e )\n-        {\n-            throw new IllegalStateException(\n-                    String.format( \"Index (%s) that we just created does not exist.\", descriptor ), e );\n-        }\n-        catch ( IndexNotFoundKernelException e )\n-        {\n-            throw new TransactionFailureException(\n-                    String.format( \"Index (%s) that we just created does not exist.\", descriptor ), e );\n-        }\n-        catch ( IndexEntryConflictException e )\n-        {\n-            throw new UniquePropertyValueValidationException( constraint, VERIFICATION, e );\n-        }\n-        catch ( InterruptedException | IOException e )\n+      success = true;\n+      return indexId;\n+    } catch (SchemaKernelException e)\n+    {\n+      throw new IllegalStateException(\n+          String.format(\"Index (%s) that we just created does not exist.\", descriptor), e);\n+    } catch (IndexNotFoundKernelException e)\n+    {\n+      throw new TransactionFailureException(\n+          String.format(\"Index (%s) that we just created does not exist.\", descriptor), e);\n+    } catch (IndexEntryConflictException e)\n+    {\n+      throw new UniquePropertyValueValidationException(constraint, VERIFICATION, e);\n+    } catch (InterruptedException | IOException e)\n+    {\n+      throw new CreateConstraintFailureException(constraint, e);\n+    } finally\n+    {\n+      if (!success)\n+      {\n+        if (!reacquiredLabelLock)\n         {\n-            throw new CreateConstraintFailureException( constraint, e );\n+          acquireLabelLock(transaction, locks, descriptor.keyId());\n         }\n-        finally\n-        {\n-            if ( !success )\n-            {\n-                if ( !reacquiredLabelLock )\n-                {\n-                    acquireLabelLock( transaction, locks, descriptor.keyId() );\n-                }\n \n-                if ( indexStillExists( schemaRead, descriptor, index ) )\n-                {\n-                    dropUniquenessConstraintIndex( asDescriptor( index ) );\n-                }\n-            }\n+        if (indexStillExists(schemaRead, descriptor, index))\n+        {\n+          dropUniquenessConstraintIndex(asDescriptor(index));\n         }\n+      }\n     }\n+  }\n \n-    private boolean indexStillExists( SchemaRead schemaRead, SchemaDescriptor descriptor,\n-            CapableIndexReference index )\n-    {\n-        CapableIndexReference existingIndex = schemaRead.index( descriptor.keyId(), descriptor.getPropertyIds() );\n-        return existingIndex != CapableIndexReference.NO_INDEX && existingIndex.equals( index );\n-    }\n+  private boolean indexStillExists(SchemaRead schemaRead, SchemaDescriptor descriptor,\n+                                   CapableIndexReference index)\n+  {\n+    CapableIndexReference existingIndex = schemaRead.index(descriptor.keyId(), descriptor.getPropertyIds());\n+    return existingIndex != CapableIndexReference.NO_INDEX && existingIndex.equals(index);\n+  }\n \n-    private void acquireLabelLock( KernelTransactionImplementation state, Client locks, int labelId )\n-    {\n-        locks.acquireExclusive( state.lockTracer(), LABEL, labelId );\n-    }\n+  private void acquireLabelLock(KernelTransactionImplementation state, Client locks, int labelId)\n+  {\n+    locks.acquireExclusive(state.lockTracer(), LABEL, labelId);\n+  }\n \n-    private void releaseLabelLock( Client locks, int labelId )\n-    {\n-        locks.releaseExclusive( LABEL, labelId );\n-    }\n+  private void releaseLabelLock(Client locks, int labelId)\n+  {\n+    locks.releaseExclusive(LABEL, labelId);\n+  }\n \n-    /**\n-     * You MUST hold a schema write lock before you call this method.\n-     */\n-    public void dropUniquenessConstraintIndex( SchemaIndexDescriptor descriptor )\n-            throws TransactionFailureException\n+  /**\n+   * You MUST hold a schema write lock before you call this method.\n+   */\n+  public void dropUniquenessConstraintIndex(SchemaIndexDescriptor descriptor)\n+      throws TransactionFailureException\n+  {\n+    try (Session session = kernelSupplier.get().beginSession(AUTH_DISABLED);\n+         Transaction transaction = session.beginTransaction(Transaction.Type.implicit);\n+         Statement ignore = ((KernelTransaction) transaction).acquireStatement())\n     {\n-        try ( Session session = kernelSupplier.get().beginSession( AUTH_DISABLED );\n-              Transaction transaction = session.beginTransaction( Transaction.Type.implicit );\n-              Statement ignore = ((KernelTransaction)transaction).acquireStatement() )\n-        {\n-            ((KernelTransactionImplementation) transaction).txState().indexDoDrop( descriptor );\n-            transaction.success();\n-        }\n+      ((KernelTransactionImplementation) transaction).txState().indexDoDrop(descriptor);\n+      transaction.success();\n     }\n+  }\n \n-    private SchemaIndexDescriptor asDescriptor( CapableIndexReference indexReference )\n+  private SchemaIndexDescriptor asDescriptor(CapableIndexReference indexReference)\n+  {\n+    if (indexReference.isUnique())\n     {\n-        if ( indexReference.isUnique() )\n-        {\n-            return SchemaIndexDescriptorFactory.uniqueForLabel( indexReference.label(), indexReference.properties() );\n-        }\n-        else\n-        {\n-            return SchemaIndexDescriptorFactory.forLabel( indexReference.label(), indexReference.properties() );\n-        }\n+      return SchemaIndexDescriptorFactory.uniqueForLabel(indexReference.label(), indexReference.properties());\n+    } else\n+    {\n+      return SchemaIndexDescriptorFactory.forLabel(indexReference.label(), indexReference.properties());\n     }\n+  }\n \n-    private void awaitConstrainIndexPopulation( UniquenessConstraintDescriptor constraint, IndexProxy proxy )\n-            throws InterruptedException, UniquePropertyValueValidationException\n+  private void awaitConstrainIndexPopulation(UniquenessConstraintDescriptor constraint, IndexProxy proxy)\n+      throws InterruptedException, UniquePropertyValueValidationException\n+  {\n+    try\n     {\n-        try\n-        {\n-            proxy.awaitStoreScanCompleted();\n-        }\n-        catch ( IndexPopulationFailedKernelException e )\n-        {\n-            Throwable cause = e.getCause();\n-            if ( cause instanceof IndexEntryConflictException )\n-            {\n-                throw new UniquePropertyValueValidationException(\n-                        constraint, VERIFICATION, (IndexEntryConflictException) cause );\n-            }\n-            else\n-            {\n-                throw new UniquePropertyValueValidationException( constraint, VERIFICATION, e );\n-            }\n-        }\n+      proxy.awaitStoreScanCompleted();\n+    } catch (IndexPopulationFailedKernelException e)\n+    {\n+      Throwable cause = e.getCause();\n+      if (cause instanceof IndexEntryConflictException)\n+      {\n+        throw new UniquePropertyValueValidationException(\n+            constraint, VERIFICATION, (IndexEntryConflictException) cause);\n+      } else\n+      {\n+        throw new UniquePropertyValueValidationException(constraint, VERIFICATION, e);\n+      }\n     }\n+  }\n \n-    private CapableIndexReference getOrCreateUniquenessConstraintIndex( SchemaRead schemaRead,\n-            TokenRead tokenRead, SchemaDescriptor schema, IndexProvider.Descriptor providerDescriptor )\n-            throws SchemaKernelException, IndexNotFoundKernelException\n+  private CapableIndexReference getOrCreateUniquenessConstraintIndex(SchemaRead schemaRead,\n+                                                                     TokenRead tokenRead, SchemaDescriptor schema, IndexProvider.Descriptor providerDescriptor)\n+      throws SchemaKernelException, IndexNotFoundKernelException\n+  {\n+    CapableIndexReference descriptor = schemaRead.index(schema.keyId(), schema.getPropertyIds());\n+    if (descriptor != CapableIndexReference.NO_INDEX)\n     {\n-        CapableIndexReference descriptor = schemaRead.index( schema.keyId(), schema.getPropertyIds() );\n-        if ( descriptor != CapableIndexReference.NO_INDEX )\n+      if (descriptor.isUnique())\n+      {\n+        // OK so we found a matching constraint index. We check whether or not it has an owner\n+        // because this may have been a left-over constraint index from a previously failed\n+        // constraint creation, due to crash or similar, hence the missing owner.\n+        if (schemaRead.indexGetOwningUniquenessConstraintId(descriptor) == null)\n         {\n-            if ( descriptor.isUnique() )\n-            {\n-                // OK so we found a matching constraint index. We check whether or not it has an owner\n-                // because this may have been a left-over constraint index from a previously failed\n-                // constraint creation, due to crash or similar, hence the missing owner.\n-                if ( schemaRead.indexGetOwningUniquenessConstraintId( descriptor ) == null )\n-                {\n-                    return descriptor;\n-                }\n-                throw new AlreadyConstrainedException(\n-                        ConstraintDescriptorFactory.uniqueForSchema( schema ),\n-                        OperationContext.CONSTRAINT_CREATION,\n-                        new SilentTokenNameLookup( tokenRead ) );\n-            }\n-            // There's already an index for this schema descriptor, which isn't of the type we're after.\n-            throw new AlreadyIndexedException( schema, CONSTRAINT_CREATION );\n+          return descriptor;\n         }\n-        SchemaIndexDescriptor indexDescriptor = createConstraintIndex( schema, providerDescriptor );\n-        IndexProxy indexProxy = indexingService.getIndexProxy( indexDescriptor.schema() );\n-        return new DefaultCapableIndexReference( indexDescriptor.type() == Type.UNIQUE, indexProxy.getIndexCapability(),\n-                indexProxy.getProviderDescriptor(), indexDescriptor.schema().keyId(),\n-                indexDescriptor.schema().getPropertyIds() );\n+        throw new AlreadyConstrainedException(\n+            ConstraintDescriptorFactory.uniqueForSchema(schema),\n+            OperationContext.CONSTRAINT_CREATION,\n+            new SilentTokenNameLookup(tokenRead));\n+      }\n+      // There's already an index for this schema descriptor, which isn't of the type we're after.\n+      throw new AlreadyIndexedException(schema, CONSTRAINT_CREATION);\n     }\n+    SchemaIndexDescriptor indexDescriptor = createConstraintIndex(schema, providerDescriptor);\n+    IndexProxy indexProxy = indexingService.getIndexProxy(indexDescriptor.schema());\n+    return new DefaultCapableIndexReference(indexDescriptor.type() == Type.UNIQUE, indexProxy.getIndexCapability(),\n+        indexProxy.getProviderDescriptor(), indexDescriptor.schema().keyId(),\n+        indexDescriptor.schema().getPropertyIds());\n+  }\n \n-    public SchemaIndexDescriptor createConstraintIndex( final SchemaDescriptor schema, IndexProvider.Descriptor providerDescriptor )\n+  public SchemaIndexDescriptor createConstraintIndex(final SchemaDescriptor schema, IndexProvider.Descriptor providerDescriptor)\n+  {\n+    try (Session session = kernelSupplier.get().beginSession(AUTH_DISABLED);\n+         Transaction transaction = session.beginTransaction(Transaction.Type.implicit);\n+         Statement ignore = ((KernelTransaction) transaction).acquireStatement())\n     {\n-        try ( Session session = kernelSupplier.get().beginSession( AUTH_DISABLED );\n-              Transaction transaction = session.beginTransaction( Transaction.Type.implicit );\n-              Statement ignore = ((KernelTransaction)transaction).acquireStatement() )\n-        {\n-            SchemaIndexDescriptor index = SchemaIndexDescriptorFactory.uniqueForSchema( schema );\n-            TransactionState transactionState = ((KernelTransactionImplementation) transaction).txState();\n-            transactionState.indexRuleDoAdd( index, providerDescriptor );\n-            transaction.success();\n-            return index;\n-        }\n-        catch ( TransactionFailureException e )\n-        {\n-            throw new RuntimeException( e );\n-        }\n+      SchemaIndexDescriptor index = SchemaIndexDescriptorFactory.uniqueForSchema(schema);\n+      TransactionState transactionState = ((KernelTransactionImplementation) transaction).txState();\n+      transactionState.indexRuleDoAdd(index, providerDescriptor);\n+      transaction.success();\n+      return index;\n+    } catch (TransactionFailureException e)\n+    {\n+      throw new RuntimeException(e);\n     }\n+  }\n }\n",
            "diff_size": 279
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}