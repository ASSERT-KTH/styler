{
    "project_name": "neo4j-neo4j",
    "error_id": "915",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "135",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "152",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "152",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/915/SslPolicy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/915/SslPolicy.java\nindex b3b4748ed71..db683ccf394 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/915/SslPolicy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/915/SslPolicy.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.ssl;\n \n import io.netty.channel.Channel;\n@@ -57,76 +58,76 @@ public class SslPolicy\n     private final boolean verifyHostname;\n     private final Log log;\n \n-    public SslPolicy( PrivateKey privateKey, X509Certificate[] keyCertChain, List<String> tlsVersions, List<String> ciphers, ClientAuth clientAuth,\n-            TrustManagerFactory trustManagerFactory, SslProvider sslProvider, boolean verifyHostname, LogProvider logProvider )\n+    public SslPolicy(PrivateKey privateKey, X509Certificate[] keyCertChain, List<String> tlsVersions, List<String> ciphers, ClientAuth clientAuth,\n+                     TrustManagerFactory trustManagerFactory, SslProvider sslProvider, boolean verifyHostname, LogProvider logProvider)\n     {\n         this.privateKey = privateKey;\n         this.keyCertChain = keyCertChain;\n-        this.tlsVersions = tlsVersions == null ? null : tlsVersions.toArray( new String[0] );\n+        this.tlsVersions = tlsVersions == null ? null : tlsVersions.toArray(new String[0]);\n         this.ciphers = ciphers;\n         this.clientAuth = clientAuth;\n         this.trustManagerFactory = trustManagerFactory;\n         this.sslProvider = sslProvider;\n         this.verifyHostname = verifyHostname;\n-        this.log = logProvider.getLog( SslPolicy.class );\n+        this.log = logProvider.getLog(SslPolicy.class);\n     }\n \n     public SslContext nettyServerContext() throws SSLException\n     {\n-        return SslContextBuilder.forServer( privateKey, keyCertChain )\n-                .sslProvider( sslProvider )\n-                .clientAuth( forNetty( clientAuth ) )\n-                .protocols( tlsVersions )\n-                .ciphers( ciphers )\n-                .trustManager( trustManagerFactory )\n-                .build();\n+        return SslContextBuilder.forServer(privateKey, keyCertChain)\n+          .sslProvider(sslProvider)\n+          .clientAuth(forNetty(clientAuth))\n+          .protocols(tlsVersions)\n+          .ciphers(ciphers)\n+          .trustManager(trustManagerFactory)\n+          .build();\n     }\n \n     public SslContext nettyClientContext() throws SSLException\n     {\n         return SslContextBuilder.forClient()\n-                .sslProvider( sslProvider )\n-                .keyManager( privateKey, keyCertChain )\n-                .protocols( tlsVersions )\n-                .ciphers( ciphers )\n-                .trustManager( trustManagerFactory )\n-                .build();\n+          .sslProvider(sslProvider)\n+          .keyManager(privateKey, keyCertChain)\n+          .protocols(tlsVersions)\n+          .ciphers(ciphers)\n+          .trustManager(trustManagerFactory)\n+          .build();\n     }\n \n-    private io.netty.handler.ssl.ClientAuth forNetty( ClientAuth clientAuth )\n+    private io.netty.handler.ssl.ClientAuth forNetty(ClientAuth clientAuth)\n     {\n-        switch ( clientAuth )\n+        switch (clientAuth)\n         {\n-        case NONE:\n-            return io.netty.handler.ssl.ClientAuth.NONE;\n-        case OPTIONAL:\n-            return io.netty.handler.ssl.ClientAuth.OPTIONAL;\n-        case REQUIRE:\n-            return io.netty.handler.ssl.ClientAuth.REQUIRE;\n-        default:\n-            throw new IllegalArgumentException( \"Cannot translate to netty equivalent: \" + clientAuth );\n+            case NONE:\n+                return io.netty.handler.ssl.ClientAuth.NONE;\n+            case OPTIONAL:\n+                return io.netty.handler.ssl.ClientAuth.OPTIONAL;\n+            case REQUIRE:\n+                return io.netty.handler.ssl.ClientAuth.REQUIRE;\n+            default:\n+                throw new IllegalArgumentException(\"Cannot translate to netty equivalent: \" + clientAuth);\n         }\n     }\n \n-    public ChannelHandler nettyServerHandler( Channel channel ) throws SSLException\n+    public ChannelHandler nettyServerHandler(Channel channel) throws SSLException\n     {\n-        return nettyServerHandler( channel, nettyServerContext() );\n+        return nettyServerHandler(channel, nettyServerContext());\n     }\n \n-    private static ChannelHandler nettyServerHandler( Channel channel, SslContext sslContext )\n+    private static ChannelHandler nettyServerHandler(Channel channel, SslContext sslContext)\n     {\n-        SSLEngine sslEngine = sslContext.newEngine( channel.alloc() );\n-        return new SslHandler( sslEngine );\n+        SSLEngine sslEngine = sslContext.newEngine(channel.alloc());\n+        return new SslHandler(sslEngine);\n     }\n \n-    public ChannelHandler nettyClientHandler( Channel channel ) throws SSLException\n+    public ChannelHandler nettyClientHandler(Channel channel) throws SSLException\n     {\n-        return nettyClientHandler( channel, nettyClientContext() );\n+        return nettyClientHandler(channel, nettyClientContext());\n     }\n \n-    public ChannelHandler nettyClientHandler( Channel channel, SslContext sslContext )\n+    public ChannelHandler nettyClientHandler(Channel channel, SslContext sslContext)\n     {\n-        return new ClientSideOnConnectSslHandler( channel, sslContext, verifyHostname, tlsVersions );\n+        return new ClientSideOnConnectSslHandler(channel, sslContext, verifyHostname, tlsVersions);\n     }\n \n     public PrivateKey privateKey()\n@@ -139,19 +140,18 @@ public class SslPolicy\n         return keyCertChain;\n     }\n \n-    public KeyStore getKeyStore( char[] keyStorePass, char[] privateKeyPass )\n+    public KeyStore getKeyStore(char[] keyStorePass, char[] privateKeyPass)\n     {\n         KeyStore keyStore;\n         try\n         {\n-            keyStore = KeyStore.getInstance( KeyStore.getDefaultType() );\n-            log.debug( \"Keystore loaded is of type \" + keyStore.getClass().getName() );\n-            keyStore.load( null, keyStorePass );\n-            keyStore.setKeyEntry( \"key\", privateKey, privateKeyPass, keyCertChain );\n-        }\n-        catch ( Exception e )\n+            keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            log.debug(\"Keystore loaded is of type \" + keyStore.getClass().getName());\n+            keyStore.load(null, keyStorePass);\n+            keyStore.setKeyEntry(\"key\", privateKey, privateKeyPass, keyCertChain);\n+        } catch (Exception e)\n         {\n-            throw new RuntimeException( e );\n+            throw new RuntimeException(e);\n         }\n \n         return keyStore;\n@@ -186,22 +186,22 @@ public class SslPolicy\n     public String toString()\n     {\n         return \"SslPolicy{\" +\n-               \"keyCertChain=\" + describeCertChain() +\n-               \", ciphers=\" + ciphers +\n-               \", tlsVersions=\" + Arrays.toString( tlsVersions ) +\n-               \", clientAuth=\" + clientAuth +\n-               '}';\n+          \"keyCertChain=\" + describeCertChain() +\n+          \", ciphers=\" + ciphers +\n+          \", tlsVersions=\" + Arrays.toString(tlsVersions) +\n+          \", clientAuth=\" + clientAuth +\n+          '}';\n     }\n \n-    private static String describeCertificate( X509Certificate certificate )\n+    private static String describeCertificate(X509Certificate certificate)\n     {\n         return \"Subject: \" + certificate.getSubjectDN() +\n-               \", Issuer: \" + certificate.getIssuerDN();\n+          \", Issuer: \" + certificate.getIssuerDN();\n     }\n \n     private String describeCertChain()\n     {\n-        List<String> certificates = Arrays.stream( keyCertChain ).map( SslPolicy::describeCertificate ).collect( Collectors.toList() );\n-        return String.join( \", \", certificates );\n+        List<String> certificates = Arrays.stream(keyCertChain).map(SslPolicy::describeCertificate).collect(Collectors.toList());\n+        return String.join(\", \", certificates);\n     }\n }\n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}