{
    "project_name": "neo4j-neo4j",
    "error_id": "565",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "69",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "99",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/565/ParameterSetter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/565/ParameterSetter.java\nindex 8021c50b08a..1f34bca9a08 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/565/ParameterSetter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/565/ParameterSetter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.util;\n \n import java.util.function.BiPredicate;\n@@ -33,15 +34,15 @@ import org.neo4j.shell.exception.ParameterException;\n public abstract class ParameterSetter<E extends Exception>\n {\n     // Match arguments such as \"(key) (value with possible spaces)\" where key and value are any strings\n-    private static final Pattern backtickPattern = Pattern.compile( \"^\\\\s*(?<key>(`([^`])*`)+?):?\\\\s+(?<value>.+)$\" );\n-    private static final Pattern backtickLambdaPattern = Pattern.compile( \"^\\\\s*(?<key>(`([^`])*`)+?)\\\\s*=>\\\\s*(?<value>.+)$\" );\n-    private static final Pattern argPattern = Pattern.compile( \"^\\\\s*(?<key>[\\\\p{L}_][\\\\p{L}0-9_]*):?\\\\s+(?<value>.+)$\" );\n-    private static final Pattern lambdaPattern = Pattern.compile( \"^\\\\s*(?<key>[\\\\p{L}_][\\\\p{L}0-9_]*)\\\\s*=>\\\\s*(?<value>.+)$\" );\n-    private static final Pattern lambdaMapPattern = Pattern.compile( \"^\\\\s*(?<key>[\\\\p{L}_][\\\\p{L}0-9_]*):\\\\s*=>\\\\s*(?<value>.+)$\" );\n+    private static final Pattern backtickPattern = Pattern.compile(\"^\\\\s*(?<key>(`([^`])*`)+?):?\\\\s+(?<value>.+)$\");\n+    private static final Pattern backtickLambdaPattern = Pattern.compile(\"^\\\\s*(?<key>(`([^`])*`)+?)\\\\s*=>\\\\s*(?<value>.+)$\");\n+    private static final Pattern argPattern = Pattern.compile(\"^\\\\s*(?<key>[\\\\p{L}_][\\\\p{L}0-9_]*):?\\\\s+(?<value>.+)$\");\n+    private static final Pattern lambdaPattern = Pattern.compile(\"^\\\\s*(?<key>[\\\\p{L}_][\\\\p{L}0-9_]*)\\\\s*=>\\\\s*(?<value>.+)$\");\n+    private static final Pattern lambdaMapPattern = Pattern.compile(\"^\\\\s*(?<key>[\\\\p{L}_][\\\\p{L}0-9_]*):\\\\s*=>\\\\s*(?<value>.+)$\");\n \n     private final ParameterMap parameterMap;\n \n-    protected ParameterSetter( ParameterMap parameterMap )\n+    protected ParameterSetter(ParameterMap parameterMap)\n     {\n         this.parameterMap = parameterMap;\n     }\n@@ -50,46 +51,44 @@ public abstract class ParameterSetter<E extends Exception>\n \n     protected abstract void onWrongNumberOfArguments() throws E;\n \n-    protected abstract void onParameterException( ParameterException e ) throws E;\n+    protected abstract void onParameterException(ParameterException e) throws E;\n \n-    public void execute( @Nonnull final String argString ) throws E\n+    public void execute(@Nonnull final String argString) throws E\n     {\n-        Matcher lambdaMapMatcher = lambdaMapPattern.matcher( argString );\n-        if ( lambdaMapMatcher.matches() )\n+        Matcher lambdaMapMatcher = lambdaMapPattern.matcher(argString);\n+        if (lambdaMapMatcher.matches())\n         {\n             onWrongUsage();\n         }\n         try\n         {\n-            if ( !assignIfValidParameter( argString ) )\n+            if (!assignIfValidParameter(argString))\n             {\n                 onWrongNumberOfArguments();\n             }\n-        }\n-        catch ( ParameterException e )\n+        } catch (ParameterException e)\n         {\n-            onParameterException( e );\n+            onParameterException(e);\n         }\n     }\n \n-    private boolean assignIfValidParameter( @Nonnull String argString ) throws ParameterException\n+    private boolean assignIfValidParameter(@Nonnull String argString) throws ParameterException\n     {\n-        return setParameterIfItMatchesPattern( argString, lambdaPattern, assignIfValidParameter() )\n-               || setParameterIfItMatchesPattern( argString, argPattern, assignIfValidParameter() )\n-               || setParameterIfItMatchesPattern( argString, backtickLambdaPattern, backTickMatchPattern() )\n-               || setParameterIfItMatchesPattern( argString, backtickPattern, backTickMatchPattern() );\n+        return setParameterIfItMatchesPattern(argString, lambdaPattern, assignIfValidParameter())\n+          || setParameterIfItMatchesPattern(argString, argPattern, assignIfValidParameter())\n+          || setParameterIfItMatchesPattern(argString, backtickLambdaPattern, backTickMatchPattern())\n+          || setParameterIfItMatchesPattern(argString, backtickPattern, backTickMatchPattern());\n     }\n \n-    private boolean setParameterIfItMatchesPattern( @Nonnull String argString, Pattern pattern,\n-                                                    BiPredicate<String, Matcher> matchingFunction ) throws ParameterException\n+    private boolean setParameterIfItMatchesPattern(@Nonnull String argString, Pattern pattern,\n+                                                   BiPredicate<String, Matcher> matchingFunction) throws ParameterException\n     {\n-        Matcher matcher = pattern.matcher( argString );\n-        if ( matchingFunction.test( argString, matcher ) )\n+        Matcher matcher = pattern.matcher(argString);\n+        if (matchingFunction.test(argString, matcher))\n         {\n-            parameterMap.setParameter( matcher.group( \"key\" ), matcher.group( \"value\" ) );\n+            parameterMap.setParameter(matcher.group(\"key\"), matcher.group(\"value\"));\n             return true;\n-        }\n-        else\n+        } else\n         {\n             return false;\n         }\n@@ -97,16 +96,16 @@ public abstract class ParameterSetter<E extends Exception>\n \n     private BiPredicate<String, Matcher> assignIfValidParameter()\n     {\n-        return ( argString, matcher ) -> matcher.matches();\n+        return (argString, matcher) -> matcher.matches();\n     }\n \n     private BiPredicate<String, Matcher> backTickMatchPattern()\n     {\n-        return ( argString, backtickLambdaMatcher ) ->\n+        return (argString, backtickLambdaMatcher) ->\n         {\n-            return argString.trim().startsWith( \"`\" )\n-                   && backtickLambdaMatcher.matches()\n-                   && backtickLambdaMatcher.group( \"key\" ).length() > 2;\n+            return argString.trim().startsWith(\"`\")\n+              && backtickLambdaMatcher.matches()\n+              && backtickLambdaMatcher.group(\"key\").length() > 2;\n         };\n     }\n }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}