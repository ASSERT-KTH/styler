{
    "project_name": "neo4j-neo4j",
    "error_id": "2224",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2224/NodeStoreScan.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2224/NodeStoreScan.java\nindex 5c7af47f8b2..310482098a1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2224/NodeStoreScan.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2224/NodeStoreScan.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state.storeview;\n \n import java.util.function.IntPredicate;\n@@ -38,61 +39,61 @@ import static org.neo4j.lock.LockType.SHARED;\n  * Scan the node store and produce {@link EntityUpdates updates for indexes} and/or {@link EntityTokenUpdate updates for label index}\n  * depending on which {@link Visitor visitors} that are used.\n  */\n-public class NodeStoreScan<FAILURE extends Exception> extends PropertyAwareEntityStoreScan<StorageNodeCursor,FAILURE>\n+public class NodeStoreScan<FAILURE extends Exception> extends PropertyAwareEntityStoreScan<StorageNodeCursor, FAILURE>\n {\n-    private final Visitor<EntityTokenUpdate,FAILURE> labelUpdateVisitor;\n-    private final Visitor<EntityUpdates,FAILURE> propertyUpdatesVisitor;\n+    private final Visitor<EntityTokenUpdate, FAILURE> labelUpdateVisitor;\n+    private final Visitor<EntityUpdates, FAILURE> propertyUpdatesVisitor;\n     protected final int[] labelIds;\n \n-    public NodeStoreScan( StorageReader storageReader, LockService locks,\n-            @Nullable Visitor<EntityTokenUpdate,FAILURE> labelUpdateVisitor,\n-            @Nullable Visitor<EntityUpdates,FAILURE> propertyUpdatesVisitor,\n-            int[] labelIds, IntPredicate propertyKeyIdFilter, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public NodeStoreScan(StorageReader storageReader, LockService locks,\n+                         @Nullable Visitor<EntityTokenUpdate, FAILURE> labelUpdateVisitor,\n+                         @Nullable Visitor<EntityUpdates, FAILURE> propertyUpdatesVisitor,\n+                         int[] labelIds, IntPredicate propertyKeyIdFilter, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        super( storageReader, nodeCount( storageReader, cursorTracer ), propertyKeyIdFilter,\n-                id -> locks.acquireNodeLock( id, SHARED ), cursorTracer, memoryTracker );\n+        super(storageReader, nodeCount(storageReader, cursorTracer), propertyKeyIdFilter,\n+          id -> locks.acquireNodeLock(id, SHARED), cursorTracer, memoryTracker);\n         this.labelUpdateVisitor = labelUpdateVisitor;\n         this.propertyUpdatesVisitor = propertyUpdatesVisitor;\n         this.labelIds = labelIds;\n     }\n \n     @Override\n-    protected StorageNodeCursor allocateCursor( StorageReader storageReader, PageCursorTracer cursorTracer )\n+    protected StorageNodeCursor allocateCursor(StorageReader storageReader, PageCursorTracer cursorTracer)\n     {\n-        return storageReader.allocateNodeCursor( cursorTracer );\n+        return storageReader.allocateNodeCursor(cursorTracer);\n     }\n \n     @Override\n-    public boolean process( StorageNodeCursor cursor ) throws FAILURE\n+    public boolean process(StorageNodeCursor cursor) throws FAILURE\n     {\n         long[] labels = cursor.labels();\n-        if ( labels.length == 0 && labelIds.length != 0 )\n+        if (labels.length == 0 && labelIds.length != 0)\n         {\n             // This node has no labels at all\n             return false;\n         }\n \n-        if ( labelUpdateVisitor != null )\n+        if (labelUpdateVisitor != null)\n         {\n             // Notify the label update visitor\n-            labelUpdateVisitor.visit( EntityTokenUpdate.tokenChanges( cursor.entityReference(), EMPTY_LONG_ARRAY, labels ) );\n+            labelUpdateVisitor.visit(EntityTokenUpdate.tokenChanges(cursor.entityReference(), EMPTY_LONG_ARRAY, labels));\n         }\n \n-        if ( propertyUpdatesVisitor != null && containsAnyEntityToken( labelIds, labels ) )\n+        if (propertyUpdatesVisitor != null && containsAnyEntityToken(labelIds, labels))\n         {\n             // Notify the property update visitor\n-            EntityUpdates.Builder updates = EntityUpdates.forEntity( cursor.entityReference(), true ).withTokens( labels );\n+            EntityUpdates.Builder updates = EntityUpdates.forEntity(cursor.entityReference(), true).withTokens(labels);\n \n-            if ( hasRelevantProperty( cursor, updates ) )\n+            if (hasRelevantProperty(cursor, updates))\n             {\n-                return propertyUpdatesVisitor.visit( updates.build() );\n+                return propertyUpdatesVisitor.visit(updates.build());\n             }\n         }\n         return false;\n     }\n \n-    private static long nodeCount( StorageReader reader, PageCursorTracer cursorTracer )\n+    private static long nodeCount(StorageReader reader, PageCursorTracer cursorTracer)\n     {\n-        return reader.nodesGetCount( cursorTracer );\n+        return reader.nodesGetCount(cursorTracer);\n     }\n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}