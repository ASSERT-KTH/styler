{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2298",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2298/TransactionAppender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2298/TransactionAppender.java\nindex f57f4ef2449..23785e3207e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2298/TransactionAppender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2298/TransactionAppender.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log;\n \n import java.io.IOException;\n@@ -32,37 +33,37 @@ import org.neo4j.kernel.internal.DatabaseHealth;\n  */\n public interface TransactionAppender\n {\n-    /**\n-     * Appends a batch of transactions to a log, effectively committing the transactions.\n-     * After this method have returned the returned transaction id should be visible in\n-     * {@link TransactionIdStore#getLastCommittedTransactionId()}.\n-     * <p>\n-     * Any failure happening inside this method will cause a {@link DatabaseHealth#panic(Throwable) kernel panic}.\n-     * Callers must make sure that successfully appended\n-     * transactions exiting this method are {@link Commitment#publishAsClosed()}}.\n-     *\n-     * @param batch transactions to append to the log. These transaction instances provide both input arguments\n-     * as well as a place to provide output data, namely {@link TransactionToApply#commitment()} and\n-     * {@link TransactionToApply#transactionId()}.\n-     * @param logAppendEvent A trace event for the given log append operation.\n-     * @return last committed transaction in this batch. The appended (i.e. committed) transactions\n-     * will have had their {@link TransactionToApply#commitment()} available and caller is expected to\n-     * {@link Commitment#publishAsClosed() mark them as applied} after they have been applied to storage.\n-     * Note that {@link Commitment commitments} must be {@link Commitment#publishAsCommitted() marked as committed}\n-     * by this method.\n-     * @throws IOException if there was a problem appending the transaction. See method javadoc body for\n-     * how to handle exceptions in general thrown from this method.\n-     */\n-    long append( TransactionToApply batch, LogAppendEvent logAppendEvent ) throws IOException;\n+  /**\n+   * Appends a batch of transactions to a log, effectively committing the transactions.\n+   * After this method have returned the returned transaction id should be visible in\n+   * {@link TransactionIdStore#getLastCommittedTransactionId()}.\n+   * <p>\n+   * Any failure happening inside this method will cause a {@link DatabaseHealth#panic(Throwable) kernel panic}.\n+   * Callers must make sure that successfully appended\n+   * transactions exiting this method are {@link Commitment#publishAsClosed()}}.\n+   *\n+   * @param batch          transactions to append to the log. These transaction instances provide both input arguments\n+   *                       as well as a place to provide output data, namely {@link TransactionToApply#commitment()} and\n+   *                       {@link TransactionToApply#transactionId()}.\n+   * @param logAppendEvent A trace event for the given log append operation.\n+   * @return last committed transaction in this batch. The appended (i.e. committed) transactions\n+   * will have had their {@link TransactionToApply#commitment()} available and caller is expected to\n+   * {@link Commitment#publishAsClosed() mark them as applied} after they have been applied to storage.\n+   * Note that {@link Commitment commitments} must be {@link Commitment#publishAsCommitted() marked as committed}\n+   * by this method.\n+   * @throws IOException if there was a problem appending the transaction. See method javadoc body for\n+   *                     how to handle exceptions in general thrown from this method.\n+   */\n+  long append(TransactionToApply batch, LogAppendEvent logAppendEvent) throws IOException;\n \n-    /**\n-     * Appends a check point to a log which marks a starting point for recovery in the event of failure.\n-     * After this method have returned the check point mark must have been flushed to disk.\n-     *\n-     * @param logPosition the log position contained in the written check point\n-     * @param logCheckPointEvent a trace event for the given check point operation.\n-     * @throws IOException if there was a problem appending the transaction. See method javadoc body for\n-     * how to handle exceptions in general thrown from this method.\n-     */\n-    void checkPoint( LogPosition logPosition, LogCheckPointEvent logCheckPointEvent ) throws IOException;\n+  /**\n+   * Appends a check point to a log which marks a starting point for recovery in the event of failure.\n+   * After this method have returned the check point mark must have been flushed to disk.\n+   *\n+   * @param logPosition        the log position contained in the written check point\n+   * @param logCheckPointEvent a trace event for the given check point operation.\n+   * @throws IOException if there was a problem appending the transaction. See method javadoc body for\n+   *                     how to handle exceptions in general thrown from this method.\n+   */\n+  void checkPoint(LogPosition logPosition, LogCheckPointEvent logCheckPointEvent) throws IOException;\n }\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2298/TransactionAppender.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2298/TransactionAppender.java\nindex f57f4ef2449..d6c2a9ac889 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2298/TransactionAppender.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2298/TransactionAppender.java\n@@ -65,4 +65,4 @@ public interface TransactionAppender\n      * how to handle exceptions in general thrown from this method.\n      */\n     void checkPoint( LogPosition logPosition, LogCheckPointEvent logCheckPointEvent ) throws IOException;\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}