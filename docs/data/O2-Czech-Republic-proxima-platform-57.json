{
    "project_name": "O2-Czech-Republic-proxima-platform",
    "error_id": "57",
    "information": {
        "errors": [
            {
                "line": "43",
                "severity": "error",
                "message": "Line is longer than 90 characters (found 91).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      compressedConfig =\n          StringCompressions.gzip(\n              config.root().render(ConfigRenderOptions.concise()), StandardCharsets.UTF_8);\n    }\n\n    @Override",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/57/RepositoryFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/57/RepositoryFactory.java\nindex 4d94e8c6e35..ecbdb05011b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/57/RepositoryFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/intellij/57/RepositoryFactory.java\n@@ -1,18 +1,19 @@\n /**\n  * Copyright 2017-2021 O2 Czech Republic, a.s.\n- *\n+ * <p>\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package cz.o2.proxima.repository;\n \n import com.google.common.annotations.VisibleForTesting;\n@@ -40,7 +41,8 @@ public interface RepositoryFactory extends Serializable {\n     Compressed(Config config) {\n       compressedConfig =\n           StringCompressions.gzip(\n-              config.root().render(ConfigRenderOptions.concise()), StandardCharsets.UTF_8);\n+              config.root().render(ConfigRenderOptions.concise()),\n+              StandardCharsets.UTF_8);\n     }\n \n     @Override\n@@ -68,7 +70,8 @@ public interface RepositoryFactory extends Serializable {\n     private static long initializedFrom = Long.MIN_VALUE;\n     private static Repository repo;\n \n-    @Getter private final long version = System.currentTimeMillis();\n+    @Getter\n+    private final long version = System.currentTimeMillis();\n     private final RepositoryFactory underlying;\n \n     private VersionedCaching(RepositoryFactory underlying, Repository created) {\n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "error",
                    "message": "'ctor def rcurly' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "62",
                    "severity": "error",
                    "message": "'class def ident' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "'class def ident' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/57/RepositoryFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/57/RepositoryFactory.java\nindex 4d94e8c6e35..a97c72cae83 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/57/RepositoryFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/naturalize/57/RepositoryFactory.java\n@@ -38,10 +38,9 @@ public interface RepositoryFactory extends Serializable {\n     private final byte[] compressedConfig;\n \n     Compressed(Config config) {\n-      compressedConfig =\n-          StringCompressions.gzip(\n+      compressedConfig = StringCompressions.gzip(\n               config.root().render(ConfigRenderOptions.concise()), StandardCharsets.UTF_8);\n-    }\n+  }\n \n     @Override\n     public Repository apply() {\n@@ -60,8 +59,7 @@ public interface RepositoryFactory extends Serializable {\n           .toString();\n     }\n   }\n-\n-  class VersionedCaching implements RepositoryFactory {\n+class VersionedCaching implements RepositoryFactory {\n \n     private static final long serialVersionUID = 1L;\n \n@@ -107,8 +105,7 @@ public interface RepositoryFactory extends Serializable {\n           .toString();\n     }\n   }\n-\n-  class LocalInstance implements RepositoryFactory {\n+class LocalInstance implements RepositoryFactory {\n \n     private static final long serialVersionUID = 1L;\n \n@@ -156,4 +153,4 @@ public interface RepositoryFactory extends Serializable {\n    * @return new repository\n    */\n   Repository apply();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "74",
                    "column": "19",
                    "severity": "error",
                    "message": "WhitespaceAround: 'synchronized' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "82",
                    "column": "19",
                    "severity": "error",
                    "message": "WhitespaceAround: 'synchronized' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/57/RepositoryFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/57/RepositoryFactory.java\nindex 4d94e8c6e35..328f590d3e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/57/RepositoryFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/codebuff/57/RepositoryFactory.java\n@@ -28,19 +28,19 @@ import java.util.concurrent.ConcurrentHashMap;\n import lombok.Getter;\n \n /** Factory for {@link cz.o2.proxima.repository.Repository}. */\n+\n+\n @FunctionalInterface\n public interface RepositoryFactory extends Serializable {\n \n+\n   class Compressed implements RepositoryFactory {\n \n     private static final long serialVersionUID = 1L;\n-\n     private final byte[] compressedConfig;\n \n     Compressed(Config config) {\n-      compressedConfig =\n-          StringCompressions.gzip(\n-              config.root().render(ConfigRenderOptions.concise()), StandardCharsets.UTF_8);\n+      compressedConfig = StringCompressions.gzip(config.root().render(ConfigRenderOptions.concise()), StandardCharsets.UTF_8);\n     }\n \n     @Override\n@@ -49,22 +49,20 @@ public interface RepositoryFactory extends Serializable {\n     }\n \n     Config getConfig() {\n-      return ConfigFactory.parseString(\n-          StringCompressions.gunzip(compressedConfig, StandardCharsets.UTF_8));\n+      return ConfigFactory.parseString(StringCompressions.gunzip(compressedConfig, StandardCharsets.UTF_8));\n     }\n \n     @Override\n     public String toString() {\n-      return MoreObjects.toStringHelper(this)\n-          .add(\"compressedConfig.length\", compressedConfig.length)\n-          .toString();\n+      return MoreObjects.toStringHelper(this).add(\"compressedConfig.length\", compressedConfig.length)\n+                                             .toString();\n     }\n   }\n \n+\n   class VersionedCaching implements RepositoryFactory {\n \n     private static final long serialVersionUID = 1L;\n-\n     private static long initializedFrom = Long.MIN_VALUE;\n     private static Repository repo;\n \n@@ -73,7 +71,7 @@ public interface RepositoryFactory extends Serializable {\n \n     private VersionedCaching(RepositoryFactory underlying, Repository created) {\n       this.underlying = underlying;\n-      synchronized (Repository.class) {\n+      synchronized(Repository.class ) {\n         initializedFrom = version;\n         repo = created;\n       }\n@@ -81,7 +79,7 @@ public interface RepositoryFactory extends Serializable {\n \n     @Override\n     public Repository apply() {\n-      synchronized (Repository.class) {\n+      synchronized(Repository.class ) {\n         if (initializedFrom < version) {\n           ConfigRepository.dropCached();\n           repo = ((ConfigRepository) underlying.apply()).withFactory(this);\n@@ -100,18 +98,17 @@ public interface RepositoryFactory extends Serializable {\n \n     @Override\n     public String toString() {\n-      return MoreObjects.toStringHelper(this)\n-          .add(\"version\", version)\n-          .add(\"underlying\", underlying)\n-          .add(\"classLoader\", getClass().getClassLoader())\n-          .toString();\n+      return MoreObjects.toStringHelper(this).add(\"version\", version)\n+                                             .add(\"underlying\", underlying)\n+                                             .add(\"classLoader\", getClass().getClassLoader())\n+                                             .toString();\n     }\n   }\n \n+\n   class LocalInstance implements RepositoryFactory {\n \n     private static final long serialVersionUID = 1L;\n-\n     private static final Map<Integer, Repository> localMap = new ConcurrentHashMap<>();\n \n     static void drop() {\n@@ -134,18 +131,22 @@ public interface RepositoryFactory extends Serializable {\n \n     @Override\n     public String toString() {\n-      return MoreObjects.toStringHelper(this).add(\"hashCode\", hashCode).toString();\n+      return MoreObjects.toStringHelper(this).add(\"hashCode\", hashCode)\n+                                             .toString();\n     }\n   }\n \n+\n   static RepositoryFactory compressed(Config config) {\n     return new Compressed(config);\n   }\n \n+\n   static RepositoryFactory caching(RepositoryFactory factory, Repository current) {\n     return new VersionedCaching(factory, current);\n   }\n \n+\n   static RepositoryFactory local(Repository repository, RepositoryFactory factory) {\n     return new LocalInstance(repository, factory);\n   }\n@@ -155,5 +156,7 @@ public interface RepositoryFactory extends Serializable {\n    *\n    * @return new repository\n    */\n+\n+\n   Repository apply();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "43",
                    "severity": "error",
                    "message": "Line is longer than 90 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "43",
                    "column": "55",
                    "severity": "error",
                    "message": "'.' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/57/RepositoryFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/57/RepositoryFactory.java\nindex 4d94e8c6e35..61ba3ce91ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/errored/1/57/RepositoryFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/O2-Czech-Republic-proxima-platform/styler_three_grams/57/RepositoryFactory.java\n@@ -40,7 +40,8 @@ public interface RepositoryFactory extends Serializable {\n     Compressed(Config config) {\n       compressedConfig =\n           StringCompressions.gzip(\n-              config.root().render(ConfigRenderOptions.concise()), StandardCharsets.UTF_8);\n+              config.root().render(ConfigRenderOptions.\n+              concise()), StandardCharsets.UTF_8);\n     }\n \n     @Override\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}