{
    "project_name": "kitodo-kitodo-production",
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "484",
                "severity": "warning",
                "message": "Line is longer than 140 characters (found 173).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        LinkedList<TempProcess> childProcesses = new LinkedList<>();\n        for (SingleHit hit : childSearchResult.getHits()) {\n            System.out.println(\"Creating TempProcess for \" + (childSearchResult.getHits().indexOf(hit) + 1) + \"/\" + childSearchResult.getHits().size() + \" child record...\");\n            Document childDocument = importDocument(opac, hit.getIdentifier(), false);\n            childProcesses.add(createTempProcessFromDocument(childDocument, templateId, projectId));\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "483",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "483",
                    "column": "61",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "484",
                    "column": "9",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/34/ImportService.java\nindex fde04f88069..47d83b5b0b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/34/ImportService.java\n@@ -480,9 +480,8 @@ public class ImportService {\n             ParserConfigurationException, NoRecordFoundException, IOException, ProcessGenerationException {\n         SearchResult childSearchResult = searchChildRecords(opac, elementID, rows);\n         LinkedList<TempProcess> childProcesses = new LinkedList<>();\n-        for (SingleHit hit : childSearchResult.getHits()) {\n-            System.out.println(\"Creating TempProcess for \" + (childSearchResult.getHits().indexOf(hit) + 1) + \"/\" + childSearchResult.getHits().size() + \" child record...\");\n-            Document childDocument = importDocument(opac, hit.getIdentifier(), false);\n+        for (SingleHit hit : childSearchResult.getHits()) { System.out.println(\"Creating TempProcess for \" + (childSearchResult.getHits().indexOf(hit) + 1) + \"/\" + childSearchResult.getHits().size() + \" child record...\");\n+        Document childDocument = importDocument(opac, hit.getIdentifier(), false);\n             childProcesses.add(createTempProcessFromDocument(childDocument, templateId, projectId));\n         }\n         // TODO: sort child processes (by what? catalog ID? Signature?)\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "483",
                    "column": "137",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/34/ImportService.java\nindex fde04f88069..71cd7a309c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/34/ImportService.java\n@@ -175,8 +175,8 @@ public class ImportService {\n      * @param searchField field to query\n      * @param searchTerm  given search term\n      * @param catalogName catalog to search\n-     * @param start index of first record returned\n-     * @param rows number of records returned\n+     * @param start       index of first record returned\n+     * @param rows        number of records returned\n      * @return search result\n      */\n     public SearchResult performSearch(String searchField, String searchTerm, String catalogName, int start, int rows) {\n@@ -187,7 +187,7 @@ public class ImportService {\n \n     private ExternalDataImportInterface initializeImportModule() {\n         KitodoServiceLoader<ExternalDataImportInterface> loader =\n-                new KitodoServiceLoader<>(ExternalDataImportInterface.class);\n+            new KitodoServiceLoader<>(ExternalDataImportInterface.class);\n         return loader.loadModule();\n     }\n \n@@ -230,14 +230,14 @@ public class ImportService {\n     }\n \n     private LinkedList<ExemplarRecord> extractExemplarRecords(DataRecord record, String opac) throws XPathExpressionException,\n-            ParserConfigurationException, SAXException, IOException {\n+        ParserConfigurationException, SAXException, IOException {\n         LinkedList<ExemplarRecord> exemplarRecords = new LinkedList<>();\n         String exemplarXPath = OPACConfig.getExemplarFieldXPath(opac);\n         String ownerXPath = OPACConfig.getExemplarFieldOwnerXPath(opac);\n         String signatureXPath = OPACConfig.getExemplarFieldSignatureXPath(opac);\n \n         if (!StringUtils.isBlank(exemplarXPath) && !StringUtils.isBlank(ownerXPath)\n-                && !StringUtils.isBlank(signatureXPath) && record.getOriginalData() instanceof String) {\n+            && !StringUtils.isBlank(signatureXPath) && record.getOriginalData() instanceof String) {\n             String xmlString = (String) record.getOriginalData();\n             XPath xPath = XPathFactory.newInstance().newXPath();\n             xPath.setNamespaceContext(new KitodoNamespaceContext());\n@@ -265,34 +265,32 @@ public class ImportService {\n      * first implementation that supports the Metadata and File formats of the given DataRecord object\n      * as source formats and the Kitodo internal format and XML as target formats, respectively.\n      *\n-     * @param record\n-     *      Record whose metadata and return formats are used to filter the SchemaConverterInterface implementations\n-     *\n+     * @param record Record whose metadata and return formats are used to filter the SchemaConverterInterface implementations\n      * @return List of SchemaConverterInterface implementations that support the metadata and return formats of the\n-     *      given Record.\n-     *\n+     * given Record.\n      * @throws UnsupportedFormatException when no SchemaConverter module with matching formats could be found\n      */\n     private SchemaConverterInterface getSchemaConverter(DataRecord record) throws UnsupportedFormatException {\n         KitodoServiceLoader<SchemaConverterInterface> loader =\n-                new KitodoServiceLoader<>(SchemaConverterInterface.class);\n+            new KitodoServiceLoader<>(SchemaConverterInterface.class);\n         List<SchemaConverterInterface> converterModules = loader.loadModules().stream()\n-                .filter(c -> c.supportsSourceMetadataFormat(record.getMetadataFormat())\n-                        && c.supportsSourceFileFormat(record.getFileFormat())\n-                        && c.supportsTargetMetadataFormat(MetadataFormat.KITODO)\n-                        && c.supportsTargetFileFormat(FileFormat.XML))\n-                .collect(Collectors.toList());\n+            .filter(c -> c.supportsSourceMetadataFormat(record.getMetadataFormat())\n+                && c.supportsSourceFileFormat(record.getFileFormat())\n+                && c.supportsTargetMetadataFormat(MetadataFormat.KITODO)\n+                && c.supportsTargetFileFormat(FileFormat.XML))\n+            .collect(Collectors.toList());\n         if (converterModules.isEmpty()) {\n             throw new UnsupportedFormatException(\"No SchemaConverter found that supports '\"\n-                    + record.getMetadataFormat() + \"' and '\" + record.getFileFormat() + \"'!\");\n+                + record.getMetadataFormat() + \"' and '\" + record.getFileFormat() + \"'!\");\n         }\n         return converterModules.get(0);\n     }\n \n     /**\n      * Get docType form imported record.\n+     *\n      * @param record imported record\n-     *       as Document\n+     *               as Document\n      * @return docType as String\n      */\n     private String getRecordDocType(Document record) {\n@@ -315,7 +313,7 @@ public class ImportService {\n         XPath parentIDXpath = XPathFactory.newInstance().newXPath();\n         parentIDXpath.setNamespaceContext(new KitodoNamespaceContext());\n         NodeList nodeList = (NodeList) parentIDXpath.compile(parentXpath)\n-                .evaluate(document, XPathConstants.NODESET);\n+            .evaluate(document, XPathConstants.NODESET);\n         if (nodeList.getLength() == 1) {\n             Node parentIDNode = nodeList.item(0);\n             if (PARENTHESIS_TRIM_MODE.equals(trimMode)) {\n@@ -329,7 +327,7 @@ public class ImportService {\n     }\n \n     private TempProcess createTempProcessFromDocument(Document document, int templateID, int projectID)\n-            throws ProcessGenerationException {\n+        throws ProcessGenerationException {\n         String docType = getRecordDocType(document);\n         NodeList metadataNodes = extractMetadataNodeList(document);\n \n@@ -347,8 +345,8 @@ public class ImportService {\n \n     private String importProcessAndReturnParentID(String recordId, LinkedList<TempProcess> allProcesses, String opac,\n                                                   int projectID, int templateID)\n-            throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException,\n-            NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException {\n+        throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException,\n+        NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException {\n \n         Document internalDocument = importDocument(opac, recordId, allProcesses.isEmpty());\n         TempProcess tempProcess = createTempProcessFromDocument(internalDocument, templateID, projectID);\n@@ -376,18 +374,18 @@ public class ImportService {\n      * from the OPAC selected in the given CreateProcessForm instance.\n      * Return the list of processes as a LinkedList of TempProcess.\n      *\n-     * @param recordId identifier of the process to import\n-     * @param opac the name of the catalog from which the record is imported\n-     * @param projectId the ID of the project for which a process is created\n-     * @param templateId the ID of the template from which a process is created\n-     * @param importDepth the number of hierarchical processes that will be imported from the catalog\n+     * @param recordId         identifier of the process to import\n+     * @param opac             the name of the catalog from which the record is imported\n+     * @param projectId        the ID of the project for which a process is created\n+     * @param templateId       the ID of the template from which a process is created\n+     * @param importDepth      the number of hierarchical processes that will be imported from the catalog\n      * @param parentIdMetadata names of Metadata types holding parent IDs of structure elements in internal format\n      * @return List of TempProcess\n      */\n     public LinkedList<TempProcess> importProcessHierarchy(String recordId, String opac, int projectId, int templateId,\n                                                           int importDepth, Collection<String> parentIdMetadata)\n-            throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException,\n-            NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException, DAOException {\n+        throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException,\n+        NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException, DAOException {\n         importModule = initializeImportModule();\n         processGenerator = new ProcessGenerator();\n         LinkedList<TempProcess> processes = new LinkedList<>();\n@@ -443,7 +441,7 @@ public class ImportService {\n     /**\n      * Get number of child records of record with ID 'parentId' from catalog 'opac'.\n      *\n-     * @param opac name of the catalog\n+     * @param opac     name of the catalog\n      * @param parentId ID of the parent record\n      * @return number of child records\n      */\n@@ -458,7 +456,7 @@ public class ImportService {\n             return searchResult.getNumberOfHits();\n         } else {\n             Helper.setErrorMessage(\"Error retrieving number of children for record with ID \" + parentId + \" from OPAC \"\n-                    + opac + \"!\");\n+                + opac + \"!\");\n             return 0;\n         }\n     }\n@@ -467,21 +465,23 @@ public class ImportService {\n      * Search child records of record with ID 'elementID' from catalog 'opac', transform them into a list of\n      * 'TempProcess' and return the list.\n      *\n-     * @param opac name of catalog\n-     * @param elementID ID of record for which child records are retrieved\n-     * @param projectId ID of project for which processes are created\n+     * @param opac       name of catalog\n+     * @param elementID  ID of record for which child records are retrieved\n+     * @param projectId  ID of project for which processes are created\n      * @param templateId ID of template with which processes are created\n-     * @param rows number of child records to retrieve from catalog\n+     * @param rows       number of child records to retrieve from catalog\n      * @return list of TempProcesses containing the retrieved child records.\n      */\n     public LinkedList<TempProcess> getChildProcesses(String opac, String elementID, int projectId, int templateId,\n                                                      int rows)\n-            throws SAXException, UnsupportedFormatException, XPathExpressionException, URISyntaxException,\n-            ParserConfigurationException, NoRecordFoundException, IOException, ProcessGenerationException {\n+        throws SAXException, UnsupportedFormatException, XPathExpressionException, URISyntaxException,\n+        ParserConfigurationException, NoRecordFoundException, IOException, ProcessGenerationException {\n         SearchResult childSearchResult = searchChildRecords(opac, elementID, rows);\n         LinkedList<TempProcess> childProcesses = new LinkedList<>();\n         for (SingleHit hit : childSearchResult.getHits()) {\n-            System.out.println(\"Creating TempProcess for \" + (childSearchResult.getHits().indexOf(hit) + 1) + \"/\" + childSearchResult.getHits().size() + \" child record...\");\n+            System.out.println(\n+                \"Creating TempProcess for \" + (childSearchResult.getHits().indexOf(hit) + 1) + \"/\" + childSearchResult.getHits().size() +\n+                    \" child record...\");\n             Document childDocument = importDocument(opac, hit.getIdentifier(), false);\n             childProcesses.add(createTempProcessFromDocument(childDocument, templateId, projectId));\n         }\n@@ -490,8 +490,8 @@ public class ImportService {\n     }\n \n     private Document importDocument(String opac, String identifier, boolean extractExemplars) throws NoRecordFoundException,\n-            UnsupportedFormatException, URISyntaxException, IOException, XPathExpressionException,\n-            ParserConfigurationException, SAXException {\n+        UnsupportedFormatException, URISyntaxException, IOException, XPathExpressionException,\n+        ParserConfigurationException, SAXException {\n         // ################ IMPORT #################\n         importModule = initializeImportModule();\n         DataRecord dataRecord = importModule.getFullRecordById(opac, identifier);\n@@ -510,17 +510,17 @@ public class ImportService {\n         String mappingFileName = OPACConfig.getXsltMappingFile(opac);\n         if (!StringUtils.isBlank(mappingFileName)) {\n             URI xsltFile = Paths.get(ConfigCore.getParameter(ParameterCore.DIR_XSLT)).toUri()\n-                    .resolve(new URI(mappingFileName));\n+                .resolve(new URI(mappingFileName));\n             mappingFile = ServiceManager.getFileService().getFile(xsltFile);\n         }\n         DataRecord internalRecord = converter.convert(dataRecord, MetadataFormat.KITODO, FileFormat.XML, mappingFile);\n \n         if (!(internalRecord.getOriginalData() instanceof String)) {\n             throw new UnsupportedFormatException(\"Original metadata of internal record has to be an XML String, '\"\n-                    + internalRecord.getOriginalData().getClass().getName() + \"' found!\");\n+                + internalRecord.getOriginalData().getClass().getName() + \"' found!\");\n         }\n \n-        return XMLUtils.parseXMLString((String)internalRecord.getOriginalData());\n+        return XMLUtils.parseXMLString((String) internalRecord.getOriginalData());\n     }\n \n     private NodeList extractMetadataNodeList(Document document) throws ProcessGenerationException {\n@@ -535,10 +535,8 @@ public class ImportService {\n     /**\n      * Converts DOM node list of Kitodo metadata elements to metadata objects.\n      *\n-     * @param nodes\n-     *            node list to convert to metadata\n-     * @param domain\n-     *            domain of metadata\n+     * @param nodes  node list to convert to metadata\n+     * @param domain domain of metadata\n      * @return metadata from node list\n      */\n     public static List<Metadata> importMetadata(NodeList nodes, MdSec domain) {\n@@ -575,8 +573,7 @@ public class ImportService {\n     /**\n      * Get the value of a specific processDetail in the processDetails.\n      *\n-     * @param processDetail\n-     *            as ProcessDetail\n+     * @param processDetail as ProcessDetail\n      * @return the value as a java.lang.String\n      */\n     public static String getProcessDetailValue(ProcessDetail processDetail) {\n@@ -595,10 +592,10 @@ public class ImportService {\n \n     /**\n      * Set the value of a specific process detail in processDetails.\n+     *\n      * @param processDetail the specific process detail whose value should be set to the param value\n-     *      as ProcessDetail\n-     * @param value\n-     *       as a java.lang.String\n+     *                      as ProcessDetail\n+     * @param value         as a java.lang.String\n      */\n     public static void setProcessDetailValue(ProcessDetail processDetail, String value) {\n         if (processDetail instanceof ProcessTextMetadata) {\n@@ -613,19 +610,20 @@ public class ImportService {\n \n     /**\n      * Get all creators names.\n+     *\n      * @param processDetailsList the list of elements in processDetails\n-     *      as a list of processDetail\n+     *                           as a list of processDetail\n      * @return all creators names as a String\n      */\n     public static String getListOfCreators(List<ProcessDetail> processDetailsList) {\n         String listofAuthors = \"\";\n         for (ProcessDetail detail : processDetailsList) {\n             if (detail instanceof ProcessFieldedMetadata\n-                    && PERSON.equals(detail.getMetadataID())) {\n+                && PERSON.equals(detail.getMetadataID())) {\n                 ProcessFieldedMetadata tableRow = (ProcessFieldedMetadata) detail;\n                 for (ProcessDetail detailsTableRow : tableRow.getRows()) {\n                     if (ROLE.equals(detailsTableRow.getMetadataID())\n-                            && AUTHOR.equals(getProcessDetailValue(detailsTableRow))) {\n+                        && AUTHOR.equals(getProcessDetailValue(detailsTableRow))) {\n                         listofAuthors = listofAuthors.concat(getCreator(tableRow.getRows()));\n                         break;\n                     }\n@@ -641,8 +639,8 @@ public class ImportService {\n             String detailMetadataID = detail.getMetadataID();\n             String detailValue = getProcessDetailValue(detail);\n             if ((FIRST_NAME.equals(detailMetadataID)\n-                    || LAST_NAME.equals(detailMetadataID))\n-                    && !StringUtils.isBlank(detailValue)) {\n+                || LAST_NAME.equals(detailMetadataID))\n+                && !StringUtils.isBlank(detailValue)) {\n                 author = author.concat(detailValue);\n             }\n         }\n@@ -651,9 +649,9 @@ public class ImportService {\n \n     /**\n      * Prepare.\n-     * @param projectTitle\n-     *      title of the project\n-     * @throws IOException when trying to create a 'ConfigProject' instance.\n+     *\n+     * @param projectTitle title of the project\n+     * @throws IOException             when trying to create a 'ConfigProject' instance.\n      * @throws DoctypeMissingException when trying to load TifDefinition fails\n      */\n     public void prepare(String projectTitle) throws IOException, DoctypeMissingException {\n@@ -700,16 +698,14 @@ public class ImportService {\n \n     /**\n      * Set selected exemplar record data.\n-     * @param exemplarRecord\n-     *          selected exemplar record\n-     * @param opac\n-     *          selected catalog\n-     * @param metadata\n-     *          list of metadata fields\n+     *\n+     * @param exemplarRecord selected exemplar record\n+     * @param opac           selected catalog\n+     * @param metadata       list of metadata fields\n      * @throws ParameterNotFoundException if a parameter required for exemplar record extraction is missing\n      */\n     public static void setSelectedExemplarRecord(ExemplarRecord exemplarRecord, String opac,\n-                                                 List<ProcessDetail> metadata)  throws ParameterNotFoundException {\n+                                                 List<ProcessDetail> metadata) throws ParameterNotFoundException {\n         String ownerMetadataName = OPACConfig.getExemplarFieldOwnerMetadata(opac);\n         String signatureMetadataName = OPACConfig.getExemplarFieldSignatureMetadata(opac);\n         if (StringUtils.isBlank(ownerMetadataName)) {\n@@ -736,17 +732,17 @@ public class ImportService {\n     }\n \n     private Process loadParentProcess(HashMap<String, String> parentIDMetadata, int rulesetId, int projectId)\n-            throws ProcessGenerationException, DAOException {\n+        throws ProcessGenerationException, DAOException {\n         Process parentProcess = null;\n         try {\n             for (ProcessDTO processDTO : ServiceManager.getProcessService().findByMetadata(parentIDMetadata)) {\n                 Process process = ServiceManager.getProcessService().getById(processDTO.getId());\n                 if (Objects.isNull(process.getRuleset()) || Objects.isNull(process.getRuleset().getId())) {\n                     throw new ProcessGenerationException(\"Ruleset or ruleset ID of potential parent process \"\n-                            + process.getId() + \" is null!\");\n+                        + process.getId() + \" is null!\");\n                 }\n                 if (process.getProject().getId() == projectId\n-                        && process.getRuleset().getId().equals(rulesetId)) {\n+                    && process.getRuleset().getId().equals(rulesetId)) {\n                     parentProcess = process;\n                     break;\n                 }\n@@ -772,21 +768,21 @@ public class ImportService {\n     /**\n      * Create and return a List of ProcessDetail objects for the given TempProcess 'tempProcess'.\n      *\n-     * @param tempProcess the TempProcess for which the List of ProcessDetail objects is created\n+     * @param tempProcess         the TempProcess for which the List of ProcessDetail objects is created\n      * @param managementInterface RulesetManagementInterface used to create the metadata of the process\n-     * @param acquisitionStage String containing the acquisitionStage\n-     * @param priorityList List of LanguageRange objects used as priority list\n+     * @param acquisitionStage    String containing the acquisitionStage\n+     * @param priorityList        List of LanguageRange objects used as priority list\n      * @return List of ProcessDetail objects\n      * @throws InvalidMetadataValueException thrown if TempProcess contains invalid metadata\n-     * @throws NoSuchMetadataFieldException thrown if TempProcess contains undefined metadata\n+     * @throws NoSuchMetadataFieldException  thrown if TempProcess contains undefined metadata\n      */\n     public static List<ProcessDetail> transformToProcessDetails(TempProcess tempProcess,\n-                                                         RulesetManagementInterface managementInterface,\n-                                                         String acquisitionStage,\n-                                                         List<Locale.LanguageRange> priorityList)\n-            throws InvalidMetadataValueException, NoSuchMetadataFieldException {\n+                                                                RulesetManagementInterface managementInterface,\n+                                                                String acquisitionStage,\n+                                                                List<Locale.LanguageRange> priorityList)\n+        throws InvalidMetadataValueException, NoSuchMetadataFieldException {\n         ProcessFieldedMetadata metadata = initializeProcessDetails(tempProcess.getWorkpiece().getRootElement(),\n-                managementInterface, acquisitionStage, priorityList);\n+            managementInterface, acquisitionStage, priorityList);\n         metadata.setMetadata(ImportService.importMetadata(tempProcess.getMetadataNodes(), MdSec.DMD_SEC));\n         metadata.preserve();\n         return metadata.getRows();\n@@ -795,24 +791,24 @@ public class ImportService {\n     /**\n      * Create a process title for the given TempProcess using the provided parameters.\n      *\n-     * @param tempProcess the TempProcess for which the TifHeader is created\n+     * @param tempProcess                the TempProcess for which the TifHeader is created\n      * @param rulesetManagementInterface RulesetManagementInterface used to create TifHeader\n-     * @param acquisitionStage String containing name of acquisitionStage\n-     * @param priorityList List of LanguageRange objects used as priority list\n-     * @param processDetails List of ProcessDetail objects containing the metadata of the process\n+     * @param acquisitionStage           String containing name of acquisitionStage\n+     * @param priorityList               List of LanguageRange objects used as priority list\n+     * @param processDetails             List of ProcessDetail objects containing the metadata of the process\n      * @throws ProcessGenerationException thrown if generating the Process title or the TifHeader fails\n      */\n     public static void createProcessTitle(TempProcess tempProcess,\n-                                            RulesetManagementInterface rulesetManagementInterface,\n-                                            String acquisitionStage, List<Locale.LanguageRange> priorityList,\n-                                            List<ProcessDetail> processDetails)\n-            throws ProcessGenerationException {\n+                                          RulesetManagementInterface rulesetManagementInterface,\n+                                          String acquisitionStage, List<Locale.LanguageRange> priorityList,\n+                                          List<ProcessDetail> processDetails)\n+        throws ProcessGenerationException {\n         String docType = tempProcess.getWorkpiece().getRootElement().getType();\n         StructuralElementViewInterface docTypeView = rulesetManagementInterface\n-                .getStructuralElementView(docType, acquisitionStage, priorityList);\n+            .getStructuralElementView(docType, acquisitionStage, priorityList);\n         String processTitle = docTypeView.getProcessTitle().orElse(\"\");\n         ProcessService.generateProcessTitle(\"\", processDetails,\n-                processTitle, tempProcess.getProcess());\n+            processTitle, tempProcess.getProcess());\n     }\n \n     /**\n@@ -820,10 +816,10 @@ public class ImportService {\n      * RulesetManagementInterface 'managementInterface', acquisition stage String 'stage' and List of LanguageRange\n      * 'priorityList'.\n      *\n-     * @param structure IncludedStructuralElement for which to create a ProcessFieldedMetadata\n+     * @param structure           IncludedStructuralElement for which to create a ProcessFieldedMetadata\n      * @param managementInterface RulesetManagementInterface used to create ProcessFieldedMetadata\n-     * @param stage String containing acquisition stage used to create ProcessFieldedMetadata\n-     * @param priorityList List of LanguageRange objects used to create ProcessFieldedMetadata\n+     * @param stage               String containing acquisition stage used to create ProcessFieldedMetadata\n+     * @param priorityList        List of LanguageRange objects used to create ProcessFieldedMetadata\n      * @return the created ProcessFieldedMetadata\n      */\n     public static ProcessFieldedMetadata initializeProcessDetails(IncludedStructuralElement structure,\n@@ -831,7 +827,7 @@ public class ImportService {\n                                                                   String stage,\n                                                                   List<Locale.LanguageRange> priorityList) {\n         StructuralElementViewInterface divisionView = managementInterface.getStructuralElementView(structure.getType(),\n-                stage, priorityList);\n+            stage, priorityList);\n         return new ProcessFieldedMetadata(structure, divisionView);\n     }\n \n@@ -869,18 +865,18 @@ public class ImportService {\n     /**\n      * Process list of child processes.\n      *\n-     * @param mainProcess main process to which list of child processes are attached\n+     * @param mainProcess    main process to which list of child processes are attached\n      * @param childProcesses list of child processes that are attached to the main process\n-     * @throws DataException thrown if saving a process fails\n+     * @throws DataException                 thrown if saving a process fails\n      * @throws InvalidMetadataValueException thrown if process workpiece contains invalid metadata\n-     * @throws NoSuchMetadataFieldException thrown if process workpiece contains undefined metadata\n-     * @throws ProcessGenerationException thrown if process title cannot be created\n+     * @throws NoSuchMetadataFieldException  thrown if process workpiece contains undefined metadata\n+     * @throws ProcessGenerationException    thrown if process title cannot be created\n      */\n     public static void processProcessChildren(Process mainProcess, LinkedList<TempProcess> childProcesses,\n                                               Template template, RulesetManagementInterface managementInterface,\n                                               String acquisitionStage, List<Locale.LanguageRange> priorityList)\n-            throws DataException, InvalidMetadataValueException, NoSuchMetadataFieldException,\n-            ProcessGenerationException {\n+        throws DataException, InvalidMetadataValueException, NoSuchMetadataFieldException,\n+        ProcessGenerationException {\n         for (int i = 0; i < childProcesses.size(); i++) {\n             TempProcess tempProcess = childProcesses.get(i);\n             if (Objects.isNull(tempProcess) || Objects.isNull(tempProcess.getProcess())) {\n@@ -897,10 +893,10 @@ public class ImportService {\n     /**\n      * Add workpiece and template properties to given Process 'process'.\n      *\n-     * @param process Process to which properties are added\n-     * @param template Template of process\n-     * @param processDetails metadata of process\n-     * @param docType String containing document type\n+     * @param process          Process to which properties are added\n+     * @param template         Template of process\n+     * @param processDetails   metadata of process\n+     * @param docType          String containing document type\n      * @param imageDescription String containing image description\n      */\n     public static void addProperties(Process process, Template template, List<ProcessDetail> processDetails,\n@@ -935,7 +931,7 @@ public class ImportService {\n                                 break;\n                             default:\n                                 logger.info(\"Don't save metadata '\" + processDetail.getMetadataID() + \"' with domain '\"\n-                                        + metadata.getDomain() + \"' to property.\");\n+                                    + metadata.getDomain() + \"' to property.\");\n                                 break;\n                         }\n                     } else {\n@@ -970,21 +966,21 @@ public class ImportService {\n      * Process given TempProcess 'tempProcess' by creating the metadata, doc type and properties for the process and\n      * updating the process' tasks.\n      *\n-     * @param tempProcess TempProcess that will be processed\n-     * @param template Template of the process\n+     * @param tempProcess         TempProcess that will be processed\n+     * @param template            Template of the process\n      * @param managementInterface RulesetManagementInterface to create metadata and tiff header\n-     * @param acquisitionStage String containing the acquisition stage\n-     * @param priorityList List of LanguageRange objects\n+     * @param acquisitionStage    String containing the acquisition stage\n+     * @param priorityList        List of LanguageRange objects\n      * @throws InvalidMetadataValueException thrown if the process contains invalid metadata\n-     * @throws NoSuchMetadataFieldException thrown if the process contains undefined metadata\n-     * @throws ProcessGenerationException thrown if process title could not be generated\n+     * @throws NoSuchMetadataFieldException  thrown if the process contains undefined metadata\n+     * @throws ProcessGenerationException    thrown if process title could not be generated\n      */\n     public static void processTempProcess(TempProcess tempProcess, Template template,\n                                           RulesetManagementInterface managementInterface, String acquisitionStage,\n                                           List<Locale.LanguageRange> priorityList)\n-            throws InvalidMetadataValueException, NoSuchMetadataFieldException, ProcessGenerationException {\n+        throws InvalidMetadataValueException, NoSuchMetadataFieldException, ProcessGenerationException {\n         List<ProcessDetail> processDetails = transformToProcessDetails(tempProcess, managementInterface,\n-                acquisitionStage, priorityList);\n+            acquisitionStage, priorityList);\n         String docType = tempProcess.getWorkpiece().getRootElement().getType();\n         createProcessTitle(tempProcess, managementInterface, acquisitionStage, priorityList, processDetails);\n         Process process = tempProcess.getProcess();\n",
            "diff_size": 117
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "348",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "387",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 215).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "475",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "480",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "709",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "781",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "821",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "824",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "870",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "871",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 223).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "894",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "895",
                    "column": "5",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "969",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "970",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/34/ImportService.java\nindex fde04f88069..0f8452110b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/34/ImportService.java\n@@ -345,8 +345,7 @@ public class ImportService {\n         return new TempProcess(process, metadataNodes, docType);\n     }\n \n-    private String importProcessAndReturnParentID(String recordId, LinkedList<TempProcess> allProcesses, String opac,\n-                                                  int projectID, int templateID)\n+    private String importProcessAndReturnParentID(String recordId, LinkedList<TempProcess> allProcesses, String opac, int projectID, int templateID)\n             throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException,\n             NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException {\n \n@@ -385,8 +384,7 @@ public class ImportService {\n      * @return List of TempProcess\n      */\n     public LinkedList<TempProcess> importProcessHierarchy(String recordId, String opac, int projectId, int templateId,\n-                                                          int importDepth, Collection<String> parentIdMetadata)\n-            throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException,\n+                                                          int importDepth, Collection<String> parentIdMetadata) throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException,\n             NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException, DAOException {\n         importModule = initializeImportModule();\n         processGenerator = new ProcessGenerator();\n@@ -474,9 +472,7 @@ public class ImportService {\n      * @param rows number of child records to retrieve from catalog\n      * @return list of TempProcesses containing the retrieved child records.\n      */\n-    public LinkedList<TempProcess> getChildProcesses(String opac, String elementID, int projectId, int templateId,\n-                                                     int rows)\n-            throws SAXException, UnsupportedFormatException, XPathExpressionException, URISyntaxException,\n+    public LinkedList<TempProcess> getChildProcesses(String opac, String elementID, int projectId, int templateId, int rows) throws SAXException, UnsupportedFormatException, XPathExpressionException, URISyntaxException,\n             ParserConfigurationException, NoRecordFoundException, IOException, ProcessGenerationException {\n         SearchResult childSearchResult = searchChildRecords(opac, elementID, rows);\n         LinkedList<TempProcess> childProcesses = new LinkedList<>();\n@@ -710,7 +706,7 @@ public class ImportService {\n      */\n     public static void setSelectedExemplarRecord(ExemplarRecord exemplarRecord, String opac,\n                                                  List<ProcessDetail> metadata)  throws ParameterNotFoundException {\n-        String ownerMetadataName = OPACConfig.getExemplarFieldOwnerMetadata(opac);\n+    String ownerMetadataName = OPACConfig.getExemplarFieldOwnerMetadata(opac);\n         String signatureMetadataName = OPACConfig.getExemplarFieldSignatureMetadata(opac);\n         if (StringUtils.isBlank(ownerMetadataName)) {\n             throw new ParameterNotFoundException(\"ownerMetadata\");\n@@ -780,11 +776,9 @@ public class ImportService {\n      * @throws InvalidMetadataValueException thrown if TempProcess contains invalid metadata\n      * @throws NoSuchMetadataFieldException thrown if TempProcess contains undefined metadata\n      */\n-    public static List<ProcessDetail> transformToProcessDetails(TempProcess tempProcess,\n-                                                         RulesetManagementInterface managementInterface,\n+    public static List<ProcessDetail> transformToProcessDetails(TempProcess tempProcess, RulesetManagementInterface managementInterface,\n                                                          String acquisitionStage,\n-                                                         List<Locale.LanguageRange> priorityList)\n-            throws InvalidMetadataValueException, NoSuchMetadataFieldException {\n+                                                         List<Locale.LanguageRange> priorityList) throws InvalidMetadataValueException, NoSuchMetadataFieldException {\n         ProcessFieldedMetadata metadata = initializeProcessDetails(tempProcess.getWorkpiece().getRootElement(),\n                 managementInterface, acquisitionStage, priorityList);\n         metadata.setMetadata(ImportService.importMetadata(tempProcess.getMetadataNodes(), MdSec.DMD_SEC));\n@@ -802,11 +796,9 @@ public class ImportService {\n      * @param processDetails List of ProcessDetail objects containing the metadata of the process\n      * @throws ProcessGenerationException thrown if generating the Process title or the TifHeader fails\n      */\n-    public static void createProcessTitle(TempProcess tempProcess,\n-                                            RulesetManagementInterface rulesetManagementInterface,\n+    public static void createProcessTitle(TempProcess tempProcess, RulesetManagementInterface rulesetManagementInterface,\n                                             String acquisitionStage, List<Locale.LanguageRange> priorityList,\n-                                            List<ProcessDetail> processDetails)\n-            throws ProcessGenerationException {\n+                                            List<ProcessDetail> processDetails) throws ProcessGenerationException {\n         String docType = tempProcess.getWorkpiece().getRootElement().getType();\n         StructuralElementViewInterface docTypeView = rulesetManagementInterface\n                 .getStructuralElementView(docType, acquisitionStage, priorityList);\n@@ -826,11 +818,10 @@ public class ImportService {\n      * @param priorityList List of LanguageRange objects used to create ProcessFieldedMetadata\n      * @return the created ProcessFieldedMetadata\n      */\n-    public static ProcessFieldedMetadata initializeProcessDetails(IncludedStructuralElement structure,\n-                                                                  RulesetManagementInterface managementInterface,\n+    public static ProcessFieldedMetadata initializeProcessDetails(IncludedStructuralElement structure, RulesetManagementInterface managementInterface,\n                                                                   String stage,\n                                                                   List<Locale.LanguageRange> priorityList) {\n-        StructuralElementViewInterface divisionView = managementInterface.getStructuralElementView(structure.getType(),\n+    StructuralElementViewInterface divisionView = managementInterface.getStructuralElementView(structure.getType(),\n                 stage, priorityList);\n         return new ProcessFieldedMetadata(structure, divisionView);\n     }\n@@ -876,11 +867,8 @@ public class ImportService {\n      * @throws NoSuchMetadataFieldException thrown if process workpiece contains undefined metadata\n      * @throws ProcessGenerationException thrown if process title cannot be created\n      */\n-    public static void processProcessChildren(Process mainProcess, LinkedList<TempProcess> childProcesses,\n-                                              Template template, RulesetManagementInterface managementInterface,\n-                                              String acquisitionStage, List<Locale.LanguageRange> priorityList)\n-            throws DataException, InvalidMetadataValueException, NoSuchMetadataFieldException,\n-            ProcessGenerationException {\n+    public static void processProcessChildren(Process mainProcess, LinkedList<TempProcess> childProcesses, Template template, RulesetManagementInterface managementInterface,\n+                                              String acquisitionStage, List<Locale.LanguageRange> priorityList) throws DataException, InvalidMetadataValueException, NoSuchMetadataFieldException, ProcessGenerationException {\n         for (int i = 0; i < childProcesses.size(); i++) {\n             TempProcess tempProcess = childProcesses.get(i);\n             if (Objects.isNull(tempProcess) || Objects.isNull(tempProcess.getProcess())) {\n@@ -903,9 +891,8 @@ public class ImportService {\n      * @param docType String containing document type\n      * @param imageDescription String containing image description\n      */\n-    public static void addProperties(Process process, Template template, List<ProcessDetail> processDetails,\n-                                     String docType, String imageDescription) {\n-        addMetadataProperties(processDetails, process);\n+    public static void addProperties(Process process, Template template, List<ProcessDetail> processDetails, String docType, String imageDescription) {\n+    addMetadataProperties(processDetails, process);\n         ProcessGenerator.addPropertyForWorkpiece(process, \"DocType\", docType);\n         ProcessGenerator.addPropertyForWorkpiece(process, \"TifHeaderImagedescription\", imageDescription);\n         ProcessGenerator.addPropertyForWorkpiece(process, \"TifHeaderDocumentname\", process.getTitle());\n@@ -979,10 +966,8 @@ public class ImportService {\n      * @throws NoSuchMetadataFieldException thrown if the process contains undefined metadata\n      * @throws ProcessGenerationException thrown if process title could not be generated\n      */\n-    public static void processTempProcess(TempProcess tempProcess, Template template,\n-                                          RulesetManagementInterface managementInterface, String acquisitionStage,\n-                                          List<Locale.LanguageRange> priorityList)\n-            throws InvalidMetadataValueException, NoSuchMetadataFieldException, ProcessGenerationException {\n+    public static void processTempProcess(TempProcess tempProcess, Template template, RulesetManagementInterface managementInterface, String acquisitionStage,\n+                                          List<Locale.LanguageRange> priorityList) throws InvalidMetadataValueException, NoSuchMetadataFieldException, ProcessGenerationException {\n         List<ProcessDetail> processDetails = transformToProcessDetails(tempProcess, managementInterface,\n                 acquisitionStage, priorityList);\n         String docType = tempProcess.getWorkpiece().getRootElement().getType();\n@@ -991,4 +976,4 @@ public class ImportService {\n         addProperties(tempProcess.getProcess(), template, processDetails, docType, tempProcess.getProcess().getTitle());\n         updateTasks(process);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 32
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "233",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "279",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "280",
                    "column": "9",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "281",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "283",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 166).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "345",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 339).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "381",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 377).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "472",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 315).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "476",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "485",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 256).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "506",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "579",
                    "column": "20",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "580",
                    "column": "16",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "581",
                    "column": "20",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "582",
                    "column": "16",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "602",
                    "column": "20",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "603",
                    "column": "16",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "714",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 158).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "743",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "749",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "791",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 198).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "813",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 259).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "815",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "836",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "885",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 351).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "910",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "941",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "992",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 204).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/34/ImportService.java\nindex fde04f88069..0ee0c200543 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/34/ImportService.java\n@@ -26,13 +26,11 @@ import java.util.Locale;\n import java.util.NoSuchElementException;\n import java.util.Objects;\n import java.util.stream.Collectors;\n-\n import javax.xml.parsers.ParserConfigurationException;\n import javax.xml.xpath.XPath;\n import javax.xml.xpath.XPathConstants;\n import javax.xml.xpath.XPathExpressionException;\n import javax.xml.xpath.XPathFactory;\n-\n import org.apache.commons.configuration.HierarchicalConfiguration;\n import org.apache.commons.lang.StringUtils;\n import org.apache.logging.log4j.LogManager;\n@@ -95,12 +93,10 @@ import org.xml.sax.SAXParseException;\n public class ImportService {\n \n     private static final Logger logger = LogManager.getLogger(ImportService.class);\n-\n     private static volatile ImportService instance = null;\n     private static ExternalDataImportInterface importModule;\n     private static final String KITODO_NAMESPACE = \"http://meta.kitodo.org/v1/\";\n     private static final String KITODO_STRING = \"kitodo\";\n-\n     private ProcessGenerator processGenerator;\n     private static final String REPLACE_ME = \"REPLACE_ME\";\n     // default value for identifierMetadata if no OPAC specific metadata has been configured in kitodo_opac.xml\n@@ -109,22 +105,17 @@ public class ImportService {\n     private static final String PARENTHESIS_TRIM_MODE = \"parenthesis\";\n     private String trimMode = \"\";\n     private LinkedList<ExemplarRecord> exemplarRecords;\n-\n     private static final String PERSON = \"Person\";\n     private static final String ROLE = \"Role\";\n     private static final String AUTHOR = \"Author\";\n     private static final String FIRST_NAME = \"FirstName\";\n     private static final String LAST_NAME = \"LastName\";\n-\n     private static final String MONOGRAPH = \"Monograph\";\n     private static final String VOLUME = \"Volume\";\n     private static final String MULTI_VOLUME_WORK = \"MultiVolumeWork\";\n-\n     private String tiffDefinition;\n     private boolean usingTemplates;\n-\n     private TempProcess parentTempProcess;\n-\n     private static final String CATALOG_IDENTIFIER = \"CatalogIDDigital\";\n \n     /**\n@@ -132,6 +123,8 @@ public class ImportService {\n      *\n      * @return unique instance of ImportService\n      */\n+\n+\n     public static ImportService getInstance() {\n         ImportService localReference = instance;\n         if (Objects.isNull(localReference)) {\n@@ -146,6 +139,7 @@ public class ImportService {\n         return localReference;\n     }\n \n+\n     private void loadOpacConfiguration(String catalogName) {\n         try {\n             OPACConfig.getOPACConfiguration(catalogName);\n@@ -179,15 +173,17 @@ public class ImportService {\n      * @param rows number of records returned\n      * @return search result\n      */\n+\n+\n     public SearchResult performSearch(String searchField, String searchTerm, String catalogName, int start, int rows) {\n         importModule = initializeImportModule();\n         loadOpacConfiguration(catalogName);\n         return importModule.search(catalogName, searchField, searchTerm, start, rows);\n     }\n \n+\n     private ExternalDataImportInterface initializeImportModule() {\n-        KitodoServiceLoader<ExternalDataImportInterface> loader =\n-                new KitodoServiceLoader<>(ExternalDataImportInterface.class);\n+        KitodoServiceLoader<ExternalDataImportInterface> loader = new KitodoServiceLoader<>(ExternalDataImportInterface.class);\n         return loader.loadModule();\n     }\n \n@@ -198,6 +194,8 @@ public class ImportService {\n      * @param opac name of catalog whose search fields are loaded\n      * @return list containing search fields\n      */\n+\n+\n     public List<String> getAvailableSearchFields(String opac) {\n         try {\n             HierarchicalConfiguration searchFields = OPACConfig.getSearchFields(opac);\n@@ -220,6 +218,8 @@ public class ImportService {\n      *\n      * @return list of catalog names\n      */\n+\n+\n     public List<String> getAvailableCatalogs() {\n         try {\n             return OPACConfig.getCatalogs();\n@@ -229,15 +229,15 @@ public class ImportService {\n         }\n     }\n \n-    private LinkedList<ExemplarRecord> extractExemplarRecords(DataRecord record, String opac) throws XPathExpressionException,\n-            ParserConfigurationException, SAXException, IOException {\n+\n+    private LinkedList<ExemplarRecord> extractExemplarRecords(DataRecord record, String opac) throws XPathExpressionException, ParserConfigurationException, SAXException, IOException {\n         LinkedList<ExemplarRecord> exemplarRecords = new LinkedList<>();\n         String exemplarXPath = OPACConfig.getExemplarFieldXPath(opac);\n         String ownerXPath = OPACConfig.getExemplarFieldOwnerXPath(opac);\n         String signatureXPath = OPACConfig.getExemplarFieldSignatureXPath(opac);\n-\n         if (!StringUtils.isBlank(exemplarXPath) && !StringUtils.isBlank(ownerXPath)\n-                && !StringUtils.isBlank(signatureXPath) && record.getOriginalData() instanceof String) {\n+                && !StringUtils.isBlank(signatureXPath)\n+                && record.getOriginalData() instanceof String) {\n             String xmlString = (String) record.getOriginalData();\n             XPath xPath = XPathFactory.newInstance().newXPath();\n             xPath.setNamespaceContext(new KitodoNamespaceContext());\n@@ -247,7 +247,6 @@ public class ImportService {\n                 Node exemplar = exemplars.item(i);\n                 Node ownerNode = (Node) xPath.compile(ownerXPath).evaluate(exemplar, XPathConstants.NODE);\n                 Node signatureNode = (Node) xPath.compile(signatureXPath).evaluate(exemplar, XPathConstants.NODE);\n-\n                 if (Objects.nonNull(ownerNode) && Objects.nonNull(signatureNode)) {\n                     String owner = ownerNode.getTextContent();\n                     String signature = signatureNode.getTextContent();\n@@ -273,18 +272,15 @@ public class ImportService {\n      *\n      * @throws UnsupportedFormatException when no SchemaConverter module with matching formats could be found\n      */\n+\n+\n     private SchemaConverterInterface getSchemaConverter(DataRecord record) throws UnsupportedFormatException {\n-        KitodoServiceLoader<SchemaConverterInterface> loader =\n-                new KitodoServiceLoader<>(SchemaConverterInterface.class);\n-        List<SchemaConverterInterface> converterModules = loader.loadModules().stream()\n-                .filter(c -> c.supportsSourceMetadataFormat(record.getMetadataFormat())\n-                        && c.supportsSourceFileFormat(record.getFileFormat())\n-                        && c.supportsTargetMetadataFormat(MetadataFormat.KITODO)\n-                        && c.supportsTargetFileFormat(FileFormat.XML))\n-                .collect(Collectors.toList());\n+        KitodoServiceLoader<SchemaConverterInterface> loader = new KitodoServiceLoader<>(SchemaConverterInterface.class);\n+        List<SchemaConverterInterface> converterModules = loader.loadModules().stream().filter(c -> c.supportsSourceMetadataFormat(record.getMetadataFormat()) && c.supportsSourceFileFormat(record.getFileFormat())\n+        && c.supportsTargetMetadataFormat(MetadataFormat.KITODO)\n+                                                                                               && c.supportsTargetFileFormat(FileFormat.XML)).collect(Collectors.toList());\n         if (converterModules.isEmpty()) {\n-            throw new UnsupportedFormatException(\"No SchemaConverter found that supports '\"\n-                    + record.getMetadataFormat() + \"' and '\" + record.getFileFormat() + \"'!\");\n+            throw new UnsupportedFormatException(\"No SchemaConverter found that supports '\" + record.getMetadataFormat() + \"' and '\" + record.getFileFormat() + \"'!\");\n         }\n         return converterModules.get(0);\n     }\n@@ -295,6 +291,8 @@ public class ImportService {\n      *       as Document\n      * @return docType as String\n      */\n+\n+\n     private String getRecordDocType(Document record) {\n         Element root = record.getDocumentElement();\n         NodeList kitodoNodes = root.getElementsByTagNameNS(KITODO_NAMESPACE, KITODO_STRING);\n@@ -311,11 +309,11 @@ public class ImportService {\n         return \"\";\n     }\n \n+\n     private String getParentID(Document document) throws XPathExpressionException {\n         XPath parentIDXpath = XPathFactory.newInstance().newXPath();\n         parentIDXpath.setNamespaceContext(new KitodoNamespaceContext());\n-        NodeList nodeList = (NodeList) parentIDXpath.compile(parentXpath)\n-                .evaluate(document, XPathConstants.NODESET);\n+        NodeList nodeList = (NodeList) parentIDXpath.compile(parentXpath).evaluate(document, XPathConstants.NODESET);\n         if (nodeList.getLength() == 1) {\n             Node parentIDNode = nodeList.item(0);\n             if (PARENTHESIS_TRIM_MODE.equals(trimMode)) {\n@@ -328,11 +326,10 @@ public class ImportService {\n         }\n     }\n \n-    private TempProcess createTempProcessFromDocument(Document document, int templateID, int projectID)\n-            throws ProcessGenerationException {\n+\n+    private TempProcess createTempProcessFromDocument(Document document, int templateID, int projectID) throws ProcessGenerationException {\n         String docType = getRecordDocType(document);\n         NodeList metadataNodes = extractMetadataNodeList(document);\n-\n         Process process = null;\n         // \"processGenerator\" needs to be initialized when function is called for the first time\n         if (Objects.isNull(processGenerator)) {\n@@ -341,15 +338,11 @@ public class ImportService {\n         if (processGenerator.generateProcess(templateID, projectID)) {\n             process = processGenerator.getGeneratedProcess();\n         }\n-\n         return new TempProcess(process, metadataNodes, docType);\n     }\n \n-    private String importProcessAndReturnParentID(String recordId, LinkedList<TempProcess> allProcesses, String opac,\n-                                                  int projectID, int templateID)\n-            throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException,\n-            NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException {\n \n+    private String importProcessAndReturnParentID(String recordId, LinkedList<TempProcess> allProcesses, String opac, int projectID, int templateID) throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException, NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException {\n         Document internalDocument = importDocument(opac, recordId, allProcesses.isEmpty());\n         TempProcess tempProcess = createTempProcessFromDocument(internalDocument, templateID, projectID);\n \n@@ -365,7 +358,6 @@ public class ImportService {\n                 }\n             }\n         }\n-\n         allProcesses.add(tempProcess);\n         return getParentID(internalDocument);\n     }\n@@ -384,10 +376,9 @@ public class ImportService {\n      * @param parentIdMetadata names of Metadata types holding parent IDs of structure elements in internal format\n      * @return List of TempProcess\n      */\n-    public LinkedList<TempProcess> importProcessHierarchy(String recordId, String opac, int projectId, int templateId,\n-                                                          int importDepth, Collection<String> parentIdMetadata)\n-            throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException,\n-            NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException, DAOException {\n+\n+\n+    public LinkedList<TempProcess> importProcessHierarchy(String recordId, String opac, int projectId, int templateId, int importDepth, Collection<String> parentIdMetadata) throws IOException, ProcessGenerationException, XPathExpressionException, ParserConfigurationException, NoRecordFoundException, UnsupportedFormatException, URISyntaxException, SAXException, DAOException {\n         importModule = initializeImportModule();\n         processGenerator = new ProcessGenerator();\n         LinkedList<TempProcess> processes = new LinkedList<>();\n@@ -431,6 +422,7 @@ public class ImportService {\n         return processes;\n     }\n \n+\n     private SearchResult searchChildRecords(String opac, String parentId, int numberOfrows) {\n         loadOpacConfiguration(opac);\n         String parenIDSearchField = OPACConfig.getParentIDElement(opac);\n@@ -447,6 +439,8 @@ public class ImportService {\n      * @param parentId ID of the parent record\n      * @return number of child records\n      */\n+\n+\n     public int getNumberOfChildren(String opac, String parentId) {\n         loadOpacConfiguration(opac);\n         String parenIDSearchField = OPACConfig.getParentIDElement(opac);\n@@ -457,8 +451,7 @@ public class ImportService {\n         if (Objects.nonNull(searchResult)) {\n             return searchResult.getNumberOfHits();\n         } else {\n-            Helper.setErrorMessage(\"Error retrieving number of children for record with ID \" + parentId + \" from OPAC \"\n-                    + opac + \"!\");\n+            Helper.setErrorMessage(\"Error retrieving number of children for record with ID \" + parentId + \" from OPAC \" + opac + \"!\");\n             return 0;\n         }\n     }\n@@ -474,10 +467,9 @@ public class ImportService {\n      * @param rows number of child records to retrieve from catalog\n      * @return list of TempProcesses containing the retrieved child records.\n      */\n-    public LinkedList<TempProcess> getChildProcesses(String opac, String elementID, int projectId, int templateId,\n-                                                     int rows)\n-            throws SAXException, UnsupportedFormatException, XPathExpressionException, URISyntaxException,\n-            ParserConfigurationException, NoRecordFoundException, IOException, ProcessGenerationException {\n+\n+\n+    public LinkedList<TempProcess> getChildProcesses(String opac, String elementID, int projectId, int templateId, int rows) throws SAXException, UnsupportedFormatException, XPathExpressionException, URISyntaxException, ParserConfigurationException, NoRecordFoundException, IOException, ProcessGenerationException {\n         SearchResult childSearchResult = searchChildRecords(opac, elementID, rows);\n         LinkedList<TempProcess> childProcesses = new LinkedList<>();\n         for (SingleHit hit : childSearchResult.getHits()) {\n@@ -489,13 +481,11 @@ public class ImportService {\n         return childProcesses;\n     }\n \n-    private Document importDocument(String opac, String identifier, boolean extractExemplars) throws NoRecordFoundException,\n-            UnsupportedFormatException, URISyntaxException, IOException, XPathExpressionException,\n-            ParserConfigurationException, SAXException {\n+\n+    private Document importDocument(String opac, String identifier, boolean extractExemplars) throws NoRecordFoundException, UnsupportedFormatException, URISyntaxException, IOException, XPathExpressionException, ParserConfigurationException, SAXException {\n         // ################ IMPORT #################\n         importModule = initializeImportModule();\n         DataRecord dataRecord = importModule.getFullRecordById(opac, identifier);\n-\n         if (extractExemplars) {\n             exemplarRecords = extractExemplarRecords(dataRecord, opac);\n         }\n@@ -506,23 +496,19 @@ public class ImportService {\n \n         // transform dataRecord to Kitodo internal format using appropriate SchemaConverter!\n         File mappingFile = null;\n-\n         String mappingFileName = OPACConfig.getXsltMappingFile(opac);\n         if (!StringUtils.isBlank(mappingFileName)) {\n-            URI xsltFile = Paths.get(ConfigCore.getParameter(ParameterCore.DIR_XSLT)).toUri()\n-                    .resolve(new URI(mappingFileName));\n+            URI xsltFile = Paths.get(ConfigCore.getParameter(ParameterCore.DIR_XSLT)).toUri().resolve(new URI(mappingFileName));\n             mappingFile = ServiceManager.getFileService().getFile(xsltFile);\n         }\n         DataRecord internalRecord = converter.convert(dataRecord, MetadataFormat.KITODO, FileFormat.XML, mappingFile);\n-\n         if (!(internalRecord.getOriginalData() instanceof String)) {\n-            throw new UnsupportedFormatException(\"Original metadata of internal record has to be an XML String, '\"\n-                    + internalRecord.getOriginalData().getClass().getName() + \"' found!\");\n+            throw new UnsupportedFormatException(\"Original metadata of internal record has to be an XML String, '\" + internalRecord.getOriginalData().getClass().getName() + \"' found!\");\n         }\n-\n-        return XMLUtils.parseXMLString((String)internalRecord.getOriginalData());\n+        return XMLUtils.parseXMLString((String) internalRecord.getOriginalData());\n     }\n \n+\n     private NodeList extractMetadataNodeList(Document document) throws ProcessGenerationException {\n         NodeList kitodoNodes = document.getElementsByTagNameNS(KITODO_NAMESPACE, KITODO_STRING);\n         if (kitodoNodes.getLength() != 1) {\n@@ -541,6 +527,8 @@ public class ImportService {\n      *            domain of metadata\n      * @return metadata from node list\n      */\n+\n+\n     public static List<Metadata> importMetadata(NodeList nodes, MdSec domain) {\n         List<Metadata> allMetadata = new ArrayList<>();\n         for (int index = 0; index < nodes.getLength(); index++) {\n@@ -579,6 +567,8 @@ public class ImportService {\n      *            as ProcessDetail\n      * @return the value as a java.lang.String\n      */\n+\n+\n     public static String getProcessDetailValue(ProcessDetail processDetail) {\n         String value = \"\";\n         if (processDetail instanceof ProcessTextMetadata) {\n@@ -586,10 +576,10 @@ public class ImportService {\n         } else if (processDetail instanceof ProcessBooleanMetadata) {\n             return String.valueOf(((ProcessBooleanMetadata) processDetail).isActive());\n         } else if (processDetail instanceof ProcessSelectMetadata) {\n-            return String.join(\", \", ((ProcessSelectMetadata) processDetail).getSelectedItems());\n-        } else if (processDetail instanceof ProcessFieldedMetadata && processDetail.getMetadataID().equals(PERSON)) {\n-            value = getCreator(((ProcessFieldedMetadata) processDetail).getRows());\n-        }\n+                   return String.join(\", \", ((ProcessSelectMetadata) processDetail).getSelectedItems());\n+               } else if (processDetail instanceof ProcessFieldedMetadata && processDetail.getMetadataID().equals(PERSON)) {\n+                   value = getCreator(((ProcessFieldedMetadata) processDetail).getRows());\n+               }\n         return value;\n     }\n \n@@ -600,6 +590,8 @@ public class ImportService {\n      * @param value\n      *       as a java.lang.String\n      */\n+\n+\n     public static void setProcessDetailValue(ProcessDetail processDetail, String value) {\n         if (processDetail instanceof ProcessTextMetadata) {\n             // TODO: incorporate \"initstart\" and \"initend\" values from kitodo_projects.xml like AddtionalField!\n@@ -607,8 +599,8 @@ public class ImportService {\n         } else if (processDetail instanceof ProcessBooleanMetadata) {\n             ((ProcessBooleanMetadata) processDetail).setActive(Boolean.parseBoolean(value));\n         } else if (processDetail instanceof ProcessSelectMetadata) {\n-            ((ProcessSelectMetadata) processDetail).setSelectedItem(value);\n-        }\n+                   ((ProcessSelectMetadata) processDetail).setSelectedItem(value);\n+               }\n     }\n \n     /**\n@@ -617,15 +609,15 @@ public class ImportService {\n      *      as a list of processDetail\n      * @return all creators names as a String\n      */\n+\n+\n     public static String getListOfCreators(List<ProcessDetail> processDetailsList) {\n         String listofAuthors = \"\";\n         for (ProcessDetail detail : processDetailsList) {\n-            if (detail instanceof ProcessFieldedMetadata\n-                    && PERSON.equals(detail.getMetadataID())) {\n+            if (detail instanceof ProcessFieldedMetadata && PERSON.equals(detail.getMetadataID())) {\n                 ProcessFieldedMetadata tableRow = (ProcessFieldedMetadata) detail;\n                 for (ProcessDetail detailsTableRow : tableRow.getRows()) {\n-                    if (ROLE.equals(detailsTableRow.getMetadataID())\n-                            && AUTHOR.equals(getProcessDetailValue(detailsTableRow))) {\n+                    if (ROLE.equals(detailsTableRow.getMetadataID()) && AUTHOR.equals(getProcessDetailValue(detailsTableRow))) {\n                         listofAuthors = listofAuthors.concat(getCreator(tableRow.getRows()));\n                         break;\n                     }\n@@ -635,14 +627,13 @@ public class ImportService {\n         return listofAuthors;\n     }\n \n+\n     private static String getCreator(List<ProcessDetail> processDetailList) {\n         String author = \"\";\n         for (ProcessDetail detail : processDetailList) {\n             String detailMetadataID = detail.getMetadataID();\n             String detailValue = getProcessDetailValue(detail);\n-            if ((FIRST_NAME.equals(detailMetadataID)\n-                    || LAST_NAME.equals(detailMetadataID))\n-                    && !StringUtils.isBlank(detailValue)) {\n+            if ((FIRST_NAME.equals(detailMetadataID) || LAST_NAME.equals(detailMetadataID)) && !StringUtils.isBlank(detailValue)) {\n                 author = author.concat(detailValue);\n             }\n         }\n@@ -656,6 +647,8 @@ public class ImportService {\n      * @throws IOException when trying to create a 'ConfigProject' instance.\n      * @throws DoctypeMissingException when trying to load TifDefinition fails\n      */\n+\n+\n     public void prepare(String projectTitle) throws IOException, DoctypeMissingException {\n         ConfigProject configProject = new ConfigProject(projectTitle);\n         usingTemplates = configProject.isUseTemplates();\n@@ -667,6 +660,8 @@ public class ImportService {\n      *\n      * @return value of useTemplate\n      */\n+\n+\n     public boolean isUsingTemplates() {\n         return usingTemplates;\n     }\n@@ -676,6 +671,8 @@ public class ImportService {\n      *\n      * @param usingTemplates as boolean\n      */\n+\n+\n     public void setUsingTemplates(boolean usingTemplates) {\n         this.usingTemplates = usingTemplates;\n     }\n@@ -685,6 +682,8 @@ public class ImportService {\n      *\n      * @return value of tifDefinition\n      */\n+\n+\n     public String getTiffDefinition() {\n         return tiffDefinition;\n     }\n@@ -694,6 +693,8 @@ public class ImportService {\n      *\n      * @return value of exemplarRecords\n      */\n+\n+\n     public LinkedList<ExemplarRecord> getExemplarRecords() {\n         return exemplarRecords;\n     }\n@@ -708,8 +709,9 @@ public class ImportService {\n      *          list of metadata fields\n      * @throws ParameterNotFoundException if a parameter required for exemplar record extraction is missing\n      */\n-    public static void setSelectedExemplarRecord(ExemplarRecord exemplarRecord, String opac,\n-                                                 List<ProcessDetail> metadata)  throws ParameterNotFoundException {\n+\n+\n+    public static void setSelectedExemplarRecord(ExemplarRecord exemplarRecord, String opac, List<ProcessDetail> metadata) throws ParameterNotFoundException {\n         String ownerMetadataName = OPACConfig.getExemplarFieldOwnerMetadata(opac);\n         String signatureMetadataName = OPACConfig.getExemplarFieldSignatureMetadata(opac);\n         if (StringUtils.isBlank(ownerMetadataName)) {\n@@ -731,22 +733,22 @@ public class ImportService {\n      *\n      * @return value of parentTempProcess\n      */\n+\n+\n     public TempProcess getParentTempProcess() {\n         return parentTempProcess;\n     }\n \n-    private Process loadParentProcess(HashMap<String, String> parentIDMetadata, int rulesetId, int projectId)\n-            throws ProcessGenerationException, DAOException {\n+\n+    private Process loadParentProcess(HashMap<String, String> parentIDMetadata, int rulesetId, int projectId) throws ProcessGenerationException, DAOException {\n         Process parentProcess = null;\n         try {\n             for (ProcessDTO processDTO : ServiceManager.getProcessService().findByMetadata(parentIDMetadata)) {\n                 Process process = ServiceManager.getProcessService().getById(processDTO.getId());\n                 if (Objects.isNull(process.getRuleset()) || Objects.isNull(process.getRuleset().getId())) {\n-                    throw new ProcessGenerationException(\"Ruleset or ruleset ID of potential parent process \"\n-                            + process.getId() + \" is null!\");\n+                    throw new ProcessGenerationException(\"Ruleset or ruleset ID of potential parent process \" + process.getId() + \" is null!\");\n                 }\n-                if (process.getProject().getId() == projectId\n-                        && process.getRuleset().getId().equals(rulesetId)) {\n+                if (process.getProject().getId() == projectId && process.getRuleset().getId().equals(rulesetId)) {\n                     parentProcess = process;\n                     break;\n                 }\n@@ -764,6 +766,8 @@ public class ImportService {\n      * @return whether 'parentElement has been configured or not\n      * @throws ConfigException thrown if configuration for OPAC 'catalogName' could not be found\n      */\n+\n+\n     public boolean isParentElementConfigured(String catalogName) throws ConfigException {\n         loadOpacConfiguration(catalogName);\n         return Objects.nonNull(OPACConfig.getParentIDElement(catalogName));\n@@ -780,13 +784,15 @@ public class ImportService {\n      * @throws InvalidMetadataValueException thrown if TempProcess contains invalid metadata\n      * @throws NoSuchMetadataFieldException thrown if TempProcess contains undefined metadata\n      */\n+\n+\n     public static List<ProcessDetail> transformToProcessDetails(TempProcess tempProcess,\n-                                                         RulesetManagementInterface managementInterface,\n-                                                         String acquisitionStage,\n-                                                         List<Locale.LanguageRange> priorityList)\n-            throws InvalidMetadataValueException, NoSuchMetadataFieldException {\n+                                                                RulesetManagementInterface managementInterface,\n+                                                                String acquisitionStage, List<Locale.LanguageRange> priorityList) throws InvalidMetadataValueException, NoSuchMetadataFieldException {\n         ProcessFieldedMetadata metadata = initializeProcessDetails(tempProcess.getWorkpiece().getRootElement(),\n-                managementInterface, acquisitionStage, priorityList);\n+                                              managementInterface,\n+                                              acquisitionStage,\n+                                              priorityList);\n         metadata.setMetadata(ImportService.importMetadata(tempProcess.getMetadataNodes(), MdSec.DMD_SEC));\n         metadata.preserve();\n         return metadata.getRows();\n@@ -802,17 +808,13 @@ public class ImportService {\n      * @param processDetails List of ProcessDetail objects containing the metadata of the process\n      * @throws ProcessGenerationException thrown if generating the Process title or the TifHeader fails\n      */\n-    public static void createProcessTitle(TempProcess tempProcess,\n-                                            RulesetManagementInterface rulesetManagementInterface,\n-                                            String acquisitionStage, List<Locale.LanguageRange> priorityList,\n-                                            List<ProcessDetail> processDetails)\n-            throws ProcessGenerationException {\n+\n+\n+    public static void createProcessTitle(TempProcess tempProcess, RulesetManagementInterface rulesetManagementInterface, String acquisitionStage, List<Locale.LanguageRange> priorityList, List<ProcessDetail> processDetails) throws ProcessGenerationException {\n         String docType = tempProcess.getWorkpiece().getRootElement().getType();\n-        StructuralElementViewInterface docTypeView = rulesetManagementInterface\n-                .getStructuralElementView(docType, acquisitionStage, priorityList);\n+        StructuralElementViewInterface docTypeView = rulesetManagementInterface.getStructuralElementView(docType, acquisitionStage, priorityList);\n         String processTitle = docTypeView.getProcessTitle().orElse(\"\");\n-        ProcessService.generateProcessTitle(\"\", processDetails,\n-                processTitle, tempProcess.getProcess());\n+        ProcessService.generateProcessTitle(\"\", processDetails, processTitle, tempProcess.getProcess());\n     }\n \n     /**\n@@ -826,12 +828,12 @@ public class ImportService {\n      * @param priorityList List of LanguageRange objects used to create ProcessFieldedMetadata\n      * @return the created ProcessFieldedMetadata\n      */\n+\n+\n     public static ProcessFieldedMetadata initializeProcessDetails(IncludedStructuralElement structure,\n                                                                   RulesetManagementInterface managementInterface,\n-                                                                  String stage,\n-                                                                  List<Locale.LanguageRange> priorityList) {\n-        StructuralElementViewInterface divisionView = managementInterface.getStructuralElementView(structure.getType(),\n-                stage, priorityList);\n+                                                                  String stage, List<Locale.LanguageRange> priorityList) {\n+        StructuralElementViewInterface divisionView = managementInterface.getStructuralElementView(structure.getType(), stage, priorityList);\n         return new ProcessFieldedMetadata(structure, divisionView);\n     }\n \n@@ -842,6 +844,8 @@ public class ImportService {\n      * @return whether a title was changed or not\n      * @throws IOException if the meta.xml file of a process could not be loaded\n      */\n+\n+\n     public static boolean ensureNonEmptyTitles(LinkedList<TempProcess> tempProcesses) throws IOException {\n         boolean changedTitle = false;\n         for (TempProcess tempProcess : tempProcesses) {\n@@ -876,11 +880,9 @@ public class ImportService {\n      * @throws NoSuchMetadataFieldException thrown if process workpiece contains undefined metadata\n      * @throws ProcessGenerationException thrown if process title cannot be created\n      */\n-    public static void processProcessChildren(Process mainProcess, LinkedList<TempProcess> childProcesses,\n-                                              Template template, RulesetManagementInterface managementInterface,\n-                                              String acquisitionStage, List<Locale.LanguageRange> priorityList)\n-            throws DataException, InvalidMetadataValueException, NoSuchMetadataFieldException,\n-            ProcessGenerationException {\n+\n+\n+    public static void processProcessChildren(Process mainProcess, LinkedList<TempProcess> childProcesses, Template template, RulesetManagementInterface managementInterface, String acquisitionStage, List<Locale.LanguageRange> priorityList) throws DataException, InvalidMetadataValueException, NoSuchMetadataFieldException, ProcessGenerationException {\n         for (int i = 0; i < childProcesses.size(); i++) {\n             TempProcess tempProcess = childProcesses.get(i);\n             if (Objects.isNull(tempProcess) || Objects.isNull(tempProcess.getProcess())) {\n@@ -903,8 +905,9 @@ public class ImportService {\n      * @param docType String containing document type\n      * @param imageDescription String containing image description\n      */\n-    public static void addProperties(Process process, Template template, List<ProcessDetail> processDetails,\n-                                     String docType, String imageDescription) {\n+\n+\n+    public static void addProperties(Process process, Template template, List<ProcessDetail> processDetails, String docType, String imageDescription) {\n         addMetadataProperties(processDetails, process);\n         ProcessGenerator.addPropertyForWorkpiece(process, \"DocType\", docType);\n         ProcessGenerator.addPropertyForWorkpiece(process, \"TifHeaderImagedescription\", imageDescription);\n@@ -915,6 +918,7 @@ public class ImportService {\n         }\n     }\n \n+\n     private static void addMetadataProperties(List<ProcessDetail> processDetailList, Process process) {\n         try {\n             for (ProcessDetail processDetail : processDetailList) {\n@@ -934,8 +938,7 @@ public class ImportService {\n                                 ProcessGenerator.addPropertyForProcess(process, processDetail.getLabel(), metadataValue);\n                                 break;\n                             default:\n-                                logger.info(\"Don't save metadata '\" + processDetail.getMetadataID() + \"' with domain '\"\n-                                        + metadata.getDomain() + \"' to property.\");\n+                                logger.info(\"Don't save metadata '\" + processDetail.getMetadataID() + \"' with domain '\" + metadata.getDomain() + \"' to property.\");\n                                 break;\n                         }\n                     } else {\n@@ -953,6 +956,8 @@ public class ImportService {\n      *\n      * @param process Process whose tasks are updated\n      */\n+\n+\n     public static void updateTasks(Process process) {\n         for (Task task : process.getTasks()) {\n             task.setProcessingTime(process.getCreationDate());\n@@ -979,16 +984,21 @@ public class ImportService {\n      * @throws NoSuchMetadataFieldException thrown if the process contains undefined metadata\n      * @throws ProcessGenerationException thrown if process title could not be generated\n      */\n-    public static void processTempProcess(TempProcess tempProcess, Template template,\n-                                          RulesetManagementInterface managementInterface, String acquisitionStage,\n-                                          List<Locale.LanguageRange> priorityList)\n-            throws InvalidMetadataValueException, NoSuchMetadataFieldException, ProcessGenerationException {\n-        List<ProcessDetail> processDetails = transformToProcessDetails(tempProcess, managementInterface,\n-                acquisitionStage, priorityList);\n+\n+\n+    public static void processTempProcess(TempProcess tempProcess,\n+                                          Template template,\n+                                          RulesetManagementInterface managementInterface,\n+                                          String acquisitionStage, List<Locale.LanguageRange> priorityList) throws InvalidMetadataValueException, NoSuchMetadataFieldException, ProcessGenerationException {\n+        List<ProcessDetail> processDetails = transformToProcessDetails(tempProcess, managementInterface, acquisitionStage, priorityList);\n         String docType = tempProcess.getWorkpiece().getRootElement().getType();\n         createProcessTitle(tempProcess, managementInterface, acquisitionStage, priorityList, processDetails);\n         Process process = tempProcess.getProcess();\n-        addProperties(tempProcess.getProcess(), template, processDetails, docType, tempProcess.getProcess().getTitle());\n+        addProperties(tempProcess.getProcess(),\n+            template,\n+            processDetails,\n+            docType,\n+            tempProcess.getProcess().getTitle());\n         updateTasks(process);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 177
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "484",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 252).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "484",
                    "column": "61",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "484",
                    "column": "103",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "484",
                    "column": "103",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "484",
                    "column": "106",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "484",
                    "column": "106",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "484",
                    "column": "110",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "484",
                    "column": "110",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "484",
                    "column": "145",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not followed by whitespace. Empty blocks may only be represented as {} when not part of a multi-block statement (4.1.3)",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "484",
                    "column": "145",
                    "severity": "warning",
                    "message": "WhitespaceAround: '+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "484",
                    "column": "252",
                    "severity": "warning",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/34/ImportService.java\nindex fde04f88069..427e3d15d20 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/34/ImportService.java\n@@ -481,8 +481,7 @@ public class ImportService {\n         SearchResult childSearchResult = searchChildRecords(opac, elementID, rows);\n         LinkedList<TempProcess> childProcesses = new LinkedList<>();\n         for (SingleHit hit : childSearchResult.getHits()) {\n-            System.out.println(\"Creating TempProcess for \" + (childSearchResult.getHits().indexOf(hit) + 1) + \"/\" + childSearchResult.getHits().size() + \" child record...\");\n-            Document childDocument = importDocument(opac, hit.getIdentifier(), false);\n+            System.out.println( \"Creating TempProcess for \" +(childSearchResult.getHits().indexOf(hit)+1)+\"/\"+childSearchResult.getHits().size()+\" child record...\");DocumentchildDocument childDocument = importDocument(opac, hit.getIdentifier(), false);\n             childProcesses.add(createTempProcessFromDocument(childDocument, templateId, projectId));\n         }\n         // TODO: sort child processes (by what? catalog ID? Signature?)\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "483",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "483",
                    "column": "61",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "484",
                    "column": "9",
                    "severity": "warning",
                    "message": "'for' child has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/34/ImportService.java\nindex fde04f88069..47d83b5b0b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/34/ImportService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/34/ImportService.java\n@@ -480,9 +480,8 @@ public class ImportService {\n             ParserConfigurationException, NoRecordFoundException, IOException, ProcessGenerationException {\n         SearchResult childSearchResult = searchChildRecords(opac, elementID, rows);\n         LinkedList<TempProcess> childProcesses = new LinkedList<>();\n-        for (SingleHit hit : childSearchResult.getHits()) {\n-            System.out.println(\"Creating TempProcess for \" + (childSearchResult.getHits().indexOf(hit) + 1) + \"/\" + childSearchResult.getHits().size() + \" child record...\");\n-            Document childDocument = importDocument(opac, hit.getIdentifier(), false);\n+        for (SingleHit hit : childSearchResult.getHits()) { System.out.println(\"Creating TempProcess for \" + (childSearchResult.getHits().indexOf(hit) + 1) + \"/\" + childSearchResult.getHits().size() + \" child record...\");\n+        Document childDocument = importDocument(opac, hit.getIdentifier(), false);\n             childProcesses.add(createTempProcessFromDocument(childDocument, templateId, projectId));\n         }\n         // TODO: sort child processes (by what? catalog ID? Signature?)\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}