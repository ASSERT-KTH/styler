{
    "project_name": "neo4j-neo4j",
    "error_id": "2892",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2892/TemporalValueWriterAdapter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2892/TemporalValueWriterAdapter.java\nindex c292c78bd78..0eee11aa850 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2892/TemporalValueWriterAdapter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2892/TemporalValueWriterAdapter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.utils;\n \n import java.time.LocalDate;\n@@ -43,49 +44,48 @@ import static java.time.ZoneOffset.UTC;\n public abstract class TemporalValueWriterAdapter<E extends Exception> extends ValueWriter.Adapter<E>\n {\n     @Override\n-    public final void writeDate( LocalDate localDate ) throws E\n+    public final void writeDate(LocalDate localDate) throws E\n     {\n-        writeDate( localDate.toEpochDay() );\n+        writeDate(localDate.toEpochDay());\n     }\n \n     @Override\n-    public final void writeLocalTime( LocalTime localTime ) throws E\n+    public final void writeLocalTime(LocalTime localTime) throws E\n     {\n-        writeLocalTime( localTime.toNanoOfDay() );\n+        writeLocalTime(localTime.toNanoOfDay());\n     }\n \n     @Override\n-    public final void writeTime( OffsetTime offsetTime ) throws E\n+    public final void writeTime(OffsetTime offsetTime) throws E\n     {\n-        long nanosOfDayUTC = TemporalUtil.getNanosOfDayUTC( offsetTime );\n+        long nanosOfDayUTC = TemporalUtil.getNanosOfDayUTC(offsetTime);\n         int offsetSeconds = offsetTime.getOffset().getTotalSeconds();\n-        writeTime( nanosOfDayUTC, offsetSeconds );\n+        writeTime(nanosOfDayUTC, offsetSeconds);\n     }\n \n     @Override\n-    public final void writeLocalDateTime( LocalDateTime localDateTime ) throws E\n+    public final void writeLocalDateTime(LocalDateTime localDateTime) throws E\n     {\n-        long epochSecond = localDateTime.toEpochSecond( UTC );\n+        long epochSecond = localDateTime.toEpochSecond(UTC);\n         int nano = localDateTime.getNano();\n-        writeLocalDateTime( epochSecond, nano );\n+        writeLocalDateTime(epochSecond, nano);\n     }\n \n     @Override\n-    public final void writeDateTime( ZonedDateTime zonedDateTime ) throws E\n+    public final void writeDateTime(ZonedDateTime zonedDateTime) throws E\n     {\n         long epochSecondUTC = zonedDateTime.toEpochSecond();\n         int nano = zonedDateTime.getNano();\n \n         ZoneId zone = zonedDateTime.getZone();\n-        if ( zone instanceof ZoneOffset )\n+        if (zone instanceof ZoneOffset)\n         {\n             int offsetSeconds = ((ZoneOffset) zone).getTotalSeconds();\n-            writeDateTime( epochSecondUTC, nano, offsetSeconds );\n-        }\n-        else\n+            writeDateTime(epochSecondUTC, nano, offsetSeconds);\n+        } else\n         {\n             String zoneId = zone.getId();\n-            writeDateTime( epochSecondUTC, nano, zoneId );\n+            writeDateTime(epochSecondUTC, nano, zoneId);\n         }\n     }\n \n@@ -94,7 +94,7 @@ public abstract class TemporalValueWriterAdapter<E extends Exception> extends Va\n      *\n      * @param epochDay the epoch day.\n      */\n-    protected void writeDate( long epochDay ) throws E\n+    protected void writeDate(long epochDay) throws E\n     {\n     }\n \n@@ -103,7 +103,7 @@ public abstract class TemporalValueWriterAdapter<E extends Exception> extends Va\n      *\n      * @param nanoOfDay the nanosecond of the day.\n      */\n-    protected void writeLocalTime( long nanoOfDay ) throws E\n+    protected void writeLocalTime(long nanoOfDay) throws E\n     {\n     }\n \n@@ -113,7 +113,7 @@ public abstract class TemporalValueWriterAdapter<E extends Exception> extends Va\n      * @param nanosOfDayUTC nanoseconds of day in UTC. will be between -18h and +42h\n      * @param offsetSeconds time zone offset in seconds\n      */\n-    protected void writeTime( long nanosOfDayUTC, int offsetSeconds ) throws E\n+    protected void writeTime(long nanosOfDayUTC, int offsetSeconds) throws E\n     {\n     }\n \n@@ -121,9 +121,9 @@ public abstract class TemporalValueWriterAdapter<E extends Exception> extends Va\n      * Write local date-time value obtained from {@link LocalDateTime} in {@link #writeLocalDateTime(LocalDateTime)}.\n      *\n      * @param epochSecond the epoch second in UTC.\n-     * @param nano the nanosecond.\n+     * @param nano        the nanosecond.\n      */\n-    protected void writeLocalDateTime( long epochSecond, int nano ) throws E\n+    protected void writeLocalDateTime(long epochSecond, int nano) throws E\n     {\n     }\n \n@@ -131,10 +131,10 @@ public abstract class TemporalValueWriterAdapter<E extends Exception> extends Va\n      * Write zoned date-time value obtained from {@link ZonedDateTime} in {@link #writeDateTime(ZonedDateTime)}.\n      *\n      * @param epochSecondUTC the epoch second in UTC (no offset).\n-     * @param nano the nanosecond.\n-     * @param offsetSeconds the offset in seconds.\n+     * @param nano           the nanosecond.\n+     * @param offsetSeconds  the offset in seconds.\n      */\n-    protected void writeDateTime( long epochSecondUTC, int nano, int offsetSeconds ) throws E\n+    protected void writeDateTime(long epochSecondUTC, int nano, int offsetSeconds) throws E\n     {\n     }\n \n@@ -142,10 +142,10 @@ public abstract class TemporalValueWriterAdapter<E extends Exception> extends Va\n      * Write zoned date-time value obtained from {@link ZonedDateTime} in {@link #writeDateTime(ZonedDateTime)}.\n      *\n      * @param epochSecondUTC the epoch second in UTC (no offset).\n-     * @param nano the nanosecond.\n-     * @param zoneId the timezone id.\n+     * @param nano           the nanosecond.\n+     * @param zoneId         the timezone id.\n      */\n-    protected void writeDateTime( long epochSecondUTC, int nano, String zoneId ) throws E\n+    protected void writeDateTime(long epochSecondUTC, int nano, String zoneId) throws E\n     {\n     }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}