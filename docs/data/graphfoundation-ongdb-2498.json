{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2498",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2498/CommittedTransactionRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2498/CommittedTransactionRepresentation.java\nindex 5fc12c0e3a5..8ab521a0759 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2498/CommittedTransactionRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2498/CommittedTransactionRepresentation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction;\n \n import java.io.IOException;\n@@ -35,69 +36,69 @@ import org.neo4j.storageengine.api.StorageCommand;\n  */\n public class CommittedTransactionRepresentation\n {\n-    private final LogEntryStart startEntry;\n-    private final TransactionRepresentation transactionRepresentation;\n-    private final LogEntryCommit commitEntry;\n+  private final LogEntryStart startEntry;\n+  private final TransactionRepresentation transactionRepresentation;\n+  private final LogEntryCommit commitEntry;\n \n-    public CommittedTransactionRepresentation( LogEntryStart startEntry, TransactionRepresentation\n-            transactionRepresentation, LogEntryCommit commitEntry )\n-    {\n-        this.startEntry = startEntry;\n-        this.transactionRepresentation = transactionRepresentation;\n-        this.commitEntry = commitEntry;\n-    }\n+  public CommittedTransactionRepresentation(LogEntryStart startEntry, TransactionRepresentation\n+      transactionRepresentation, LogEntryCommit commitEntry)\n+  {\n+    this.startEntry = startEntry;\n+    this.transactionRepresentation = transactionRepresentation;\n+    this.commitEntry = commitEntry;\n+  }\n \n-    public void accept( Visitor<StorageCommand, IOException> visitor ) throws IOException\n-    {\n-        transactionRepresentation.accept( visitor );\n-    }\n+  public void accept(Visitor<StorageCommand, IOException> visitor) throws IOException\n+  {\n+    transactionRepresentation.accept(visitor);\n+  }\n \n-    public LogEntryStart getStartEntry()\n-    {\n-        return startEntry;\n-    }\n+  public LogEntryStart getStartEntry()\n+  {\n+    return startEntry;\n+  }\n \n-    public TransactionRepresentation getTransactionRepresentation()\n-    {\n-        return transactionRepresentation;\n-    }\n+  public TransactionRepresentation getTransactionRepresentation()\n+  {\n+    return transactionRepresentation;\n+  }\n \n-    public LogEntryCommit getCommitEntry()\n-    {\n-        return commitEntry;\n-    }\n+  public LogEntryCommit getCommitEntry()\n+  {\n+    return commitEntry;\n+  }\n \n-    @Override\n-    public String toString()\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName() +\n+        \"[\" + startEntry + \", \" + transactionRepresentation + \", \" + commitEntry + \"]\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return getClass().getSimpleName() +\n-                \"[\" + startEntry + \", \" + transactionRepresentation + \", \" + commitEntry + \"]\";\n+      return true;\n     }\n-\n-    @Override\n-    public boolean equals( Object o )\n+    if (o == null || getClass() != o.getClass())\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n+      return false;\n+    }\n \n-        CommittedTransactionRepresentation that = (CommittedTransactionRepresentation) o;\n+    CommittedTransactionRepresentation that = (CommittedTransactionRepresentation) o;\n \n-        return commitEntry.equals( that.commitEntry ) && startEntry.equals( that.startEntry ) &&\n-               transactionRepresentation.equals( that.transactionRepresentation );\n-    }\n+    return commitEntry.equals(that.commitEntry) && startEntry.equals(that.startEntry) &&\n+        transactionRepresentation.equals(that.transactionRepresentation);\n+  }\n \n-    @Override\n-    public int hashCode()\n-    {\n-        int result = startEntry.hashCode();\n-        result = 31 * result + transactionRepresentation.hashCode();\n-        result = 31 * result + commitEntry.hashCode();\n-        return result;\n-    }\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = startEntry.hashCode();\n+    result = 31 * result + transactionRepresentation.hashCode();\n+    result = 31 * result + commitEntry.hashCode();\n+    return result;\n+  }\n }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 163).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "90",
                    "column": "95",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2498/CommittedTransactionRepresentation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2498/CommittedTransactionRepresentation.java\nindex 5fc12c0e3a5..310d83ad299 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2498/CommittedTransactionRepresentation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2498/CommittedTransactionRepresentation.java\n@@ -39,15 +39,14 @@ public class CommittedTransactionRepresentation\n     private final TransactionRepresentation transactionRepresentation;\n     private final LogEntryCommit commitEntry;\n \n-    public CommittedTransactionRepresentation( LogEntryStart startEntry, TransactionRepresentation\n-            transactionRepresentation, LogEntryCommit commitEntry )\n+    public CommittedTransactionRepresentation( LogEntryStart startEntry, TransactionRepresentation transactionRepresentation, LogEntryCommit commitEntry )\n     {\n         this.startEntry = startEntry;\n         this.transactionRepresentation = transactionRepresentation;\n         this.commitEntry = commitEntry;\n     }\n \n-    public void accept( Visitor<StorageCommand, IOException> visitor ) throws IOException\n+    public void accept( Visitor<StorageCommand,IOException> visitor ) throws IOException\n     {\n         transactionRepresentation.accept( visitor );\n     }\n@@ -70,8 +69,7 @@ public class CommittedTransactionRepresentation\n     @Override\n     public String toString()\n     {\n-        return getClass().getSimpleName() +\n-                \"[\" + startEntry + \", \" + transactionRepresentation + \", \" + commitEntry + \"]\";\n+        return getClass().getSimpleName() + \"[\" + startEntry + \", \" + transactionRepresentation + \", \" + commitEntry + \"]\";\n     }\n \n     @Override\n@@ -81,15 +79,15 @@ public class CommittedTransactionRepresentation\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n \n         CommittedTransactionRepresentation that = (CommittedTransactionRepresentation) o;\n \n-        return commitEntry.equals( that.commitEntry ) && startEntry.equals( that.startEntry ) &&\n-               transactionRepresentation.equals( that.transactionRepresentation );\n+        return commitEntry.equals( that.commitEntry ) && startEntry.equals( that.startEntry ) &&transactionRepresentation.equals( that.transactionRepresentation );\n     }\n \n     @Override\n@@ -100,4 +98,4 @@ public class CommittedTransactionRepresentation\n         result = 31 * result + commitEntry.hashCode();\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}