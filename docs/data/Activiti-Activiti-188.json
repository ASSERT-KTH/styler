{
    "project_name": "Activiti-Activiti",
    "error_id": "188",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.engine.impl.util;\n\nimport java.util.ArrayList;\nimport java.util.Collection;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/188/ExecutionGraphUtil.java\nindex a4767624da4..dac0601ec6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/188/ExecutionGraphUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.util;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/188/ExecutionGraphUtil.java\nindex a4767624da4..c130ce04545 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/188/ExecutionGraphUtil.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.util;\n \n import java.util.ArrayList;\n@@ -30,114 +31,114 @@ import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n \n public class ExecutionGraphUtil {\n \n-  /**\n-   * Takes in a collection of executions belonging to the same process instance. Orders the executions in a list, first elements are the leaf, last element is the root elements.\n-   */\n-  public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> executions) {\n-    List<ExecutionEntity> orderedList = new ArrayList<ExecutionEntity>(executions.size());\n-\n-    // Root elements\n-    HashSet<String> previousIds = new HashSet<String>();\n-    for (ExecutionEntity execution : executions) {\n-      if (execution.getParentId() == null) {\n-        orderedList.add(execution);\n-        previousIds.add(execution.getId());\n-      }\n-    }\n+    /**\n+     * Takes in a collection of executions belonging to the same process instance. Orders the executions in a list, first elements are the leaf, last element is the root elements.\n+     */\n+    public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> executions) {\n+        List<ExecutionEntity> orderedList = new ArrayList<ExecutionEntity>(executions.size());\n+\n+        // Root elements\n+        HashSet<String> previousIds = new HashSet<String>();\n+        for (ExecutionEntity execution : executions) {\n+            if (execution.getParentId() == null) {\n+                orderedList.add(execution);\n+                previousIds.add(execution.getId());\n+            }\n+        }\n \n-    // Non-root elements\n-    while (orderedList.size() < executions.size()) {\n-      for (ExecutionEntity execution : executions) {\n-        if (!previousIds.contains(execution.getId()) && previousIds.contains(execution.getParentId())) {\n-          orderedList.add(execution);\n-          previousIds.add(execution.getId());\n+        // Non-root elements\n+        while (orderedList.size() < executions.size()) {\n+            for (ExecutionEntity execution : executions) {\n+                if (!previousIds.contains(execution.getId()) && previousIds.contains(execution.getParentId())) {\n+                    orderedList.add(execution);\n+                    previousIds.add(execution.getId());\n+                }\n+            }\n         }\n-      }\n-    }\n \n-    return orderedList;\n-  }\n-\n-  public static List<ExecutionEntity> orderFromLeafToRoot(Collection<ExecutionEntity> executions) {\n-    List<ExecutionEntity> orderedList = orderFromRootToLeaf(executions);\n-    Collections.reverse(orderedList);\n-    return orderedList;\n-  }\n-\n-  /**\n-   * Verifies if the element with the given source identifier can reach the element with the target identifier through following sequence flow.\n-   */\n-  public static boolean isReachable(String processDefinitionId, String sourceElementId, String targetElementId) {\n-\n-    // Fetch source and target elements\n-    Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);\n-\n-    FlowElement sourceFlowElement = process.getFlowElement(sourceElementId, true);\n-    FlowNode sourceElement = null;\n-    if (sourceFlowElement instanceof FlowNode) {\n-      sourceElement = (FlowNode) sourceFlowElement;\n-    } else if (sourceFlowElement instanceof SequenceFlow) {\n-      sourceElement = (FlowNode) ((SequenceFlow) sourceFlowElement).getTargetFlowElement();\n+        return orderedList;\n     }\n \n-    FlowElement targetFlowElement = process.getFlowElement(targetElementId, true);\n-    FlowNode targetElement = null;\n-    if (targetFlowElement instanceof FlowNode) {\n-      targetElement = (FlowNode) targetFlowElement;\n-    } else if (targetFlowElement instanceof SequenceFlow) {\n-      targetElement = (FlowNode) ((SequenceFlow) targetFlowElement).getTargetFlowElement();\n+    public static List<ExecutionEntity> orderFromLeafToRoot(Collection<ExecutionEntity> executions) {\n+        List<ExecutionEntity> orderedList = orderFromRootToLeaf(executions);\n+        Collections.reverse(orderedList);\n+        return orderedList;\n     }\n \n-    if (sourceElement == null) {\n-      throw new ActivitiException(\"Invalid sourceElementId '\" + sourceElementId + \"': no element found for this id n process definition '\" + processDefinitionId + \"'\");\n-    }\n-    if (targetElement == null) {\n-      throw new ActivitiException(\"Invalid targetElementId '\" + targetElementId + \"': no element found for this id n process definition '\" + processDefinitionId + \"'\");\n-    }\n+    /**\n+     * Verifies if the element with the given source identifier can reach the element with the target identifier through following sequence flow.\n+     */\n+    public static boolean isReachable(String processDefinitionId, String sourceElementId, String targetElementId) {\n \n-    Set<String> visitedElements = new HashSet<String>();\n-    return isReachable(process, sourceElement, targetElement, visitedElements);\n-  }\n+        // Fetch source and target elements\n+        Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);\n \n-  public static boolean isReachable(Process process, FlowNode sourceElement, FlowNode targetElement, Set<String> visitedElements) {\n+        FlowElement sourceFlowElement = process.getFlowElement(sourceElementId, true);\n+        FlowNode sourceElement = null;\n+        if (sourceFlowElement instanceof FlowNode) {\n+            sourceElement = (FlowNode) sourceFlowElement;\n+        } else if (sourceFlowElement instanceof SequenceFlow) {\n+            sourceElement = (FlowNode) ((SequenceFlow) sourceFlowElement).getTargetFlowElement();\n+        }\n \n-    // No outgoing seq flow: could be the end of eg . the process or an embedded subprocess\n-    if (sourceElement.getOutgoingFlows().size() == 0) {\n-      visitedElements.add(sourceElement.getId());\n+        FlowElement targetFlowElement = process.getFlowElement(targetElementId, true);\n+        FlowNode targetElement = null;\n+        if (targetFlowElement instanceof FlowNode) {\n+            targetElement = (FlowNode) targetFlowElement;\n+        } else if (targetFlowElement instanceof SequenceFlow) {\n+            targetElement = (FlowNode) ((SequenceFlow) targetFlowElement).getTargetFlowElement();\n+        }\n \n-      FlowElementsContainer parentElement = process.findParent(sourceElement);\n-      if (parentElement instanceof SubProcess) {\n-        sourceElement = (SubProcess) parentElement;\n-      } else {\n-        return false;\n-      }\n-    }\n+        if (sourceElement == null) {\n+            throw new ActivitiException(\"Invalid sourceElementId '\" + sourceElementId + \"': no element found for this id n process definition '\" + processDefinitionId + \"'\");\n+        }\n+        if (targetElement == null) {\n+            throw new ActivitiException(\"Invalid targetElementId '\" + targetElementId + \"': no element found for this id n process definition '\" + processDefinitionId + \"'\");\n+        }\n \n-    if (sourceElement.getId().equals(targetElement.getId())) {\n-      return true;\n+        Set<String> visitedElements = new HashSet<String>();\n+        return isReachable(process, sourceElement, targetElement, visitedElements);\n     }\n \n-    // To avoid infinite looping, we must capture every node we visit\n-    // and check before going further in the graph if we have already\n-    // visited the node.\n-    visitedElements.add(sourceElement.getId());\n+    public static boolean isReachable(Process process, FlowNode sourceElement, FlowNode targetElement, Set<String> visitedElements) {\n \n-    List<SequenceFlow> sequenceFlows = sourceElement.getOutgoingFlows();\n-    if (sequenceFlows != null && sequenceFlows.size() > 0) {\n-      for (SequenceFlow sequenceFlow : sequenceFlows) {\n-        String targetRef = sequenceFlow.getTargetRef();\n-        FlowNode sequenceFlowTarget = (FlowNode) process.getFlowElement(targetRef, true);\n-        if (sequenceFlowTarget != null && !visitedElements.contains(sequenceFlowTarget.getId())) {\n-          boolean reachable = isReachable(process, sequenceFlowTarget, targetElement, visitedElements);\n+        // No outgoing seq flow: could be the end of eg . the process or an embedded subprocess\n+        if (sourceElement.getOutgoingFlows().size() == 0) {\n+            visitedElements.add(sourceElement.getId());\n \n-          if (reachable) {\n+            FlowElementsContainer parentElement = process.findParent(sourceElement);\n+            if (parentElement instanceof SubProcess) {\n+                sourceElement = (SubProcess) parentElement;\n+            } else {\n+                return false;\n+            }\n+        }\n+\n+        if (sourceElement.getId().equals(targetElement.getId())) {\n             return true;\n-          }\n         }\n-      }\n-    }\n \n-    return false;\n-  }\n+        // To avoid infinite looping, we must capture every node we visit\n+        // and check before going further in the graph if we have already\n+        // visited the node.\n+        visitedElements.add(sourceElement.getId());\n+\n+        List<SequenceFlow> sequenceFlows = sourceElement.getOutgoingFlows();\n+        if (sequenceFlows != null && sequenceFlows.size() > 0) {\n+            for (SequenceFlow sequenceFlow : sequenceFlows) {\n+                String targetRef = sequenceFlow.getTargetRef();\n+                FlowNode sequenceFlowTarget = (FlowNode) process.getFlowElement(targetRef, true);\n+                if (sequenceFlowTarget != null && !visitedElements.contains(sequenceFlowTarget.getId())) {\n+                    boolean reachable = isReachable(process, sequenceFlowTarget, targetElement, visitedElements);\n+\n+                    if (reachable) {\n+                        return true;\n+                    }\n+                }\n+            }\n+        }\n+\n+        return false;\n+    }\n \n }\n",
            "diff_size": 133
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/188/ExecutionGraphUtil.java\nindex a4767624da4..1890102269f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/188/ExecutionGraphUtil.java\n@@ -18,7 +18,6 @@ import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import org.activiti.bpmn.model.FlowElement;\n import org.activiti.bpmn.model.FlowElementsContainer;\n import org.activiti.bpmn.model.FlowNode;\n@@ -28,11 +27,13 @@ import org.activiti.bpmn.model.SubProcess;\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.impl.persistence.entity.ExecutionEntity;\n \n+\n public class ExecutionGraphUtil {\n \n   /**\n    * Takes in a collection of executions belonging to the same process instance. Orders the executions in a list, first elements are the leaf, last element is the root elements.\n    */\n+\n   public static List<ExecutionEntity> orderFromRootToLeaf(Collection<ExecutionEntity> executions) {\n     List<ExecutionEntity> orderedList = new ArrayList<ExecutionEntity>(executions.size());\n \n@@ -54,7 +55,6 @@ public class ExecutionGraphUtil {\n         }\n       }\n     }\n-\n     return orderedList;\n   }\n \n@@ -67,11 +67,11 @@ public class ExecutionGraphUtil {\n   /**\n    * Verifies if the element with the given source identifier can reach the element with the target identifier through following sequence flow.\n    */\n+\n   public static boolean isReachable(String processDefinitionId, String sourceElementId, String targetElementId) {\n \n     // Fetch source and target elements\n     Process process = ProcessDefinitionUtil.getProcess(processDefinitionId);\n-\n     FlowElement sourceFlowElement = process.getFlowElement(sourceElementId, true);\n     FlowNode sourceElement = null;\n     if (sourceFlowElement instanceof FlowNode) {\n@@ -87,7 +87,6 @@ public class ExecutionGraphUtil {\n     } else if (targetFlowElement instanceof SequenceFlow) {\n       targetElement = (FlowNode) ((SequenceFlow) targetFlowElement).getTargetFlowElement();\n     }\n-\n     if (sourceElement == null) {\n       throw new ActivitiException(\"Invalid sourceElementId '\" + sourceElementId + \"': no element found for this id n process definition '\" + processDefinitionId + \"'\");\n     }\n@@ -96,7 +95,10 @@ public class ExecutionGraphUtil {\n     }\n \n     Set<String> visitedElements = new HashSet<String>();\n-    return isReachable(process, sourceElement, targetElement, visitedElements);\n+    return isReachable(process,\n+                       sourceElement,\n+                       targetElement,\n+                       visitedElements);\n   }\n \n   public static boolean isReachable(Process process, FlowNode sourceElement, FlowNode targetElement, Set<String> visitedElements) {\n@@ -112,7 +114,6 @@ public class ExecutionGraphUtil {\n         return false;\n       }\n     }\n-\n     if (sourceElement.getId().equals(targetElement.getId())) {\n       return true;\n     }\n@@ -124,20 +125,20 @@ public class ExecutionGraphUtil {\n \n     List<SequenceFlow> sequenceFlows = sourceElement.getOutgoingFlows();\n     if (sequenceFlows != null && sequenceFlows.size() > 0) {\n-      for (SequenceFlow sequenceFlow : sequenceFlows) {\n-        String targetRef = sequenceFlow.getTargetRef();\n-        FlowNode sequenceFlowTarget = (FlowNode) process.getFlowElement(targetRef, true);\n-        if (sequenceFlowTarget != null && !visitedElements.contains(sequenceFlowTarget.getId())) {\n-          boolean reachable = isReachable(process, sequenceFlowTarget, targetElement, visitedElements);\n-\n-          if (reachable) {\n-            return true;\n-          }\n+        for (SequenceFlow sequenceFlow : sequenceFlows) {\n+            String targetRef = sequenceFlow.getTargetRef();\n+            FlowNode sequenceFlowTarget = (FlowNode) process.getFlowElement(targetRef, true);\n+            if (sequenceFlowTarget != null && !visitedElements.contains(sequenceFlowTarget.getId())) {\n+              boolean reachable = isReachable(process,\n+                                              sequenceFlowTarget,\n+                                              targetElement,\n+                                              visitedElements);\n+              if (reachable) {\n+                return true;\n+              }\n+            }\n         }\n-      }\n     }\n-\n     return false;\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/188/ExecutionGraphUtil.java\nindex a4767624da4..dac0601ec6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/188/ExecutionGraphUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.util;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/188/ExecutionGraphUtil.java\nindex a4767624da4..dac0601ec6e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/188/ExecutionGraphUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/188/ExecutionGraphUtil.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.engine.impl.util;\n \n import java.util.ArrayList;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}