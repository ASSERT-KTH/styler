{
    "project_name": "eclipse-kura",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "203",
                "column": "74",
                "severity": "error",
                "message": "'>' is followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
            }
        ]
    },
    "source_code": "        }\n        // Sort pids in reverse order (useful when stop processes...)\n        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer> comparingByValue().reversed())\n                .collect(Collectors.toMap(Map.Entry::getKey, e -> new LinuxPid(e.getValue()), (e1, e2) -> e1,\n                        LinkedHashMap::new));\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/3/ExecutorUtil.java\nindex b81c1c90d56..a4a3c45bc64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler/3/ExecutorUtil.java\n@@ -200,7 +200,7 @@ public class ExecutorUtil {\n             }\n         }\n         // Sort pids in reverse order (useful when stop processes...)\n-        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer> comparingByValue().reversed())\n+        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer>comparingByValue().reversed())\n                 .collect(Collectors.toMap(Map.Entry::getKey, e -> new LinuxPid(e.getValue()), (e1, e2) -> e1,\n                         LinkedHashMap::new));\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/3/ExecutorUtil.java\nindex b81c1c90d56..8ab241eb8c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/intellij/3/ExecutorUtil.java\n@@ -9,6 +9,7 @@\n  * Contributors:\n  *     Eurotech\n  *******************************************************************************/\n+\n package org.eclipse.kura.core.internal.linux.executor;\n \n import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -200,9 +201,9 @@ public class ExecutorUtil {\n             }\n         }\n         // Sort pids in reverse order (useful when stop processes...)\n-        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer> comparingByValue().reversed())\n-                .collect(Collectors.toMap(Map.Entry::getKey, e -> new LinuxPid(e.getValue()), (e1, e2) -> e1,\n-                        LinkedHashMap::new));\n+        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer>comparingByValue().reversed())\n+            .collect(Collectors.toMap(Map.Entry::getKey, e -> new LinuxPid(e.getValue()), (e1, e2) -> e1,\n+                LinkedHashMap::new));\n     }\n \n     private static boolean checkLine(String line, String[] tokens) {\n@@ -246,7 +247,7 @@ public class ExecutorUtil {\n         DefaultExecutor executor = new DefaultExecutor();\n         int timeout = command.getTimeout();\n         ExecuteWatchdog watchdog = timeout <= 0 ? new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT)\n-                : new ExecuteWatchdog(timeout * 1000L);\n+            : new ExecuteWatchdog(timeout * 1000L);\n         executor.setWatchdog(watchdog);\n \n         OutputStream out = command.getOutputStream();\n@@ -302,7 +303,7 @@ public class ExecutorUtil {\n         if (logger.isInfoEnabled()) {\n             logger.info(\"Attempting to send {} to process with pid {}\", ((LinuxSignal) signal).name(), pidNumber);\n         }\n-        return new String[] { \"kill\", \"-\" + signal.getSignalNumber(), String.valueOf(pidNumber) };\n+        return new String[] {\"kill\", \"-\" + signal.getSignalNumber(), String.valueOf(pidNumber)};\n     }\n \n     private static CommandLine buildUnprivilegedCommand(Command command) {\n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "203",
                    "column": "74",
                    "severity": "error",
                    "message": "'>' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/3/ExecutorUtil.java\nindex b81c1c90d56..14db26d89c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/naturalize/3/ExecutorUtil.java\n@@ -351,4 +351,4 @@ public class ExecutorUtil {\n         return commandLine;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 219).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/3/ExecutorUtil.java\nindex b81c1c90d56..fb3fc87e471 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/codebuff/3/ExecutorUtil.java\n@@ -25,7 +25,6 @@ import java.util.Map;\n import java.util.StringTokenizer;\n import java.util.function.Consumer;\n import java.util.stream.Collectors;\n-\n import org.apache.commons.exec.CommandLine;\n import org.apache.commons.exec.DefaultExecutor;\n import org.apache.commons.exec.ExecuteException;\n@@ -50,7 +49,6 @@ public class ExecutorUtil {\n     private static final String COMMAND_MESSAGE = \"Command \";\n     private static final String FAILED_TO_GET_PID_MESSAGE = \"Failed to get pid for command '{}'\";\n     private static final File TEMP_DIR = new File(System.getProperty(\"java.io.tmpdir\"));\n-\n     private static String commandUsername = \"kura\";\n \n     private ExecutorUtil() {\n@@ -133,17 +131,17 @@ public class ExecutorUtil {\n         String psCommand = \"ps -p \" + pidString;\n         CommandLine commandLine = CommandLine.parse(psCommand);\n         DefaultExecutor executor = new DefaultExecutor();\n-\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final ByteArrayOutputStream err = new ByteArrayOutputStream();\n         final PumpStreamHandler handler = new PumpStreamHandler(out, err);\n-\n         executor.setStreamHandler(handler);\n         executor.setWorkingDirectory(TEMP_DIR);\n         executor.setExitValue(0);\n+\n         int exitValue;\n         try {\n             exitValue = executor.execute(commandLine);\n+\n             if (exitValue == 0 && new String(out.toByteArray(), UTF_8).contains(pidString)) {\n                 isRunning = true;\n             }\n@@ -162,14 +160,13 @@ public class ExecutorUtil {\n         CommandLine psCommandLine = new CommandLine(\"ps\");\n         psCommandLine.addArgument(\"-ax\");\n         DefaultExecutor executor = new DefaultExecutor();\n-\n         final ByteArrayOutputStream out = new ByteArrayOutputStream();\n         final ByteArrayOutputStream err = new ByteArrayOutputStream();\n         final PumpStreamHandler handler = new PumpStreamHandler(out, err);\n-\n         executor.setStreamHandler(handler);\n         executor.setWorkingDirectory(TEMP_DIR);\n         executor.setExitValue(0);\n+\n         int exitValue = 1;\n         try {\n             exitValue = executor.execute(psCommandLine);\n@@ -195,14 +192,13 @@ public class ExecutorUtil {\n \n             // get the remainder of the line showing the command that was issued\n             line = line.substring(line.indexOf(st.nextToken()));\n+\n             if (checkLine(line, commandLine)) {\n                 pids.put(line, Integer.parseInt(pid));\n             }\n         }\n         // Sort pids in reverse order (useful when stop processes...)\n-        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer> comparingByValue().reversed())\n-                .collect(Collectors.toMap(Map.Entry::getKey, e -> new LinuxPid(e.getValue()), (e1, e2) -> e1,\n-                        LinkedHashMap::new));\n+        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer>comparingByValue().reversed()).collect(Collectors.toMap(Map.Entry::getKey, e -> new LinuxPid(e.getValue()), (e1, e2) -> e1, LinkedHashMap::new));\n     }\n \n     private static boolean checkLine(String line, String[] tokens) {\n@@ -214,9 +210,7 @@ public class ExecutorUtil {\n         commandStatus.setOutputStream(command.getOutputStream());\n         commandStatus.setErrorStream(command.getErrorStream());\n         commandStatus.setInputStream(command.getInputStream());\n-\n         DefaultExecutor executor = configureExecutor(command);\n-\n         int exitStatus = 0;\n         logger.debug(\"Executing: {}\", commandLine);\n         try {\n@@ -238,17 +232,14 @@ public class ExecutorUtil {\n             commandStatus.setExitStatus(new LinuxExitStatus(exitStatus));\n             commandStatus.setTimedout(executor.getWatchdog().killedProcess());\n         }\n-\n         return commandStatus;\n     }\n \n     private static DefaultExecutor configureExecutor(Command command) {\n         DefaultExecutor executor = new DefaultExecutor();\n         int timeout = command.getTimeout();\n-        ExecuteWatchdog watchdog = timeout <= 0 ? new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT)\n-                : new ExecuteWatchdog(timeout * 1000L);\n+        ExecuteWatchdog watchdog = timeout <= 0 ? new ExecuteWatchdog(ExecuteWatchdog.INFINITE_TIMEOUT) : new ExecuteWatchdog(timeout * 1000L);\n         executor.setWatchdog(watchdog);\n-\n         OutputStream out = command.getOutputStream();\n         OutputStream err = command.getErrorStream();\n         InputStream in = command.getInputStream();\n@@ -258,12 +249,11 @@ public class ExecutorUtil {\n         } else if (out != null) {\n             handler = new FlushPumpStreamHandler(out, new NullOutputStream(), in);\n         } else if (err != null) {\n-            handler = new FlushPumpStreamHandler(new NullOutputStream(), err, in);\n+                   handler = new FlushPumpStreamHandler(new NullOutputStream(), err, in);\n         } else {\n-            handler = new FlushPumpStreamHandler(new NullOutputStream(), new NullOutputStream(), in);\n-        }\n+                   handler = new FlushPumpStreamHandler(new NullOutputStream(), new NullOutputStream(), in);\n+               }\n         executor.setStreamHandler(handler);\n-\n         String directory = command.getDirectory();\n         File workingDir = directory == null || directory.isEmpty() ? TEMP_DIR : new File(directory);\n         executor.setWorkingDirectory(workingDir);\n@@ -275,12 +265,9 @@ public class ExecutorUtil {\n         commandStatus.setOutputStream(command.getOutputStream());\n         commandStatus.setErrorStream(command.getErrorStream());\n         commandStatus.setInputStream(command.getInputStream());\n-\n         DefaultExecutor executor = configureExecutor(command);\n-\n         LinuxResultHandler resultHandler = new LinuxResultHandler(callback);\n         resultHandler.setStatus(commandStatus);\n-\n         logger.debug(\"Executing: {}\", commandLine);\n         try {\n             Map<String, String> environment = command.getEnvironment();\n@@ -300,7 +287,9 @@ public class ExecutorUtil {\n     private static String[] buildKillCommand(Pid pid, Signal signal) {\n         Integer pidNumber = pid.getPid();\n         if (logger.isInfoEnabled()) {\n-            logger.info(\"Attempting to send {} to process with pid {}\", ((LinuxSignal) signal).name(), pidNumber);\n+            logger.info(\"Attempting to send {} to process with pid {}\",\n+                ((LinuxSignal) signal).name(),\n+                        pidNumber);\n         }\n         return new String[] { \"kill\", \"-\" + signal.getSignalNumber(), String.valueOf(pidNumber) };\n     }\n@@ -314,12 +303,12 @@ public class ExecutorUtil {\n         commandLine.addArgument(\"-u\");\n         commandLine.addArgument(ExecutorUtil.commandUsername);\n         commandLine.addArgument(\"-s\");\n-\n         Map<String, String> env = command.getEnvironment();\n         if (env != null && !env.isEmpty()) {\n             env.entrySet().stream().forEach(entry -> commandLine.addArgument(entry.getKey() + \"=\" + entry.getValue()));\n         }\n \n+\n         int timeout = command.getTimeout();\n         if (timeout != -1) {\n             commandLine.addArgument(\"timeout\");\n@@ -327,11 +316,9 @@ public class ExecutorUtil {\n             commandLine.addArgument(((LinuxSignal) command.getSignal()).name());\n             commandLine.addArgument(Integer.toString(timeout));\n         }\n-\n         commandLine.addArgument(\"sh\");\n         commandLine.addArgument(\"-c\");\n         commandLine.addArgument(String.join(\" \", command.getCommandLine()), false);\n-\n         return commandLine;\n     }\n \n@@ -350,5 +337,4 @@ public class ExecutorUtil {\n         }\n         return commandLine;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/3/ExecutorUtil.java\nindex b81c1c90d56..a4a3c45bc64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_random/3/ExecutorUtil.java\n@@ -200,7 +200,7 @@ public class ExecutorUtil {\n             }\n         }\n         // Sort pids in reverse order (useful when stop processes...)\n-        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer> comparingByValue().reversed())\n+        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer>comparingByValue().reversed())\n                 .collect(Collectors.toMap(Map.Entry::getKey, e -> new LinuxPid(e.getValue()), (e1, e2) -> e1,\n                         LinkedHashMap::new));\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/3/ExecutorUtil.java\nindex b81c1c90d56..a4a3c45bc64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/errored/1/3/ExecutorUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/eclipse-kura/styler_three_grams/3/ExecutorUtil.java\n@@ -200,7 +200,7 @@ public class ExecutorUtil {\n             }\n         }\n         // Sort pids in reverse order (useful when stop processes...)\n-        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer> comparingByValue().reversed())\n+        return pids.entrySet().stream().sorted(Map.Entry.<String, Integer>comparingByValue().reversed())\n                 .collect(Collectors.toMap(Map.Entry::getKey, e -> new LinuxPid(e.getValue()), (e1, e2) -> e1,\n                         LinkedHashMap::new));\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}