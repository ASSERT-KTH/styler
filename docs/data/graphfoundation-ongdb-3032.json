{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3032",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "397",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "409",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "424",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "459",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "472",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "478",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "495",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "501",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "520",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "522",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "554",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "570",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "575",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "577",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "587",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "590",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "627",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "627",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "639",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "642",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "644",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "644",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "652",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "670",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "688",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "702",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "704",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "704",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "716",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "719",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "722",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "722",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "734",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "734",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "749",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "749",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "762",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "776",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "790",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "803",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "803",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "805",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "808",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "822",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "822",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "844",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "844",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "847",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "862",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "864",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "864",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "866",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "866",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "869",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "878",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "878",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "881",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "881",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3032/ListValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3032/ListValue.java\nindex 3e983130b33..b1d14eca8ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3032/ListValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3032/ListValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.virtual;\n \n import java.util.Arrays;\n@@ -38,863 +39,858 @@ import static org.neo4j.values.virtual.ArrayHelpers.containsNull;\n \n public abstract class ListValue extends VirtualValue implements SequenceValue, Iterable<AnyValue>\n {\n-    public abstract int size();\n-\n-    @Override\n-    public abstract AnyValue value( int offset );\n-\n-    public abstract AnyValue[] asArray();\n-\n-    public boolean isEmpty()\n+  public abstract int size();\n+\n+  @Override\n+  public abstract AnyValue value(int offset);\n+\n+  public abstract AnyValue[] asArray();\n+\n+  public boolean isEmpty()\n+  {\n+    return size() == 0;\n+  }\n+\n+  public boolean nonEmpty()\n+  {\n+    return size() != 0;\n+  }\n+\n+  public boolean storable()\n+  {\n+    return false;\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"List\";\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    StringBuilder sb = new StringBuilder(getTypeName() + \"{\");\n+    int i = 0;\n+    for (; i < size() - 1; i++)\n     {\n-        return size() == 0;\n+      sb.append(value(i));\n+      sb.append(\", \");\n     }\n-\n-    public boolean nonEmpty()\n+    if (size() > 0)\n     {\n-        return size() != 0;\n+      sb.append(value(i));\n     }\n-\n-    public boolean storable()\n+    sb.append('}');\n+    return sb.toString();\n+  }\n+\n+  public ArrayValue toStorableArray()\n+  {\n+    throw new UnsupportedOperationException(\"List cannot be turned into a storable array\");\n+  }\n+\n+  @Override\n+  public boolean isSequenceValue()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapSequence(this);\n+  }\n+\n+  @Override\n+  public boolean equals(VirtualValue other)\n+  {\n+    return other != null && other.isSequenceValue() && equals((SequenceValue) other);\n+  }\n+\n+  public AnyValue head()\n+  {\n+    int size = size();\n+    if (size == 0)\n     {\n-        return false;\n+      throw new NoSuchElementException(\"head of empty list\");\n     }\n+    return value(0);\n+  }\n \n-    @Override\n-    public String getTypeName()\n+  public AnyValue last()\n+  {\n+    int size = size();\n+    if (size == 0)\n     {\n-        return \"List\";\n+      throw new NoSuchElementException(\"last of empty list\");\n     }\n+    return value(size - 1);\n+  }\n \n-    @Override\n-    public String toString()\n+  @Override\n+  public Iterator<AnyValue> iterator()\n+  {\n+    return new Iterator<AnyValue>()\n     {\n-        StringBuilder sb = new StringBuilder( getTypeName() + \"{\" );\n-        int i = 0;\n-        for ( ; i < size() - 1; i++ )\n-        {\n-            sb.append( value( i ) );\n-            sb.append( \", \" );\n-        }\n-        if ( size() > 0 )\n+      private int count;\n+\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return count < size();\n+      }\n+\n+      @Override\n+      public AnyValue next()\n+      {\n+        if (!hasNext())\n         {\n-            sb.append( value( i ) );\n+          throw new NoSuchElementException();\n         }\n-        sb.append( '}' );\n-        return sb.toString();\n-    }\n+        return value(count++);\n+      }\n+    };\n+  }\n \n-    public ArrayValue toStorableArray()\n+  static final class ArrayValueListValue extends ListValue\n+  {\n+    private final ArrayValue array;\n+\n+    ArrayValueListValue(ArrayValue array)\n     {\n-        throw new UnsupportedOperationException( \"List cannot be turned into a storable array\" );\n+      this.array = array;\n     }\n \n     @Override\n-    public boolean isSequenceValue()\n+    public IterationPreference iterationPreference()\n     {\n-        return true;\n+      return IterationPreference.RANDOM_ACCESS;\n     }\n \n     @Override\n-    public <T> T map( ValueMapper<T> mapper )\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n     {\n-        return mapper.mapSequence( this );\n+      int length = array.length();\n+      writer.beginList(length);\n+      for (int i = 0; i < length; i++)\n+      {\n+        array.value(i).writeTo(writer);\n+      }\n+      writer.endList();\n     }\n \n     @Override\n-    public boolean equals( VirtualValue other )\n+    public boolean storable()\n     {\n-        return other != null && other.isSequenceValue() && equals( (SequenceValue) other );\n+      return true;\n     }\n \n-    public AnyValue head()\n+    @Override\n+    public ArrayValue toStorableArray()\n     {\n-        int size = size();\n-        if ( size == 0 )\n-        {\n-            throw new NoSuchElementException( \"head of empty list\" );\n-        }\n-        return value( 0 );\n+      return array;\n     }\n \n-    public AnyValue last()\n+    @Override\n+    public int size()\n     {\n-        int size = size();\n-        if ( size == 0 )\n-        {\n-            throw new NoSuchElementException( \"last of empty list\" );\n-        }\n-        return value( size - 1 );\n+      return array.length();\n     }\n \n     @Override\n-    public Iterator<AnyValue> iterator()\n+    public AnyValue value(int offset)\n     {\n-        return new Iterator<AnyValue>()\n-        {\n-            private int count;\n-\n-            @Override\n-            public boolean hasNext()\n-            {\n-                return count < size();\n-            }\n-\n-            @Override\n-            public AnyValue next()\n-            {\n-                if ( !hasNext() )\n-                {\n-                    throw new NoSuchElementException();\n-                }\n-                return value( count++ );\n-            }\n-        };\n+      return array.value(offset);\n     }\n \n-    static final class ArrayValueListValue extends ListValue\n+    @Override\n+    public AnyValue[] asArray()\n     {\n-        private final ArrayValue array;\n-\n-        ArrayValueListValue( ArrayValue array )\n-        {\n-            this.array = array;\n-        }\n-\n-        @Override\n-        public IterationPreference iterationPreference()\n-        {\n-            return IterationPreference.RANDOM_ACCESS;\n-        }\n-\n-        @Override\n-        public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n-        {\n-            int length = array.length();\n-            writer.beginList( length );\n-            for ( int i = 0; i < length; i++ )\n-            {\n-                array.value( i ).writeTo( writer );\n-            }\n-            writer.endList();\n-        }\n+      int size = size();\n+      AnyValue[] values = new AnyValue[size];\n+      for (int i = 0; i < size; i++)\n+      {\n+        values[i] = array.value(i);\n+      }\n+\n+      return values;\n+    }\n \n-        @Override\n-        public boolean storable()\n-        {\n-            return true;\n-        }\n+    @Override\n+    public int computeHash()\n+    {\n+      return array.hashCode();\n+    }\n+  }\n \n-        @Override\n-        public ArrayValue toStorableArray()\n-        {\n-            return array;\n-        }\n+  static final class ArrayListValue extends ListValue\n+  {\n+    private final AnyValue[] values;\n \n-        @Override\n-        public int size()\n-        {\n-            return array.length();\n-        }\n+    ArrayListValue(AnyValue[] values)\n+    {\n+      assert values != null;\n+      assert !containsNull(values);\n \n-        @Override\n-        public AnyValue value( int offset )\n-        {\n-            return array.value( offset );\n-        }\n+      this.values = values;\n+    }\n \n-        @Override\n-        public AnyValue[] asArray()\n-        {\n-            int size = size();\n-            AnyValue[] values = new AnyValue[size];\n-            for ( int i = 0; i < size; i++ )\n-            {\n-                values[i] = array.value( i );\n-            }\n+    @Override\n+    public IterationPreference iterationPreference()\n+    {\n+      return IterationPreference.RANDOM_ACCESS;\n+    }\n \n-            return values;\n-        }\n+    @Override\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n+    {\n+      writer.beginList(values.length);\n+      for (AnyValue value : values)\n+      {\n+        value.writeTo(writer);\n+      }\n+      writer.endList();\n+    }\n \n-        @Override\n-        public int computeHash()\n-        {\n-            return array.hashCode();\n-        }\n+    @Override\n+    public int size()\n+    {\n+      return values.length;\n     }\n \n-    static final class ArrayListValue extends ListValue\n+    @Override\n+    public AnyValue value(int offset)\n     {\n-        private final AnyValue[] values;\n+      return values[offset];\n+    }\n \n-        ArrayListValue( AnyValue[] values )\n-        {\n-            assert values != null;\n-            assert !containsNull( values );\n+    @Override\n+    public AnyValue[] asArray()\n+    {\n+      return values;\n+    }\n \n-            this.values = values;\n-        }\n+    @Override\n+    public int computeHash()\n+    {\n+      return Arrays.hashCode(values);\n+    }\n+  }\n \n-        @Override\n-        public IterationPreference iterationPreference()\n-        {\n-            return IterationPreference.RANDOM_ACCESS;\n-        }\n+  static final class JavaListListValue extends ListValue\n+  {\n+    private final List<AnyValue> values;\n \n-        @Override\n-        public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n-        {\n-            writer.beginList( values.length );\n-            for ( AnyValue value : values )\n-            {\n-                value.writeTo( writer );\n-            }\n-            writer.endList();\n-        }\n+    JavaListListValue(List<AnyValue> values)\n+    {\n+      assert values != null;\n+      assert !containsNull(values);\n \n-        @Override\n-        public int size()\n-        {\n-            return values.length;\n-        }\n+      this.values = values;\n+    }\n \n-        @Override\n-        public AnyValue value( int offset )\n-        {\n-            return values[offset];\n-        }\n+    @Override\n+    public IterationPreference iterationPreference()\n+    {\n+      return IterationPreference.ITERATION;\n+    }\n \n-        @Override\n-        public AnyValue[] asArray()\n-        {\n-            return values;\n-        }\n+    @Override\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n+    {\n+      writer.beginList(values.size());\n+      for (AnyValue value : values)\n+      {\n+        value.writeTo(writer);\n+      }\n+      writer.endList();\n+    }\n \n-        @Override\n-        public int computeHash()\n-        {\n-            return Arrays.hashCode( values );\n-        }\n+    @Override\n+    public int size()\n+    {\n+      return values.size();\n     }\n \n-    static final class JavaListListValue extends ListValue\n+    @Override\n+    public AnyValue value(int offset)\n     {\n-        private final List<AnyValue> values;\n+      return values.get(offset);\n+    }\n \n-        JavaListListValue( List<AnyValue> values )\n-        {\n-            assert values != null;\n-            assert !containsNull( values );\n+    @Override\n+    public AnyValue[] asArray()\n+    {\n+      return values.toArray(new AnyValue[values.size()]);\n+    }\n \n-            this.values = values;\n-        }\n+    @Override\n+    public int computeHash()\n+    {\n+      return values.hashCode();\n+    }\n+  }\n \n-        @Override\n-        public IterationPreference iterationPreference()\n-        {\n-            return IterationPreference.ITERATION;\n-        }\n+  static final class ListSlice extends ListValue\n+  {\n+    private final ListValue inner;\n+    private final int from;\n+    private final int to;\n \n-        @Override\n-        public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n-        {\n-            writer.beginList( values.size() );\n-            for ( AnyValue value : values )\n-            {\n-                value.writeTo( writer );\n-            }\n-            writer.endList();\n-        }\n+    ListSlice(ListValue inner, int from, int to)\n+    {\n+      assert from >= 0;\n+      assert to <= inner.size();\n+      assert from <= to;\n+      this.inner = inner;\n+      this.from = from;\n+      this.to = to;\n+    }\n \n-        @Override\n-        public int size()\n-        {\n-            return values.size();\n-        }\n+    @Override\n+    public IterationPreference iterationPreference()\n+    {\n+      return inner.iterationPreference();\n+    }\n \n-        @Override\n-        public AnyValue value( int offset )\n-        {\n-            return values.get( offset );\n-        }\n+    @Override\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n+    {\n+      writer.beginList(size());\n+      for (int i = from; i < to; i++)\n+      {\n+        inner.value(i).writeTo(writer);\n+      }\n+      writer.endList();\n+    }\n \n-        @Override\n-        public AnyValue[] asArray()\n-        {\n-            return values.toArray( new AnyValue[values.size()] );\n-        }\n+    @Override\n+    public int size()\n+    {\n+      return to - from;\n+    }\n \n-        @Override\n-        public int computeHash()\n-        {\n-            return values.hashCode();\n-        }\n+    @Override\n+    public AnyValue value(int offset)\n+    {\n+      return inner.value(offset + from);\n     }\n \n-    static final class ListSlice extends ListValue\n+    @Override\n+    public AnyValue[] asArray()\n     {\n-        private final ListValue inner;\n-        private final int from;\n-        private final int to;\n+      int len = size();\n+      AnyValue[] anyValues = new AnyValue[len];\n+      int index = 0;\n+      for (int i = from; i < to; i++)\n+      {\n+        anyValues[index++] = inner.value(i);\n+      }\n+      return anyValues;\n+    }\n \n-        ListSlice( ListValue inner, int from, int to )\n-        {\n-            assert from >= 0;\n-            assert to <= inner.size();\n-            assert from <= to;\n-            this.inner = inner;\n-            this.from = from;\n-            this.to = to;\n-        }\n+    @Override\n+    public int computeHash()\n+    {\n+      int hashCode = 1;\n+      for (int i = from; i < to; i++)\n+      {\n+        hashCode = 31 * hashCode + inner.value(i).hashCode();\n+      }\n+      return hashCode;\n+    }\n+  }\n \n-        @Override\n-        public IterationPreference iterationPreference()\n-        {\n-            return inner.iterationPreference();\n-        }\n+  static final class ReversedList extends ListValue\n+  {\n+    private final ListValue inner;\n \n-        @Override\n-        public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n-        {\n-            writer.beginList( size() );\n-            for ( int i = from; i < to; i++ )\n-            {\n-                inner.value( i ).writeTo( writer );\n-            }\n-            writer.endList();\n-        }\n+    ReversedList(ListValue inner)\n+    {\n+      this.inner = inner;\n+    }\n \n-        @Override\n-        public int size()\n-        {\n-            return to - from;\n-        }\n+    @Override\n+    public IterationPreference iterationPreference()\n+    {\n+      return inner.iterationPreference();\n+    }\n \n-        @Override\n-        public AnyValue value( int offset )\n-        {\n-            return inner.value( offset + from );\n-        }\n+    @Override\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n+    {\n+      writer.beginList(size());\n+      for (int i = inner.size() - 1; i >= 0; i--)\n+      {\n+        inner.value(i).writeTo(writer);\n+      }\n+      writer.endList();\n+    }\n \n-        @Override\n-        public AnyValue[] asArray()\n-        {\n-            int len = size();\n-            AnyValue[] anyValues = new AnyValue[len];\n-            int index = 0;\n-            for ( int i = from; i < to; i++ )\n-            {\n-                anyValues[index++] = inner.value( i );\n-            }\n-            return anyValues;\n-        }\n+    @Override\n+    public int size()\n+    {\n+      return inner.size();\n+    }\n \n-        @Override\n-        public int computeHash()\n-        {\n-            int hashCode = 1;\n-            for ( int i = from; i < to; i++ )\n-            {\n-                hashCode = 31 * hashCode + inner.value( i ).hashCode();\n-            }\n-            return hashCode;\n-        }\n+    @Override\n+    public AnyValue value(int offset)\n+    {\n+      return inner.value(size() - 1 - offset);\n     }\n \n-    static final class ReversedList extends ListValue\n+    @Override\n+    public AnyValue[] asArray()\n     {\n-        private final ListValue inner;\n+      int len = size();\n+      AnyValue[] anyValues = new AnyValue[len];\n+      for (int i = 0; i < len; i++)\n+      {\n+        anyValues[i] = value(i);\n+      }\n+      return anyValues;\n+    }\n \n-        ReversedList( ListValue inner )\n-        {\n-            this.inner = inner;\n-        }\n+    @Override\n+    public int computeHash()\n+    {\n+      int hashCode = 1;\n+      for (int i = inner.size() - 1; i >= 0; i--)\n+      {\n+        hashCode = 31 * hashCode + inner.value(i).hashCode();\n+      }\n+      return hashCode;\n+    }\n+  }\n \n-        @Override\n-        public IterationPreference iterationPreference()\n-        {\n-            return inner.iterationPreference();\n-        }\n+  static final class DropNoValuesListValue extends ListValue\n+  {\n+    private final ListValue inner;\n+    private int size = -1;\n \n-        @Override\n-        public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n-        {\n-            writer.beginList( size() );\n-            for ( int i = inner.size() - 1; i >= 0; i-- )\n-            {\n-                inner.value( i ).writeTo( writer );\n-            }\n-            writer.endList();\n-        }\n+    DropNoValuesListValue(ListValue inner)\n+    {\n+      this.inner = inner;\n+    }\n \n-        @Override\n-        public int size()\n+    @Override\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n+    {\n+      writer.beginList(size());\n+      for (int i = 0; i < inner.size(); i++)\n+      {\n+        AnyValue value = inner.value(i);\n+        if (value != NO_VALUE)\n         {\n-            return inner.size();\n+          value.writeTo(writer);\n         }\n+      }\n+      writer.endList();\n+    }\n \n-        @Override\n-        public AnyValue value( int offset )\n-        {\n-            return inner.value( size() - 1 - offset );\n-        }\n+    @Override\n+    public int size()\n+    {\n+      if (size < 0)\n+      {\n \n-        @Override\n-        public AnyValue[] asArray()\n+        int s = 0;\n+        for (int i = 0; i < inner.size(); i++)\n         {\n-            int len = size();\n-            AnyValue[] anyValues = new AnyValue[len];\n-            for ( int i = 0; i < len; i++ )\n-            {\n-                anyValues[i] = value( i );\n-            }\n-            return anyValues;\n+          if (inner.value(i) != NO_VALUE)\n+          {\n+            s++;\n+          }\n         }\n+        size = s;\n+      }\n \n-        @Override\n-        public int computeHash()\n-        {\n-            int hashCode = 1;\n-            for ( int i = inner.size() - 1; i >= 0; i-- )\n-            {\n-                hashCode = 31 * hashCode + inner.value( i ).hashCode();\n-            }\n-            return hashCode;\n-        }\n+      return size;\n     }\n \n-    static final class DropNoValuesListValue extends ListValue\n+    @Override\n+    public AnyValue value(int offset)\n     {\n-        private final ListValue inner;\n-        private int size = -1;\n+      int actualOffset = 0;\n+      int size = inner.size();\n+      for (int i = 0; i < size; i++)\n+      {\n+        AnyValue value = inner.value(i);\n+        if (value != NO_VALUE)\n+        {\n+          if (actualOffset == offset)\n+          {\n+            return value;\n+          }\n+          actualOffset++;\n+        }\n+      }\n+\n+      throw new IndexOutOfBoundsException();\n+    }\n \n-        DropNoValuesListValue( ListValue inner )\n-        {\n-            this.inner = inner;\n-        }\n+    @Override\n+    public AnyValue[] asArray()\n+    {\n+      int len = size();\n+      AnyValue[] anyValues = new AnyValue[len];\n+      int index = 0;\n+      for (int i = 0; i < inner.size(); i++)\n+      {\n+        AnyValue value = inner.value(i);\n+        if (value != NO_VALUE)\n+        {\n+          anyValues[index++] = value;\n+        }\n+      }\n+      return anyValues;\n+    }\n \n-        @Override\n-        public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n+    @Override\n+    public int computeHash()\n+    {\n+      int hashCode = 1;\n+      for (int i = 0; i < inner.size(); i++)\n+      {\n+        AnyValue value = inner.value(i);\n+        if (value != NO_VALUE)\n         {\n-            writer.beginList( size() );\n-            for ( int i = 0; i < inner.size(); i++ )\n-            {\n-                AnyValue value = inner.value( i );\n-                if ( value != NO_VALUE )\n-                {\n-                    value.writeTo( writer );\n-                }\n-            }\n-            writer.endList();\n+          hashCode = 31 * hashCode + value.hashCode();\n         }\n+      }\n+      return hashCode;\n+    }\n \n-        @Override\n-        public int size()\n-        {\n-            if ( size < 0 )\n-            {\n-\n-                int s = 0;\n-                for ( int i = 0; i < inner.size(); i++ )\n-                {\n-                    if ( inner.value( i ) != NO_VALUE )\n-                    {\n-                        s++;\n-                    }\n-                }\n-                size = s;\n-            }\n+    @Override\n+    public int compareTo(VirtualValue other, Comparator<AnyValue> comparator)\n+    {\n+      if (!(other instanceof ListValue))\n+      {\n+        throw new IllegalArgumentException(\"Cannot compare different virtual values\");\n+      }\n+      ListValue otherList = (ListValue) other;\n+      Iterator<AnyValue> thisIterator = iterator();\n+      Iterator<AnyValue> thatIterator = otherList.iterator();\n+      while (thisIterator.hasNext())\n+      {\n+        if (!thatIterator.hasNext())\n+        {\n+          return 1;\n+        }\n+        int compare = comparator.compare(thisIterator.next(), thatIterator.next());\n+        if (compare != 0)\n+        {\n+          return compare;\n+        }\n+      }\n+      if (thatIterator.hasNext())\n+      {\n+        return -1;\n+      } else\n+      {\n+        return 0;\n+      }\n+    }\n \n-            return size;\n-        }\n+    @Override\n+    public Iterator<AnyValue> iterator()\n+    {\n+      return new FilteredIterator();\n+    }\n \n-        @Override\n-        public AnyValue value( int offset )\n-        {\n-            int actualOffset = 0;\n-            int size = inner.size();\n-            for ( int i = 0; i < size; i++ )\n-            {\n-                AnyValue value = inner.value( i );\n-                if ( value != NO_VALUE )\n-                {\n-                    if ( actualOffset == offset )\n-                    {\n-                        return value;\n-                    }\n-                    actualOffset++;\n-                }\n-            }\n+    @Override\n+    public IterationPreference iterationPreference()\n+    {\n+      return IterationPreference.ITERATION;\n+    }\n \n-            throw new IndexOutOfBoundsException();\n-        }\n+    private class FilteredIterator implements Iterator<AnyValue>\n+    {\n+      private AnyValue next;\n+      private int index;\n \n-        @Override\n-        public AnyValue[] asArray()\n-        {\n-            int len = size();\n-            AnyValue[] anyValues = new AnyValue[len];\n-            int index = 0;\n-            for ( int i = 0; i < inner.size(); i++ )\n-            {\n-                AnyValue value = inner.value( i );\n-                if ( value != NO_VALUE )\n-                {\n-                    anyValues[index++] = value;\n-                }\n-            }\n-            return anyValues;\n-        }\n+      FilteredIterator()\n+      {\n+        computeNext();\n+      }\n \n-        @Override\n-        public int computeHash()\n-        {\n-            int hashCode = 1;\n-            for ( int i = 0; i < inner.size(); i++ )\n-            {\n-                AnyValue value = inner.value( i );\n-                if ( value != NO_VALUE )\n-                {\n-                    hashCode = 31 * hashCode + value.hashCode();\n-                }\n-            }\n-            return hashCode;\n-        }\n+      @Override\n+      public boolean hasNext()\n+      {\n+        return next != null;\n+      }\n \n-        @Override\n-        public int compareTo( VirtualValue other, Comparator<AnyValue> comparator )\n+      @Override\n+      public AnyValue next()\n+      {\n+        if (!hasNext())\n         {\n-            if ( !(other instanceof ListValue) )\n-            {\n-                throw new IllegalArgumentException( \"Cannot compare different virtual values\" );\n-            }\n-            ListValue otherList = (ListValue) other;\n-            Iterator<AnyValue> thisIterator = iterator();\n-            Iterator<AnyValue> thatIterator = otherList.iterator();\n-            while ( thisIterator.hasNext() )\n-            {\n-                if ( !thatIterator.hasNext() )\n-                {\n-                    return 1;\n-                }\n-                int compare = comparator.compare( thisIterator.next(), thatIterator.next() );\n-                if ( compare != 0 )\n-                {\n-                    return compare;\n-                }\n-            }\n-            if ( thatIterator.hasNext() )\n-            {\n-                return -1;\n-            }\n-            else\n-            {\n-                return 0;\n-            }\n+          throw new NoSuchElementException();\n         }\n \n-        @Override\n-        public Iterator<AnyValue> iterator()\n-        {\n-            return new FilteredIterator();\n-        }\n+        AnyValue current = next;\n+        computeNext();\n+        return current;\n+      }\n \n-        @Override\n-        public IterationPreference iterationPreference()\n+      private void computeNext()\n+      {\n+        if (index >= inner.size())\n         {\n-            return IterationPreference.ITERATION;\n-        }\n-\n-        private class FilteredIterator implements Iterator<AnyValue>\n+          next = null;\n+        } else\n         {\n-            private AnyValue next;\n-            private int index;\n-\n-            FilteredIterator()\n+          while (true)\n+          {\n+            if (index >= inner.size())\n             {\n-                computeNext();\n+              next = null;\n+              return;\n             }\n-\n-            @Override\n-            public boolean hasNext()\n-            {\n-                return next != null;\n-            }\n-\n-            @Override\n-            public AnyValue next()\n-            {\n-                if ( !hasNext() )\n-                {\n-                    throw new NoSuchElementException();\n-                }\n-\n-                AnyValue current = next;\n-                computeNext();\n-                return current;\n-            }\n-\n-            private void computeNext()\n+            AnyValue candidate = inner.value(index++);\n+            if (candidate != NO_VALUE)\n             {\n-                if ( index >= inner.size() )\n-                {\n-                    next = null;\n-                }\n-                else\n-                {\n-                    while ( true )\n-                    {\n-                        if ( index >= inner.size() )\n-                        {\n-                            next = null;\n-                            return;\n-                        }\n-                        AnyValue candidate = inner.value( index++ );\n-                        if ( candidate != NO_VALUE )\n-                        {\n-                            next = candidate;\n-                            return;\n-                        }\n-                    }\n-                }\n+              next = candidate;\n+              return;\n             }\n+          }\n         }\n+      }\n     }\n+  }\n \n-    static final class IntegralRangeListValue extends ListValue\n-    {\n-        private final long start;\n-        private final long end;\n-        private final long step;\n-        private int length = -1;\n-\n-        IntegralRangeListValue( long start, long end, long step )\n-        {\n-            this.start = start;\n-            this.end = end;\n-            this.step = step;\n-        }\n-\n-        @Override\n-        public IterationPreference iterationPreference()\n-        {\n-            return IterationPreference.RANDOM_ACCESS;\n-        }\n+  static final class IntegralRangeListValue extends ListValue\n+  {\n+    private final long start;\n+    private final long end;\n+    private final long step;\n+    private int length = -1;\n \n-        @Override\n-        public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n-        {\n-            int size = size();\n-            writer.beginList( size );\n-            for ( long current = start; check( current ); current += step )\n-            {\n-                Values.longValue( current ).writeTo( writer );\n-            }\n-            writer.endList();\n+    IntegralRangeListValue(long start, long end, long step)\n+    {\n+      this.start = start;\n+      this.end = end;\n+      this.step = step;\n+    }\n \n-        }\n+    @Override\n+    public IterationPreference iterationPreference()\n+    {\n+      return IterationPreference.RANDOM_ACCESS;\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"Range(\" + start + \"...\" + end + \", step = \" + step + \")\";\n-        }\n+    @Override\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n+    {\n+      int size = size();\n+      writer.beginList(size);\n+      for (long current = start; check(current); current += step)\n+      {\n+        Values.longValue(current).writeTo(writer);\n+      }\n+      writer.endList();\n \n-        private boolean check( long current )\n-        {\n-            if ( step > 0 )\n-            {\n-                return current <= end;\n-            }\n-            else\n-            {\n-                return current >= end;\n-            }\n-        }\n+    }\n \n-        @Override\n-        public int size()\n-        {\n-            if ( length != -1 )\n-            {\n-                return length;\n-            }\n-            else\n-            {\n-                long l = ((end - start) / step) + 1;\n-                if ( l > Integer.MAX_VALUE )\n-                {\n-                    throw new OutOfMemoryError( \"Cannot index an collection of size \" + l );\n-                }\n-                length = (int) l;\n-                return length;\n-            }\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return \"Range(\" + start + \"...\" + end + \", step = \" + step + \")\";\n+    }\n \n-        @Override\n-        public AnyValue value( int offset )\n-        {\n-            if ( offset >= size() )\n-            {\n-                throw new IndexOutOfBoundsException();\n-            }\n-            else\n-            {\n-                return Values.longValue( start + offset * step );\n-            }\n-        }\n+    private boolean check(long current)\n+    {\n+      if (step > 0)\n+      {\n+        return current <= end;\n+      } else\n+      {\n+        return current >= end;\n+      }\n+    }\n \n-        @Override\n-        public AnyValue[] asArray()\n-        {\n-            int len = size();\n-            AnyValue[] anyValues = new AnyValue[len];\n-            int i = 0;\n-            for ( long current = start; check( current ); current += step, i++ )\n-            {\n-                anyValues[i] = Values.longValue( current );\n-            }\n-            return anyValues;\n-        }\n+    @Override\n+    public int size()\n+    {\n+      if (length != -1)\n+      {\n+        return length;\n+      } else\n+      {\n+        long l = ((end - start) / step) + 1;\n+        if (l > Integer.MAX_VALUE)\n+        {\n+          throw new OutOfMemoryError(\"Cannot index an collection of size \" + l);\n+        }\n+        length = (int) l;\n+        return length;\n+      }\n+    }\n \n-        @Override\n-        public int computeHash()\n-        {\n-            int hashCode = 1;\n-            long current = start;\n-            int size = size();\n-            for ( int i = 0; i < size; i++, current += step )\n-            {\n-                hashCode = 31 * hashCode + Long.hashCode( current );\n-            }\n-            return hashCode;\n-        }\n+    @Override\n+    public AnyValue value(int offset)\n+    {\n+      if (offset >= size())\n+      {\n+        throw new IndexOutOfBoundsException();\n+      } else\n+      {\n+        return Values.longValue(start + offset * step);\n+      }\n+    }\n \n+    @Override\n+    public AnyValue[] asArray()\n+    {\n+      int len = size();\n+      AnyValue[] anyValues = new AnyValue[len];\n+      int i = 0;\n+      for (long current = start; check(current); current += step, i++)\n+      {\n+        anyValues[i] = Values.longValue(current);\n+      }\n+      return anyValues;\n     }\n \n-    static final class ConcatList extends ListValue\n+    @Override\n+    public int computeHash()\n     {\n-        private final ListValue[] lists;\n-        private int size = -1;\n+      int hashCode = 1;\n+      long current = start;\n+      int size = size();\n+      for (int i = 0; i < size; i++, current += step)\n+      {\n+        hashCode = 31 * hashCode + Long.hashCode(current);\n+      }\n+      return hashCode;\n+    }\n \n-        ConcatList( ListValue[] lists )\n-        {\n-            this.lists = lists;\n-        }\n+  }\n \n-        @Override\n-        public IterationPreference iterationPreference()\n-        {\n-            return IterationPreference.ITERATION;\n-        }\n+  static final class ConcatList extends ListValue\n+  {\n+    private final ListValue[] lists;\n+    private int size = -1;\n \n-        @Override\n-        public int size()\n-        {\n-            if ( size < 0 )\n-            {\n-                int s = 0;\n-                for ( ListValue list : lists )\n-                {\n-                    s += list.size();\n-                }\n-                size = s;\n-            }\n-            return size;\n-        }\n+    ConcatList(ListValue[] lists)\n+    {\n+      this.lists = lists;\n+    }\n \n-        @Override\n-        public AnyValue value( int offset )\n-        {\n-            for ( ListValue list : lists )\n-            {\n-                int size = list.size();\n-                if ( offset < size )\n-                {\n-                    return list.value( offset );\n-                }\n-                offset -= size;\n-            }\n-            throw new IndexOutOfBoundsException();\n-        }\n+    @Override\n+    public IterationPreference iterationPreference()\n+    {\n+      return IterationPreference.ITERATION;\n+    }\n \n-        @Override\n-        public AnyValue[] asArray()\n+    @Override\n+    public int size()\n+    {\n+      if (size < 0)\n+      {\n+        int s = 0;\n+        for (ListValue list : lists)\n         {\n-            AnyValue[] values = new AnyValue[size()];\n-            int start = 0;\n-            for ( ListValue list : lists )\n-            {\n-                int length = list.length();\n-                System.arraycopy( list.asArray(), 0, values, start, length );\n-                start += length;\n-            }\n-            return values;\n+          s += list.size();\n         }\n+        size = s;\n+      }\n+      return size;\n+    }\n \n-        @Override\n-        public int computeHash()\n+    @Override\n+    public AnyValue value(int offset)\n+    {\n+      for (ListValue list : lists)\n+      {\n+        int size = list.size();\n+        if (offset < size)\n         {\n-            int hashCode = 1;\n-            int size = size();\n-            for ( int i = 0; i < size; i++ )\n-            {\n-                hashCode = 31 * hashCode + value( i ).hashCode();\n-            }\n-            return hashCode;\n+          return list.value(offset);\n         }\n+        offset -= size;\n+      }\n+      throw new IndexOutOfBoundsException();\n+    }\n \n-        @Override\n-        public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n-        {\n-            writer.beginList( size() );\n-            for ( int i = 0; i < size(); i++ )\n-            {\n-                value( i ).writeTo( writer );\n-            }\n-            writer.endList();\n-        }\n+    @Override\n+    public AnyValue[] asArray()\n+    {\n+      AnyValue[] values = new AnyValue[size()];\n+      int start = 0;\n+      for (ListValue list : lists)\n+      {\n+        int length = list.length();\n+        System.arraycopy(list.asArray(), 0, values, start, length);\n+        start += length;\n+      }\n+      return values;\n     }\n \n     @Override\n-    public VirtualValueGroup valueGroup()\n+    public int computeHash()\n     {\n-        return VirtualValueGroup.LIST;\n+      int hashCode = 1;\n+      int size = size();\n+      for (int i = 0; i < size; i++)\n+      {\n+        hashCode = 31 * hashCode + value(i).hashCode();\n+      }\n+      return hashCode;\n     }\n \n     @Override\n-    public int compareTo( VirtualValue other, Comparator<AnyValue> comparator )\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n     {\n-        if ( !(other instanceof ListValue) )\n-        {\n-            throw new IllegalArgumentException( \"Cannot compare different virtual values\" );\n-        }\n-        //more efficient to use another implementation here\n-        if ( other instanceof DropNoValuesListValue )\n-        {\n-            return -other.compareTo( this, comparator );\n-        }\n-        ListValue otherList = (ListValue) other;\n-        int x = Integer.compare( this.length(), otherList.length() );\n+      writer.beginList(size());\n+      for (int i = 0; i < size(); i++)\n+      {\n+        value(i).writeTo(writer);\n+      }\n+      writer.endList();\n+    }\n+  }\n+\n+  @Override\n+  public VirtualValueGroup valueGroup()\n+  {\n+    return VirtualValueGroup.LIST;\n+  }\n+\n+  @Override\n+  public int compareTo(VirtualValue other, Comparator<AnyValue> comparator)\n+  {\n+    if (!(other instanceof ListValue))\n+    {\n+      throw new IllegalArgumentException(\"Cannot compare different virtual values\");\n+    }\n+    //more efficient to use another implementation here\n+    if (other instanceof DropNoValuesListValue)\n+    {\n+      return -other.compareTo(this, comparator);\n+    }\n+    ListValue otherList = (ListValue) other;\n+    int x = Integer.compare(this.length(), otherList.length());\n \n-        if ( x == 0 )\n+    if (x == 0)\n+    {\n+      for (int i = 0; i < length(); i++)\n+      {\n+        x = comparator.compare(this.value(i), otherList.value(i));\n+        if (x != 0)\n         {\n-            for ( int i = 0; i < length(); i++ )\n-            {\n-                x = comparator.compare( this.value( i ), otherList.value( i ) );\n-                if ( x != 0 )\n-                {\n-                    return x;\n-                }\n-            }\n+          return x;\n         }\n-\n-        return x;\n+      }\n     }\n \n-    @Override\n-    public int length()\n-    {\n-        return size();\n-    }\n+    return x;\n+  }\n+\n+  @Override\n+  public int length()\n+  {\n+    return size();\n+  }\n }\n",
            "diff_size": 1007
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "731",
                    "column": "23",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "736",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3032/ListValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3032/ListValue.java\nindex 3e983130b33..2c3ba519023 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3032/ListValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3032/ListValue.java\n@@ -76,7 +76,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n             sb.append( value( i ) );\n             sb.append( \", \" );\n         }\n-        if ( size() > 0 )\n+\n+if ( size() > 0 )\n         {\n             sb.append( value( i ) );\n         }\n@@ -114,7 +115,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n         {\n             throw new NoSuchElementException( \"head of empty list\" );\n         }\n-        return value( 0 );\n+\n+return value( 0 );\n     }\n \n     public AnyValue last()\n@@ -124,7 +126,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n         {\n             throw new NoSuchElementException( \"last of empty list\" );\n         }\n-        return value( size - 1 );\n+\n+return value( size - 1 );\n     }\n \n     @Override\n@@ -147,7 +150,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n                 {\n                     throw new NoSuchElementException();\n                 }\n-                return value( count++ );\n+\n+return value( count++ );\n             }\n         };\n     }\n@@ -231,8 +235,7 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n         {\n             assert values != null;\n             assert !containsNull( values );\n-\n-            this.values = values;\n+this.values = values;\n         }\n \n         @Override\n@@ -285,8 +288,7 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n         {\n             assert values != null;\n             assert !containsNull( values );\n-\n-            this.values = values;\n+this.values = values;\n         }\n \n         @Override\n@@ -386,7 +388,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n             {\n                 anyValues[index++] = inner.value( i );\n             }\n-            return anyValues;\n+\n+return anyValues;\n         }\n \n         @Override\n@@ -397,7 +400,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n             {\n                 hashCode = 31 * hashCode + inner.value( i ).hashCode();\n             }\n-            return hashCode;\n+\n+return hashCode;\n         }\n     }\n \n@@ -448,7 +452,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n             {\n                 anyValues[i] = value( i );\n             }\n-            return anyValues;\n+\n+return anyValues;\n         }\n \n         @Override\n@@ -459,7 +464,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n             {\n                 hashCode = 31 * hashCode + inner.value( i ).hashCode();\n             }\n-            return hashCode;\n+\n+return hashCode;\n         }\n     }\n \n@@ -493,8 +499,7 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n         {\n             if ( size < 0 )\n             {\n-\n-                int s = 0;\n+    int s = 0;\n                 for ( int i = 0; i < inner.size(); i++ )\n                 {\n                     if ( inner.value( i ) != NO_VALUE )\n@@ -564,11 +569,12 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n         @Override\n         public int compareTo( VirtualValue other, Comparator<AnyValue> comparator )\n         {\n-            if ( !(other instanceof ListValue) )\n+            if ( !( other instanceof ListValue) )\n             {\n                 throw new IllegalArgumentException( \"Cannot compare different virtual values\" );\n             }\n-            ListValue otherList = (ListValue) other;\n+\n+ListValue otherList = (ListValue) other;\n             Iterator<AnyValue> thisIterator = iterator();\n             Iterator<AnyValue> thatIterator = otherList.iterator();\n             while ( thisIterator.hasNext() )\n@@ -649,7 +655,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n                             next = null;\n                             return;\n                         }\n-                        AnyValue candidate = inner.value( index++ );\n+\n+AnyValue candidate = inner.value( index++ );\n                         if ( candidate != NO_VALUE )\n                         {\n                             next = candidate;\n@@ -691,8 +698,7 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n                 Values.longValue( current ).writeTo( writer );\n             }\n             writer.endList();\n-\n-        }\n+    }\n \n         @Override\n         public String toString()\n@@ -722,11 +728,12 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n             else\n             {\n                 long l = ((end - start) / step) + 1;\n-                if ( l > Integer.MAX_VALUE )\n+                if ( l> Integer.MAX_VALUE )\n                 {\n                     throw new OutOfMemoryError( \"Cannot index an collection of size \" + l );\n                 }\n-                length = (int) l;\n+\n+length = ( int) l;\n                 return length;\n             }\n         }\n@@ -754,7 +761,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n             {\n                 anyValues[i] = Values.longValue( current );\n             }\n-            return anyValues;\n+\n+return anyValues;\n         }\n \n         @Override\n@@ -767,9 +775,9 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n             {\n                 hashCode = 31 * hashCode + Long.hashCode( current );\n             }\n-            return hashCode;\n-        }\n \n+return hashCode;\n+        }\n     }\n \n     static final class ConcatList extends ListValue\n@@ -798,9 +806,11 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n                 {\n                     s += list.size();\n                 }\n-                size = s;\n+\n+size = s;\n             }\n-            return size;\n+\n+return size;\n         }\n \n         @Override\n@@ -813,7 +823,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n                 {\n                     return list.value( offset );\n                 }\n-                offset -= size;\n+\n+offset -= size;\n             }\n             throw new IndexOutOfBoundsException();\n         }\n@@ -829,7 +840,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n                 System.arraycopy( list.asArray(), 0, values, start, length );\n                 start += length;\n             }\n-            return values;\n+\n+return values;\n         }\n \n         @Override\n@@ -841,7 +853,8 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n             {\n                 hashCode = 31 * hashCode + value( i ).hashCode();\n             }\n-            return hashCode;\n+\n+return hashCode;\n         }\n \n         @Override\n@@ -865,7 +878,7 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n     @Override\n     public int compareTo( VirtualValue other, Comparator<AnyValue> comparator )\n     {\n-        if ( !(other instanceof ListValue) )\n+        if ( !( other instanceof ListValue) )\n         {\n             throw new IllegalArgumentException( \"Cannot compare different virtual values\" );\n         }\n@@ -874,10 +887,10 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n         {\n             return -other.compareTo( this, comparator );\n         }\n-        ListValue otherList = (ListValue) other;\n-        int x = Integer.compare( this.length(), otherList.length() );\n \n-        if ( x == 0 )\n+ListValue otherList = (ListValue) other;\n+        int x = Integer.compare( this.length(), otherList.length() );\n+if ( x == 0 )\n         {\n             for ( int i = 0; i < length(); i++ )\n             {\n@@ -897,4 +910,4 @@ public abstract class ListValue extends VirtualValue implements SequenceValue, I\n     {\n         return size();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 55
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}