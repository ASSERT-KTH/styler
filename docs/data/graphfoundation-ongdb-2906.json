{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2906",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "84",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "134",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "159",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "148",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "165",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "191",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "242",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "254",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2906/PropertyAndNodeIndexedCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2906/PropertyAndNodeIndexedCheck.java\nindex 9962dda3522..002d3049b9c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2906/PropertyAndNodeIndexedCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2906/PropertyAndNodeIndexedCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.util.Arrays;\n@@ -55,216 +56,210 @@ import static java.lang.String.format;\n  */\n public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, ConsistencyReport.NodeConsistencyReport>\n {\n-    private final IndexAccessors indexes;\n-    private final PropertyReader propertyReader;\n-    private final CacheAccess cacheAccess;\n+  private final IndexAccessors indexes;\n+  private final PropertyReader propertyReader;\n+  private final CacheAccess cacheAccess;\n+\n+  public PropertyAndNodeIndexedCheck(IndexAccessors indexes, PropertyReader propertyReader, CacheAccess cacheAccess)\n+  {\n+    this.indexes = indexes;\n+    this.propertyReader = propertyReader;\n+    this.cacheAccess = cacheAccess;\n+  }\n \n-    public PropertyAndNodeIndexedCheck( IndexAccessors indexes, PropertyReader propertyReader, CacheAccess cacheAccess )\n+  @Override\n+  public void check(NodeRecord record,\n+                    CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+                    RecordAccess records)\n+  {\n+    try\n     {\n-        this.indexes = indexes;\n-        this.propertyReader = propertyReader;\n-        this.cacheAccess = cacheAccess;\n+      Collection<PropertyRecord> properties = propertyReader.getPropertyRecordChain(record.getNextProp());\n+      cacheAccess.client().putPropertiesToCache(properties);\n+      if (indexes != null)\n+      {\n+        matchIndexesToNode(record, engine, records, properties);\n+      }\n+      checkProperty(record, engine, properties);\n+    } catch (PropertyReader.CircularPropertyRecordChainException e)\n+    {\n+      engine.report().propertyChainContainsCircularReference(e.propertyRecordClosingTheCircle());\n     }\n+  }\n \n-    @Override\n-    public void check( NodeRecord record,\n-                       CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n-                       RecordAccess records )\n+  /**\n+   * Matches indexes to a node.\n+   */\n+  private void matchIndexesToNode(\n+      NodeRecord record,\n+      CheckerEngine<NodeRecord,\n+          ConsistencyReport.NodeConsistencyReport> engine,\n+      RecordAccess records,\n+      Collection<PropertyRecord> propertyRecs)\n+  {\n+    Set<Long> labels = NodeLabelReader.getListOfLabels(record, records, engine);\n+    PrimitiveIntObjectMap<PropertyBlock> nodePropertyMap = null;\n+    for (IndexRule indexRule : indexes.onlineRules())\n     {\n-        try\n-        {\n-            Collection<PropertyRecord> properties = propertyReader.getPropertyRecordChain( record.getNextProp() );\n-            cacheAccess.client().putPropertiesToCache(properties);\n-            if ( indexes != null )\n-            {\n-                matchIndexesToNode( record, engine, records, properties );\n-            }\n-            checkProperty( record, engine, properties );\n-        }\n-        catch ( PropertyReader.CircularPropertyRecordChainException e )\n+      long labelId = indexRule.schema().keyId();\n+      if (labels.contains(labelId))\n+      {\n+        if (nodePropertyMap == null)\n         {\n-            engine.report().propertyChainContainsCircularReference( e.propertyRecordClosingTheCircle() );\n+          nodePropertyMap = properties(propertyReader.propertyBlocks(propertyRecs));\n         }\n-    }\n \n-    /**\n-     * Matches indexes to a node.\n-     */\n-    private void matchIndexesToNode(\n-            NodeRecord record,\n-            CheckerEngine<NodeRecord,\n-            ConsistencyReport.NodeConsistencyReport> engine,\n-            RecordAccess records,\n-            Collection<PropertyRecord> propertyRecs )\n-    {\n-        Set<Long> labels = NodeLabelReader.getListOfLabels( record, records, engine );\n-        PrimitiveIntObjectMap<PropertyBlock> nodePropertyMap = null;\n-        for ( IndexRule indexRule : indexes.onlineRules() )\n+        int[] indexPropertyIds = indexRule.schema().getPropertyIds();\n+        if (nodeHasSchemaProperties(nodePropertyMap, indexPropertyIds))\n         {\n-            long labelId = indexRule.schema().keyId();\n-            if ( labels.contains( labelId ) )\n-            {\n-                if ( nodePropertyMap == null )\n-                {\n-                    nodePropertyMap = properties( propertyReader.propertyBlocks( propertyRecs ) );\n-                }\n+          Value[] values = getPropertyValues(nodePropertyMap, indexPropertyIds);\n+          try (IndexReader reader = indexes.accessorFor(indexRule).newReader())\n+          {\n+            long nodeId = record.getId();\n \n-                int[] indexPropertyIds = indexRule.schema().getPropertyIds();\n-                if ( nodeHasSchemaProperties( nodePropertyMap, indexPropertyIds ) )\n-                {\n-                    Value[] values = getPropertyValues( nodePropertyMap, indexPropertyIds );\n-                    try ( IndexReader reader = indexes.accessorFor( indexRule ).newReader() )\n-                    {\n-                        long nodeId = record.getId();\n-\n-                        if ( indexRule.canSupportUniqueConstraint() )\n-                        {\n-                            verifyNodeCorrectlyIndexedUniquely( nodeId, values, engine, indexRule, reader );\n-                        }\n-                        else\n-                        {\n-                            long count = reader.countIndexedNodes( nodeId, values );\n-                            reportIncorrectIndexCount( values, engine, indexRule, count );\n-                        }\n-                    }\n-                }\n+            if (indexRule.canSupportUniqueConstraint())\n+            {\n+              verifyNodeCorrectlyIndexedUniquely(nodeId, values, engine, indexRule, reader);\n+            } else\n+            {\n+              long count = reader.countIndexedNodes(nodeId, values);\n+              reportIncorrectIndexCount(values, engine, indexRule, count);\n             }\n+          }\n         }\n+      }\n     }\n+  }\n \n-    private void verifyNodeCorrectlyIndexedUniquely( long nodeId, Value[] propertyValues,\n-            CheckerEngine<NodeRecord,ConsistencyReport.NodeConsistencyReport> engine, IndexRule indexRule,\n-            IndexReader reader )\n-    {\n-        IndexQuery[] query = seek( indexRule.schema(), propertyValues );\n-\n-        PrimitiveLongIterator indexedNodeIds = queryIndexOrEmpty( reader, query );\n+  private void verifyNodeCorrectlyIndexedUniquely(long nodeId, Value[] propertyValues,\n+                                                  CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine, IndexRule indexRule,\n+                                                  IndexReader reader)\n+  {\n+    IndexQuery[] query = seek(indexRule.schema(), propertyValues);\n \n-        long count = 0;\n-        while ( indexedNodeIds.hasNext() )\n-        {\n-            long indexedNodeId = indexedNodeIds.next();\n+    PrimitiveLongIterator indexedNodeIds = queryIndexOrEmpty(reader, query);\n \n-            if ( nodeId == indexedNodeId )\n-            {\n-                count++;\n-            }\n-            else\n-            {\n-                engine.report().uniqueIndexNotUnique( indexRule, Values.asObjects( propertyValues ), indexedNodeId );\n-            }\n-        }\n+    long count = 0;\n+    while (indexedNodeIds.hasNext())\n+    {\n+      long indexedNodeId = indexedNodeIds.next();\n \n-        reportIncorrectIndexCount( propertyValues, engine, indexRule, count );\n+      if (nodeId == indexedNodeId)\n+      {\n+        count++;\n+      } else\n+      {\n+        engine.report().uniqueIndexNotUnique(indexRule, Values.asObjects(propertyValues), indexedNodeId);\n+      }\n     }\n \n-    private void reportIncorrectIndexCount( Value[] propertyValues,\n-            CheckerEngine<NodeRecord,ConsistencyReport.NodeConsistencyReport> engine, IndexRule indexRule, long count )\n+    reportIncorrectIndexCount(propertyValues, engine, indexRule, count);\n+  }\n+\n+  private void reportIncorrectIndexCount(Value[] propertyValues,\n+                                         CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine, IndexRule indexRule, long count)\n+  {\n+    if (count == 0)\n     {\n-        if ( count == 0 )\n-        {\n-            engine.report().notIndexed( indexRule, Values.asObjects( propertyValues ) );\n-        }\n-        else if ( count != 1 )\n-        {\n-            engine.report().indexedMultipleTimes( indexRule, Values.asObjects( propertyValues ), count );\n-        }\n+      engine.report().notIndexed(indexRule, Values.asObjects(propertyValues));\n+    } else if (count != 1)\n+    {\n+      engine.report().indexedMultipleTimes(indexRule, Values.asObjects(propertyValues), count);\n     }\n+  }\n \n-    private void checkProperty( NodeRecord record,\n-            CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n-            Collection<PropertyRecord> props )\n+  private void checkProperty(NodeRecord record,\n+                             CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+                             Collection<PropertyRecord> props)\n+  {\n+    if (!Record.NO_NEXT_PROPERTY.is(record.getNextProp()))\n     {\n-        if ( !Record.NO_NEXT_PROPERTY.is( record.getNextProp() ) )\n-        {\n-            PropertyRecord firstProp = props.iterator().next();\n-            if ( !Record.NO_PREVIOUS_PROPERTY.is( firstProp.getPrevProp() ) )\n-            {\n-                engine.report().propertyNotFirstInChain( firstProp );\n-            }\n+      PropertyRecord firstProp = props.iterator().next();\n+      if (!Record.NO_PREVIOUS_PROPERTY.is(firstProp.getPrevProp()))\n+      {\n+        engine.report().propertyNotFirstInChain(firstProp);\n+      }\n \n-            PrimitiveIntSet keys = Primitive.intSet();\n-            for ( PropertyRecord property : props )\n+      PrimitiveIntSet keys = Primitive.intSet();\n+      for (PropertyRecord property : props)\n+      {\n+        if (!property.inUse())\n+        {\n+          engine.report().propertyNotInUse(property);\n+        } else\n+        {\n+          for (int key : ChainCheck.keys(property))\n+          {\n+            if (!keys.add(key))\n             {\n-                if ( !property.inUse() )\n-                {\n-                    engine.report().propertyNotInUse( property );\n-                }\n-                else\n-                {\n-                    for ( int key : ChainCheck.keys( property ) )\n-                    {\n-                        if ( !keys.add( key ) )\n-                        {\n-                            engine.report().propertyKeyNotUniqueInChain();\n-                        }\n-                    }\n-                }\n+              engine.report().propertyKeyNotUniqueInChain();\n             }\n+          }\n         }\n+      }\n     }\n+  }\n \n-    private Value[] getPropertyValues( PrimitiveIntObjectMap<PropertyBlock> propertyMap, int[] indexPropertyIds )\n+  private Value[] getPropertyValues(PrimitiveIntObjectMap<PropertyBlock> propertyMap, int[] indexPropertyIds)\n+  {\n+    Value[] values = new Value[indexPropertyIds.length];\n+    for (int i = 0; i < indexPropertyIds.length; i++)\n     {\n-        Value[] values = new Value[indexPropertyIds.length];\n-        for ( int i = 0; i < indexPropertyIds.length; i++ )\n-        {\n-            PropertyBlock propertyBlock = propertyMap.get( indexPropertyIds[i] );\n-            values[i] = propertyReader.propertyValue( propertyBlock );\n-        }\n-        return values;\n+      PropertyBlock propertyBlock = propertyMap.get(indexPropertyIds[i]);\n+      values[i] = propertyReader.propertyValue(propertyBlock);\n     }\n+    return values;\n+  }\n \n-    private PrimitiveIntObjectMap<PropertyBlock> properties( List<PropertyBlock> propertyBlocks )\n+  private PrimitiveIntObjectMap<PropertyBlock> properties(List<PropertyBlock> propertyBlocks)\n+  {\n+    PrimitiveIntObjectMap<PropertyBlock> propertyIds = Primitive.intObjectMap();\n+    for (PropertyBlock propertyBlock : propertyBlocks)\n     {\n-        PrimitiveIntObjectMap<PropertyBlock> propertyIds = Primitive.intObjectMap();\n-        for ( PropertyBlock propertyBlock : propertyBlocks )\n-        {\n-            propertyIds.put( propertyBlock.getKeyIndexId(), propertyBlock );\n-        }\n-        return propertyIds;\n+      propertyIds.put(propertyBlock.getKeyIndexId(), propertyBlock);\n     }\n+    return propertyIds;\n+  }\n \n-    private IndexQuery[] seek( SchemaDescriptor schema, Value[] propertyValues )\n+  private IndexQuery[] seek(SchemaDescriptor schema, Value[] propertyValues)\n+  {\n+    int[] propertyIds = schema.getPropertyIds();\n+    assert propertyIds.length == propertyValues.length;\n+    IndexQuery[] query = new IndexQuery[propertyValues.length];\n+    for (int i = 0; i < query.length; i++)\n     {\n-        int[] propertyIds = schema.getPropertyIds();\n-        assert propertyIds.length == propertyValues.length;\n-        IndexQuery[] query = new IndexQuery[propertyValues.length];\n-        for ( int i = 0; i < query.length; i++ )\n-        {\n-            query[i] = IndexQuery.exact( propertyIds[i], propertyValues[i] );\n-        }\n-        return query;\n+      query[i] = IndexQuery.exact(propertyIds[i], propertyValues[i]);\n     }\n+    return query;\n+  }\n \n-    private PrimitiveLongIterator queryIndexOrEmpty( IndexReader reader, IndexQuery[] query )\n+  private PrimitiveLongIterator queryIndexOrEmpty(IndexReader reader, IndexQuery[] query)\n+  {\n+    PrimitiveLongIterator indexedNodeIds;\n+    try\n     {\n-        PrimitiveLongIterator indexedNodeIds;\n-        try\n-        {\n-            indexedNodeIds = reader.query( query );\n-        }\n-        catch ( IndexNotApplicableKernelException e )\n-        {\n-            throw new RuntimeException( format(\n-                    \"Consistency checking error: index provider does not support exact query %s\",\n-                    Arrays.toString( query ) ), e );\n-        }\n-\n-        return reader.hasFullValuePrecision( query )\n-                ? indexedNodeIds : LookupFilter.exactIndexMatches( propertyReader, indexedNodeIds, query );\n+      indexedNodeIds = reader.query(query);\n+    } catch (IndexNotApplicableKernelException e)\n+    {\n+      throw new RuntimeException(format(\n+          \"Consistency checking error: index provider does not support exact query %s\",\n+          Arrays.toString(query)), e);\n     }\n \n-    private static boolean nodeHasSchemaProperties(\n-            PrimitiveIntObjectMap<PropertyBlock> nodePropertyMap, int[] indexPropertyIds )\n+    return reader.hasFullValuePrecision(query)\n+        ? indexedNodeIds : LookupFilter.exactIndexMatches(propertyReader, indexedNodeIds, query);\n+  }\n+\n+  private static boolean nodeHasSchemaProperties(\n+      PrimitiveIntObjectMap<PropertyBlock> nodePropertyMap, int[] indexPropertyIds)\n+  {\n+    for (int indexPropertyId : indexPropertyIds)\n     {\n-        for ( int indexPropertyId : indexPropertyIds )\n-        {\n-            if ( !nodePropertyMap.containsKey( indexPropertyId ) )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      if (!nodePropertyMap.containsKey(indexPropertyId))\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n }\n",
            "diff_size": 256
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2906/PropertyAndNodeIndexedCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2906/PropertyAndNodeIndexedCheck.java\nindex 9962dda3522..bafb78059b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2906/PropertyAndNodeIndexedCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2906/PropertyAndNodeIndexedCheck.java\n@@ -67,10 +67,9 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n     }\n \n     @Override\n-    public void check( NodeRecord record,\n-                       CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n+    public void check( NodeRecord record, CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n                        RecordAccess records )\n-    {\n+{\n         try\n         {\n             Collection<PropertyRecord> properties = propertyReader.getPropertyRecordChain( record.getNextProp() );\n@@ -79,7 +78,8 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n             {\n                 matchIndexesToNode( record, engine, records, properties );\n             }\n-            checkProperty( record, engine, properties );\n+\n+checkProperty( record, engine, properties );\n         }\n         catch ( PropertyReader.CircularPropertyRecordChainException e )\n         {\n@@ -90,12 +90,9 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n     /**\n      * Matches indexes to a node.\n      */\n-    private void matchIndexesToNode(\n-            NodeRecord record,\n-            CheckerEngine<NodeRecord,\n+    private void matchIndexesToNode( NodeRecord record, CheckerEngine<NodeRecord,\n             ConsistencyReport.NodeConsistencyReport> engine,\n-            RecordAccess records,\n-            Collection<PropertyRecord> propertyRecs )\n+            RecordAccess records, Collection<PropertyRecord> propertyRecs )\n     {\n         Set<Long> labels = NodeLabelReader.getListOfLabels( record, records, engine );\n         PrimitiveIntObjectMap<PropertyBlock> nodePropertyMap = null;\n@@ -116,8 +113,7 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n                     try ( IndexReader reader = indexes.accessorFor( indexRule ).newReader() )\n                     {\n                         long nodeId = record.getId();\n-\n-                        if ( indexRule.canSupportUniqueConstraint() )\n+if ( indexRule.canSupportUniqueConstraint() )\n                         {\n                             verifyNodeCorrectlyIndexedUniquely( nodeId, values, engine, indexRule, reader );\n                         }\n@@ -132,20 +128,17 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n         }\n     }\n \n-    private void verifyNodeCorrectlyIndexedUniquely( long nodeId, Value[] propertyValues,\n-            CheckerEngine<NodeRecord,ConsistencyReport.NodeConsistencyReport> engine, IndexRule indexRule,\n+    private void verifyNodeCorrectlyIndexedUniquely( long nodeId, Value[] propertyValues, CheckerEngine<NodeRecord,ConsistencyReport.NodeConsistencyReport> engine, IndexRule indexRule,\n             IndexReader reader )\n     {\n         IndexQuery[] query = seek( indexRule.schema(), propertyValues );\n-\n-        PrimitiveLongIterator indexedNodeIds = queryIndexOrEmpty( reader, query );\n+PrimitiveLongIterator indexedNodeIds = queryIndexOrEmpty( reader, query );\n \n         long count = 0;\n         while ( indexedNodeIds.hasNext() )\n         {\n             long indexedNodeId = indexedNodeIds.next();\n-\n-            if ( nodeId == indexedNodeId )\n+if ( nodeId == indexedNodeId )\n             {\n                 count++;\n             }\n@@ -158,8 +151,7 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n         reportIncorrectIndexCount( propertyValues, engine, indexRule, count );\n     }\n \n-    private void reportIncorrectIndexCount( Value[] propertyValues,\n-            CheckerEngine<NodeRecord,ConsistencyReport.NodeConsistencyReport> engine, IndexRule indexRule, long count )\n+    private void reportIncorrectIndexCount( Value[] propertyValues, CheckerEngine<NodeRecord,ConsistencyReport.NodeConsistencyReport> engine, IndexRule indexRule, long count )\n     {\n         if ( count == 0 )\n         {\n@@ -171,9 +163,7 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n         }\n     }\n \n-    private void checkProperty( NodeRecord record,\n-            CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine,\n-            Collection<PropertyRecord> props )\n+    private void checkProperty( NodeRecord record, CheckerEngine<NodeRecord, ConsistencyReport.NodeConsistencyReport> engine, Collection<PropertyRecord> props )\n     {\n         if ( !Record.NO_NEXT_PROPERTY.is( record.getNextProp() ) )\n         {\n@@ -212,7 +202,8 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n             PropertyBlock propertyBlock = propertyMap.get( indexPropertyIds[i] );\n             values[i] = propertyReader.propertyValue( propertyBlock );\n         }\n-        return values;\n+\n+return values;\n     }\n \n     private PrimitiveIntObjectMap<PropertyBlock> properties( List<PropertyBlock> propertyBlocks )\n@@ -222,7 +213,8 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n         {\n             propertyIds.put( propertyBlock.getKeyIndexId(), propertyBlock );\n         }\n-        return propertyIds;\n+\n+return propertyIds;\n     }\n \n     private IndexQuery[] seek( SchemaDescriptor schema, Value[] propertyValues )\n@@ -234,7 +226,8 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n         {\n             query[i] = IndexQuery.exact( propertyIds[i], propertyValues[i] );\n         }\n-        return query;\n+\n+return query;\n     }\n \n     private PrimitiveLongIterator queryIndexOrEmpty( IndexReader reader, IndexQuery[] query )\n@@ -246,17 +239,14 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n         }\n         catch ( IndexNotApplicableKernelException e )\n         {\n-            throw new RuntimeException( format(\n-                    \"Consistency checking error: index provider does not support exact query %s\",\n+            throw new RuntimeException( format( \"Consistency checking error: index provider does not support exact query %s\",\n                     Arrays.toString( query ) ), e );\n         }\n \n-        return reader.hasFullValuePrecision( query )\n-                ? indexedNodeIds : LookupFilter.exactIndexMatches( propertyReader, indexedNodeIds, query );\n+        return reader.hasFullValuePrecision( query ) ? indexedNodeIds : LookupFilter.exactIndexMatches( propertyReader, indexedNodeIds, query );\n     }\n \n-    private static boolean nodeHasSchemaProperties(\n-            PrimitiveIntObjectMap<PropertyBlock> nodePropertyMap, int[] indexPropertyIds )\n+    private static boolean nodeHasSchemaProperties( PrimitiveIntObjectMap<PropertyBlock> nodePropertyMap, int[] indexPropertyIds )\n     {\n         for ( int indexPropertyId : indexPropertyIds )\n         {\n@@ -267,4 +257,4 @@ public class PropertyAndNodeIndexedCheck implements RecordCheck<NodeRecord, Cons\n         }\n         return true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}