{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3543",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "56",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "168",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "176",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "188",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "193",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "230",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3543/ProcessorStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3543/ProcessorStep.java\nindex fbe73e2a659..2d13e798d13 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3543/ProcessorStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3543/ProcessorStep.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.staging;\n \n import java.util.concurrent.ExecutionException;\n@@ -37,205 +38,199 @@ import static java.lang.System.nanoTime;\n  * Supports an arbitrary number of threads to execute batches in parallel.\n  * Subclasses implement {@link #process(Object, BatchSender)} receiving the batch to process\n  * and an {@link BatchSender} for sending the modified batch, or other batches downstream.\n- *\n+ * <p>\n  * There's an overlap of functionality in {@link TicketedProcessing}, however the fit isn't perfect\n  * for using it as the engine in a {@link ProcessorStep} because the queuing of processed results\n  * works a bit differently. Perhaps sometimes this can be addressed.\n  */\n public abstract class ProcessorStep<T> extends AbstractStep<T>\n {\n-    private TaskExecutor<Sender> executor;\n-    // max processors for this step, zero means unlimited, or rather config.maxNumberOfProcessors()\n-    private final int maxProcessors;\n-\n-    // Time stamp for when we processed the last queued batch received from upstream.\n-    // Useful for tracking how much time we spend waiting for batches from upstream.\n-    private final AtomicLong lastBatchEndTime = new AtomicLong();\n-\n-    protected ProcessorStep( StageControl control, String name, Configuration config, int maxProcessors,\n-            StatsProvider... additionalStatsProviders )\n-    {\n-        super( control, name, config, additionalStatsProviders );\n-        this.maxProcessors = maxProcessors;\n-    }\n-\n-    @Override\n-    public void start( int orderingGuarantees )\n-    {\n-        super.start( orderingGuarantees );\n-        this.executor = new DynamicTaskExecutor<>( 1, maxProcessors, config.maxNumberOfProcessors(), PARK, name(), Sender::new );\n-    }\n-\n-    @Override\n-    public long receive( final long ticket, final T batch )\n-    {\n-        // Don't go too far ahead\n-        incrementQueue();\n-        long nanoTime = nanoTime();\n-        executor.submit( sender ->\n-        {\n-            assertHealthy();\n-            sender.initialize( ticket );\n-            try\n-            {\n-                long startTime = nanoTime();\n-                process( batch, sender );\n-                if ( downstream == null )\n-                {\n-                    // No batches were emitted so we couldn't track done batches in that way.\n-                    // We can see that we're the last step so increment here instead\n-                    doneBatches.incrementAndGet();\n-                    control.recycle( batch );\n-                }\n-                totalProcessingTime.add( nanoTime() - startTime - sender.sendTime );\n-\n-                decrementQueue();\n-                checkNotifyEndDownstream();\n-            }\n-            catch ( Throwable e )\n-            {\n-                issuePanic( e );\n-            }\n-        } );\n-        return nanoTime() - nanoTime;\n-    }\n-\n-    private void decrementQueue()\n+  private TaskExecutor<Sender> executor;\n+  // max processors for this step, zero means unlimited, or rather config.maxNumberOfProcessors()\n+  private final int maxProcessors;\n+\n+  // Time stamp for when we processed the last queued batch received from upstream.\n+  // Useful for tracking how much time we spend waiting for batches from upstream.\n+  private final AtomicLong lastBatchEndTime = new AtomicLong();\n+\n+  protected ProcessorStep(StageControl control, String name, Configuration config, int maxProcessors,\n+                          StatsProvider... additionalStatsProviders)\n+  {\n+    super(control, name, config, additionalStatsProviders);\n+    this.maxProcessors = maxProcessors;\n+  }\n+\n+  @Override\n+  public void start(int orderingGuarantees)\n+  {\n+    super.start(orderingGuarantees);\n+    this.executor = new DynamicTaskExecutor<>(1, maxProcessors, config.maxNumberOfProcessors(), PARK, name(), Sender::new);\n+  }\n+\n+  @Override\n+  public long receive(final long ticket, final T batch)\n+  {\n+    // Don't go too far ahead\n+    incrementQueue();\n+    long nanoTime = nanoTime();\n+    executor.submit(sender ->\n     {\n-        // Even though queuedBatches is built into AbstractStep, in that number of received batches\n-        // is number of done + queued batches, this is the only implementation changing queuedBatches\n-        // since it's the only implementation capable of such. That's why this code is here\n-        // and not in AbstractStep.\n-        int queueSizeAfterThisJobDone = queuedBatches.decrementAndGet();\n-        assert queueSizeAfterThisJobDone >= 0 : \"Negative queue size \" + queueSizeAfterThisJobDone;\n-        if ( queueSizeAfterThisJobDone == 0 )\n+      assertHealthy();\n+      sender.initialize(ticket);\n+      try\n+      {\n+        long startTime = nanoTime();\n+        process(batch, sender);\n+        if (downstream == null)\n         {\n-            lastBatchEndTime.set( currentTimeMillis() );\n+          // No batches were emitted so we couldn't track done batches in that way.\n+          // We can see that we're the last step so increment here instead\n+          doneBatches.incrementAndGet();\n+          control.recycle(batch);\n         }\n-    }\n-\n-    private void incrementQueue()\n-    {\n-        if ( queuedBatches.getAndIncrement() == 0 )\n-        {   // This is the first batch after we last drained the queue.\n-            long lastBatchEnd = lastBatchEndTime.get();\n-            if ( lastBatchEnd != 0 )\n-            {\n-                upstreamIdleTime.add( currentTimeMillis() - lastBatchEnd );\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Processes a {@link #receive(long, Object) received} batch. Any batch that should be sent downstream\n-     * as part of processing the supplied batch should be done so using {@link BatchSender#send(Object)}.\n-     *\n-     * The most typical implementation of this method is to process the received batch, either by\n-     * creating a new batch object containing some derivative of the received batch, or the batch\n-     * object itself with some modifications and {@link BatchSender#send(Object) emit} that in the end of the method.\n-     *\n-     * @param batch batch to process.\n-     * @param sender {@link BatchSender} for sending zero or more batches downstream.\n-     */\n-    protected abstract void process( T batch, BatchSender sender ) throws Throwable;\n-\n-    @Override\n-    public void close() throws Exception\n+        totalProcessingTime.add(nanoTime() - startTime - sender.sendTime);\n+\n+        decrementQueue();\n+        checkNotifyEndDownstream();\n+      } catch (Throwable e)\n+      {\n+        issuePanic(e);\n+      }\n+    });\n+    return nanoTime() - nanoTime;\n+  }\n+\n+  private void decrementQueue()\n+  {\n+    // Even though queuedBatches is built into AbstractStep, in that number of received batches\n+    // is number of done + queued batches, this is the only implementation changing queuedBatches\n+    // since it's the only implementation capable of such. That's why this code is here\n+    // and not in AbstractStep.\n+    int queueSizeAfterThisJobDone = queuedBatches.decrementAndGet();\n+    assert queueSizeAfterThisJobDone >= 0 : \"Negative queue size \" + queueSizeAfterThisJobDone;\n+    if (queueSizeAfterThisJobDone == 0)\n     {\n-        super.close();\n-        executor.close();\n+      lastBatchEndTime.set(currentTimeMillis());\n     }\n-\n-    @Override\n-    public int processors( int delta )\n-    {\n-        return executor.processors( delta );\n+  }\n+\n+  private void incrementQueue()\n+  {\n+    if (queuedBatches.getAndIncrement() == 0)\n+    {   // This is the first batch after we last drained the queue.\n+      long lastBatchEnd = lastBatchEndTime.get();\n+      if (lastBatchEnd != 0)\n+      {\n+        upstreamIdleTime.add(currentTimeMillis() - lastBatchEnd);\n+      }\n     }\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    private AsyncApply sendDownstream( long ticket, Object batch, AsyncApply downstreamAsync )\n+  }\n+\n+  /**\n+   * Processes a {@link #receive(long, Object) received} batch. Any batch that should be sent downstream\n+   * as part of processing the supplied batch should be done so using {@link BatchSender#send(Object)}.\n+   * <p>\n+   * The most typical implementation of this method is to process the received batch, either by\n+   * creating a new batch object containing some derivative of the received batch, or the batch\n+   * object itself with some modifications and {@link BatchSender#send(Object) emit} that in the end of the method.\n+   *\n+   * @param batch  batch to process.\n+   * @param sender {@link BatchSender} for sending zero or more batches downstream.\n+   */\n+  protected abstract void process(T batch, BatchSender sender) throws Throwable;\n+\n+  @Override\n+  public void close() throws Exception\n+  {\n+    super.close();\n+    executor.close();\n+  }\n+\n+  @Override\n+  public int processors(int delta)\n+  {\n+    return executor.processors(delta);\n+  }\n+\n+  @SuppressWarnings(\"unchecked\")\n+  private AsyncApply sendDownstream(long ticket, Object batch, AsyncApply downstreamAsync)\n+  {\n+    if (guarantees(ORDER_SEND_DOWNSTREAM))\n     {\n-        if ( guarantees( ORDER_SEND_DOWNSTREAM ) )\n+      AsyncApply async = downstreamWorkSync.applyAsync(new SendDownstream(ticket, batch, downstreamIdleTime));\n+      if (downstreamAsync != null)\n+      {\n+        try\n         {\n-            AsyncApply async = downstreamWorkSync.applyAsync( new SendDownstream( ticket, batch, downstreamIdleTime ) );\n-            if ( downstreamAsync != null )\n-            {\n-                try\n-                {\n-                    downstreamAsync.await();\n-                    async.await();\n-                    return null;\n-                }\n-                catch ( ExecutionException e )\n-                {\n-                    issuePanic( e.getCause() );\n-                }\n-            }\n-            else\n-            {\n-                return async;\n-            }\n-        }\n-        else\n+          downstreamAsync.await();\n+          async.await();\n+          return null;\n+        } catch (ExecutionException e)\n         {\n-            downstreamIdleTime.add( downstream.receive( ticket, batch ) );\n-            doneBatches.incrementAndGet();\n+          issuePanic(e.getCause());\n         }\n-        return null;\n+      } else\n+      {\n+        return async;\n+      }\n+    } else\n+    {\n+      downstreamIdleTime.add(downstream.receive(ticket, batch));\n+      doneBatches.incrementAndGet();\n     }\n-\n-    @Override\n-    protected void done()\n+    return null;\n+  }\n+\n+  @Override\n+  protected void done()\n+  {\n+    lastCallForEmittingOutstandingBatches(new Sender());\n+    if (downstreamWorkSync != null)\n     {\n-        lastCallForEmittingOutstandingBatches( new Sender() );\n-        if ( downstreamWorkSync != null )\n-        {\n-            try\n-            {\n-                downstreamWorkSync.apply( new SendDownstream( -1, null, downstreamIdleTime ) );\n-            }\n-            catch ( ExecutionException e )\n-            {\n-                issuePanic( e.getCause() );\n-            }\n-        }\n-        super.done();\n+      try\n+      {\n+        downstreamWorkSync.apply(new SendDownstream(-1, null, downstreamIdleTime));\n+      } catch (ExecutionException e)\n+      {\n+        issuePanic(e.getCause());\n+      }\n     }\n+    super.done();\n+  }\n \n-    protected void lastCallForEmittingOutstandingBatches( BatchSender sender )\n-    {   // Nothing to emit, subclasses might have though\n-    }\n+  protected void lastCallForEmittingOutstandingBatches(BatchSender sender)\n+  {   // Nothing to emit, subclasses might have though\n+  }\n+\n+  @VisibleForTesting\n+  public int getMaxProcessors()\n+  {\n+    return maxProcessors;\n+  }\n \n-    @VisibleForTesting\n-    public int getMaxProcessors()\n+  private class Sender implements BatchSender\n+  {\n+    private long sendTime;\n+    private long ticket;\n+    private AsyncApply downstreamAsync;\n+\n+    @Override\n+    public void send(Object batch)\n     {\n-        return maxProcessors;\n+      long time = nanoTime();\n+      try\n+      {\n+        downstreamAsync = sendDownstream(ticket, batch, downstreamAsync);\n+      } finally\n+      {\n+        sendTime += nanoTime() - time;\n+      }\n     }\n \n-    private class Sender implements BatchSender\n+    public void initialize(long ticket)\n     {\n-        private long sendTime;\n-        private long ticket;\n-        private AsyncApply downstreamAsync;\n-\n-        @Override\n-        public void send( Object batch )\n-        {\n-            long time = nanoTime();\n-            try\n-            {\n-                downstreamAsync = sendDownstream( ticket, batch, downstreamAsync );\n-            }\n-            finally\n-            {\n-                sendTime += nanoTime() - time;\n-            }\n-        }\n-\n-        public void initialize( long ticket )\n-        {\n-            this.ticket = ticket;\n-            this.sendTime = 0;\n-        }\n+      this.ticket = ticket;\n+      this.sendTime = 0;\n     }\n+  }\n }\n",
            "diff_size": 251
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3543/ProcessorStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3543/ProcessorStep.java\nindex fbe73e2a659..6eb62e16b3f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3543/ProcessorStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3543/ProcessorStep.java\n@@ -117,7 +117,8 @@ public abstract class ProcessorStep<T> extends AbstractStep<T>\n     private void incrementQueue()\n     {\n         if ( queuedBatches.getAndIncrement() == 0 )\n-        {   // This is the first batch after we last drained the queue.\n+        {\n+    // This is the first batch after we last drained the queue.\n             long lastBatchEnd = lastBatchEndTime.get();\n             if ( lastBatchEnd != 0 )\n             {\n@@ -203,7 +204,8 @@ public abstract class ProcessorStep<T> extends AbstractStep<T>\n     }\n \n     protected void lastCallForEmittingOutstandingBatches( BatchSender sender )\n-    {   // Nothing to emit, subclasses might have though\n+    {\n+    // Nothing to emit, subclasses might have though\n     }\n \n     @VisibleForTesting\n@@ -238,4 +240,4 @@ public abstract class ProcessorStep<T> extends AbstractStep<T>\n             this.sendTime = 0;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}