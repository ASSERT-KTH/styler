{
    "project_name": "delight-im-NationSoccer",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "75",
                "column": "33",
                "severity": "error",
                "message": "'typecast' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "\tprotected void updateTextBounds(final String pCharacterAsString) {\n\t\tthis.mStrokePaint.getTextBounds(pCharacterAsString, 0, 1, this.mTextBounds);\n\t\tfinal int inset = -(int)Math.ceil(this.mStrokeWidth * 0.5f);\n\t\tthis.mTextBounds.inset(inset, inset);\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "75",
                    "column": "33",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/9/StrokeFont.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/9/StrokeFont.java\nindex 0690568bb1d..78362c77e66 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/9/StrokeFont.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/intellij/9/StrokeFont.java\n@@ -9,7 +9,7 @@ import android.graphics.Typeface;\n \n /**\n  * TODO Re-implement with Font changes.\n- *\n+ * <p>\n  * (c) 2010 Nicolas Gramlich\n  * (c) 2011 Zynga Inc.\n  *\n@@ -17,78 +17,105 @@ import android.graphics.Typeface;\n  * @since 10:39:33 - 03.04.2010\n  */\n public class StrokeFont extends Font {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\tprivate final Paint mStrokePaint;\n-\tprivate final boolean mStrokeOnly;\n-\tprivate final float mStrokeWidth;\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tpublic StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final Color pColor, final float pStrokeWidth, final Color pStrokeColor) {\n-\t\tthis(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColor.getARGBPackedInt(), pStrokeWidth, pStrokeColor.getARGBPackedInt());\n-\t}\n-\n-\tpublic StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final int pColorARGBPackedInt, final float pStrokeWidth, final int pStrokeColorARGBPackedInt) {\n-\t\tthis(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColorARGBPackedInt, pStrokeWidth, pStrokeColorARGBPackedInt, false);\n-\t}\n-\n-\tpublic StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final Color pColor, final float pStrokeWidth, final Color pStrokeColor, final boolean pStrokeOnly) {\n-\t\tthis(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColor.getARGBPackedInt(), pStrokeWidth, pStrokeColor.getARGBPackedInt(), pStrokeOnly);\n-\t}\n-\n-\tpublic StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final int pColorARGBPackedInt, final float pStrokeWidth, final int pStrokeColorARGBPackedInt, final boolean pStrokeOnly) {\n-\t\tsuper(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColorARGBPackedInt);\n-\n-\t\tthis.mStrokeWidth = pStrokeWidth;\n-\n-\t\tthis.mStrokePaint = new Paint();\n-\t\tthis.mStrokePaint.setTypeface(pTypeface);\n-\t\tthis.mStrokePaint.setStyle(Style.STROKE);\n-\t\tthis.mStrokePaint.setStrokeWidth(pStrokeWidth);\n-\t\tthis.mStrokePaint.setColor(pStrokeColorARGBPackedInt);\n-\t\tthis.mStrokePaint.setTextSize(pSize);\n-\t\tthis.mStrokePaint.setAntiAlias(pAntiAlias);\n-\n-\t\tthis.mStrokeOnly = pStrokeOnly;\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t@Override\n-\tprotected void updateTextBounds(final String pCharacterAsString) {\n-\t\tthis.mStrokePaint.getTextBounds(pCharacterAsString, 0, 1, this.mTextBounds);\n-\t\tfinal int inset = -(int)Math.ceil(this.mStrokeWidth * 0.5f);\n-\t\tthis.mTextBounds.inset(inset, inset);\n-\t}\n-\n-\t@Override\n-\tprotected void drawLetter(final String pCharacterAsString, final float pLeft, final float pTop) {\n-\t\tif (!this.mStrokeOnly) {\n-\t\t\tsuper.drawLetter(pCharacterAsString, pLeft, pTop);\n-\t\t}\n-\t\tthis.mCanvas.drawText(pCharacterAsString, pLeft + Font.LETTER_TEXTURE_PADDING, pTop + Font.LETTER_TEXTURE_PADDING, this.mStrokePaint);\n-\t}\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n+    // ===========================================================\n+    // Constants\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Fields\n+    // ===========================================================\n+\n+    private final Paint mStrokePaint;\n+    private final boolean mStrokeOnly;\n+    private final float mStrokeWidth;\n+\n+    // ===========================================================\n+    // Constructors\n+    // ===========================================================\n+\n+    public StrokeFont(final FontManager pFontManager, final ITexture pTexture,\n+                      final Typeface pTypeface, final float pSize,\n+                      final boolean pAntiAlias, final Color pColor,\n+                      final float pStrokeWidth, final Color pStrokeColor) {\n+        this(pFontManager, pTexture, pTypeface, pSize, pAntiAlias,\n+            pColor.getARGBPackedInt(), pStrokeWidth,\n+            pStrokeColor.getARGBPackedInt());\n+    }\n+\n+    public StrokeFont(final FontManager pFontManager, final ITexture pTexture,\n+                      final Typeface pTypeface, final float pSize,\n+                      final boolean pAntiAlias, final int pColorARGBPackedInt,\n+                      final float pStrokeWidth,\n+                      final int pStrokeColorARGBPackedInt) {\n+        this(pFontManager, pTexture, pTypeface, pSize, pAntiAlias,\n+            pColorARGBPackedInt, pStrokeWidth, pStrokeColorARGBPackedInt,\n+            false);\n+    }\n+\n+    public StrokeFont(final FontManager pFontManager, final ITexture pTexture,\n+                      final Typeface pTypeface, final float pSize,\n+                      final boolean pAntiAlias, final Color pColor,\n+                      final float pStrokeWidth, final Color pStrokeColor,\n+                      final boolean pStrokeOnly) {\n+        this(pFontManager, pTexture, pTypeface, pSize, pAntiAlias,\n+            pColor.getARGBPackedInt(), pStrokeWidth,\n+            pStrokeColor.getARGBPackedInt(), pStrokeOnly);\n+    }\n+\n+    public StrokeFont(final FontManager pFontManager, final ITexture pTexture,\n+                      final Typeface pTypeface, final float pSize,\n+                      final boolean pAntiAlias, final int pColorARGBPackedInt,\n+                      final float pStrokeWidth,\n+                      final int pStrokeColorARGBPackedInt,\n+                      final boolean pStrokeOnly) {\n+        super(pFontManager, pTexture, pTypeface, pSize, pAntiAlias,\n+            pColorARGBPackedInt);\n+\n+        this.mStrokeWidth = pStrokeWidth;\n+\n+        this.mStrokePaint = new Paint();\n+        this.mStrokePaint.setTypeface(pTypeface);\n+        this.mStrokePaint.setStyle(Style.STROKE);\n+        this.mStrokePaint.setStrokeWidth(pStrokeWidth);\n+        this.mStrokePaint.setColor(pStrokeColorARGBPackedInt);\n+        this.mStrokePaint.setTextSize(pSize);\n+        this.mStrokePaint.setAntiAlias(pAntiAlias);\n+\n+        this.mStrokeOnly = pStrokeOnly;\n+    }\n+\n+    // ===========================================================\n+    // Getter & Setter\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Methods for/from SuperClass/Interfaces\n+    // ===========================================================\n+\n+    @Override\n+    protected void updateTextBounds(final String pCharacterAsString) {\n+        this.mStrokePaint\n+            .getTextBounds(pCharacterAsString, 0, 1, this.mTextBounds);\n+        final int inset = -(int) Math.ceil(this.mStrokeWidth * 0.5f);\n+        this.mTextBounds.inset(inset, inset);\n+    }\n+\n+    @Override\n+    protected void drawLetter(final String pCharacterAsString,\n+                              final float pLeft, final float pTop) {\n+        if (!this.mStrokeOnly) {\n+            super.drawLetter(pCharacterAsString, pLeft, pTop);\n+        }\n+        this.mCanvas\n+            .drawText(pCharacterAsString, pLeft + Font.LETTER_TEXTURE_PADDING,\n+                pTop + Font.LETTER_TEXTURE_PADDING, this.mStrokePaint);\n+    }\n+\n+    // ===========================================================\n+    // Methods\n+    // ===========================================================\n+\n+    // ===========================================================\n+    // Inner and Anonymous Classes\n+    // ===========================================================\n }\n",
            "diff_size": 102
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/9/StrokeFont.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/9/StrokeFont.java\nindex 0690568bb1d..81d0cde6997 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/9/StrokeFont.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/naturalize/9/StrokeFont.java\n@@ -72,7 +72,7 @@ public class StrokeFont extends Font {\n \t@Override\n \tprotected void updateTextBounds(final String pCharacterAsString) {\n \t\tthis.mStrokePaint.getTextBounds(pCharacterAsString, 0, 1, this.mTextBounds);\n-\t\tfinal int inset = -(int)Math.ceil(this.mStrokeWidth * 0.5f);\n+\t\tfinal int inset = -(int) Math.ceil(this.mStrokeWidth * 0.5f);\n \t\tthis.mTextBounds.inset(inset, inset);\n \t}\n \n@@ -91,4 +91,4 @@ public class StrokeFont extends Font {\n \t// ===========================================================\n \t// Inner and Anonymous Classes\n \t// ===========================================================\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/9/StrokeFont.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/9/StrokeFont.java\nindex 0690568bb1d..f571938b06d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/errored/1/9/StrokeFont.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/delight-im-NationSoccer/codebuff/9/StrokeFont.java\n@@ -2,7 +2,6 @@ package org.andengine.opengl.font;\n \n import org.andengine.opengl.texture.ITexture;\n import org.andengine.util.adt.color.Color;\n-\n import android.graphics.Paint;\n import android.graphics.Paint.Style;\n import android.graphics.Typeface;\n@@ -16,79 +15,96 @@ import android.graphics.Typeface;\n  * @author Nicolas Gramlich\n  * @since 10:39:33 - 03.04.2010\n  */\n+\n+\n public class StrokeFont extends Font {\n-\t// ===========================================================\n-\t// Constants\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Fields\n-\t// ===========================================================\n-\n-\tprivate final Paint mStrokePaint;\n-\tprivate final boolean mStrokeOnly;\n-\tprivate final float mStrokeWidth;\n-\n-\t// ===========================================================\n-\t// Constructors\n-\t// ===========================================================\n-\n-\tpublic StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final Color pColor, final float pStrokeWidth, final Color pStrokeColor) {\n-\t\tthis(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColor.getARGBPackedInt(), pStrokeWidth, pStrokeColor.getARGBPackedInt());\n-\t}\n-\n-\tpublic StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final int pColorARGBPackedInt, final float pStrokeWidth, final int pStrokeColorARGBPackedInt) {\n-\t\tthis(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColorARGBPackedInt, pStrokeWidth, pStrokeColorARGBPackedInt, false);\n-\t}\n-\n-\tpublic StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final Color pColor, final float pStrokeWidth, final Color pStrokeColor, final boolean pStrokeOnly) {\n-\t\tthis(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColor.getARGBPackedInt(), pStrokeWidth, pStrokeColor.getARGBPackedInt(), pStrokeOnly);\n-\t}\n-\n-\tpublic StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final int pColorARGBPackedInt, final float pStrokeWidth, final int pStrokeColorARGBPackedInt, final boolean pStrokeOnly) {\n-\t\tsuper(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColorARGBPackedInt);\n-\n-\t\tthis.mStrokeWidth = pStrokeWidth;\n-\n-\t\tthis.mStrokePaint = new Paint();\n-\t\tthis.mStrokePaint.setTypeface(pTypeface);\n-\t\tthis.mStrokePaint.setStyle(Style.STROKE);\n-\t\tthis.mStrokePaint.setStrokeWidth(pStrokeWidth);\n-\t\tthis.mStrokePaint.setColor(pStrokeColorARGBPackedInt);\n-\t\tthis.mStrokePaint.setTextSize(pSize);\n-\t\tthis.mStrokePaint.setAntiAlias(pAntiAlias);\n-\n-\t\tthis.mStrokeOnly = pStrokeOnly;\n-\t}\n-\n-\t// ===========================================================\n-\t// Getter & Setter\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Methods for/from SuperClass/Interfaces\n-\t// ===========================================================\n-\n-\t@Override\n-\tprotected void updateTextBounds(final String pCharacterAsString) {\n-\t\tthis.mStrokePaint.getTextBounds(pCharacterAsString, 0, 1, this.mTextBounds);\n-\t\tfinal int inset = -(int)Math.ceil(this.mStrokeWidth * 0.5f);\n-\t\tthis.mTextBounds.inset(inset, inset);\n-\t}\n-\n-\t@Override\n-\tprotected void drawLetter(final String pCharacterAsString, final float pLeft, final float pTop) {\n-\t\tif (!this.mStrokeOnly) {\n-\t\t\tsuper.drawLetter(pCharacterAsString, pLeft, pTop);\n-\t\t}\n-\t\tthis.mCanvas.drawText(pCharacterAsString, pLeft + Font.LETTER_TEXTURE_PADDING, pTop + Font.LETTER_TEXTURE_PADDING, this.mStrokePaint);\n-\t}\n-\n-\t// ===========================================================\n-\t// Methods\n-\t// ===========================================================\n-\n-\t// ===========================================================\n-\t// Inner and Anonymous Classes\n-\t// ===========================================================\n-}\n+ // ===========================================================\n+ // Constants\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Fields\n+ // ===========================================================\n+\n+\n+\n+\n+ private final Paint mStrokePaint;\n+ private final boolean mStrokeOnly;\n+ private final float mStrokeWidth;\n+\n+ // ===========================================================\n+ // Constructors\n+ // ===========================================================\n+\n+\n+\n+\n+\n+ public StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final Color pColor, final float pStrokeWidth, final Color pStrokeColor) {\n+  this(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColor.getARGBPackedInt(), pStrokeWidth, pStrokeColor.getARGBPackedInt());\n+ }\n+\n+ public StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final int pColorARGBPackedInt, final float pStrokeWidth, final int pStrokeColorARGBPackedInt) {\n+  this(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColorARGBPackedInt, pStrokeWidth, pStrokeColorARGBPackedInt, false);\n+ }\n+\n+ public StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final Color pColor, final float pStrokeWidth, final Color pStrokeColor, final boolean pStrokeOnly) {\n+  this(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColor.getARGBPackedInt(), pStrokeWidth, pStrokeColor.getARGBPackedInt(), pStrokeOnly);\n+ }\n+\n+ public StrokeFont(final FontManager pFontManager, final ITexture pTexture, final Typeface pTypeface, final float pSize, final boolean pAntiAlias, final int pColorARGBPackedInt, final float pStrokeWidth, final int pStrokeColorARGBPackedInt, final boolean pStrokeOnly) {\n+  super(pFontManager, pTexture, pTypeface, pSize, pAntiAlias, pColorARGBPackedInt);\n+\n+  this.mStrokeWidth = pStrokeWidth;\n+  this.mStrokePaint = new Paint();\n+  this.mStrokePaint.setTypeface(pTypeface);\n+  this.mStrokePaint.setStyle(Style.STROKE);\n+  this.mStrokePaint.setStrokeWidth(pStrokeWidth);\n+  this.mStrokePaint.setColor(pStrokeColorARGBPackedInt);\n+  this.mStrokePaint.setTextSize(pSize);\n+  this.mStrokePaint.setAntiAlias(pAntiAlias);\n+  this.mStrokeOnly = pStrokeOnly;\n+ }\n+\n+ // ===========================================================\n+ // Getter & Setter\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Methods for/from SuperClass/Interfaces\n+ // ===========================================================\n+\n+ @Override\n+ protected void updateTextBounds(final String pCharacterAsString) {\n+  this.mStrokePaint.getTextBounds(pCharacterAsString, 0, 1, this.mTextBounds);\n+\n+  final int inset = -(int) Math.ceil(this.mStrokeWidth * 0.5f);\n+  this.mTextBounds.inset(inset, inset);\n+ }\n+\n+ @Override\n+ protected void drawLetter(final String pCharacterAsString, final float pLeft, final float pTop) {\n+  if (!this.mStrokeOnly) {\n+      super.drawLetter(pCharacterAsString, pLeft, pTop);\n+  }\n+\n+  this.mCanvas.drawText(pCharacterAsString, pLeft + Font.LETTER_TEXTURE_PADDING, pTop + Font.LETTER_TEXTURE_PADDING, this.mStrokePaint);\n+ }\n+\n+ // ===========================================================\n+ // Methods\n+ // ===========================================================\n+\n+ // ===========================================================\n+ // Inner and Anonymous Classes\n+ // ===========================================================\n+\n+\n+\n+\n+\n+\n+\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 93
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "75",
                    "column": "33",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "75",
                    "column": "33",
                    "severity": "error",
                    "message": "'typecast' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}