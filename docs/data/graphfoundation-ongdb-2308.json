{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2308",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2308/SpatialSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2308/SpatialSchemaKey.java\nindex a3f4ea31f11..b197e9934bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2308/SpatialSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2308/SpatialSchemaKey.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.Arrays;\n@@ -36,87 +37,87 @@ import static java.lang.String.format;\n  */\n class SpatialSchemaKey extends NativeSchemaKey<SpatialSchemaKey>\n {\n-    static final int SIZE =\n-            Long.BYTES + /* raw value bits */\n-            Long.BYTES;  /* entityId */\n+  static final int SIZE =\n+      Long.BYTES + /* raw value bits */\n+          Long.BYTES;  /* entityId */\n \n-    long rawValueBits;\n-    CoordinateReferenceSystem crs;\n-    SpaceFillingCurve curve;\n+  long rawValueBits;\n+  CoordinateReferenceSystem crs;\n+  SpaceFillingCurve curve;\n \n-    SpatialSchemaKey( CoordinateReferenceSystem crs, SpaceFillingCurve curve )\n-    {\n-        this.crs = crs;\n-        this.curve = curve;\n-    }\n+  SpatialSchemaKey(CoordinateReferenceSystem crs, SpaceFillingCurve curve)\n+  {\n+    this.crs = crs;\n+    this.curve = curve;\n+  }\n \n-    @Override\n-    public NumberValue asValue()\n-    {\n-        // This is used in the index sampler to estimate value diversity. Since the spatial index does not store values\n-        // the uniqueness of the space filling curve number is the best estimate. This can become a bad estimate for\n-        // indexes with badly defined Envelopes for the space filling curves, such that many points exist within the\n-        // same tile.\n-        return (NumberValue) Values.of( rawValueBits );\n-    }\n+  @Override\n+  public NumberValue asValue()\n+  {\n+    // This is used in the index sampler to estimate value diversity. Since the spatial index does not store values\n+    // the uniqueness of the space filling curve number is the best estimate. This can become a bad estimate for\n+    // indexes with badly defined Envelopes for the space filling curves, such that many points exist within the\n+    // same tile.\n+    return (NumberValue) Values.of(rawValueBits);\n+  }\n \n-    @Override\n-    void initValueAsLowest()\n-    {\n-        double[] limit = new double[crs.getDimension()];\n-        Arrays.fill(limit, Double.NEGATIVE_INFINITY);\n-        writePoint( crs, limit );\n-    }\n+  @Override\n+  void initValueAsLowest()\n+  {\n+    double[] limit = new double[crs.getDimension()];\n+    Arrays.fill(limit, Double.NEGATIVE_INFINITY);\n+    writePoint(crs, limit);\n+  }\n \n-    @Override\n-    void initValueAsHighest()\n-    {\n-        // These coordinates will generate the largest value on the spacial curve\n-        double[] limit = new double[crs.getDimension()];\n-        Arrays.fill(limit, Double.NEGATIVE_INFINITY);\n-        limit[0] = Double.POSITIVE_INFINITY;\n-        writePoint( crs, limit );\n-    }\n+  @Override\n+  void initValueAsHighest()\n+  {\n+    // These coordinates will generate the largest value on the spacial curve\n+    double[] limit = new double[crs.getDimension()];\n+    Arrays.fill(limit, Double.NEGATIVE_INFINITY);\n+    limit[0] = Double.POSITIVE_INFINITY;\n+    writePoint(crs, limit);\n+  }\n \n-    public void fromDerivedValue( long entityId, long derivedValue )\n-    {\n-        rawValueBits = derivedValue;\n-        initialize( entityId );\n-    }\n+  public void fromDerivedValue(long entityId, long derivedValue)\n+  {\n+    rawValueBits = derivedValue;\n+    initialize(entityId);\n+  }\n \n-    /**\n-     * This method will compare along the curve, which is not a spatial comparison, but is correct\n-     * for comparison within the space filling index as long as the original spatial range has already\n-     * been decomposed into a collection of 1D curve ranges before calling down into the GPTree.\n-     */\n-    int compareValueTo( SpatialSchemaKey other )\n-    {\n-        return Long.compare( rawValueBits, other.rawValueBits );\n-    }\n+  /**\n+   * This method will compare along the curve, which is not a spatial comparison, but is correct\n+   * for comparison within the space filling index as long as the original spatial range has already\n+   * been decomposed into a collection of 1D curve ranges before calling down into the GPTree.\n+   */\n+  int compareValueTo(SpatialSchemaKey other)\n+  {\n+    return Long.compare(rawValueBits, other.rawValueBits);\n+  }\n \n-    @Override\n-    protected Value assertCorrectType( Value value )\n+  @Override\n+  protected Value assertCorrectType(Value value)\n+  {\n+    if (!Values.isGeometryValue(value))\n     {\n-        if ( !Values.isGeometryValue( value ) )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support geometries, tried to create key from \" + value );\n-        }\n-        return value;\n+      throw new IllegalArgumentException(\n+          \"Key layout does only support geometries, tried to create key from \" + value);\n     }\n+    return value;\n+  }\n \n-    /**\n-     * Extracts raw bits from a {@link PointValue} and store as state of this {@link SpatialSchemaKey} instance.\n-     */\n-    @Override\n-    public void writePoint( CoordinateReferenceSystem crs, double[] coordinate )\n-    {\n-        rawValueBits = curve.derivedValueFor( coordinate );\n-    }\n+  /**\n+   * Extracts raw bits from a {@link PointValue} and store as state of this {@link SpatialSchemaKey} instance.\n+   */\n+  @Override\n+  public void writePoint(CoordinateReferenceSystem crs, double[] coordinate)\n+  {\n+    rawValueBits = curve.derivedValueFor(coordinate);\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        return format( \"rawValue=%d,value=%s,entityId=%d\", rawValueBits, \"unknown\", getEntityId() );\n-    }\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"rawValue=%d,value=%s,entityId=%d\", rawValueBits, \"unknown\", getEntityId());\n+  }\n }\n",
            "diff_size": 76
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2308/SpatialSchemaKey.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2308/SpatialSchemaKey.java\nindex a3f4ea31f11..bf39e1e9e69 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2308/SpatialSchemaKey.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2308/SpatialSchemaKey.java\n@@ -36,11 +36,10 @@ import static java.lang.String.format;\n  */\n class SpatialSchemaKey extends NativeSchemaKey<SpatialSchemaKey>\n {\n-    static final int SIZE =\n-            Long.BYTES + /* raw value bits */\n-            Long.BYTES;  /* entityId */\n-\n-    long rawValueBits;\n+    static final int SIZE = Long.BYTES + /* raw value bits */\n+            Long.BYTES;\n+/* entityId */\n+long rawValueBits;\n     CoordinateReferenceSystem crs;\n     SpaceFillingCurve curve;\n \n@@ -64,7 +63,7 @@ class SpatialSchemaKey extends NativeSchemaKey<SpatialSchemaKey>\n     void initValueAsLowest()\n     {\n         double[] limit = new double[crs.getDimension()];\n-        Arrays.fill(limit, Double.NEGATIVE_INFINITY);\n+        Arrays.fill( limit, Double.NEGATIVE_INFINITY);\n         writePoint( crs, limit );\n     }\n \n@@ -73,7 +72,7 @@ class SpatialSchemaKey extends NativeSchemaKey<SpatialSchemaKey>\n     {\n         // These coordinates will generate the largest value on the spacial curve\n         double[] limit = new double[crs.getDimension()];\n-        Arrays.fill(limit, Double.NEGATIVE_INFINITY);\n+        Arrays.fill( limit, Double.NEGATIVE_INFINITY);\n         limit[0] = Double.POSITIVE_INFINITY;\n         writePoint( crs, limit );\n     }\n@@ -81,7 +80,8 @@ class SpatialSchemaKey extends NativeSchemaKey<SpatialSchemaKey>\n     public void fromDerivedValue( long entityId, long derivedValue )\n     {\n         rawValueBits = derivedValue;\n-        initialize( entityId );\n+\n+initialize( entityId );\n     }\n \n     /**\n@@ -99,10 +99,10 @@ class SpatialSchemaKey extends NativeSchemaKey<SpatialSchemaKey>\n     {\n         if ( !Values.isGeometryValue( value ) )\n         {\n-            throw new IllegalArgumentException(\n-                    \"Key layout does only support geometries, tried to create key from \" + value );\n+            throw new IllegalArgumentException( \"Key layout does only support geometries, tried to create key from \" + value );\n         }\n-        return value;\n+\n+return value;\n     }\n \n     /**\n@@ -119,4 +119,4 @@ class SpatialSchemaKey extends NativeSchemaKey<SpatialSchemaKey>\n     {\n         return format( \"rawValue=%d,value=%s,entityId=%d\", rawValueBits, \"unknown\", getEntityId() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}