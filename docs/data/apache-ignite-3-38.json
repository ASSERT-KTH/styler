{
    "project_name": "apache-ignite-3",
    "error_id": "38",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "5",
                "severity": "error",
                "message": "'VARIABLE_DEF' should be separated from previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n    private long index;\n    private long term;\n\n    @Override\n    public LogId copy() {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/38/LogId.java\nindex b9bad4fcae1..7cef9558fc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler/38/LogId.java\n@@ -29,6 +29,7 @@ public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable,\n     private static final long serialVersionUID = -6680425579347357313L;\n \n     private long index;\n+\n     private long term;\n \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/38/LogId.java\nindex b9bad4fcae1..45d03362bb4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/intellij/38/LogId.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.ignite.raft.jraft.entity;\n \n import java.io.Serializable;\n@@ -26,96 +27,96 @@ import org.apache.ignite.raft.jraft.util.CrcUtil;\n  */\n public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable, Checksum {\n \n-    private static final long serialVersionUID = -6680425579347357313L;\n-\n-    private long index;\n-    private long term;\n-\n-    @Override\n-    public LogId copy() {\n-        return new LogId(this.index, this.term);\n+  private static final long serialVersionUID = -6680425579347357313L;\n+\n+  private long index;\n+\n+  private long term;\n+\n+  @Override\n+  public LogId copy() {\n+    return new LogId(this.index, this.term);\n+  }\n+\n+  @Override\n+  public long checksum() {\n+    byte[] bs = new byte[16];\n+    Bits.putLong(bs, 0, this.index);\n+    Bits.putLong(bs, 8, this.term);\n+    return CrcUtil.crc64(bs);\n+  }\n+\n+  public LogId() {\n+    this(0, 0);\n+  }\n+\n+  public LogId(final long index, final long term) {\n+    super();\n+    setIndex(index);\n+    setTerm(term);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    final int prime = 31;\n+    int result = 1;\n+    result = prime * result + (int) (this.index ^ (this.index >>> 32));\n+    result = prime * result + (int) (this.term ^ (this.term >>> 32));\n+    return result;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object obj) {\n+    if (this == obj) {\n+      return true;\n     }\n-\n-    @Override\n-    public long checksum() {\n-        byte[] bs = new byte[16];\n-        Bits.putLong(bs, 0, this.index);\n-        Bits.putLong(bs, 8, this.term);\n-        return CrcUtil.crc64(bs);\n+    if (obj == null) {\n+      return false;\n     }\n-\n-    public LogId() {\n-        this(0, 0);\n+    if (getClass() != obj.getClass()) {\n+      return false;\n     }\n-\n-    public LogId(final long index, final long term) {\n-        super();\n-        setIndex(index);\n-        setTerm(term);\n+    final LogId other = (LogId) obj;\n+    if (this.index != other.index) {\n+      return false;\n     }\n-\n-    @Override\n-    public int hashCode() {\n-        final int prime = 31;\n-        int result = 1;\n-        result = prime * result + (int) (this.index ^ (this.index >>> 32));\n-        result = prime * result + (int) (this.term ^ (this.term >>> 32));\n-        return result;\n+    // noinspection RedundantIfStatement\n+    if (this.term != other.term) {\n+      return false;\n     }\n-\n-    @Override\n-    public boolean equals(final Object obj) {\n-        if (this == obj) {\n-            return true;\n-        }\n-        if (obj == null) {\n-            return false;\n-        }\n-        if (getClass() != obj.getClass()) {\n-            return false;\n-        }\n-        final LogId other = (LogId) obj;\n-        if (this.index != other.index) {\n-            return false;\n-        }\n-        // noinspection RedundantIfStatement\n-        if (this.term != other.term) {\n-            return false;\n-        }\n-        return true;\n+    return true;\n+  }\n+\n+  @Override\n+  public int compareTo(final LogId o) {\n+    // Compare term at first\n+    final int c = Long.compare(getTerm(), o.getTerm());\n+    if (c == 0) {\n+      return Long.compare(getIndex(), o.getIndex());\n+    } else {\n+      return c;\n     }\n+  }\n \n-    @Override\n-    public int compareTo(final LogId o) {\n-        // Compare term at first\n-        final int c = Long.compare(getTerm(), o.getTerm());\n-        if (c == 0) {\n-            return Long.compare(getIndex(), o.getIndex());\n-        }\n-        else {\n-            return c;\n-        }\n-    }\n+  public long getTerm() {\n+    return this.term;\n+  }\n \n-    public long getTerm() {\n-        return this.term;\n-    }\n+  public void setTerm(final long term) {\n+    this.term = term;\n+  }\n \n-    public void setTerm(final long term) {\n-        this.term = term;\n-    }\n+  public long getIndex() {\n+    return this.index;\n+  }\n \n-    public long getIndex() {\n-        return this.index;\n-    }\n+  public void setIndex(final long index) {\n+    this.index = index;\n+  }\n \n-    public void setIndex(final long index) {\n-        this.index = index;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"LogId [index=\" + this.index + \", term=\" + this.term + \"]\";\n-    }\n+  @Override\n+  public String toString() {\n+    return \"LogId [index=\" + this.index + \", term=\" + this.term + \"]\";\n+  }\n \n }\n",
            "diff_size": 116
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "31",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' should be separated from previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/38/LogId.java\nindex b9bad4fcae1..013b522f27a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/naturalize/38/LogId.java\n@@ -25,8 +25,7 @@ import org.apache.ignite.raft.jraft.util.CrcUtil;\n  * Log identifier.\n  */\n public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable, Checksum {\n-\n-    private static final long serialVersionUID = -6680425579347357313L;\n+private static final long serialVersionUID = -6680425579347357313L;\n \n     private long index;\n     private long term;\n@@ -74,7 +73,8 @@ public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable,\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final LogId other = (LogId) obj;\n+\n+final LogId other = (LogId) obj;\n         if (this.index != other.index) {\n             return false;\n         }\n@@ -118,4 +118,4 @@ public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable,\n         return \"LogId [index=\" + this.index + \", term=\" + this.term + \"]\";\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "29",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "34",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "37",
                    "column": "5",
                    "severity": "error",
                    "message": "'VARIABLE_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "40",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "45",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "60",
                    "column": "5",
                    "severity": "error",
                    "message": "'CTOR_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "69",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "82",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "107",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "136",
                    "column": "5",
                    "severity": "error",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/38/LogId.java\nindex b9bad4fcae1..2b97a074417 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/codebuff/38/LogId.java\n@@ -24,23 +24,31 @@ import org.apache.ignite.raft.jraft.util.CrcUtil;\n /**\n  * Log identifier.\n  */\n+\n+\n public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable, Checksum {\n \n     private static final long serialVersionUID = -6680425579347357313L;\n \n+\n     private long index;\n+\n+\n     private long term;\n \n-    @Override\n-    public LogId copy() {\n+\n+    @Override public LogId copy() {\n         return new LogId(this.index, this.term);\n     }\n \n-    @Override\n-    public long checksum() {\n+\n+    @Override public long checksum() {\n         byte[] bs = new byte[16];\n+\n         Bits.putLong(bs, 0, this.index);\n+\n         Bits.putLong(bs, 8, this.term);\n+\n         return CrcUtil.crc64(bs);\n     }\n \n@@ -48,23 +56,30 @@ public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable,\n         this(0, 0);\n     }\n \n+\n     public LogId(final long index, final long term) {\n         super();\n+\n         setIndex(index);\n+\n         setTerm(term);\n     }\n \n-    @Override\n-    public int hashCode() {\n+\n+    @Override public int hashCode() {\n         final int prime = 31;\n+\n         int result = 1;\n-        result = prime * result + (int) (this.index ^ (this.index >>> 32));\n-        result = prime * result + (int) (this.term ^ (this.term >>> 32));\n+\n+        result = prime * result + (int)(this.index ^ (this.index >>> 32));\n+\n+        result = prime * result + (int)(this.term ^ (this.term >>> 32));\n+\n         return result;\n     }\n \n-    @Override\n-    public boolean equals(final Object obj) {\n+\n+    @Override public boolean equals(final Object obj) {\n         if (this == obj) {\n             return true;\n         }\n@@ -74,7 +89,9 @@ public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable,\n         if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        final LogId other = (LogId) obj;\n+\n+        final LogId other = (LogId)obj;\n+\n         if (this.index != other.index) {\n             return false;\n         }\n@@ -82,13 +99,15 @@ public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable,\n         if (this.term != other.term) {\n             return false;\n         }\n+\n         return true;\n     }\n \n-    @Override\n-    public int compareTo(final LogId o) {\n+\n+    @Override public int compareTo(final LogId o) {\n         // Compare term at first\n         final int c = Long.compare(getTerm(), o.getTerm());\n+\n         if (c == 0) {\n             return Long.compare(getIndex(), o.getIndex());\n         }\n@@ -113,9 +132,8 @@ public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable,\n         this.index = index;\n     }\n \n-    @Override\n-    public String toString() {\n+\n+    @Override public String toString() {\n         return \"LogId [index=\" + this.index + \", term=\" + this.term + \"]\";\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/38/LogId.java\nindex b9bad4fcae1..7cef9558fc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_random/38/LogId.java\n@@ -29,6 +29,7 @@ public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable,\n     private static final long serialVersionUID = -6680425579347357313L;\n \n     private long index;\n+\n     private long term;\n \n     @Override\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/38/LogId.java\nindex b9bad4fcae1..7cef9558fc2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/errored/1/38/LogId.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-ignite-3/styler_three_grams/38/LogId.java\n@@ -29,6 +29,7 @@ public class LogId implements Comparable<LogId>, Copiable<LogId>, Serializable,\n     private static final long serialVersionUID = -6680425579347357313L;\n \n     private long index;\n+\n     private long term;\n \n     @Override\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}