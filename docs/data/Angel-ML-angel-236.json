{
    "project_name": "Angel-ML-angel",
    "error_id": "236",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/236/LongIntSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/236/LongIntSparseVectorStorage.java\nindex 324be0fa76c..7ed16d1fde5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/236/LongIntSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/236/LongIntSparseVectorStorage.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2.storage;\n \n import com.tencent.angel.ml.matrix.RowType;\n@@ -87,8 +86,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, map.clone());\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     int[] oneLikeValues = new int[capacity];\n@@ -111,8 +109,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n     int[] oneLikeValues = new int[capacity];\n     long[] indices = new long[capacity];\n@@ -198,8 +195,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage emptySparse() {\n     return new LongIntSparseVectorStorage(dim, map.size());\n   }\n@@ -209,8 +205,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSortedVectorStorage(dim, map.size());\n   }\n \n-\n-  @Override\n+@Override\n   public LongIntVectorStorage emptySparse(long dim, int capacity) {\n     return new LongIntSparseVectorStorage(dim, capacity);\n   }\n@@ -282,4 +277,4 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n   public int[] getValues() {\n     return map.values().toIntArray();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/236/LongIntSparseVectorStorage.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/236/LongIntSparseVectorStorage.java\nindex 324be0fa76c..426a1975b6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/236/LongIntSparseVectorStorage.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/236/LongIntSparseVectorStorage.java\n@@ -24,7 +24,6 @@ import it.unimi.dsi.fastutil.longs.Long2IntMap;\n import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;\n import it.unimi.dsi.fastutil.longs.LongSet;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n-\n import java.util.Arrays;\n import java.util.HashSet;\n import java.util.Random;\n@@ -87,12 +86,10 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, map.clone());\n   }\n \n-\n   @Override\n   public LongIntVectorStorage oneLikeSparse() {\n     int capacity = map.size();\n     int[] oneLikeValues = new int[capacity];\n-\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -111,7 +108,6 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongIntVectorStorage oneLikeSparse(long dim, int capacity) {\n     int[] oneLikeValues = new int[capacity];\n@@ -127,6 +123,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -170,6 +167,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n         j++;\n       }\n     }\n+\n     for (int i = 0; i < capacity; i++) {\n       oneLikeValues[i] = 1;\n     }\n@@ -198,7 +196,6 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSparseVectorStorage(dim, indices, oneLikeValues);\n   }\n \n-\n   @Override\n   public LongIntVectorStorage emptySparse() {\n     return new LongIntSparseVectorStorage(dim, map.size());\n@@ -209,7 +206,6 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return new LongIntSortedVectorStorage(dim, map.size());\n   }\n \n-\n   @Override\n   public LongIntVectorStorage emptySparse(long dim, int capacity) {\n     return new LongIntSparseVectorStorage(dim, capacity);\n@@ -240,8 +236,7 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n     return map.size();\n   }\n \n-  public void setSize(int size) {\n-  }\n+  public void setSize(int size) {}\n \n   @Override\n   public boolean hasKey(long key) {\n@@ -282,4 +277,5 @@ public class LongIntSparseVectorStorage implements LongIntVectorStorage {\n   public int[] getValues() {\n     return map.values().toIntArray();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}