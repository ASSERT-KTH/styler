{
    "project_name": "neo4j-neo4j",
    "error_id": "1707",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "63",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "97",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "97",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "144",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "54",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "107",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "110",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1707/RouteMessageHandleStateDecorator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1707/RouteMessageHandleStateDecorator.java\nindex 06d97ed7238..4eb69688c82 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1707/RouteMessageHandleStateDecorator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1707/RouteMessageHandleStateDecorator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.bolt.v43.runtime;\n \n import java.util.Optional;\n@@ -39,16 +40,16 @@ import static org.neo4j.bolt.v4.messaging.MessageMetadataParser.ABSENT_DB_NAME;\n \n /**\n  * Extends the behaviour of a given State by adding the capacity of handle the {@link RouteMessage}\n- *\n+ * <p>\n  * When a message comes to be processed, this decorator checks if it's a {@link RouteMessage} and:\n- *\n+ * <p>\n  * If true, it handles the message by retrieving the routing table, setting on the connection state metadata\n  * and return itself as the next state. In case of failure, it sets the failure on the context and return itself\n  * as the next state.\n- *\n+ * <p>\n  * If it's another message type, it redirects the call to the wrapped state and follow the state transitions defined\n  * by the wrapped state.\n- *\n+ * <p>\n  * Currently, It's only used to decorate the {@link ReadyState} and it is fully integrated tested with this state.\n  *\n  * @param <T> The state machine state type which will be wrapped by the decorator.\n@@ -59,70 +60,68 @@ public class RouteMessageHandleStateDecorator<T extends BoltStateMachineState> i\n     private final T state;\n     private final RoutingTableGetter routingTableGetter;\n \n-    private RouteMessageHandleStateDecorator( T state, RoutingTableGetter routingTableGetter )\n+    private RouteMessageHandleStateDecorator(T state, RoutingTableGetter routingTableGetter)\n     {\n         this.state = state;\n         this.routingTableGetter = routingTableGetter;\n     }\n \n-    public static <T extends BoltStateMachineState> RouteMessageHandleStateDecorator<T> decorate( T state )\n+    public static <T extends BoltStateMachineState> RouteMessageHandleStateDecorator<T> decorate(T state)\n     {\n-        return decorate( state, new ProcedureRoutingTableGetter() );\n+        return decorate(state, new ProcedureRoutingTableGetter());\n     }\n \n-    public static <T extends BoltStateMachineState> RouteMessageHandleStateDecorator<T> decorate( T state, RoutingTableGetter routingTableGetter )\n+    public static <T extends BoltStateMachineState> RouteMessageHandleStateDecorator<T> decorate(T state, RoutingTableGetter routingTableGetter)\n     {\n-        if ( state == null )\n+        if (state == null)\n         {\n-            throw new NullPointerException( \"State should not be null\" );\n+            throw new NullPointerException(\"State should not be null\");\n         }\n-        return new RouteMessageHandleStateDecorator<>( state, routingTableGetter );\n+        return new RouteMessageHandleStateDecorator<>(state, routingTableGetter);\n     }\n \n-    public void apply( Consumer<T> consumer )\n+    public void apply(Consumer<T> consumer)\n     {\n-        consumer.accept( state );\n+        consumer.accept(state);\n     }\n \n     @Override\n-    public BoltStateMachineState process( RequestMessage message, StateMachineContext context ) throws BoltConnectionFatality\n+    public BoltStateMachineState process(RequestMessage message, StateMachineContext context) throws BoltConnectionFatality\n     {\n-        if ( message instanceof RouteMessage )\n+        if (message instanceof RouteMessage)\n         {\n-            handleRouteMessage( (RouteMessage) message, context );\n+            handleRouteMessage((RouteMessage) message, context);\n             return this;\n         }\n-        return redirectToWrappedState( message, context );\n+        return redirectToWrappedState(message, context);\n     }\n \n-    private void handleRouteMessage( RouteMessage message, StateMachineContext context ) throws BoltConnectionFatality\n+    private void handleRouteMessage(RouteMessage message, StateMachineContext context) throws BoltConnectionFatality\n     {\n         try\n         {\n-            var statementProcessor = getStatementProcessor( message, context );\n-            routingTableGetter.get( statementProcessor, message.getRequestContext(), message.getDatabaseName() )\n-                              .thenAccept( routingTable -> context.connectionState().onMetadata( ROUTING_TABLE_KEY, routingTable ) )\n-                              .join();\n-        }\n-        catch ( CompletionException e )\n+            var statementProcessor = getStatementProcessor(message, context);\n+            routingTableGetter.get(statementProcessor, message.getRequestContext(), message.getDatabaseName())\n+              .thenAccept(routingTable -> context.connectionState().onMetadata(ROUTING_TABLE_KEY, routingTable))\n+              .join();\n+        } catch (CompletionException e)\n         {\n-            context.handleFailure( e.getCause(), true );\n-        }\n-        catch ( Throwable e )\n+            context.handleFailure(e.getCause(), true);\n+        } catch (Throwable e)\n         {\n-            context.handleFailure( e, true );\n+            context.handleFailure(e, true);\n         }\n     }\n \n-    private StatementProcessor getStatementProcessor( RouteMessage routeMessage, StateMachineContext context )\n-            throws BoltProtocolBreachFatality, BoltIOException\n+    private StatementProcessor getStatementProcessor(RouteMessage routeMessage, StateMachineContext context)\n+      throws BoltProtocolBreachFatality, BoltIOException\n     {\n-        return context.setCurrentStatementProcessorForDatabase( Optional.ofNullable( routeMessage.getDatabaseName() ).orElse( ABSENT_DB_NAME ) );\n+        return context.setCurrentStatementProcessorForDatabase(Optional.ofNullable(routeMessage.getDatabaseName()).orElse(ABSENT_DB_NAME));\n     }\n \n-    private BoltStateMachineState redirectToWrappedState( RequestMessage message, StateMachineContext context ) throws BoltConnectionFatality\n+    private BoltStateMachineState redirectToWrappedState(RequestMessage message, StateMachineContext context) throws BoltConnectionFatality\n     {\n-        var resultState = state.process( message, context );\n+        var resultState = state.process(message, context);\n         return resultState == this.state ? this : resultState;\n     }\n \n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}