{
    "project_name": "neo4j-neo4j",
    "error_id": "1769",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1769/TransactionMonitorScheduler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1769/TransactionMonitorScheduler.java\nindex 36be6744ed2..935cbbc3d86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1769/TransactionMonitorScheduler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1769/TransactionMonitorScheduler.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.transaction.monitor;\n \n import java.util.concurrent.TimeUnit;\n@@ -36,8 +37,8 @@ public class TransactionMonitorScheduler extends LifecycleAdapter\n     private final String databaseName;\n     private JobHandle monitorJobHandle;\n \n-    public TransactionMonitorScheduler( TransactionMonitor transactionMonitor,\n-            JobScheduler scheduler, long checkIntervalMillis, String databaseName )\n+    public TransactionMonitorScheduler(TransactionMonitor transactionMonitor,\n+                                       JobScheduler scheduler, long checkIntervalMillis, String databaseName)\n     {\n         this.transactionMonitor = transactionMonitor;\n         this.scheduler = scheduler;\n@@ -48,18 +49,18 @@ public class TransactionMonitorScheduler extends LifecycleAdapter\n     @Override\n     public void start()\n     {\n-        if ( checkIntervalMillis > 0 )\n+        if (checkIntervalMillis > 0)\n         {\n-            var monitoringParams = JobMonitoringParams.systemJob( databaseName, \"Monitoring of transaction timeout\" );\n-            monitorJobHandle = scheduler.scheduleRecurring( Group.TRANSACTION_TIMEOUT_MONITOR, monitoringParams, transactionMonitor,\n-                    checkIntervalMillis, TimeUnit.MILLISECONDS );\n+            var monitoringParams = JobMonitoringParams.systemJob(databaseName, \"Monitoring of transaction timeout\");\n+            monitorJobHandle = scheduler.scheduleRecurring(Group.TRANSACTION_TIMEOUT_MONITOR, monitoringParams, transactionMonitor,\n+              checkIntervalMillis, TimeUnit.MILLISECONDS);\n         }\n     }\n \n     @Override\n     public void stop()\n     {\n-        if ( monitorJobHandle != null )\n+        if (monitorJobHandle != null)\n         {\n             monitorJobHandle.cancel();\n         }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}