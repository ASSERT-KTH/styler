{
    "project_name": "opencb-opencga",
    "error_id": "142",
    "information": {
        "errors": [
            {
                "line": "221",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 143).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                ObjectMap annotations = buildAnnotations(report, sampleId);\n                AnnotationSet annotationSet = new AnnotationSet(VARIABLE_SET_ID, VARIABLE_SET_ID, annotations);\n                IndividualUpdateParams updateParams = new IndividualUpdateParams().setAnnotationSets(Collections.singletonList(annotationSet));\n\n                // Get individual from sample and update\n                Individual individual = GeneticChecksUtils.getIndividualBySampleId(studyId, sampleId, catalogManager, token);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/142/GeneticChecksAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/142/GeneticChecksAnalysis.java\nindex 9ebbca2e211..40ad8b57250 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/142/GeneticChecksAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/142/GeneticChecksAnalysis.java\n@@ -45,275 +45,276 @@ import java.util.stream.Collectors;\n @Tool(id = GeneticChecksAnalysis.ID, resource = Enums.Resource.VARIANT, description = GeneticChecksAnalysis.DESCRIPTION)\n public class GeneticChecksAnalysis extends OpenCgaTool {\n \n-    public static final String ID = \"genetic-checks\";\n-    public static final String DESCRIPTION = \"Run genetic checks for sex, relatedness and mendelian errors (UDP).\";\n-    public static final String VARIABLE_SET_ID = \"opencga_individual_genetic_checks\";\n-\n-    private String studyId;\n-    private String familyId;\n-    private String individualId;\n-    private String sampleId;\n-    private String minorAlleleFreq;\n-    private String relatednessMethod;\n-\n-    // Internal members\n-    private List<String> sampleIds;\n-\n-    public GeneticChecksAnalysis() {\n+  public static final String ID = \"genetic-checks\";\n+  public static final String DESCRIPTION = \"Run genetic checks for sex, relatedness and mendelian errors (UDP).\";\n+  public static final String VARIABLE_SET_ID = \"opencga_individual_genetic_checks\";\n+\n+  private String studyId;\n+  private String familyId;\n+  private String individualId;\n+  private String sampleId;\n+  private String minorAlleleFreq;\n+  private String relatednessMethod;\n+\n+  // Internal members\n+  private List<String> sampleIds;\n+\n+  public GeneticChecksAnalysis() {\n+  }\n+\n+  /**\n+   * Study of the samples.\n+   *\n+   * @param studyId Study id\n+   * @return this\n+   */\n+  public GeneticChecksAnalysis setStudy(String studyId) {\n+    this.studyId = studyId;\n+    return this;\n+  }\n+\n+  public String getFamilyId() {\n+    return familyId;\n+  }\n+\n+  public GeneticChecksAnalysis setFamilyId(String familyId) {\n+    this.familyId = familyId;\n+    return this;\n+  }\n+\n+  public String getIndividualId() {\n+    return individualId;\n+  }\n+\n+  public GeneticChecksAnalysis setIndividualId(String individualId) {\n+    this.individualId = individualId;\n+    return this;\n+  }\n+\n+  public String getSampleId() {\n+    return sampleId;\n+  }\n+\n+  public GeneticChecksAnalysis setSampleId(String sampleId) {\n+    this.sampleId = sampleId;\n+    return this;\n+  }\n+\n+  public String getMinorAlleleFreq() {\n+    return minorAlleleFreq;\n+  }\n+\n+  public GeneticChecksAnalysis setMinorAlleleFreq(String minorAlleleFreq) {\n+    this.minorAlleleFreq = minorAlleleFreq;\n+    return this;\n+  }\n+\n+  public String getRelatednessMethod() {\n+    return relatednessMethod;\n+  }\n+\n+  public GeneticChecksAnalysis setRelatednessMethod(String relatednessMethod) {\n+    this.relatednessMethod = relatednessMethod;\n+    return this;\n+  }\n+\n+  @Override\n+  protected void check() throws Exception {\n+    super.check();\n+    setUpStorageEngineExecutor(studyId);\n+\n+    if (StringUtils.isEmpty(studyId)) {\n+      throw new ToolException(\"Missing study ID.\");\n     }\n \n-    /**\n-     * Study of the samples.\n-     * @param studyId Study id\n-     * @return this\n-     */\n-    public GeneticChecksAnalysis setStudy(String studyId) {\n-        this.studyId = studyId;\n-        return this;\n+    try {\n+      studyId = catalogManager.getStudyManager().get(studyId, null, token).first().getFqn();\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n     }\n \n-    public String getFamilyId() {\n-        return familyId;\n+    // Sanity check\n+    if (StringUtils.isNotEmpty(familyId) && StringUtils.isNotEmpty(individualId) && StringUtils.isNotEmpty(sampleId)) {\n+      throw new ToolException(\"Incorrect parameters: please, provide only a family ID, a individual ID or a sample ID.\");\n     }\n \n-    public GeneticChecksAnalysis setFamilyId(String familyId) {\n-        this.familyId = familyId;\n-        return this;\n+    // Get relatives, i.e., members of a family\n+    List<Sample> samples;\n+    if (StringUtils.isNotEmpty(familyId)) {\n+      // Check and get the individuals from that family ID\n+      samples = GeneticChecksUtils.getRelativeSamplesByFamilyId(studyId, familyId, catalogManager, token);\n+    } else if (StringUtils.isNotEmpty(individualId)) {\n+      // Get father, mother and siblings from that individual\n+      samples = GeneticChecksUtils.getRelativeSamplesByIndividualId(studyId, individualId, catalogManager, token);\n+      Family family = GeneticChecksUtils.getFamilyByIndividualId(studyId, individualId, catalogManager, token);\n+      familyId = family.getId();\n+    } else if (StringUtils.isNotEmpty(sampleId)) {\n+      // Get father, mother and siblings from that sample\n+      samples = GeneticChecksUtils.getRelativeSamplesBySampleId(studyId, individualId, catalogManager, token);\n+      Family family = GeneticChecksUtils.getFamilyBySampleId(studyId, sampleId, catalogManager, token);\n+      familyId = family.getId();\n+    } else {\n+      throw new ToolException(\"Missing a family ID, a individual ID or a sample ID.\");\n     }\n \n-    public String getIndividualId() {\n-        return individualId;\n+    if (CollectionUtils.isEmpty(samples)) {\n+      throw new ToolException(\"Member samples not found to execute genetic checks analysis.\");\n     }\n \n-    public GeneticChecksAnalysis setIndividualId(String individualId) {\n-        this.individualId = individualId;\n-        return this;\n+    sampleIds = samples.stream().map(Sample::getId).collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  protected List<String> getSteps() {\n+    List<String> steps = new ArrayList<>();\n+    steps.add(\"sex\");\n+    steps.add(\"relatedness\");\n+    steps.add(\"mendelian-errors\");\n+    steps.add(\"index-variable-set\");\n+    return steps;\n+  }\n+\n+  @Override\n+  protected void run() throws ToolException {\n+\n+    GeneticChecksAnalysisExecutor executor = getToolExecutor(GeneticChecksAnalysisExecutor.class);\n+\n+    executor.setStudyId(studyId)\n+        .setFamilyId(familyId)\n+        .setSampleIds(sampleIds)\n+        .setMinorAlleleFreq(minorAlleleFreq)\n+        .setRelatednessMethod(relatednessMethod);\n+\n+    step(\"sex\", () -> {\n+      executor.setGeneticCheck(GeneticChecksAnalysisExecutor.GeneticCheck.INFERRED_SEX).execute();\n+      GeneticChecksUtils.updateSexReport(executor.getReport().getInferredSexReport(), studyId, catalogManager, token);\n+    });\n+\n+    step(\"relatedness\", () -> {\n+      executor.setGeneticCheck(GeneticChecksAnalysisExecutor.GeneticCheck.RELATEDNESS).execute();\n+    });\n+\n+    step(\"mendelian-errors\", () -> {\n+      executor.setGeneticCheck(GeneticChecksAnalysisExecutor.GeneticCheck.MENDELIAN_ERRORS).execute();\n+    });\n+\n+    // Save results\n+    try {\n+      JacksonUtils.getDefaultObjectMapper().writer().writeValue(getOutDir().resolve(ID + \".report.json\").toFile(),\n+          executor.getReport());\n+    } catch (IOException e) {\n+      throw new ToolException(e);\n     }\n \n-    public String getSampleId() {\n-        return sampleId;\n-    }\n-\n-    public GeneticChecksAnalysis setSampleId(String sampleId) {\n-        this.sampleId = sampleId;\n-        return this;\n-    }\n+    // Index as a variable set\n+    step(\"index-variable-set\", () -> {\n+      indexResults(executor.getReport());\n+    });\n+  }\n+\n+  private void indexResults(GeneticChecksReport report) throws ToolException {\n+    try {\n+      // Index variable-set for each target individual\n+      for (String sampleId : sampleIds) {\n+        // Create annotation set\n+        ObjectMap annotations = buildAnnotations(report, sampleId);\n+        AnnotationSet annotationSet = new AnnotationSet(VARIABLE_SET_ID, VARIABLE_SET_ID, annotations);\n+        IndividualUpdateParams updateParams = new IndividualUpdateParams().setAnnotationSets(Collections.singletonList(annotationSet));\n \n-    public String getMinorAlleleFreq() {\n-        return minorAlleleFreq;\n-    }\n-\n-    public GeneticChecksAnalysis setMinorAlleleFreq(String minorAlleleFreq) {\n-        this.minorAlleleFreq = minorAlleleFreq;\n-        return this;\n-    }\n-\n-    public String getRelatednessMethod() {\n-        return relatednessMethod;\n-    }\n-\n-    public GeneticChecksAnalysis setRelatednessMethod(String relatednessMethod) {\n-        this.relatednessMethod = relatednessMethod;\n-        return this;\n+        // Get individual from sample and update\n+        Individual individual = GeneticChecksUtils.getIndividualBySampleId(studyId, sampleId, catalogManager, token);\n+        catalogManager.getIndividualManager().update(studyId, individual.getId(), updateParams, QueryOptions.empty(), token);\n+      }\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n     }\n-\n-    @Override\n-    protected void check() throws Exception {\n-        super.check();\n-        setUpStorageEngineExecutor(studyId);\n-\n-        if (StringUtils.isEmpty(studyId)) {\n-            throw new ToolException(\"Missing study ID.\");\n-        }\n-\n-        try {\n-            studyId = catalogManager.getStudyManager().get(studyId, null, token).first().getFqn();\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n-\n-        // Sanity check\n-        if (StringUtils.isNotEmpty(familyId) && StringUtils.isNotEmpty(individualId) && StringUtils.isNotEmpty(sampleId)) {\n-            throw new ToolException(\"Incorrect parameters: please, provide only a family ID, a individual ID or a sample ID.\");\n-        }\n-\n-        // Get relatives, i.e., members of a family\n-        List<Sample> samples;\n-        if (StringUtils.isNotEmpty(familyId)) {\n-            // Check and get the individuals from that family ID\n-            samples = GeneticChecksUtils.getRelativeSamplesByFamilyId(studyId, familyId, catalogManager, token);\n-        } else if (StringUtils.isNotEmpty(individualId)) {\n-            // Get father, mother and siblings from that individual\n-            samples = GeneticChecksUtils.getRelativeSamplesByIndividualId(studyId, individualId, catalogManager, token);\n-            Family family = GeneticChecksUtils.getFamilyByIndividualId(studyId, individualId, catalogManager, token);\n-            familyId = family.getId();\n-        } else if (StringUtils.isNotEmpty(sampleId)) {\n-            // Get father, mother and siblings from that sample\n-            samples = GeneticChecksUtils.getRelativeSamplesBySampleId(studyId, individualId, catalogManager, token);\n-            Family family = GeneticChecksUtils.getFamilyBySampleId(studyId, sampleId, catalogManager, token);\n-            familyId = family.getId();\n-        } else {\n-            throw new ToolException(\"Missing a family ID, a individual ID or a sample ID.\");\n+  }\n+\n+  private ObjectMap buildAnnotations(GeneticChecksReport report, String sampleId) throws ToolException {\n+    ObjectMap annot = new ObjectMap();\n+\n+    // Get individual from sample and update\n+    try {\n+      Individual individual = GeneticChecksUtils.getIndividualBySampleId(studyId, sampleId, catalogManager, token);\n+      if (individual != null) {\n+        annot.put(\"individual\", individual.getId());\n+        annot.put(\"sample\", sampleId);\n+        if (individual.getFather() != null) {\n+          annot.put(\"father\", individual.getFather().getId());\n         }\n-\n-        if (CollectionUtils.isEmpty(samples)) {\n-            throw new ToolException(\"Member samples not found to execute genetic checks analysis.\");\n+        if (individual.getMother() != null) {\n+          annot.put(\"mother\", individual.getMother().getId());\n         }\n-\n-        sampleIds = samples.stream().map(Sample::getId).collect(Collectors.toList());\n-    }\n-\n-    @Override\n-    protected List<String> getSteps() {\n-        List<String> steps = new ArrayList<>();\n-        steps.add(\"sex\");\n-        steps.add(\"relatedness\");\n-        steps.add(\"mendelian-errors\");\n-        steps.add(\"index-variable-set\");\n-        return steps;\n+      }\n+    } catch (ToolException e) {\n+      throw new ToolException(e);\n     }\n \n-    @Override\n-    protected void run() throws ToolException {\n-\n-        GeneticChecksAnalysisExecutor executor = getToolExecutor(GeneticChecksAnalysisExecutor.class);\n-\n-        executor.setStudyId(studyId)\n-                .setFamilyId(familyId)\n-                .setSampleIds(sampleIds)\n-                .setMinorAlleleFreq(minorAlleleFreq)\n-                .setRelatednessMethod(relatednessMethod);\n-\n-        step(\"sex\", () -> {\n-            executor.setGeneticCheck(GeneticChecksAnalysisExecutor.GeneticCheck.INFERRED_SEX).execute();\n-            GeneticChecksUtils.updateSexReport(executor.getReport().getInferredSexReport(), studyId, catalogManager, token);\n-        });\n-\n-        step(\"relatedness\", () -> {\n-            executor.setGeneticCheck(GeneticChecksAnalysisExecutor.GeneticCheck.RELATEDNESS).execute();\n-        });\n-\n-        step(\"mendelian-errors\", () -> {\n-            executor.setGeneticCheck(GeneticChecksAnalysisExecutor.GeneticCheck.MENDELIAN_ERRORS).execute();\n-        });\n-\n-        // Save results\n-        try {\n-            JacksonUtils.getDefaultObjectMapper().writer().writeValue(getOutDir().resolve(ID + \".report.json\").toFile(),\n-                    executor.getReport());\n-        } catch (IOException e) {\n-            throw new ToolException(e);\n+    // Relatedness annotations\n+    if (report.getRelatednessReport() != null) {\n+      ObjectMap relatednessAnnot = new ObjectMap();\n+\n+      relatednessAnnot.put(\"method\", report.getRelatednessReport().getMethod());\n+      List<ObjectMap> scoreAnnot = new ArrayList<>();\n+      for (RelatednessReport.RelatednessScore score : report.getRelatednessReport().getScores()) {\n+        if (sampleId.equals(score.getSampleId1()) || sampleId.equals(score.getSampleId2())) {\n+          scoreAnnot.add(new ObjectMap()\n+              .append(\"sampleId1\", score.getSampleId1())\n+              .append(\"sampleId2\", score.getSampleId2())\n+              .append(\"reportedRelation\", score.getReportedRelation())\n+              .append(\"z0\", score.getZ0())\n+              .append(\"z1\", score.getZ1())\n+              .append(\"z2\", score.getZ2())\n+              .append(\"piHat\", score.getPiHat())\n+          );\n         }\n-\n-        // Index as a variable set\n-        step(\"index-variable-set\", () -> {\n-            indexResults(executor.getReport());\n-        });\n+      }\n+      relatednessAnnot.put(\"scores\", scoreAnnot);\n+      annot.put(\"relatednessReport\", relatednessAnnot);\n     }\n \n-    private void indexResults(GeneticChecksReport report) throws ToolException {\n-        try {\n-            // Index variable-set for each target individual\n-            for (String sampleId : sampleIds) {\n-                // Create annotation set\n-                ObjectMap annotations = buildAnnotations(report, sampleId);\n-                AnnotationSet annotationSet = new AnnotationSet(VARIABLE_SET_ID, VARIABLE_SET_ID, annotations);\n-                IndividualUpdateParams updateParams = new IndividualUpdateParams().setAnnotationSets(Collections.singletonList(annotationSet));\n-\n-                // Get individual from sample and update\n-                Individual individual = GeneticChecksUtils.getIndividualBySampleId(studyId, sampleId, catalogManager, token);\n-                catalogManager.getIndividualManager().update(studyId, individual.getId(), updateParams, QueryOptions.empty(), token);\n-            }\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n+    // Mendelian error annotations\n+    if (report.getMendelianErrorReport() != null) {\n+      for (SampleAggregation sampleAggregation : report.getMendelianErrorReport().getSampleAggregation()) {\n+        if (sampleId.equals(sampleAggregation.getSample())) {\n+          ObjectMap meAnnot = new ObjectMap();\n+          meAnnot.put(\"numErrors\", sampleAggregation.getNumErrors());\n+          meAnnot.put(\"numRatio\", sampleAggregation.getRatio());\n+\n+          List<ObjectMap> chromAnnot = new ArrayList<>();\n+          for (ChromosomeAggregation chromAggregation : sampleAggregation.getChromAggregation()) {\n+            chromAnnot.add(new ObjectMap()\n+                .append(\"chromosome\", chromAggregation.getChromosome())\n+                .append(\"numErrors\", chromAggregation.getNumErrors())\n+                .append(\"errorCodeAggregation\", chromAggregation.getErrorCodeAggregation())\n+            );\n+          }\n+          meAnnot.put(\"chromAggregation\", chromAnnot);\n+          annot.put(\"mendelianErrorReport\", meAnnot);\n+\n+          break;\n         }\n+      }\n     }\n \n-    private ObjectMap buildAnnotations(GeneticChecksReport report, String sampleId) throws ToolException {\n-        ObjectMap annot = new ObjectMap();\n-\n-        // Get individual from sample and update\n-        try {\n-            Individual individual = GeneticChecksUtils.getIndividualBySampleId(studyId, sampleId, catalogManager, token);\n-            if (individual != null) {\n-                annot.put(\"individual\", individual.getId());\n-                annot.put(\"sample\", sampleId);\n-                if (individual.getFather() != null) {\n-                    annot.put(\"father\", individual.getFather().getId());\n-                }\n-                if (individual.getMother() != null) {\n-                    annot.put(\"mother\", individual.getMother().getId());\n-                }\n-            }\n-        } catch (ToolException e) {\n-            throw new ToolException(e);\n-        }\n-\n-        // Relatedness annotations\n-        if (report.getRelatednessReport() != null) {\n-            ObjectMap relatednessAnnot = new ObjectMap();\n-\n-            relatednessAnnot.put(\"method\", report.getRelatednessReport().getMethod());\n-            List<ObjectMap> scoreAnnot = new ArrayList<>();\n-            for (RelatednessReport.RelatednessScore score : report.getRelatednessReport().getScores()) {\n-                if (sampleId.equals(score.getSampleId1()) || sampleId.equals(score.getSampleId2())) {\n-                    scoreAnnot.add(new ObjectMap()\n-                            .append(\"sampleId1\", score.getSampleId1())\n-                            .append(\"sampleId2\", score.getSampleId2())\n-                            .append(\"reportedRelation\", score.getReportedRelation())\n-                            .append(\"z0\", score.getZ0())\n-                            .append(\"z1\", score.getZ1())\n-                            .append(\"z2\", score.getZ2())\n-                            .append(\"piHat\", score.getPiHat())\n-                    );\n-                }\n-            }\n-            relatednessAnnot.put(\"scores\", scoreAnnot);\n-            annot.put(\"relatednessReport\", relatednessAnnot);\n-        }\n-\n-        // Mendelian error annotations\n-        if (report.getMendelianErrorReport() != null) {\n-            for (SampleAggregation sampleAggregation : report.getMendelianErrorReport().getSampleAggregation()) {\n-                if (sampleId.equals(sampleAggregation.getSample())) {\n-                    ObjectMap meAnnot = new ObjectMap();\n-                    meAnnot.put(\"numErrors\", sampleAggregation.getNumErrors());\n-                    meAnnot.put(\"numRatio\", sampleAggregation.getRatio());\n-\n-                    List<ObjectMap> chromAnnot = new ArrayList<>();\n-                    for (ChromosomeAggregation chromAggregation : sampleAggregation.getChromAggregation()) {\n-                        chromAnnot.add(new ObjectMap()\n-                                .append(\"chromosome\", chromAggregation.getChromosome())\n-                                .append(\"numErrors\", chromAggregation.getNumErrors())\n-                                .append(\"errorCodeAggregation\", chromAggregation.getErrorCodeAggregation())\n-                        );\n-                    }\n-                    meAnnot.put(\"chromAggregation\", chromAnnot);\n-                    annot.put(\"mendelianErrorReport\", meAnnot);\n-\n-                    break;\n-                }\n-            }\n-        }\n-\n-        // Sex annotations\n-        if (CollectionUtils.isNotEmpty(report.getInferredSexReport())) {\n-            for (InferredSexReport inferredSexReport : report.getInferredSexReport()) {\n-                if (sampleId.equals(inferredSexReport.getSampleId())) {\n-                    // Found\n-                    ObjectMap sexAnnot = new ObjectMap();\n-                    sexAnnot.put(\"reportedSex\", inferredSexReport.getReportedSex());\n-                    sexAnnot.put(\"reportedKaryotypicSex\", inferredSexReport.getReportedKaryotypicSex());\n-                    sexAnnot.put(\"ratioX\", inferredSexReport.getRatioX());\n-                    sexAnnot.put(\"ratioY\", inferredSexReport.getRatioY());\n-                    sexAnnot.put(\"inferredKaryotypicSex\", inferredSexReport.getInferredKaryotypicSex());\n-\n-                    annot.put(\"sexReport\", sexAnnot);\n-                    break;\n-                }\n-            }\n+    // Sex annotations\n+    if (CollectionUtils.isNotEmpty(report.getInferredSexReport())) {\n+      for (InferredSexReport inferredSexReport : report.getInferredSexReport()) {\n+        if (sampleId.equals(inferredSexReport.getSampleId())) {\n+          // Found\n+          ObjectMap sexAnnot = new ObjectMap();\n+          sexAnnot.put(\"reportedSex\", inferredSexReport.getReportedSex());\n+          sexAnnot.put(\"reportedKaryotypicSex\", inferredSexReport.getReportedKaryotypicSex());\n+          sexAnnot.put(\"ratioX\", inferredSexReport.getRatioX());\n+          sexAnnot.put(\"ratioY\", inferredSexReport.getRatioY());\n+          sexAnnot.put(\"inferredKaryotypicSex\", inferredSexReport.getInferredKaryotypicSex());\n+\n+          annot.put(\"sexReport\", sexAnnot);\n+          break;\n         }\n-\n-        return annot;\n+      }\n     }\n+\n+    return annot;\n+  }\n }\n",
            "diff_size": 380
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/142/GeneticChecksAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/142/GeneticChecksAnalysis.java\nindex 9ebbca2e211..3fab72db63e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/142/GeneticChecksAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/142/GeneticChecksAnalysis.java\n@@ -290,8 +290,7 @@ public class GeneticChecksAnalysis extends OpenCgaTool {\n                     }\n                     meAnnot.put(\"chromAggregation\", chromAnnot);\n                     annot.put(\"mendelianErrorReport\", meAnnot);\n-\n-                    break;\n+break;\n                 }\n             }\n         }\n@@ -316,4 +315,4 @@ public class GeneticChecksAnalysis extends OpenCgaTool {\n \n         return annot;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "223",
                    "column": "29",
                    "severity": "error",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "223",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "224",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "20",
                    "severity": "error",
                    "message": "';' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/142/GeneticChecksAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/142/GeneticChecksAnalysis.java\nindex 9ebbca2e211..434abba9418 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/142/GeneticChecksAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/142/GeneticChecksAnalysis.java\n@@ -218,10 +218,12 @@ public class GeneticChecksAnalysis extends OpenCgaTool {\n                 // Create annotation set\n                 ObjectMap annotations = buildAnnotations(report, sampleId);\n                 AnnotationSet annotationSet = new AnnotationSet(VARIABLE_SET_ID, VARIABLE_SET_ID, annotations);\n-                IndividualUpdateParams updateParams = new IndividualUpdateParams().setAnnotationSets(Collections.singletonList(annotationSet));\n-\n-                // Get individual from sample and update\n-                Individual individual = GeneticChecksUtils.getIndividualBySampleId(studyId, sampleId, catalogManager, token);\n+                IndividualUpdateParams updateParams = newIndividualUpdateParams()\n+                .setAnnotationSets(\n+                Collections. singletonList (annotationSet\n+                ) ) ;\n+            // Get individual from sample and updateIndividual individual = GeneticChecksUtils.getIndividualBySampleId(studyId, sampleId, catalogManager, token);\n+                catalogManagerIndividual individual = GeneticChecksUtils.getIndividualBySampleId(studyId, sampleId, catalogManager, token);\n                 catalogManager.getIndividualManager().update(studyId, individual.getId(), updateParams, QueryOptions.empty(), token);\n             }\n         } catch (CatalogException e) {\n",
            "diff_size": 6
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}