{
    "project_name": "GluuFederation-casa",
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "372",
                "column": "61",
                "severity": "error",
                "message": "'...' is preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
            }
        ]
    },
    "source_code": "    }\n\n    private String getExtensionLabel(String clsName, Object ...args) {\n        String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n        return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler/1/PluginViewModel.java\nindex 4de1600b076..d15776fc716 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler/1/PluginViewModel.java\n@@ -369,7 +369,7 @@ public class PluginViewModel extends MainViewModel {\n \n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object... args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/intellij/1/PluginViewModel.java\nindex 4de1600b076..13f12697aa9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/intellij/1/PluginViewModel.java\n@@ -3,6 +3,7 @@\n  *\n  * Copyright (c) 2018, Gluu\n  */\n+\n package org.gluu.credmanager.ui.vm.admin;\n \n import org.gluu.credmanager.conf.PluginInfo;\n@@ -111,7 +112,7 @@ public class PluginViewModel extends MainViewModel {\n                     String version = m.getMainAttributes().getValue(\"Plugin-Version\");\n \n                     if (pluginList.stream().anyMatch(pl -> pl.getDescriptor().getPluginId().equals(id))) {\n-                        UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_already_existing\", new String[] { id }));\n+                        UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_already_existing\", new String[] {id}));\n                     } else if (Stream.of(id, version).allMatch(Utils::isNotEmpty)) {\n                         try {\n                             //Copy the jar to plugins dir\n@@ -125,7 +126,7 @@ public class PluginViewModel extends MainViewModel {\n                                 UIUtils.showMessageUI(false);\n                             } else {\n                                 Optional<PluginWrapper> owrp = extManager.getPlugins().stream()\n-                                        .filter(wrapper -> wrapper.getPluginId().equals(pluginId)).findAny();\n+                                    .filter(wrapper -> wrapper.getPluginId().equals(pluginId)).findAny();\n                                 if (owrp.isPresent()) {\n                                     pluginToShow = buildPluginData(owrp.get());\n                                     uiAdding = true;\n@@ -171,27 +172,27 @@ public class PluginViewModel extends MainViewModel {\n         String msg = Labels.getLabel(\"adm.plugins_confirm_del\", new String[] {pluginId, provider});\n \n         Messagebox.show(msg, null, Messagebox.YES | Messagebox.NO, Messagebox.QUESTION,\n-                event -> {\n-                    if (Messagebox.ON_YES.equals(event.getName())) {\n-                        boolean success = extManager.unloadPlugin(pluginId);\n-                        //boolean success = extManager.deletePlugin(pluginId);    //IMPORTANT: See note at method getPluginDestinationPath\n-                        if (success) {\n-                            PluginData pluginData = pluginList.stream()\n-                                    .filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId)).findAny().get();\n-                            logger.trace(\"Removing plugin from UI list\");\n-                            pluginList.remove(pluginData);\n-\n-                            removeFromKnownPlugins(pluginId);\n-                            updateMainSettings();\n-                            BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"pluginList\");\n-                        } else {\n-                            UIUtils.showMessageUI(false);\n-                        }\n-                        hidePluginDetails();\n-                        BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"pluginToShow\");\n-                        BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"uiAdding\");\n+            event -> {\n+                if (Messagebox.ON_YES.equals(event.getName())) {\n+                    boolean success = extManager.unloadPlugin(pluginId);\n+                    //boolean success = extManager.deletePlugin(pluginId);    //IMPORTANT: See note at method getPluginDestinationPath\n+                    if (success) {\n+                        PluginData pluginData = pluginList.stream()\n+                            .filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId)).findAny().get();\n+                        logger.trace(\"Removing plugin from UI list\");\n+                        pluginList.remove(pluginData);\n+\n+                        removeFromKnownPlugins(pluginId);\n+                        updateMainSettings();\n+                        BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"pluginList\");\n+                    } else {\n+                        UIUtils.showMessageUI(false);\n                     }\n+                    hidePluginDetails();\n+                    BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"pluginToShow\");\n+                    BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"uiAdding\");\n                 }\n+            }\n         );\n     }\n \n@@ -259,7 +260,7 @@ public class PluginViewModel extends MainViewModel {\n \n         boolean success = extManager.startPlugin(pluginId);\n         if (success) {\n-            if (pluginToShow!=null && pluginToShow.getExtensions() == null) {\n+            if (pluginToShow != null && pluginToShow.getExtensions() == null) {\n                 //This can happen if the plugin was uploaded, but the add button was not pressed\n                 pluginToShow.setExtensions(buildExtensionList(extManager.getPlugin(pluginId)));\n             }\n@@ -268,7 +269,7 @@ public class PluginViewModel extends MainViewModel {\n             logger.info(\"Updating plugin status\");\n \n             PluginData pluginData = pluginList.stream().filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId))\n-                    .findAny().get();\n+                .findAny().get();\n             pluginData.setState(Labels.getLabel(\"adm.plugins_state.\" + started));\n \n             PluginInfo pl = getSettings().getKnownPlugins().stream().filter(apl -> apl.getId().equals(pluginId)).findAny().get();\n@@ -294,7 +295,7 @@ public class PluginViewModel extends MainViewModel {\n                 logger.info(\"Updating plugin status\");\n \n                 PluginData pluginData = pluginList.stream().filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId))\n-                        .findAny().get();\n+                    .findAny().get();\n                 pluginData.setState(Labels.getLabel(\"adm.plugins_state.\" + stopped));\n \n                 PluginInfo pl = getSettings().getKnownPlugins().stream().filter(apl -> apl.getId().equals(pluginId)).findAny().get();\n@@ -359,8 +360,8 @@ public class PluginViewModel extends MainViewModel {\n             String acr = method.getAcr();\n \n             if (Optional.ofNullable(getSettings().getAcrPluginMap())\n-                    .map(mapping -> mapping.get(acr).equals(pluginId)).orElse(false)) {\n-                text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[]{ acr });\n+                .map(mapping -> mapping.get(acr).equals(pluginId)).orElse(false)) {\n+                text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[] {acr});\n             }\n             extList.add(getExtensionLabel(AUTHN_METHOD.getName(), text));\n         }\n@@ -369,7 +370,7 @@ public class PluginViewModel extends MainViewModel {\n \n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object... args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n@@ -381,7 +382,7 @@ public class PluginViewModel extends MainViewModel {\n         */\n         String suffix = Long.toString(System.currentTimeMillis());\n         int aux = suffix.length();\n-        suffix = \"_\" +  suffix.substring(aux - 5, aux);\n+        suffix = \"_\" + suffix.substring(aux - 5, aux);\n \n         aux = fileName.lastIndexOf(\".\");\n         aux = aux == -1 ? fileName.length() : aux;\n",
            "diff_size": 33
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "371",
                    "column": "61",
                    "severity": "error",
                    "message": "'...' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/naturalize/1/PluginViewModel.java\nindex 4de1600b076..7663e081272 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/naturalize/1/PluginViewModel.java\n@@ -250,7 +250,6 @@ public class PluginViewModel extends MainViewModel {\n             Messagebox.show(message, Labels.getLabel(\"general.warning\"), Messagebox.OK, Messagebox.INFORMATION);\n         }\n         */\n-\n     }\n \n     @NotifyChange({\"pluginList\", \"pluginToShow\", \"uiAdding\"})\n@@ -259,7 +258,7 @@ public class PluginViewModel extends MainViewModel {\n \n         boolean success = extManager.startPlugin(pluginId);\n         if (success) {\n-            if (pluginToShow!=null && pluginToShow.getExtensions() == null) {\n+            if (pluginToShow != null && pluginToShow.getExtensions() == null) {\n                 //This can happen if the plugin was uploaded, but the add button was not pressed\n                 pluginToShow.setExtensions(buildExtensionList(extManager.getPlugin(pluginId)));\n             }\n@@ -360,7 +359,7 @@ public class PluginViewModel extends MainViewModel {\n \n             if (Optional.ofNullable(getSettings().getAcrPluginMap())\n                     .map(mapping -> mapping.get(acr).equals(pluginId)).orElse(false)) {\n-                text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[]{ acr });\n+    text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[]{ acr });\n             }\n             extList.add(getExtensionLabel(AUTHN_METHOD.getName(), text));\n         }\n@@ -381,7 +380,7 @@ public class PluginViewModel extends MainViewModel {\n         */\n         String suffix = Long.toString(System.currentTimeMillis());\n         int aux = suffix.length();\n-        suffix = \"_\" +  suffix.substring(aux - 5, aux);\n+        suffix = \"_\" + suffix.substring(aux - 5, aux);\n \n         aux = fileName.lastIndexOf(\".\");\n         aux = aux == -1 ? fileName.length() : aux;\n@@ -398,4 +397,4 @@ public class PluginViewModel extends MainViewModel {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 171).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/codebuff/1/PluginViewModel.java\nindex 4de1600b076..4f41bd8997f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/codebuff/1/PluginViewModel.java\n@@ -29,7 +29,6 @@ import org.zkoss.zk.ui.select.annotation.VariableResolver;\n import org.zkoss.zk.ui.select.annotation.WireVariable;\n import org.zkoss.zkplus.cdi.DelegatingVariableResolver;\n import org.zkoss.zul.Messagebox;\n-\n import java.io.ByteArrayInputStream;\n import java.nio.file.Files;\n import java.nio.file.Path;\n@@ -45,20 +44,18 @@ import java.util.stream.Stream;\n /**\n  * @author jgomer\n  */\n+\n+\n @VariableResolver(DelegatingVariableResolver.class)\n public class PluginViewModel extends MainViewModel {\n \n     private static final Class<AuthnMethod> AUTHN_METHOD = AuthnMethod.class;\n-\n     private Logger logger = LoggerFactory.getLogger(getClass());\n \n     @WireVariable(\"extensionsManager\")\n     private ExtensionsManager extManager;\n-\n     private List<PluginData> pluginList;\n-\n     private PluginData pluginToShow;\n-\n     private boolean uiAdding;\n \n     public List<PluginData> getPluginList() {\n@@ -102,57 +99,50 @@ public class PluginViewModel extends MainViewModel {\n             pluginToShow = null;\n             byte[] blob = evt.getMedia().getByteData();\n             logger.debug(\"Size of blob received: {} bytes\", blob.length);\n-\n             try (JarInputStream jis = new JarInputStream(new ByteArrayInputStream(blob), false)) {\n-\n                 Manifest m = jis.getManifest();\n                 if (m != null) {\n                     String id = m.getMainAttributes().getValue(\"Plugin-Id\");\n                     String version = m.getMainAttributes().getValue(\"Plugin-Version\");\n-\n                     if (pluginList.stream().anyMatch(pl -> pl.getDescriptor().getPluginId().equals(id))) {\n                         UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_already_existing\", new String[] { id }));\n                     } else if (Stream.of(id, version).allMatch(Utils::isNotEmpty)) {\n-                        try {\n-                            //Copy the jar to plugins dir\n-                            Path path = Files.write(getPluginDestinationPath(evt.getMedia().getName()), blob, StandardOpenOption.CREATE_NEW);\n-                            logger.info(\"Plugin jar file copied to app plugins directory\");\n-                            String pluginId = extManager.loadPlugin(path);\n \n-                            if (pluginId == null) {\n-                                logger.warn(\"Loading plugin from {} returned no pluginId.\", path.toString());\n+                               try {\n+                            //Copy the jar to plugins dir\n+                                   Path path = Files.write(getPluginDestinationPath(evt.getMedia().getName()), blob, StandardOpenOption.CREATE_NEW);\n+                                   logger.info(\"Plugin jar file copied to app plugins directory\");\n+                                   String pluginId = extManager.loadPlugin(path);\n+                                   if (pluginId == null) {\n+                                       logger.warn(\"Loading plugin from {} returned no pluginId.\", path.toString());\n                                 //Files.delete(path); //IMPORTANT: See note at method getPluginDestinationPath\n-                                UIUtils.showMessageUI(false);\n-                            } else {\n-                                Optional<PluginWrapper> owrp = extManager.getPlugins().stream()\n-                                        .filter(wrapper -> wrapper.getPluginId().equals(pluginId)).findAny();\n-                                if (owrp.isPresent()) {\n-                                    pluginToShow = buildPluginData(owrp.get());\n-                                    uiAdding = true;\n-\n-                                    logger.info(\"Adding plugin to list of known plugins in settings\");\n-                                    PluginInfo info = new PluginInfo();\n-                                    info.setId(id);\n-                                    info.setRelativePath(Paths.get(pluginToShow.getPath()).getFileName().toString());\n-                                    info.setState(PluginState.STOPPED.toString());\n-\n-                                    List<PluginInfo> list = Optional.ofNullable(getSettings().getKnownPlugins()).orElse(new ArrayList<>());\n-                                    list.add(info);\n-                                    getSettings().setKnownPlugins(list);\n-                                    getSettings().save();\n-                                } else {\n-                                    UIUtils.showMessageUI(false);\n-                                }\n-                            }\n-                        } catch (Exception e) {\n-                            logger.error(e.getMessage(), e);\n-                            UIUtils.showMessageUI(false);\n-                        }\n+                                       UIUtils.showMessageUI(false);\n+                                   } else {\n+                                       Optional<PluginWrapper> owrp = extManager.getPlugins().stream().filter(wrapper -> wrapper.getPluginId().equals(pluginId)).findAny();\n+                                       if (owrp.isPresent()) {\n+                                           pluginToShow = buildPluginData(owrp.get());\n+                                           uiAdding = true;\n+                                           logger.info(\"Adding plugin to list of known plugins in settings\");\n+                                           PluginInfo info = new PluginInfo();\n+                                           info.setId(id);\n+                                           info.setRelativePath(Paths.get(pluginToShow.getPath()).getFileName().toString());\n+                                           info.setState(PluginState.STOPPED.toString());\n+                                           List<PluginInfo> list = Optional.ofNullable(getSettings().getKnownPlugins()).orElse(new ArrayList<>());\n+                                           list.add(info);\n+                                           getSettings().setKnownPlugins(list);\n+                                           getSettings().save();\n+                                       } else {\n+                                           UIUtils.showMessageUI(false);\n+                                       }\n+                                   }\n+                               } catch (Exception e) {\n+                                   logger.error(e.getMessage(), e);\n+                                   UIUtils.showMessageUI(false);\n+                               }\n                     } else {\n-                        UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_invalid_plugin\"));\n-                        logger.error(\"Plugin's manifest file missing ID and/or Version\");\n+                               UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_invalid_plugin\"));\n+                               logger.error(\"Plugin's manifest file missing ID and/or Version\");\n                     }\n-\n                 } else {\n                     UIUtils.showMessageUI(false, Labels.getLabel(\"adm.plugins_invalid_plugin\"));\n                     logger.error(\"Jar file with no manifest file\");\n@@ -161,59 +151,52 @@ public class PluginViewModel extends MainViewModel {\n         } catch (Exception e) {\n             logger.error(e.getMessage(), e);\n         }\n+\n     }\n \n     @Command\n-    public void deletePlugin(@BindingParam(\"id\") String pluginId, @BindingParam(\"provider\") String provider) {\n-\n+    public void deletePlugin(@BindingParam(\"id\") String pluginId,\n+                             @BindingParam(\"provider\") String provider) {\n         logger.info(\"Attempting to remove plugin {}\", pluginId);\n         provider = Utils.isEmpty(provider) ? Labels.getLabel(\"adm.plugins_nodata\") : provider;\n-        String msg = Labels.getLabel(\"adm.plugins_confirm_del\", new String[] {pluginId, provider});\n-\n+        String msg = Labels.getLabel(\"adm.plugins_confirm_del\", new String[] { pluginId, provider });\n         Messagebox.show(msg, null, Messagebox.YES | Messagebox.NO, Messagebox.QUESTION,\n-                event -> {\n-                    if (Messagebox.ON_YES.equals(event.getName())) {\n-                        boolean success = extManager.unloadPlugin(pluginId);\n+            event -> {\n+                if (Messagebox.ON_YES.equals(event.getName())) {\n+\n+                    boolean success = extManager.unloadPlugin(pluginId);\n                         //boolean success = extManager.deletePlugin(pluginId);    //IMPORTANT: See note at method getPluginDestinationPath\n-                        if (success) {\n-                            PluginData pluginData = pluginList.stream()\n-                                    .filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId)).findAny().get();\n-                            logger.trace(\"Removing plugin from UI list\");\n-                            pluginList.remove(pluginData);\n-\n-                            removeFromKnownPlugins(pluginId);\n-                            updateMainSettings();\n-                            BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"pluginList\");\n-                        } else {\n-                            UIUtils.showMessageUI(false);\n-                        }\n-                        hidePluginDetails();\n-                        BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"pluginToShow\");\n-                        BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"uiAdding\");\n+                    if (success) {\n+                        PluginData pluginData = pluginList.stream().filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId)).findAny().get();\n+                        logger.trace(\"Removing plugin from UI list\");\n+                        pluginList.remove(pluginData);\n+                        removeFromKnownPlugins(pluginId);\n+                        updateMainSettings();\n+                        BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"pluginList\");\n+                    } else {\n+                        UIUtils.showMessageUI(false);\n                     }\n+                    hidePluginDetails();\n+                    BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"pluginToShow\");\n+                    BindUtils.postNotifyChange(null, null, PluginViewModel.this, \"uiAdding\");\n                 }\n-        );\n+            });\n     }\n \n     @NotifyChange({\"pluginList\", \"pluginToShow\", \"uiAdding\"})\n     @Command\n     public void addPlugin() {\n-\n         String id = pluginToShow.getDescriptor().getPluginId();\n         boolean success = extManager.startPlugin(id);\n-\n         if (success) {\n             String started = PluginState.STARTED.toString();\n             pluginToShow.setState(Labels.getLabel(\"adm.plugins_state.\" + started));\n             //populate extension data\n             pluginToShow.setExtensions(buildExtensionList(extManager.getPlugin(id)));\n-\n             logger.trace(\"Adding plugin to UI list\");\n             pluginList.add(pluginToShow);\n-\n             PluginInfo pl = getSettings().getKnownPlugins().stream().filter(apl -> apl.getId().equals(id)).findAny().get();\n             pl.setState(started);\n-\n             updateMainSettings();\n             hidePluginDetails();\n         } else {\n@@ -225,10 +208,11 @@ public class PluginViewModel extends MainViewModel {\n     @NotifyChange({\"pluginToShow\", \"uiAdding\"})\n     @Command\n     public void cancelAdd() {\n-\n         String plugId = pluginToShow.getDescriptor().getPluginId();\n         hidePluginDetails();\n+\n         if (extManager.unloadPlugin(plugId)) {\n+\n             try {\n                 removeFromKnownPlugins(plugId);\n                 getSettings().save();\n@@ -259,18 +243,15 @@ public class PluginViewModel extends MainViewModel {\n \n         boolean success = extManager.startPlugin(pluginId);\n         if (success) {\n-            if (pluginToShow!=null && pluginToShow.getExtensions() == null) {\n+            if (pluginToShow != null && pluginToShow.getExtensions() == null) {\n                 //This can happen if the plugin was uploaded, but the add button was not pressed\n                 pluginToShow.setExtensions(buildExtensionList(extManager.getPlugin(pluginId)));\n             }\n \n             String started = PluginState.STARTED.toString();\n             logger.info(\"Updating plugin status\");\n-\n-            PluginData pluginData = pluginList.stream().filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId))\n-                    .findAny().get();\n+            PluginData pluginData = pluginList.stream().filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId)).findAny().get();\n             pluginData.setState(Labels.getLabel(\"adm.plugins_state.\" + started));\n-\n             PluginInfo pl = getSettings().getKnownPlugins().stream().filter(apl -> apl.getId().equals(pluginId)).findAny().get();\n             pl.setState(started);\n             updateMainSettings();\n@@ -278,25 +259,21 @@ public class PluginViewModel extends MainViewModel {\n             UIUtils.showMessageUI(false);\n         }\n         hidePluginDetails();\n-\n     }\n \n     @NotifyChange({\"pluginList\", \"pluginToShow\", \"uiAdding\"})\n     @Command\n     public void stopPlugin(@BindingParam(\"id\") String pluginId) {\n-\n         if (getSettings().getAcrPluginMap().values().contains(pluginId)) {\n             Messagebox.show(Labels.getLabel(\"adm.plugin_plugin_bound_method\"), null, Messagebox.OK, Messagebox.EXCLAMATION);\n         } else {\n+\n             boolean success = extManager.stopPlugin(pluginId);\n             if (success) {\n                 String stopped = PluginState.STOPPED.toString();\n                 logger.info(\"Updating plugin status\");\n-\n-                PluginData pluginData = pluginList.stream().filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId))\n-                        .findAny().get();\n+                PluginData pluginData = pluginList.stream().filter(pl -> pl.getDescriptor().getPluginId().equals(pluginId)).findAny().get();\n                 pluginData.setState(Labels.getLabel(\"adm.plugins_state.\" + stopped));\n-\n                 PluginInfo pl = getSettings().getKnownPlugins().stream().filter(apl -> apl.getId().equals(pluginId)).findAny().get();\n                 pl.setState(stopped);\n                 updateMainSettings();\n@@ -305,19 +282,15 @@ public class PluginViewModel extends MainViewModel {\n             }\n         }\n         hidePluginDetails();\n-\n     }\n \n     private PluginData buildPluginData(PluginWrapper pw) {\n-\n         PluginDescriptor pluginDescriptor = pw.getDescriptor();\n         logger.debug(\"Building a PluginData instance for plugin {}\", pw.getPluginId());\n         PluginData pl = new PluginData();\n-\n         PluginState plState = pw.getPluginState();\n         //In practice resolved (that is, just loaded not started) could be seen as stopped\n         plState = plState.equals(PluginState.RESOLVED) ? PluginState.STOPPED : plState;\n-\n         pl.setState(Labels.getLabel(\"adm.plugins_state.\" + plState.toString()));\n         pl.setPath(pw.getPluginPath().toString());\n         pl.setDescriptor(pluginDescriptor);\n@@ -326,13 +299,10 @@ public class PluginViewModel extends MainViewModel {\n             //pf4j doesn't give any info if not in started state\n             pl.setExtensions(buildExtensionList(pw));\n         }\n-\n         return pl;\n-\n     }\n \n     private List<String> buildExtensionList(PluginWrapper wrapper) {\n-\n         List<String> extList = new ArrayList<>();\n         PluginManager manager = wrapper.getPluginManager();\n         String pluginId = wrapper.getPluginId();\n@@ -340,11 +310,10 @@ public class PluginViewModel extends MainViewModel {\n         //plugin manager's getExtension methods outputs data only when the plugin is already started! (not simply loaded)\n         for (Object obj : manager.getExtensions(pluginId)) {\n             Class cls = obj.getClass();\n-\n             if (NavigationMenu.class.isAssignableFrom(cls)) {\n                 extList.add(getExtensionLabel(NavigationMenu.class.getName(), cls.getSimpleName()));\n             } else if (!AUTHN_METHOD.isAssignableFrom(cls)) {\n-                extList.add(getExtensionLabel(cls.getName()));\n+                       extList.add(getExtensionLabel(cls.getName()));\n             }\n         }\n         /*\n@@ -357,19 +326,15 @@ public class PluginViewModel extends MainViewModel {\n         for (AuthnMethod method : manager.getExtensions(AUTHN_METHOD, pluginId)) {\n             String text = Labels.getLabel(method.getUINameKey());\n             String acr = method.getAcr();\n-\n-            if (Optional.ofNullable(getSettings().getAcrPluginMap())\n-                    .map(mapping -> mapping.get(acr).equals(pluginId)).orElse(false)) {\n-                text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[]{ acr });\n+            if (Optional.ofNullable(getSettings().getAcrPluginMap()).map(mapping -> mapping.get(acr).equals(pluginId)).orElse(false)) {\n+                text += Labels.getLabel(\"adm.plugins_acr_handler\", new String[] { acr });\n             }\n             extList.add(getExtensionLabel(AUTHN_METHOD.getName(), text));\n         }\n-\n         return extList;\n-\n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object... args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n@@ -381,13 +346,11 @@ public class PluginViewModel extends MainViewModel {\n         */\n         String suffix = Long.toString(System.currentTimeMillis());\n         int aux = suffix.length();\n-        suffix = \"_\" +  suffix.substring(aux - 5, aux);\n-\n+        suffix = \"_\" + suffix.substring(aux - 5, aux);\n         aux = fileName.lastIndexOf(\".\");\n         aux = aux == -1 ? fileName.length() : aux;\n         fileName = fileName.substring(0, aux) + suffix + \".jar\";\n         return Paths.get(extManager.getPluginsRoot().toString(), fileName);\n-\n     }\n \n     private void removeFromKnownPlugins(String pluginId) {\n@@ -395,7 +358,6 @@ public class PluginViewModel extends MainViewModel {\n         List<PluginInfo> list = getSettings().getKnownPlugins();\n         PluginInfo pl = list.stream().filter(apl -> apl.getId().equals(pluginId)).findAny().get();\n         list.remove(pl);\n-\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 120
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_random/1/PluginViewModel.java\nindex 4de1600b076..d15776fc716 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_random/1/PluginViewModel.java\n@@ -369,7 +369,7 @@ public class PluginViewModel extends MainViewModel {\n \n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object... args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_three_grams/1/PluginViewModel.java\nindex 4de1600b076..abd8eb28623 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/errored/1/1/PluginViewModel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-casa/styler_three_grams/1/PluginViewModel.java\n@@ -369,7 +369,7 @@ public class PluginViewModel extends MainViewModel {\n \n     }\n \n-    private String getExtensionLabel(String clsName, Object ...args) {\n+    private String getExtensionLabel(String clsName, Object...args) {\n         String text = Labels.getLabel(\"adm.plugins_extension.\" + clsName, args);\n         return text == null ? clsName.substring(clsName.lastIndexOf(\".\") + 1) : text;\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}