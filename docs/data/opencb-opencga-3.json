{
    "project_name": "opencb-opencga",
    "error_id": "3",
    "information": {
        "errors": [
            {
                "line": "97",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 143).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n        if (StringUtils.isNotEmpty(commandOptions.project)) {\n            catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n        } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n            catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n                    Paths.get(commandOptions.inputFile).toFile(), token);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/3/CatalogCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/3/CatalogCommandExecutor.java\nindex 98911f137f1..515b18580e8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/3/CatalogCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/3/CatalogCommandExecutor.java\n@@ -45,222 +45,222 @@ import java.util.Collections;\n  */\n public class CatalogCommandExecutor extends AdminCommandExecutor {\n \n-    private AdminCliOptionsParser.CatalogCommandOptions catalogCommandOptions;\n-\n-    public CatalogCommandExecutor(AdminCliOptionsParser.CatalogCommandOptions catalogCommandOptions) {\n-        super(catalogCommandOptions.commonOptions);\n-        this.catalogCommandOptions = catalogCommandOptions;\n+  private AdminCliOptionsParser.CatalogCommandOptions catalogCommandOptions;\n+\n+  public CatalogCommandExecutor(AdminCliOptionsParser.CatalogCommandOptions catalogCommandOptions) {\n+    super(catalogCommandOptions.commonOptions);\n+    this.catalogCommandOptions = catalogCommandOptions;\n+  }\n+\n+\n+  @Override\n+  public void execute() throws Exception {\n+    String subCommandString = catalogCommandOptions.getParsedSubCommand();\n+    logger.debug(\"Executing catalog admin {} command line\", subCommandString);\n+    switch (subCommandString) {\n+      case \"install\":\n+        install();\n+        break;\n+      case \"status\":\n+        status();\n+        break;\n+      case \"delete\":\n+        delete();\n+        break;\n+      case \"index\":\n+        index();\n+        break;\n+      case \"export\":\n+        export();\n+        break;\n+      case \"import\":\n+        importDatabase();\n+        break;\n+      case \"daemon\":\n+        daemons();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n     }\n \n+  }\n \n-    @Override\n-    public void execute() throws Exception {\n-        String subCommandString = catalogCommandOptions.getParsedSubCommand();\n-        logger.debug(\"Executing catalog admin {} command line\", subCommandString);\n-        switch (subCommandString) {\n-            case \"install\":\n-                install();\n-                break;\n-            case \"status\":\n-                status();\n-                break;\n-            case \"delete\":\n-                delete();\n-                break;\n-            case \"index\":\n-                index();\n-                break;\n-            case \"export\":\n-                export();\n-                break;\n-            case \"import\":\n-                importDatabase();\n-                break;\n-            case \"daemon\":\n-                daemons();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-        }\n-\n-    }\n+  private void export() throws CatalogException {\n+    AdminCliOptionsParser.ExportCatalogCommandOptions commandOptions = catalogCommandOptions.exportCatalogCommandOptions;\n+    validateConfiguration(commandOptions);\n \n-    private void export() throws CatalogException {\n-        AdminCliOptionsParser.ExportCatalogCommandOptions commandOptions = catalogCommandOptions.exportCatalogCommandOptions;\n-        validateConfiguration(commandOptions);\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n-\n-        if (StringUtils.isNotEmpty(commandOptions.project)) {\n-            catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n-        } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n-            catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n-                    Paths.get(commandOptions.inputFile).toFile(), token);\n-        }\n+    if (StringUtils.isNotEmpty(commandOptions.project)) {\n+      catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n+    } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n+      catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n+          Paths.get(commandOptions.inputFile).toFile(), token);\n     }\n+  }\n \n-    private void importDatabase() throws CatalogException, IOException {\n-        AdminCliOptionsParser.ImportCatalogCommandOptions commandOptions = catalogCommandOptions.importCatalogCommandOptions;\n-        validateConfiguration(commandOptions);\n+  private void importDatabase() throws CatalogException, IOException {\n+    AdminCliOptionsParser.ImportCatalogCommandOptions commandOptions = catalogCommandOptions.importCatalogCommandOptions;\n+    validateConfiguration(commandOptions);\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n \n-        catalogManager.getProjectManager().importReleases(commandOptions.owner, commandOptions.directory, token);\n-    }\n+    catalogManager.getProjectManager().importReleases(commandOptions.owner, commandOptions.directory, token);\n+  }\n \n-    private void status() throws CatalogException, JsonProcessingException {\n-        AdminCliOptionsParser.StatusCatalogCommandOptions commandOptions = catalogCommandOptions.statusCatalogCommandOptions;\n-        validateConfiguration(commandOptions);\n+  private void status() throws CatalogException, JsonProcessingException {\n+    AdminCliOptionsParser.StatusCatalogCommandOptions commandOptions = catalogCommandOptions.statusCatalogCommandOptions;\n+    validateConfiguration(commandOptions);\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n //        if (StringUtils.isEmpty(commandOptions.commonOptions.adminPassword)) {\n //            throw new CatalogException(\"No admin password found. Please, insert your password.\");\n //        }\n-        ObjectMap result = new ObjectMap();\n-        if (catalogManager.getDatabaseStatus()) {\n-            result.put(\"mongodbStatus\", true);\n-            result.put(\"catalogDBName\", catalogManager.getCatalogDatabase());\n-            if (catalogManager.existsCatalogDB()) {\n-                result.put(\"installed\", true);\n+    ObjectMap result = new ObjectMap();\n+    if (catalogManager.getDatabaseStatus()) {\n+      result.put(\"mongodbStatus\", true);\n+      result.put(\"catalogDBName\", catalogManager.getCatalogDatabase());\n+      if (catalogManager.existsCatalogDB()) {\n+        result.put(\"installed\", true);\n \n //                // check login\n //                catalogManager.getUserManager().loginAsAdmin(commandOptions.commonOptions.adminPassword);\n \n-                MongoDBAdaptorFactory factory = new MongoDBAdaptorFactory(configuration);\n-                MongoDBCollection metaCollection = factory.getMongoDBCollectionMap().get(MongoDBAdaptorFactory.METADATA_COLLECTION);\n-                Document metaDocument = metaCollection.find(new Document(), QueryOptions.empty()).first();\n-\n-                result.put(\"creationDate\", metaDocument.get(\"creationDate\"));\n-                result.put(\"version\", metaDocument.get(\"version\"));\n-\n-                Object fullVersion = metaDocument.get(\"_fullVersion\");\n-                int version = 20000;\n-                int release = 4;\n-                int lastJavaUpdate = 0;\n-                int lastJsUpdate = 0;\n-                if (fullVersion != null) {\n-                    version = ((Document) fullVersion).getInteger(\"version\");\n-                    release = ((Document) fullVersion).getInteger(\"release\");\n-                    lastJavaUpdate = ((Document) fullVersion).getInteger(\"lastJavaUpdate\");\n-                    lastJsUpdate = ((Document) fullVersion).getInteger(\"lastJsUpdate\");\n-                }\n-                result.put(\"versionNumeric\", version);\n-                result.put(\"release\", release);\n-                result.put(\"lastJsUpdate\", lastJsUpdate);\n-                result.put(\"lastJavaUpdate\", lastJavaUpdate);\n-            } else {\n-                result.put(\"installed\", false);\n-            }\n-        } else {\n-            result.put(\"mongodbStatus\", false);\n-            result.put(\"installed\", false);\n+        MongoDBAdaptorFactory factory = new MongoDBAdaptorFactory(configuration);\n+        MongoDBCollection metaCollection = factory.getMongoDBCollectionMap().get(MongoDBAdaptorFactory.METADATA_COLLECTION);\n+        Document metaDocument = metaCollection.find(new Document(), QueryOptions.empty()).first();\n+\n+        result.put(\"creationDate\", metaDocument.get(\"creationDate\"));\n+        result.put(\"version\", metaDocument.get(\"version\"));\n+\n+        Object fullVersion = metaDocument.get(\"_fullVersion\");\n+        int version = 20000;\n+        int release = 4;\n+        int lastJavaUpdate = 0;\n+        int lastJsUpdate = 0;\n+        if (fullVersion != null) {\n+          version = ((Document) fullVersion).getInteger(\"version\");\n+          release = ((Document) fullVersion).getInteger(\"release\");\n+          lastJavaUpdate = ((Document) fullVersion).getInteger(\"lastJavaUpdate\");\n+          lastJsUpdate = ((Document) fullVersion).getInteger(\"lastJsUpdate\");\n         }\n-        System.out.println(JacksonUtils.getDefaultObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(result));\n+        result.put(\"versionNumeric\", version);\n+        result.put(\"release\", release);\n+        result.put(\"lastJsUpdate\", lastJsUpdate);\n+        result.put(\"lastJavaUpdate\", lastJavaUpdate);\n+      } else {\n+        result.put(\"installed\", false);\n+      }\n+    } else {\n+      result.put(\"mongodbStatus\", false);\n+      result.put(\"installed\", false);\n     }\n+    System.out.println(JacksonUtils.getDefaultObjectMapper().writerWithDefaultPrettyPrinter().writeValueAsString(result));\n+  }\n \n-    private void install() throws CatalogException, URISyntaxException {\n-        AdminCliOptionsParser.InstallCatalogCommandOptions commandOptions = catalogCommandOptions.installCatalogCommandOptions;\n+  private void install() throws CatalogException, URISyntaxException {\n+    AdminCliOptionsParser.InstallCatalogCommandOptions commandOptions = catalogCommandOptions.installCatalogCommandOptions;\n \n-        validateConfiguration(commandOptions);\n+    validateConfiguration(commandOptions);\n \n-        this.configuration.getAdmin().setAlgorithm(\"HS256\");\n+    this.configuration.getAdmin().setAlgorithm(\"HS256\");\n \n-        this.configuration.getAdmin().setSecretKey(commandOptions.secretKey);\n-        if (StringUtils.isEmpty(configuration.getAdmin().getSecretKey())) {\n-            configuration.getAdmin().setSecretKey(RandomStringUtils.randomAlphabetic(16));\n-        }\n+    this.configuration.getAdmin().setSecretKey(commandOptions.secretKey);\n+    if (StringUtils.isEmpty(configuration.getAdmin().getSecretKey())) {\n+      configuration.getAdmin().setSecretKey(RandomStringUtils.randomAlphabetic(16));\n+    }\n \n-        if (StringUtils.isEmpty(commandOptions.commonOptions.adminPassword)) {\n-            throw new CatalogException(\"No admin password found. Please, insert your password.\");\n-        }\n+    if (StringUtils.isEmpty(commandOptions.commonOptions.adminPassword)) {\n+      throw new CatalogException(\"No admin password found. Please, insert your password.\");\n+    }\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        if (catalogManager.existsCatalogDB()) {\n-            if (commandOptions.force) {\n-                // The password of the old db should match the one to be used in the new installation. Otherwise, they can obtain the same\n-                // results calling first to \"catalog delete\" and then \"catalog install\"\n-                String token = catalogManager.getUserManager().loginAsAdmin(commandOptions.commonOptions.adminPassword).getToken();\n-                catalogManager.deleteCatalogDB(token);\n-            } else {\n-                throw new CatalogException(\"A database called \" + catalogManager.getCatalogDatabase() + \" already exists\");\n-            }\n-        }\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    if (catalogManager.existsCatalogDB()) {\n+      if (commandOptions.force) {\n+        // The password of the old db should match the one to be used in the new installation. Otherwise, they can obtain the same\n+        // results calling first to \"catalog delete\" and then \"catalog install\"\n+        String token = catalogManager.getUserManager().loginAsAdmin(commandOptions.commonOptions.adminPassword).getToken();\n+        catalogManager.deleteCatalogDB(token);\n+      } else {\n+        throw new CatalogException(\"A database called \" + catalogManager.getCatalogDatabase() + \" already exists\");\n+      }\n+    }\n \n-        logger.info(\"\\nInstalling database {} in {}\\n\", catalogManager.getCatalogDatabase(),\n-                configuration.getCatalog().getDatabase().getHosts());\n+    logger.info(\"\\nInstalling database {} in {}\\n\", catalogManager.getCatalogDatabase(),\n+        configuration.getCatalog().getDatabase().getHosts());\n \n-        catalogManager.installCatalogDB(configuration.getAdmin().getSecretKey(), commandOptions.commonOptions.adminPassword,\n-                commandOptions.email, commandOptions.organization);\n-    }\n+    catalogManager.installCatalogDB(configuration.getAdmin().getSecretKey(), commandOptions.commonOptions.adminPassword,\n+        commandOptions.email, commandOptions.organization);\n+  }\n \n-    private void delete() throws CatalogException, URISyntaxException {\n-        validateConfiguration(catalogCommandOptions.deleteCatalogCommandOptions);\n+  private void delete() throws CatalogException, URISyntaxException {\n+    validateConfiguration(catalogCommandOptions.deleteCatalogCommandOptions);\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager()\n-                .loginAsAdmin(catalogCommandOptions.deleteCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager()\n+        .loginAsAdmin(catalogCommandOptions.deleteCatalogCommandOptions.commonOptions.adminPassword).getToken();\n \n-        logger.info(\"\\nDeleting database {} from {}\\n\", catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase()\n-                .getHosts());\n-        catalogManager.deleteCatalogDB(token);\n-    }\n+    logger.info(\"\\nDeleting database {} from {}\\n\", catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase()\n+        .getHosts());\n+    catalogManager.deleteCatalogDB(token);\n+  }\n \n-    private void index() throws CatalogException {\n-        validateConfiguration(catalogCommandOptions.indexCatalogCommandOptions);\n+  private void index() throws CatalogException {\n+    validateConfiguration(catalogCommandOptions.indexCatalogCommandOptions);\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager()\n-                .loginAsAdmin(catalogCommandOptions.indexCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager()\n+        .loginAsAdmin(catalogCommandOptions.indexCatalogCommandOptions.commonOptions.adminPassword).getToken();\n \n-        logger.info(\"\\nChecking and installing non-existing indexes in {} in {}\\n\",\n-                catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase().getHosts());\n+    logger.info(\"\\nChecking and installing non-existing indexes in {} in {}\\n\",\n+        catalogManager.getCatalogDatabase(), configuration.getCatalog().getDatabase().getHosts());\n \n-        catalogManager.installIndexes(token);\n-    }\n+    catalogManager.installIndexes(token);\n+  }\n \n-    private void daemons() throws Exception {\n-        validateConfiguration(catalogCommandOptions.daemonCatalogCommandOptions);\n+  private void daemons() throws Exception {\n+    validateConfiguration(catalogCommandOptions.daemonCatalogCommandOptions);\n \n-        CatalogManager catalogManager = new CatalogManager(configuration);\n-        String token = catalogManager.getUserManager()\n-                .loginAsAdmin(catalogCommandOptions.daemonCatalogCommandOptions.commonOptions.adminPassword).getToken();\n+    CatalogManager catalogManager = new CatalogManager(configuration);\n+    String token = catalogManager.getUserManager()\n+        .loginAsAdmin(catalogCommandOptions.daemonCatalogCommandOptions.commonOptions.adminPassword).getToken();\n \n-        if (catalogCommandOptions.daemonCatalogCommandOptions.start) {\n-            // Server crated and started\n-            MonitorService monitorService =\n-                    new MonitorService(configuration, appHome, token);\n-            monitorService.start();\n-            monitorService.blockUntilShutdown();\n-            logger.info(\"Shutting down OpenCGA Storage REST server\");\n-        }\n+    if (catalogCommandOptions.daemonCatalogCommandOptions.start) {\n+      // Server crated and started\n+      MonitorService monitorService =\n+          new MonitorService(configuration, appHome, token);\n+      monitorService.start();\n+      monitorService.blockUntilShutdown();\n+      logger.info(\"Shutting down OpenCGA Storage REST server\");\n+    }\n \n-        if (catalogCommandOptions.daemonCatalogCommandOptions.stop) {\n-            Client client = ClientBuilder.newClient();\n-            WebTarget target = client.target(\"http://localhost:\" + configuration.getMonitor().getPort())\n-                    .path(\"opencga\")\n-                    .path(\"monitor\")\n-                    .path(\"admin\")\n-                    .path(\"stop\");\n-            Response response = target.request().get();\n-            logger.info(response.toString());\n-        }\n+    if (catalogCommandOptions.daemonCatalogCommandOptions.stop) {\n+      Client client = ClientBuilder.newClient();\n+      WebTarget target = client.target(\"http://localhost:\" + configuration.getMonitor().getPort())\n+          .path(\"opencga\")\n+          .path(\"monitor\")\n+          .path(\"admin\")\n+          .path(\"stop\");\n+      Response response = target.request().get();\n+      logger.info(response.toString());\n     }\n+  }\n \n-    private void validateConfiguration(AdminCliOptionsParser.CatalogDatabaseCommandOptions catalogOptions) {\n-        if (catalogOptions.databaseUser != null) {\n-            configuration.getCatalog().getDatabase().setUser(catalogOptions.databaseUser);\n-        }\n-        if (catalogOptions.databasePassword != null) {\n-            configuration.getCatalog().getDatabase().setPassword(catalogOptions.databasePassword);\n-        }\n-        if (catalogOptions.prefix != null) {\n-            configuration.setDatabasePrefix(catalogOptions.prefix);\n-        }\n-        if (catalogOptions.databaseHost != null) {\n-            configuration.getCatalog().getDatabase().setHosts(Collections.singletonList(catalogOptions.databaseHost));\n-        }\n+  private void validateConfiguration(AdminCliOptionsParser.CatalogDatabaseCommandOptions catalogOptions) {\n+    if (catalogOptions.databaseUser != null) {\n+      configuration.getCatalog().getDatabase().setUser(catalogOptions.databaseUser);\n+    }\n+    if (catalogOptions.databasePassword != null) {\n+      configuration.getCatalog().getDatabase().setPassword(catalogOptions.databasePassword);\n+    }\n+    if (catalogOptions.prefix != null) {\n+      configuration.setDatabasePrefix(catalogOptions.prefix);\n+    }\n+    if (catalogOptions.databaseHost != null) {\n+      configuration.getCatalog().getDatabase().setHosts(Collections.singletonList(catalogOptions.databaseHost));\n     }\n+  }\n }\n",
            "diff_size": 223
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "error",
                    "message": "Line matches the illegal pattern 'Trailing whitespace'.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/3/CatalogCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/3/CatalogCommandExecutor.java\nindex 98911f137f1..deb71cddbd4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/3/CatalogCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/3/CatalogCommandExecutor.java\n@@ -15,8 +15,6 @@\n  */\n \n package org.opencb.opencga.app.cli.admin.executors;\n-\n-\n import com.fasterxml.jackson.core.JsonProcessingException;\n import org.apache.commons.lang3.RandomStringUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -126,10 +124,8 @@ public class CatalogCommandExecutor extends AdminCommandExecutor {\n             if (catalogManager.existsCatalogDB()) {\n                 result.put(\"installed\", true);\n \n-//                // check login\n-//                catalogManager.getUserManager().loginAsAdmin(commandOptions.commonOptions.adminPassword);\n-\n-                MongoDBAdaptorFactory factory = new MongoDBAdaptorFactory(configuration);\n+// \n+MongoDBAdaptorFactory factory = new MongoDBAdaptorFactory(configuration);\n                 MongoDBCollection metaCollection = factory.getMongoDBCollectionMap().get(MongoDBAdaptorFactory.METADATA_COLLECTION);\n                 Document metaDocument = metaCollection.find(new Document(), QueryOptions.empty()).first();\n \n@@ -263,4 +259,4 @@ public class CatalogCommandExecutor extends AdminCommandExecutor {\n             configuration.getCatalog().getDatabase().setHosts(Collections.singletonList(catalogOptions.databaseHost));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "98",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "98",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/3/CatalogCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/3/CatalogCommandExecutor.java\nindex 98911f137f1..f17b5ae9361 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/3/CatalogCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/3/CatalogCommandExecutor.java\n@@ -94,8 +94,10 @@ public class CatalogCommandExecutor extends AdminCommandExecutor {\n         String token = catalogManager.getUserManager().loginAsAdmin(adminPassword).getToken();\n \n         if (StringUtils.isNotEmpty(commandOptions.project)) {\n-            catalogManager.getProjectManager().exportReleases(commandOptions.project, commandOptions.release, commandOptions.outputDir, token);\n-        } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n+            catalogManager.getProjectManager().exportReleases\n+            ( commandOptions.project, commandOptions .release,\n+        commandOptions .outputDir, token);\n+         } else if (StringUtils.isNotEmpty(commandOptions.study) && StringUtils.isNotEmpty(commandOptions.inputFile)) {\n             catalogManager.getProjectManager().exportByFileNames(commandOptions.study, Paths.get(commandOptions.outputDir).toFile(),\n                     Paths.get(commandOptions.inputFile).toFile(), token);\n         }\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}