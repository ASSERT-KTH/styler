{
    "project_name": "opencb-opencga",
    "error_id": "230",
    "information": {
        "errors": [
            {
                "line": "37",
                "column": "128",
                "severity": "error",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "\n    public static final String ID = \"sample-qc\";\n    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\" +\n            \"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n\n    public  static final String VARIANT_STATS_STEP = \"variant-stats\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "38",
                    "column": "14",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/230/SampleQcAnalysis.java\nindex e2b2eada972..fe2ea77e099 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/230/SampleQcAnalysis.java\n@@ -34,8 +34,8 @@ import java.util.Map;\n public class SampleQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"sample-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\" +\n-            \"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\"\n+            +\"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n \n     public  static final String VARIANT_STATS_STEP = \"variant-stats\";\n     public  static final String FASTQC_STEP = \"fastqc\";\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "37",
                    "column": "126",
                    "severity": "error",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/230/SampleQcAnalysis.java\nindex e2b2eada972..38753d27bb1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/230/SampleQcAnalysis.java\n@@ -33,198 +33,198 @@ import java.util.Map;\n @Tool(id = SampleQcAnalysis.ID, resource = Enums.Resource.SAMPLE, description = SampleQcAnalysis.DESCRIPTION)\n public class SampleQcAnalysis extends OpenCgaTool {\n \n-    public static final String ID = \"sample-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\" +\n-            \"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n-\n-    public  static final String VARIANT_STATS_STEP = \"variant-stats\";\n-    public  static final String FASTQC_STEP = \"fastqc\";\n-    public  static final String HS_METRICS_STEP = \"hs-metrics\";\n-    public  static final String FLAG_STATS_STEP = \"flag-stats\";\n-    public  static final String GENE_COVERAGE_STEP = \"gene-coverage-stats\";\n-    public  static final String MUTATIONAL_SIGNATUR_STEP = \"mutational-signature\";\n-\n-    private String studyId;\n-    private String sampleId;\n-    private String bamFile;\n-    private String fastaFile;\n-    private String baitFile;\n-    private String targetFile;\n-    private String variantStatsId;\n-    private String variantStatsDecription;\n-    private Map<String, String> variantStatsQuery;\n-    private String signatureId;\n-    private Map<String, String> signatureQuery;\n-    private List<String> genesForCoverageStats;\n-\n-    private Sample sample;\n-\n-    @Override\n-    protected void check() throws Exception {\n-        super.check();\n-        setUpStorageEngineExecutor(studyId);\n-\n-        if (StringUtils.isEmpty(studyId)) {\n-            throw new ToolException(\"Missing study ID.\");\n-        }\n-\n-        try {\n-            studyId = catalogManager.getStudyManager().get(studyId, null, token).first().getFqn();\n-        } catch (CatalogException e) {\n-            throw new ToolException(e);\n-        }\n-\n-        // Sanity check\n-        if (StringUtils.isEmpty(sampleId)) {\n-            throw new ToolException(\"Missing sample ID.\");\n-        }\n-\n-        sample = IndividualQcUtils.getValidSampleById(studyId, sampleId, catalogManager, token);\n-        if (sample == null) {\n-            throw new ToolException(\"Sample '\" + sampleId + \"' not found.\");\n-        }\n-\n-    }\n-\n-    @Override\n-    protected List<String> getSteps() {\n-        return Arrays.asList(VARIANT_STATS_STEP, FASTQC_STEP, FLAG_STATS_STEP, HS_METRICS_STEP, GENE_COVERAGE_STEP,\n-                MUTATIONAL_SIGNATUR_STEP);\n-    }\n-\n-    @Override\n-    protected void run() throws ToolException {\n-\n-        SampleQcAnalysisExecutor executor = getToolExecutor(SampleQcAnalysisExecutor.class);\n-\n-        // Set up executor\n-        executor.setStudyId(studyId)\n-                .setSample(sample)\n-                .setBamFile(bamFile)\n-                .setFastaFile(fastaFile)\n-                .setBaitFile(baitFile)\n-                .setTargetFile(targetFile)\n-                .setVariantStatsId(variantStatsId)\n-                .setVariantStatsDecription(variantStatsDecription)\n-                .setVariantStatsQuery(variantStatsQuery)\n-                .setSignatureId(signatureId)\n-                .setSignatureQuery(signatureQuery)\n-                .setGenesForCoverageStats(genesForCoverageStats);\n-\n-        // Step by step\n-        step(VARIANT_STATS_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.VARIAN_STATS).execute());\n-        step(FASTQC_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.FASTQC).execute());\n-        step(FLAG_STATS_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.FLAG_STATS).execute());\n-        step(HS_METRICS_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.HS_METRICS).execute());\n-        step(GENE_COVERAGE_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.GENE_COVERAGE_STATS).execute());\n-        step(MUTATIONAL_SIGNATUR_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.MUTATIONAL_SIGNATURE).execute());\n-    }\n-\n-    public String getStudyId() {\n-        return studyId;\n-    }\n-\n-    public SampleQcAnalysis setStudyId(String studyId) {\n-        this.studyId = studyId;\n-        return this;\n-    }\n-\n-    public String getSampleId() {\n-        return sampleId;\n-    }\n-\n-    public SampleQcAnalysis setSampleId(String sampleId) {\n-        this.sampleId = sampleId;\n-        return this;\n-    }\n-\n-    public String getBamFile() {\n-        return bamFile;\n-    }\n-\n-    public SampleQcAnalysis setBamFile(String bamFile) {\n-        this.bamFile = bamFile;\n-        return this;\n-    }\n-\n-    public String getFastaFile() {\n-        return fastaFile;\n-    }\n-\n-    public SampleQcAnalysis setFastaFile(String fastaFile) {\n-        this.fastaFile = fastaFile;\n-        return this;\n-    }\n-\n-    public String getBaitFile() {\n-        return baitFile;\n-    }\n-\n-    public SampleQcAnalysis setBaitFile(String baitFile) {\n-        this.baitFile = baitFile;\n-        return this;\n-    }\n-\n-    public String getTargetFile() {\n-        return targetFile;\n-    }\n-\n-    public SampleQcAnalysis setTargetFile(String targetFile) {\n-        this.targetFile = targetFile;\n-        return this;\n-    }\n-\n-    public String getVariantStatsId() {\n-        return variantStatsId;\n-    }\n-\n-    public SampleQcAnalysis setVariantStatsId(String variantStatsId) {\n-        this.variantStatsId = variantStatsId;\n-        return this;\n-    }\n-\n-    public String getVariantStatsDecription() {\n-        return variantStatsDecription;\n-    }\n-\n-    public SampleQcAnalysis setVariantStatsDecription(String variantStatsDecription) {\n-        this.variantStatsDecription = variantStatsDecription;\n-        return this;\n-    }\n-\n-    public Map<String, String> getVariantStatsQuery() {\n-        return variantStatsQuery;\n-    }\n-\n-    public SampleQcAnalysis setVariantStatsQuery(Map<String, String> variantStatsQuery) {\n-        this.variantStatsQuery = variantStatsQuery;\n-        return this;\n-    }\n-\n-    public String getSignatureId() {\n-        return signatureId;\n-    }\n-\n-    public SampleQcAnalysis setSignatureId(String signatureId) {\n-        this.signatureId = signatureId;\n-        return this;\n-    }\n-\n-    public Map<String, String> getSignatureQuery() {\n-        return signatureQuery;\n-    }\n-\n-    public SampleQcAnalysis setSignatureQuery(Map<String, String> signatureQuery) {\n-        this.signatureQuery = signatureQuery;\n-        return this;\n-    }\n-\n-    public List<String> getGenesForCoverageStats() {\n-        return genesForCoverageStats;\n-    }\n-\n-    public SampleQcAnalysis setGenesForCoverageStats(List<String> genesForCoverageStats) {\n-        this.genesForCoverageStats = genesForCoverageStats;\n-        return this;\n-    }\n+  public static final String ID = \"sample-qc\";\n+  public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\" +\n+      \"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n+\n+  public static final String VARIANT_STATS_STEP = \"variant-stats\";\n+  public static final String FASTQC_STEP = \"fastqc\";\n+  public static final String HS_METRICS_STEP = \"hs-metrics\";\n+  public static final String FLAG_STATS_STEP = \"flag-stats\";\n+  public static final String GENE_COVERAGE_STEP = \"gene-coverage-stats\";\n+  public static final String MUTATIONAL_SIGNATUR_STEP = \"mutational-signature\";\n+\n+  private String studyId;\n+  private String sampleId;\n+  private String bamFile;\n+  private String fastaFile;\n+  private String baitFile;\n+  private String targetFile;\n+  private String variantStatsId;\n+  private String variantStatsDecription;\n+  private Map<String, String> variantStatsQuery;\n+  private String signatureId;\n+  private Map<String, String> signatureQuery;\n+  private List<String> genesForCoverageStats;\n+\n+  private Sample sample;\n+\n+  @Override\n+  protected void check() throws Exception {\n+    super.check();\n+    setUpStorageEngineExecutor(studyId);\n+\n+    if (StringUtils.isEmpty(studyId)) {\n+      throw new ToolException(\"Missing study ID.\");\n+    }\n+\n+    try {\n+      studyId = catalogManager.getStudyManager().get(studyId, null, token).first().getFqn();\n+    } catch (CatalogException e) {\n+      throw new ToolException(e);\n+    }\n+\n+    // Sanity check\n+    if (StringUtils.isEmpty(sampleId)) {\n+      throw new ToolException(\"Missing sample ID.\");\n+    }\n+\n+    sample = IndividualQcUtils.getValidSampleById(studyId, sampleId, catalogManager, token);\n+    if (sample == null) {\n+      throw new ToolException(\"Sample '\" + sampleId + \"' not found.\");\n+    }\n+\n+  }\n+\n+  @Override\n+  protected List<String> getSteps() {\n+    return Arrays.asList(VARIANT_STATS_STEP, FASTQC_STEP, FLAG_STATS_STEP, HS_METRICS_STEP, GENE_COVERAGE_STEP,\n+        MUTATIONAL_SIGNATUR_STEP);\n+  }\n+\n+  @Override\n+  protected void run() throws ToolException {\n+\n+    SampleQcAnalysisExecutor executor = getToolExecutor(SampleQcAnalysisExecutor.class);\n+\n+    // Set up executor\n+    executor.setStudyId(studyId)\n+        .setSample(sample)\n+        .setBamFile(bamFile)\n+        .setFastaFile(fastaFile)\n+        .setBaitFile(baitFile)\n+        .setTargetFile(targetFile)\n+        .setVariantStatsId(variantStatsId)\n+        .setVariantStatsDecription(variantStatsDecription)\n+        .setVariantStatsQuery(variantStatsQuery)\n+        .setSignatureId(signatureId)\n+        .setSignatureQuery(signatureQuery)\n+        .setGenesForCoverageStats(genesForCoverageStats);\n+\n+    // Step by step\n+    step(VARIANT_STATS_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.VARIAN_STATS).execute());\n+    step(FASTQC_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.FASTQC).execute());\n+    step(FLAG_STATS_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.FLAG_STATS).execute());\n+    step(HS_METRICS_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.HS_METRICS).execute());\n+    step(GENE_COVERAGE_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.GENE_COVERAGE_STATS).execute());\n+    step(MUTATIONAL_SIGNATUR_STEP, () -> executor.setQc(SampleQcAnalysisExecutor.Qc.MUTATIONAL_SIGNATURE).execute());\n+  }\n+\n+  public String getStudyId() {\n+    return studyId;\n+  }\n+\n+  public SampleQcAnalysis setStudyId(String studyId) {\n+    this.studyId = studyId;\n+    return this;\n+  }\n+\n+  public String getSampleId() {\n+    return sampleId;\n+  }\n+\n+  public SampleQcAnalysis setSampleId(String sampleId) {\n+    this.sampleId = sampleId;\n+    return this;\n+  }\n+\n+  public String getBamFile() {\n+    return bamFile;\n+  }\n+\n+  public SampleQcAnalysis setBamFile(String bamFile) {\n+    this.bamFile = bamFile;\n+    return this;\n+  }\n+\n+  public String getFastaFile() {\n+    return fastaFile;\n+  }\n+\n+  public SampleQcAnalysis setFastaFile(String fastaFile) {\n+    this.fastaFile = fastaFile;\n+    return this;\n+  }\n+\n+  public String getBaitFile() {\n+    return baitFile;\n+  }\n+\n+  public SampleQcAnalysis setBaitFile(String baitFile) {\n+    this.baitFile = baitFile;\n+    return this;\n+  }\n+\n+  public String getTargetFile() {\n+    return targetFile;\n+  }\n+\n+  public SampleQcAnalysis setTargetFile(String targetFile) {\n+    this.targetFile = targetFile;\n+    return this;\n+  }\n+\n+  public String getVariantStatsId() {\n+    return variantStatsId;\n+  }\n+\n+  public SampleQcAnalysis setVariantStatsId(String variantStatsId) {\n+    this.variantStatsId = variantStatsId;\n+    return this;\n+  }\n+\n+  public String getVariantStatsDecription() {\n+    return variantStatsDecription;\n+  }\n+\n+  public SampleQcAnalysis setVariantStatsDecription(String variantStatsDecription) {\n+    this.variantStatsDecription = variantStatsDecription;\n+    return this;\n+  }\n+\n+  public Map<String, String> getVariantStatsQuery() {\n+    return variantStatsQuery;\n+  }\n+\n+  public SampleQcAnalysis setVariantStatsQuery(Map<String, String> variantStatsQuery) {\n+    this.variantStatsQuery = variantStatsQuery;\n+    return this;\n+  }\n+\n+  public String getSignatureId() {\n+    return signatureId;\n+  }\n+\n+  public SampleQcAnalysis setSignatureId(String signatureId) {\n+    this.signatureId = signatureId;\n+    return this;\n+  }\n+\n+  public Map<String, String> getSignatureQuery() {\n+    return signatureQuery;\n+  }\n+\n+  public SampleQcAnalysis setSignatureQuery(Map<String, String> signatureQuery) {\n+    this.signatureQuery = signatureQuery;\n+    return this;\n+  }\n+\n+  public List<String> getGenesForCoverageStats() {\n+    return genesForCoverageStats;\n+  }\n+\n+  public SampleQcAnalysis setGenesForCoverageStats(List<String> genesForCoverageStats) {\n+    this.genesForCoverageStats = genesForCoverageStats;\n+    return this;\n+  }\n }\n",
            "diff_size": 194
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/230/SampleQcAnalysis.java\nindex e2b2eada972..9a65022bb86 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/230/SampleQcAnalysis.java\n@@ -34,10 +34,8 @@ import java.util.Map;\n public class SampleQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"sample-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\" +\n-            \"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n-\n-    public  static final String VARIANT_STATS_STEP = \"variant-stats\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\" + \"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n+public static final String VARIANT_STATS_STEP = \"variant-stats\";\n     public  static final String FASTQC_STEP = \"fastqc\";\n     public  static final String HS_METRICS_STEP = \"hs-metrics\";\n     public  static final String FLAG_STATS_STEP = \"flag-stats\";\n@@ -227,4 +225,4 @@ public class SampleQcAnalysis extends OpenCgaTool {\n         this.genesForCoverageStats = genesForCoverageStats;\n         return this;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "38",
                    "column": "14",
                    "severity": "error",
                    "message": "'+' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/230/SampleQcAnalysis.java\nindex e2b2eada972..fe2ea77e099 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/230/SampleQcAnalysis.java\n@@ -34,8 +34,8 @@ import java.util.Map;\n public class SampleQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"sample-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\" +\n-            \"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\"\n+            +\"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n \n     public  static final String VARIANT_STATS_STEP = \"variant-stats\";\n     public  static final String FASTQC_STEP = \"fastqc\";\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/230/SampleQcAnalysis.java\nindex e2b2eada972..cd072258ec6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/230/SampleQcAnalysis.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/230/SampleQcAnalysis.java\n@@ -34,8 +34,7 @@ import java.util.Map;\n public class SampleQcAnalysis extends OpenCgaTool {\n \n     public static final String ID = \"sample-qc\";\n-    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\" +\n-            \"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n+    public static final String DESCRIPTION = \"Run quality control (QC) for a given sample. It includes variant stats, FastQC,\" + \"samtools/flagstat, picard/CollectHsMetrics and gene coverage stats; and for somatic samples, mutational signature\";\n \n     public  static final String VARIANT_STATS_STEP = \"variant-stats\";\n     public  static final String FASTQC_STEP = \"fastqc\";\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}