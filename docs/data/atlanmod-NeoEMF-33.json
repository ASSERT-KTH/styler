{
    "project_name": "atlanmod-NeoEMF",
    "error_id": "33",
    "information": {
        "errors": [
            {
                "line": "96",
                "severity": "warning",
                "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "    protected final Converter<Id, Object> idConverter = Converter.from(\n            IdConverters.withLong()::convert,\n            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n\n    /**\n     * In-memory cache that holds recently loaded {@link Vertex}s, identified by the associated object {@link Id}.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/33/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/33/AbstractBlueprintsBackend.java\nindex f12d142544b..20173a55fc7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/33/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/intellij/33/AbstractBlueprintsBackend.java\n@@ -92,16 +92,16 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      */\n     @Nonnull\n     protected final Converter<Id, Object> idConverter = Converter.from(\n-            IdConverters.withLong()::convert,\n-            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n+        IdConverters.withLong()::convert,\n+        o -> IdConverters.withLong().revert(Long.class.cast(o)));\n \n     /**\n      * In-memory cache that holds recently loaded {@link Vertex}s, identified by the associated object {@link Id}.\n      */\n     @Nonnull\n     private final Cache<Id, Vertex> verticesCache = CacheBuilder.builder()\n-            .softValues()\n-            .build();\n+        .softValues()\n+        .build();\n \n     /**\n      * A set that holds indexed {@link ClassBean}.\n@@ -137,7 +137,6 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      * Constructs a new {@code AbstractBlueprintsBackend} wrapping the provided {@code baseGraph}.\n      *\n      * @param baseGraph the base {@link KeyIndexableGraph} used to access the database\n-     *\n      * @see BlueprintsBackendFactory\n      */\n     protected AbstractBlueprintsBackend(KeyIndexableGraph baseGraph) {\n@@ -155,7 +154,6 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      * Builds the {@link Id} used to identify a {@link ClassBean} {@link Vertex}.\n      *\n      * @param metaClass the {@link ClassBean} to build an {@link Id} from\n-     *\n      * @return the create {@link Id}\n      */\n     @Nonnull\n@@ -167,17 +165,15 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      * Retrieves the base graph of the {@code graph}.\n      *\n      * @param graph the graph from which to retrieve the base graph\n-     *\n      * @return the base graph of the {@code graph}, or {@code graph} is it is not a wrapper.\n-     *\n      * @see com.tinkerpop.blueprints.Features#isWrapper\n      * @see WrapperGraph\n      */\n     @Nonnull\n     private Graph getOrigin(Graph graph) {\n         return graph.getFeatures().isWrapper\n-                ? getOrigin(WrapperGraph.class.cast(graph).getBaseGraph())\n-                : graph;\n+            ? getOrigin(WrapperGraph.class.cast(graph).getBaseGraph())\n+            : graph;\n     }\n \n     /**\n@@ -185,7 +181,6 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      *\n      * @param feature the feature associated with the property\n      * @param suffix  the suffix of the property\n-     *\n      * @return the formatted property\n      */\n     @Nonnull\n@@ -197,28 +192,26 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      * Formats a label.\n      *\n      * @param feature the feature associated with the label\n-     *\n      * @return the formatted label\n      */\n     @Nonnull\n     protected String formatLabel(FeatureBean feature) {\n         return requireUniqueLabels\n-                // TODO Can cause a massive overhead (metaClassNameOf)\n-                ? metaClassNameOf(feature.owner()) + ':' + Integer.toString(feature.id())\n-                : Integer.toString(feature.id());\n+            // TODO Can cause a massive overhead (metaClassNameOf)\n+            ? metaClassNameOf(feature.owner()) + ':' + Integer.toString(feature.id())\n+            : Integer.toString(feature.id());\n     }\n \n     /**\n      * Retrieves or create an index for the given {@code name}.\n      *\n      * @param name the name of the index\n-     *\n      * @return the index\n      */\n     @Nonnull\n     private Index<Vertex> getOrCreateIndex(String name) {\n         return Optional.ofNullable(graph.getIndex(name, Vertex.class))\n-                .orElseGet(() -> graph.createIndex(name, Vertex.class));\n+            .orElseGet(() -> graph.createIndex(name, Vertex.class));\n     }\n \n     /**\n@@ -226,7 +219,6 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      *\n      * @param key    the key identifying the multi-valued feature\n      * @param vertex the related vertex; {@code vertex.id == key.id}\n-     *\n      * @return the size\n      */\n     @Nonnegative\n@@ -244,8 +236,7 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n     protected void sizeFor(SingleFeatureBean key, Vertex vertex, @Nonnegative int size) {\n         if (size > 0) {\n             vertex.setProperty(formatProperty(key, PROPERTY_SIZE), size);\n-        }\n-        else {\n+        } else {\n             vertex.removeProperty(formatProperty(key, PROPERTY_SIZE));\n         }\n     }\n@@ -254,8 +245,7 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n     public void save() {\n         if (graph.getFeatures().supportsTransactions) {\n             graph.commit();\n-        }\n-        else {\n+        } else {\n             graph.shutdown();\n         }\n     }\n@@ -291,9 +281,9 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n         final Vertex containmentVertex = optContainmentVertex.get();\n \n         return MoreIterables.onlyElement(containmentVertex.getEdges(Direction.OUT, EDGE_CONTAINER))\n-                .map(e -> SingleFeatureBean.of(\n-                        idConverter.revert(e.getVertex(Direction.IN).getId()),\n-                        e.getProperty(PROPERTY_CONTAINER_NAME)));\n+            .map(e -> SingleFeatureBean.of(\n+                idConverter.revert(e.getVertex(Direction.IN).getId()),\n+                e.getProperty(PROPERTY_CONTAINER_NAME)));\n     }\n \n     @Override\n@@ -334,9 +324,9 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n         final Vertex vertex = optVertex.get();\n \n         return MoreIterables.onlyElement(vertex.getVertices(Direction.OUT, EDGE_INSTANCE_OF))\n-                .map(v -> ClassBean.of(\n-                        v.getProperty(PROPERTY_INSTANCE_NAME),\n-                        v.getProperty(PROPERTY_INSTANCE_URI)));\n+            .map(v -> ClassBean.of(\n+                v.getProperty(PROPERTY_INSTANCE_NAME),\n+                v.getProperty(PROPERTY_INSTANCE_URI)));\n     }\n \n     @Override\n@@ -375,19 +365,18 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n     @Override\n     public Iterable<Id> allInstancesOf(Set<ClassBean> metaClasses) {\n         return metaClasses.stream()\n-                .map(mc -> metaClassIndex.get(PROPERTY_INSTANCE_NAME, mc.name()))\n-                .flatMap(MoreIterables::stream)\n-                .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n-                .flatMap(MoreIterables::stream)\n-                .map(v -> idConverter.revert(v.getId()))\n-                .collect(Collectors.toSet());\n+            .map(mc -> metaClassIndex.get(PROPERTY_INSTANCE_NAME, mc.name()))\n+            .flatMap(MoreIterables::stream)\n+            .map(mcv -> mcv.getVertices(Direction.IN, EDGE_INSTANCE_OF))\n+            .flatMap(MoreIterables::stream)\n+            .map(v -> idConverter.revert(v.getId()))\n+            .collect(Collectors.toSet());\n     }\n \n     /**\n      * Returns the name of the meta-class of the specified {@code id}.\n      *\n      * @param id the identifier\n-     *\n      * @return the name of the meta-class\n      */\n     @Nonnull\n@@ -400,7 +389,6 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      * Retrieves the {@link Vertex} corresponding to the provided {@code id}.\n      *\n      * @param id the {@link Id} of the element to find\n-     *\n      * @return an {@link Optional} containing the {@link Vertex}, or {@link Optional#empty()} if it doesn't exist\n      */\n     @Nonnull\n@@ -413,14 +401,13 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      * created.\n      *\n      * @param id the {@link Id} of the element to find, or create\n-     *\n      * @return the {@link Vertex}\n      */\n     @Nonnull\n     protected Vertex getOrCreate(Id id) {\n         return verticesCache.get(id, i ->\n-                Optional.ofNullable(graph.getVertex(idConverter.convert(i)))\n-                        .orElseGet(() -> graph.addVertex(idConverter.convert(i))));\n+            Optional.ofNullable(graph.getVertex(idConverter.convert(i)))\n+                .orElseGet(() -> graph.addVertex(idConverter.convert(i))));\n     }\n \n     /**\n@@ -467,13 +454,12 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n          * Creates a new {@link SmartIdEdge} from another {@link Edge}.\n          *\n          * @param edge the base edge\n-         *\n          * @return an {@link SmartIdEdge}\n          */\n         private Edge createFrom(@Nullable Edge edge) {\n             return Optional.ofNullable(edge)\n-                    .map(SmartIdEdge::new)\n-                    .orElse(null);\n+                .map(SmartIdEdge::new)\n+                .orElse(null);\n         }\n \n         /**\n",
            "diff_size": 42
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/33/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/33/AbstractBlueprintsBackend.java\nindex f12d142544b..8a8f127c072 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/33/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/naturalize/33/AbstractBlueprintsBackend.java\n@@ -92,8 +92,7 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n      */\n     @Nonnull\n     protected final Converter<Id, Object> idConverter = Converter.from(\n-            IdConverters.withLong()::convert,\n-            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n+            IdConverters.withLong()::convert, o -> IdConverters.withLong().revert(Long.class.cast(o)));\n \n     /**\n      * In-memory cache that holds recently loaded {@link Vertex}s, identified by the associated object {@link Id}.\n@@ -509,4 +508,4 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'lambda arguments' has incorrect indentation level 12, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "97",
                    "severity": "warning",
                    "message": "'o' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/33/AbstractBlueprintsBackend.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/33/AbstractBlueprintsBackend.java\nindex f12d142544b..d2aa1261d9a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/errored/1/33/AbstractBlueprintsBackend.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/atlanmod-NeoEMF/styler_three_grams/33/AbstractBlueprintsBackend.java\n@@ -93,7 +93,11 @@ abstract class AbstractBlueprintsBackend extends AbstractBackend implements Blue\n     @Nonnull\n     protected final Converter<Id, Object> idConverter = Converter.from(\n             IdConverters.withLong()::convert,\n-            o -> IdConverters.withLong().revert(Long.class.cast(o)));\n+\n+    o -> IdConverters.withLong().revert(Long.class.cast(o\n+\n+            )\n+            ));\n \n     /**\n      * In-memory cache that holds recently loaded {@link Vertex}s, identified by the associated object {@link Id}.\n",
            "diff_size": 5
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}