{
    "project_name": "moquette-io-moquette",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "114",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 129).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        // See: https://github.com/netty/netty/issues/143\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Initializing autoflush handler on channel {} Cid: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n        }\n        switch (state) {\n            case 1:",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler/19/AutoFlushHandler.java\nindex e2ef93c829a..542de8602ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler/19/AutoFlushHandler.java\n@@ -111,9 +111,10 @@ public class AutoFlushHandler extends ChannelDuplexHandler {\n         // Avoid the case where destroy() is called before scheduling timeouts.\n         // See: https://github.com/netty/netty/issues/143\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Initializing autoflush handler on channel {} Cid: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n-        }\n-        switch (state) {\n+            LOG.debug(\"Initializing autoflush handler on channel {} Cid: {}\",\n+            ctx.channel(), NettyUtils.clientID(ctx.channel()));\n+         }\n+         switch (state) {\n             case 1:\n             case 2:\n                 return;\n",
            "diff_size": 4
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/19/AutoFlushHandler.java\nindex e2ef93c829a..60af4d25797 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/intellij/19/AutoFlushHandler.java\n@@ -31,161 +31,160 @@ import java.util.concurrent.TimeUnit;\n  */\n public class AutoFlushHandler extends ChannelDuplexHandler {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(AutoFlushHandler.class);\n-    private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n+  private static final Logger LOG = LoggerFactory.getLogger(AutoFlushHandler.class);\n+  private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n \n-    private final long writerIdleTimeNanos;\n-    volatile ScheduledFuture<?> writerIdleTimeout;\n-    volatile long lastWriteTime;\n-    // private boolean firstWriterIdleEvent = true;\n+  private final long writerIdleTimeNanos;\n+  volatile ScheduledFuture<?> writerIdleTimeout;\n+  volatile long lastWriteTime;\n+  // private boolean firstWriterIdleEvent = true;\n \n-    private volatile int state; // 0 - none, 1 - initialized, 2 - destroyed\n+  private volatile int state; // 0 - none, 1 - initialized, 2 - destroyed\n \n-    public AutoFlushHandler(long writerIdleTime, TimeUnit unit) {\n-        if (unit == null) {\n-            throw new NullPointerException(\"unit\");\n-        }\n-        writerIdleTimeNanos = Math.max(unit.toNanos(writerIdleTime), MIN_TIMEOUT_NANOS);\n-    }\n-\n-    @Override\n-    public void handlerAdded(ChannelHandlerContext ctx) {\n-        if (ctx.channel().isActive() && ctx.channel().isRegistered()) {\n-            // channelActive() event has been fired already, which means this.channelActive() will\n-            // not be invoked. We have to initialize here instead.\n-            initialize(ctx);\n-        } else {\n-            // channelActive() event has not been fired yet. this.channelActive() will be invoked\n-            // and initialization will occur there.\n-        }\n+  public AutoFlushHandler(long writerIdleTime, TimeUnit unit) {\n+    if (unit == null) {\n+      throw new NullPointerException(\"unit\");\n     }\n-\n-    @Override\n-    public void handlerRemoved(ChannelHandlerContext ctx) {\n-        destroy();\n+    writerIdleTimeNanos = Math.max(unit.toNanos(writerIdleTime), MIN_TIMEOUT_NANOS);\n+  }\n+\n+  @Override\n+  public void handlerAdded(ChannelHandlerContext ctx) {\n+    if (ctx.channel().isActive() && ctx.channel().isRegistered()) {\n+      // channelActive() event has been fired already, which means this.channelActive() will\n+      // not be invoked. We have to initialize here instead.\n+      initialize(ctx);\n+    } else {\n+      // channelActive() event has not been fired yet. this.channelActive() will be invoked\n+      // and initialization will occur there.\n     }\n-\n-    @Override\n-    public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n-        // Initialize early if channel is active already.\n-        if (ctx.channel().isActive()) {\n-            initialize(ctx);\n-        }\n-        super.channelRegistered(ctx);\n+  }\n+\n+  @Override\n+  public void handlerRemoved(ChannelHandlerContext ctx) {\n+    destroy();\n+  }\n+\n+  @Override\n+  public void channelRegistered(ChannelHandlerContext ctx) throws Exception {\n+    // Initialize early if channel is active already.\n+    if (ctx.channel().isActive()) {\n+      initialize(ctx);\n     }\n-\n-    @Override\n-    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n-        // This method will be invoked only if this handler was added\n-        // before channelActive() event is fired. If a user adds this handler\n-        // after the channelActive() event, initialize() will be called by beforeAdd().\n-        initialize(ctx);\n-        super.channelActive(ctx);\n+    super.channelRegistered(ctx);\n+  }\n+\n+  @Override\n+  public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+    // This method will be invoked only if this handler was added\n+    // before channelActive() event is fired. If a user adds this handler\n+    // after the channelActive() event, initialize() will be called by beforeAdd().\n+    initialize(ctx);\n+    super.channelActive(ctx);\n+  }\n+\n+  @Override\n+  public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n+    destroy();\n+    super.channelInactive(ctx);\n+  }\n+\n+  // @Override\n+  // public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+  // if (writerrIdleTimeNanos > 0) {\n+  // reading = true;\n+  // firstReaderIdleEvent = true;\n+  // }\n+  // ctx.fireChannelRead(msg);\n+  // }\n+  //\n+  // @Override\n+  // public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n+  // if (writerrIdleTimeNanos > 0) {\n+  // lastReadTime = System.nanoTime();\n+  // reading = false;\n+  // }\n+  // ctx.fireChannelReadComplete();\n+  // }\n+\n+  private void initialize(ChannelHandlerContext ctx) {\n+    // Avoid the case where destroy() is called before scheduling timeouts.\n+    // See: https://github.com/netty/netty/issues/143\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Initializing autoflush handler on channel {} Cid: {}\", ctx.channel(),\n+          NettyUtils.clientID(ctx.channel()));\n     }\n-\n-    @Override\n-    public void channelInactive(ChannelHandlerContext ctx) throws Exception {\n-        destroy();\n-        super.channelInactive(ctx);\n+    switch (state) {\n+      case 1:\n+      case 2:\n+        return;\n     }\n \n-    // @Override\n-    // public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n-    // if (writerrIdleTimeNanos > 0) {\n-    // reading = true;\n-    // firstReaderIdleEvent = true;\n-    // }\n-    // ctx.fireChannelRead(msg);\n-    // }\n-    //\n-    // @Override\n-    // public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {\n-    // if (writerrIdleTimeNanos > 0) {\n-    // lastReadTime = System.nanoTime();\n-    // reading = false;\n-    // }\n-    // ctx.fireChannelReadComplete();\n-    // }\n-\n-    private void initialize(ChannelHandlerContext ctx) {\n-        // Avoid the case where destroy() is called before scheduling timeouts.\n-        // See: https://github.com/netty/netty/issues/143\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Initializing autoflush handler on channel {} Cid: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n-        }\n-        switch (state) {\n-            case 1:\n-            case 2:\n-                return;\n-        }\n-\n-        state = 1;\n+    state = 1;\n \n-        EventExecutor loop = ctx.executor();\n+    EventExecutor loop = ctx.executor();\n \n-        lastWriteTime = System.nanoTime();\n-        writerIdleTimeout = loop.schedule(new WriterIdleTimeoutTask(ctx), writerIdleTimeNanos, TimeUnit.NANOSECONDS);\n-    }\n+    lastWriteTime = System.nanoTime();\n+    writerIdleTimeout = loop.schedule(new WriterIdleTimeoutTask(ctx), writerIdleTimeNanos, TimeUnit.NANOSECONDS);\n+  }\n \n-    private void destroy() {\n-        state = 2;\n+  private void destroy() {\n+    state = 2;\n \n-        if (writerIdleTimeout != null) {\n-            writerIdleTimeout.cancel(false);\n-            writerIdleTimeout = null;\n-        }\n+    if (writerIdleTimeout != null) {\n+      writerIdleTimeout.cancel(false);\n+      writerIdleTimeout = null;\n     }\n-\n-    /**\n-     * Is called when the write timeout expire.\n-     *\n-     * @param ctx\n-     *            the channel context.\n-     * @throws Exception\n-     *             in case of any IO error.\n-     */\n-    protected void channelIdle(ChannelHandlerContext ctx/* , IdleStateEvent evt */) {\n-        // ctx.fireUserEventTriggered(evt);\n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Flushing idle Netty channel {} Cid: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n-        }\n-        ctx.channel().flush();\n+  }\n+\n+  /**\n+   * Is called when the write timeout expire.\n+   *\n+   * @param ctx the channel context.\n+   * @throws Exception in case of any IO error.\n+   */\n+  protected void channelIdle(ChannelHandlerContext ctx/* , IdleStateEvent evt */) {\n+    // ctx.fireUserEventTriggered(evt);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Flushing idle Netty channel {} Cid: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n     }\n+    ctx.channel().flush();\n+  }\n \n-    private final class WriterIdleTimeoutTask implements Runnable {\n+  private final class WriterIdleTimeoutTask implements Runnable {\n \n-        private final ChannelHandlerContext ctx;\n+    private final ChannelHandlerContext ctx;\n \n-        WriterIdleTimeoutTask(ChannelHandlerContext ctx) {\n-            this.ctx = ctx;\n-        }\n+    WriterIdleTimeoutTask(ChannelHandlerContext ctx) {\n+      this.ctx = ctx;\n+    }\n \n-        @Override\n-        public void run() {\n-            if (!ctx.channel().isOpen()) {\n-                return;\n-            }\n-\n-            // long lastWriteTime = IdleStateHandler.this.lastWriteTime;\n-            // long lastWriteTime = lastWriteTime;\n-            long nextDelay = writerIdleTimeNanos - (System.nanoTime() - lastWriteTime);\n-            if (nextDelay <= 0) {\n-                // Writer is idle - set a new timeout and notify the callback.\n-                writerIdleTimeout = ctx.executor().schedule(this, writerIdleTimeNanos, TimeUnit.NANOSECONDS);\n-                try {\n-                    /*\n-                     * IdleStateEvent event; if (firstWriterIdleEvent) { firstWriterIdleEvent =\n-                     * false; event = IdleStateEvent.FIRST_WRITER_IDLE_STATE_EVENT; } else { event =\n-                     * IdleStateEvent.WRITER_IDLE_STATE_EVENT; }\n-                     */\n-                    channelIdle(ctx/* , event */);\n-                } catch (Throwable t) {\n-                    ctx.fireExceptionCaught(t);\n-                }\n-            } else {\n-                // Write occurred before the timeout - set a new timeout with shorter delay.\n-                writerIdleTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);\n-            }\n+    @Override\n+    public void run() {\n+      if (!ctx.channel().isOpen()) {\n+        return;\n+      }\n+\n+      // long lastWriteTime = IdleStateHandler.this.lastWriteTime;\n+      // long lastWriteTime = lastWriteTime;\n+      long nextDelay = writerIdleTimeNanos - (System.nanoTime() - lastWriteTime);\n+      if (nextDelay <= 0) {\n+        // Writer is idle - set a new timeout and notify the callback.\n+        writerIdleTimeout = ctx.executor().schedule(this, writerIdleTimeNanos, TimeUnit.NANOSECONDS);\n+        try {\n+          /*\n+           * IdleStateEvent event; if (firstWriterIdleEvent) { firstWriterIdleEvent =\n+           * false; event = IdleStateEvent.FIRST_WRITER_IDLE_STATE_EVENT; } else { event =\n+           * IdleStateEvent.WRITER_IDLE_STATE_EVENT; }\n+           */\n+          channelIdle(ctx/* , event */);\n+        } catch (Throwable t) {\n+          ctx.fireExceptionCaught(t);\n         }\n+      } else {\n+        // Write occurred before the timeout - set a new timeout with shorter delay.\n+        writerIdleTimeout = ctx.executor().schedule(this, nextDelay, TimeUnit.NANOSECONDS);\n+      }\n     }\n+  }\n }\n",
            "diff_size": 189
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/19/AutoFlushHandler.java\nindex e2ef93c829a..c14b995afda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/naturalize/19/AutoFlushHandler.java\n@@ -188,4 +188,4 @@ public class AutoFlushHandler extends ChannelDuplexHandler {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "30",
                    "severity": "warning",
                    "message": "two or more consecutive empty lines",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "two or more consecutive empty lines",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "an empty line before }",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpMultilineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/19/AutoFlushHandler.java\nindex e2ef93c829a..4938181cd5a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/codebuff/19/AutoFlushHandler.java\n@@ -29,16 +29,16 @@ import java.util.concurrent.TimeUnit;\n  * specialized version, just flushing data after no read is done on the channel after a period. It's\n  * used to avoid aggressively flushing from the ProtocolProcessor.\n  */\n+\n+\n public class AutoFlushHandler extends ChannelDuplexHandler {\n \n     private static final Logger LOG = LoggerFactory.getLogger(AutoFlushHandler.class);\n     private static final long MIN_TIMEOUT_NANOS = TimeUnit.MILLISECONDS.toNanos(1);\n-\n     private final long writerIdleTimeNanos;\n     volatile ScheduledFuture<?> writerIdleTimeout;\n     volatile long lastWriteTime;\n     // private boolean firstWriterIdleEvent = true;\n-\n     private volatile int state; // 0 - none, 1 - initialized, 2 - destroyed\n \n     public AutoFlushHandler(long writerIdleTime, TimeUnit unit) {\n@@ -57,6 +57,8 @@ public class AutoFlushHandler extends ChannelDuplexHandler {\n         } else {\n             // channelActive() event has not been fired yet. this.channelActive() will be invoked\n             // and initialization will occur there.\n+\n+\n         }\n     }\n \n@@ -111,25 +113,23 @@ public class AutoFlushHandler extends ChannelDuplexHandler {\n         // Avoid the case where destroy() is called before scheduling timeouts.\n         // See: https://github.com/netty/netty/issues/143\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Initializing autoflush handler on channel {} Cid: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n+            LOG.debug(\"Initializing autoflush handler on channel {} Cid: {}\",\n+                ctx.channel(),\n+                NettyUtils.clientID(ctx.channel()));\n         }\n         switch (state) {\n             case 1:\n             case 2:\n                 return;\n         }\n-\n         state = 1;\n-\n         EventExecutor loop = ctx.executor();\n-\n         lastWriteTime = System.nanoTime();\n         writerIdleTimeout = loop.schedule(new WriterIdleTimeoutTask(ctx), writerIdleTimeNanos, TimeUnit.NANOSECONDS);\n     }\n \n     private void destroy() {\n         state = 2;\n-\n         if (writerIdleTimeout != null) {\n             writerIdleTimeout.cancel(false);\n             writerIdleTimeout = null;\n@@ -144,6 +144,7 @@ public class AutoFlushHandler extends ChannelDuplexHandler {\n      * @throws Exception\n      *             in case of any IO error.\n      */\n+\n     protected void channelIdle(ChannelHandlerContext ctx/* , IdleStateEvent evt */) {\n         // ctx.fireUserEventTriggered(evt);\n         if (LOG.isDebugEnabled()) {\n@@ -168,6 +169,7 @@ public class AutoFlushHandler extends ChannelDuplexHandler {\n \n             // long lastWriteTime = IdleStateHandler.this.lastWriteTime;\n             // long lastWriteTime = lastWriteTime;\n+\n             long nextDelay = writerIdleTimeNanos - (System.nanoTime() - lastWriteTime);\n             if (nextDelay <= 0) {\n                 // Writer is idle - set a new timeout and notify the callback.\n@@ -188,4 +190,4 @@ public class AutoFlushHandler extends ChannelDuplexHandler {\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "114",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_three_grams/19/AutoFlushHandler.java\nindex e2ef93c829a..542de8602ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/errored/1/19/AutoFlushHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/moquette-io-moquette/styler_three_grams/19/AutoFlushHandler.java\n@@ -111,9 +111,10 @@ public class AutoFlushHandler extends ChannelDuplexHandler {\n         // Avoid the case where destroy() is called before scheduling timeouts.\n         // See: https://github.com/netty/netty/issues/143\n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Initializing autoflush handler on channel {} Cid: {}\", ctx.channel(), NettyUtils.clientID(ctx.channel()));\n-        }\n-        switch (state) {\n+            LOG.debug(\"Initializing autoflush handler on channel {} Cid: {}\",\n+            ctx.channel(), NettyUtils.clientID(ctx.channel()));\n+         }\n+         switch (state) {\n             case 1:\n             case 2:\n                 return;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}