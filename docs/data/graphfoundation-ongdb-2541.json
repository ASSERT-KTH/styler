{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2541",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "63",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "126",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "262",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2541/GlobalSessionTrackerState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2541/GlobalSessionTrackerState.java\nindex 9b71aac06f3..f075b20050f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2541/GlobalSessionTrackerState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2541/GlobalSessionTrackerState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.replication.session;\n \n import java.io.IOException;\n@@ -37,247 +38,245 @@ import org.neo4j.storageengine.api.WritableChannel;\n  */\n public class GlobalSessionTrackerState\n {\n-    /**\n-     * Each owner can only have one local session tracker, identified by the unique global session ID.\n-     */\n-    private Map<MemberId, LocalSessionTracker> sessionTrackers = new HashMap<>();\n-\n-    private long logIndex = -1L;\n-\n-    /**\n-     * Tracks the operation and returns true iff this operation should be allowed.\n-     */\n-    public boolean validateOperation( GlobalSession globalSession, LocalOperationId localOperationId )\n+  /**\n+   * Each owner can only have one local session tracker, identified by the unique global session ID.\n+   */\n+  private Map<MemberId, LocalSessionTracker> sessionTrackers = new HashMap<>();\n+\n+  private long logIndex = -1L;\n+\n+  /**\n+   * Tracks the operation and returns true iff this operation should be allowed.\n+   */\n+  public boolean validateOperation(GlobalSession globalSession, LocalOperationId localOperationId)\n+  {\n+    LocalSessionTracker existingSessionTracker = sessionTrackers.get(globalSession.owner());\n+    if (isNewSession(globalSession, existingSessionTracker))\n     {\n-        LocalSessionTracker existingSessionTracker = sessionTrackers.get( globalSession.owner() );\n-        if ( isNewSession( globalSession, existingSessionTracker ) )\n-        {\n-            return isFirstOperation( localOperationId );\n-        }\n-        else\n-        {\n-            return existingSessionTracker.isValidOperation( localOperationId );\n-        }\n+      return isFirstOperation(localOperationId);\n+    } else\n+    {\n+      return existingSessionTracker.isValidOperation(localOperationId);\n     }\n-\n-    public void update( GlobalSession globalSession, LocalOperationId localOperationId, long logIndex )\n+  }\n+\n+  public void update(GlobalSession globalSession, LocalOperationId localOperationId, long logIndex)\n+  {\n+    LocalSessionTracker localSessionTracker = validateGlobalSessionAndGetLocalSessionTracker(globalSession);\n+    localSessionTracker.validateAndTrackOperation(localOperationId);\n+    this.logIndex = logIndex;\n+  }\n+\n+  private boolean isNewSession(GlobalSession globalSession, LocalSessionTracker existingSessionTracker)\n+  {\n+    return existingSessionTracker == null ||\n+        !existingSessionTracker.globalSessionId.equals(globalSession.sessionId());\n+  }\n+\n+  private boolean isFirstOperation(LocalOperationId id)\n+  {\n+    return id.sequenceNumber() == 0;\n+  }\n+\n+  public long logIndex()\n+  {\n+    return logIndex;\n+  }\n+\n+  private LocalSessionTracker validateGlobalSessionAndGetLocalSessionTracker(GlobalSession globalSession)\n+  {\n+    LocalSessionTracker localSessionTracker = sessionTrackers.get(globalSession.owner());\n+\n+    if (localSessionTracker == null ||\n+        !localSessionTracker.globalSessionId.equals(globalSession.sessionId()))\n     {\n-        LocalSessionTracker localSessionTracker = validateGlobalSessionAndGetLocalSessionTracker( globalSession );\n-        localSessionTracker.validateAndTrackOperation( localOperationId );\n-        this.logIndex = logIndex;\n+      localSessionTracker = new LocalSessionTracker(globalSession.sessionId(), new HashMap<>());\n+      sessionTrackers.put(globalSession.owner(), localSessionTracker);\n     }\n \n-    private boolean isNewSession( GlobalSession globalSession, LocalSessionTracker existingSessionTracker )\n+    return localSessionTracker;\n+  }\n+\n+  public GlobalSessionTrackerState newInstance()\n+  {\n+    GlobalSessionTrackerState copy = new GlobalSessionTrackerState();\n+    copy.logIndex = logIndex;\n+    for (Map.Entry<MemberId, LocalSessionTracker> entry : sessionTrackers.entrySet())\n     {\n-        return existingSessionTracker == null ||\n-                !existingSessionTracker.globalSessionId.equals( globalSession.sessionId() );\n+      copy.sessionTrackers.put(entry.getKey(), entry.getValue().newInstance());\n     }\n+    return copy;\n+  }\n \n-    private boolean isFirstOperation( LocalOperationId id )\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n     {\n-        return id.sequenceNumber() == 0;\n+      return true;\n     }\n-\n-    public long logIndex()\n+    if (o == null || getClass() != o.getClass())\n+    {\n+      return false;\n+    }\n+    GlobalSessionTrackerState that = (GlobalSessionTrackerState) o;\n+    return logIndex == that.logIndex &&\n+        Objects.equals(sessionTrackers, that.sessionTrackers);\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return Objects.hash(sessionTrackers, logIndex);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return String.format(\"GlobalSessionTrackerState{sessionTrackers=%s, logIndex=%d}\", sessionTrackers, logIndex);\n+  }\n+\n+  public static class Marshal extends SafeStateMarshal<GlobalSessionTrackerState>\n+  {\n+    private final ChannelMarshal<MemberId> memberMarshal;\n+\n+    public Marshal(ChannelMarshal<MemberId> marshal)\n     {\n-        return logIndex;\n+      this.memberMarshal = marshal;\n     }\n \n-    private LocalSessionTracker validateGlobalSessionAndGetLocalSessionTracker( GlobalSession globalSession )\n+    @Override\n+    public void marshal(GlobalSessionTrackerState target, WritableChannel channel)\n+        throws IOException\n     {\n-        LocalSessionTracker localSessionTracker = sessionTrackers.get( globalSession.owner() );\n+      final Map<MemberId, LocalSessionTracker> sessionTrackers = target.sessionTrackers;\n \n-        if ( localSessionTracker == null ||\n-                !localSessionTracker.globalSessionId.equals( globalSession.sessionId() ) )\n-        {\n-            localSessionTracker = new LocalSessionTracker( globalSession.sessionId(), new HashMap<>() );\n-            sessionTrackers.put( globalSession.owner(), localSessionTracker );\n-        }\n+      channel.putLong(target.logIndex);\n+      channel.putInt(sessionTrackers.size());\n \n-        return localSessionTracker;\n-    }\n+      for (Map.Entry<MemberId, LocalSessionTracker> entry : sessionTrackers.entrySet())\n+      {\n+        memberMarshal.marshal(entry.getKey(), channel);\n+        final LocalSessionTracker localSessionTracker = entry.getValue();\n \n-    public GlobalSessionTrackerState newInstance()\n-    {\n-        GlobalSessionTrackerState copy = new GlobalSessionTrackerState();\n-        copy.logIndex = logIndex;\n-        for ( Map.Entry<MemberId,LocalSessionTracker> entry : sessionTrackers.entrySet() )\n+        final UUID uuid = localSessionTracker.globalSessionId;\n+        channel.putLong(uuid.getMostSignificantBits());\n+        channel.putLong(uuid.getLeastSignificantBits());\n+\n+        final Map<Long, Long> map = localSessionTracker.lastSequenceNumberPerSession;\n+\n+        channel.putInt(map.size());\n+\n+        for (Map.Entry<Long, Long> sessionSequence : map.entrySet())\n         {\n-            copy.sessionTrackers.put( entry.getKey(), entry.getValue().newInstance() );\n+          channel.putLong(sessionSequence.getKey());\n+          channel.putLong(sessionSequence.getValue());\n         }\n-        return copy;\n+      }\n     }\n \n     @Override\n-    public boolean equals( Object o )\n+    public GlobalSessionTrackerState unmarshal0(ReadableChannel channel) throws IOException, EndOfStreamException\n     {\n-        if ( this == o )\n+      final long logIndex = channel.getLong();\n+      final int sessionTrackerSize = channel.getInt();\n+      final Map<MemberId, LocalSessionTracker> sessionTrackers = new HashMap<>();\n+\n+      for (int i = 0; i < sessionTrackerSize; i++)\n+      {\n+        final MemberId member = memberMarshal.unmarshal(channel);\n+        if (member == null)\n         {\n-            return true;\n+          throw new IllegalStateException(\"Null member\");\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+        long mostSigBits = channel.getLong();\n+        long leastSigBits = channel.getLong();\n+        UUID globalSessionId = new UUID(mostSigBits, leastSigBits);\n+\n+        final int localSessionTrackerSize = channel.getInt();\n+        final Map<Long, Long> lastSequenceNumberPerSession = new HashMap<>();\n+        for (int j = 0; j < localSessionTrackerSize; j++)\n         {\n-            return false;\n+          long localSessionId = channel.getLong();\n+          long sequenceNumber = channel.getLong();\n+          lastSequenceNumberPerSession.put(localSessionId, sequenceNumber);\n         }\n-        GlobalSessionTrackerState that = (GlobalSessionTrackerState) o;\n-        return logIndex == that.logIndex &&\n-                Objects.equals( sessionTrackers, that.sessionTrackers );\n+        final LocalSessionTracker localSessionTracker = new LocalSessionTracker(globalSessionId, lastSequenceNumberPerSession);\n+        sessionTrackers.put(member, localSessionTracker);\n+      }\n+      GlobalSessionTrackerState result = new GlobalSessionTrackerState();\n+      result.sessionTrackers = sessionTrackers;\n+      result.logIndex = logIndex;\n+      return result;\n     }\n \n     @Override\n-    public int hashCode()\n+    public GlobalSessionTrackerState startState()\n     {\n-        return Objects.hash( sessionTrackers, logIndex );\n+      return new GlobalSessionTrackerState();\n     }\n \n     @Override\n-    public String toString()\n+    public long ordinal(GlobalSessionTrackerState state)\n     {\n-        return String.format( \"GlobalSessionTrackerState{sessionTrackers=%s, logIndex=%d}\", sessionTrackers, logIndex );\n+      return state.logIndex();\n     }\n+  }\n \n-    public static class Marshal extends SafeStateMarshal<GlobalSessionTrackerState>\n-    {\n-        private final ChannelMarshal<MemberId> memberMarshal;\n-\n-        public Marshal( ChannelMarshal<MemberId> marshal )\n-        {\n-            this.memberMarshal = marshal;\n-        }\n-\n-        @Override\n-        public void marshal( GlobalSessionTrackerState target, WritableChannel channel )\n-                throws IOException\n-        {\n-            final Map<MemberId, LocalSessionTracker> sessionTrackers = target.sessionTrackers;\n-\n-            channel.putLong( target.logIndex );\n-            channel.putInt( sessionTrackers.size() );\n-\n-            for ( Map.Entry<MemberId, LocalSessionTracker> entry : sessionTrackers.entrySet() )\n-            {\n-                memberMarshal.marshal( entry.getKey(), channel );\n-                final LocalSessionTracker localSessionTracker = entry.getValue();\n-\n-                final UUID uuid = localSessionTracker.globalSessionId;\n-                channel.putLong( uuid.getMostSignificantBits() );\n-                channel.putLong( uuid.getLeastSignificantBits() );\n-\n-                final Map<Long, Long> map = localSessionTracker.lastSequenceNumberPerSession;\n-\n-                channel.putInt( map.size() );\n+  private static class LocalSessionTracker\n+  {\n+    final UUID globalSessionId;\n+    final Map<Long, Long> lastSequenceNumberPerSession; /* localSessionId -> lastSequenceNumber */\n \n-                for ( Map.Entry<Long, Long> sessionSequence : map.entrySet() )\n-                {\n-                    channel.putLong( sessionSequence.getKey() );\n-                    channel.putLong( sessionSequence.getValue() );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public GlobalSessionTrackerState unmarshal0( ReadableChannel channel ) throws IOException, EndOfStreamException\n-        {\n-            final long logIndex = channel.getLong();\n-            final int sessionTrackerSize = channel.getInt();\n-            final Map<MemberId, LocalSessionTracker> sessionTrackers = new HashMap<>();\n-\n-            for ( int i = 0; i < sessionTrackerSize; i++ )\n-            {\n-                final MemberId member = memberMarshal.unmarshal( channel );\n-                if ( member == null )\n-                {\n-                    throw new IllegalStateException( \"Null member\" );\n-                }\n-\n-                long mostSigBits = channel.getLong();\n-                long leastSigBits = channel.getLong();\n-                UUID globalSessionId = new UUID( mostSigBits, leastSigBits );\n-\n-                final int localSessionTrackerSize = channel.getInt();\n-                final Map<Long, Long> lastSequenceNumberPerSession = new HashMap<>();\n-                for ( int j = 0; j < localSessionTrackerSize; j++ )\n-                {\n-                    long localSessionId = channel.getLong();\n-                    long sequenceNumber = channel.getLong();\n-                    lastSequenceNumberPerSession.put( localSessionId, sequenceNumber );\n-                }\n-                final LocalSessionTracker localSessionTracker = new LocalSessionTracker( globalSessionId, lastSequenceNumberPerSession );\n-                sessionTrackers.put( member, localSessionTracker );\n-            }\n-            GlobalSessionTrackerState result = new GlobalSessionTrackerState();\n-            result.sessionTrackers = sessionTrackers;\n-            result.logIndex = logIndex;\n-            return result;\n-        }\n+    LocalSessionTracker(UUID globalSessionId, Map<Long, Long> lastSequenceNumberPerSession)\n+    {\n+      this.globalSessionId = globalSessionId;\n+      this.lastSequenceNumberPerSession = lastSequenceNumberPerSession;\n+    }\n \n-        @Override\n-        public GlobalSessionTrackerState startState()\n-        {\n-            return new GlobalSessionTrackerState();\n-        }\n+    boolean validateAndTrackOperation(LocalOperationId operationId)\n+    {\n+      if (!isValidOperation(operationId))\n+      {\n+        return false;\n+      }\n \n-        @Override\n-        public long ordinal( GlobalSessionTrackerState state )\n-        {\n-            return state.logIndex();\n-        }\n+      lastSequenceNumberPerSession.put(operationId.localSessionId(), operationId.sequenceNumber());\n+      return true;\n     }\n \n-    private static class LocalSessionTracker\n+    /**\n+     * The sequence numbers under a single local session must come strictly in order and are only valid once only.\n+     */\n+    private boolean isValidOperation(LocalOperationId operationId)\n     {\n-        final UUID globalSessionId;\n-        final Map<Long,Long> lastSequenceNumberPerSession; /* localSessionId -> lastSequenceNumber */\n+      Long lastSequenceNumber = lastSequenceNumberPerSession.get(operationId.localSessionId());\n \n-        LocalSessionTracker( UUID globalSessionId, Map<Long,Long> lastSequenceNumberPerSession )\n+      if (lastSequenceNumber == null)\n+      {\n+        if (operationId.sequenceNumber() != 0)\n         {\n-            this.globalSessionId = globalSessionId;\n-            this.lastSequenceNumberPerSession = lastSequenceNumberPerSession;\n-        }\n-\n-        boolean validateAndTrackOperation( LocalOperationId operationId )\n-        {\n-            if ( !isValidOperation( operationId ) )\n-            {\n-                return false;\n-            }\n-\n-            lastSequenceNumberPerSession.put( operationId.localSessionId(), operationId.sequenceNumber() );\n-            return true;\n+          return false;\n         }\n+      } else if (operationId.sequenceNumber() != lastSequenceNumber + 1)\n+      {\n+        return false;\n+      }\n \n-        /**\n-         * The sequence numbers under a single local session must come strictly in order and are only valid once only.\n-         */\n-        private boolean isValidOperation( LocalOperationId operationId )\n-        {\n-            Long lastSequenceNumber = lastSequenceNumberPerSession.get( operationId.localSessionId() );\n-\n-            if ( lastSequenceNumber == null )\n-            {\n-                if ( operationId.sequenceNumber() != 0 )\n-                {\n-                    return false;\n-                }\n-            }\n-            else if ( operationId.sequenceNumber() != lastSequenceNumber + 1 )\n-            {\n-                return false;\n-            }\n-\n-            return true;\n-        }\n+      return true;\n+    }\n \n-        public LocalSessionTracker newInstance()\n-        {\n-            return new LocalSessionTracker( globalSessionId, new HashMap<>( lastSequenceNumberPerSession ) );\n-        }\n+    public LocalSessionTracker newInstance()\n+    {\n+      return new LocalSessionTracker(globalSessionId, new HashMap<>(lastSequenceNumberPerSession));\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return String.format( \"LocalSessionTracker{globalSessionId=%s, lastSequenceNumberPerSession=%s}\",\n-                    globalSessionId, lastSequenceNumberPerSession );\n-        }\n+    @Override\n+    public String toString()\n+    {\n+      return String.format(\"LocalSessionTracker{globalSessionId=%s, lastSequenceNumberPerSession=%s}\",\n+          globalSessionId, lastSequenceNumberPerSession);\n     }\n+  }\n }\n",
            "diff_size": 303
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "125",
                    "column": "42",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2541/GlobalSessionTrackerState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2541/GlobalSessionTrackerState.java\nindex 9b71aac06f3..4b42fbcf3ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2541/GlobalSessionTrackerState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2541/GlobalSessionTrackerState.java\n@@ -40,7 +40,7 @@ public class GlobalSessionTrackerState\n     /**\n      * Each owner can only have one local session tracker, identified by the unique global session ID.\n      */\n-    private Map<MemberId, LocalSessionTracker> sessionTrackers = new HashMap<>();\n+    private Map<MemberId,LocalSessionTracker> sessionTrackers = new HashMap<>();\n \n     private long logIndex = -1L;\n \n@@ -86,8 +86,7 @@ public class GlobalSessionTrackerState\n     private LocalSessionTracker validateGlobalSessionAndGetLocalSessionTracker( GlobalSession globalSession )\n     {\n         LocalSessionTracker localSessionTracker = sessionTrackers.get( globalSession.owner() );\n-\n-        if ( localSessionTracker == null ||\n+if ( localSessionTracker == null ||\n                 !localSessionTracker.globalSessionId.equals( globalSession.sessionId() ) )\n         {\n             localSessionTracker = new LocalSessionTracker( globalSession.sessionId(), new HashMap<>() );\n@@ -105,7 +104,8 @@ public class GlobalSessionTrackerState\n         {\n             copy.sessionTrackers.put( entry.getKey(), entry.getValue().newInstance() );\n         }\n-        return copy;\n+\n+return copy;\n     }\n \n     @Override\n@@ -115,13 +115,14 @@ public class GlobalSessionTrackerState\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n-        GlobalSessionTrackerState that = (GlobalSessionTrackerState) o;\n-        return logIndex == that.logIndex &&\n-                Objects.equals( sessionTrackers, that.sessionTrackers );\n+\n+GlobalSessionTrackerState that = (GlobalSessionTrackerState) o;\n+        return logIndex == that.logIndex &&Objects.equals( sessionTrackers, that.sessionTrackers );\n     }\n \n     @Override\n@@ -146,15 +147,13 @@ public class GlobalSessionTrackerState\n         }\n \n         @Override\n-        public void marshal( GlobalSessionTrackerState target, WritableChannel channel )\n-                throws IOException\n-        {\n-            final Map<MemberId, LocalSessionTracker> sessionTrackers = target.sessionTrackers;\n+        public void marshal( GlobalSessionTrackerState target, WritableChannel channel ) throws IOException\n+{\n+            final Map<MemberId,LocalSessionTracker> sessionTrackers = target.sessionTrackers;\n \n             channel.putLong( target.logIndex );\n             channel.putInt( sessionTrackers.size() );\n-\n-            for ( Map.Entry<MemberId, LocalSessionTracker> entry : sessionTrackers.entrySet() )\n+for ( Map.Entry<MemberId,LocalSessionTracker> entry : sessionTrackers.entrySet() )\n             {\n                 memberMarshal.marshal( entry.getKey(), channel );\n                 final LocalSessionTracker localSessionTracker = entry.getValue();\n@@ -163,11 +162,10 @@ public class GlobalSessionTrackerState\n                 channel.putLong( uuid.getMostSignificantBits() );\n                 channel.putLong( uuid.getLeastSignificantBits() );\n \n-                final Map<Long, Long> map = localSessionTracker.lastSequenceNumberPerSession;\n+                final Map<Long,Long> map = localSessionTracker.lastSequenceNumberPerSession;\n \n                 channel.putInt( map.size() );\n-\n-                for ( Map.Entry<Long, Long> sessionSequence : map.entrySet() )\n+for ( Map.Entry<Long,Long> sessionSequence : map.entrySet() )\n                 {\n                     channel.putLong( sessionSequence.getKey() );\n                     channel.putLong( sessionSequence.getValue() );\n@@ -180,9 +178,8 @@ public class GlobalSessionTrackerState\n         {\n             final long logIndex = channel.getLong();\n             final int sessionTrackerSize = channel.getInt();\n-            final Map<MemberId, LocalSessionTracker> sessionTrackers = new HashMap<>();\n-\n-            for ( int i = 0; i < sessionTrackerSize; i++ )\n+            final Map<MemberId,LocalSessionTracker> sessionTrackers = new HashMap<>();\n+for ( int i = 0; i < sessionTrackerSize; i++ )\n             {\n                 final MemberId member = memberMarshal.unmarshal( channel );\n                 if ( member == null )\n@@ -195,7 +192,7 @@ public class GlobalSessionTrackerState\n                 UUID globalSessionId = new UUID( mostSigBits, leastSigBits );\n \n                 final int localSessionTrackerSize = channel.getInt();\n-                final Map<Long, Long> lastSequenceNumberPerSession = new HashMap<>();\n+                final Map<Long,Long> lastSequenceNumberPerSession = new HashMap<>();\n                 for ( int j = 0; j < localSessionTrackerSize; j++ )\n                 {\n                     long localSessionId = channel.getLong();\n@@ -205,7 +202,8 @@ public class GlobalSessionTrackerState\n                 final LocalSessionTracker localSessionTracker = new LocalSessionTracker( globalSessionId, lastSequenceNumberPerSession );\n                 sessionTrackers.put( member, localSessionTracker );\n             }\n-            GlobalSessionTrackerState result = new GlobalSessionTrackerState();\n+\n+GlobalSessionTrackerState result = new GlobalSessionTrackerState();\n             result.sessionTrackers = sessionTrackers;\n             result.logIndex = logIndex;\n             return result;\n@@ -252,8 +250,7 @@ public class GlobalSessionTrackerState\n         private boolean isValidOperation( LocalOperationId operationId )\n         {\n             Long lastSequenceNumber = lastSequenceNumberPerSession.get( operationId.localSessionId() );\n-\n-            if ( lastSequenceNumber == null )\n+if ( lastSequenceNumber == null )\n             {\n                 if ( operationId.sequenceNumber() != 0 )\n                 {\n@@ -278,6 +275,6 @@ public class GlobalSessionTrackerState\n         {\n             return String.format( \"LocalSessionTracker{globalSessionId=%s, lastSequenceNumberPerSession=%s}\",\n                     globalSessionId, lastSequenceNumberPerSession );\n-        }\n     }\n-}\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "column": "46",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "88",
                    "column": "41",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "101",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "118",
                    "column": "23",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "124",
                    "column": "41",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "154",
                    "column": "13",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "164",
                    "column": "17",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2541/GlobalSessionTrackerState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2541/GlobalSessionTrackerState.java\nindex 9b71aac06f3..3b3b8e7f694 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2541/GlobalSessionTrackerState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2541/GlobalSessionTrackerState.java\n@@ -24,7 +24,6 @@ import java.util.HashMap;\n import java.util.Map;\n import java.util.Objects;\n import java.util.UUID;\n-\n import org.neo4j.causalclustering.messaging.marshalling.ChannelMarshal;\n import org.neo4j.causalclustering.messaging.EndOfStreamException;\n import org.neo4j.causalclustering.core.state.storage.SafeStateMarshal;\n@@ -35,18 +34,19 @@ import org.neo4j.storageengine.api.WritableChannel;\n /**\n  * In memory implementation of {@link GlobalSessionTrackerState}.\n  */\n+\n public class GlobalSessionTrackerState\n {\n     /**\n      * Each owner can only have one local session tracker, identified by the unique global session ID.\n      */\n-    private Map<MemberId, LocalSessionTracker> sessionTrackers = new HashMap<>();\n-\n-    private long logIndex = -1L;\n+    private Map<MemberId,LocalSessionTracker> sessionTrackers = new HashMap<>();\n+    private long logIndex = - 1L;\n \n     /**\n      * Tracks the operation and returns true iff this operation should be allowed.\n      */\n+\n     public boolean validateOperation( GlobalSession globalSession, LocalOperationId localOperationId )\n     {\n         LocalSessionTracker existingSessionTracker = sessionTrackers.get( globalSession.owner() );\n@@ -69,8 +69,7 @@ public class GlobalSessionTrackerState\n \n     private boolean isNewSession( GlobalSession globalSession, LocalSessionTracker existingSessionTracker )\n     {\n-        return existingSessionTracker == null ||\n-                !existingSessionTracker.globalSessionId.equals( globalSession.sessionId() );\n+        return existingSessionTracker == null|| ! existingSessionTracker.globalSessionId.equals( globalSession.sessionId() );\n     }\n \n     private boolean isFirstOperation( LocalOperationId id )\n@@ -86,9 +85,7 @@ public class GlobalSessionTrackerState\n     private LocalSessionTracker validateGlobalSessionAndGetLocalSessionTracker( GlobalSession globalSession )\n     {\n         LocalSessionTracker localSessionTracker = sessionTrackers.get( globalSession.owner() );\n-\n-        if ( localSessionTracker == null ||\n-                !localSessionTracker.globalSessionId.equals( globalSession.sessionId() ) )\n+        if ( localSessionTracker == null|| ! localSessionTracker.globalSessionId.equals( globalSession.sessionId() ) )\n         {\n             localSessionTracker = new LocalSessionTracker( globalSession.sessionId(), new HashMap<>() );\n             sessionTrackers.put( globalSession.owner(), localSessionTracker );\n@@ -101,10 +98,12 @@ public class GlobalSessionTrackerState\n     {\n         GlobalSessionTrackerState copy = new GlobalSessionTrackerState();\n         copy.logIndex = logIndex;\n-        for ( Map.Entry<MemberId,LocalSessionTracker> entry : sessionTrackers.entrySet() )\n+        for( Map.Entry<MemberId,LocalSessionTracker> entry : sessionTrackers.entrySet()\n+        )\n         {\n             copy.sessionTrackers.put( entry.getKey(), entry.getValue().newInstance() );\n         }\n+\n         return copy;\n     }\n \n@@ -115,13 +114,14 @@ public class GlobalSessionTrackerState\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+        if ( o == null|| getClass() != o.getClass() )\n         {\n             return false;\n         }\n+\n         GlobalSessionTrackerState that = (GlobalSessionTrackerState) o;\n-        return logIndex == that.logIndex &&\n-                Objects.equals( sessionTrackers, that.sessionTrackers );\n+        return logIndex == that.logIndex&& Objects.equals( sessionTrackers, that.sessionTrackers );\n     }\n \n     @Override\n@@ -146,28 +146,23 @@ public class GlobalSessionTrackerState\n         }\n \n         @Override\n-        public void marshal( GlobalSessionTrackerState target, WritableChannel channel )\n-                throws IOException\n+        public void marshal( GlobalSessionTrackerState target, WritableChannel channel ) throws IOException\n         {\n-            final Map<MemberId, LocalSessionTracker> sessionTrackers = target.sessionTrackers;\n-\n+            final Map<MemberId,LocalSessionTracker> sessionTrackers = target.sessionTrackers;\n             channel.putLong( target.logIndex );\n             channel.putInt( sessionTrackers.size() );\n-\n-            for ( Map.Entry<MemberId, LocalSessionTracker> entry : sessionTrackers.entrySet() )\n+            for( Map.Entry<MemberId,LocalSessionTracker> entry : sessionTrackers.entrySet()\n+            )\n             {\n                 memberMarshal.marshal( entry.getKey(), channel );\n                 final LocalSessionTracker localSessionTracker = entry.getValue();\n-\n                 final UUID uuid = localSessionTracker.globalSessionId;\n                 channel.putLong( uuid.getMostSignificantBits() );\n                 channel.putLong( uuid.getLeastSignificantBits() );\n-\n-                final Map<Long, Long> map = localSessionTracker.lastSequenceNumberPerSession;\n-\n+                final Map<Long,Long> map = localSessionTracker.lastSequenceNumberPerSession;\n                 channel.putInt( map.size() );\n-\n-                for ( Map.Entry<Long, Long> sessionSequence : map.entrySet() )\n+                for( Map.Entry<Long,Long> sessionSequence : map.entrySet()\n+                )\n                 {\n                     channel.putLong( sessionSequence.getKey() );\n                     channel.putLong( sessionSequence.getValue() );\n@@ -180,8 +175,7 @@ public class GlobalSessionTrackerState\n         {\n             final long logIndex = channel.getLong();\n             final int sessionTrackerSize = channel.getInt();\n-            final Map<MemberId, LocalSessionTracker> sessionTrackers = new HashMap<>();\n-\n+            final Map<MemberId,LocalSessionTracker> sessionTrackers = new HashMap<>();\n             for ( int i = 0; i < sessionTrackerSize; i++ )\n             {\n                 final MemberId member = memberMarshal.unmarshal( channel );\n@@ -193,18 +187,19 @@ public class GlobalSessionTrackerState\n                 long mostSigBits = channel.getLong();\n                 long leastSigBits = channel.getLong();\n                 UUID globalSessionId = new UUID( mostSigBits, leastSigBits );\n-\n                 final int localSessionTrackerSize = channel.getInt();\n-                final Map<Long, Long> lastSequenceNumberPerSession = new HashMap<>();\n+                final Map<Long,Long> lastSequenceNumberPerSession = new HashMap<>();\n                 for ( int j = 0; j < localSessionTrackerSize; j++ )\n                 {\n                     long localSessionId = channel.getLong();\n                     long sequenceNumber = channel.getLong();\n                     lastSequenceNumberPerSession.put( localSessionId, sequenceNumber );\n                 }\n+\n                 final LocalSessionTracker localSessionTracker = new LocalSessionTracker( globalSessionId, lastSequenceNumberPerSession );\n                 sessionTrackers.put( member, localSessionTracker );\n             }\n+\n             GlobalSessionTrackerState result = new GlobalSessionTrackerState();\n             result.sessionTrackers = sessionTrackers;\n             result.logIndex = logIndex;\n@@ -237,7 +232,7 @@ public class GlobalSessionTrackerState\n \n         boolean validateAndTrackOperation( LocalOperationId operationId )\n         {\n-            if ( !isValidOperation( operationId ) )\n+            if ( ! isValidOperation( operationId ) )\n             {\n                 return false;\n             }\n@@ -249,10 +244,10 @@ public class GlobalSessionTrackerState\n         /**\n          * The sequence numbers under a single local session must come strictly in order and are only valid once only.\n          */\n+\n         private boolean isValidOperation( LocalOperationId operationId )\n         {\n             Long lastSequenceNumber = lastSequenceNumberPerSession.get( operationId.localSessionId() );\n-\n             if ( lastSequenceNumber == null )\n             {\n                 if ( operationId.sequenceNumber() != 0 )\n@@ -260,7 +255,8 @@ public class GlobalSessionTrackerState\n                     return false;\n                 }\n             }\n-            else if ( operationId.sequenceNumber() != lastSequenceNumber + 1 )\n+            else\n+            if ( operationId.sequenceNumber() != lastSequenceNumber + 1 )\n             {\n                 return false;\n             }\n@@ -276,8 +272,7 @@ public class GlobalSessionTrackerState\n         @Override\n         public String toString()\n         {\n-            return String.format( \"LocalSessionTracker{globalSessionId=%s, lastSequenceNumberPerSession=%s}\",\n-                    globalSessionId, lastSequenceNumberPerSession );\n+            return String.format( \"LocalSessionTracker{globalSessionId=%s, lastSequenceNumberPerSession=%s}\", globalSessionId, lastSequenceNumberPerSession );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}