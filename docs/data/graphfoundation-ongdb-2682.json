{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2682",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "80",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "95",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2682/RecordCheckWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2682/RecordCheckWorker.java\nindex ba31a77f00a..bce3cf583c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2682/RecordCheckWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2682/RecordCheckWorker.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.full;\n \n import java.util.concurrent.BlockingQueue;\n@@ -28,82 +29,80 @@ import java.util.concurrent.atomic.AtomicInteger;\n  */\n public class RecordCheckWorker<RECORD> implements Runnable\n {\n-    private volatile boolean done;\n-    protected final BlockingQueue<RECORD> recordsQ;\n-    private final int id;\n-    private final AtomicInteger idQueue;\n-    private final RecordProcessor<RECORD> processor;\n+  private volatile boolean done;\n+  protected final BlockingQueue<RECORD> recordsQ;\n+  private final int id;\n+  private final AtomicInteger idQueue;\n+  private final RecordProcessor<RECORD> processor;\n \n-    public RecordCheckWorker( int id, AtomicInteger idQueue, BlockingQueue<RECORD> recordsQ,\n-            RecordProcessor<RECORD> processor )\n-    {\n-        this.id = id;\n-        this.idQueue = idQueue;\n-        this.recordsQ = recordsQ;\n-        this.processor = processor;\n-    }\n+  public RecordCheckWorker(int id, AtomicInteger idQueue, BlockingQueue<RECORD> recordsQ,\n+                           RecordProcessor<RECORD> processor)\n+  {\n+    this.id = id;\n+    this.idQueue = idQueue;\n+    this.recordsQ = recordsQ;\n+    this.processor = processor;\n+  }\n \n-    public void done()\n-    {\n-        done = true;\n-    }\n+  public void done()\n+  {\n+    done = true;\n+  }\n \n-    @Override\n-    public void run()\n-    {\n-        // We assign threads to ids, first come first serve and the the thread assignment happens\n-        // inside the record processing which accesses CacheAccess#client() and that happens\n-        // lazily. So... we need to coordinate so that the processing threads initializes the processing\n-        // in order of thread id. This may change later so that the thread ids are assigned\n-        // explicitly on creating the threads... which should be much better, although hard with\n-        // the current design due to the state living inside ThreadLocal which makes it depend\n-        // on the actual and correct thread making the call... which is what we do here.\n-        awaitMyTurnToInitialize();\n+  @Override\n+  public void run()\n+  {\n+    // We assign threads to ids, first come first serve and the the thread assignment happens\n+    // inside the record processing which accesses CacheAccess#client() and that happens\n+    // lazily. So... we need to coordinate so that the processing threads initializes the processing\n+    // in order of thread id. This may change later so that the thread ids are assigned\n+    // explicitly on creating the threads... which should be much better, although hard with\n+    // the current design due to the state living inside ThreadLocal which makes it depend\n+    // on the actual and correct thread making the call... which is what we do here.\n+    awaitMyTurnToInitialize();\n \n-        // This was the first record, the first record processing has now happened and so we\n-        // can notify the others that we have initialized this thread id and the next one\n-        // can go ahead and do so.\n-        processor.init( id );\n-        tellNextThreadToInitialize();\n+    // This was the first record, the first record processing has now happened and so we\n+    // can notify the others that we have initialized this thread id and the next one\n+    // can go ahead and do so.\n+    processor.init(id);\n+    tellNextThreadToInitialize();\n \n-        while ( !done || !recordsQ.isEmpty() )\n-        {\n-            RECORD record;\n-            try\n-            {\n-                record = recordsQ.poll( 10, TimeUnit.MILLISECONDS );\n-                if ( record != null )\n-                {\n-                    processor.process( record );\n-                }\n-            }\n-            catch ( InterruptedException e )\n-            {\n-                Thread.interrupted();\n-                break;\n-            }\n-        }\n-    }\n-\n-    private void awaitMyTurnToInitialize()\n+    while (!done || !recordsQ.isEmpty())\n     {\n-        while ( idQueue.get() < id - 1 )\n+      RECORD record;\n+      try\n+      {\n+        record = recordsQ.poll(10, TimeUnit.MILLISECONDS);\n+        if (record != null)\n         {\n-            try\n-            {\n-                Thread.sleep( 10 );\n-            }\n-            catch ( InterruptedException e )\n-            {\n-                Thread.interrupted();\n-                break;\n-            }\n+          processor.process(record);\n         }\n+      } catch (InterruptedException e)\n+      {\n+        Thread.interrupted();\n+        break;\n+      }\n     }\n+  }\n \n-    private void tellNextThreadToInitialize()\n+  private void awaitMyTurnToInitialize()\n+  {\n+    while (idQueue.get() < id - 1)\n     {\n-        boolean set = idQueue.compareAndSet( id - 1, id );\n-        assert set : \"Something wrong with the design here\";\n+      try\n+      {\n+        Thread.sleep(10);\n+      } catch (InterruptedException e)\n+      {\n+        Thread.interrupted();\n+        break;\n+      }\n     }\n+  }\n+\n+  private void tellNextThreadToInitialize()\n+  {\n+    boolean set = idQueue.compareAndSet(id - 1, id);\n+    assert set : \"Something wrong with the design here\";\n+  }\n }\n",
            "diff_size": 92
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2682/RecordCheckWorker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2682/RecordCheckWorker.java\nindex ba31a77f00a..3c3e6e018b9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2682/RecordCheckWorker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2682/RecordCheckWorker.java\n@@ -34,8 +34,7 @@ public class RecordCheckWorker<RECORD> implements Runnable\n     private final AtomicInteger idQueue;\n     private final RecordProcessor<RECORD> processor;\n \n-    public RecordCheckWorker( int id, AtomicInteger idQueue, BlockingQueue<RECORD> recordsQ,\n-            RecordProcessor<RECORD> processor )\n+    public RecordCheckWorker( int id, AtomicInteger idQueue, BlockingQueue<RECORD> recordsQ, RecordProcessor<RECORD> processor )\n     {\n         this.id = id;\n         this.idQueue = idQueue;\n@@ -106,4 +105,4 @@ public class RecordCheckWorker<RECORD> implements Runnable\n         boolean set = idQueue.compareAndSet( id - 1, id );\n         assert set : \"Something wrong with the design here\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}