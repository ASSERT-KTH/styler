{
    "project_name": "wso2-attic-commons",
    "error_id": "502",
    "information": {
        "errors": [
            {
                "line": "38",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    @Override\n    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n\n\n        if (currentEvent != null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/502/FirstGroupByPerEventOutputRateManager.java\nindex 9b21ee29628..c5954cd76ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/502/FirstGroupByPerEventOutputRateManager.java\n@@ -35,8 +35,8 @@ public class FirstGroupByPerEventOutputRateManager extends OutputRateManager {\n     }\n \n     @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-\n+    public synchronized void send(long timeStamp, StreamEvent currentEvent,\n+            StreamEvent expiredEvent, String groupByKey) {\n \n         if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/502/FirstGroupByPerEventOutputRateManager.java\nindex 9b21ee29628..993eb979a72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/502/FirstGroupByPerEventOutputRateManager.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2013, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.output.ratelimit.event;\n \n import org.wso2.siddhi.core.event.ListEvent;\n@@ -25,71 +26,69 @@ import java.util.ArrayList;\n import java.util.List;\n \n public class FirstGroupByPerEventOutputRateManager extends OutputRateManager {\n-    private final Integer value;\n+  private final Integer value;\n \n-    private volatile int counter = 0;\n-    List<String> groupByKeys = new ArrayList<String>();\n+  private volatile int counter = 0;\n+  List<String> groupByKeys = new ArrayList<String>();\n \n-    public FirstGroupByPerEventOutputRateManager(Integer value) {\n-        this.value = value;\n-    }\n+  public FirstGroupByPerEventOutputRateManager(Integer value) {\n+    this.value = value;\n+  }\n \n-    @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n+  @Override\n+  public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n \n \n-        if (currentEvent != null) {\n-            if (currentEvent instanceof ListEvent) {\n-                for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n-                    if (!groupByKeys.contains(groupByKey)) {\n-                        groupByKeys.add(groupByKey);\n-                        StreamEvent event = ((ListEvent) currentEvent).getEvent(i);\n-                        sendToCallBacks(timeStamp, event, null, event);\n-                    }\n-                    if (++counter == value) {\n-                        counter = 0;\n-                        groupByKeys.clear();\n-                    }\n-                }\n-            } else {\n-                if (!groupByKeys.contains(groupByKey)) {\n-                    groupByKeys.add(groupByKey);\n-                    sendToCallBacks(timeStamp, currentEvent, null, currentEvent);\n-                }\n-                if (++counter == value) {\n-                    counter = 0;\n-                    groupByKeys.clear();\n-                }\n-            }\n+    if (currentEvent != null) {\n+      if (currentEvent instanceof ListEvent) {\n+        for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n+          if (!groupByKeys.contains(groupByKey)) {\n+            groupByKeys.add(groupByKey);\n+            StreamEvent event = ((ListEvent) currentEvent).getEvent(i);\n+            sendToCallBacks(timeStamp, event, null, event);\n+          }\n+          if (++counter == value) {\n+            counter = 0;\n+            groupByKeys.clear();\n+          }\n         }\n-\n-        if (expiredEvent != null)\n-\n-        {\n-            if (expiredEvent instanceof ListEvent) {\n-                for (int i = 0, size = ((ListEvent) expiredEvent).getActiveEvents(); i < size; i++) {\n-                    if (!groupByKeys.contains(groupByKey)) {\n-                        groupByKeys.add(groupByKey);\n-                        StreamEvent event = ((ListEvent) expiredEvent).getEvent(i);\n-                        sendToCallBacks(timeStamp, null, event, event);\n-                    }\n-                    if (++counter == value) {\n-                        counter = 0;\n-                        groupByKeys.clear();\n-                    }\n-                }\n-            } else {\n-                if (!groupByKeys.contains(groupByKey)) {\n-                    groupByKeys.add(groupByKey);\n-                    sendToCallBacks(timeStamp, null, expiredEvent, expiredEvent);\n-                }\n-                if (++counter == value) {\n-                    counter = 0;\n-                    groupByKeys.clear();\n-                }\n-            }\n+      } else {\n+        if (!groupByKeys.contains(groupByKey)) {\n+          groupByKeys.add(groupByKey);\n+          sendToCallBacks(timeStamp, currentEvent, null, currentEvent);\n+        }\n+        if (++counter == value) {\n+          counter = 0;\n+          groupByKeys.clear();\n         }\n+      }\n+    }\n \n+    if (expiredEvent != null) {\n+      if (expiredEvent instanceof ListEvent) {\n+        for (int i = 0, size = ((ListEvent) expiredEvent).getActiveEvents(); i < size; i++) {\n+          if (!groupByKeys.contains(groupByKey)) {\n+            groupByKeys.add(groupByKey);\n+            StreamEvent event = ((ListEvent) expiredEvent).getEvent(i);\n+            sendToCallBacks(timeStamp, null, event, event);\n+          }\n+          if (++counter == value) {\n+            counter = 0;\n+            groupByKeys.clear();\n+          }\n+        }\n+      } else {\n+        if (!groupByKeys.contains(groupByKey)) {\n+          groupByKeys.add(groupByKey);\n+          sendToCallBacks(timeStamp, null, expiredEvent, expiredEvent);\n+        }\n+        if (++counter == value) {\n+          counter = 0;\n+          groupByKeys.clear();\n+        }\n+      }\n     }\n \n+  }\n+\n }\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/502/FirstGroupByPerEventOutputRateManager.java\nindex 9b21ee29628..4b5dd8a6cd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/502/FirstGroupByPerEventOutputRateManager.java\n@@ -36,9 +36,7 @@ public class FirstGroupByPerEventOutputRateManager extends OutputRateManager {\n \n     @Override\n     public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-\n-\n-        if (currentEvent != null) {\n+    if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n                 for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n                     if (!groupByKeys.contains(groupByKey)) {\n@@ -63,9 +61,7 @@ public class FirstGroupByPerEventOutputRateManager extends OutputRateManager {\n             }\n         }\n \n-        if (expiredEvent != null)\n-\n-        {\n+        if (expiredEvent != null) {\n             if (expiredEvent instanceof ListEvent) {\n                 for (int i = 0, size = ((ListEvent) expiredEvent).getActiveEvents(); i < size; i++) {\n                     if (!groupByKeys.contains(groupByKey)) {\n@@ -92,4 +88,4 @@ public class FirstGroupByPerEventOutputRateManager extends OutputRateManager {\n \n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/502/FirstGroupByPerEventOutputRateManager.java\nindex 9b21ee29628..c3ae361e30b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/502/FirstGroupByPerEventOutputRateManager.java\n@@ -36,8 +36,6 @@ public class FirstGroupByPerEventOutputRateManager extends OutputRateManager {\n \n     @Override\n     public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-\n-\n         if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n                 for (int i = 0, size = ((ListEvent) currentEvent).getActiveEvents(); i < size; i++) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/502/FirstGroupByPerEventOutputRateManager.java\nindex 9b21ee29628..c5954cd76ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/502/FirstGroupByPerEventOutputRateManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/502/FirstGroupByPerEventOutputRateManager.java\n@@ -35,8 +35,8 @@ public class FirstGroupByPerEventOutputRateManager extends OutputRateManager {\n     }\n \n     @Override\n-    public synchronized void send(long timeStamp, StreamEvent currentEvent, StreamEvent expiredEvent, String groupByKey) {\n-\n+    public synchronized void send(long timeStamp, StreamEvent currentEvent,\n+            StreamEvent expiredEvent, String groupByKey) {\n \n         if (currentEvent != null) {\n             if (currentEvent instanceof ListEvent) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}