{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "34",
    "information": {
        "errors": [
            {
                "line": "134",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 121).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return a {@link JsonDocument}.\n     */\n    public static JsonDocument create(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {\n        return new JsonDocument(id, expiry, content, cas, mutationToken);\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/34/JsonDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/34/JsonDocument.java\nindex b08053019d6..6c2f859118c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/34/JsonDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/34/JsonDocument.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.couchbase.client.java.document;\n \n import com.couchbase.client.core.message.kv.MutationToken;\n@@ -25,19 +26,19 @@ import java.io.Serializable;\n \n /**\n  * Represents a {@link Document} that contains a {@link JsonObject} as the content.\n- *\n+ * <p>\n  * The {@link JsonDocument} is one of the most integral parts of the API. It is intended to be used as a canonical\n  * wrapper around retrieval and mutation operations, abstracting away JSON internals.\n- *\n+ * <p>\n  * Note that there is no public constructor available, but rather a multitude of factory methods that allow you to work\n  * nicely with this immutable value object. It is possible to construct empty/fresh ones, but also copies will be\n  * created from passed in documents, allowing you to override specific parts during the copy process.\n- *\n+ * <p>\n  * This document is interoperable with other SDKs.\n- *\n+ * <p>\n  * It can always be the case that some or all fields of a {@link JsonDocument} are not set, depending on the operation\n  * performed. Here are the accessible fields and their default values:\n- *\n+ * <p>\n  * +---------------+---------+\n  * | Field         | Default |\n  * +---------------+---------+\n@@ -69,7 +70,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n     /**\n      * Creates a {@link JsonDocument} which the document id and JSON content.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n      * @return a {@link JsonDocument}.\n      */\n@@ -80,9 +81,9 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n     /**\n      * Creates a {@link JsonDocument} which the document id, JSON content and the CAS value.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n      * @return a {@link JsonDocument}.\n      */\n     public static JsonDocument create(String id, JsonObject content, long cas) {\n@@ -92,9 +93,9 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n     /**\n      * Creates a {@link JsonDocument} which the document id, JSON content and the expiration time.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param expiry the expiration time of the document.\n+     * @param expiry  the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n     public static JsonDocument create(String id, int expiry, JsonObject content) {\n@@ -103,15 +104,15 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n \n     /**\n      * Creates a {@link JsonDocument} which the document id, JSON content, CAS value, expiration time and status code.\n-     *\n+     * <p>\n      * This factory method is normally only called within the client library when a response is analyzed and a document\n      * is returned which is enriched with the status code. It does not make sense to pre populate the status field from\n      * the user level code.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n-     * @param expiry the expiration time of the document.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n+     * @param expiry  the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n     public static JsonDocument create(String id, int expiry, JsonObject content, long cas) {\n@@ -120,18 +121,19 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n \n     /**\n      * Creates a {@link JsonDocument} which the document id, JSON content, CAS value, expiration time and status code.\n-     *\n+     * <p>\n      * This factory method is normally only called within the client library when a response is analyzed and a document\n      * is returned which is enriched with the status code. It does not make sense to pre populate the status field from\n      * the user level code.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n-     * @param expiry the expiration time of the document.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n+     * @param expiry  the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n-    public static JsonDocument create(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {\n+    public static JsonDocument create(String id, int expiry, JsonObject content, long cas,\n+                                      MutationToken mutationToken) {\n         return new JsonDocument(id, expiry, content, cas, mutationToken);\n     }\n \n@@ -139,7 +141,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * Creates a copy from a different {@link JsonDocument}, but changes the document ID.\n      *\n      * @param doc the original {@link JsonDocument} to copy.\n-     * @param id the per-bucket unique document id.\n+     * @param id  the per-bucket unique document id.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n     public static JsonDocument from(JsonDocument doc, String id) {\n@@ -149,7 +151,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n     /**\n      * Creates a copy from a different {@link JsonDocument}, but changes the content.\n      *\n-     * @param doc the original {@link JsonDocument} to copy.\n+     * @param doc     the original {@link JsonDocument} to copy.\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n@@ -160,8 +162,8 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n     /**\n      * Creates a copy from a different {@link JsonDocument}, but changes the document ID and content.\n      *\n-     * @param doc the original {@link JsonDocument} to copy.\n-     * @param id the per-bucket unique document id.\n+     * @param doc     the original {@link JsonDocument} to copy.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n@@ -183,10 +185,10 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n     /**\n      * Private constructor which is called by the static factory methods eventually.\n      *\n-     * @param id the per-bucket unique document id.\n+     * @param id      the per-bucket unique document id.\n      * @param content the content of the document.\n-     * @param cas the CAS (compare and swap) value for optimistic concurrency.\n-     * @param expiry the expiration time of the document.\n+     * @param cas     the CAS (compare and swap) value for optimistic concurrency.\n+     * @param expiry  the expiration time of the document.\n      */\n     private JsonDocument(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {\n         super(id, expiry, content, cas, mutationToken);\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/34/JsonDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/34/JsonDocument.java\nindex b08053019d6..579806309cc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/34/JsonDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/34/JsonDocument.java\n@@ -200,4 +200,4 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n         readFromSerializedStream(stream);\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/34/JsonDocument.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/34/JsonDocument.java\nindex b08053019d6..46345fe5bc3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/34/JsonDocument.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/34/JsonDocument.java\n@@ -17,7 +17,6 @@ package com.couchbase.client.java.document;\n \n import com.couchbase.client.core.message.kv.MutationToken;\n import com.couchbase.client.java.document.json.JsonObject;\n-\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n@@ -52,6 +51,8 @@ import java.io.Serializable;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n+\n+\n public class JsonDocument extends AbstractDocument<JsonObject> implements Serializable {\n \n     private static final long serialVersionUID = 2050104986260610101L;\n@@ -73,6 +74,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param content the content of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, JsonObject content) {\n         return new JsonDocument(id, 0, content, 0, null);\n     }\n@@ -85,6 +87,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, JsonObject content, long cas) {\n         return new JsonDocument(id, 0, content, cas, null);\n     }\n@@ -97,6 +100,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, int expiry, JsonObject content) {\n         return new JsonDocument(id, expiry, content, 0, null);\n     }\n@@ -114,6 +118,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, int expiry, JsonObject content, long cas) {\n         return new JsonDocument(id, expiry, content, cas, null);\n     }\n@@ -131,6 +136,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param expiry the expiration time of the document.\n      * @return a {@link JsonDocument}.\n      */\n+\n     public static JsonDocument create(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {\n         return new JsonDocument(id, expiry, content, cas, mutationToken);\n     }\n@@ -142,6 +148,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param id the per-bucket unique document id.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonDocument from(JsonDocument doc, String id) {\n         return JsonDocument.create(id, doc.expiry(), doc.content(), doc.cas(), doc.mutationToken());\n     }\n@@ -153,6 +160,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonDocument from(JsonDocument doc, JsonObject content) {\n         return JsonDocument.create(doc.id(), doc.expiry(), content, doc.cas(), doc.mutationToken());\n     }\n@@ -165,6 +173,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param content the content of the document.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonDocument from(JsonDocument doc, String id, JsonObject content) {\n         return JsonDocument.create(id, doc.expiry(), content, doc.cas(), doc.mutationToken());\n     }\n@@ -176,6 +185,7 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @return a copied {@link JsonDocument} with the changed properties.\n      */\n+\n     public static JsonDocument from(JsonDocument doc, long cas) {\n         return JsonDocument.create(doc.id(), doc.expiry(), doc.content(), cas, doc.mutationToken());\n     }\n@@ -188,6 +198,8 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n      * @param cas the CAS (compare and swap) value for optimistic concurrency.\n      * @param expiry the expiration time of the document.\n      */\n+\n+\n     private JsonDocument(String id, int expiry, JsonObject content, long cas, MutationToken mutationToken) {\n         super(id, expiry, content, cas, mutationToken);\n     }\n@@ -199,5 +211,4 @@ public class JsonDocument extends AbstractDocument<JsonObject> implements Serial\n     private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {\n         readFromSerializedStream(stream);\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 16
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "134",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}