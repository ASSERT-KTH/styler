{
    "project_name": "farao-community-farao-core",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "26",
                "column": "1",
                "severity": "error",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "\n\n/**\n * Convert a single GlskPoint to Scalable\n * @author Pengbo Wang {@literal <pengbo.wang@rte-international.com>}\n */",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler/16/GlskPointScalableConverter.java\nindex 7db0e2035b2..6140d80174b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler/16/GlskPointScalableConverter.java\n@@ -22,7 +22,6 @@ import org.slf4j.LoggerFactory;\n import java.util.*;\n import java.util.stream.Collectors;\n \n-\n /**\n  * Convert a single GlskPoint to Scalable\n  * @author Pengbo Wang {@literal <pengbo.wang@rte-international.com>}\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/intellij/16/GlskPointScalableConverter.java\nindex 7db0e2035b2..8e4dd418aba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/intellij/16/GlskPointScalableConverter.java\n@@ -4,6 +4,7 @@\n  * License, v. 2.0. If a copy of the MPL was not distributed with this\n  * file, You can obtain one at http://mozilla.org/MPL/2.0/.\n  */\n+\n package com.farao_community.farao.data.glsk.import_.actors;\n \n import com.farao_community.farao.commons.FaraoException;\n@@ -25,6 +26,7 @@ import java.util.stream.Collectors;\n \n /**\n  * Convert a single GlskPoint to Scalable\n+ *\n  * @author Pengbo Wang {@literal <pengbo.wang@rte-international.com>}\n  */\n public final class GlskPointScalableConverter {\n@@ -35,7 +37,7 @@ public final class GlskPointScalableConverter {\n     }\n \n     /**\n-     * @param network IIDM network\n+     * @param network   IIDM network\n      * @param glskPoint GLSK Point\n      * @return powsybl-core Scalable\n      */\n@@ -73,7 +75,8 @@ public final class GlskPointScalableConverter {\n \n     /**\n      * convert merit order glsk point to scalable\n-     * @param network iidm network\n+     *\n+     * @param network   iidm network\n      * @param glskPoint glsk point merit order\n      * @return stack scalable\n      */\n@@ -110,10 +113,11 @@ public final class GlskPointScalableConverter {\n \n     /**\n      * convert country proportional glsk point to scalable\n-     * @param network iidm network\n+     *\n+     * @param network      iidm network\n      * @param glskShiftKey shift key\n-     * @param percentages list of percentage factor of scalable\n-     * @param scalables list of scalable\n+     * @param percentages  list of percentage factor of scalable\n+     * @param scalables    list of scalable\n      */\n     private static void convertCountryProportional(Network network, GlskShiftKey glskShiftKey, List<Float> percentages, List<Scalable> scalables) {\n         Country country = new EICode(glskShiftKey.getSubjectDomainmRID()).getCountry();\n@@ -122,10 +126,10 @@ public final class GlskPointScalableConverter {\n             LOGGER.debug(\"GLSK Type B42, empty registered resources list --> country (proportional) GSK\");\n \n             List<Generator> generators = network.getGeneratorStream().filter(generator -> country.equals(generator.getTerminal().getVoltageLevel().getSubstation().getCountry().orElse(null)))\n-                    .filter(generator -> generator.getTerminal().isConnected())\n-                    .filter(generator -> generator.getTerminal().getBusView().getBus() != null)\n-                    .filter(generator -> generator.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n+                .filter(generator -> generator.getTerminal().isConnected())\n+                .filter(generator -> generator.getTerminal().getBusView().getBus() != null)\n+                .filter(generator -> generator.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n+                .collect(Collectors.toList());\n             //calculate sum P of country's generators\n             double totalCountryP = generators.stream().mapToDouble(Generator::getTargetP).sum();\n             //calculate factor of each generator\n@@ -135,10 +139,10 @@ public final class GlskPointScalableConverter {\n             LOGGER.debug(\"GLSK Type B42, empty registered resources list --> country (proportional) LSK\");\n \n             List<Load> loads = network.getLoadStream().filter(load -> country.equals(load.getTerminal().getVoltageLevel().getSubstation().getCountry().orElse(null)))\n-                    .filter(load -> load.getTerminal().isConnected())\n-                    .filter(load -> load.getTerminal().getBusView().getConnectableBus() != null)\n-                    .filter(load -> load.getTerminal().getBusView().getConnectableBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n+                .filter(load -> load.getTerminal().isConnected())\n+                .filter(load -> load.getTerminal().getBusView().getConnectableBus() != null)\n+                .filter(load -> load.getTerminal().getBusView().getConnectableBus().isInMainSynchronousComponent())\n+                .collect(Collectors.toList());\n             //calculate sum P of country's loads\n             double totalCountryP = loads.stream().mapToDouble(Load::getP0).sum();\n             loads.forEach(load -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) load.getP0() / (float) totalCountryP));\n@@ -148,10 +152,11 @@ public final class GlskPointScalableConverter {\n \n     /**\n      * convert explicit glsk point to scalable\n-     * @param network iidm network\n+     *\n+     * @param network      iidm network\n      * @param glskShiftKey shift key\n-     * @param percentages list of percentage factor of scalable\n-     * @param scalables list of scalable\n+     * @param percentages  list of percentage factor of scalable\n+     * @param scalables    list of scalable\n      * @param typeGlskFile type of GLSK file (UCTE / CGMES) for ID generation strategy\n      */\n     private static void convertExplicitProportional(Network network, GlskShiftKey glskShiftKey, List<Float> percentages, List<Scalable> scalables, TypeGlskFile typeGlskFile) {\n@@ -159,13 +164,13 @@ public final class GlskPointScalableConverter {\n             LOGGER.debug(\"GLSK Type B42, not empty registered resources list --> (explicit/manual) proportional GSK\");\n \n             List<Generator> generators = glskShiftKey.getRegisteredResourceArrayList().stream()\n-                    .map(generatorResource -> generatorResource.getGeneratorId(typeGlskFile))\n-                    .filter(generatorId -> network.getGenerator(generatorId) != null)\n-                    .map(network::getGenerator)\n-                    .filter(generator -> generator.getTerminal().isConnected())\n-                    .filter(generator -> generator.getTerminal().getBusView().getBus() != null)\n-                    .filter(generator -> generator.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n+                .map(generatorResource -> generatorResource.getGeneratorId(typeGlskFile))\n+                .filter(generatorId -> network.getGenerator(generatorId) != null)\n+                .map(network::getGenerator)\n+                .filter(generator -> generator.getTerminal().isConnected())\n+                .filter(generator -> generator.getTerminal().getBusView().getBus() != null)\n+                .filter(generator -> generator.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n+                .collect(Collectors.toList());\n \n             double totalP = generators.stream().mapToDouble(Generator::getTargetP).sum();\n             //calculate factor of each generator\n@@ -174,13 +179,13 @@ public final class GlskPointScalableConverter {\n         } else if (glskShiftKey.getPsrType().equals(\"A05\")) {\n             LOGGER.debug(\"GLSK Type B42, not empty registered resources list --> (explicit/manual) proportional LSK\");\n             List<Load> loads = glskShiftKey.getRegisteredResourceArrayList().stream()\n-                    .map(loadResource -> loadResource.getLoadId(typeGlskFile))\n-                    .filter(loadId -> network.getLoad(loadId) != null)\n-                    .map(network::getLoad)\n-                    .filter(load -> load.getTerminal().isConnected())\n-                    .filter(load -> load.getTerminal().getBusView().getBus() != null)\n-                    .filter(load -> load.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n+                .map(loadResource -> loadResource.getLoadId(typeGlskFile))\n+                .filter(loadId -> network.getLoad(loadId) != null)\n+                .map(network::getLoad)\n+                .filter(load -> load.getTerminal().isConnected())\n+                .filter(load -> load.getTerminal().getBusView().getBus() != null)\n+                .filter(load -> load.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n+                .collect(Collectors.toList());\n \n             double totalP = loads.stream().mapToDouble(Load::getP0).sum();\n             loads.forEach(load -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) load.getP0() / (float) totalP));\n@@ -190,10 +195,11 @@ public final class GlskPointScalableConverter {\n \n     /**\n      * convert participation factor glsk point to scalable\n-     * @param network iidm network\n+     *\n+     * @param network      iidm network\n      * @param glskShiftKey shift key\n-     * @param percentages list of percentage factor of scalable\n-     * @param scalables list of scalable\n+     * @param percentages  list of percentage factor of scalable\n+     * @param scalables    list of scalable\n      * @param typeGlskFile type of GLSK file (UCTE / CGMES) for ID generation strategy\n      */\n     private static void convertParticipationFactor(Network network, GlskShiftKey glskShiftKey, List<Float> percentages, List<Scalable> scalables, TypeGlskFile typeGlskFile) {\n@@ -201,11 +207,11 @@ public final class GlskPointScalableConverter {\n             LOGGER.debug(\"GLSK Type B43 GSK\");\n \n             List<GlskRegisteredResource> generatorResources = glskShiftKey.getRegisteredResourceArrayList().stream()\n-                    .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)) != null)\n-                    .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().isConnected())\n-                    .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().getBusView().getBus() != null)\n-                    .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n+                .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)) != null)\n+                .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().isConnected())\n+                .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().getBusView().getBus() != null)\n+                .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n+                .collect(Collectors.toList());\n \n             double totalFactor = generatorResources.stream().mapToDouble(GlskRegisteredResource::getParticipationFactor).sum();\n \n@@ -214,14 +220,14 @@ public final class GlskPointScalableConverter {\n         } else if (glskShiftKey.getPsrType().equals(\"A05\")) {\n             LOGGER.debug(\"GLSK Type B43 LSK\");\n             List<GlskRegisteredResource> loadResources = glskShiftKey.getRegisteredResourceArrayList().stream()\n-                    .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)) != null)\n-                    .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().isConnected())\n-                    .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().getBusView().getBus() != null)\n-                    .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n+                .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)) != null)\n+                .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().isConnected())\n+                .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().getBusView().getBus() != null)\n+                .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n+                .collect(Collectors.toList());\n \n             double totalFactor = loadResources.stream()\n-                    .mapToDouble(GlskRegisteredResource::getParticipationFactor).sum();\n+                .mapToDouble(GlskRegisteredResource::getParticipationFactor).sum();\n \n             loadResources.forEach(loadResource -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) loadResource.getParticipationFactor() / (float) totalFactor));\n             loadResources.forEach(loadResource -> scalables.add(Scalable.onLoad(loadResource.getLoadId(typeGlskFile), -Double.MAX_VALUE, Double.MAX_VALUE)));\n",
            "diff_size": 50
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "168",
                    "column": "1",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "182",
                    "column": "1",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "206",
                    "column": "1",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "218",
                    "column": "1",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/naturalize/16/GlskPointScalableConverter.java\nindex 7db0e2035b2..b6b78b6a65c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/naturalize/16/GlskPointScalableConverter.java\n@@ -22,7 +22,6 @@ import org.slf4j.LoggerFactory;\n import java.util.*;\n import java.util.stream.Collectors;\n \n-\n /**\n  * Convert a single GlskPoint to Scalable\n  * @author Pengbo Wang {@literal <pengbo.wang@rte-international.com>}\n@@ -126,7 +125,7 @@ public final class GlskPointScalableConverter {\n                     .filter(generator -> generator.getTerminal().getBusView().getBus() != null)\n                     .filter(generator -> generator.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n                     .collect(Collectors.toList());\n-            //calculate sum P of country's generators\n+//calculate sum P of country's generators\n             double totalCountryP = generators.stream().mapToDouble(Generator::getTargetP).sum();\n             //calculate factor of each generator\n             generators.forEach(generator -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) generator.getTargetP() / (float) totalCountryP));\n@@ -139,7 +138,7 @@ public final class GlskPointScalableConverter {\n                     .filter(load -> load.getTerminal().getBusView().getConnectableBus() != null)\n                     .filter(load -> load.getTerminal().getBusView().getConnectableBus().isInMainSynchronousComponent())\n                     .collect(Collectors.toList());\n-            //calculate sum P of country's loads\n+//calculate sum P of country's loads\n             double totalCountryP = loads.stream().mapToDouble(Load::getP0).sum();\n             loads.forEach(load -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) load.getP0() / (float) totalCountryP));\n             loads.forEach(load -> scalables.add(Scalable.onLoad(load.getId(), -Double.MAX_VALUE, Double.MAX_VALUE)));\n@@ -166,8 +165,7 @@ public final class GlskPointScalableConverter {\n                     .filter(generator -> generator.getTerminal().getBusView().getBus() != null)\n                     .filter(generator -> generator.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n                     .collect(Collectors.toList());\n-\n-            double totalP = generators.stream().mapToDouble(Generator::getTargetP).sum();\n+double totalP = generators.stream().mapToDouble(Generator::getTargetP).sum();\n             //calculate factor of each generator\n             generators.forEach(generator -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) generator.getTargetP() / (float) totalP));\n             generators.forEach(generator -> scalables.add(Scalable.onGenerator(generator.getId())));\n@@ -181,8 +179,7 @@ public final class GlskPointScalableConverter {\n                     .filter(load -> load.getTerminal().getBusView().getBus() != null)\n                     .filter(load -> load.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n                     .collect(Collectors.toList());\n-\n-            double totalP = loads.stream().mapToDouble(Load::getP0).sum();\n+double totalP = loads.stream().mapToDouble(Load::getP0).sum();\n             loads.forEach(load -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) load.getP0() / (float) totalP));\n             loads.forEach(load -> scalables.add(Scalable.onLoad(load.getId(), -Double.MAX_VALUE, Double.MAX_VALUE)));\n         }\n@@ -206,8 +203,7 @@ public final class GlskPointScalableConverter {\n                     .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().getBusView().getBus() != null)\n                     .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n                     .collect(Collectors.toList());\n-\n-            double totalFactor = generatorResources.stream().mapToDouble(GlskRegisteredResource::getParticipationFactor).sum();\n+double totalFactor = generatorResources.stream().mapToDouble(GlskRegisteredResource::getParticipationFactor).sum();\n \n             generatorResources.forEach(generatorResource -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) generatorResource.getParticipationFactor() / (float) totalFactor));\n             generatorResources.forEach(generatorResource -> scalables.add(Scalable.onGenerator(generatorResource.getGeneratorId(typeGlskFile))));\n@@ -219,12 +215,11 @@ public final class GlskPointScalableConverter {\n                     .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().getBusView().getBus() != null)\n                     .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n                     .collect(Collectors.toList());\n-\n-            double totalFactor = loadResources.stream()\n+double totalFactor = loadResources.stream()\n                     .mapToDouble(GlskRegisteredResource::getParticipationFactor).sum();\n \n             loadResources.forEach(loadResource -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) loadResource.getParticipationFactor() / (float) totalFactor));\n             loadResources.forEach(loadResource -> scalables.add(Scalable.onLoad(loadResource.getLoadId(typeGlskFile), -Double.MAX_VALUE, Double.MAX_VALUE)));\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "25",
                    "column": "1",
                    "severity": "error",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "31",
                    "column": "1",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "64",
                    "column": "28",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 27, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "65",
                    "column": "24",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 23, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "column": "35",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 34, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "column": "31",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 30, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "69",
                    "column": "35",
                    "severity": "error",
                    "message": "'else' child has incorrect indentation level 34, expected level should be 20.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "70",
                    "column": "31",
                    "severity": "error",
                    "message": "'else rcurly' has incorrect indentation level 30, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "152",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "153",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "165",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "167",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "168",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "169",
                    "column": "16",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "205",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "206",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "217",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "219",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "220",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "221",
                    "column": "16",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "257",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "258",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "270",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "272",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "273",
                    "column": "20",
                    "severity": "error",
                    "message": "'if' child has incorrect indentation level 19, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "274",
                    "column": "16",
                    "severity": "error",
                    "message": "'if rcurly' has incorrect indentation level 15, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/codebuff/16/GlskPointScalableConverter.java\nindex 7db0e2035b2..572c49c349a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/codebuff/16/GlskPointScalableConverter.java\n@@ -18,7 +18,6 @@ import com.powsybl.iidm.network.Load;\n import com.powsybl.iidm.network.Network;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.*;\n import java.util.stream.Collectors;\n \n@@ -27,6 +26,8 @@ import java.util.stream.Collectors;\n  * Convert a single GlskPoint to Scalable\n  * @author Pengbo Wang {@literal <pengbo.wang@rte-international.com>}\n  */\n+\n+\n public final class GlskPointScalableConverter {\n     private static final Logger LOGGER = LoggerFactory.getLogger(GlskPointScalableConverter.class);\n \n@@ -39,30 +40,34 @@ public final class GlskPointScalableConverter {\n      * @param glskPoint GLSK Point\n      * @return powsybl-core Scalable\n      */\n+\n     public static Scalable convert(Network network, GlskPoint glskPoint, TypeGlskFile typeGlskFile) {\n         Objects.requireNonNull(glskPoint.getGlskShiftKeys());\n-        if (!glskPoint.getGlskShiftKeys().get(0).getBusinessType().equals(\"B45\")) {\n+        if (!glskPoint.getGlskShiftKeys().get(0)\n+                                         .getBusinessType()\n+                                         .equals(\"B45\")) {\n             //B42 and B43 proportional\n             if (glskPoint.getGlskShiftKeys().size() > 2) {\n                 throw new FaraoException(\"Multi shift keys not supported for proportional GLSK.\");\n             }\n \n             List<Float> percentages = new ArrayList<>();\n-            List<Scalable> scalables = new ArrayList<>();\n \n+            List<Scalable> scalables = new ArrayList<>();\n             for (GlskShiftKey glskShiftKey : glskPoint.getGlskShiftKeys()) {\n-                if (glskShiftKey.getBusinessType().equals(\"B42\") && glskShiftKey.getRegisteredResourceArrayList().isEmpty()) {\n+                if (glskShiftKey.getBusinessType().equals(\"B42\") &&\n+                    glskShiftKey.getRegisteredResourceArrayList().isEmpty()) {\n                     //B42 country\n                     convertCountryProportional(network, glskShiftKey, percentages, scalables);\n                 } else if (glskShiftKey.getBusinessType().equals(\"B42\") && !glskShiftKey.getRegisteredResourceArrayList().isEmpty()) {\n                     //B42 explicit\n-                    convertExplicitProportional(network, glskShiftKey, percentages, scalables, typeGlskFile);\n-                } else if (glskShiftKey.getBusinessType().equals(\"B43\") && !glskShiftKey.getRegisteredResourceArrayList().isEmpty()) {\n+                           convertExplicitProportional(network, glskShiftKey, percentages, scalables, typeGlskFile);\n+                       } else if (glskShiftKey.getBusinessType().equals(\"B43\") && !glskShiftKey.getRegisteredResourceArrayList().isEmpty()) {\n                     //B43 participation factor\n-                    convertParticipationFactor(network, glskShiftKey, percentages, scalables, typeGlskFile);\n-                } else {\n-                    throw new FaraoException(\"In convert glskShiftKey business type not supported\");\n-                }\n+                                  convertParticipationFactor(network, glskShiftKey, percentages, scalables, typeGlskFile);\n+                              } else {\n+                                  throw new FaraoException(\"In convert glskShiftKey business type not supported\");\n+                              }\n             }\n             return Scalable.proportional(percentages, scalables, true);\n         } else {\n@@ -77,26 +82,31 @@ public final class GlskPointScalableConverter {\n      * @param glskPoint glsk point merit order\n      * @return stack scalable\n      */\n+\n     private static Scalable convertMeritOrder(Network network, GlskPoint glskPoint, TypeGlskFile typeGlskFile) {\n         Objects.requireNonNull(network);\n-\n         Map<Integer, String> orders = new HashMap<>(); //Merit order position\n         int maxPosition = -1;\n         for (GlskShiftKey glskShiftKey : glskPoint.getGlskShiftKeys()) {\n             GlskRegisteredResource generatorRegisteredResource = Objects.requireNonNull(glskShiftKey.getRegisteredResourceArrayList()).get(0);\n+\n             String generatorId = generatorRegisteredResource.getGeneratorId(typeGlskFile);\n             double incomingMaxP = generatorRegisteredResource.getMaximumCapacity().orElse(Double.MAX_VALUE);\n             double incomingMinP = generatorRegisteredResource.getMinimumCapacity().orElse(-Double.MAX_VALUE);\n             //set MinP and MaxP\n+\n             Generator generator = network.getGenerator(generatorId);\n+\n             if (generator != null) {\n                 if (LOGGER.isDebugEnabled()) {\n                     LOGGER.debug(String.format(\"MeritOrder ShiftKey changes %s MaxP value from %s to: %s\", generatorId, generator.getMaxP(), incomingMaxP));\n                     LOGGER.debug(String.format(\"MeritOrder ShiftKey changes %s MinP value from %s to: %s\", generatorId, generator.getMinP(), incomingMinP));\n                 }\n+\n                 generator.setMaxP(incomingMaxP);\n                 generator.setMinP(incomingMinP);\n             }\n+\n             orders.put(glskShiftKey.getMeritOrderPosition(), generatorId); //order Scalable according to position in a map\n             maxPosition = Math.max(maxPosition, glskShiftKey.getMeritOrderPosition()); //get max position\n         }\n@@ -115,35 +125,48 @@ public final class GlskPointScalableConverter {\n      * @param percentages list of percentage factor of scalable\n      * @param scalables list of scalable\n      */\n+\n     private static void convertCountryProportional(Network network, GlskShiftKey glskShiftKey, List<Float> percentages, List<Scalable> scalables) {\n         Country country = new EICode(glskShiftKey.getSubjectDomainmRID()).getCountry();\n \n         if (glskShiftKey.getPsrType().equals(\"A04\")) {\n             LOGGER.debug(\"GLSK Type B42, empty registered resources list --> country (proportional) GSK\");\n-\n-            List<Generator> generators = network.getGeneratorStream().filter(generator -> country.equals(generator.getTerminal().getVoltageLevel().getSubstation().getCountry().orElse(null)))\n-                    .filter(generator -> generator.getTerminal().isConnected())\n-                    .filter(generator -> generator.getTerminal().getBusView().getBus() != null)\n-                    .filter(generator -> generator.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n+            List<Generator> generators = network.getGeneratorStream().filter(generator -> country.equals(generator.getTerminal().getVoltageLevel()\n+                                                                                                                                .getSubstation()\n+                                                                                                                                .getCountry()\n+                                                                                                                                .orElse(null)))\n+                                                                     .filter(generator -> generator.getTerminal().isConnected())\n+                                                                     .filter(generator -> generator.getTerminal().getBusView()\n+                                                                                                                 .getBus() != null)\n+                                                                     .filter(generator -> generator.getTerminal().getBusView()\n+                                                                                                                 .getBus()\n+                                                                                                                 .isInMainSynchronousComponent())\n+                                                                     .collect(Collectors.toList());\n             //calculate sum P of country's generators\n-            double totalCountryP = generators.stream().mapToDouble(Generator::getTargetP).sum();\n+            double totalCountryP = generators.stream().mapToDouble(Generator::getTargetP)\n+                                                      .sum();\n             //calculate factor of each generator\n             generators.forEach(generator -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) generator.getTargetP() / (float) totalCountryP));\n             generators.forEach(generator -> scalables.add(Scalable.onGenerator(generator.getId())));\n         } else if (glskShiftKey.getPsrType().equals(\"A05\")) {\n-            LOGGER.debug(\"GLSK Type B42, empty registered resources list --> country (proportional) LSK\");\n-\n-            List<Load> loads = network.getLoadStream().filter(load -> country.equals(load.getTerminal().getVoltageLevel().getSubstation().getCountry().orElse(null)))\n-                    .filter(load -> load.getTerminal().isConnected())\n-                    .filter(load -> load.getTerminal().getBusView().getConnectableBus() != null)\n-                    .filter(load -> load.getTerminal().getBusView().getConnectableBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n+                   LOGGER.debug(\"GLSK Type B42, empty registered resources list --> country (proportional) LSK\");\n+                   List<Load> loads = network.getLoadStream().filter(load -> country.equals(load.getTerminal().getVoltageLevel()\n+                                                                                                              .getSubstation()\n+                                                                                                              .getCountry()\n+                                                                                                              .orElse(null)))\n+                                                             .filter(load -> load.getTerminal().isConnected())\n+                                                             .filter(load -> load.getTerminal().getBusView()\n+                                                                                               .getConnectableBus() != null)\n+                                                             .filter(load -> load.getTerminal().getBusView()\n+                                                                                               .getConnectableBus()\n+                                                                                               .isInMainSynchronousComponent())\n+                                                             .collect(Collectors.toList());\n             //calculate sum P of country's loads\n-            double totalCountryP = loads.stream().mapToDouble(Load::getP0).sum();\n-            loads.forEach(load -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) load.getP0() / (float) totalCountryP));\n-            loads.forEach(load -> scalables.add(Scalable.onLoad(load.getId(), -Double.MAX_VALUE, Double.MAX_VALUE)));\n-        }\n+                   double totalCountryP = loads.stream().mapToDouble(Load::getP0)\n+                                                        .sum();\n+                   loads.forEach(load -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) load.getP0() / (float) totalCountryP));\n+                   loads.forEach(load -> scalables.add(Scalable.onLoad(load.getId(), -Double.MAX_VALUE, Double.MAX_VALUE)));\n+               }\n     }\n \n     /**\n@@ -154,38 +177,48 @@ public final class GlskPointScalableConverter {\n      * @param scalables list of scalable\n      * @param typeGlskFile type of GLSK file (UCTE / CGMES) for ID generation strategy\n      */\n-    private static void convertExplicitProportional(Network network, GlskShiftKey glskShiftKey, List<Float> percentages, List<Scalable> scalables, TypeGlskFile typeGlskFile) {\n+\n+    private static void convertExplicitProportional(\n+        Network network,\n+        GlskShiftKey glskShiftKey,\n+        List<Float> percentages,\n+        List<Scalable> scalables, TypeGlskFile typeGlskFile) {\n         if (glskShiftKey.getPsrType().equals(\"A04\")) {\n             LOGGER.debug(\"GLSK Type B42, not empty registered resources list --> (explicit/manual) proportional GSK\");\n-\n             List<Generator> generators = glskShiftKey.getRegisteredResourceArrayList().stream()\n-                    .map(generatorResource -> generatorResource.getGeneratorId(typeGlskFile))\n-                    .filter(generatorId -> network.getGenerator(generatorId) != null)\n-                    .map(network::getGenerator)\n-                    .filter(generator -> generator.getTerminal().isConnected())\n-                    .filter(generator -> generator.getTerminal().getBusView().getBus() != null)\n-                    .filter(generator -> generator.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n-\n-            double totalP = generators.stream().mapToDouble(Generator::getTargetP).sum();\n+                                                                                      .map(generatorResource -> generatorResource.getGeneratorId(typeGlskFile))\n+                                                                                      .filter(generatorId -> network.getGenerator(generatorId) != null)\n+                                                                                      .map(network::getGenerator)\n+                                                                                      .filter(generator -> generator.getTerminal().isConnected())\n+                                                                                      .filter(generator -> generator.getTerminal().getBusView()\n+                                                                                                                                  .getBus() != null)\n+                                                                                      .filter(generator -> generator.getTerminal().getBusView()\n+                                                                                                                                  .getBus()\n+                                                                                                                                  .isInMainSynchronousComponent())\n+                                                                                      .collect(Collectors.toList());\n+            double totalP = generators.stream().mapToDouble(Generator::getTargetP)\n+                                               .sum();\n             //calculate factor of each generator\n             generators.forEach(generator -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) generator.getTargetP() / (float) totalP));\n             generators.forEach(generator -> scalables.add(Scalable.onGenerator(generator.getId())));\n         } else if (glskShiftKey.getPsrType().equals(\"A05\")) {\n-            LOGGER.debug(\"GLSK Type B42, not empty registered resources list --> (explicit/manual) proportional LSK\");\n-            List<Load> loads = glskShiftKey.getRegisteredResourceArrayList().stream()\n-                    .map(loadResource -> loadResource.getLoadId(typeGlskFile))\n-                    .filter(loadId -> network.getLoad(loadId) != null)\n-                    .map(network::getLoad)\n-                    .filter(load -> load.getTerminal().isConnected())\n-                    .filter(load -> load.getTerminal().getBusView().getBus() != null)\n-                    .filter(load -> load.getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n-\n-            double totalP = loads.stream().mapToDouble(Load::getP0).sum();\n-            loads.forEach(load -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) load.getP0() / (float) totalP));\n-            loads.forEach(load -> scalables.add(Scalable.onLoad(load.getId(), -Double.MAX_VALUE, Double.MAX_VALUE)));\n-        }\n+                   LOGGER.debug(\"GLSK Type B42, not empty registered resources list --> (explicit/manual) proportional LSK\");\n+                   List<Load> loads = glskShiftKey.getRegisteredResourceArrayList().stream()\n+                                                                                   .map(loadResource -> loadResource.getLoadId(typeGlskFile))\n+                                                                                   .filter(loadId -> network.getLoad(loadId) != null)\n+                                                                                   .map(network::getLoad)\n+                                                                                   .filter(load -> load.getTerminal().isConnected())\n+                                                                                   .filter(load -> load.getTerminal().getBusView()\n+                                                                                                                     .getBus() != null)\n+                                                                                   .filter(load -> load.getTerminal().getBusView()\n+                                                                                                                     .getBus()\n+                                                                                                                     .isInMainSynchronousComponent())\n+                                                                                   .collect(Collectors.toList());\n+                   double totalP = loads.stream().mapToDouble(Load::getP0)\n+                                                 .sum();\n+                   loads.forEach(load -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) load.getP0() / (float) totalP));\n+                   loads.forEach(load -> scalables.add(Scalable.onLoad(load.getId(), -Double.MAX_VALUE, Double.MAX_VALUE)));\n+               }\n     }\n \n     /**\n@@ -196,35 +229,48 @@ public final class GlskPointScalableConverter {\n      * @param scalables list of scalable\n      * @param typeGlskFile type of GLSK file (UCTE / CGMES) for ID generation strategy\n      */\n-    private static void convertParticipationFactor(Network network, GlskShiftKey glskShiftKey, List<Float> percentages, List<Scalable> scalables, TypeGlskFile typeGlskFile) {\n+\n+    private static void convertParticipationFactor(\n+        Network network,\n+        GlskShiftKey glskShiftKey,\n+        List<Float> percentages,\n+        List<Scalable> scalables, TypeGlskFile typeGlskFile) {\n         if (glskShiftKey.getPsrType().equals(\"A04\")) {\n             LOGGER.debug(\"GLSK Type B43 GSK\");\n-\n             List<GlskRegisteredResource> generatorResources = glskShiftKey.getRegisteredResourceArrayList().stream()\n-                    .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)) != null)\n-                    .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().isConnected())\n-                    .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().getBusView().getBus() != null)\n-                    .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n-\n-            double totalFactor = generatorResources.stream().mapToDouble(GlskRegisteredResource::getParticipationFactor).sum();\n-\n+                                                                                                           .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)) != null)\n+                                                                                                           .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal()\n+                                                                                                                                                                                                            .isConnected())\n+                                                                                                           .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal()\n+                                                                                                                                                                                                            .getBusView()\n+                                                                                                                                                                                                            .getBus() != null)\n+                                                                                                           .filter(generatorResource -> network.getGenerator(generatorResource.getGeneratorId(typeGlskFile)).getTerminal()\n+                                                                                                                                                                                                            .getBusView()\n+                                                                                                                                                                                                            .getBus()\n+                                                                                                                                                                                                            .isInMainSynchronousComponent())\n+                                                                                                           .collect(Collectors.toList());\n+            double totalFactor = generatorResources.stream().mapToDouble(GlskRegisteredResource::getParticipationFactor)\n+                                                            .sum();\n             generatorResources.forEach(generatorResource -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) generatorResource.getParticipationFactor() / (float) totalFactor));\n             generatorResources.forEach(generatorResource -> scalables.add(Scalable.onGenerator(generatorResource.getGeneratorId(typeGlskFile))));\n         } else if (glskShiftKey.getPsrType().equals(\"A05\")) {\n-            LOGGER.debug(\"GLSK Type B43 LSK\");\n-            List<GlskRegisteredResource> loadResources = glskShiftKey.getRegisteredResourceArrayList().stream()\n-                    .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)) != null)\n-                    .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().isConnected())\n-                    .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().getBusView().getBus() != null)\n-                    .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal().getBusView().getBus().isInMainSynchronousComponent())\n-                    .collect(Collectors.toList());\n-\n-            double totalFactor = loadResources.stream()\n-                    .mapToDouble(GlskRegisteredResource::getParticipationFactor).sum();\n-\n-            loadResources.forEach(loadResource -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) loadResource.getParticipationFactor() / (float) totalFactor));\n-            loadResources.forEach(loadResource -> scalables.add(Scalable.onLoad(loadResource.getLoadId(typeGlskFile), -Double.MAX_VALUE, Double.MAX_VALUE)));\n-        }\n+                   LOGGER.debug(\"GLSK Type B43 LSK\");\n+                   List<GlskRegisteredResource> loadResources = glskShiftKey.getRegisteredResourceArrayList().stream()\n+                                                                                                             .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)) != null)\n+                                                                                                             .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal()\n+                                                                                                                                                                                          .isConnected())\n+                                                                                                             .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal()\n+                                                                                                                                                                                          .getBusView()\n+                                                                                                                                                                                          .getBus() != null)\n+                                                                                                             .filter(loadResource -> network.getLoad(loadResource.getLoadId(typeGlskFile)).getTerminal()\n+                                                                                                                                                                                          .getBusView()\n+                                                                                                                                                                                          .getBus()\n+                                                                                                                                                                                          .isInMainSynchronousComponent())\n+                                                                                                             .collect(Collectors.toList());\n+                   double totalFactor = loadResources.stream().mapToDouble(GlskRegisteredResource::getParticipationFactor)\n+                                                              .sum();\n+                   loadResources.forEach(loadResource -> percentages.add(100 * glskShiftKey.getQuantity().floatValue() * (float) loadResource.getParticipationFactor() / (float) totalFactor));\n+                   loadResources.forEach(loadResource -> scalables.add(Scalable.onLoad(loadResource.getLoadId(typeGlskFile), -Double.MAX_VALUE, Double.MAX_VALUE)));\n+               }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 130
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_random/16/GlskPointScalableConverter.java\nindex 7db0e2035b2..6140d80174b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_random/16/GlskPointScalableConverter.java\n@@ -22,7 +22,6 @@ import org.slf4j.LoggerFactory;\n import java.util.*;\n import java.util.stream.Collectors;\n \n-\n /**\n  * Convert a single GlskPoint to Scalable\n  * @author Pengbo Wang {@literal <pengbo.wang@rte-international.com>}\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_three_grams/16/GlskPointScalableConverter.java\nindex 7db0e2035b2..6140d80174b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/errored/1/16/GlskPointScalableConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/farao-community-farao-core/styler_three_grams/16/GlskPointScalableConverter.java\n@@ -22,7 +22,6 @@ import org.slf4j.LoggerFactory;\n import java.util.*;\n import java.util.stream.Collectors;\n \n-\n /**\n  * Convert a single GlskPoint to Scalable\n  * @author Pengbo Wang {@literal <pengbo.wang@rte-international.com>}\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}