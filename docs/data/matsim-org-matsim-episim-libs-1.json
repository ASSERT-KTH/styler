{
    "project_name": "matsim-org-matsim-episim-libs",
    "error_id": "1",
    "information": {
        "errors": [
            {
                "line": "193",
                "column": "33",
                "severity": "error",
                "message": "Use a single space to separate non-whitespace characters.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
            }
        ]
    },
    "source_code": "\tpublic boolean isTraceable() {\n\t\tBoolean tracing = (Boolean) attributes.getAttribute(TRACING_ATTR);\n\t\tif (tracing ==  null) return true;\n\t\treturn tracing;\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "193",
                    "column": "33",
                    "severity": "error",
                    "message": "Use a single space to separate non-whitespace characters.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "53",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "132",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "138",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "150",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "153",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "154",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "156",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "164",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "172",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "173",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "174",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "175",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "175",
                    "column": "5",
                    "severity": "error",
                    "message": "'{' at column 5 should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                },
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "184",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "185",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "186",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "193",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "202",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "203",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "204",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "205",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "209",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "213",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "217",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "234",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "235",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "236",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "237",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "238",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "241",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "246",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "253",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "257",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "258",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "259",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "260",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "261",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "263",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "267",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "271",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "278",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "285",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "292",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "293",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/1/EpisimPerson.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/1/EpisimPerson.java\nindex 4f636a47bd6..a226715bf19 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/1/EpisimPerson.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/intellij/1/EpisimPerson.java\n@@ -18,6 +18,7 @@\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  * #L%\n  */\n+\n package org.matsim.episim;\n \n import com.google.common.annotations.Beta;\n@@ -40,241 +41,260 @@ import java.util.stream.Collectors;\n  */\n public final class EpisimPerson implements Attributable {\n \n-\t/**\n-\t * Attribute for the ability to be traced.\n-\t */\n-\tpublic static final String TRACING_ATTR = \"hasTracing\";\n-\n-\tprivate final Id<Person> personId;\n-\tprivate final EpisimReporting reporting;\n-\tprivate final Attributes attributes;\n-\tprivate final ObjectDoubleHashMap<EpisimPerson> traceableContactPersons = new ObjectDoubleHashMap<>();\n-\tprivate final List<String> trajectory = new ArrayList<>();\n-\n-\t/**\n-\t * Stores first time of status changes to specific type.\n-\t */\n-\tprivate final EnumMap<DiseaseStatus, Double> statusChanges = new EnumMap<>(DiseaseStatus.class);\n-\n-\t/**\n-\t * Total spent time during activities.\n-\t */\n-\tprivate final MutableObjectDoubleMap<String> spentTime = new ObjectDoubleHashMap<>();\n-\n-\t/**\n-\t * The {@link EpisimContainer} the person is currently located in.\n-\t */\n-\tprivate EpisimContainer<?> currentContainer = null;\n-\t/**\n-\t * Current {@link DiseaseStatus}.\n-\t */\n-\tprivate DiseaseStatus status = DiseaseStatus.susceptible;\n-\t/**\n-\t * Current {@link QuarantineStatus}.\n-\t */\n-\tprivate QuarantineStatus quarantineStatus = QuarantineStatus.no;\n-\n-\t/**\n-\t * Iteration when this person got into quarantine. Negative if person was never quarantined.\n-\t */\n-\tprivate int quarantineDate = -1;\n-\tprivate int currentPositionInTrajectory;\n-\t/**\n-\t * The last visited {@link org.matsim.facilities.ActivityFacility}.\n-\t */\n-\tprivate String lastFacilityId;\n-\tprivate String firstFacilityId;\n-\n-\tEpisimPerson(Id<Person> personId, Attributes attrs, EpisimReporting reporting) {\n-\t\tthis.personId = personId;\n-\t\tthis.attributes = attrs;\n-\t\tthis.reporting = reporting;\n-\t}\n-\n-\tpublic Id<Person> getPersonId() {\n-\t\treturn personId;\n-\t}\n-\n-\tpublic DiseaseStatus getDiseaseStatus() {\n-\t\treturn status;\n-\t}\n-\n-\tpublic void setDiseaseStatus(double now, DiseaseStatus status) {\n-\t\tthis.status = status;\n-\t\tif (!statusChanges.containsKey(status))\n-\t\t\tstatusChanges.put(status, now);\n-\n-\t\treporting.reportPersonStatus(this, new EpisimPersonStatusEvent(now, personId, status));\n-\t}\n-\n-\tpublic QuarantineStatus getQuarantineStatus() {\n-\t\treturn quarantineStatus;\n-\t}\n-\n-\tpublic void setQuarantineStatus(QuarantineStatus quarantineStatus, int iteration) {\n-\t\tthis.quarantineStatus = quarantineStatus;\n-\t\tthis.quarantineDate = iteration;\n-\t}\n-\n-\n-\t/**\n-\t * Days elapsed since a certain status was set.\n-\t * This will always round the change as if it happened on the start of a day.\n-\t *\n-\t * @param status     requested status\n-\t * @param currentDay current day (iteration)\n-\t * @throws IllegalStateException when the requested status was never set\n-\t */\n-\tpublic int daysSince(DiseaseStatus status, int currentDay) {\n-\t\tif (!statusChanges.containsKey(status)) throw new IllegalStateException(\"Person was never \" + status);\n-\n-\t\tdouble day = Math.floor(statusChanges.get(status) / 86400d);\n-\n-\t\treturn currentDay - (int) day;\n-\t}\n-\n-\t/**\n-\t * Days elapsed since person was put into quarantine.\n-\t *\n-\t * @param currentDay current day (iteration)\n-\t * @apiNote This is currently not used much and may change similar to {@link #daysSince(DiseaseStatus, int)}.\n-\t */\n-\t@Beta\n-\tpublic int daysSinceQuarantine(int currentDay) {\n-\n-\t\t// yyyy since this API is so unstable, I would prefer to have the class non-public.  kai, apr'20\n-\t\t// -> api now marked as unstable and containing an api note, because it is used by the models it has to be public. chr, apr'20\n-\t\tif (quarantineDate < 0) throw new IllegalStateException(\"Person was never quarantined\");\n-\n-\t\treturn currentDay - quarantineDate;\n-\t}\n-\n-\tint getQuarantineDate() {\n-\t\treturn this.quarantineDate;\n-\t}\n-\n-\tString getLastFacilityId() {\n-\t\treturn this.lastFacilityId;\n-\t}\n-\n-\tvoid setLastFacilityId(String lastFacilityId) {\n-\t\tthis.lastFacilityId = lastFacilityId;\n-\t}\n-\n-\tpublic void addTraceableContactPerson(EpisimPerson personWrapper, double now) {\n-\t\t// check if both persons have tracing capability\n-\t\tif (isTraceable() && personWrapper.isTraceable())\n-\t\t\t// Always use the latest tracking date\n-\t\t\ttraceableContactPersons.put(personWrapper, now);\n-\t}\n-\n-\t/**\n-\t * Get all traced contacts that happened after certain time.\n-\t */\n-\tpublic Set<EpisimPerson> getTraceableContactPersons(double after) {\n-\t\treturn traceableContactPersons.keySet()\n-\t\t\t\t.stream().filter(k -> traceableContactPersons.get(k) >= after)\n-\t\t\t\t.collect(Collectors.toSet());\n-\t}\n-\n-\t/**\n-\t * Remove old contact tracing data before a certain date.\n-\t */\n-\tpublic void clearTraceableContractPersons(double before) {\n-\t\ttraceableContactPersons.keySet().removeIf(k -> traceableContactPersons.get(k) < before);\n-\t}\n-\n-\n-\t/**\n-\t * Returns whether the person can be traced. When {@link #TRACING_ATTR} is not set it is always true.\n-\t */\n-\tpublic boolean isTraceable() {\n-\t\tBoolean tracing = (Boolean) attributes.getAttribute(TRACING_ATTR);\n-\t\tif (tracing ==  null) return true;\n-\t\treturn tracing;\n-\t}\n-\n-\tvoid addToTrajectory(String trajectoryElement) {\n-\t\ttrajectory.add(trajectoryElement);\n-\t}\n-\n-\tpublic List<String> getTrajectory() {\n-\t\treturn trajectory;\n-\t}\n-\n-\tpublic int getCurrentPositionInTrajectory() {\n-\t\treturn this.currentPositionInTrajectory;\n-\t}\n-\n-\tvoid setCurrentPositionInTrajectory(int currentPositionInTrajectory) {\n-\t\tthis.currentPositionInTrajectory = currentPositionInTrajectory;\n-\t}\n-\n-\tpublic EpisimContainer<?> getCurrentContainer() {\n-\t\treturn currentContainer;\n-\t}\n-\n-\t/**\n-\t * Set the container the person is currently contained in. {@link #removeCurrentContainer(EpisimContainer)} must be called before a new\n-\t * container can be set.\n-\t */\n-\tpublic void setCurrentContainer(EpisimContainer<?> container) {\n-\t\tif (this.currentContainer != null)\n-\t\t\tthrow new IllegalStateException(String.format(\"Person in more than one container at once. Person=%s in %s and %s\",\n-\t\t\t\t\tthis.getPersonId(), container.getContainerId(), this.currentContainer.getContainerId()));\n-\n-\n-\t\tthis.currentContainer = container;\n-\t}\n-\n-\t@Override\n-\tpublic Attributes getAttributes() {\n-\t\treturn attributes;\n-\t}\n-\n-\t/**\n-\t * Whether person is currently in a container.\n-\t */\n-\tpublic boolean isInContainer() {\n-\t\treturn currentContainer != null;\n-\t}\n-\n-\tpublic void removeCurrentContainer(EpisimContainer<?> container) {\n-\t\tif (this.currentContainer != container)\n-\t\t\tthrow new IllegalStateException(String.format(\"Person is currently in %s, but not in removed one %s\", currentContainer, container));\n-\n-\t\tthis.currentContainer = null;\n-\t}\n-\n-\tString getFirstFacilityId() {\n-\t\treturn firstFacilityId;\n-\t}\n-\n-\tvoid setFirstFacilityId(String firstFacilityId) {\n-\t\tthis.firstFacilityId = firstFacilityId;\n-\t}\n-\n-\t/**\n-\t * Add amount of time to spent time for an activity.\n-\t */\n-\tpublic void addSpentTime(String actType, double timeSpent) {\n-\t\tspentTime.addToValue(actType, timeSpent);\n-\t}\n-\n-\t/**\n-\t * Spent time of this person by activity.\n-\t */\n-\tpublic MutableObjectDoubleMap<String> getSpentTime() {\n-\t\treturn spentTime;\n-\t}\n-\n-\t/**\n-\t * Disease status of a person.\n-\t */\n-\tpublic enum DiseaseStatus {susceptible, infectedButNotContagious, contagious, showingSymptoms, seriouslySick, critical, recovered}\n-\n-\t/**\n-\t * Quarantine status of a person.\n-\t */\n-\tpublic enum QuarantineStatus {full, atHome, no}\n+  /**\n+   * Attribute for the ability to be traced.\n+   */\n+  public static final String TRACING_ATTR = \"hasTracing\";\n+\n+  private final Id<Person> personId;\n+  private final EpisimReporting reporting;\n+  private final Attributes attributes;\n+  private final ObjectDoubleHashMap<EpisimPerson> traceableContactPersons =\n+      new ObjectDoubleHashMap<>();\n+  private final List<String> trajectory = new ArrayList<>();\n+\n+  /**\n+   * Stores first time of status changes to specific type.\n+   */\n+  private final EnumMap<DiseaseStatus, Double> statusChanges = new EnumMap<>(DiseaseStatus.class);\n+\n+  /**\n+   * Total spent time during activities.\n+   */\n+  private final MutableObjectDoubleMap<String> spentTime = new ObjectDoubleHashMap<>();\n+\n+  /**\n+   * The {@link EpisimContainer} the person is currently located in.\n+   */\n+  private EpisimContainer<?> currentContainer = null;\n+  /**\n+   * Current {@link DiseaseStatus}.\n+   */\n+  private DiseaseStatus status = DiseaseStatus.susceptible;\n+  /**\n+   * Current {@link QuarantineStatus}.\n+   */\n+  private QuarantineStatus quarantineStatus = QuarantineStatus.no;\n+\n+  /**\n+   * Iteration when this person got into quarantine. Negative if person was never quarantined.\n+   */\n+  private int quarantineDate = -1;\n+  private int currentPositionInTrajectory;\n+  /**\n+   * The last visited {@link org.matsim.facilities.ActivityFacility}.\n+   */\n+  private String lastFacilityId;\n+  private String firstFacilityId;\n+\n+  EpisimPerson(Id<Person> personId, Attributes attrs, EpisimReporting reporting) {\n+    this.personId = personId;\n+    this.attributes = attrs;\n+    this.reporting = reporting;\n+  }\n+\n+  public Id<Person> getPersonId() {\n+    return personId;\n+  }\n+\n+  public DiseaseStatus getDiseaseStatus() {\n+    return status;\n+  }\n+\n+  public void setDiseaseStatus(double now, DiseaseStatus status) {\n+    this.status = status;\n+    if (!statusChanges.containsKey(status)) {\n+      statusChanges.put(status, now);\n+    }\n+\n+    reporting.reportPersonStatus(this, new EpisimPersonStatusEvent(now, personId, status));\n+  }\n+\n+  public QuarantineStatus getQuarantineStatus() {\n+    return quarantineStatus;\n+  }\n+\n+  public void setQuarantineStatus(QuarantineStatus quarantineStatus, int iteration) {\n+    this.quarantineStatus = quarantineStatus;\n+    this.quarantineDate = iteration;\n+  }\n+\n+\n+  /**\n+   * Days elapsed since a certain status was set.\n+   * This will always round the change as if it happened on the start of a day.\n+   *\n+   * @param status     requested status\n+   * @param currentDay current day (iteration)\n+   * @throws IllegalStateException when the requested status was never set\n+   */\n+  public int daysSince(DiseaseStatus status, int currentDay) {\n+    if (!statusChanges.containsKey(status)) {\n+      throw new IllegalStateException(\"Person was never \" + status);\n+    }\n+\n+    double day = Math.floor(statusChanges.get(status) / 86400d);\n+\n+    return currentDay - (int) day;\n+  }\n+\n+  /**\n+   * Days elapsed since person was put into quarantine.\n+   *\n+   * @param currentDay current day (iteration)\n+   * @apiNote This is currently not used much and may change similar to {@link #daysSince(DiseaseStatus, int)}.\n+   */\n+  @Beta\n+  public int daysSinceQuarantine(int currentDay) {\n+\n+    // yyyy since this API is so unstable, I would prefer to have the class non-public.  kai, apr'20\n+    // -> api now marked as unstable and containing an api note, because it is used by the models it has to be public. chr, apr'20\n+    if (quarantineDate < 0) {\n+      throw new IllegalStateException(\"Person was never quarantined\");\n+    }\n+\n+    return currentDay - quarantineDate;\n+  }\n+\n+  int getQuarantineDate() {\n+    return this.quarantineDate;\n+  }\n+\n+  String getLastFacilityId() {\n+    return this.lastFacilityId;\n+  }\n+\n+  void setLastFacilityId(String lastFacilityId) {\n+    this.lastFacilityId = lastFacilityId;\n+  }\n+\n+  public void addTraceableContactPerson(EpisimPerson personWrapper, double now) {\n+    // check if both persons have tracing capability\n+    if (isTraceable() && personWrapper.isTraceable())\n+    // Always use the latest tracking date\n+    {\n+      traceableContactPersons.put(personWrapper, now);\n+    }\n+  }\n+\n+  /**\n+   * Get all traced contacts that happened after certain time.\n+   */\n+  public Set<EpisimPerson> getTraceableContactPersons(double after) {\n+    return traceableContactPersons.keySet()\n+        .stream().filter(k -> traceableContactPersons.get(k) >= after)\n+        .collect(Collectors.toSet());\n+  }\n+\n+  /**\n+   * Remove old contact tracing data before a certain date.\n+   */\n+  public void clearTraceableContractPersons(double before) {\n+    traceableContactPersons.keySet().removeIf(k -> traceableContactPersons.get(k) < before);\n+  }\n+\n+\n+  /**\n+   * Returns whether the person can be traced. When {@link #TRACING_ATTR} is not set it is always true.\n+   */\n+  public boolean isTraceable() {\n+    Boolean tracing = (Boolean) attributes.getAttribute(TRACING_ATTR);\n+    if (tracing == null) {\n+      return true;\n+    }\n+    return tracing;\n+  }\n+\n+  void addToTrajectory(String trajectoryElement) {\n+    trajectory.add(trajectoryElement);\n+  }\n+\n+  public List<String> getTrajectory() {\n+    return trajectory;\n+  }\n+\n+  public int getCurrentPositionInTrajectory() {\n+    return this.currentPositionInTrajectory;\n+  }\n+\n+  void setCurrentPositionInTrajectory(int currentPositionInTrajectory) {\n+    this.currentPositionInTrajectory = currentPositionInTrajectory;\n+  }\n+\n+  public EpisimContainer<?> getCurrentContainer() {\n+    return currentContainer;\n+  }\n+\n+  /**\n+   * Set the container the person is currently contained in. {@link #removeCurrentContainer(EpisimContainer)} must be called before a new\n+   * container can be set.\n+   */\n+  public void setCurrentContainer(EpisimContainer<?> container) {\n+    if (this.currentContainer != null) {\n+      throw new IllegalStateException(\n+          String.format(\"Person in more than one container at once. Person=%s in %s and %s\",\n+              this.getPersonId(), container.getContainerId(),\n+              this.currentContainer.getContainerId()));\n+    }\n+\n+\n+    this.currentContainer = container;\n+  }\n+\n+  @Override\n+  public Attributes getAttributes() {\n+    return attributes;\n+  }\n+\n+  /**\n+   * Whether person is currently in a container.\n+   */\n+  public boolean isInContainer() {\n+    return currentContainer != null;\n+  }\n+\n+  public void removeCurrentContainer(EpisimContainer<?> container) {\n+    if (this.currentContainer != container) {\n+      throw new IllegalStateException(String\n+          .format(\"Person is currently in %s, but not in removed one %s\", currentContainer,\n+              container));\n+    }\n+\n+    this.currentContainer = null;\n+  }\n+\n+  String getFirstFacilityId() {\n+    return firstFacilityId;\n+  }\n+\n+  void setFirstFacilityId(String firstFacilityId) {\n+    this.firstFacilityId = firstFacilityId;\n+  }\n+\n+  /**\n+   * Add amount of time to spent time for an activity.\n+   */\n+  public void addSpentTime(String actType, double timeSpent) {\n+    spentTime.addToValue(actType, timeSpent);\n+  }\n+\n+  /**\n+   * Spent time of this person by activity.\n+   */\n+  public MutableObjectDoubleMap<String> getSpentTime() {\n+    return spentTime;\n+  }\n+\n+  /**\n+   * Disease status of a person.\n+   */\n+  public enum DiseaseStatus {\n+    susceptible, infectedButNotContagious, contagious, showingSymptoms, seriouslySick, critical,\n+    recovered\n+  }\n+\n+  /**\n+   * Quarantine status of a person.\n+   */\n+  public enum QuarantineStatus {full, atHome, no}\n }\n",
            "diff_size": 257
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/1/EpisimPerson.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/1/EpisimPerson.java\nindex 4f636a47bd6..6e0d1bd8687 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/1/EpisimPerson.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/naturalize/1/EpisimPerson.java\n@@ -190,7 +190,8 @@ public final class EpisimPerson implements Attributable {\n \t */\n \tpublic boolean isTraceable() {\n \t\tBoolean tracing = (Boolean) attributes.getAttribute(TRACING_ATTR);\n-\t\tif (tracing ==  null) return true;\n+\t\tif (tracing == null)\n+\treturn true;\n \t\treturn tracing;\n \t}\n \n@@ -222,9 +223,7 @@ public final class EpisimPerson implements Attributable {\n \t\tif (this.currentContainer != null)\n \t\t\tthrow new IllegalStateException(String.format(\"Person in more than one container at once. Person=%s in %s and %s\",\n \t\t\t\t\tthis.getPersonId(), container.getContainerId(), this.currentContainer.getContainerId()));\n-\n-\n-\t\tthis.currentContainer = container;\n+this.currentContainer = container;\n \t}\n \n \t@Override\n@@ -277,4 +276,4 @@ public final class EpisimPerson implements Attributable {\n \t * Quarantine status of a person.\n \t */\n \tpublic enum QuarantineStatus {full, atHome, no}\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "188",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "189",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "246",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "247",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                },
                {
                    "line": "248",
                    "severity": "error",
                    "message": "Indent must use tab characters",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineJavaCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/1/EpisimPerson.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/1/EpisimPerson.java\nindex 4f636a47bd6..92dfdb93fda 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/errored/1/1/EpisimPerson.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/matsim-org-matsim-episim-libs/codebuff/1/EpisimPerson.java\n@@ -28,7 +28,6 @@ import org.matsim.api.core.v01.population.Person;\n import org.matsim.episim.events.EpisimPersonStatusEvent;\n import org.matsim.utils.objectattributes.attributable.Attributable;\n import org.matsim.utils.objectattributes.attributable.Attributes;\n-\n import java.util.ArrayList;\n import java.util.EnumMap;\n import java.util.List;\n@@ -38,243 +37,283 @@ import java.util.stream.Collectors;\n /**\n  * Persons current state in the simulation.\n  */\n+\n+\n public final class EpisimPerson implements Attributable {\n \n-\t/**\n-\t * Attribute for the ability to be traced.\n-\t */\n-\tpublic static final String TRACING_ATTR = \"hasTracing\";\n-\n-\tprivate final Id<Person> personId;\n-\tprivate final EpisimReporting reporting;\n-\tprivate final Attributes attributes;\n-\tprivate final ObjectDoubleHashMap<EpisimPerson> traceableContactPersons = new ObjectDoubleHashMap<>();\n-\tprivate final List<String> trajectory = new ArrayList<>();\n-\n-\t/**\n-\t * Stores first time of status changes to specific type.\n-\t */\n-\tprivate final EnumMap<DiseaseStatus, Double> statusChanges = new EnumMap<>(DiseaseStatus.class);\n-\n-\t/**\n-\t * Total spent time during activities.\n-\t */\n-\tprivate final MutableObjectDoubleMap<String> spentTime = new ObjectDoubleHashMap<>();\n-\n-\t/**\n-\t * The {@link EpisimContainer} the person is currently located in.\n-\t */\n-\tprivate EpisimContainer<?> currentContainer = null;\n-\t/**\n-\t * Current {@link DiseaseStatus}.\n-\t */\n-\tprivate DiseaseStatus status = DiseaseStatus.susceptible;\n-\t/**\n-\t * Current {@link QuarantineStatus}.\n-\t */\n-\tprivate QuarantineStatus quarantineStatus = QuarantineStatus.no;\n-\n-\t/**\n-\t * Iteration when this person got into quarantine. Negative if person was never quarantined.\n-\t */\n-\tprivate int quarantineDate = -1;\n-\tprivate int currentPositionInTrajectory;\n-\t/**\n-\t * The last visited {@link org.matsim.facilities.ActivityFacility}.\n-\t */\n-\tprivate String lastFacilityId;\n-\tprivate String firstFacilityId;\n-\n-\tEpisimPerson(Id<Person> personId, Attributes attrs, EpisimReporting reporting) {\n-\t\tthis.personId = personId;\n-\t\tthis.attributes = attrs;\n-\t\tthis.reporting = reporting;\n-\t}\n-\n-\tpublic Id<Person> getPersonId() {\n-\t\treturn personId;\n-\t}\n-\n-\tpublic DiseaseStatus getDiseaseStatus() {\n-\t\treturn status;\n-\t}\n-\n-\tpublic void setDiseaseStatus(double now, DiseaseStatus status) {\n-\t\tthis.status = status;\n-\t\tif (!statusChanges.containsKey(status))\n-\t\t\tstatusChanges.put(status, now);\n-\n-\t\treporting.reportPersonStatus(this, new EpisimPersonStatusEvent(now, personId, status));\n-\t}\n-\n-\tpublic QuarantineStatus getQuarantineStatus() {\n-\t\treturn quarantineStatus;\n-\t}\n-\n-\tpublic void setQuarantineStatus(QuarantineStatus quarantineStatus, int iteration) {\n-\t\tthis.quarantineStatus = quarantineStatus;\n-\t\tthis.quarantineDate = iteration;\n-\t}\n-\n-\n-\t/**\n-\t * Days elapsed since a certain status was set.\n-\t * This will always round the change as if it happened on the start of a day.\n-\t *\n-\t * @param status     requested status\n-\t * @param currentDay current day (iteration)\n-\t * @throws IllegalStateException when the requested status was never set\n-\t */\n-\tpublic int daysSince(DiseaseStatus status, int currentDay) {\n-\t\tif (!statusChanges.containsKey(status)) throw new IllegalStateException(\"Person was never \" + status);\n-\n-\t\tdouble day = Math.floor(statusChanges.get(status) / 86400d);\n-\n-\t\treturn currentDay - (int) day;\n-\t}\n-\n-\t/**\n-\t * Days elapsed since person was put into quarantine.\n-\t *\n-\t * @param currentDay current day (iteration)\n-\t * @apiNote This is currently not used much and may change similar to {@link #daysSince(DiseaseStatus, int)}.\n-\t */\n-\t@Beta\n-\tpublic int daysSinceQuarantine(int currentDay) {\n-\n-\t\t// yyyy since this API is so unstable, I would prefer to have the class non-public.  kai, apr'20\n-\t\t// -> api now marked as unstable and containing an api note, because it is used by the models it has to be public. chr, apr'20\n-\t\tif (quarantineDate < 0) throw new IllegalStateException(\"Person was never quarantined\");\n-\n-\t\treturn currentDay - quarantineDate;\n-\t}\n-\n-\tint getQuarantineDate() {\n-\t\treturn this.quarantineDate;\n-\t}\n-\n-\tString getLastFacilityId() {\n-\t\treturn this.lastFacilityId;\n-\t}\n-\n-\tvoid setLastFacilityId(String lastFacilityId) {\n-\t\tthis.lastFacilityId = lastFacilityId;\n-\t}\n-\n-\tpublic void addTraceableContactPerson(EpisimPerson personWrapper, double now) {\n-\t\t// check if both persons have tracing capability\n-\t\tif (isTraceable() && personWrapper.isTraceable())\n-\t\t\t// Always use the latest tracking date\n-\t\t\ttraceableContactPersons.put(personWrapper, now);\n-\t}\n-\n-\t/**\n-\t * Get all traced contacts that happened after certain time.\n-\t */\n-\tpublic Set<EpisimPerson> getTraceableContactPersons(double after) {\n-\t\treturn traceableContactPersons.keySet()\n-\t\t\t\t.stream().filter(k -> traceableContactPersons.get(k) >= after)\n-\t\t\t\t.collect(Collectors.toSet());\n-\t}\n-\n-\t/**\n-\t * Remove old contact tracing data before a certain date.\n-\t */\n-\tpublic void clearTraceableContractPersons(double before) {\n-\t\ttraceableContactPersons.keySet().removeIf(k -> traceableContactPersons.get(k) < before);\n-\t}\n-\n-\n-\t/**\n-\t * Returns whether the person can be traced. When {@link #TRACING_ATTR} is not set it is always true.\n-\t */\n-\tpublic boolean isTraceable() {\n-\t\tBoolean tracing = (Boolean) attributes.getAttribute(TRACING_ATTR);\n-\t\tif (tracing ==  null) return true;\n-\t\treturn tracing;\n-\t}\n-\n-\tvoid addToTrajectory(String trajectoryElement) {\n-\t\ttrajectory.add(trajectoryElement);\n-\t}\n-\n-\tpublic List<String> getTrajectory() {\n-\t\treturn trajectory;\n-\t}\n-\n-\tpublic int getCurrentPositionInTrajectory() {\n-\t\treturn this.currentPositionInTrajectory;\n-\t}\n-\n-\tvoid setCurrentPositionInTrajectory(int currentPositionInTrajectory) {\n-\t\tthis.currentPositionInTrajectory = currentPositionInTrajectory;\n-\t}\n-\n-\tpublic EpisimContainer<?> getCurrentContainer() {\n-\t\treturn currentContainer;\n-\t}\n-\n-\t/**\n-\t * Set the container the person is currently contained in. {@link #removeCurrentContainer(EpisimContainer)} must be called before a new\n-\t * container can be set.\n-\t */\n-\tpublic void setCurrentContainer(EpisimContainer<?> container) {\n-\t\tif (this.currentContainer != null)\n-\t\t\tthrow new IllegalStateException(String.format(\"Person in more than one container at once. Person=%s in %s and %s\",\n-\t\t\t\t\tthis.getPersonId(), container.getContainerId(), this.currentContainer.getContainerId()));\n-\n-\n-\t\tthis.currentContainer = container;\n-\t}\n-\n-\t@Override\n-\tpublic Attributes getAttributes() {\n-\t\treturn attributes;\n-\t}\n-\n-\t/**\n-\t * Whether person is currently in a container.\n-\t */\n-\tpublic boolean isInContainer() {\n-\t\treturn currentContainer != null;\n-\t}\n-\n-\tpublic void removeCurrentContainer(EpisimContainer<?> container) {\n-\t\tif (this.currentContainer != container)\n-\t\t\tthrow new IllegalStateException(String.format(\"Person is currently in %s, but not in removed one %s\", currentContainer, container));\n-\n-\t\tthis.currentContainer = null;\n-\t}\n-\n-\tString getFirstFacilityId() {\n-\t\treturn firstFacilityId;\n-\t}\n-\n-\tvoid setFirstFacilityId(String firstFacilityId) {\n-\t\tthis.firstFacilityId = firstFacilityId;\n-\t}\n-\n-\t/**\n-\t * Add amount of time to spent time for an activity.\n-\t */\n-\tpublic void addSpentTime(String actType, double timeSpent) {\n-\t\tspentTime.addToValue(actType, timeSpent);\n-\t}\n-\n-\t/**\n-\t * Spent time of this person by activity.\n-\t */\n-\tpublic MutableObjectDoubleMap<String> getSpentTime() {\n-\t\treturn spentTime;\n-\t}\n-\n-\t/**\n-\t * Disease status of a person.\n-\t */\n-\tpublic enum DiseaseStatus {susceptible, infectedButNotContagious, contagious, showingSymptoms, seriouslySick, critical, recovered}\n-\n-\t/**\n-\t * Quarantine status of a person.\n-\t */\n-\tpublic enum QuarantineStatus {full, atHome, no}\n-}\n+ /**\n+  * Attribute for the ability to be traced.\n+  */\n+\n+ public static final String TRACING_ATTR = \"hasTracing\";\n+ private final Id<Person> personId;\n+ private final EpisimReporting reporting;\n+ private final Attributes attributes;\n+ private final ObjectDoubleHashMap<EpisimPerson> traceableContactPersons = new ObjectDoubleHashMap<>();\n+ private final List<String> trajectory = new ArrayList<>();\n+\n+ /**\n+  * Stores first time of status changes to specific type.\n+  */\n+ private final EnumMap<DiseaseStatus, Double> statusChanges = new EnumMap<>(DiseaseStatus.class);\n+\n+ /**\n+  * Total spent time during activities.\n+  */\n+ private final MutableObjectDoubleMap<String> spentTime = new ObjectDoubleHashMap<>();\n+\n+ /**\n+  * The {@link EpisimContainer} the person is currently located in.\n+  */\n+ private EpisimContainer<?> currentContainer = null;\n+ /**\n+  * Current {@link DiseaseStatus}.\n+  */\n+ private DiseaseStatus status = DiseaseStatus.susceptible;\n+ /**\n+  * Current {@link QuarantineStatus}.\n+  */\n+ private QuarantineStatus quarantineStatus = QuarantineStatus.no;\n+\n+ /**\n+  * Iteration when this person got into quarantine. Negative if person was never quarantined.\n+  */\n+ private int quarantineDate = -1;\n+ private int currentPositionInTrajectory;\n+ /**\n+  * The last visited {@link org.matsim.facilities.ActivityFacility}.\n+  */\n+ private String lastFacilityId;\n+ private String firstFacilityId;\n+\n+ EpisimPerson(Id<Person> personId, Attributes attrs, EpisimReporting reporting) {\n+  this.personId = personId;\n+  this.attributes = attrs;\n+  this.reporting = reporting;\n+ }\n+\n+\n+ public Id<Person> getPersonId() {\n+  return personId;\n+ }\n+\n+\n+ public DiseaseStatus getDiseaseStatus() {\n+  return status;\n+ }\n+\n+\n+ public void setDiseaseStatus(double now, DiseaseStatus status) {\n+  this.status = status;\n+  if (!statusChanges.containsKey(status))\n+   statusChanges.put(status, now);\n+  reporting.reportPersonStatus(this, new EpisimPersonStatusEvent(now, personId, status));\n+ }\n+\n+\n+ public QuarantineStatus getQuarantineStatus() {\n+  return quarantineStatus;\n+ }\n+\n+\n+ public void setQuarantineStatus(QuarantineStatus quarantineStatus, int iteration) {\n+  this.quarantineStatus = quarantineStatus;\n+  this.quarantineDate = iteration;\n+ }\n+\n+\n+ /**\n+  * Days elapsed since a certain status was set.\n+  * This will always round the change as if it happened on the start of a day.\n+  *\n+  * @param status     requested status\n+  * @param currentDay current day (iteration)\n+  * @throws IllegalStateException when the requested status was never set\n+  */\n+\n+\n+ public int daysSince(DiseaseStatus status, int currentDay) {\n+\n+  if (!statusChanges.containsKey(status)) throw new IllegalStateException(\"Person was never \" + status);\n+\n+  double day = Math.floor(statusChanges.get(status) / 86400d);\n+  return currentDay - (int) day;\n+ }\n+\n+ /**\n+  * Days elapsed since person was put into quarantine.\n+  *\n+  * @param currentDay current day (iteration)\n+  * @apiNote This is currently not used much and may change similar to {@link #daysSince(DiseaseStatus, int)}.\n+  */\n+\n+ @Beta\n+ public int daysSinceQuarantine(int currentDay) {\n+\n+  // yyyy since this API is so unstable, I would prefer to have the class non-public.  kai, apr'20\n+  // -> api now marked as unstable and containing an api note, because it is used by the models it has to be public. chr, apr'20\n+\n+  if (quarantineDate < 0) throw new IllegalStateException(\"Person was never quarantined\");\n+  return currentDay - quarantineDate;\n+ }\n+\n+ int getQuarantineDate() {\n+  return this.quarantineDate;\n+ }\n+\n+ String getLastFacilityId() {\n+  return this.lastFacilityId;\n+ }\n+\n+ void setLastFacilityId(String lastFacilityId) {\n+  this.lastFacilityId = lastFacilityId;\n+ }\n+\n+\n+ public void addTraceableContactPerson(EpisimPerson personWrapper, double now) {\n+  // check if both persons have tracing capability\n+\n+  if (isTraceable() && personWrapper.isTraceable())\n+   // Always use the latest tracking date\n+   traceableContactPersons.put(personWrapper, now);\n+ }\n+\n+ /**\n+  * Get all traced contacts that happened after certain time.\n+  */\n+\n+\n+ public Set<EpisimPerson> getTraceableContactPersons(double after) {\n+  return traceableContactPersons.keySet().stream()\n+                                         .filter(k -> traceableContactPersons.get(k) >= after)\n+                                         .collect(Collectors.toSet());\n+ }\n+\n+ /**\n+  * Remove old contact tracing data before a certain date.\n+  */\n+\n+\n+ public void clearTraceableContractPersons(double before) {\n+  traceableContactPersons.keySet().removeIf(k -> traceableContactPersons.get(k) < before);\n+ }\n+\n+\n+ /**\n+  * Returns whether the person can be traced. When {@link #TRACING_ATTR} is not set it is always true.\n+  */\n+\n+\n+ public boolean isTraceable() {\n+  Boolean tracing = (Boolean) attributes.getAttribute(TRACING_ATTR);\n+  if (tracing == null)\n+   return true;\n+  return tracing;\n+ }\n+\n+ void addToTrajectory(String trajectoryElement) {\n+  trajectory.add(trajectoryElement);\n+ }\n+\n+\n+ public List<String> getTrajectory() {\n+  return trajectory;\n+ }\n+\n+\n+ public int getCurrentPositionInTrajectory() {\n+  return this.currentPositionInTrajectory;\n+ }\n+\n+ void setCurrentPositionInTrajectory(int currentPositionInTrajectory) {\n+  this.currentPositionInTrajectory = currentPositionInTrajectory;\n+ }\n+\n+\n+ public EpisimContainer<?> getCurrentContainer() {\n+  return currentContainer;\n+ }\n+\n+ /**\n+  * Set the container the person is currently contained in. {@link #removeCurrentContainer(EpisimContainer)} must be called before a new\n+  * container can be set.\n+  */\n+\n+\n+ public void setCurrentContainer(EpisimContainer<?> container) {\n+\n+  if (this.currentContainer != null) throw new IllegalStateException(String.format(\"Person in more than one container at once. Person=%s in %s and %s\",\n+                                                                                   this.getPersonId(),\n+                                                                                   container.getContainerId(),\n+                                                                                   this.currentContainer.getContainerId()));\n+  this.currentContainer = container;\n+ }\n+\n+ @Override\n+ public Attributes getAttributes() {\n+  return attributes;\n+ }\n+\n+ /**\n+  * Whether person is currently in a container.\n+  */\n+\n+\n+ public boolean isInContainer() {\n+  return currentContainer != null;\n+ }\n+\n+\n+ public void removeCurrentContainer(EpisimContainer<?> container) {\n+\n+  if (this.currentContainer != container) throw new IllegalStateException(String.format(\"Person is currently in %s, but not in removed one %s\", currentContainer, container));\n+  this.currentContainer = null;\n+ }\n+\n+ String getFirstFacilityId() {\n+  return firstFacilityId;\n+ }\n+\n+ void setFirstFacilityId(String firstFacilityId) {\n+  this.firstFacilityId = firstFacilityId;\n+ }\n+\n+ /**\n+  * Add amount of time to spent time for an activity.\n+  */\n+\n+\n+ public void addSpentTime(String actType, double timeSpent) {\n+  spentTime.addToValue(actType, timeSpent);\n+ }\n+\n+ /**\n+  * Spent time of this person by activity.\n+  */\n+\n+\n+ public MutableObjectDoubleMap<String> getSpentTime() {\n+  return spentTime;\n+ }\n+\n+ /**\n+  * Disease status of a person.\n+  */\n+\n+\n+ public enum DiseaseStatus {susceptible, infectedButNotContagious, contagious, showingSymptoms, seriouslySick, critical, recovered}\n+\n+ /**\n+  * Quarantine status of a person.\n+  */\n+\n+\n+ public enum QuarantineStatus {\n+\n+  full,\n+\n+  atHome,\n+\n+  no\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 279
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "193",
                    "column": "33",
                    "severity": "error",
                    "message": "Use a single space to separate non-whitespace characters.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "193",
                    "column": "33",
                    "severity": "error",
                    "message": "Use a single space to separate non-whitespace characters.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SingleSpaceSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "naturalize"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}