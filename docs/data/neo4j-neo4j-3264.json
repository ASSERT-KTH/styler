{
    "project_name": "neo4j-neo4j",
    "error_id": "3264",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "102",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "152",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "74",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "125",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "390",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "440",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "482",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "483",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "497",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "505",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "513",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "549",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3264/TransactionRecordState.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3264/TransactionRecordState.java\nindex a911181a15a..ae469c4528f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3264/TransactionRecordState.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3264/TransactionRecordState.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.recordstorage;\n \n import java.util.ArrayList;\n@@ -78,7 +79,7 @@ public class TransactionRecordState implements RecordState\n {\n     private static final CommandComparator COMMAND_COMPARATOR = new CommandComparator();\n     private static final Command[] EMPTY_COMMANDS = new Command[0];\n-    private static final Function<Mode,List<Command>> MODE_TO_ARRAY_LIST = mode -> new ArrayList<>();\n+    private static final Function<Mode, List<Command>> MODE_TO_ARRAY_LIST = mode -> new ArrayList<>();\n \n     private final NeoStores neoStores;\n     private final IntegrityValidator integrityValidator;\n@@ -98,9 +99,10 @@ public class TransactionRecordState implements RecordState\n \n     private boolean prepared;\n \n-    TransactionRecordState( NeoStores neoStores, IntegrityValidator integrityValidator, RecordChangeSet recordChangeSet,\n-            long lastCommittedTxWhenTransactionStarted, ResourceLocker locks, RelationshipCreator relationshipCreator, RelationshipDeleter relationshipDeleter,\n-            PropertyCreator propertyCreator, PropertyDeleter propertyDeleter, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    TransactionRecordState(NeoStores neoStores, IntegrityValidator integrityValidator, RecordChangeSet recordChangeSet,\n+                           long lastCommittedTxWhenTransactionStarted, ResourceLocker locks, RelationshipCreator relationshipCreator,\n+                           RelationshipDeleter relationshipDeleter,\n+                           PropertyCreator propertyCreator, PropertyDeleter propertyDeleter, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n         this.neoStores = neoStores;\n         this.nodeStore = neoStores.getNodeStore();\n@@ -120,91 +122,91 @@ public class TransactionRecordState implements RecordState\n     }\n \n     @Override\n-    public void extractCommands( Collection<StorageCommand> commands, MemoryTracker memoryTracker ) throws TransactionFailureException\n+    public void extractCommands(Collection<StorageCommand> commands, MemoryTracker memoryTracker) throws TransactionFailureException\n     {\n         assert !prepared : \"Transaction has already been prepared\";\n \n-        integrityValidator.validateTransactionStartKnowledge( lastCommittedTxWhenTransactionStarted );\n+        integrityValidator.validateTransactionStartKnowledge(lastCommittedTxWhenTransactionStarted);\n \n         int noOfCommands = recordChangeSet.changeSize();\n \n         var labelTokenChanges = recordChangeSet.getLabelTokenChanges().changes();\n-        memoryTracker.allocateHeap( labelTokenChanges.size() * Command.LabelTokenCommand.HEAP_SIZE );\n-        for ( RecordProxy<LabelTokenRecord, Void> record : labelTokenChanges )\n+        memoryTracker.allocateHeap(labelTokenChanges.size() * Command.LabelTokenCommand.HEAP_SIZE);\n+        for (RecordProxy<LabelTokenRecord, Void> record : labelTokenChanges)\n         {\n-            commands.add( new Command.LabelTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n+            commands.add(new Command.LabelTokenCommand(record.getBefore(), record.forReadingLinkage()));\n         }\n \n         var relationshipTypeTokenChanges = recordChangeSet.getRelationshipTypeTokenChanges().changes();\n-        memoryTracker.allocateHeap( relationshipTypeTokenChanges.size() * Command.RelationshipTypeTokenCommand.HEAP_SIZE );\n-        for ( RecordProxy<RelationshipTypeTokenRecord, Void> record : relationshipTypeTokenChanges )\n+        memoryTracker.allocateHeap(relationshipTypeTokenChanges.size() * Command.RelationshipTypeTokenCommand.HEAP_SIZE);\n+        for (RecordProxy<RelationshipTypeTokenRecord, Void> record : relationshipTypeTokenChanges)\n         {\n-            commands.add( new Command.RelationshipTypeTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n+            commands.add(new Command.RelationshipTypeTokenCommand(record.getBefore(), record.forReadingLinkage()));\n         }\n \n         var propertyKeyTokenChanges = recordChangeSet.getPropertyKeyTokenChanges().changes();\n-        memoryTracker.allocateHeap( propertyKeyTokenChanges.size() * Command.PropertyKeyTokenCommand.HEAP_SIZE );\n-        for ( RecordProxy<PropertyKeyTokenRecord, Void> record : propertyKeyTokenChanges )\n+        memoryTracker.allocateHeap(propertyKeyTokenChanges.size() * Command.PropertyKeyTokenCommand.HEAP_SIZE);\n+        for (RecordProxy<PropertyKeyTokenRecord, Void> record : propertyKeyTokenChanges)\n         {\n-            commands.add( new Command.PropertyKeyTokenCommand( record.getBefore(), record.forReadingLinkage() ) );\n+            commands.add(new Command.PropertyKeyTokenCommand(record.getBefore(), record.forReadingLinkage()));\n         }\n \n         // Collect nodes, relationships, properties\n         Command[] nodeCommands = EMPTY_COMMANDS;\n         int skippedCommands = 0;\n         var nodeChanges = recordChangeSet.getNodeRecords().changes();\n-        if ( !nodeChanges.isEmpty() )\n+        if (!nodeChanges.isEmpty())\n         {\n-            memoryTracker.allocateHeap( nodeChanges.size() * Command.NodeCommand.HEAP_SIZE );\n+            memoryTracker.allocateHeap(nodeChanges.size() * Command.NodeCommand.HEAP_SIZE);\n             nodeCommands = new Command[nodeChanges.size()];\n             int i = 0;\n-            for ( RecordProxy<NodeRecord, Void> change : nodeChanges )\n+            for (RecordProxy<NodeRecord, Void> change : nodeChanges)\n             {\n-                NodeRecord record = prepared( change, nodeStore );\n-                integrityValidator.validateNodeRecord( record );\n-                nodeCommands[i++] = new Command.NodeCommand( change.getBefore(), record );\n+                NodeRecord record = prepared(change, nodeStore);\n+                integrityValidator.validateNodeRecord(record);\n+                nodeCommands[i++] = new Command.NodeCommand(change.getBefore(), record);\n             }\n-            Arrays.sort( nodeCommands, COMMAND_COMPARATOR );\n+            Arrays.sort(nodeCommands, COMMAND_COMPARATOR);\n         }\n \n         Command[] relCommands = EMPTY_COMMANDS;\n         var relationshipChanges = recordChangeSet.getRelRecords().changes();\n-        if ( !relationshipChanges.isEmpty() )\n+        if (!relationshipChanges.isEmpty())\n         {\n-            memoryTracker.allocateHeap( relationshipChanges.size() * Command.RelationshipCommand.HEAP_SIZE );\n+            memoryTracker.allocateHeap(relationshipChanges.size() * Command.RelationshipCommand.HEAP_SIZE);\n             relCommands = new Command[relationshipChanges.size()];\n             int i = 0;\n-            for ( RecordProxy<RelationshipRecord, Void> change : relationshipChanges )\n+            for (RecordProxy<RelationshipRecord, Void> change : relationshipChanges)\n             {\n-                relCommands[i++] = new Command.RelationshipCommand( change.getBefore(), prepared( change, relationshipStore ) );\n+                relCommands[i++] = new Command.RelationshipCommand(change.getBefore(), prepared(change, relationshipStore));\n             }\n-            Arrays.sort( relCommands, COMMAND_COMPARATOR );\n+            Arrays.sort(relCommands, COMMAND_COMPARATOR);\n         }\n \n         Command[] propCommands = EMPTY_COMMANDS;\n         var propertyChanges = recordChangeSet.getPropertyRecords().changes();\n-        if ( !propertyChanges.isEmpty() )\n+        if (!propertyChanges.isEmpty())\n         {\n-            memoryTracker.allocateHeap( propertyChanges.size() * Command.PropertyCommand.HEAP_SIZE );\n+            memoryTracker.allocateHeap(propertyChanges.size() * Command.PropertyCommand.HEAP_SIZE);\n             propCommands = new Command[propertyChanges.size()];\n             int i = 0;\n-            for ( RecordProxy<PropertyRecord, PrimitiveRecord> change : propertyChanges )\n+            for (RecordProxy<PropertyRecord, PrimitiveRecord> change : propertyChanges)\n             {\n-                propCommands[i++] = new Command.PropertyCommand( change.getBefore(), prepared( change, propertyStore ) );\n+                propCommands[i++] = new Command.PropertyCommand(change.getBefore(), prepared(change, propertyStore));\n             }\n-            Arrays.sort( propCommands, COMMAND_COMPARATOR );\n+            Arrays.sort(propCommands, COMMAND_COMPARATOR);\n         }\n \n         Command[] relGroupCommands = EMPTY_COMMANDS;\n         var relationshipGroupChanges = recordChangeSet.getRelGroupRecords().changes();\n-        if ( !relationshipGroupChanges.isEmpty() )\n+        if (!relationshipGroupChanges.isEmpty())\n         {\n-            memoryTracker.allocateHeap( relationshipGroupChanges.size() * Command.RelationshipGroupCommand.HEAP_SIZE );\n+            memoryTracker.allocateHeap(relationshipGroupChanges.size() * Command.RelationshipGroupCommand.HEAP_SIZE);\n             relGroupCommands = new Command[relationshipGroupChanges.size()];\n             int i = 0;\n-            for ( RecordProxy<RelationshipGroupRecord, Integer> change : relationshipGroupChanges )\n+            for (RecordProxy<RelationshipGroupRecord, Integer> change : relationshipGroupChanges)\n             {\n-                if ( change.isCreated() && !change.forReadingLinkage().inUse() )\n+                if (change.isCreated() && !change.forReadingLinkage().inUse())\n                 {\n                     /*\n                      * This is an edge case that may come up and which we must handle properly. Relationship groups are\n@@ -230,75 +232,75 @@ public class TransactionRecordState implements RecordState\n                     skippedCommands++;\n                     continue;\n                 }\n-                relGroupCommands[i++] = new Command.RelationshipGroupCommand( change.getBefore(),\n-                        prepared( change, relationshipGroupStore ) );\n+                relGroupCommands[i++] = new Command.RelationshipGroupCommand(change.getBefore(),\n+                  prepared(change, relationshipGroupStore));\n             }\n-            relGroupCommands = i < relGroupCommands.length ? Arrays.copyOf( relGroupCommands, i ) : relGroupCommands;\n-            Arrays.sort( relGroupCommands, COMMAND_COMPARATOR );\n+            relGroupCommands = i < relGroupCommands.length ? Arrays.copyOf(relGroupCommands, i) : relGroupCommands;\n+            Arrays.sort(relGroupCommands, COMMAND_COMPARATOR);\n         }\n \n-        addFiltered( commands, Mode.CREATE, propCommands, relCommands, relGroupCommands, nodeCommands );\n-        addFiltered( commands, Mode.UPDATE, propCommands, relCommands, relGroupCommands, nodeCommands );\n-        addFiltered( commands, Mode.DELETE, relCommands, relGroupCommands, nodeCommands );\n+        addFiltered(commands, Mode.CREATE, propCommands, relCommands, relGroupCommands, nodeCommands);\n+        addFiltered(commands, Mode.UPDATE, propCommands, relCommands, relGroupCommands, nodeCommands);\n+        addFiltered(commands, Mode.DELETE, relCommands, relGroupCommands, nodeCommands);\n \n-        EnumMap<Mode,List<Command>> schemaChangeByMode = new EnumMap<>( Mode.class );\n+        EnumMap<Mode, List<Command>> schemaChangeByMode = new EnumMap<>(Mode.class);\n         var schemaRuleChange = recordChangeSet.getSchemaRuleChanges().changes();\n-        memoryTracker.allocateHeap( schemaRuleChange.size() * Command.SchemaRuleCommand.HEAP_SIZE );\n-        for ( RecordProxy<SchemaRecord,SchemaRule> change : schemaRuleChange )\n+        memoryTracker.allocateHeap(schemaRuleChange.size() * Command.SchemaRuleCommand.HEAP_SIZE);\n+        for (RecordProxy<SchemaRecord, SchemaRule> change : schemaRuleChange)\n         {\n             SchemaRecord schemaRecord = change.forReadingLinkage();\n             SchemaRule rule = change.getAdditionalData();\n-            if ( schemaRecord.inUse() )\n+            if (schemaRecord.inUse())\n             {\n-                integrityValidator.validateSchemaRule( rule );\n+                integrityValidator.validateSchemaRule(rule);\n             }\n-            Command.SchemaRuleCommand cmd = new Command.SchemaRuleCommand( change.getBefore(), change.forChangingData(), rule );\n-            schemaChangeByMode.computeIfAbsent( cmd.getMode(), MODE_TO_ARRAY_LIST ).add( cmd );\n+            Command.SchemaRuleCommand cmd = new Command.SchemaRuleCommand(change.getBefore(), change.forChangingData(), rule);\n+            schemaChangeByMode.computeIfAbsent(cmd.getMode(), MODE_TO_ARRAY_LIST).add(cmd);\n         }\n \n-        commands.addAll( schemaChangeByMode.getOrDefault( Mode.DELETE, Collections.emptyList() ) );\n-        commands.addAll( schemaChangeByMode.getOrDefault( Mode.CREATE, Collections.emptyList() ) );\n-        commands.addAll( schemaChangeByMode.getOrDefault( Mode.UPDATE, Collections.emptyList() ) );\n+        commands.addAll(schemaChangeByMode.getOrDefault(Mode.DELETE, Collections.emptyList()));\n+        commands.addAll(schemaChangeByMode.getOrDefault(Mode.CREATE, Collections.emptyList()));\n+        commands.addAll(schemaChangeByMode.getOrDefault(Mode.UPDATE, Collections.emptyList()));\n \n         // Add deleted property commands last, so they happen after the schema record changes.\n         // This extends the lifetime of property records just past the last moment of use,\n         // and prevents reading and deleting of schema records from racing, and making the\n         // schema records look malformed.\n-        addFiltered( commands, Mode.DELETE, propCommands );\n+        addFiltered(commands, Mode.DELETE, propCommands);\n \n-        assert commands.size() == noOfCommands - skippedCommands : format( \"Expected %d final commands, got %d \" +\n-                \"instead, with %d skipped\", noOfCommands, commands.size(), skippedCommands );\n+        assert commands.size() == noOfCommands - skippedCommands : format(\"Expected %d final commands, got %d \" +\n+          \"instead, with %d skipped\", noOfCommands, commands.size(), skippedCommands);\n \n         prepared = true;\n     }\n \n     private <RECORD extends AbstractBaseRecord> RECORD prepared(\n-            RecordProxy<RECORD,?> proxy, RecordStore<RECORD> store )\n+      RecordProxy<RECORD, ?> proxy, RecordStore<RECORD> store)\n     {\n         RECORD after = proxy.forReadingLinkage();\n-        store.prepareForCommit( after, cursorTracer );\n+        store.prepareForCommit(after, cursorTracer);\n         return after;\n     }\n \n-    void relCreate( long id, int typeId, long startNodeId, long endNodeId )\n+    void relCreate(long id, int typeId, long startNodeId, long endNodeId)\n     {\n-        relationshipCreator.relationshipCreate( id, typeId, startNodeId, endNodeId, recordChangeSet, locks );\n+        relationshipCreator.relationshipCreate(id, typeId, startNodeId, endNodeId, recordChangeSet, locks);\n     }\n \n-    void relDelete( long relId )\n+    void relDelete(long relId)\n     {\n-        relationshipDeleter.relDelete( relId, recordChangeSet, locks );\n+        relationshipDeleter.relDelete(relId, recordChangeSet, locks);\n     }\n \n-    private void addFiltered( Collection<StorageCommand> target, Mode mode, Command[]... commands )\n+    private void addFiltered(Collection<StorageCommand> target, Mode mode, Command[]... commands)\n     {\n-        for ( Command[] c : commands )\n+        for (Command[] c : commands)\n         {\n-            for ( Command command : c )\n+            for (Command command : c)\n             {\n-                if ( command.getMode() == mode )\n+                if (command.getMode() == mode)\n                 {\n-                    target.add( command );\n+                    target.add(command);\n                 }\n             }\n         }\n@@ -309,121 +311,125 @@ public class TransactionRecordState implements RecordState\n      *\n      * @param nodeId The id of the node to delete.\n      */\n-    public void nodeDelete( long nodeId )\n+    public void nodeDelete(long nodeId)\n     {\n-        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null, cursorTracer ).forChangingData();\n-        if ( !nodeRecord.inUse() )\n+        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null, cursorTracer).forChangingData();\n+        if (!nodeRecord.inUse())\n         {\n-            throw new IllegalStateException( \"Unable to delete Node[\" + nodeId +\n-                                             \"] since it has already been deleted.\" );\n+            throw new IllegalStateException(\"Unable to delete Node[\" + nodeId +\n+              \"] since it has already been deleted.\");\n         }\n-        nodeRecord.setInUse( false );\n-        nodeRecord.setLabelField( Record.NO_LABELS_FIELD.intValue(),\n-                markNotInUse( nodeRecord.getDynamicLabelRecords() ) );\n-        getAndDeletePropertyChain( nodeRecord );\n+        nodeRecord.setInUse(false);\n+        nodeRecord.setLabelField(Record.NO_LABELS_FIELD.intValue(),\n+          markNotInUse(nodeRecord.getDynamicLabelRecords()));\n+        getAndDeletePropertyChain(nodeRecord);\n     }\n \n-    private Collection<DynamicRecord> markNotInUse( Collection<DynamicRecord> dynamicLabelRecords )\n+    private Collection<DynamicRecord> markNotInUse(Collection<DynamicRecord> dynamicLabelRecords)\n     {\n-        for ( DynamicRecord record : dynamicLabelRecords )\n+        for (DynamicRecord record : dynamicLabelRecords)\n         {\n-            record.setInUse( false );\n+            record.setInUse(false);\n         }\n         return dynamicLabelRecords;\n     }\n \n-    private void getAndDeletePropertyChain( PrimitiveRecord record )\n+    private void getAndDeletePropertyChain(PrimitiveRecord record)\n     {\n-        propertyDeleter.deletePropertyChain( record, recordChangeSet.getPropertyRecords() );\n+        propertyDeleter.deletePropertyChain(record, recordChangeSet.getPropertyRecords());\n     }\n \n     /**\n      * Removes the given property identified by its index from the relationship\n      * with the given id.\n      *\n-     * @param relId The id of the relationship that is to have the property removed.\n+     * @param relId       The id of the relationship that is to have the property removed.\n      * @param propertyKey The index key of the property.\n      */\n-    void relRemoveProperty( long relId, int propertyKey )\n+    void relRemoveProperty(long relId, int propertyKey)\n     {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null, cursorTracer );\n-        propertyDeleter.removeProperty( rel, propertyKey, recordChangeSet.getPropertyRecords() );\n+        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad(relId, null, cursorTracer);\n+        propertyDeleter.removeProperty(rel, propertyKey, recordChangeSet.getPropertyRecords());\n     }\n \n     /**\n      * Removes the given property identified by indexKeyId of the node with the\n      * given id.\n      *\n-     * @param nodeId The id of the node that is to have the property removed.\n+     * @param nodeId      The id of the node that is to have the property removed.\n      * @param propertyKey The index key of the property.\n      */\n-    public void nodeRemoveProperty( long nodeId, int propertyKey )\n+    public void nodeRemoveProperty(long nodeId, int propertyKey)\n     {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null, cursorTracer );\n-        propertyDeleter.removeProperty( node, propertyKey, recordChangeSet.getPropertyRecords() );\n+        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null, cursorTracer);\n+        propertyDeleter.removeProperty(node, propertyKey, recordChangeSet.getPropertyRecords());\n     }\n \n     /**\n      * Changes an existing property's value of the given relationship, with the\n      * given index to the passed value\n-     * @param relId The id of the relationship which holds the property to change.\n+     *\n+     * @param relId       The id of the relationship which holds the property to change.\n      * @param propertyKey The index of the key of the property to change.\n-     * @param value The new value of the property.\n+     * @param value       The new value of the property.\n      */\n-    void relChangeProperty( long relId, int propertyKey, Value value )\n+    void relChangeProperty(long relId, int propertyKey, Value value)\n     {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null, cursorTracer );\n-        propertyCreator.primitiveSetProperty( rel, propertyKey, value, recordChangeSet.getPropertyRecords() );\n+        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad(relId, null, cursorTracer);\n+        propertyCreator.primitiveSetProperty(rel, propertyKey, value, recordChangeSet.getPropertyRecords());\n     }\n \n     /**\n      * Changes an existing property of the given node, with the given index to\n      * the passed value\n-     * @param nodeId The id of the node which holds the property to change.\n+     *\n+     * @param nodeId      The id of the node which holds the property to change.\n      * @param propertyKey The index of the key of the property to change.\n-     * @param value The new value of the property.\n+     * @param value       The new value of the property.\n      */\n-    void nodeChangeProperty( long nodeId, int propertyKey, Value value )\n+    void nodeChangeProperty(long nodeId, int propertyKey, Value value)\n     {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null, cursorTracer );\n-        propertyCreator.primitiveSetProperty( node, propertyKey, value, recordChangeSet.getPropertyRecords() );\n+        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null, cursorTracer);\n+        propertyCreator.primitiveSetProperty(node, propertyKey, value, recordChangeSet.getPropertyRecords());\n     }\n \n     /**\n      * Adds a property to the given relationship, with the given index and\n      * value.\n-     * @param relId The id of the relationship to which to add the property.\n+     *\n+     * @param relId       The id of the relationship to which to add the property.\n      * @param propertyKey The index of the key of the property to add.\n-     * @param value The value of the property.\n+     * @param value       The value of the property.\n      */\n-    void relAddProperty( long relId, int propertyKey, Value value )\n+    void relAddProperty(long relId, int propertyKey, Value value)\n     {\n-        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad( relId, null, cursorTracer );\n-        propertyCreator.primitiveSetProperty( rel, propertyKey, value, recordChangeSet.getPropertyRecords() );\n+        RecordProxy<RelationshipRecord, Void> rel = recordChangeSet.getRelRecords().getOrLoad(relId, null, cursorTracer);\n+        propertyCreator.primitiveSetProperty(rel, propertyKey, value, recordChangeSet.getPropertyRecords());\n     }\n \n     /**\n      * Adds a property to the given node, with the given index and value.\n-     * @param nodeId The id of the node to which to add the property.\n+     *\n+     * @param nodeId      The id of the node to which to add the property.\n      * @param propertyKey The index of the key of the property to add.\n-     * @param value The value of the property.\n+     * @param value       The value of the property.\n      */\n-    void nodeAddProperty( long nodeId, int propertyKey, Value value )\n+    void nodeAddProperty(long nodeId, int propertyKey, Value value)\n     {\n-        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null, cursorTracer );\n-        propertyCreator.primitiveSetProperty( node, propertyKey, value, recordChangeSet.getPropertyRecords() );\n+        RecordProxy<NodeRecord, Void> node = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null, cursorTracer);\n+        propertyCreator.primitiveSetProperty(node, propertyKey, value, recordChangeSet.getPropertyRecords());\n     }\n \n-    void addLabelToNode( long labelId, long nodeId )\n+    void addLabelToNode(long labelId, long nodeId)\n     {\n-        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null, cursorTracer ).forChangingData();\n-        parseLabelsField( nodeRecord ).add( labelId, nodeStore, nodeStore.getDynamicLabelStore(), cursorTracer, memoryTracker );\n+        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null, cursorTracer).forChangingData();\n+        parseLabelsField(nodeRecord).add(labelId, nodeStore, nodeStore.getDynamicLabelStore(), cursorTracer, memoryTracker);\n     }\n \n-    void removeLabelFromNode( long labelId, long nodeId )\n+    void removeLabelFromNode(long labelId, long nodeId)\n     {\n-        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad( nodeId, null, cursorTracer ).forChangingData();\n-        parseLabelsField( nodeRecord ).remove( labelId, nodeStore, cursorTracer, memoryTracker );\n+        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().getOrLoad(nodeId, null, cursorTracer).forChangingData();\n+        parseLabelsField(nodeRecord).remove(labelId, nodeStore, cursorTracer, memoryTracker);\n     }\n \n     /**\n@@ -431,10 +437,10 @@ public class TransactionRecordState implements RecordState\n      *\n      * @param nodeId The id of the node to create.\n      */\n-    public void nodeCreate( long nodeId )\n+    public void nodeCreate(long nodeId)\n     {\n-        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().create( nodeId, null, cursorTracer ).forChangingData();\n-        nodeRecord.setInUse( true );\n+        NodeRecord nodeRecord = recordChangeSet.getNodeRecords().create(nodeId, null, cursorTracer).forChangingData();\n+        nodeRecord.setInUse(true);\n         nodeRecord.setCreated();\n     }\n \n@@ -442,22 +448,22 @@ public class TransactionRecordState implements RecordState\n      * Creates a property index entry out of the given id and string.\n      *\n      * @param key The key of the property index, as a string.\n-     * @param id The property index record id.\n+     * @param id  The property index record id.\n      */\n-    void createPropertyKeyToken( String key, long id, boolean internal )\n+    void createPropertyKeyToken(String key, long id, boolean internal)\n     {\n-        createToken( neoStores.getPropertyKeyTokenStore(), key, id, internal, recordChangeSet.getPropertyKeyTokenChanges(), cursorTracer, memoryTracker );\n+        createToken(neoStores.getPropertyKeyTokenStore(), key, id, internal, recordChangeSet.getPropertyKeyTokenChanges(), cursorTracer, memoryTracker);\n     }\n \n     /**\n      * Creates a property index entry out of the given id and string.\n      *\n      * @param name The key of the property index, as a string.\n-     * @param id The property index record id.\n+     * @param id   The property index record id.\n      */\n-    void createLabelToken( String name, long id, boolean internal )\n+    void createLabelToken(String name, long id, boolean internal)\n     {\n-        createToken( neoStores.getLabelTokenStore(), name, id, internal, recordChangeSet.getLabelTokenChanges(), cursorTracer, memoryTracker );\n+        createToken(neoStores.getLabelTokenStore(), name, id, internal, recordChangeSet.getLabelTokenChanges(), cursorTracer, memoryTracker);\n     }\n \n     /**\n@@ -465,81 +471,81 @@ public class TransactionRecordState implements RecordState\n      * given name.\n      *\n      * @param name The name of the relationship type.\n-     * @param id The id of the new relationship type record.\n+     * @param id   The id of the new relationship type record.\n      */\n-    void createRelationshipTypeToken( String name, long id, boolean internal )\n+    void createRelationshipTypeToken(String name, long id, boolean internal)\n     {\n-        createToken( neoStores.getRelationshipTypeTokenStore(), name, id, internal, recordChangeSet.getRelationshipTypeTokenChanges(), cursorTracer,\n-                     memoryTracker );\n+        createToken(neoStores.getRelationshipTypeTokenStore(), name, id, internal, recordChangeSet.getRelationshipTypeTokenChanges(), cursorTracer,\n+          memoryTracker);\n     }\n \n-    private static <R extends TokenRecord> void createToken( TokenStore<R> store, String name, long id, boolean internal, RecordAccess<R,Void> recordAccess,\n-            PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    private static <R extends TokenRecord> void createToken(TokenStore<R> store, String name, long id, boolean internal, RecordAccess<R, Void> recordAccess,\n+                                                            PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        R record = recordAccess.create( id, null, cursorTracer ).forChangingData();\n-        record.setInUse( true );\n-        record.setInternal( internal );\n+        R record = recordAccess.create(id, null, cursorTracer).forChangingData();\n+        record.setInUse(true);\n+        record.setInternal(internal);\n         record.setCreated();\n-        Collection<DynamicRecord> nameRecords = store.allocateNameRecords( encodeString( name ), cursorTracer, memoryTracker );\n-        record.setNameId( (int) Iterables.first( nameRecords ).getId() );\n-        record.addNameRecords( nameRecords );\n+        Collection<DynamicRecord> nameRecords = store.allocateNameRecords(encodeString(name), cursorTracer, memoryTracker);\n+        record.setNameId((int) Iterables.first(nameRecords).getId());\n+        record.addNameRecords(nameRecords);\n     }\n \n     private static class CommandComparator implements Comparator<Command>\n     {\n         @Override\n-        public int compare( Command o1, Command o2 )\n+        public int compare(Command o1, Command o2)\n         {\n             long id1 = o1.getKey();\n             long id2 = o2.getKey();\n-            return Long.compare( id1, id2 );\n+            return Long.compare(id1, id2);\n         }\n     }\n \n-    void schemaRuleCreate( long ruleId, boolean isConstraint, SchemaRule rule )\n+    void schemaRuleCreate(long ruleId, boolean isConstraint, SchemaRule rule)\n     {\n-        SchemaRecord record = recordChangeSet.getSchemaRuleChanges().create( ruleId, rule, cursorTracer ).forChangingData();\n-        record.setInUse( true );\n+        SchemaRecord record = recordChangeSet.getSchemaRuleChanges().create(ruleId, rule, cursorTracer).forChangingData();\n+        record.setInUse(true);\n         record.setCreated();\n-        record.setConstraint( isConstraint );\n+        record.setConstraint(isConstraint);\n     }\n \n-    void schemaRuleDelete( long ruleId, SchemaRule rule )\n+    void schemaRuleDelete(long ruleId, SchemaRule rule)\n     {\n-        RecordProxy<SchemaRecord,SchemaRule> proxy = recordChangeSet.getSchemaRuleChanges().getOrLoad( ruleId, rule, cursorTracer );\n+        RecordProxy<SchemaRecord, SchemaRule> proxy = recordChangeSet.getSchemaRuleChanges().getOrLoad(ruleId, rule, cursorTracer);\n         SchemaRecord record = proxy.forReadingData();\n-        if ( record.inUse() )\n+        if (record.inUse())\n         {\n             record = proxy.forChangingData();\n-            record.setInUse( false );\n-            getAndDeletePropertyChain( record );\n+            record.setInUse(false);\n+            getAndDeletePropertyChain(record);\n         }\n         // Index schema rules may be deleted twice, if they were owned by a constraint; once for dropping the index, and then again as part of\n         // dropping the constraint. So we keep this method idempotent.\n     }\n \n-    void schemaRuleSetProperty( long ruleId, int propertyKeyId, Value value, SchemaRule rule )\n+    void schemaRuleSetProperty(long ruleId, int propertyKeyId, Value value, SchemaRule rule)\n     {\n-        RecordProxy<SchemaRecord, SchemaRule> record = recordChangeSet.getSchemaRuleChanges().getOrLoad( ruleId, rule, cursorTracer );\n-        propertyCreator.primitiveSetProperty( record, propertyKeyId, value, recordChangeSet.getPropertyRecords() );\n+        RecordProxy<SchemaRecord, SchemaRule> record = recordChangeSet.getSchemaRuleChanges().getOrLoad(ruleId, rule, cursorTracer);\n+        propertyCreator.primitiveSetProperty(record, propertyKeyId, value, recordChangeSet.getPropertyRecords());\n     }\n \n-    void schemaRuleSetIndexOwner( IndexDescriptor rule, long constraintId, int propertyKeyId, Value value )\n+    void schemaRuleSetIndexOwner(IndexDescriptor rule, long constraintId, int propertyKeyId, Value value)\n     {\n         // It is possible that the added property will only modify the property chain and leave the owning record untouched.\n         // However, we need the schema record to be marked as updated so that an UPDATE schema command is generated.\n         // Otherwise, the command appliers, who are responsible for activating index proxies and clearing the schema cache,\n         // will not notice our change.\n         long ruleId = rule.getId();\n-        rule = rule.withOwningConstraintId( constraintId );\n-        RecordAccess<SchemaRecord,SchemaRule> changes = recordChangeSet.getSchemaRuleChanges();\n-        RecordProxy<SchemaRecord,SchemaRule> record = changes.getOrLoad( ruleId, rule, cursorTracer );\n-        changes.setRecord( ruleId, record.forReadingData(), rule, cursorTracer ).forChangingData();\n-        propertyCreator.primitiveSetProperty( record, propertyKeyId, value, recordChangeSet.getPropertyRecords() );\n+        rule = rule.withOwningConstraintId(constraintId);\n+        RecordAccess<SchemaRecord, SchemaRule> changes = recordChangeSet.getSchemaRuleChanges();\n+        RecordProxy<SchemaRecord, SchemaRule> record = changes.getOrLoad(ruleId, rule, cursorTracer);\n+        changes.setRecord(ruleId, record.forReadingData(), rule, cursorTracer).forChangingData();\n+        propertyCreator.primitiveSetProperty(record, propertyKeyId, value, recordChangeSet.getPropertyRecords());\n     }\n \n     public interface PropertyReceiver<P extends StorageProperty>\n     {\n-        void receive( P property, long propertyRecordId );\n+        void receive(P property, long propertyRecordId);\n     }\n }\n",
            "diff_size": 163
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}