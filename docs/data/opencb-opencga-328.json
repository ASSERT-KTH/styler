{
    "project_name": "opencb-opencga",
    "error_id": "328",
    "information": {
        "errors": [
            {
                "line": "182",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 144).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    private void custom() throws Exception {\n        InterpretationCommandOptions.ZettaInterpretationCommandOptions options = interpretationCommandOptions.zettaInterpretationCommandOptions;\n\n        // Prepare analysis parameters and config\n        String token = options.commonOptions.token;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/328/InterpretationCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/328/InterpretationCommandExecutor.java\nindex f0b0f3817ad..2a4aa670d90 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/328/InterpretationCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/328/InterpretationCommandExecutor.java\n@@ -40,79 +40,79 @@ import java.util.Map;\n \n public class InterpretationCommandExecutor extends InternalCommandExecutor {\n \n-    private final InterpretationCommandOptions interpretationCommandOptions;\n+  private final InterpretationCommandOptions interpretationCommandOptions;\n+\n+  public InterpretationCommandExecutor(InterpretationCommandOptions options) {\n+    super(options.analysisCommonOptions);\n+    interpretationCommandOptions = options;\n+  }\n+\n+  @Override\n+  public void execute() throws Exception {\n+    logger.debug(\"Executing interpretation command line\");\n+\n+    String subCommandString = getParsedSubCommand(interpretationCommandOptions.jCommander);\n+    configure();\n+    switch (subCommandString) {\n+      case TeamInterpretationAnalysis.ID + \"-run\":\n+        team();\n+        break;\n+//            case TieringInterpretationAnalysis.ID + \"-run\":\n+//                tiering();\n+//                break;\n+      case CancerTieringInterpretationAnalysis.ID + \"-run\":\n+        cancerTiering();\n+        break;\n+      case ZettaInterpretationAnalysis.ID + \"-run\":\n+        custom();\n+        break;\n+      default:\n+        logger.error(\"Subcommand not valid\");\n+        break;\n \n-    public InterpretationCommandExecutor(InterpretationCommandOptions options) {\n-        super(options.analysisCommonOptions);\n-        interpretationCommandOptions = options;\n     }\n+  }\n \n-    @Override\n-    public void execute() throws Exception {\n-        logger.debug(\"Executing interpretation command line\");\n+  private void team() throws Exception {\n+    InterpretationCommandOptions.TeamCommandOptions options = interpretationCommandOptions.teamCommandOptions;\n \n-        String subCommandString = getParsedSubCommand(interpretationCommandOptions.jCommander);\n-        configure();\n-        switch (subCommandString) {\n-            case TeamInterpretationAnalysis.ID + \"-run\":\n-                team();\n-                break;\n-//            case TieringInterpretationAnalysis.ID + \"-run\":\n-//                tiering();\n-//                break;\n-            case CancerTieringInterpretationAnalysis.ID + \"-run\":\n-                cancerTiering();\n-                break;\n-            case ZettaInterpretationAnalysis.ID + \"-run\":\n-                custom();\n-                break;\n-            default:\n-                logger.error(\"Subcommand not valid\");\n-                break;\n-\n-        }\n+    // Prepare analysis parameters and config\n+    String token = options.commonOptions.token;\n+\n+    String studyId = options.studyId;\n+    String clinicalAnalysisId = options.clinicalAnalysisId;\n+\n+    if (StringUtils.isEmpty(options.panelIds)) {\n+      throw new ToolException(\"Missing panel ids\");\n     }\n+    List<String> panelList = Arrays.asList(StringUtils.split(options.panelIds, \",\"));\n \n-    private void team() throws Exception {\n-        InterpretationCommandOptions.TeamCommandOptions options = interpretationCommandOptions.teamCommandOptions;\n-\n-        // Prepare analysis parameters and config\n-        String token = options.commonOptions.token;\n-\n-        String studyId = options.studyId;\n-        String clinicalAnalysisId = options.clinicalAnalysisId;\n-\n-        if (StringUtils.isEmpty(options.panelIds)) {\n-            throw new ToolException(\"Missing panel ids\");\n-        }\n-        List<String> panelList = Arrays.asList(StringUtils.split(options.panelIds, \",\"));\n-\n-        ClinicalProperty.ModeOfInheritance moi;\n-        try {\n-            moi = ClinicalProperty.ModeOfInheritance.valueOf(options.familySegregation);\n-        } catch (IllegalArgumentException e) {\n-            throw new ToolException(\"Unknown family segregation value: \" + options.familySegregation);\n-        }\n-\n-        TeamInterpretationConfiguration config = new TeamInterpretationConfiguration();\n-        config.setIncludeLowCoverage(options.includeLowCoverage);\n-        config.setMaxLowCoverage(options.maxLowCoverage);\n-        config.setSkipUntieredVariants(!options.includeUntieredVariants);\n-\n-        Path outDir = Paths.get(options.outDir);\n-        Path opencgaHome = Paths.get(configuration.getWorkspace()).getParent();\n-\n-        // Execute TEAM analysis\n-        TeamInterpretationAnalysis teamAnalysis = new TeamInterpretationAnalysis();\n-        teamAnalysis.setUp(opencgaHome.toString(), new ObjectMap(), outDir, token);\n-        teamAnalysis.setStudyId(studyId)\n-                .setClinicalAnalysisId(clinicalAnalysisId)\n-                .setDiseasePanelIds(panelList)\n-                .setMoi(moi)\n-                .setConfig(config);\n-        teamAnalysis.start();\n+    ClinicalProperty.ModeOfInheritance moi;\n+    try {\n+      moi = ClinicalProperty.ModeOfInheritance.valueOf(options.familySegregation);\n+    } catch (IllegalArgumentException e) {\n+      throw new ToolException(\"Unknown family segregation value: \" + options.familySegregation);\n     }\n \n+    TeamInterpretationConfiguration config = new TeamInterpretationConfiguration();\n+    config.setIncludeLowCoverage(options.includeLowCoverage);\n+    config.setMaxLowCoverage(options.maxLowCoverage);\n+    config.setSkipUntieredVariants(!options.includeUntieredVariants);\n+\n+    Path outDir = Paths.get(options.outDir);\n+    Path opencgaHome = Paths.get(configuration.getWorkspace()).getParent();\n+\n+    // Execute TEAM analysis\n+    TeamInterpretationAnalysis teamAnalysis = new TeamInterpretationAnalysis();\n+    teamAnalysis.setUp(opencgaHome.toString(), new ObjectMap(), outDir, token);\n+    teamAnalysis.setStudyId(studyId)\n+        .setClinicalAnalysisId(clinicalAnalysisId)\n+        .setDiseasePanelIds(panelList)\n+        .setMoi(moi)\n+        .setConfig(config);\n+    teamAnalysis.start();\n+  }\n+\n //    private void tiering() throws Exception {\n //        InterpretationCommandOptions.TieringCommandOptions options = interpretationCommandOptions.tieringCommandOptions;\n //\n@@ -148,65 +148,65 @@ public class InterpretationCommandExecutor extends InternalCommandExecutor {\n //        tieringAnalysis.start();\n //    }\n \n-    private void cancerTiering() throws Exception {\n-        InterpretationCommandOptions.CancerTieringCommandOptions options = interpretationCommandOptions.cancerTieringCommandOptions;\n-\n-        // Prepare analysis parameters and config\n-        String token = options.commonOptions.token;\n+  private void cancerTiering() throws Exception {\n+    InterpretationCommandOptions.CancerTieringCommandOptions options = interpretationCommandOptions.cancerTieringCommandOptions;\n \n-        String studyId = options.studyId;\n-        String clinicalAnalysisId = options.clinicalAnalysisId;\n+    // Prepare analysis parameters and config\n+    String token = options.commonOptions.token;\n \n-        List<String> variantIdsToDiscard = new ArrayList<>();\n-        if (StringUtils.isNotEmpty(options.variantIdsToDiscard)) {\n-            variantIdsToDiscard = Arrays.asList(StringUtils.split(options.variantIdsToDiscard, \",\"));\n-        }\n+    String studyId = options.studyId;\n+    String clinicalAnalysisId = options.clinicalAnalysisId;\n \n-        CancerTieringInterpretationConfiguration config = new CancerTieringInterpretationConfiguration();\n-        config.setSkipUntieredVariants(!options.includeUntieredVariants);\n-\n-        Path outDir = Paths.get(options.outDir);\n-        Path opencgaHome = Paths.get(configuration.getWorkspace()).getParent();\n-\n-        // Execute cancer tiering analysis\n-        CancerTieringInterpretationAnalysis cancerTieringAnalysis = new CancerTieringInterpretationAnalysis();\n-        cancerTieringAnalysis.setUp(opencgaHome.toString(), new ObjectMap(), outDir, token);\n-        cancerTieringAnalysis.setStudyId(studyId)\n-                .setClinicalAnalysisId(clinicalAnalysisId)\n-                .setVariantIdsToDiscard(variantIdsToDiscard)\n-                .setConfig(config);\n-        cancerTieringAnalysis.start();\n+    List<String> variantIdsToDiscard = new ArrayList<>();\n+    if (StringUtils.isNotEmpty(options.variantIdsToDiscard)) {\n+      variantIdsToDiscard = Arrays.asList(StringUtils.split(options.variantIdsToDiscard, \",\"));\n     }\n \n-    private void custom() throws Exception {\n-        InterpretationCommandOptions.ZettaInterpretationCommandOptions options = interpretationCommandOptions.zettaInterpretationCommandOptions;\n-\n-        // Prepare analysis parameters and config\n-        String token = options.commonOptions.token;\n-\n-        String studyId = options.studyId;\n-        String clinicalAnalysisId = options.clinicalAnalysisId;\n-\n-        Map<Long, String> studyIds = getStudyIds(token);\n-        Query query = VariantQueryCommandUtils.parseQuery(options.variantQueryCommandOptions, studyIds, clientConfiguration);\n-        QueryOptions queryOptions = VariantQueryCommandUtils.parseQueryOptions(options.variantQueryCommandOptions);\n-\n-        ZettaInterpretationConfiguration config = new ZettaInterpretationConfiguration();\n-        config.setIncludeLowCoverage(options.includeLowCoverage);\n-        config.setMaxLowCoverage(options.maxLowCoverage);\n-        config.setSkipUntieredVariants(!options.includeUntieredVariants);\n-\n-        Path outDir = Paths.get(options.outDir);\n-        Path opencgaHome = Paths.get(configuration.getWorkspace()).getParent();\n-\n-        // Execute custom interpretation analysis\n-        ZettaInterpretationAnalysis customAnalysis = new ZettaInterpretationAnalysis();\n-        customAnalysis.setUp(opencgaHome.toString(), new ObjectMap(), outDir, token);\n-        customAnalysis.setStudyId(studyId)\n-                .setClinicalAnalysisId(clinicalAnalysisId)\n-                .setQuery(query)\n-                .setQueryOptions(queryOptions)\n-                .setConfig(config);\n-        customAnalysis.start();\n-    }\n+    CancerTieringInterpretationConfiguration config = new CancerTieringInterpretationConfiguration();\n+    config.setSkipUntieredVariants(!options.includeUntieredVariants);\n+\n+    Path outDir = Paths.get(options.outDir);\n+    Path opencgaHome = Paths.get(configuration.getWorkspace()).getParent();\n+\n+    // Execute cancer tiering analysis\n+    CancerTieringInterpretationAnalysis cancerTieringAnalysis = new CancerTieringInterpretationAnalysis();\n+    cancerTieringAnalysis.setUp(opencgaHome.toString(), new ObjectMap(), outDir, token);\n+    cancerTieringAnalysis.setStudyId(studyId)\n+        .setClinicalAnalysisId(clinicalAnalysisId)\n+        .setVariantIdsToDiscard(variantIdsToDiscard)\n+        .setConfig(config);\n+    cancerTieringAnalysis.start();\n+  }\n+\n+  private void custom() throws Exception {\n+    InterpretationCommandOptions.ZettaInterpretationCommandOptions options = interpretationCommandOptions.zettaInterpretationCommandOptions;\n+\n+    // Prepare analysis parameters and config\n+    String token = options.commonOptions.token;\n+\n+    String studyId = options.studyId;\n+    String clinicalAnalysisId = options.clinicalAnalysisId;\n+\n+    Map<Long, String> studyIds = getStudyIds(token);\n+    Query query = VariantQueryCommandUtils.parseQuery(options.variantQueryCommandOptions, studyIds, clientConfiguration);\n+    QueryOptions queryOptions = VariantQueryCommandUtils.parseQueryOptions(options.variantQueryCommandOptions);\n+\n+    ZettaInterpretationConfiguration config = new ZettaInterpretationConfiguration();\n+    config.setIncludeLowCoverage(options.includeLowCoverage);\n+    config.setMaxLowCoverage(options.maxLowCoverage);\n+    config.setSkipUntieredVariants(!options.includeUntieredVariants);\n+\n+    Path outDir = Paths.get(options.outDir);\n+    Path opencgaHome = Paths.get(configuration.getWorkspace()).getParent();\n+\n+    // Execute custom interpretation analysis\n+    ZettaInterpretationAnalysis customAnalysis = new ZettaInterpretationAnalysis();\n+    customAnalysis.setUp(opencgaHome.toString(), new ObjectMap(), outDir, token);\n+    customAnalysis.setStudyId(studyId)\n+        .setClinicalAnalysisId(clinicalAnalysisId)\n+        .setQuery(query)\n+        .setQueryOptions(queryOptions)\n+        .setConfig(config);\n+    customAnalysis.start();\n+  }\n }\n",
            "diff_size": 186
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/328/InterpretationCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/328/InterpretationCommandExecutor.java\nindex f0b0f3817ad..123fc45004d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/328/InterpretationCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/328/InterpretationCommandExecutor.java\n@@ -209,4 +209,4 @@ public class InterpretationCommandExecutor extends InternalCommandExecutor {\n                 .setConfig(config);\n         customAnalysis.start();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "182",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "column": "44",
                    "severity": "error",
                    "message": "'{' at column 44 should have line break after.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.LeftCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/328/InterpretationCommandExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/328/InterpretationCommandExecutor.java\nindex f0b0f3817ad..117abfbeae8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/328/InterpretationCommandExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/328/InterpretationCommandExecutor.java\n@@ -178,11 +178,10 @@ public class InterpretationCommandExecutor extends InternalCommandExecutor {\n         cancerTieringAnalysis.start();\n     }\n \n-    private void custom() throws Exception {\n-        InterpretationCommandOptions.ZettaInterpretationCommandOptions options = interpretationCommandOptions.zettaInterpretationCommandOptions;\n+    private void custom() throws Exception { InterpretationCommandOptions.ZettaInterpretationCommandOptions options = interpretationCommandOptions.zettaInterpretationCommandOptions;\n \n-        // Prepare analysis parameters and config\n-        String token = options.commonOptions.token;\n+    // Prepare analysis parameters and config\n+    String token = options.commonOptions.token;\n \n         String studyId = options.studyId;\n         String clinicalAnalysisId = options.clinicalAnalysisId;\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}