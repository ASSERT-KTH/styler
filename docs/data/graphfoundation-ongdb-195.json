{
    "project_name": "graphfoundation-ongdb",
    "error_id": "195",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "47",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "89",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "93",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "114",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "131",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "134",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/195/RawBits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/195/RawBits.java\nindex 74a4375d3bd..1328a65f02e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/195/RawBits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/195/RawBits.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.neo4j.values.storable.NumberValue;\n@@ -28,120 +29,114 @@ import org.neo4j.values.storable.Values;\n  */\n class RawBits\n {\n-    static final byte BYTE = 0;\n-    static final byte SHORT = 1;\n-    static final byte INT = 2;\n-    static final byte LONG = 3;\n-    static final byte FLOAT = 4;\n-    static final byte DOUBLE = 5;\n+  static final byte BYTE = 0;\n+  static final byte SHORT = 1;\n+  static final byte INT = 2;\n+  static final byte LONG = 3;\n+  static final byte FLOAT = 4;\n+  static final byte DOUBLE = 5;\n \n-    /**\n-     * Convert value represented by type and raw bits to corresponding {@link NumberValue}. If type is not {@link #BYTE}, {@link #SHORT},\n-     * {@link #INT}, {@link #LONG}, {@link #FLOAT} or {@link #DOUBLE}, the raw bits will be interpreted as a long.\n-     *\n-     * @param rawBits Raw bits of value\n-     * @param type Type of value\n-     * @return {@link NumberValue} with type and value given by provided raw bits and type.\n-     */\n-    static NumberValue asNumberValue( long rawBits, byte type )\n+  /**\n+   * Convert value represented by type and raw bits to corresponding {@link NumberValue}. If type is not {@link #BYTE}, {@link #SHORT},\n+   * {@link #INT}, {@link #LONG}, {@link #FLOAT} or {@link #DOUBLE}, the raw bits will be interpreted as a long.\n+   *\n+   * @param rawBits Raw bits of value\n+   * @param type    Type of value\n+   * @return {@link NumberValue} with type and value given by provided raw bits and type.\n+   */\n+  static NumberValue asNumberValue(long rawBits, byte type)\n+  {\n+    switch (type)\n     {\n-        switch ( type )\n-        {\n-        case BYTE:\n-            return Values.byteValue( (byte) rawBits );\n-        case SHORT:\n-            return Values.shortValue( (short) rawBits );\n-        case INT:\n-            return Values.intValue( (int) rawBits );\n-        case LONG:\n-            return Values.longValue( rawBits );\n-        case FLOAT:\n-            return Values.floatValue( Float.intBitsToFloat( (int) rawBits ) );\n-        case DOUBLE:\n-            return Values.doubleValue( Double.longBitsToDouble( rawBits ) );\n-        default:\n-            // If type is not recognized, interpret as long.\n-            return Values.longValue( rawBits );\n-        }\n+      case BYTE:\n+        return Values.byteValue((byte) rawBits);\n+      case SHORT:\n+        return Values.shortValue((short) rawBits);\n+      case INT:\n+        return Values.intValue((int) rawBits);\n+      case LONG:\n+        return Values.longValue(rawBits);\n+      case FLOAT:\n+        return Values.floatValue(Float.intBitsToFloat((int) rawBits));\n+      case DOUBLE:\n+        return Values.doubleValue(Double.longBitsToDouble(rawBits));\n+      default:\n+        // If type is not recognized, interpret as long.\n+        return Values.longValue(rawBits);\n     }\n+  }\n \n-    /**\n-     * Compare number values represented by type and raw bits. If type is not {@link #BYTE}, {@link #SHORT}, {@link #INT}, {@link #LONG},\n-     * {@link #FLOAT} or {@link #DOUBLE}, the raw bits will be compared as long.\n-     *\n-     * @param lhsRawBits Raw bits of left hand side value\n-     * @param lhsType Type of left hand side value\n-     * @param rhsRawBits Raw bits of right hand side value\n-     * @param rhsType Type of right hand side value\n-     * @return An int less that 0 if lhs value is numerically less than rhs value. An int equal to 0 if lhs and rhs value are\n-     * numerically equal (independent of type) and an int greater than 0 if lhs value is greater than rhs value.\n-     */\n-    static int compare( long lhsRawBits, byte lhsType, long rhsRawBits, byte rhsType )\n+  /**\n+   * Compare number values represented by type and raw bits. If type is not {@link #BYTE}, {@link #SHORT}, {@link #INT}, {@link #LONG},\n+   * {@link #FLOAT} or {@link #DOUBLE}, the raw bits will be compared as long.\n+   *\n+   * @param lhsRawBits Raw bits of left hand side value\n+   * @param lhsType    Type of left hand side value\n+   * @param rhsRawBits Raw bits of right hand side value\n+   * @param rhsType    Type of right hand side value\n+   * @return An int less that 0 if lhs value is numerically less than rhs value. An int equal to 0 if lhs and rhs value are\n+   * numerically equal (independent of type) and an int greater than 0 if lhs value is greater than rhs value.\n+   */\n+  static int compare(long lhsRawBits, byte lhsType, long rhsRawBits, byte rhsType)\n+  {\n+    // case integral - integral\n+    if (lhsType == BYTE ||\n+        lhsType == SHORT ||\n+        lhsType == INT ||\n+        lhsType == LONG)\n+    {\n+      return compareLongAgainstRawType(lhsRawBits, rhsRawBits, rhsType);\n+    } else if (lhsType == FLOAT)\n     {\n-        // case integral - integral\n-        if ( lhsType == BYTE ||\n-                lhsType == SHORT ||\n-                lhsType == INT ||\n-                lhsType == LONG )\n-        {\n-            return compareLongAgainstRawType( lhsRawBits, rhsRawBits, rhsType );\n-        }\n-        else if ( lhsType == FLOAT )\n-        {\n-            double lhsFloat = Float.intBitsToFloat( (int) lhsRawBits );\n-            return compareDoubleAgainstRawType( lhsFloat, rhsRawBits, rhsType );\n-        }\n-        else if ( lhsType == DOUBLE )\n-        {\n-            double lhsDouble = Double.longBitsToDouble( lhsRawBits );\n-            return compareDoubleAgainstRawType( lhsDouble, rhsRawBits, rhsType );\n-        }\n-        // We can not throw here because we will visit this method inside a pageCursor.shouldRetry() block.\n-        // Just return a comparison that at least will be commutative.\n-        return Long.compare( lhsRawBits, rhsRawBits );\n+      double lhsFloat = Float.intBitsToFloat((int) lhsRawBits);\n+      return compareDoubleAgainstRawType(lhsFloat, rhsRawBits, rhsType);\n+    } else if (lhsType == DOUBLE)\n+    {\n+      double lhsDouble = Double.longBitsToDouble(lhsRawBits);\n+      return compareDoubleAgainstRawType(lhsDouble, rhsRawBits, rhsType);\n     }\n+    // We can not throw here because we will visit this method inside a pageCursor.shouldRetry() block.\n+    // Just return a comparison that at least will be commutative.\n+    return Long.compare(lhsRawBits, rhsRawBits);\n+  }\n \n-    private static int compareLongAgainstRawType( long lhs, long rhsRawBits, byte rhsType )\n+  private static int compareLongAgainstRawType(long lhs, long rhsRawBits, byte rhsType)\n+  {\n+    if (rhsType == BYTE ||\n+        rhsType == SHORT ||\n+        rhsType == INT ||\n+        rhsType == LONG)\n+    {\n+      return Long.compare(lhs, rhsRawBits);\n+    } else if (rhsType == FLOAT)\n     {\n-        if ( rhsType == BYTE ||\n-                rhsType == SHORT ||\n-                rhsType == INT ||\n-                rhsType == LONG )\n-        {\n-            return Long.compare( lhs, rhsRawBits );\n-        }\n-        else if ( rhsType == FLOAT )\n-        {\n-            return NumberValues.compareLongAgainstDouble( lhs, Float.intBitsToFloat( (int) rhsRawBits ) );\n-        }\n-        else if ( rhsType == DOUBLE )\n-        {\n-            return NumberValues.compareLongAgainstDouble( lhs, Double.longBitsToDouble( rhsRawBits ) );\n-        }\n-        // We can not throw here because we will visit this method inside a pageCursor.shouldRetry() block.\n-        // Just return a comparison that at least will be commutative.\n-        return Long.compare( lhs, rhsRawBits );\n+      return NumberValues.compareLongAgainstDouble(lhs, Float.intBitsToFloat((int) rhsRawBits));\n+    } else if (rhsType == DOUBLE)\n+    {\n+      return NumberValues.compareLongAgainstDouble(lhs, Double.longBitsToDouble(rhsRawBits));\n     }\n+    // We can not throw here because we will visit this method inside a pageCursor.shouldRetry() block.\n+    // Just return a comparison that at least will be commutative.\n+    return Long.compare(lhs, rhsRawBits);\n+  }\n \n-    private static int compareDoubleAgainstRawType( double lhsDouble, long rhsRawBits, byte rhsType )\n+  private static int compareDoubleAgainstRawType(double lhsDouble, long rhsRawBits, byte rhsType)\n+  {\n+    if (rhsType == BYTE ||\n+        rhsType == SHORT ||\n+        rhsType == INT ||\n+        rhsType == LONG)\n+    {\n+      return NumberValues.compareDoubleAgainstLong(lhsDouble, rhsRawBits);\n+    } else if (rhsType == FLOAT)\n+    {\n+      return Double.compare(lhsDouble, Float.intBitsToFloat((int) rhsRawBits));\n+    } else if (rhsType == DOUBLE)\n     {\n-        if ( rhsType == BYTE ||\n-                rhsType == SHORT ||\n-                rhsType == INT ||\n-                rhsType == LONG )\n-        {\n-            return NumberValues.compareDoubleAgainstLong( lhsDouble, rhsRawBits );\n-        }\n-        else if ( rhsType == FLOAT )\n-        {\n-            return Double.compare( lhsDouble, Float.intBitsToFloat( (int) rhsRawBits ) );\n-        }\n-        else if ( rhsType == DOUBLE )\n-        {\n-            return Double.compare( lhsDouble, Double.longBitsToDouble( rhsRawBits ) );\n-        }\n-        // We can not throw here because we will visit this method inside a pageCursor.shouldRetry() block.\n-        // Just return a comparison that at least will be commutative.\n-        return Long.compare( Double.doubleToLongBits( lhsDouble ), rhsRawBits );\n+      return Double.compare(lhsDouble, Double.longBitsToDouble(rhsRawBits));\n     }\n+    // We can not throw here because we will visit this method inside a pageCursor.shouldRetry() block.\n+    // Just return a comparison that at least will be commutative.\n+    return Long.compare(Double.doubleToLongBits(lhsDouble), rhsRawBits);\n+  }\n }\n",
            "diff_size": 148
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "86",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/195/RawBits.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/195/RawBits.java\nindex 74a4375d3bd..8b24ffa025d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/195/RawBits.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/195/RawBits.java\n@@ -52,11 +52,11 @@ class RawBits\n         case SHORT:\n             return Values.shortValue( (short) rawBits );\n         case INT:\n-            return Values.intValue( (int) rawBits );\n+            return Values.intValue( ( int) rawBits );\n         case LONG:\n             return Values.longValue( rawBits );\n         case FLOAT:\n-            return Values.floatValue( Float.intBitsToFloat( (int) rawBits ) );\n+            return Values.floatValue( Float.intBitsToFloat( ( int) rawBits ) );\n         case DOUBLE:\n             return Values.doubleValue( Double.longBitsToDouble( rawBits ) );\n         default:\n@@ -88,7 +88,7 @@ class RawBits\n         }\n         else if ( lhsType == FLOAT )\n         {\n-            double lhsFloat = Float.intBitsToFloat( (int) lhsRawBits );\n+            double lhsFloat = Float.intBitsToFloat( ( int) lhsRawBits );\n             return compareDoubleAgainstRawType( lhsFloat, rhsRawBits, rhsType );\n         }\n         else if ( lhsType == DOUBLE )\n@@ -112,7 +112,7 @@ class RawBits\n         }\n         else if ( rhsType == FLOAT )\n         {\n-            return NumberValues.compareLongAgainstDouble( lhs, Float.intBitsToFloat( (int) rhsRawBits ) );\n+            return NumberValues.compareLongAgainstDouble( lhs, Float.intBitsToFloat( ( int) rhsRawBits ) );\n         }\n         else if ( rhsType == DOUBLE )\n         {\n@@ -134,7 +134,7 @@ class RawBits\n         }\n         else if ( rhsType == FLOAT )\n         {\n-            return Double.compare( lhsDouble, Float.intBitsToFloat( (int) rhsRawBits ) );\n+            return Double.compare( lhsDouble, Float.intBitsToFloat( ( int) rhsRawBits ) );\n         }\n         else if ( rhsType == DOUBLE )\n         {\n@@ -144,4 +144,4 @@ class RawBits\n         // Just return a comparison that at least will be commutative.\n         return Long.compare( Double.doubleToLongBits( lhsDouble ), rhsRawBits );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}