{
    "project_name": "IQSS-dataverse",
    "error_id": "9",
    "information": {
        "errors": [
            {
                "line": "186",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    protected UserServiceBean userSvc;\n\n\t@EJB\n\tprotected DataverseRoleServiceBean rolesSvc;\n\n    @EJB",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "187",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/9/AbstractApiBean.java\nindex d21524a7150..d34ee608e5e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/9/AbstractApiBean.java\n@@ -183,7 +183,7 @@ public abstract class AbstractApiBean {\n     @EJB\n     protected UserServiceBean userSvc;\n \n-\t@EJB\n+@EJB\n \tprotected DataverseRoleServiceBean rolesSvc;\n \n     @EJB\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/9/AbstractApiBean.java\nindex d21524a7150..03c9c8bbce9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/9/AbstractApiBean.java\n@@ -83,782 +83,822 @@ import static org.apache.commons.lang3.StringUtils.isNumeric;\n \n /**\n  * Base class for API beans\n+ *\n  * @author michael\n  */\n public abstract class AbstractApiBean {\n \n-    private static final Logger logger = Logger.getLogger(AbstractApiBean.class.getName());\n-    private static final String DATAVERSE_KEY_HEADER_NAME = \"X-Dataverse-key\";\n-    private static final String PERSISTENT_ID_KEY=\":persistentId\";\n-    private static final String ALIAS_KEY=\":alias\";\n-    public static final String STATUS_ERROR = \"ERROR\";\n-    public static final String STATUS_OK = \"OK\";\n-    public static final String STATUS_WF_IN_PROGRESS = \"WORKFLOW_IN_PROGRESS\";\n-    public static final String DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME = \"X-Dataverse-invocationID\";\n+  private static final Logger logger = Logger.getLogger(AbstractApiBean.class.getName());\n+  private static final String DATAVERSE_KEY_HEADER_NAME = \"X-Dataverse-key\";\n+  private static final String PERSISTENT_ID_KEY = \":persistentId\";\n+  private static final String ALIAS_KEY = \":alias\";\n+  public static final String STATUS_ERROR = \"ERROR\";\n+  public static final String STATUS_OK = \"OK\";\n+  public static final String STATUS_WF_IN_PROGRESS = \"WORKFLOW_IN_PROGRESS\";\n+  public static final String DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME = \"X-Dataverse-invocationID\";\n \n-    /**\n-     * Utility class to convey a proper error response using Java's exceptions.\n-     */\n-    public static class WrappedResponse extends Exception {\n-        private final Response response;\n-\n-        public WrappedResponse(Response response) {\n-            this.response = response;\n-        }\n-\n-        public WrappedResponse( Throwable cause, Response response ) {\n-            super( cause );\n-            this.response = response;\n-        }\n-\n-        public Response getResponse() {\n-            return response;\n-        }\n-\n-        /**\n-         * Creates a new response, based on the original response and the passed message.\n-         * Typical use would be to add a better error message to the HTTP response.\n-         * @param message additional message to be added to the response.\n-         * @return A Response with updated message field.\n-         */\n-        public Response refineResponse( String message ) {\n-            final Status statusCode = Response.Status.fromStatusCode(response.getStatus());\n-            String baseMessage = getWrappedMessageWhenJson();\n-\n-            if ( baseMessage == null ) {\n-                final Throwable cause = getCause();\n-                baseMessage = (cause!=null ? cause.getMessage() : \"\");\n-            }\n-            return error(statusCode, message+\" \"+baseMessage);\n-        }\n+  /**\n+   * Utility class to convey a proper error response using Java's exceptions.\n+   */\n+  public static class WrappedResponse extends Exception {\n+    private final Response response;\n \n-        /**\n-         * In the common case of the wrapped response being of type JSON,\n-         * return the message field it has (if any).\n-         * @return the content of a message field, or {@code null}.\n-         */\n-        String getWrappedMessageWhenJson() {\n-            if ( response.getMediaType().equals(MediaType.APPLICATION_JSON_TYPE) ) {\n-                Object entity = response.getEntity();\n-                if ( entity == null ) return null;\n-\n-                String json = entity.toString();\n-                try ( StringReader rdr = new StringReader(json) ){\n-                    JsonReader jrdr = Json.createReader(rdr);\n-                    JsonObject obj = jrdr.readObject();\n-                    if ( obj.containsKey(\"message\") ) {\n-                        JsonValue message = obj.get(\"message\");\n-                        return message.getValueType() == ValueType.STRING ? obj.getString(\"message\") : message.toString();\n-                    } else {\n-                        return null;\n-                    }\n-                }\n-            } else {\n-                return null;\n-            }\n-        }\n+    public WrappedResponse(Response response) {\n+      this.response = response;\n     }\n \n-    @EJB\n-    protected EjbDataverseEngine engineSvc;\n-\n-    @EJB\n-    protected DatasetServiceBean datasetSvc;\n-    \n-    @EJB\n-    protected DataFileServiceBean fileService;\n-\n-    @EJB\n-    protected DataverseServiceBean dataverseSvc;\n-\n-    @EJB\n-    protected AuthenticationServiceBean authSvc;\n+    public WrappedResponse(Throwable cause, Response response) {\n+      super(cause);\n+      this.response = response;\n+    }\n \n-    @EJB\n-    protected DatasetFieldServiceBean datasetFieldSvc;\n+    public Response getResponse() {\n+      return response;\n+    }\n \n-    @EJB\n-    protected MetadataBlockServiceBean metadataBlockSvc;\n+    /**\n+     * Creates a new response, based on the original response and the passed message.\n+     * Typical use would be to add a better error message to the HTTP response.\n+     *\n+     * @param message additional message to be added to the response.\n+     * @return A Response with updated message field.\n+     */\n+    public Response refineResponse(String message) {\n+      final Status statusCode = Response.Status.fromStatusCode(response.getStatus());\n+      String baseMessage = getWrappedMessageWhenJson();\n \n-    @EJB\n-    protected UserServiceBean userSvc;\n+      if (baseMessage == null) {\n+        final Throwable cause = getCause();\n+        baseMessage = (cause != null ? cause.getMessage() : \"\");\n+      }\n+      return error(statusCode, message + \" \" + baseMessage);\n+    }\n \n-\t@EJB\n-\tprotected DataverseRoleServiceBean rolesSvc;\n+    /**\n+     * In the common case of the wrapped response being of type JSON,\n+     * return the message field it has (if any).\n+     *\n+     * @return the content of a message field, or {@code null}.\n+     */\n+    String getWrappedMessageWhenJson() {\n+      if (response.getMediaType().equals(MediaType.APPLICATION_JSON_TYPE)) {\n+        Object entity = response.getEntity();\n+        if (entity == null) {\n+          return null;\n+        }\n \n-    @EJB\n-    protected SettingsServiceBean settingsSvc;\n+        String json = entity.toString();\n+        try (StringReader rdr = new StringReader(json)) {\n+          JsonReader jrdr = Json.createReader(rdr);\n+          JsonObject obj = jrdr.readObject();\n+          if (obj.containsKey(\"message\")) {\n+            JsonValue message = obj.get(\"message\");\n+            return message.getValueType() == ValueType.STRING ? obj.getString(\"message\") : message.toString();\n+          } else {\n+            return null;\n+          }\n+        }\n+      } else {\n+        return null;\n+      }\n+    }\n+  }\n \n-    @EJB\n-    protected RoleAssigneeServiceBean roleAssigneeSvc;\n+  @EJB\n+  protected EjbDataverseEngine engineSvc;\n \n-    @EJB\n-    protected PermissionServiceBean permissionSvc;\n+  @EJB\n+  protected DatasetServiceBean datasetSvc;\n \n-    @EJB\n-    protected GroupServiceBean groupSvc;\n+  @EJB\n+  protected DataFileServiceBean fileService;\n \n-    @EJB\n-    protected ActionLogServiceBean actionLogSvc;\n+  @EJB\n+  protected DataverseServiceBean dataverseSvc;\n \n-    @EJB\n-    protected SavedSearchServiceBean savedSearchSvc;\n+  @EJB\n+  protected AuthenticationServiceBean authSvc;\n \n-    @EJB\n-    protected PrivateUrlServiceBean privateUrlSvc;\n+  @EJB\n+  protected DatasetFieldServiceBean datasetFieldSvc;\n \n-    @EJB\n-    protected ConfirmEmailServiceBean confirmEmailSvc;\n+  @EJB\n+  protected MetadataBlockServiceBean metadataBlockSvc;\n \n-    @EJB\n-    protected UserNotificationServiceBean userNotificationSvc;\n+  @EJB\n+  protected UserServiceBean userSvc;\n \n-    @EJB\n-    protected DatasetVersionServiceBean datasetVersionSvc;\n+  @EJB\n+  protected DataverseRoleServiceBean rolesSvc;\n \n-    @EJB\n-    protected SystemConfig systemConfig;\n+  @EJB\n+  protected SettingsServiceBean settingsSvc;\n \n-    @EJB\n-    protected DataCaptureModuleServiceBean dataCaptureModuleSvc;\n-    \n-    @EJB\n-    protected DatasetLinkingServiceBean dsLinkingService;\n-    \n-    @EJB\n-    protected DataverseLinkingServiceBean dvLinkingService;\n+  @EJB\n+  protected RoleAssigneeServiceBean roleAssigneeSvc;\n \n-    @EJB\n-    protected PasswordValidatorServiceBean passwordValidatorService;\n+  @EJB\n+  protected PermissionServiceBean permissionSvc;\n \n-    @EJB\n-    protected ExternalToolServiceBean externalToolService;\n+  @EJB\n+  protected GroupServiceBean groupSvc;\n \n-    @EJB\n-    DataFileServiceBean fileSvc;\n+  @EJB\n+  protected ActionLogServiceBean actionLogSvc;\n \n-    @EJB\n-    StorageSiteServiceBean storageSiteSvc;\n+  @EJB\n+  protected SavedSearchServiceBean savedSearchSvc;\n \n-    @EJB\n-    MetricsServiceBean metricsSvc;\n-    \n-    @EJB \n-    DvObjectServiceBean dvObjSvc;\n-    \n-    @EJB \n-    GuestbookResponseServiceBean gbRespSvc;\n+  @EJB\n+  protected PrivateUrlServiceBean privateUrlSvc;\n \n-    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-    protected EntityManager em;\n+  @EJB\n+  protected ConfirmEmailServiceBean confirmEmailSvc;\n \n-    @Context\n-    protected HttpServletRequest httpRequest;\n+  @EJB\n+  protected UserNotificationServiceBean userNotificationSvc;\n \n-    /**\n-     * For pretty printing (indenting) of JSON output.\n-     */\n-    public enum Format {\n+  @EJB\n+  protected DatasetVersionServiceBean datasetVersionSvc;\n \n-        PRETTY\n-    }\n+  @EJB\n+  protected SystemConfig systemConfig;\n \n-    private final LazyRef<JsonParser> jsonParserRef = new LazyRef<>(new Callable<JsonParser>() {\n-        @Override\n-        public JsonParser call() throws Exception {\n-            return new JsonParser(datasetFieldSvc, metadataBlockSvc,settingsSvc);\n-        }\n-    });\n+  @EJB\n+  protected DataCaptureModuleServiceBean dataCaptureModuleSvc;\n \n-    /**\n-     * Functional interface for handling HTTP requests in the APIs.\n-     *\n-     * @see #response(edu.harvard.iq.dataverse.api.AbstractApiBean.DataverseRequestHandler)\n-     */\n-    protected static interface DataverseRequestHandler {\n-        Response handle( DataverseRequest u ) throws WrappedResponse;\n-    }\n+  @EJB\n+  protected DatasetLinkingServiceBean dsLinkingService;\n \n+  @EJB\n+  protected DataverseLinkingServiceBean dvLinkingService;\n \n-    /* ===================== *\\\n-     *  Utility Methods      *\n-     *  Get that DSL feelin' *\n-    \\* ===================== */\n+  @EJB\n+  protected PasswordValidatorServiceBean passwordValidatorService;\n \n-    protected JsonParser jsonParser() {\n-        return jsonParserRef.get();\n-    }\n+  @EJB\n+  protected ExternalToolServiceBean externalToolService;\n \n-    protected boolean parseBooleanOrDie( String input ) throws WrappedResponse {\n-        if (input == null ) throw new WrappedResponse( badRequest(\"Boolean value missing\"));\n-        input = input.trim();\n-        if ( Util.isBoolean(input) ) {\n-            return Util.isTrue(input);\n-        } else {\n-            throw new WrappedResponse( badRequest(\"Illegal boolean value '\" + input + \"'\"));\n-        }\n-    }\n+  @EJB\n+  DataFileServiceBean fileSvc;\n \n-     /**\n-     * Returns the {@code key} query parameter from the current request, or {@code null} if\n-     * the request has no such parameter.\n-     * @param key Name of the requested parameter.\n-     * @return Value of the requested parameter in the current request.\n-     */\n-    protected String getRequestParameter( String key ) {\n-        return httpRequest.getParameter(key);\n-    }\n+  @EJB\n+  StorageSiteServiceBean storageSiteSvc;\n \n-    protected String getRequestApiKey() {\n-        String headerParamApiKey = httpRequest.getHeader(DATAVERSE_KEY_HEADER_NAME);\n-        String queryParamApiKey = httpRequest.getParameter(\"key\");\n-                \n-        return headerParamApiKey!=null ? headerParamApiKey : queryParamApiKey;\n-    }\n-    \n-    protected String getRequestWorkflowInvocationID() {\n-        String headerParamWFKey = httpRequest.getHeader(DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME);\n-        String queryParamWFKey = httpRequest.getParameter(\"invocationID\");\n-                \n-        return headerParamWFKey!=null ? headerParamWFKey : queryParamWFKey;\n-    }\n+  @EJB\n+  MetricsServiceBean metricsSvc;\n \n-    /* ========= *\\\n-     *  Finders  *\n-    \\* ========= */\n-    protected RoleAssignee findAssignee(String identifier) {\n-        try {\n-            RoleAssignee roleAssignee = roleAssigneeSvc.getRoleAssignee(identifier);\n-            return roleAssignee;\n-        } catch (EJBException ex) {\n-            Throwable cause = ex;\n-            while (cause.getCause() != null) {\n-                cause = cause.getCause();\n-            }\n-            logger.log(Level.INFO, \"Exception caught looking up RoleAssignee based on identifier ''{0}'': {1}\", new Object[]{identifier, cause.getMessage()});\n-            return null;\n-        }\n-    }\n+  @EJB\n+  DvObjectServiceBean dvObjSvc;\n \n-    /**\n-     *\n-     * @param apiKey the key to find the user with\n-     * @return the user, or null\n-     * @see #findUserOrDie(java.lang.String)\n-     */\n-    protected AuthenticatedUser findUserByApiToken( String apiKey ) {\n-        return authSvc.lookupUser(apiKey);\n-    }\n+  @EJB\n+  GuestbookResponseServiceBean gbRespSvc;\n \n-    /**\n-     * Returns the user of pointed by the API key, or the guest user\n-     * @return a user, may be a guest user.\n-     * @throws edu.harvard.iq.dataverse.api.AbstractApiBean.WrappedResponse iff there is an api key present, but it is invalid.\n-     */\n-    protected User findUserOrDie() throws WrappedResponse {\n-        final String requestApiKey = getRequestApiKey();\n-        final String requestWFKey = getRequestWorkflowInvocationID();\n-        if (requestApiKey == null && requestWFKey == null) {\n-            return GuestUser.get();\n-        }\n-        PrivateUrlUser privateUrlUser = privateUrlSvc.getPrivateUrlUserFromToken(requestApiKey);\n-        if (privateUrlUser != null) {\n-            return privateUrlUser;\n-        }\n-        return findAuthenticatedUserOrDie(requestApiKey, requestWFKey);\n-    }\n+  @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+  protected EntityManager em;\n \n-    /**\n-     * Finds the authenticated user, based on (in order):\n-     * <ol>\n-     *  <li>The key in the HTTP header {@link #DATAVERSE_KEY_HEADER_NAME}</li>\n-     *  <li>The key in the query parameter {@code key}\n-     * </ol>\n-     *\n-     * If no user is found, throws a wrapped bad api key (HTTP UNAUTHORIZED) response.\n-     *\n-     * @return The authenticated user which owns the passed api key\n-     * @throws edu.harvard.iq.dataverse.api.AbstractApiBean.WrappedResponse in case said user is not found.\n-     */\n-    protected AuthenticatedUser findAuthenticatedUserOrDie() throws WrappedResponse {\n-        return findAuthenticatedUserOrDie(getRequestApiKey(), getRequestWorkflowInvocationID());\n-    }\n+  @Context\n+  protected HttpServletRequest httpRequest;\n \n+  /**\n+   * For pretty printing (indenting) of JSON output.\n+   */\n+  public enum Format {\n \n-    private AuthenticatedUser findAuthenticatedUserOrDie( String key, String wfid ) throws WrappedResponse {\n-        if (key != null) {\n-            // No check for deactivated user because it's done in authSvc.lookupUser.\n-            AuthenticatedUser authUser = authSvc.lookupUser(key);\n-\n-            if (authUser != null) {\n-                authUser = userSvc.updateLastApiUseTime(authUser);\n-\n-                return authUser;\n-            }\n-            else {\n-                throw new WrappedResponse(badApiKey(key));\n-            }\n-        } else if (wfid != null) {\n-            AuthenticatedUser authUser = authSvc.lookupUserForWorkflowInvocationID(wfid);\n-            if (authUser != null) {\n-                return authUser;\n-            } else {\n-                throw new WrappedResponse(badWFKey(wfid));\n-            }\n-        }\n-        //Just send info about the apiKey - workflow users will learn about invocationId elsewhere\n-        throw new WrappedResponse(badApiKey(null));\n-    }\n+    PRETTY\n+  }\n \n-    protected Dataverse findDataverseOrDie( String dvIdtf ) throws WrappedResponse {\n-        Dataverse dv = findDataverse(dvIdtf);\n-        if ( dv == null ) {\n-            throw new WrappedResponse(error( Response.Status.NOT_FOUND, \"Can't find dataverse with identifier='\" + dvIdtf + \"'\"));\n-        }\n-        return dv;\n-    }\n-    \n-    protected DataverseLinkingDataverse findDataverseLinkingDataverseOrDie(String dataverseId, String linkedDataverseId) throws WrappedResponse {\n-        DataverseLinkingDataverse dvld;\n-        Dataverse dataverse = findDataverseOrDie(dataverseId);\n-        Dataverse linkedDataverse = findDataverseOrDie(linkedDataverseId);\n-        try {\n-            dvld = dvLinkingService.findDataverseLinkingDataverse(dataverse.getId(), linkedDataverse.getId());\n-            if (dvld == null) {\n-                throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataverselinking.error.not.found.ids\", Arrays.asList(dataverseId, linkedDataverseId))));\n-            }\n-            return dvld;\n-        } catch (NumberFormatException nfe) {\n-            throw new WrappedResponse(\n-                    badRequest(BundleUtil.getStringFromBundle(\"find.dataverselinking.error.not.found.bad.ids\", Arrays.asList(dataverseId, linkedDataverseId))));\n-        }\n+  private final LazyRef<JsonParser> jsonParserRef = new LazyRef<>(new Callable<JsonParser>() {\n+    @Override\n+    public JsonParser call() throws Exception {\n+      return new JsonParser(datasetFieldSvc, metadataBlockSvc, settingsSvc);\n     }\n+  });\n \n-    protected Dataset findDatasetOrDie(String id) throws WrappedResponse {\n-        Dataset dataset;\n-        if (id.equals(PERSISTENT_ID_KEY)) {\n-            String persistentId = getRequestParameter(PERSISTENT_ID_KEY.substring(1));\n-            if (persistentId == null) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\", Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n-            }\n-            dataset = datasetSvc.findByGlobalId(persistentId);\n-            if (dataset == null) {\n-                throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset.not.found.persistentId\", Collections.singletonList(persistentId))));\n-            }\n-            return dataset;\n+  /**\n+   * Functional interface for handling HTTP requests in the APIs.\n+   *\n+   * @see #response(edu.harvard.iq.dataverse.api.AbstractApiBean.DataverseRequestHandler)\n+   */\n+  protected static interface DataverseRequestHandler {\n+    Response handle(DataverseRequest u) throws WrappedResponse;\n+  }\n \n-        } else {\n-            try {\n-                dataset = datasetSvc.find(Long.parseLong(id));\n-                if (dataset == null) {\n-                    throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset.not.found.id\", Collections.singletonList(id))));\n-                }\n-                return dataset;\n-            } catch (NumberFormatException nfe) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset.not.found.bad.id\", Collections.singletonList(id))));\n-            }\n-        }\n-    }\n-    \n-    protected DataFile findDataFileOrDie(String id) throws WrappedResponse {\n-        DataFile datafile;\n-        if (id.equals(PERSISTENT_ID_KEY)) {\n-            String persistentId = getRequestParameter(PERSISTENT_ID_KEY.substring(1));\n-            if (persistentId == null) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\", Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n-            }\n-            datafile = fileService.findByGlobalId(persistentId);\n-            if (datafile == null) {\n-                throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.datafile.error.dataset.not.found.persistentId\", Collections.singletonList(persistentId))));\n-            }\n-            return datafile;\n-        } else {\n-            try {\n-                datafile = fileService.find(Long.parseLong(id));\n-                if (datafile == null) {\n-                    throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.datafile.error.datafile.not.found.id\", Collections.singletonList(id))));\n-                }\n-                return datafile;\n-            } catch (NumberFormatException nfe) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.datafile.error.datafile.not.found.bad.id\", Collections.singletonList(id))));\n-            }\n-        }\n-    }\n-       \n-    protected DataverseRole findRoleOrDie(String id) throws WrappedResponse {\n-        DataverseRole role;\n-        if (id.equals(ALIAS_KEY)) {\n-            String alias = getRequestParameter(ALIAS_KEY.substring(1));\n-            try {\n-                return em.createNamedQuery(\"DataverseRole.findDataverseRoleByAlias\", DataverseRole.class)\n-                        .setParameter(\"alias\", alias)\n-                        .getSingleResult();\n-\n-            //Should not be a multiple result exception due to table constraint\n-            } catch (NoResultException nre) {\n-                throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataverse.role.error.role.not.found.alias\", Collections.singletonList(alias))));\n-            }\n \n-        } else {\n+    /* ===================== *\\\n+     *  Utility Methods      *\n+     *  Get that DSL feelin' *\n+    \\* ===================== */\n \n-            try {\n-                role = rolesSvc.find(Long.parseLong(id));\n-                if (role == null) {\n-                    throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataverse.role.error.role.not.found.id\", Collections.singletonList(id))));\n-                } else {\n-                    return role;\n-                }\n-\n-            } catch (NumberFormatException nfe) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataverse.role.error.role.not.found.bad.id\", Collections.singletonList(id))));\n-            }\n+  protected JsonParser jsonParser() {\n+    return jsonParserRef.get();\n+  }\n+\n+  protected boolean parseBooleanOrDie(String input) throws WrappedResponse {\n+    if (input == null) {\n+      throw new WrappedResponse(badRequest(\"Boolean value missing\"));\n+    }\n+    input = input.trim();\n+    if (Util.isBoolean(input)) {\n+      return Util.isTrue(input);\n+    } else {\n+      throw new WrappedResponse(badRequest(\"Illegal boolean value '\" + input + \"'\"));\n+    }\n+  }\n+\n+  /**\n+   * Returns the {@code key} query parameter from the current request, or {@code null} if\n+   * the request has no such parameter.\n+   *\n+   * @param key Name of the requested parameter.\n+   * @return Value of the requested parameter in the current request.\n+   */\n+  protected String getRequestParameter(String key) {\n+    return httpRequest.getParameter(key);\n+  }\n+\n+  protected String getRequestApiKey() {\n+    String headerParamApiKey = httpRequest.getHeader(DATAVERSE_KEY_HEADER_NAME);\n+    String queryParamApiKey = httpRequest.getParameter(\"key\");\n+\n+    return headerParamApiKey != null ? headerParamApiKey : queryParamApiKey;\n+  }\n+\n+  protected String getRequestWorkflowInvocationID() {\n+    String headerParamWFKey = httpRequest.getHeader(DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME);\n+    String queryParamWFKey = httpRequest.getParameter(\"invocationID\");\n+\n+    return headerParamWFKey != null ? headerParamWFKey : queryParamWFKey;\n+  }\n+\n+  /* ========= *\\\n+   *  Finders  *\n+  \\* ========= */\n+  protected RoleAssignee findAssignee(String identifier) {\n+    try {\n+      RoleAssignee roleAssignee = roleAssigneeSvc.getRoleAssignee(identifier);\n+      return roleAssignee;\n+    } catch (EJBException ex) {\n+      Throwable cause = ex;\n+      while (cause.getCause() != null) {\n+        cause = cause.getCause();\n+      }\n+      logger.log(Level.INFO, \"Exception caught looking up RoleAssignee based on identifier ''{0}'': {1}\",\n+        new Object[] {identifier, cause.getMessage()});\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * @param apiKey the key to find the user with\n+   * @return the user, or null\n+   * @see #findUserOrDie(java.lang.String)\n+   */\n+  protected AuthenticatedUser findUserByApiToken(String apiKey) {\n+    return authSvc.lookupUser(apiKey);\n+  }\n+\n+  /**\n+   * Returns the user of pointed by the API key, or the guest user\n+   *\n+   * @return a user, may be a guest user.\n+   * @throws edu.harvard.iq.dataverse.api.AbstractApiBean.WrappedResponse iff there is an api key present, but it is invalid.\n+   */\n+  protected User findUserOrDie() throws WrappedResponse {\n+    final String requestApiKey = getRequestApiKey();\n+    final String requestWFKey = getRequestWorkflowInvocationID();\n+    if (requestApiKey == null && requestWFKey == null) {\n+      return GuestUser.get();\n+    }\n+    PrivateUrlUser privateUrlUser = privateUrlSvc.getPrivateUrlUserFromToken(requestApiKey);\n+    if (privateUrlUser != null) {\n+      return privateUrlUser;\n+    }\n+    return findAuthenticatedUserOrDie(requestApiKey, requestWFKey);\n+  }\n+\n+  /**\n+   * Finds the authenticated user, based on (in order):\n+   * <ol>\n+   *  <li>The key in the HTTP header {@link #DATAVERSE_KEY_HEADER_NAME}</li>\n+   *  <li>The key in the query parameter {@code key}\n+   * </ol>\n+   * <p>\n+   * If no user is found, throws a wrapped bad api key (HTTP UNAUTHORIZED) response.\n+   *\n+   * @return The authenticated user which owns the passed api key\n+   * @throws edu.harvard.iq.dataverse.api.AbstractApiBean.WrappedResponse in case said user is not found.\n+   */\n+  protected AuthenticatedUser findAuthenticatedUserOrDie() throws WrappedResponse {\n+    return findAuthenticatedUserOrDie(getRequestApiKey(), getRequestWorkflowInvocationID());\n+  }\n+\n+\n+  private AuthenticatedUser findAuthenticatedUserOrDie(String key, String wfid) throws WrappedResponse {\n+    if (key != null) {\n+      // No check for deactivated user because it's done in authSvc.lookupUser.\n+      AuthenticatedUser authUser = authSvc.lookupUser(key);\n+\n+      if (authUser != null) {\n+        authUser = userSvc.updateLastApiUseTime(authUser);\n+\n+        return authUser;\n+      } else {\n+        throw new WrappedResponse(badApiKey(key));\n+      }\n+    } else if (wfid != null) {\n+      AuthenticatedUser authUser = authSvc.lookupUserForWorkflowInvocationID(wfid);\n+      if (authUser != null) {\n+        return authUser;\n+      } else {\n+        throw new WrappedResponse(badWFKey(wfid));\n+      }\n+    }\n+    //Just send info about the apiKey - workflow users will learn about invocationId elsewhere\n+    throw new WrappedResponse(badApiKey(null));\n+  }\n+\n+  protected Dataverse findDataverseOrDie(String dvIdtf) throws WrappedResponse {\n+    Dataverse dv = findDataverse(dvIdtf);\n+    if (dv == null) {\n+      throw new WrappedResponse(\n+        error(Response.Status.NOT_FOUND, \"Can't find dataverse with identifier='\" + dvIdtf + \"'\"));\n+    }\n+    return dv;\n+  }\n+\n+  protected DataverseLinkingDataverse findDataverseLinkingDataverseOrDie(String dataverseId, String linkedDataverseId)\n+    throws WrappedResponse {\n+    DataverseLinkingDataverse dvld;\n+    Dataverse dataverse = findDataverseOrDie(dataverseId);\n+    Dataverse linkedDataverse = findDataverseOrDie(linkedDataverseId);\n+    try {\n+      dvld = dvLinkingService.findDataverseLinkingDataverse(dataverse.getId(), linkedDataverse.getId());\n+      if (dvld == null) {\n+        throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataverselinking.error.not.found.ids\",\n+          Arrays.asList(dataverseId, linkedDataverseId))));\n+      }\n+      return dvld;\n+    } catch (NumberFormatException nfe) {\n+      throw new WrappedResponse(\n+        badRequest(BundleUtil.getStringFromBundle(\"find.dataverselinking.error.not.found.bad.ids\",\n+          Arrays.asList(dataverseId, linkedDataverseId))));\n+    }\n+  }\n+\n+  protected Dataset findDatasetOrDie(String id) throws WrappedResponse {\n+    Dataset dataset;\n+    if (id.equals(PERSISTENT_ID_KEY)) {\n+      String persistentId = getRequestParameter(PERSISTENT_ID_KEY.substring(1));\n+      if (persistentId == null) {\n+        throw new WrappedResponse(\n+          badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\",\n+            Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n+      }\n+      dataset = datasetSvc.findByGlobalId(persistentId);\n+      if (dataset == null) {\n+        throw new WrappedResponse(notFound(BundleUtil\n+          .getStringFromBundle(\"find.dataset.error.dataset.not.found.persistentId\",\n+            Collections.singletonList(persistentId))));\n+      }\n+      return dataset;\n+\n+    } else {\n+      try {\n+        dataset = datasetSvc.find(Long.parseLong(id));\n+        if (dataset == null) {\n+          throw new WrappedResponse(notFound(\n+            BundleUtil.getStringFromBundle(\"find.dataset.error.dataset.not.found.id\", Collections.singletonList(id))));\n         }\n-    }\n-    \n-    protected DatasetLinkingDataverse findDatasetLinkingDataverseOrDie(String datasetId, String linkingDataverseId) throws WrappedResponse {\n-        DatasetLinkingDataverse dsld;\n-        Dataverse linkingDataverse = findDataverseOrDie(linkingDataverseId);\n-\n-        if (datasetId.equals(PERSISTENT_ID_KEY)) {\n-            String persistentId = getRequestParameter(PERSISTENT_ID_KEY.substring(1));\n-            if (persistentId == null) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\", Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n-            }\n-            \n-            Dataset dataset = datasetSvc.findByGlobalId(persistentId);\n-            if (dataset == null) {\n-                throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset.not.found.persistentId\", Collections.singletonList(persistentId))));\n-            }\n-            datasetId = dataset.getId().toString();\n-        } \n-        try {\n-            dsld = dsLinkingService.findDatasetLinkingDataverse(Long.parseLong(datasetId), linkingDataverse.getId());\n-            if (dsld == null) {\n-                throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.datasetlinking.error.not.found.ids\", Arrays.asList(datasetId, linkingDataverse.getId().toString()))));\n-            }\n-            return dsld;\n-        } catch (NumberFormatException nfe) {\n-            throw new WrappedResponse(\n-                    badRequest(BundleUtil.getStringFromBundle(\"find.datasetlinking.error.not.found.bad.ids\", Arrays.asList(datasetId, linkingDataverse.getId().toString()))));\n+        return dataset;\n+      } catch (NumberFormatException nfe) {\n+        throw new WrappedResponse(\n+          badRequest(BundleUtil\n+            .getStringFromBundle(\"find.dataset.error.dataset.not.found.bad.id\", Collections.singletonList(id))));\n+      }\n+    }\n+  }\n+\n+  protected DataFile findDataFileOrDie(String id) throws WrappedResponse {\n+    DataFile datafile;\n+    if (id.equals(PERSISTENT_ID_KEY)) {\n+      String persistentId = getRequestParameter(PERSISTENT_ID_KEY.substring(1));\n+      if (persistentId == null) {\n+        throw new WrappedResponse(\n+          badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\",\n+            Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n+      }\n+      datafile = fileService.findByGlobalId(persistentId);\n+      if (datafile == null) {\n+        throw new WrappedResponse(notFound(BundleUtil\n+          .getStringFromBundle(\"find.datafile.error.dataset.not.found.persistentId\",\n+            Collections.singletonList(persistentId))));\n+      }\n+      return datafile;\n+    } else {\n+      try {\n+        datafile = fileService.find(Long.parseLong(id));\n+        if (datafile == null) {\n+          throw new WrappedResponse(notFound(BundleUtil\n+            .getStringFromBundle(\"find.datafile.error.datafile.not.found.id\", Collections.singletonList(id))));\n         }\n-    }\n-\n-    protected DataverseRequest createDataverseRequest( User u )  {\n-        return new DataverseRequest(u, httpRequest);\n-    }\n-\n-\tprotected Dataverse findDataverse( String idtf ) {\n-\t\treturn isNumeric(idtf) ? dataverseSvc.find(Long.parseLong(idtf))\n-\t \t\t\t\t\t\t\t  : dataverseSvc.findByAlias(idtf);\n-\t}\n-\n-\tprotected DvObject findDvo( Long id ) {\n-\t\treturn em.createNamedQuery(\"DvObject.findById\", DvObject.class)\n-\t\t\t\t.setParameter(\"id\", id)\n-\t\t\t\t.getSingleResult();\n-\t}\n-\n-    /**\n-     * Tries to find a DvObject. If the passed id can be interpreted as a number,\n-     * it tries to get the DvObject by its id. Else, it tries to get a {@link Dataverse}\n-     * with that alias. If that fails, tries to get a {@link Dataset} with that global id.\n-     * @param id a value identifying the DvObject, either numeric of textual.\n-     * @return A DvObject, or {@code null}\n-     */\n-\tprotected DvObject findDvo( String id ) {\n-        if ( isNumeric(id) ) {\n-            return findDvo( Long.valueOf(id)) ;\n+        return datafile;\n+      } catch (NumberFormatException nfe) {\n+        throw new WrappedResponse(\n+          badRequest(BundleUtil\n+            .getStringFromBundle(\"find.datafile.error.datafile.not.found.bad.id\", Collections.singletonList(id))));\n+      }\n+    }\n+  }\n+\n+  protected DataverseRole findRoleOrDie(String id) throws WrappedResponse {\n+    DataverseRole role;\n+    if (id.equals(ALIAS_KEY)) {\n+      String alias = getRequestParameter(ALIAS_KEY.substring(1));\n+      try {\n+        return em.createNamedQuery(\"DataverseRole.findDataverseRoleByAlias\", DataverseRole.class)\n+          .setParameter(\"alias\", alias)\n+          .getSingleResult();\n+\n+        //Should not be a multiple result exception due to table constraint\n+      } catch (NoResultException nre) {\n+        throw new WrappedResponse(notFound(BundleUtil\n+          .getStringFromBundle(\"find.dataverse.role.error.role.not.found.alias\", Collections.singletonList(alias))));\n+      }\n+\n+    } else {\n+\n+      try {\n+        role = rolesSvc.find(Long.parseLong(id));\n+        if (role == null) {\n+          throw new WrappedResponse(notFound(BundleUtil\n+            .getStringFromBundle(\"find.dataverse.role.error.role.not.found.id\", Collections.singletonList(id))));\n         } else {\n-            Dataverse d = dataverseSvc.findByAlias(id);\n-            return ( d != null ) ?\n-                    d : datasetSvc.findByGlobalId(id);\n-\n+          return role;\n         }\n-\t}\n \n-    protected <T> T failIfNull( T t, String errorMessage ) throws WrappedResponse {\n-        if ( t != null ) return t;\n-        throw new WrappedResponse( error( Response.Status.BAD_REQUEST,errorMessage) );\n-    }\n-\n-    protected MetadataBlock findMetadataBlock(Long id)  {\n-        return metadataBlockSvc.findById(id);\n-    }\n-    protected MetadataBlock findMetadataBlock(String idtf) throws NumberFormatException {\n-        return metadataBlockSvc.findByName(idtf);\n-    }\n-\n-    protected DatasetFieldType findDatasetFieldType(String idtf) throws NumberFormatException {\n-        return isNumeric(idtf) ? datasetFieldSvc.find(Long.parseLong(idtf))\n-                : datasetFieldSvc.findByNameOpt(idtf);\n-    }\n+      } catch (NumberFormatException nfe) {\n+        throw new WrappedResponse(\n+          badRequest(BundleUtil\n+            .getStringFromBundle(\"find.dataverse.role.error.role.not.found.bad.id\", Collections.singletonList(id))));\n+      }\n+    }\n+  }\n+\n+  protected DatasetLinkingDataverse findDatasetLinkingDataverseOrDie(String datasetId, String linkingDataverseId)\n+    throws WrappedResponse {\n+    DatasetLinkingDataverse dsld;\n+    Dataverse linkingDataverse = findDataverseOrDie(linkingDataverseId);\n+\n+    if (datasetId.equals(PERSISTENT_ID_KEY)) {\n+      String persistentId = getRequestParameter(PERSISTENT_ID_KEY.substring(1));\n+      if (persistentId == null) {\n+        throw new WrappedResponse(\n+          badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\",\n+            Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n+      }\n+\n+      Dataset dataset = datasetSvc.findByGlobalId(persistentId);\n+      if (dataset == null) {\n+        throw new WrappedResponse(notFound(BundleUtil\n+          .getStringFromBundle(\"find.dataset.error.dataset.not.found.persistentId\",\n+            Collections.singletonList(persistentId))));\n+      }\n+      datasetId = dataset.getId().toString();\n+    }\n+    try {\n+      dsld = dsLinkingService.findDatasetLinkingDataverse(Long.parseLong(datasetId), linkingDataverse.getId());\n+      if (dsld == null) {\n+        throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.datasetlinking.error.not.found.ids\",\n+          Arrays.asList(datasetId, linkingDataverse.getId().toString()))));\n+      }\n+      return dsld;\n+    } catch (NumberFormatException nfe) {\n+      throw new WrappedResponse(\n+        badRequest(BundleUtil.getStringFromBundle(\"find.datasetlinking.error.not.found.bad.ids\",\n+          Arrays.asList(datasetId, linkingDataverse.getId().toString()))));\n+    }\n+  }\n+\n+  protected DataverseRequest createDataverseRequest(User u) {\n+    return new DataverseRequest(u, httpRequest);\n+  }\n+\n+  protected Dataverse findDataverse(String idtf) {\n+    return isNumeric(idtf) ? dataverseSvc.find(Long.parseLong(idtf))\n+      : dataverseSvc.findByAlias(idtf);\n+  }\n+\n+  protected DvObject findDvo(Long id) {\n+    return em.createNamedQuery(\"DvObject.findById\", DvObject.class)\n+      .setParameter(\"id\", id)\n+      .getSingleResult();\n+  }\n+\n+  /**\n+   * Tries to find a DvObject. If the passed id can be interpreted as a number,\n+   * it tries to get the DvObject by its id. Else, it tries to get a {@link Dataverse}\n+   * with that alias. If that fails, tries to get a {@link Dataset} with that global id.\n+   *\n+   * @param id a value identifying the DvObject, either numeric of textual.\n+   * @return A DvObject, or {@code null}\n+   */\n+  protected DvObject findDvo(String id) {\n+    if (isNumeric(id)) {\n+      return findDvo(Long.valueOf(id));\n+    } else {\n+      Dataverse d = dataverseSvc.findByAlias(id);\n+      return (d != null) ?\n+        d : datasetSvc.findByGlobalId(id);\n+\n+    }\n+  }\n+\n+  protected <T> T failIfNull(T t, String errorMessage) throws WrappedResponse {\n+    if (t != null) {\n+      return t;\n+    }\n+    throw new WrappedResponse(error(Response.Status.BAD_REQUEST, errorMessage));\n+  }\n+\n+  protected MetadataBlock findMetadataBlock(Long id) {\n+    return metadataBlockSvc.findById(id);\n+  }\n+\n+  protected MetadataBlock findMetadataBlock(String idtf) throws NumberFormatException {\n+    return metadataBlockSvc.findByName(idtf);\n+  }\n+\n+  protected DatasetFieldType findDatasetFieldType(String idtf) throws NumberFormatException {\n+    return isNumeric(idtf) ? datasetFieldSvc.find(Long.parseLong(idtf))\n+      : datasetFieldSvc.findByNameOpt(idtf);\n+  }\n \n     /* =================== *\\\n      *  Command Execution  *\n     \\* =================== */\n \n-    /**\n-     * Executes a command, and returns the appropriate result/HTTP response.\n-     * @param <T> Return type for the command\n-     * @param cmd The command to execute.\n-     * @return Value from the command\n-     * @throws edu.harvard.iq.dataverse.api.AbstractApiBean.WrappedResponse Unwrap and return.\n-     * @see #response(java.util.concurrent.Callable)\n-     */\n-    protected <T> T execCommand( Command<T> cmd ) throws WrappedResponse {\n-        try {\n-            return engineSvc.submit(cmd);\n-\n-        } catch (IllegalCommandException ex) {\n-            throw new WrappedResponse( ex, forbidden(ex.getMessage() ) );\n-        } catch (PermissionException ex) {\n-            /**\n-             * TODO Is there any harm in exposing ex.getLocalizedMessage()?\n-             * There's valuable information in there that can help people reason\n-             * about permissions! The formatting of the error would need to be\n-             * cleaned up but here's an example the helpful information:\n-             *\n-             * \"User :guest is not permitted to perform requested action.Can't\n-             * execute command\n-             * edu.harvard.iq.dataverse.engine.command.impl.MoveDatasetCommand@50b150d9,\n-             * because request [DataverseRequest user:[GuestUser\n-             * :guest]@127.0.0.1] is missing permissions [AddDataset,\n-             * PublishDataset] on Object mra\"\n-             *\n-             * Right now, the error that's visible via API (and via GUI\n-             * sometimes?) doesn't have much information in it:\n-             *\n-             * \"User @jsmith is not permitted to perform requested action.\"\n-             */\n-            throw new WrappedResponse(error(Response.Status.UNAUTHORIZED,\n-                                                    \"User \" + cmd.getRequest().getUser().getIdentifier() + \" is not permitted to perform requested action.\") );\n-\n-        } catch (CommandException ex) {\n-            Logger.getLogger(AbstractApiBean.class.getName()).log(Level.SEVERE, \"Error while executing command \" + cmd, ex);\n-            throw new WrappedResponse(ex, error(Status.INTERNAL_SERVER_ERROR, ex.getMessage()));\n-        }\n-    }\n-\n-    /**\n-     * A syntactically nicer way of using {@link #execCommand(edu.harvard.iq.dataverse.engine.command.Command)}.\n-     * @param hdl The block to run.\n-     * @return HTTP Response appropriate for the way {@code hdl} executed.\n-     */\n-    protected Response response( Callable<Response> hdl ) {\n-        try {\n-            return hdl.call();\n-        } catch ( WrappedResponse rr ) {\n-            return rr.getResponse();\n-        } catch ( Exception ex ) {\n-            String incidentId = UUID.randomUUID().toString();\n-            logger.log(Level.SEVERE, \"API internal error \" + incidentId +\": \" + ex.getMessage(), ex);\n-            return Response.status(500)\n-                .entity( Json.createObjectBuilder()\n-                             .add(\"status\", \"ERROR\")\n-                             .add(\"code\", 500)\n-                             .add(\"message\", \"Internal server error. More details available at the server logs.\")\n-                             .add(\"incidentId\", incidentId)\n-                        .build())\n-                .type(\"application/json\").build();\n-        }\n-    }\n-\n-    /**\n-     * The preferred way of handling a request that requires a user. The system\n-     * looks for the user and, if found, handles it to the handler for doing the\n-     * actual work.\n-     *\n-     * This is a relatively secure way to handle things, since if the user is not\n-     * found, the response is about the bad API key, rather than something else\n-     * (say, 404 NOT FOUND which leaks information about the existence of the\n-     * sought object).\n-     *\n-     * @param hdl handling code block.\n-     * @return HTTP Response appropriate for the way {@code hdl} executed.\n-     */\n-    protected Response response( DataverseRequestHandler hdl ) {\n-        try {\n-            return hdl.handle(createDataverseRequest(findUserOrDie()));\n-        } catch ( WrappedResponse rr ) {\n-            return rr.getResponse();\n-        } catch ( Exception ex ) {\n-            String incidentId = UUID.randomUUID().toString();\n-            logger.log(Level.SEVERE, \"API internal error \" + incidentId +\": \" + ex.getMessage(), ex);\n-            return Response.status(500)\n-                .entity( Json.createObjectBuilder()\n-                             .add(\"status\", \"ERROR\")\n-                             .add(\"code\", 500)\n-                             .add(\"message\", \"Internal server error. More details available at the server logs.\")\n-                             .add(\"incidentId\", incidentId)\n-                        .build())\n-                .type(\"application/json\").build();\n-        }\n-    }\n+  /**\n+   * Executes a command, and returns the appropriate result/HTTP response.\n+   *\n+   * @param <T> Return type for the command\n+   * @param cmd The command to execute.\n+   * @return Value from the command\n+   * @throws edu.harvard.iq.dataverse.api.AbstractApiBean.WrappedResponse Unwrap and return.\n+   * @see #response(java.util.concurrent.Callable)\n+   */\n+  protected <T> T execCommand(Command<T> cmd) throws WrappedResponse {\n+    try {\n+      return engineSvc.submit(cmd);\n+\n+    } catch (IllegalCommandException ex) {\n+      throw new WrappedResponse(ex, forbidden(ex.getMessage()));\n+    } catch (PermissionException ex) {\n+      /**\n+       * TODO Is there any harm in exposing ex.getLocalizedMessage()?\n+       * There's valuable information in there that can help people reason\n+       * about permissions! The formatting of the error would need to be\n+       * cleaned up but here's an example the helpful information:\n+       *\n+       * \"User :guest is not permitted to perform requested action.Can't\n+       * execute command\n+       * edu.harvard.iq.dataverse.engine.command.impl.MoveDatasetCommand@50b150d9,\n+       * because request [DataverseRequest user:[GuestUser\n+       * :guest]@127.0.0.1] is missing permissions [AddDataset,\n+       * PublishDataset] on Object mra\"\n+       *\n+       * Right now, the error that's visible via API (and via GUI\n+       * sometimes?) doesn't have much information in it:\n+       *\n+       * \"User @jsmith is not permitted to perform requested action.\"\n+       */\n+      throw new WrappedResponse(error(Response.Status.UNAUTHORIZED,\n+        \"User \" + cmd.getRequest().getUser().getIdentifier() + \" is not permitted to perform requested action.\"));\n+\n+    } catch (CommandException ex) {\n+      Logger.getLogger(AbstractApiBean.class.getName()).log(Level.SEVERE, \"Error while executing command \" + cmd, ex);\n+      throw new WrappedResponse(ex, error(Status.INTERNAL_SERVER_ERROR, ex.getMessage()));\n+    }\n+  }\n+\n+  /**\n+   * A syntactically nicer way of using {@link #execCommand(edu.harvard.iq.dataverse.engine.command.Command)}.\n+   *\n+   * @param hdl The block to run.\n+   * @return HTTP Response appropriate for the way {@code hdl} executed.\n+   */\n+  protected Response response(Callable<Response> hdl) {\n+    try {\n+      return hdl.call();\n+    } catch (WrappedResponse rr) {\n+      return rr.getResponse();\n+    } catch (Exception ex) {\n+      String incidentId = UUID.randomUUID().toString();\n+      logger.log(Level.SEVERE, \"API internal error \" + incidentId + \": \" + ex.getMessage(), ex);\n+      return Response.status(500)\n+        .entity(Json.createObjectBuilder()\n+          .add(\"status\", \"ERROR\")\n+          .add(\"code\", 500)\n+          .add(\"message\", \"Internal server error. More details available at the server logs.\")\n+          .add(\"incidentId\", incidentId)\n+          .build())\n+        .type(\"application/json\").build();\n+    }\n+  }\n+\n+  /**\n+   * The preferred way of handling a request that requires a user. The system\n+   * looks for the user and, if found, handles it to the handler for doing the\n+   * actual work.\n+   * <p>\n+   * This is a relatively secure way to handle things, since if the user is not\n+   * found, the response is about the bad API key, rather than something else\n+   * (say, 404 NOT FOUND which leaks information about the existence of the\n+   * sought object).\n+   *\n+   * @param hdl handling code block.\n+   * @return HTTP Response appropriate for the way {@code hdl} executed.\n+   */\n+  protected Response response(DataverseRequestHandler hdl) {\n+    try {\n+      return hdl.handle(createDataverseRequest(findUserOrDie()));\n+    } catch (WrappedResponse rr) {\n+      return rr.getResponse();\n+    } catch (Exception ex) {\n+      String incidentId = UUID.randomUUID().toString();\n+      logger.log(Level.SEVERE, \"API internal error \" + incidentId + \": \" + ex.getMessage(), ex);\n+      return Response.status(500)\n+        .entity(Json.createObjectBuilder()\n+          .add(\"status\", \"ERROR\")\n+          .add(\"code\", 500)\n+          .add(\"message\", \"Internal server error. More details available at the server logs.\")\n+          .add(\"incidentId\", incidentId)\n+          .build())\n+        .type(\"application/json\").build();\n+    }\n+  }\n \n     /* ====================== *\\\n      *  HTTP Response methods *\n     \\* ====================== */\n \n-    protected Response ok( JsonArrayBuilder bld ) {\n-        return Response.ok(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", bld).build())\n-            .type(MediaType.APPLICATION_JSON).build();\n-    }\n-    \n-    protected Response ok( JsonArray ja ) {\n-        return Response.ok(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", ja).build())\n-            .type(MediaType.APPLICATION_JSON).build();\n-    }\n-\n-    protected Response ok( JsonObjectBuilder bld ) {\n-        return Response.ok( Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", bld).build() )\n-            .type(MediaType.APPLICATION_JSON)\n-            .build();\n-    }\n-    \n-    protected Response ok( JsonObject jo ) {\n-        return Response.ok( Json.createObjectBuilder()\n-                .add(\"status\", STATUS_OK)\n-                .add(\"data\", jo).build() )\n-                .type(MediaType.APPLICATION_JSON)\n-                .build();    \n-    }\n-\n-    protected Response ok( String msg ) {\n-        return Response.ok().entity(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", Json.createObjectBuilder().add(\"message\",msg)).build() )\n-            .type(MediaType.APPLICATION_JSON)\n-            .build();\n-    }\n-    \n-    protected Response ok( String msg, JsonObjectBuilder bld  ) {\n-        return Response.ok().entity(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"message\", Json.createObjectBuilder().add(\"message\",msg))     \n-            .add(\"data\", bld).build())      \n-            .type(MediaType.APPLICATION_JSON)\n-            .build();\n-    }\n-\n-    protected Response ok( boolean value ) {\n-        return Response.ok().entity(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", value).build() ).build();\n-    }\n-\n-    /**\n-     * @param data Payload to return.\n-     * @param mediaType Non-JSON media type.\n-     * @param downloadFilename - add Content-Disposition header to suggest filename if not null\n-     * @return Non-JSON response, such as a shell script.\n-     */\n-    protected Response ok(String data, MediaType mediaType, String downloadFilename) {\n-        ResponseBuilder res =Response.ok().entity(data).type(mediaType);\n-        if(downloadFilename != null) {\n-            res = res.header(\"Content-Disposition\", \"attachment; filename=\" + downloadFilename);\n-        }\n-        return res.build();\n-    }\n-\n-    protected Response created( String uri, JsonObjectBuilder bld ) {\n-        return Response.created( URI.create(uri) )\n-                .entity( Json.createObjectBuilder()\n-                .add(\"status\", \"OK\")\n-                .add(\"data\", bld).build())\n-                .type(MediaType.APPLICATION_JSON)\n-                .build();\n-    }\n-    \n-    protected Response accepted(JsonObjectBuilder bld) {\n-        return Response.accepted()\n-                .entity(Json.createObjectBuilder()\n-                        .add(\"status\", STATUS_WF_IN_PROGRESS)\n-                        .add(\"data\",bld).build()\n-                ).build();\n-    }\n-    \n-    protected Response accepted() {\n-        return Response.accepted()\n-                .entity(Json.createObjectBuilder()\n-                        .add(\"status\", STATUS_WF_IN_PROGRESS).build()\n-                ).build();\n-    }\n-\n-    protected Response notFound( String msg ) {\n-        return error(Status.NOT_FOUND, msg);\n-    }\n-\n-    protected Response badRequest( String msg ) {\n-        return error( Status.BAD_REQUEST, msg );\n-    }\n-    \n-    protected Response forbidden( String msg ) {\n-        return error( Status.FORBIDDEN, msg );\n-    }\n-    \n-    protected Response badApiKey( String apiKey ) {\n-        return error(Status.UNAUTHORIZED, (apiKey != null ) ? \"Bad api key \" : \"Please provide a key query parameter (?key=XXX) or via the HTTP header \" + DATAVERSE_KEY_HEADER_NAME);\n-    }\n-\n-    protected Response badWFKey( String wfId ) {\n-        String message = (wfId != null ) ? \"Bad workflow invocationId \" : \"Please provide an invocationId query parameter (?invocationId=XXX) or via the HTTP header \" + DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME;\n-        return error(Status.UNAUTHORIZED, message );\n-    }\n-    \n-    protected Response permissionError( PermissionException pe ) {\n-        return permissionError( pe.getMessage() );\n-    }\n-\n-    protected Response permissionError( String message ) {\n-        return unauthorized( message );\n-    }\n-    \n-    protected Response unauthorized( String message ) {\n-        return error( Status.UNAUTHORIZED, message );\n-    }\n-\n-    protected static Response error( Status sts, String msg ) {\n-        return Response.status(sts)\n-                .entity( NullSafeJsonBuilder.jsonObjectBuilder()\n-                        .add(\"status\", STATUS_ERROR)\n-                        .add( \"message\", msg ).build()\n-                ).type(MediaType.APPLICATION_JSON_TYPE).build();\n-    }\n+  protected Response ok(JsonArrayBuilder bld) {\n+    return Response.ok(Json.createObjectBuilder()\n+      .add(\"status\", STATUS_OK)\n+      .add(\"data\", bld).build())\n+      .type(MediaType.APPLICATION_JSON).build();\n+  }\n+\n+  protected Response ok(JsonArray ja) {\n+    return Response.ok(Json.createObjectBuilder()\n+      .add(\"status\", STATUS_OK)\n+      .add(\"data\", ja).build())\n+      .type(MediaType.APPLICATION_JSON).build();\n+  }\n+\n+  protected Response ok(JsonObjectBuilder bld) {\n+    return Response.ok(Json.createObjectBuilder()\n+      .add(\"status\", STATUS_OK)\n+      .add(\"data\", bld).build())\n+      .type(MediaType.APPLICATION_JSON)\n+      .build();\n+  }\n+\n+  protected Response ok(JsonObject jo) {\n+    return Response.ok(Json.createObjectBuilder()\n+      .add(\"status\", STATUS_OK)\n+      .add(\"data\", jo).build())\n+      .type(MediaType.APPLICATION_JSON)\n+      .build();\n+  }\n+\n+  protected Response ok(String msg) {\n+    return Response.ok().entity(Json.createObjectBuilder()\n+      .add(\"status\", STATUS_OK)\n+      .add(\"data\", Json.createObjectBuilder().add(\"message\", msg)).build())\n+      .type(MediaType.APPLICATION_JSON)\n+      .build();\n+  }\n+\n+  protected Response ok(String msg, JsonObjectBuilder bld) {\n+    return Response.ok().entity(Json.createObjectBuilder()\n+      .add(\"status\", STATUS_OK)\n+      .add(\"message\", Json.createObjectBuilder().add(\"message\", msg))\n+      .add(\"data\", bld).build())\n+      .type(MediaType.APPLICATION_JSON)\n+      .build();\n+  }\n+\n+  protected Response ok(boolean value) {\n+    return Response.ok().entity(Json.createObjectBuilder()\n+      .add(\"status\", STATUS_OK)\n+      .add(\"data\", value).build()).build();\n+  }\n+\n+  /**\n+   * @param data             Payload to return.\n+   * @param mediaType        Non-JSON media type.\n+   * @param downloadFilename - add Content-Disposition header to suggest filename if not null\n+   * @return Non-JSON response, such as a shell script.\n+   */\n+  protected Response ok(String data, MediaType mediaType, String downloadFilename) {\n+    ResponseBuilder res = Response.ok().entity(data).type(mediaType);\n+    if (downloadFilename != null) {\n+      res = res.header(\"Content-Disposition\", \"attachment; filename=\" + downloadFilename);\n+    }\n+    return res.build();\n+  }\n+\n+  protected Response created(String uri, JsonObjectBuilder bld) {\n+    return Response.created(URI.create(uri))\n+      .entity(Json.createObjectBuilder()\n+        .add(\"status\", \"OK\")\n+        .add(\"data\", bld).build())\n+      .type(MediaType.APPLICATION_JSON)\n+      .build();\n+  }\n+\n+  protected Response accepted(JsonObjectBuilder bld) {\n+    return Response.accepted()\n+      .entity(Json.createObjectBuilder()\n+        .add(\"status\", STATUS_WF_IN_PROGRESS)\n+        .add(\"data\", bld).build()\n+      ).build();\n+  }\n+\n+  protected Response accepted() {\n+    return Response.accepted()\n+      .entity(Json.createObjectBuilder()\n+        .add(\"status\", STATUS_WF_IN_PROGRESS).build()\n+      ).build();\n+  }\n+\n+  protected Response notFound(String msg) {\n+    return error(Status.NOT_FOUND, msg);\n+  }\n+\n+  protected Response badRequest(String msg) {\n+    return error(Status.BAD_REQUEST, msg);\n+  }\n+\n+  protected Response forbidden(String msg) {\n+    return error(Status.FORBIDDEN, msg);\n+  }\n+\n+  protected Response badApiKey(String apiKey) {\n+    return error(Status.UNAUTHORIZED, (apiKey != null) ? \"Bad api key \" :\n+      \"Please provide a key query parameter (?key=XXX) or via the HTTP header \" + DATAVERSE_KEY_HEADER_NAME);\n+  }\n+\n+  protected Response badWFKey(String wfId) {\n+    String message = (wfId != null) ? \"Bad workflow invocationId \" :\n+      \"Please provide an invocationId query parameter (?invocationId=XXX) or via the HTTP header \" +\n+        DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME;\n+    return error(Status.UNAUTHORIZED, message);\n+  }\n+\n+  protected Response permissionError(PermissionException pe) {\n+    return permissionError(pe.getMessage());\n+  }\n+\n+  protected Response permissionError(String message) {\n+    return unauthorized(message);\n+  }\n+\n+  protected Response unauthorized(String message) {\n+    return error(Status.UNAUTHORIZED, message);\n+  }\n+\n+  protected static Response error(Status sts, String msg) {\n+    return Response.status(sts)\n+      .entity(NullSafeJsonBuilder.jsonObjectBuilder()\n+        .add(\"status\", STATUS_ERROR)\n+        .add(\"message\", msg).build()\n+      ).type(MediaType.APPLICATION_JSON_TYPE).build();\n+  }\n }\n \n class LazyRef<T> {\n-    private interface Ref<T> {\n-        T get();\n-    }\n+  private interface Ref<T> {\n+    T get();\n+  }\n \n-    private Ref<T> ref;\n-\n-    public LazyRef( final Callable<T> initer ) {\n-        ref = () -> {\n-            try {\n-                final T t = initer.call();\n-                ref = () -> t;\n-                return ref.get();\n-            } catch (Exception ex) {\n-                Logger.getLogger(LazyRef.class.getName()).log(Level.SEVERE, null, ex);\n-                return null;\n-            }\n-        };\n-    }\n+  private Ref<T> ref;\n \n-    public T get()  {\n+  public LazyRef(final Callable<T> initer) {\n+    ref = () -> {\n+      try {\n+        final T t = initer.call();\n+        ref = () -> t;\n         return ref.get();\n-    }\n+      } catch (Exception ex) {\n+        Logger.getLogger(LazyRef.class.getName()).log(Level.SEVERE, null, ex);\n+        return null;\n+      }\n+    };\n+  }\n+\n+  public T get() {\n+    return ref.get();\n+  }\n }\n",
            "diff_size": 1024
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/9/AbstractApiBean.java\nindex d21524a7150..fa0332c8491 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/9/AbstractApiBean.java\n@@ -85,29 +85,36 @@ import static org.apache.commons.lang3.StringUtils.isNumeric;\n  * Base class for API beans\n  * @author michael\n  */\n+\n public abstract class AbstractApiBean {\n \n     private static final Logger logger = Logger.getLogger(AbstractApiBean.class.getName());\n     private static final String DATAVERSE_KEY_HEADER_NAME = \"X-Dataverse-key\";\n-    private static final String PERSISTENT_ID_KEY=\":persistentId\";\n-    private static final String ALIAS_KEY=\":alias\";\n+    private static final String PERSISTENT_ID_KEY = \":persistentId\";\n+    private static final String ALIAS_KEY = \":alias\";\n+\n     public static final String STATUS_ERROR = \"ERROR\";\n+\n     public static final String STATUS_OK = \"OK\";\n+\n     public static final String STATUS_WF_IN_PROGRESS = \"WORKFLOW_IN_PROGRESS\";\n+\n     public static final String DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME = \"X-Dataverse-invocationID\";\n \n     /**\n      * Utility class to convey a proper error response using Java's exceptions.\n      */\n+\n     public static class WrappedResponse extends Exception {\n+\n         private final Response response;\n \n         public WrappedResponse(Response response) {\n             this.response = response;\n         }\n \n-        public WrappedResponse( Throwable cause, Response response ) {\n-            super( cause );\n+        public WrappedResponse(Throwable cause, Response response) {\n+            super(cause);\n             this.response = response;\n         }\n \n@@ -121,15 +128,15 @@ public abstract class AbstractApiBean {\n          * @param message additional message to be added to the response.\n          * @return A Response with updated message field.\n          */\n-        public Response refineResponse( String message ) {\n+\n+        public Response refineResponse(String message) {\n             final Status statusCode = Response.Status.fromStatusCode(response.getStatus());\n             String baseMessage = getWrappedMessageWhenJson();\n-\n-            if ( baseMessage == null ) {\n+            if (baseMessage == null) {\n                 final Throwable cause = getCause();\n-                baseMessage = (cause!=null ? cause.getMessage() : \"\");\n+                baseMessage = (cause != null ? cause.getMessage() : \"\");\n             }\n-            return error(statusCode, message+\" \"+baseMessage);\n+            return error(statusCode, message + \" \" + baseMessage);\n         }\n \n         /**\n@@ -137,16 +144,16 @@ public abstract class AbstractApiBean {\n          * return the message field it has (if any).\n          * @return the content of a message field, or {@code null}.\n          */\n+\n         String getWrappedMessageWhenJson() {\n-            if ( response.getMediaType().equals(MediaType.APPLICATION_JSON_TYPE) ) {\n+            if (response.getMediaType().equals(MediaType.APPLICATION_JSON_TYPE)) {\n                 Object entity = response.getEntity();\n-                if ( entity == null ) return null;\n-\n+                if (entity == null) return null;\n                 String json = entity.toString();\n-                try ( StringReader rdr = new StringReader(json) ){\n+                try (StringReader rdr = new StringReader(json)) {\n                     JsonReader jrdr = Json.createReader(rdr);\n                     JsonObject obj = jrdr.readObject();\n-                    if ( obj.containsKey(\"message\") ) {\n+                    if (obj.containsKey(\"message\")) {\n                         JsonValue message = obj.get(\"message\");\n                         return message.getValueType() == ValueType.STRING ? obj.getString(\"message\") : message.toString();\n                     } else {\n@@ -164,7 +171,7 @@ public abstract class AbstractApiBean {\n \n     @EJB\n     protected DatasetServiceBean datasetSvc;\n-    \n+\n     @EJB\n     protected DataFileServiceBean fileService;\n \n@@ -183,8 +190,8 @@ public abstract class AbstractApiBean {\n     @EJB\n     protected UserServiceBean userSvc;\n \n-\t@EJB\n-\tprotected DataverseRoleServiceBean rolesSvc;\n+    @EJB\n+    protected DataverseRoleServiceBean rolesSvc;\n \n     @EJB\n     protected SettingsServiceBean settingsSvc;\n@@ -221,10 +228,10 @@ public abstract class AbstractApiBean {\n \n     @EJB\n     protected DataCaptureModuleServiceBean dataCaptureModuleSvc;\n-    \n+\n     @EJB\n     protected DatasetLinkingServiceBean dsLinkingService;\n-    \n+\n     @EJB\n     protected DataverseLinkingServiceBean dvLinkingService;\n \n@@ -242,11 +249,11 @@ public abstract class AbstractApiBean {\n \n     @EJB\n     MetricsServiceBean metricsSvc;\n-    \n-    @EJB \n+\n+    @EJB\n     DvObjectServiceBean dvObjSvc;\n-    \n-    @EJB \n+\n+    @EJB\n     GuestbookResponseServiceBean gbRespSvc;\n \n     @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n@@ -258,25 +265,30 @@ public abstract class AbstractApiBean {\n     /**\n      * For pretty printing (indenting) of JSON output.\n      */\n-    public enum Format {\n \n+    public enum Format {\n         PRETTY\n+\n     }\n \n     private final LazyRef<JsonParser> jsonParserRef = new LazyRef<>(new Callable<JsonParser>() {\n-        @Override\n-        public JsonParser call() throws Exception {\n-            return new JsonParser(datasetFieldSvc, metadataBlockSvc,settingsSvc);\n-        }\n-    });\n+\n+                                                          @Override\n+                                                          public JsonParser call() throws Exception {\n+                                                              return new JsonParser(datasetFieldSvc, metadataBlockSvc, settingsSvc);\n+                                                          }\n+                                                      });\n \n     /**\n      * Functional interface for handling HTTP requests in the APIs.\n      *\n      * @see #response(edu.harvard.iq.dataverse.api.AbstractApiBean.DataverseRequestHandler)\n      */\n+\n+\n     protected static interface DataverseRequestHandler {\n-        Response handle( DataverseRequest u ) throws WrappedResponse;\n+\n+        Response handle(DataverseRequest u) throws WrappedResponse;\n     }\n \n \n@@ -285,17 +297,19 @@ public abstract class AbstractApiBean {\n      *  Get that DSL feelin' *\n     \\* ===================== */\n \n+\n     protected JsonParser jsonParser() {\n         return jsonParserRef.get();\n     }\n \n-    protected boolean parseBooleanOrDie( String input ) throws WrappedResponse {\n-        if (input == null ) throw new WrappedResponse( badRequest(\"Boolean value missing\"));\n+\n+    protected boolean parseBooleanOrDie(String input) throws WrappedResponse {\n+        if (input == null) throw new WrappedResponse(badRequest(\"Boolean value missing\"));\n         input = input.trim();\n-        if ( Util.isBoolean(input) ) {\n+        if (Util.isBoolean(input)) {\n             return Util.isTrue(input);\n         } else {\n-            throw new WrappedResponse( badRequest(\"Illegal boolean value '\" + input + \"'\"));\n+            throw new WrappedResponse(badRequest(\"Illegal boolean value '\" + input + \"'\"));\n         }\n     }\n \n@@ -305,27 +319,31 @@ public abstract class AbstractApiBean {\n      * @param key Name of the requested parameter.\n      * @return Value of the requested parameter in the current request.\n      */\n-    protected String getRequestParameter( String key ) {\n+\n+\n+    protected String getRequestParameter(String key) {\n         return httpRequest.getParameter(key);\n     }\n \n+\n     protected String getRequestApiKey() {\n         String headerParamApiKey = httpRequest.getHeader(DATAVERSE_KEY_HEADER_NAME);\n         String queryParamApiKey = httpRequest.getParameter(\"key\");\n-                \n-        return headerParamApiKey!=null ? headerParamApiKey : queryParamApiKey;\n+        return headerParamApiKey != null ? headerParamApiKey : queryParamApiKey;\n     }\n-    \n+\n+\n     protected String getRequestWorkflowInvocationID() {\n         String headerParamWFKey = httpRequest.getHeader(DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME);\n         String queryParamWFKey = httpRequest.getParameter(\"invocationID\");\n-                \n-        return headerParamWFKey!=null ? headerParamWFKey : queryParamWFKey;\n+        return headerParamWFKey != null ? headerParamWFKey : queryParamWFKey;\n     }\n \n     /* ========= *\\\n      *  Finders  *\n     \\* ========= */\n+\n+\n     protected RoleAssignee findAssignee(String identifier) {\n         try {\n             RoleAssignee roleAssignee = roleAssigneeSvc.getRoleAssignee(identifier);\n@@ -346,7 +364,9 @@ public abstract class AbstractApiBean {\n      * @return the user, or null\n      * @see #findUserOrDie(java.lang.String)\n      */\n-    protected AuthenticatedUser findUserByApiToken( String apiKey ) {\n+\n+\n+    protected AuthenticatedUser findUserByApiToken(String apiKey) {\n         return authSvc.lookupUser(apiKey);\n     }\n \n@@ -355,12 +375,15 @@ public abstract class AbstractApiBean {\n      * @return a user, may be a guest user.\n      * @throws edu.harvard.iq.dataverse.api.AbstractApiBean.WrappedResponse iff there is an api key present, but it is invalid.\n      */\n+\n+\n     protected User findUserOrDie() throws WrappedResponse {\n         final String requestApiKey = getRequestApiKey();\n         final String requestWFKey = getRequestWorkflowInvocationID();\n         if (requestApiKey == null && requestWFKey == null) {\n             return GuestUser.get();\n         }\n+\n         PrivateUrlUser privateUrlUser = privateUrlSvc.getPrivateUrlUserFromToken(requestApiKey);\n         if (privateUrlUser != null) {\n             return privateUrlUser;\n@@ -380,22 +403,20 @@ public abstract class AbstractApiBean {\n      * @return The authenticated user which owns the passed api key\n      * @throws edu.harvard.iq.dataverse.api.AbstractApiBean.WrappedResponse in case said user is not found.\n      */\n+\n+\n     protected AuthenticatedUser findAuthenticatedUserOrDie() throws WrappedResponse {\n         return findAuthenticatedUserOrDie(getRequestApiKey(), getRequestWorkflowInvocationID());\n     }\n \n-\n-    private AuthenticatedUser findAuthenticatedUserOrDie( String key, String wfid ) throws WrappedResponse {\n+    private AuthenticatedUser findAuthenticatedUserOrDie(String key, String wfid) throws WrappedResponse {\n         if (key != null) {\n             // No check for deactivated user because it's done in authSvc.lookupUser.\n             AuthenticatedUser authUser = authSvc.lookupUser(key);\n-\n             if (authUser != null) {\n                 authUser = userSvc.updateLastApiUseTime(authUser);\n-\n                 return authUser;\n-            }\n-            else {\n+            } else {\n                 throw new WrappedResponse(badApiKey(key));\n             }\n         } else if (wfid != null) {\n@@ -410,14 +431,16 @@ public abstract class AbstractApiBean {\n         throw new WrappedResponse(badApiKey(null));\n     }\n \n-    protected Dataverse findDataverseOrDie( String dvIdtf ) throws WrappedResponse {\n+\n+    protected Dataverse findDataverseOrDie(String dvIdtf) throws WrappedResponse {\n         Dataverse dv = findDataverse(dvIdtf);\n-        if ( dv == null ) {\n-            throw new WrappedResponse(error( Response.Status.NOT_FOUND, \"Can't find dataverse with identifier='\" + dvIdtf + \"'\"));\n+        if (dv == null) {\n+            throw new WrappedResponse(error(Response.Status.NOT_FOUND, \"Can't find dataverse with identifier='\" + dvIdtf + \"'\"));\n         }\n         return dv;\n     }\n-    \n+\n+\n     protected DataverseLinkingDataverse findDataverseLinkingDataverseOrDie(String dataverseId, String linkedDataverseId) throws WrappedResponse {\n         DataverseLinkingDataverse dvld;\n         Dataverse dataverse = findDataverseOrDie(dataverseId);\n@@ -429,25 +452,24 @@ public abstract class AbstractApiBean {\n             }\n             return dvld;\n         } catch (NumberFormatException nfe) {\n-            throw new WrappedResponse(\n-                    badRequest(BundleUtil.getStringFromBundle(\"find.dataverselinking.error.not.found.bad.ids\", Arrays.asList(dataverseId, linkedDataverseId))));\n+            throw new WrappedResponse(badRequest(BundleUtil.getStringFromBundle(\"find.dataverselinking.error.not.found.bad.ids\", Arrays.asList(dataverseId, linkedDataverseId))));\n         }\n     }\n \n+\n     protected Dataset findDatasetOrDie(String id) throws WrappedResponse {\n         Dataset dataset;\n         if (id.equals(PERSISTENT_ID_KEY)) {\n             String persistentId = getRequestParameter(PERSISTENT_ID_KEY.substring(1));\n             if (persistentId == null) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\", Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n+                throw new WrappedResponse(badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\",\n+                                                                                    Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n             }\n             dataset = datasetSvc.findByGlobalId(persistentId);\n             if (dataset == null) {\n                 throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset.not.found.persistentId\", Collections.singletonList(persistentId))));\n             }\n             return dataset;\n-\n         } else {\n             try {\n                 dataset = datasetSvc.find(Long.parseLong(id));\n@@ -456,19 +478,19 @@ public abstract class AbstractApiBean {\n                 }\n                 return dataset;\n             } catch (NumberFormatException nfe) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset.not.found.bad.id\", Collections.singletonList(id))));\n+                throw new WrappedResponse(badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset.not.found.bad.id\", Collections.singletonList(id))));\n             }\n         }\n     }\n-    \n+\n+\n     protected DataFile findDataFileOrDie(String id) throws WrappedResponse {\n         DataFile datafile;\n         if (id.equals(PERSISTENT_ID_KEY)) {\n             String persistentId = getRequestParameter(PERSISTENT_ID_KEY.substring(1));\n             if (persistentId == null) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\", Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n+                throw new WrappedResponse(badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\",\n+                                                                                    Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n             }\n             datafile = fileService.findByGlobalId(persistentId);\n             if (datafile == null) {\n@@ -483,28 +505,24 @@ public abstract class AbstractApiBean {\n                 }\n                 return datafile;\n             } catch (NumberFormatException nfe) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.datafile.error.datafile.not.found.bad.id\", Collections.singletonList(id))));\n+                throw new WrappedResponse(badRequest(BundleUtil.getStringFromBundle(\"find.datafile.error.datafile.not.found.bad.id\", Collections.singletonList(id))));\n             }\n         }\n     }\n-       \n+\n+\n     protected DataverseRole findRoleOrDie(String id) throws WrappedResponse {\n         DataverseRole role;\n         if (id.equals(ALIAS_KEY)) {\n             String alias = getRequestParameter(ALIAS_KEY.substring(1));\n             try {\n-                return em.createNamedQuery(\"DataverseRole.findDataverseRoleByAlias\", DataverseRole.class)\n-                        .setParameter(\"alias\", alias)\n-                        .getSingleResult();\n+                return em.createNamedQuery(\"DataverseRole.findDataverseRoleByAlias\", DataverseRole.class).setParameter(\"alias\", alias).getSingleResult();\n \n             //Should not be a multiple result exception due to table constraint\n             } catch (NoResultException nre) {\n                 throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataverse.role.error.role.not.found.alias\", Collections.singletonList(alias))));\n             }\n-\n         } else {\n-\n             try {\n                 role = rolesSvc.find(Long.parseLong(id));\n                 if (role == null) {\n@@ -512,57 +530,56 @@ public abstract class AbstractApiBean {\n                 } else {\n                     return role;\n                 }\n-\n             } catch (NumberFormatException nfe) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataverse.role.error.role.not.found.bad.id\", Collections.singletonList(id))));\n+                throw new WrappedResponse(badRequest(BundleUtil.getStringFromBundle(\"find.dataverse.role.error.role.not.found.bad.id\", Collections.singletonList(id))));\n             }\n         }\n     }\n-    \n+\n+\n     protected DatasetLinkingDataverse findDatasetLinkingDataverseOrDie(String datasetId, String linkingDataverseId) throws WrappedResponse {\n         DatasetLinkingDataverse dsld;\n         Dataverse linkingDataverse = findDataverseOrDie(linkingDataverseId);\n-\n         if (datasetId.equals(PERSISTENT_ID_KEY)) {\n             String persistentId = getRequestParameter(PERSISTENT_ID_KEY.substring(1));\n             if (persistentId == null) {\n-                throw new WrappedResponse(\n-                        badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\", Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n+                throw new WrappedResponse(badRequest(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset_id_is_null\",\n+                                                                                    Collections.singletonList(PERSISTENT_ID_KEY.substring(1)))));\n             }\n-            \n+\n             Dataset dataset = datasetSvc.findByGlobalId(persistentId);\n             if (dataset == null) {\n                 throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.dataset.error.dataset.not.found.persistentId\", Collections.singletonList(persistentId))));\n             }\n             datasetId = dataset.getId().toString();\n-        } \n+        }\n         try {\n             dsld = dsLinkingService.findDatasetLinkingDataverse(Long.parseLong(datasetId), linkingDataverse.getId());\n             if (dsld == null) {\n-                throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.datasetlinking.error.not.found.ids\", Arrays.asList(datasetId, linkingDataverse.getId().toString()))));\n+                throw new WrappedResponse(notFound(BundleUtil.getStringFromBundle(\"find.datasetlinking.error.not.found.ids\",\n+                                                                                  Arrays.asList(datasetId, linkingDataverse.getId().toString()))));\n             }\n             return dsld;\n         } catch (NumberFormatException nfe) {\n-            throw new WrappedResponse(\n-                    badRequest(BundleUtil.getStringFromBundle(\"find.datasetlinking.error.not.found.bad.ids\", Arrays.asList(datasetId, linkingDataverse.getId().toString()))));\n+            throw new WrappedResponse(badRequest(BundleUtil.getStringFromBundle(\"find.datasetlinking.error.not.found.bad.ids\",\n+                                                                                Arrays.asList(datasetId, linkingDataverse.getId().toString()))));\n         }\n     }\n \n-    protected DataverseRequest createDataverseRequest( User u )  {\n+\n+    protected DataverseRequest createDataverseRequest(User u) {\n         return new DataverseRequest(u, httpRequest);\n     }\n \n-\tprotected Dataverse findDataverse( String idtf ) {\n-\t\treturn isNumeric(idtf) ? dataverseSvc.find(Long.parseLong(idtf))\n-\t \t\t\t\t\t\t\t  : dataverseSvc.findByAlias(idtf);\n-\t}\n \n-\tprotected DvObject findDvo( Long id ) {\n-\t\treturn em.createNamedQuery(\"DvObject.findById\", DvObject.class)\n-\t\t\t\t.setParameter(\"id\", id)\n-\t\t\t\t.getSingleResult();\n-\t}\n+    protected Dataverse findDataverse(String idtf) {\n+        return isNumeric(idtf) ? dataverseSvc.find(Long.parseLong(idtf)) : dataverseSvc.findByAlias(idtf);\n+    }\n+\n+\n+    protected DvObject findDvo(Long id) {\n+        return em.createNamedQuery(\"DvObject.findById\", DvObject.class).setParameter(\"id\", id).getSingleResult();\n+    }\n \n     /**\n      * Tries to find a DvObject. If the passed id can be interpreted as a number,\n@@ -571,32 +588,36 @@ public abstract class AbstractApiBean {\n      * @param id a value identifying the DvObject, either numeric of textual.\n      * @return A DvObject, or {@code null}\n      */\n-\tprotected DvObject findDvo( String id ) {\n-        if ( isNumeric(id) ) {\n-            return findDvo( Long.valueOf(id)) ;\n+\n+\n+    protected DvObject findDvo(String id) {\n+        if (isNumeric(id)) {\n+            return findDvo(Long.valueOf(id));\n         } else {\n             Dataverse d = dataverseSvc.findByAlias(id);\n-            return ( d != null ) ?\n-                    d : datasetSvc.findByGlobalId(id);\n-\n+            return (d != null) ? d : datasetSvc.findByGlobalId(id);\n         }\n-\t}\n+    }\n+\n \n-    protected <T> T failIfNull( T t, String errorMessage ) throws WrappedResponse {\n-        if ( t != null ) return t;\n-        throw new WrappedResponse( error( Response.Status.BAD_REQUEST,errorMessage) );\n+    protected <T> T failIfNull(T t, String errorMessage) throws WrappedResponse {\n+        if (t != null) return t;\n+        throw new WrappedResponse(error(Response.Status.BAD_REQUEST, errorMessage));\n     }\n \n-    protected MetadataBlock findMetadataBlock(Long id)  {\n+\n+    protected MetadataBlock findMetadataBlock(Long id) {\n         return metadataBlockSvc.findById(id);\n     }\n+\n+\n     protected MetadataBlock findMetadataBlock(String idtf) throws NumberFormatException {\n         return metadataBlockSvc.findByName(idtf);\n     }\n \n+\n     protected DatasetFieldType findDatasetFieldType(String idtf) throws NumberFormatException {\n-        return isNumeric(idtf) ? datasetFieldSvc.find(Long.parseLong(idtf))\n-                : datasetFieldSvc.findByNameOpt(idtf);\n+        return isNumeric(idtf) ? datasetFieldSvc.find(Long.parseLong(idtf)) : datasetFieldSvc.findByNameOpt(idtf);\n     }\n \n     /* =================== *\\\n@@ -611,12 +632,13 @@ public abstract class AbstractApiBean {\n      * @throws edu.harvard.iq.dataverse.api.AbstractApiBean.WrappedResponse Unwrap and return.\n      * @see #response(java.util.concurrent.Callable)\n      */\n-    protected <T> T execCommand( Command<T> cmd ) throws WrappedResponse {\n+\n+\n+    protected <T> T execCommand(Command<T> cmd) throws WrappedResponse {\n         try {\n             return engineSvc.submit(cmd);\n-\n         } catch (IllegalCommandException ex) {\n-            throw new WrappedResponse( ex, forbidden(ex.getMessage() ) );\n+            throw new WrappedResponse(ex, forbidden(ex.getMessage()));\n         } catch (PermissionException ex) {\n             /**\n              * TODO Is there any harm in exposing ex.getLocalizedMessage()?\n@@ -636,9 +658,7 @@ public abstract class AbstractApiBean {\n              *\n              * \"User @jsmith is not permitted to perform requested action.\"\n              */\n-            throw new WrappedResponse(error(Response.Status.UNAUTHORIZED,\n-                                                    \"User \" + cmd.getRequest().getUser().getIdentifier() + \" is not permitted to perform requested action.\") );\n-\n+            throw new WrappedResponse(error(Response.Status.UNAUTHORIZED, \"User \" + cmd.getRequest().getUser().getIdentifier() + \" is not permitted to perform requested action.\"));\n         } catch (CommandException ex) {\n             Logger.getLogger(AbstractApiBean.class.getName()).log(Level.SEVERE, \"Error while executing command \" + cmd, ex);\n             throw new WrappedResponse(ex, error(Status.INTERNAL_SERVER_ERROR, ex.getMessage()));\n@@ -650,22 +670,17 @@ public abstract class AbstractApiBean {\n      * @param hdl The block to run.\n      * @return HTTP Response appropriate for the way {@code hdl} executed.\n      */\n-    protected Response response( Callable<Response> hdl ) {\n+\n+\n+    protected Response response(Callable<Response> hdl) {\n         try {\n             return hdl.call();\n-        } catch ( WrappedResponse rr ) {\n+        } catch (WrappedResponse rr) {\n             return rr.getResponse();\n-        } catch ( Exception ex ) {\n+        } catch (Exception ex) {\n             String incidentId = UUID.randomUUID().toString();\n-            logger.log(Level.SEVERE, \"API internal error \" + incidentId +\": \" + ex.getMessage(), ex);\n-            return Response.status(500)\n-                .entity( Json.createObjectBuilder()\n-                             .add(\"status\", \"ERROR\")\n-                             .add(\"code\", 500)\n-                             .add(\"message\", \"Internal server error. More details available at the server logs.\")\n-                             .add(\"incidentId\", incidentId)\n-                        .build())\n-                .type(\"application/json\").build();\n+            logger.log(Level.SEVERE, \"API internal error \" + incidentId + \": \" + ex.getMessage(), ex);\n+            return Response.status(500).entity(Json.createObjectBuilder().add(\"status\", \"ERROR\").add(\"code\", 500).add(\"message\", \"Internal server error. More details available at the server logs.\").add(\"incidentId\", incidentId).build()).type(\"application/json\").build();\n         }\n     }\n \n@@ -682,22 +697,17 @@ public abstract class AbstractApiBean {\n      * @param hdl handling code block.\n      * @return HTTP Response appropriate for the way {@code hdl} executed.\n      */\n-    protected Response response( DataverseRequestHandler hdl ) {\n+\n+\n+    protected Response response(DataverseRequestHandler hdl) {\n         try {\n             return hdl.handle(createDataverseRequest(findUserOrDie()));\n-        } catch ( WrappedResponse rr ) {\n+        } catch (WrappedResponse rr) {\n             return rr.getResponse();\n-        } catch ( Exception ex ) {\n+        } catch (Exception ex) {\n             String incidentId = UUID.randomUUID().toString();\n-            logger.log(Level.SEVERE, \"API internal error \" + incidentId +\": \" + ex.getMessage(), ex);\n-            return Response.status(500)\n-                .entity( Json.createObjectBuilder()\n-                             .add(\"status\", \"ERROR\")\n-                             .add(\"code\", 500)\n-                             .add(\"message\", \"Internal server error. More details available at the server logs.\")\n-                             .add(\"incidentId\", incidentId)\n-                        .build())\n-                .type(\"application/json\").build();\n+            logger.log(Level.SEVERE, \"API internal error \" + incidentId + \": \" + ex.getMessage(), ex);\n+            return Response.status(500).entity(Json.createObjectBuilder().add(\"status\", \"ERROR\").add(\"code\", 500).add(\"message\", \"Internal server error. More details available at the server logs.\").add(\"incidentId\", incidentId).build()).type(\"application/json\").build();\n         }\n     }\n \n@@ -705,57 +715,39 @@ public abstract class AbstractApiBean {\n      *  HTTP Response methods *\n     \\* ====================== */\n \n-    protected Response ok( JsonArrayBuilder bld ) {\n-        return Response.ok(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", bld).build())\n-            .type(MediaType.APPLICATION_JSON).build();\n-    }\n-    \n-    protected Response ok( JsonArray ja ) {\n-        return Response.ok(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", ja).build())\n-            .type(MediaType.APPLICATION_JSON).build();\n-    }\n-\n-    protected Response ok( JsonObjectBuilder bld ) {\n-        return Response.ok( Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", bld).build() )\n-            .type(MediaType.APPLICATION_JSON)\n-            .build();\n-    }\n-    \n-    protected Response ok( JsonObject jo ) {\n-        return Response.ok( Json.createObjectBuilder()\n-                .add(\"status\", STATUS_OK)\n-                .add(\"data\", jo).build() )\n-                .type(MediaType.APPLICATION_JSON)\n-                .build();    \n-    }\n-\n-    protected Response ok( String msg ) {\n-        return Response.ok().entity(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", Json.createObjectBuilder().add(\"message\",msg)).build() )\n-            .type(MediaType.APPLICATION_JSON)\n-            .build();\n-    }\n-    \n-    protected Response ok( String msg, JsonObjectBuilder bld  ) {\n-        return Response.ok().entity(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"message\", Json.createObjectBuilder().add(\"message\",msg))     \n-            .add(\"data\", bld).build())      \n-            .type(MediaType.APPLICATION_JSON)\n-            .build();\n-    }\n-\n-    protected Response ok( boolean value ) {\n-        return Response.ok().entity(Json.createObjectBuilder()\n-            .add(\"status\", STATUS_OK)\n-            .add(\"data\", value).build() ).build();\n+\n+    protected Response ok(JsonArrayBuilder bld) {\n+        return Response.ok(Json.createObjectBuilder().add(\"status\", STATUS_OK).add(\"data\", bld).build()).type(MediaType.APPLICATION_JSON).build();\n+    }\n+\n+\n+    protected Response ok(JsonArray ja) {\n+        return Response.ok(Json.createObjectBuilder().add(\"status\", STATUS_OK).add(\"data\", ja).build()).type(MediaType.APPLICATION_JSON).build();\n+    }\n+\n+\n+    protected Response ok(JsonObjectBuilder bld) {\n+        return Response.ok(Json.createObjectBuilder().add(\"status\", STATUS_OK).add(\"data\", bld).build()).type(MediaType.APPLICATION_JSON).build();\n+    }\n+\n+\n+    protected Response ok(JsonObject jo) {\n+        return Response.ok(Json.createObjectBuilder().add(\"status\", STATUS_OK).add(\"data\", jo).build()).type(MediaType.APPLICATION_JSON).build();\n+    }\n+\n+\n+    protected Response ok(String msg) {\n+        return Response.ok().entity(Json.createObjectBuilder().add(\"status\", STATUS_OK).add(\"data\", Json.createObjectBuilder().add(\"message\", msg)).build()).type(MediaType.APPLICATION_JSON).build();\n+    }\n+\n+\n+    protected Response ok(String msg, JsonObjectBuilder bld) {\n+        return Response.ok().entity(Json.createObjectBuilder().add(\"status\", STATUS_OK).add(\"message\", Json.createObjectBuilder().add(\"message\", msg)).add(\"data\", bld).build()).type(MediaType.APPLICATION_JSON).build();\n+    }\n+\n+\n+    protected Response ok(boolean value) {\n+        return Response.ok().entity(Json.createObjectBuilder().add(\"status\", STATUS_OK).add(\"data\", value).build()).build();\n     }\n \n     /**\n@@ -764,101 +756,103 @@ public abstract class AbstractApiBean {\n      * @param downloadFilename - add Content-Disposition header to suggest filename if not null\n      * @return Non-JSON response, such as a shell script.\n      */\n+\n+\n     protected Response ok(String data, MediaType mediaType, String downloadFilename) {\n-        ResponseBuilder res =Response.ok().entity(data).type(mediaType);\n-        if(downloadFilename != null) {\n+        ResponseBuilder res = Response.ok().entity(data).type(mediaType);\n+        if (downloadFilename != null) {\n             res = res.header(\"Content-Disposition\", \"attachment; filename=\" + downloadFilename);\n         }\n         return res.build();\n     }\n \n-    protected Response created( String uri, JsonObjectBuilder bld ) {\n-        return Response.created( URI.create(uri) )\n-                .entity( Json.createObjectBuilder()\n-                .add(\"status\", \"OK\")\n-                .add(\"data\", bld).build())\n-                .type(MediaType.APPLICATION_JSON)\n-                .build();\n+\n+    protected Response created(String uri, JsonObjectBuilder bld) {\n+        return Response.created(URI.create(uri)).entity(Json.createObjectBuilder().add(\"status\", \"OK\").add(\"data\", bld).build()).type(MediaType.APPLICATION_JSON).build();\n     }\n-    \n+\n+\n     protected Response accepted(JsonObjectBuilder bld) {\n-        return Response.accepted()\n-                .entity(Json.createObjectBuilder()\n-                        .add(\"status\", STATUS_WF_IN_PROGRESS)\n-                        .add(\"data\",bld).build()\n-                ).build();\n+        return Response.accepted().entity(Json.createObjectBuilder().add(\"status\", STATUS_WF_IN_PROGRESS).add(\"data\", bld).build()).build();\n     }\n-    \n+\n+\n     protected Response accepted() {\n-        return Response.accepted()\n-                .entity(Json.createObjectBuilder()\n-                        .add(\"status\", STATUS_WF_IN_PROGRESS).build()\n-                ).build();\n+        return Response.accepted().entity(Json.createObjectBuilder().add(\"status\", STATUS_WF_IN_PROGRESS).build()).build();\n     }\n \n-    protected Response notFound( String msg ) {\n+\n+    protected Response notFound(String msg) {\n         return error(Status.NOT_FOUND, msg);\n     }\n \n-    protected Response badRequest( String msg ) {\n-        return error( Status.BAD_REQUEST, msg );\n+\n+    protected Response badRequest(String msg) {\n+        return error(Status.BAD_REQUEST, msg);\n     }\n-    \n-    protected Response forbidden( String msg ) {\n-        return error( Status.FORBIDDEN, msg );\n+\n+\n+    protected Response forbidden(String msg) {\n+        return error(Status.FORBIDDEN, msg);\n     }\n-    \n-    protected Response badApiKey( String apiKey ) {\n-        return error(Status.UNAUTHORIZED, (apiKey != null ) ? \"Bad api key \" : \"Please provide a key query parameter (?key=XXX) or via the HTTP header \" + DATAVERSE_KEY_HEADER_NAME);\n+\n+\n+    protected Response badApiKey(String apiKey) {\n+        return error(Status.UNAUTHORIZED, (apiKey != null) ? \"Bad api key \" : \"Please provide a key query parameter (?key=XXX) or via the HTTP header \" + DATAVERSE_KEY_HEADER_NAME);\n     }\n \n-    protected Response badWFKey( String wfId ) {\n-        String message = (wfId != null ) ? \"Bad workflow invocationId \" : \"Please provide an invocationId query parameter (?invocationId=XXX) or via the HTTP header \" + DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME;\n-        return error(Status.UNAUTHORIZED, message );\n+\n+    protected Response badWFKey(String wfId) {\n+        String message = (wfId != null) ? \"Bad workflow invocationId \" : \"Please provide an invocationId query parameter (?invocationId=XXX) or via the HTTP header \" + DATAVERSE_WORKFLOW_INVOCATION_HEADER_NAME;\n+        return error(Status.UNAUTHORIZED, message);\n     }\n-    \n-    protected Response permissionError( PermissionException pe ) {\n-        return permissionError( pe.getMessage() );\n+\n+\n+    protected Response permissionError(PermissionException pe) {\n+        return permissionError(pe.getMessage());\n     }\n \n-    protected Response permissionError( String message ) {\n-        return unauthorized( message );\n+\n+    protected Response permissionError(String message) {\n+        return unauthorized(message);\n     }\n-    \n-    protected Response unauthorized( String message ) {\n-        return error( Status.UNAUTHORIZED, message );\n+\n+\n+    protected Response unauthorized(String message) {\n+        return error(Status.UNAUTHORIZED, message);\n     }\n \n-    protected static Response error( Status sts, String msg ) {\n-        return Response.status(sts)\n-                .entity( NullSafeJsonBuilder.jsonObjectBuilder()\n-                        .add(\"status\", STATUS_ERROR)\n-                        .add( \"message\", msg ).build()\n-                ).type(MediaType.APPLICATION_JSON_TYPE).build();\n+\n+    protected static Response error(Status sts, String msg) {\n+        return Response.status(sts).entity(NullSafeJsonBuilder.jsonObjectBuilder().add(\"status\", STATUS_ERROR).add(\"message\", msg).build()).type(MediaType.APPLICATION_JSON_TYPE).build();\n     }\n+\n }\n \n class LazyRef<T> {\n+\n     private interface Ref<T> {\n+\n         T get();\n     }\n \n     private Ref<T> ref;\n \n-    public LazyRef( final Callable<T> initer ) {\n+    public LazyRef(final Callable<T> initer) {\n         ref = () -> {\n-            try {\n-                final T t = initer.call();\n-                ref = () -> t;\n-                return ref.get();\n-            } catch (Exception ex) {\n-                Logger.getLogger(LazyRef.class.getName()).log(Level.SEVERE, null, ex);\n-                return null;\n-            }\n+try {\n+    final T t = initer.call();\n+    ref = () -> t;\n+    return ref.get();\n+} catch (Exception ex) {\n+    Logger.getLogger(LazyRef.class.getName()).log(Level.SEVERE, null, ex);\n+    return null;\n+}\n         };\n     }\n \n-    public T get()  {\n+    public T get() {\n         return ref.get();\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 312
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "187",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/9/AbstractApiBean.java\nindex d21524a7150..d34ee608e5e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/9/AbstractApiBean.java\n@@ -183,7 +183,7 @@ public abstract class AbstractApiBean {\n     @EJB\n     protected UserServiceBean userSvc;\n \n-\t@EJB\n+@EJB\n \tprotected DataverseRoleServiceBean rolesSvc;\n \n     @EJB\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "187",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/9/AbstractApiBean.java\nindex d21524a7150..bb69a419255 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/9/AbstractApiBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/9/AbstractApiBean.java\n@@ -183,7 +183,7 @@ public abstract class AbstractApiBean {\n     @EJB\n     protected UserServiceBean userSvc;\n \n-\t@EJB\n+    @EJB\n \tprotected DataverseRoleServiceBean rolesSvc;\n \n     @EJB\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}