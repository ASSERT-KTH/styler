{
    "project_name": "wso2-attic-commons",
    "error_id": "147",
    "information": {
        "errors": [
            {
                "line": "73",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"wso2carbon\");\n\n        ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(client_repo, null);\n        ServiceClient sc = new ServiceClient(ctx, null);\n        sc.engageModule(\"rampart\");\n        sc.engageModule(\"addressing\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/147/SecurityClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/147/SecurityClient.java\nindex 9d2723b43b2..6a559c532ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/147/SecurityClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/147/SecurityClient.java\n@@ -70,7 +70,7 @@ public class SecurityClient implements CallbackHandler {\n         System.setProperty(\"javax.net.ssl.trustStore\", key_store + File.separator + \"wso2carbon.jks\");\n         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"wso2carbon\");\n \n-        ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(client_repo, null);\n+    ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(client_repo, null);\n         ServiceClient sc = new ServiceClient(ctx, null);\n         sc.engageModule(\"rampart\");\n         sc.engageModule(\"addressing\");\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/147/SecurityClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/147/SecurityClient.java\nindex 9d2723b43b2..68e9e7e9511 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/147/SecurityClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/147/SecurityClient.java\n@@ -8,7 +8,7 @@\n \n \n import org.apache.neethi.Policy;\n- import org.apache.neethi.PolicyEngine;\n+import org.apache.neethi.PolicyEngine;\n import org.apache.axiom.om.impl.builder.StAXOMBuilder;\n import org.apache.axiom.om.impl.llom.util.AXIOMUtil;\n import org.apache.axiom.om.OMElement;\n@@ -33,135 +33,132 @@ import java.util.Properties;\n public class SecurityClient implements CallbackHandler {\n \n \n- public static void main(String srgs[]) {\n-\n-        SecurityClient securityCl = new SecurityClient();\n-        OMElement result = null;\n-          try {\n-                result = securityCl.runSecurityClient();\n-            } catch (Exception e) {\n-                e.printStackTrace();\n-            }\n-            System.out.println(result.toString());\n-\n-        }\n-\n-\n-\n-    public OMElement runSecurityClient( ) throws Exception {\n-\n-        Properties properties = new Properties();\n-        FileInputStream freader=new FileInputStream(\".\"+File.separator+\"src\"+File.separator+\"client.properties\");\n-        properties.load(freader);\n-        String carbon_home = properties.getProperty(\"carbon.home\");\n-        String client_repo  = properties.getProperty(\"client_repo\");\n-        String endpoint_https    = properties.getProperty(\"endpoint_https\");\n-        String endpoint_http   = properties.getProperty(\"endpoint_http\");\n-        int security_scenario_no =Integer.parseInt(properties.getProperty(\"security_scenario_no\"));\n-        String key_path = properties.getProperty(\"key_path\");\n-\t    String SoapAction = properties.getProperty(\"SoapAction\");\n-\t    String body = properties.getProperty(\"body\");\n-        String key_store=properties.getProperty(\"key_store\");\n-      String   security_policy      =properties.getProperty(\"security_policy\");\n-\n-        OMElement result = null;\n-\n-   \n-        System.setProperty(\"javax.net.ssl.trustStore\", key_store + File.separator + \"wso2carbon.jks\");\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"wso2carbon\");\n-\n-        ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(client_repo, null);\n-        ServiceClient sc = new ServiceClient(ctx, null);\n-        sc.engageModule(\"rampart\");\n-        sc.engageModule(\"addressing\");\n-\n-        Options opts = new Options();\n-        if(security_scenario_no==1)\n-        {\n-        opts.setTo(new EndpointReference(endpoint_https));\n-        }\n-        else\n-        {\n-         opts.setTo(new EndpointReference(endpoint_http));\n-        }\n-        opts.setAction(SoapAction);\n-\n-        if(security_scenario_no!=0)   {\n-        try {\n-           String security_policy_path =security_policy+File.separator +\"scenario\"+security_scenario_no+\"-policy.xml\";\n-           opts.setProperty(RampartMessageData.KEY_RAMPART_POLICY, loadPolicy(security_policy_path,key_path));\n-\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-        }\n-        sc.setOptions(opts);\n-        result = sc.sendReceive(AXIOMUtil.stringToOM(body));\n-        System.out.println(result.getFirstElement().getText());\n-        return result;\n-    }\n+  public static void main(String srgs[]) {\n \n-    public Policy loadPolicy(String xmlPath , String key_path) throws Exception {\n-        StAXOMBuilder builder = new StAXOMBuilder(xmlPath);\n-        Policy policy = PolicyEngine.getPolicy(builder.getDocumentElement());\n+    SecurityClient securityCl = new SecurityClient();\n+    OMElement result = null;\n+    try {\n+      result = securityCl.runSecurityClient();\n+    } catch (Exception e) {\n+      e.printStackTrace();\n+    }\n+    System.out.println(result.toString());\n \n-        RampartConfig rc = new RampartConfig();\n+  }\n \n-        rc.setUser(\"admin\");\n-        rc.setUserCertAlias(\"client\");\n-        rc.setEncryptionUser(\"service\");\n-        rc.setPwCbClass(SecurityClient.class.getName());\n \n-        CryptoConfig sigCryptoConfig = new CryptoConfig();\n+  public OMElement runSecurityClient() throws Exception {\n \n-        sigCryptoConfig.setProvider(\"org.apache.ws.security.components.crypto.Merlin\");\n+    Properties properties = new Properties();\n+    FileInputStream freader = new FileInputStream(\".\" + File.separator + \"src\" + File.separator + \"client.properties\");\n+    properties.load(freader);\n+    String carbon_home = properties.getProperty(\"carbon.home\");\n+    String client_repo = properties.getProperty(\"client_repo\");\n+    String endpoint_https = properties.getProperty(\"endpoint_https\");\n+    String endpoint_http = properties.getProperty(\"endpoint_http\");\n+    int security_scenario_no = Integer.parseInt(properties.getProperty(\"security_scenario_no\"));\n+    String key_path = properties.getProperty(\"key_path\");\n+    String SoapAction = properties.getProperty(\"SoapAction\");\n+    String body = properties.getProperty(\"body\");\n+    String key_store = properties.getProperty(\"key_store\");\n+    String security_policy = properties.getProperty(\"security_policy\");\n \n+    OMElement result = null;\n \n-        Properties prop1 = new Properties();\n-        prop1.put(\"org.apache.ws.security.crypto.merlin.keystore.type\", \"JKS\");\n-        prop1.put(\"org.apache.ws.security.crypto.merlin.file\", key_path);\n-        prop1.put(\"org.apache.ws.security.crypto.merlin.keystore.password\", \"apache\");\n-        sigCryptoConfig.setProp(prop1);\n \n-        CryptoConfig encrCryptoConfig = new CryptoConfig();\n-        encrCryptoConfig.setProvider(\"org.apache.ws.security.components.crypto.Merlin\");\n+    System.setProperty(\"javax.net.ssl.trustStore\", key_store + File.separator + \"wso2carbon.jks\");\n+    System.setProperty(\"javax.net.ssl.trustStorePassword\", \"wso2carbon\");\n \n-        Properties prop2 = new Properties();\n+    ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(client_repo, null);\n+    ServiceClient sc = new ServiceClient(ctx, null);\n+    sc.engageModule(\"rampart\");\n+    sc.engageModule(\"addressing\");\n \n-        prop2.put(\"org.apache.ws.security.crypto.merlin.keystore.type\", \"JKS\");\n-        prop2.put(\"org.apache.ws.security.crypto.merlin.file\", key_path);\n-        prop2.put(\"org.apache.ws.security.crypto.merlin.keystore.password\", \"apache\");\n-        encrCryptoConfig.setProp(prop2);\n+    Options opts = new Options();\n+    if (security_scenario_no == 1) {\n+      opts.setTo(new EndpointReference(endpoint_https));\n+    } else {\n+      opts.setTo(new EndpointReference(endpoint_http));\n+    }\n+    opts.setAction(SoapAction);\n \n-        rc.setSigCryptoConfig(sigCryptoConfig);\n-        rc.setEncrCryptoConfig(encrCryptoConfig);\n+    if (security_scenario_no != 0) {\n+      try {\n+        String security_policy_path =\n+          security_policy + File.separator + \"scenario\" + security_scenario_no + \"-policy.xml\";\n+        opts.setProperty(RampartMessageData.KEY_RAMPART_POLICY, loadPolicy(security_policy_path, key_path));\n \n-        policy.addAssertion(rc);\n-        return policy;\n+      } catch (Exception e) {\n+        e.printStackTrace();\n+      }\n     }\n+    sc.setOptions(opts);\n+    result = sc.sendReceive(AXIOMUtil.stringToOM(body));\n+    System.out.println(result.getFirstElement().getText());\n+    return result;\n+  }\n+\n+  public Policy loadPolicy(String xmlPath, String key_path) throws Exception {\n+    StAXOMBuilder builder = new StAXOMBuilder(xmlPath);\n+    Policy policy = PolicyEngine.getPolicy(builder.getDocumentElement());\n+\n+    RampartConfig rc = new RampartConfig();\n+\n+    rc.setUser(\"admin\");\n+    rc.setUserCertAlias(\"client\");\n+    rc.setEncryptionUser(\"service\");\n+    rc.setPwCbClass(SecurityClient.class.getName());\n+\n+    CryptoConfig sigCryptoConfig = new CryptoConfig();\n+\n+    sigCryptoConfig.setProvider(\"org.apache.ws.security.components.crypto.Merlin\");\n+\n+\n+    Properties prop1 = new Properties();\n+    prop1.put(\"org.apache.ws.security.crypto.merlin.keystore.type\", \"JKS\");\n+    prop1.put(\"org.apache.ws.security.crypto.merlin.file\", key_path);\n+    prop1.put(\"org.apache.ws.security.crypto.merlin.keystore.password\", \"apache\");\n+    sigCryptoConfig.setProp(prop1);\n+\n+    CryptoConfig encrCryptoConfig = new CryptoConfig();\n+    encrCryptoConfig.setProvider(\"org.apache.ws.security.components.crypto.Merlin\");\n+\n+    Properties prop2 = new Properties();\n+\n+    prop2.put(\"org.apache.ws.security.crypto.merlin.keystore.type\", \"JKS\");\n+    prop2.put(\"org.apache.ws.security.crypto.merlin.file\", key_path);\n+    prop2.put(\"org.apache.ws.security.crypto.merlin.keystore.password\", \"apache\");\n+    encrCryptoConfig.setProp(prop2);\n+\n+    rc.setSigCryptoConfig(sigCryptoConfig);\n+    rc.setEncrCryptoConfig(encrCryptoConfig);\n \n+    policy.addAssertion(rc);\n+    return policy;\n+  }\n \n \n-    public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n+  public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n \n-        WSPasswordCallback pwcb = (WSPasswordCallback) callbacks[0];\n-        String id = pwcb.getIdentifer();\n-        int usage = pwcb.getUsage();\n+    WSPasswordCallback pwcb = (WSPasswordCallback) callbacks[0];\n+    String id = pwcb.getIdentifer();\n+    int usage = pwcb.getUsage();\n \n-        if (usage == WSPasswordCallback.USERNAME_TOKEN) {\n-            // Logic to get the password to build the username token\n+    if (usage == WSPasswordCallback.USERNAME_TOKEN) {\n+      // Logic to get the password to build the username token\n \n-                 if (\"admin\".equals(id)) {\n-                pwcb.setPassword(\"admin\");\n-            }\n-        } else if (usage == WSPasswordCallback.SIGNATURE || usage == WSPasswordCallback.DECRYPT) {\n-            // Logic to get the private key password for signture or decryption\n-            if (\"client\".equals(id)) {\n-                pwcb.setPassword(\"apache\");}\n-            if (\"service\".equals(id)) {\n-                pwcb.setPassword(\"apache\");\n-            }\n-        }\n+      if (\"admin\".equals(id)) {\n+        pwcb.setPassword(\"admin\");\n+      }\n+    } else if (usage == WSPasswordCallback.SIGNATURE || usage == WSPasswordCallback.DECRYPT) {\n+      // Logic to get the private key password for signture or decryption\n+      if (\"client\".equals(id)) {\n+        pwcb.setPassword(\"apache\");\n+      }\n+      if (\"service\".equals(id)) {\n+        pwcb.setPassword(\"apache\");\n+      }\n     }\n+  }\n }\n \n",
            "diff_size": 183
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/147/SecurityClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/147/SecurityClient.java\nindex 9d2723b43b2..6a559c532ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/147/SecurityClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_random/147/SecurityClient.java\n@@ -70,7 +70,7 @@ public class SecurityClient implements CallbackHandler {\n         System.setProperty(\"javax.net.ssl.trustStore\", key_store + File.separator + \"wso2carbon.jks\");\n         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"wso2carbon\");\n \n-        ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(client_repo, null);\n+    ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(client_repo, null);\n         ServiceClient sc = new ServiceClient(ctx, null);\n         sc.engageModule(\"rampart\");\n         sc.engageModule(\"addressing\");\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/147/SecurityClient.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/147/SecurityClient.java\nindex 9d2723b43b2..6a559c532ce 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/147/SecurityClient.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/147/SecurityClient.java\n@@ -70,7 +70,7 @@ public class SecurityClient implements CallbackHandler {\n         System.setProperty(\"javax.net.ssl.trustStore\", key_store + File.separator + \"wso2carbon.jks\");\n         System.setProperty(\"javax.net.ssl.trustStorePassword\", \"wso2carbon\");\n \n-        ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(client_repo, null);\n+    ConfigurationContext ctx = ConfigurationContextFactory.createConfigurationContextFromFileSystem(client_repo, null);\n         ServiceClient sc = new ServiceClient(ctx, null);\n         sc.engageModule(\"rampart\");\n         sc.engageModule(\"addressing\");\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}