{
    "project_name": "NationalSecurityAgency-emissary",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "141",
                "column": "33",
                "severity": "warning",
                "message": "'}' at column 33 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "\n    /** This is a static utility class, so prevent instantiation. */\n    private ClassLookupCache() {}\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "141",
                    "column": "33",
                    "severity": "warning",
                    "message": "'}' at column 33 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler/19/ClassLookupCache.java\nindex 21300bab153..329e996013a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler/19/ClassLookupCache.java\n@@ -139,4 +139,5 @@ public final class ClassLookupCache {\n \n     /** This is a static utility class, so prevent instantiation. */\n     private ClassLookupCache() {}\n+\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/19/ClassLookupCache.java\nindex 21300bab153..b8660e9c841 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/intellij/19/ClassLookupCache.java\n@@ -25,17 +25,21 @@ public final class ClassLookupCache {\n      */\n     private static final class NamedClass<T> {\n \n-        /** The class name. */\n+        /**\n+         * The class name.\n+         */\n         private final String className;\n \n-        /** A class object that matches {@link #className}. */\n+        /**\n+         * A class object that matches {@link #className}.\n+         */\n         private final Class<T> clazz;\n \n         /**\n          * Create a new binding between a class name and a matching object.\n          *\n          * @param className the class name.\n-         * @param clazz A class object that matches {@code className}.\n+         * @param clazz     A class object that matches {@code className}.\n          */\n         private NamedClass(final String className, final Class<T> clazz) {\n             this.className = className;\n@@ -47,7 +51,7 @@ public final class ClassLookupCache {\n          *\n          * @param desiredName The class name to check.\n          * @return If this instance has the given {@code desiredName}, this returns its {@link Class} object. Otherwise\n-         *         {@code null}.\n+         * {@code null}.\n          */\n         public Class<T> getClass(final String desiredName) {\n             return this.className.equals(desiredName) ? this.clazz : null;\n@@ -61,7 +65,7 @@ public final class ClassLookupCache {\n          * calling the constructor directly.\n          *\n          * @param className the class name.\n-         * @param clazz A class object that matches {@code className}.\n+         * @param clazz     A class object that matches {@code className}.\n          * @return A binding between the given name and class object.\n          */\n         public static <T> NamedClass<T> getInstance(final String className, final Class<T> clazz) {\n@@ -81,7 +85,7 @@ public final class ClassLookupCache {\n      *\n      * @param className The class name to find.\n      * @return If the class name is currently known to the cache, the corresponding {@link Class} object is returned.\n-     *         Otherwise {@code null}.\n+     * Otherwise {@code null}.\n      */\n     public static Class<?> get(final String className) {\n         // Currently there is at most one cached lookup per thread, so\n@@ -106,7 +110,7 @@ public final class ClassLookupCache {\n      * Store a class lookup in the cache.\n      *\n      * @param className The class name.\n-     * @param clazz The class. Assumed to match {@code className}.\n+     * @param clazz     The class. Assumed to match {@code className}.\n      */\n     public static void put(final String className, final Class<?> clazz) {\n         cachedLookupResult.set(new SoftReference<NamedClass<?>>(NamedClass.getInstance(className, clazz)));\n@@ -137,6 +141,9 @@ public final class ClassLookupCache {\n         }\n     }\n \n-    /** This is a static utility class, so prevent instantiation. */\n-    private ClassLookupCache() {}\n+    /**\n+     * This is a static utility class, so prevent instantiation.\n+     */\n+    private ClassLookupCache() {\n+    }\n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/19/ClassLookupCache.java\nindex 21300bab153..8e2193dca98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/naturalize/19/ClassLookupCache.java\n@@ -138,5 +138,6 @@ public final class ClassLookupCache {\n     }\n \n     /** This is a static utility class, so prevent instantiation. */\n-    private ClassLookupCache() {}\n-}\n+    private ClassLookupCache() {\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/19/ClassLookupCache.java\nindex 21300bab153..ff0da171ec8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/codebuff/19/ClassLookupCache.java\n@@ -16,6 +16,8 @@ import java.lang.ref.SoftReference;\n  * cache does not <i>guarantee</i> that it will be indefinitely cached or that the cached value will be visible to other\n  * threads.\n  */\n+\n+\n public final class ClassLookupCache {\n \n     /**\n@@ -23,12 +25,15 @@ public final class ClassLookupCache {\n      *\n      * @param <T> The object type that will be produced by the class.\n      */\n+\n     private static final class NamedClass<T> {\n \n         /** The class name. */\n+\n         private final String className;\n \n         /** A class object that matches {@link #className}. */\n+\n         private final Class<T> clazz;\n \n         /**\n@@ -37,6 +42,7 @@ public final class ClassLookupCache {\n          * @param className the class name.\n          * @param clazz A class object that matches {@code className}.\n          */\n+\n         private NamedClass(final String className, final Class<T> clazz) {\n             this.className = className;\n             this.clazz = clazz;\n@@ -49,6 +55,7 @@ public final class ClassLookupCache {\n          * @return If this instance has the given {@code desiredName}, this returns its {@link Class} object. Otherwise\n          *         {@code null}.\n          */\n+\n         public Class<T> getClass(final String desiredName) {\n             return this.className.equals(desiredName) ? this.clazz : null;\n         }\n@@ -64,6 +71,8 @@ public final class ClassLookupCache {\n          * @param clazz A class object that matches {@code className}.\n          * @return A binding between the given name and class object.\n          */\n+\n+\n         public static <T> NamedClass<T> getInstance(final String className, final Class<T> clazz) {\n             return new NamedClass<T>(className, clazz);\n         }\n@@ -74,6 +83,7 @@ public final class ClassLookupCache {\n      * name lookup so that subsequent constructions can get to the {@link Class} object without doing a full lookup in the\n      * JVM.\n      */\n+\n     private static final ThreadLocal<SoftReference<NamedClass<?>>> cachedLookupResult = new ThreadLocal<SoftReference<NamedClass<?>>>();\n \n     /**\n@@ -83,6 +93,7 @@ public final class ClassLookupCache {\n      * @return If the class name is currently known to the cache, the corresponding {@link Class} object is returned.\n      *         Otherwise {@code null}.\n      */\n+\n     public static Class<?> get(final String className) {\n         // Currently there is at most one cached lookup per thread, so\n         // we can just check if the current thread knows about the\n@@ -108,6 +119,8 @@ public final class ClassLookupCache {\n      * @param className The class name.\n      * @param clazz The class. Assumed to match {@code className}.\n      */\n+\n+\n     public static void put(final String className, final Class<?> clazz) {\n         cachedLookupResult.set(new SoftReference<NamedClass<?>>(NamedClass.getInstance(className, clazz)));\n     }\n@@ -120,6 +133,8 @@ public final class ClassLookupCache {\n      * @return The {@link Class} object corresponding to {@code className}.\n      * @throws ClassNotFoundException If the class name could not be resolved.\n      */\n+\n+\n     public static Class<?> lookup(final String className) throws ClassNotFoundException {\n         final Class<?> cachedResult = get(className);\n         if (cachedResult != null) {\n@@ -138,5 +153,8 @@ public final class ClassLookupCache {\n     }\n \n     /** This is a static utility class, so prevent instantiation. */\n-    private ClassLookupCache() {}\n-}\n+\n+    private ClassLookupCache() {\n+\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 20
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "141",
                    "column": "33",
                    "severity": "warning",
                    "message": "'}' at column 33 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_random/19/ClassLookupCache.java\nindex 21300bab153..329e996013a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_random/19/ClassLookupCache.java\n@@ -139,4 +139,5 @@ public final class ClassLookupCache {\n \n     /** This is a static utility class, so prevent instantiation. */\n     private ClassLookupCache() {}\n+\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "141",
                    "column": "33",
                    "severity": "warning",
                    "message": "'}' at column 33 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "142",
                    "column": "5",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 4, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_three_grams/19/ClassLookupCache.java\nindex 21300bab153..3e899bd7976 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/errored/1/19/ClassLookupCache.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/NationalSecurityAgency-emissary/styler_three_grams/19/ClassLookupCache.java\n@@ -139,4 +139,4 @@ public final class ClassLookupCache {\n \n     /** This is a static utility class, so prevent instantiation. */\n     private ClassLookupCache() {}\n-}\n+    }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}