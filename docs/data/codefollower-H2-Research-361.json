{
    "project_name": "codefollower-H2-Research",
    "error_id": "361",
    "information": {
        "errors": [
            {
                "line": "60",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public int update() {\n    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n        //transactional\u4e3atrue\n    \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n    \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "61",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/361/CreateIndex.java\nindex 4190b95616d..2936456576c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/361/CreateIndex.java\n@@ -57,8 +57,8 @@ public class CreateIndex extends SchemaCommand {\n \n     @Override\n     public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n-        //transactional\u4e3atrue\n+    //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL//transactional\u4e3atrue\n+\t\t//transactional\u4e3atrue\n     \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n     \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n     \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/361/CreateIndex.java\nindex 4190b95616d..15dd4a3d7b8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/361/CreateIndex.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (http://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.command.ddl;\n \n import org.h2.api.ErrorCode;\n@@ -23,118 +24,118 @@ import org.h2.table.Table;\n  */\n public class CreateIndex extends SchemaCommand {\n \n-    private String tableName;\n-    private String indexName;\n-    private IndexColumn[] indexColumns;\n-    private boolean primaryKey, unique, hash, spatial;\n-    private boolean ifTableExists;\n-    private boolean ifNotExists;\n-    private String comment;\n-\n-    public CreateIndex(Session session, Schema schema) {\n-        super(session, schema);\n-    }\n-\n-    public void setIfTableExists(boolean b) {\n-        this.ifTableExists = b;\n-    }\n-\n-    public void setIfNotExists(boolean ifNotExists) {\n-        this.ifNotExists = ifNotExists;\n-    }\n-\n-    public void setTableName(String tableName) {\n-        this.tableName = tableName;\n-    }\n-\n-    public void setIndexName(String indexName) {\n-        this.indexName = indexName;\n-    }\n-\n-    public void setIndexColumns(IndexColumn[] columns) {\n-        this.indexColumns = columns;\n+  private String tableName;\n+  private String indexName;\n+  private IndexColumn[] indexColumns;\n+  private boolean primaryKey, unique, hash, spatial;\n+  private boolean ifTableExists;\n+  private boolean ifNotExists;\n+  private String comment;\n+\n+  public CreateIndex(Session session, Schema schema) {\n+    super(session, schema);\n+  }\n+\n+  public void setIfTableExists(boolean b) {\n+    this.ifTableExists = b;\n+  }\n+\n+  public void setIfNotExists(boolean ifNotExists) {\n+    this.ifNotExists = ifNotExists;\n+  }\n+\n+  public void setTableName(String tableName) {\n+    this.tableName = tableName;\n+  }\n+\n+  public void setIndexName(String indexName) {\n+    this.indexName = indexName;\n+  }\n+\n+  public void setIndexColumns(IndexColumn[] columns) {\n+    this.indexColumns = columns;\n+  }\n+\n+  @Override\n+  public int update() {\n+    //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n+    //transactional\u4e3atrue\n+    //\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n+    //\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n+    //\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n+    if (!transactional) {\n+      session.commit(true);\n     }\n-\n-    @Override\n-    public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n-        //transactional\u4e3atrue\n-    \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n-    \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n-    \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n-    \tif (!transactional) {\n-            session.commit(true);\n-        }\n-        Database db = session.getDatabase();\n-        boolean persistent = db.isPersistent();\n-        Table table = getSchema().findTableOrView(session, tableName);\n-        if (table == null) {\n-            if (ifTableExists) {\n-                return 0;\n-            }\n-            throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n-        }\n-        if (getSchema().findIndex(session, indexName) != null) {\n-            if (ifNotExists) {\n-                return 0;\n-            }\n-            throw DbException.get(ErrorCode.INDEX_ALREADY_EXISTS_1, indexName);\n-        }\n-        session.getUser().checkRight(table, Right.ALL);\n-        table.lock(session, true, true);\n-        if (!table.isPersistIndexes()) {\n-            persistent = false;\n-        }\n-        int id = getObjectId();\n-        if (indexName == null) {\n-            if (primaryKey) {\n-                indexName = table.getSchema().getUniqueIndexName(session,\n-                        table, Constants.PREFIX_PRIMARY_KEY);\n-            } else {\n-                indexName = table.getSchema().getUniqueIndexName(session,\n-                        table, Constants.PREFIX_INDEX);\n-            }\n-        }\n-        IndexType indexType;\n-        if (primaryKey) {\n-            if (table.findPrimaryKey() != null) {\n-                throw DbException.get(ErrorCode.SECOND_PRIMARY_KEY);\n-            }\n-            indexType = IndexType.createPrimaryKey(persistent, hash);\n-        } else if (unique) {\n-            indexType = IndexType.createUnique(persistent, hash);\n-        } else {\n-            indexType = IndexType.createNonUnique(persistent, hash, spatial);\n-        }\n-        IndexColumn.mapColumns(indexColumns, table);\n-        table.addIndex(session, indexName, id, indexColumns, indexType, create,\n-                comment);\n+    Database db = session.getDatabase();\n+    boolean persistent = db.isPersistent();\n+    Table table = getSchema().findTableOrView(session, tableName);\n+    if (table == null) {\n+      if (ifTableExists) {\n         return 0;\n+      }\n+      throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n     }\n-\n-    public void setPrimaryKey(boolean b) {\n-        this.primaryKey = b;\n-    }\n-\n-    public void setUnique(boolean b) {\n-        this.unique = b;\n-    }\n-\n-    public void setHash(boolean b) {\n-        this.hash = b;\n+    if (getSchema().findIndex(session, indexName) != null) {\n+      if (ifNotExists) {\n+        return 0;\n+      }\n+      throw DbException.get(ErrorCode.INDEX_ALREADY_EXISTS_1, indexName);\n     }\n-\n-    public void setSpatial(boolean b) {\n-        this.spatial = b;\n+    session.getUser().checkRight(table, Right.ALL);\n+    table.lock(session, true, true);\n+    if (!table.isPersistIndexes()) {\n+      persistent = false;\n     }\n-\n-    public void setComment(String comment) {\n-        this.comment = comment;\n+    int id = getObjectId();\n+    if (indexName == null) {\n+      if (primaryKey) {\n+        indexName = table.getSchema().getUniqueIndexName(session,\n+            table, Constants.PREFIX_PRIMARY_KEY);\n+      } else {\n+        indexName = table.getSchema().getUniqueIndexName(session,\n+            table, Constants.PREFIX_INDEX);\n+      }\n     }\n-\n-    @Override\n-    public int getType() {\n-        return CommandInterface.CREATE_INDEX;\n+    IndexType indexType;\n+    if (primaryKey) {\n+      if (table.findPrimaryKey() != null) {\n+        throw DbException.get(ErrorCode.SECOND_PRIMARY_KEY);\n+      }\n+      indexType = IndexType.createPrimaryKey(persistent, hash);\n+    } else if (unique) {\n+      indexType = IndexType.createUnique(persistent, hash);\n+    } else {\n+      indexType = IndexType.createNonUnique(persistent, hash, spatial);\n     }\n+    IndexColumn.mapColumns(indexColumns, table);\n+    table.addIndex(session, indexName, id, indexColumns, indexType, create,\n+        comment);\n+    return 0;\n+  }\n+\n+  public void setPrimaryKey(boolean b) {\n+    this.primaryKey = b;\n+  }\n+\n+  public void setUnique(boolean b) {\n+    this.unique = b;\n+  }\n+\n+  public void setHash(boolean b) {\n+    this.hash = b;\n+  }\n+\n+  public void setSpatial(boolean b) {\n+    this.spatial = b;\n+  }\n+\n+  public void setComment(String comment) {\n+    this.comment = comment;\n+  }\n+\n+  @Override\n+  public int getType() {\n+    return CommandInterface.CREATE_INDEX;\n+  }\n \n }\n",
            "diff_size": 163
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/361/CreateIndex.java\nindex 4190b95616d..a2c828f9143 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/361/CreateIndex.java\n@@ -21,6 +21,8 @@ import org.h2.table.Table;\n  * This class represents the statement\n  * CREATE INDEX\n  */\n+\n+\n public class CreateIndex extends SchemaCommand {\n \n     private String tableName;\n@@ -35,34 +37,39 @@ public class CreateIndex extends SchemaCommand {\n         super(session, schema);\n     }\n \n+\n     public void setIfTableExists(boolean b) {\n         this.ifTableExists = b;\n     }\n \n+\n     public void setIfNotExists(boolean ifNotExists) {\n         this.ifNotExists = ifNotExists;\n     }\n \n+\n     public void setTableName(String tableName) {\n         this.tableName = tableName;\n     }\n \n+\n     public void setIndexName(String indexName) {\n         this.indexName = indexName;\n     }\n \n+\n     public void setIndexColumns(IndexColumn[] columns) {\n         this.indexColumns = columns;\n     }\n \n     @Override\n     public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n+        //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n         //transactional\u4e3atrue\n-    \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n-    \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n-    \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n-    \tif (!transactional) {\n+        //\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n+        //\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n+        //\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n+        if (!transactional) {\n             session.commit(true);\n         }\n         Database db = session.getDatabase();\n@@ -88,11 +95,9 @@ public class CreateIndex extends SchemaCommand {\n         int id = getObjectId();\n         if (indexName == null) {\n             if (primaryKey) {\n-                indexName = table.getSchema().getUniqueIndexName(session,\n-                        table, Constants.PREFIX_PRIMARY_KEY);\n+                indexName = table.getSchema().getUniqueIndexName(session, table, Constants.PREFIX_PRIMARY_KEY);\n             } else {\n-                indexName = table.getSchema().getUniqueIndexName(session,\n-                        table, Constants.PREFIX_INDEX);\n+                indexName = table.getSchema().getUniqueIndexName(session, table, Constants.PREFIX_INDEX);\n             }\n         }\n         IndexType indexType;\n@@ -103,31 +108,35 @@ public class CreateIndex extends SchemaCommand {\n             indexType = IndexType.createPrimaryKey(persistent, hash);\n         } else if (unique) {\n             indexType = IndexType.createUnique(persistent, hash);\n-        } else {\n+                        } else {\n             indexType = IndexType.createNonUnique(persistent, hash, spatial);\n         }\n         IndexColumn.mapColumns(indexColumns, table);\n-        table.addIndex(session, indexName, id, indexColumns, indexType, create,\n-                comment);\n+        table.addIndex(session, indexName, id, indexColumns, indexType, create, comment);\n         return 0;\n     }\n \n+\n     public void setPrimaryKey(boolean b) {\n         this.primaryKey = b;\n     }\n \n+\n     public void setUnique(boolean b) {\n         this.unique = b;\n     }\n \n+\n     public void setHash(boolean b) {\n         this.hash = b;\n     }\n \n+\n     public void setSpatial(boolean b) {\n         this.spatial = b;\n     }\n \n+\n     public void setComment(String comment) {\n         this.comment = comment;\n     }\n@@ -137,4 +146,4 @@ public class CreateIndex extends SchemaCommand {\n         return CommandInterface.CREATE_INDEX;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 25
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "61",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/361/CreateIndex.java\nindex 4190b95616d..2936456576c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/361/CreateIndex.java\n@@ -57,8 +57,8 @@ public class CreateIndex extends SchemaCommand {\n \n     @Override\n     public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n-        //transactional\u4e3atrue\n+    //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL//transactional\u4e3atrue\n+\t\t//transactional\u4e3atrue\n     \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n     \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n     \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "61",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/361/CreateIndex.java\nindex 4190b95616d..b7ed0c8317d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/361/CreateIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/361/CreateIndex.java\n@@ -57,8 +57,8 @@ public class CreateIndex extends SchemaCommand {\n \n     @Override\n     public int update() {\n-    \t//\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL\n-        //transactional\u4e3atrue\n+    //\u5f53\u6267\u884c\u8fd9\u6837\u7684SQL\u65f6: create TEMPORARY table myTable(name varchar(500),CONSTRAINT myindex INDEX (name)) TRANSACTIONAL //transactional\u4e3atrue\n+\t\t//transactional\u4e3atrue\n     \t//\u5728org.h2.command.Parser.parseAlterTableAddConstraintIf(String, Schema)\u4e2d\u4e3aINDEX (name)\u6784\u5efa\u4e00\u4e2aCreateIndex\n     \t//\u7136\u540e\u6267\u884corg.h2.command.ddl.CreateTable.update()\u65f6\n     \t//\u5728\"for (DefineCommand command : constraintCommands)\"\u90a3\u91cc\u89e6\u53d1\u6b64\u65b9\u6cd5\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}