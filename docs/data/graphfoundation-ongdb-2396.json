{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2396",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "87",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "373",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "375",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2396/FormattedLogProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2396/FormattedLogProvider.java\nindex bf1f1d47ea8..b7be6d7ef49 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2396/FormattedLogProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2396/FormattedLogProvider.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.logging;\n \n import java.io.OutputStream;\n@@ -39,251 +40,118 @@ import static org.neo4j.logging.FormattedLog.OUTPUT_STREAM_CONVERTER;\n  */\n public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n {\n-    private static final Pattern PACKAGE_PATTERN = Pattern.compile( \"(\\\\w)\\\\w+\\\\.\" );\n-\n-    /**\n-     * A Builder for a {@link FormattedLogProvider}\n-     */\n-    public static class Builder\n+  private static final Pattern PACKAGE_PATTERN = Pattern.compile(\"(\\\\w)\\\\w+\\\\.\");\n+\n+  /**\n+   * A Builder for a {@link FormattedLogProvider}\n+   */\n+  public static class Builder\n+  {\n+    private boolean renderContext = true;\n+    private ZoneId zoneId = ZoneOffset.UTC;\n+    private Map<String, Level> levels = new HashMap<>();\n+    private Level defaultLevel = Level.INFO;\n+    private boolean autoFlush = true;\n+\n+    private Builder()\n     {\n-        private boolean renderContext = true;\n-        private ZoneId zoneId = ZoneOffset.UTC;\n-        private Map<String, Level> levels = new HashMap<>();\n-        private Level defaultLevel = Level.INFO;\n-        private boolean autoFlush = true;\n-\n-        private Builder()\n-        {\n-        }\n-\n-        /**\n-         * Disable rendering of the context (the class name or log name) in each output line.\n-         *\n-         * @return this builder\n-         */\n-        public Builder withoutRenderingContext()\n-        {\n-            this.renderContext = false;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the zoneId for datestamps in the log\n-         *\n-         * @return this builder\n-         */\n-        public Builder withUTCZoneId()\n-        {\n-            return withZoneId( ZoneOffset.UTC );\n-        }\n-\n-        /**\n-         * Set the zoneId for datestamps in the log\n-         *\n-         * @return this builder\n-         * @param zoneId to use\n-         */\n-        public Builder withZoneId( ZoneId zoneId )\n-        {\n-            this.zoneId = zoneId;\n-            return this;\n-        }\n-\n-        /**\n-         * Set the zoneId from timestamp for datestamps in the log\n-         *\n-         * @param timezone to use\n-         * @return this builder\n-         * @deprecated use {@link #withZoneId(ZoneId)}\n-         */\n-        @Deprecated\n-        public Builder withTimeZone( TimeZone timezone )\n-        {\n-            return withZoneId( timezone.toZoneId() );\n-        }\n-\n-        /**\n-         * Use the specified log {@link Level} for all {@link Log}s by default.\n-         *\n-         * @param level the log level to use as a default\n-         * @return this builder\n-         */\n-        public Builder withDefaultLogLevel( Level level )\n-        {\n-            this.defaultLevel = level;\n-            return this;\n-        }\n-\n-        /**\n-         * Use the specified log {@link Level} for any {@link Log}s that match the specified context. Any {@link Log} context that\n-         * starts with the specified string will have its level set. For example, setting the level for the context {@code org.neo4j}\n-         * would result in that level being applied to {@link Log}s with the context {@code org.neo4j.Foo}, {@code org.neo4j.foo.Bar}, etc.\n-         *\n-         * @param context the context of the Logs to set the level of, matching any Log context starting with this string\n-         * @param level the log level to apply\n-         * @return this builder\n-         */\n-        public Builder withLogLevel( String context, Level level )\n-        {\n-            this.levels.put( context, level );\n-            return this;\n-        }\n-\n-        /**\n-         * Set the log level for many contexts - equivalent to calling {@link #withLogLevel(String, Level)}\n-         * for every entry in the provided map.\n-         *\n-         * @param levels a map containing paris of context and level\n-         * @return this builder\n-         */\n-        public Builder withLogLevels( Map<String, Level> levels )\n-        {\n-            this.levels.putAll( levels );\n-            return this;\n-        }\n-\n-        /**\n-         * Disable auto flushing.\n-         *\n-         * @return this builder\n-         */\n-        public Builder withoutAutoFlush()\n-        {\n-            this.autoFlush = false;\n-            return this;\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLogProvider} instance that writes messages to an {@link OutputStream}.\n-         *\n-         * @param out An {@link OutputStream} to write to\n-         * @return A {@link FormattedLogProvider} instance that writes to the specified OutputStream\n-         */\n-        public FormattedLogProvider toOutputStream( OutputStream out )\n-        {\n-            return toPrintWriter( Suppliers.singleton( OUTPUT_STREAM_CONVERTER.apply( out ) ) );\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLogProvider} instance that writes messages to {@link OutputStream}s obtained from the specified\n-         * {@link Supplier}. The OutputStream is obtained from the Supplier before every log message is written.\n-         *\n-         * @param outSupplier A supplier for an output stream to write to\n-         * @return A {@link FormattedLogProvider} instance\n-         */\n-        public FormattedLogProvider toOutputStream( Supplier<OutputStream> outSupplier )\n-        {\n-            return toPrintWriter( Suppliers.adapted( outSupplier, OUTPUT_STREAM_CONVERTER ) );\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLogProvider} instance that writes messages to a {@link Writer}.\n-         *\n-         * @param writer A {@link Writer} to write to\n-         * @return A {@link FormattedLogProvider} instance that writes to the specified Writer\n-         */\n-        public FormattedLogProvider toWriter( Writer writer )\n-        {\n-            return toPrintWriter( new PrintWriter( writer ) );\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLogProvider} instance that writes messages to a {@link PrintWriter}.\n-         *\n-         * @param writer A {@link PrintWriter} to write to\n-         * @return A {@link FormattedLogProvider} instance that writes to the specified PrintWriter\n-         */\n-        public FormattedLogProvider toPrintWriter( PrintWriter writer )\n-        {\n-            return toPrintWriter( Suppliers.singleton( writer ) );\n-        }\n-\n-        /**\n-         * Creates a {@link FormattedLogProvider} instance that writes messages to {@link PrintWriter}s obtained from the specified\n-         * {@link Supplier}. The PrintWriter is obtained from the Supplier before every log message is written.\n-         *\n-         * @param writerSupplier A supplier for a {@link PrintWriter} to write to\n-         * @return A {@link FormattedLogProvider} instance that writes to the specified PrintWriter\n-         */\n-        public FormattedLogProvider toPrintWriter( Supplier<PrintWriter> writerSupplier )\n-        {\n-            return new FormattedLogProvider( writerSupplier, zoneId, renderContext, levels, defaultLevel, autoFlush );\n-        }\n     }\n \n-    private final Supplier<PrintWriter> writerSupplier;\n-    private final ZoneId zoneId;\n-    private final boolean renderContext;\n-    private final Map<String, Level> levels;\n-    private final Level defaultLevel;\n-    private final boolean autoFlush;\n-\n     /**\n-     * Start creating a {@link FormattedLogProvider} which will not render the context (the class name or log name) in each output line.\n-     * Use {@link Builder#toOutputStream} to complete.\n+     * Disable rendering of the context (the class name or log name) in each output line.\n      *\n-     * @return a builder for a {@link FormattedLogProvider}\n+     * @return this builder\n      */\n-    public static Builder withoutRenderingContext()\n+    public Builder withoutRenderingContext()\n     {\n-        return new Builder().withoutRenderingContext();\n+      this.renderContext = false;\n+      return this;\n     }\n \n     /**\n-     * Start creating a {@link FormattedLogProvider} with UTC timezone for datestamps in the log\n+     * Set the zoneId for datestamps in the log\n      *\n-     * @return a builder for a {@link FormattedLogProvider}\n+     * @return this builder\n      */\n-    public static Builder withUTCTimeZone()\n+    public Builder withUTCZoneId()\n     {\n-        return new Builder().withUTCZoneId();\n+      return withZoneId(ZoneOffset.UTC);\n     }\n \n     /**\n-     * Start creating a {@link FormattedLogProvider} with the specified zoneId for datestamps in the log\n+     * Set the zoneId for datestamps in the log\n      *\n-     * @return a builder for a {@link FormattedLogProvider}\n      * @param zoneId to use\n+     * @return this builder\n      */\n-    public static Builder withZoneId( ZoneId zoneId )\n+    public Builder withZoneId(ZoneId zoneId)\n     {\n-        return new Builder().withZoneId( zoneId );\n+      this.zoneId = zoneId;\n+      return this;\n     }\n \n     /**\n-     * Start creating a {@link FormattedLogProvider} with the specified zoneId from timezone for datestamps in the log\n+     * Set the zoneId from timestamp for datestamps in the log\n      *\n-     * @param timeZone to use\n-     * @return a builder for a {@link FormattedLogProvider}\n+     * @param timezone to use\n+     * @return this builder\n      * @deprecated use {@link #withZoneId(ZoneId)}\n      */\n     @Deprecated\n-    public static Builder withTimeZone( TimeZone timeZone )\n+    public Builder withTimeZone(TimeZone timezone)\n     {\n-        return new Builder().withZoneId( timeZone.toZoneId() );\n+      return withZoneId(timezone.toZoneId());\n     }\n \n     /**\n-     * Start creating a {@link FormattedLogProvider} with the specified log {@link Level} for all {@link Log}s by default.\n-     * Use {@link Builder#toOutputStream} to complete.\n+     * Use the specified log {@link Level} for all {@link Log}s by default.\n      *\n      * @param level the log level to use as a default\n-     * @return a builder for a {@link FormattedLogProvider}\n+     * @return this builder\n+     */\n+    public Builder withDefaultLogLevel(Level level)\n+    {\n+      this.defaultLevel = level;\n+      return this;\n+    }\n+\n+    /**\n+     * Use the specified log {@link Level} for any {@link Log}s that match the specified context. Any {@link Log} context that\n+     * starts with the specified string will have its level set. For example, setting the level for the context {@code org.neo4j}\n+     * would result in that level being applied to {@link Log}s with the context {@code org.neo4j.Foo}, {@code org.neo4j.foo.Bar}, etc.\n+     *\n+     * @param context the context of the Logs to set the level of, matching any Log context starting with this string\n+     * @param level   the log level to apply\n+     * @return this builder\n+     */\n+    public Builder withLogLevel(String context, Level level)\n+    {\n+      this.levels.put(context, level);\n+      return this;\n+    }\n+\n+    /**\n+     * Set the log level for many contexts - equivalent to calling {@link #withLogLevel(String, Level)}\n+     * for every entry in the provided map.\n+     *\n+     * @param levels a map containing paris of context and level\n+     * @return this builder\n      */\n-    public static Builder withDefaultLogLevel( Level level )\n+    public Builder withLogLevels(Map<String, Level> levels)\n     {\n-        return new Builder().withDefaultLogLevel( level );\n+      this.levels.putAll(levels);\n+      return this;\n     }\n \n     /**\n-     * Start creating a {@link FormattedLogProvider} without auto flushing.\n-     * Use {@link Builder#toOutputStream} to complete.\n+     * Disable auto flushing.\n      *\n-     * @return a builder for a {@link FormattedLogProvider}\n+     * @return this builder\n      */\n-    public static Builder withoutAutoFlush()\n+    public Builder withoutAutoFlush()\n     {\n-        return new Builder().withoutAutoFlush();\n+      this.autoFlush = false;\n+      return this;\n     }\n \n     /**\n@@ -292,9 +160,9 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n      * @param out An {@link OutputStream} to write to\n      * @return A {@link FormattedLogProvider} instance that writes to the specified OutputStream\n      */\n-    public static FormattedLogProvider toOutputStream( OutputStream out )\n+    public FormattedLogProvider toOutputStream(OutputStream out)\n     {\n-        return new Builder().toOutputStream( out );\n+      return toPrintWriter(Suppliers.singleton(OUTPUT_STREAM_CONVERTER.apply(out)));\n     }\n \n     /**\n@@ -304,9 +172,9 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n      * @param outSupplier A supplier for an output stream to write to\n      * @return A {@link FormattedLogProvider} instance\n      */\n-    public static FormattedLogProvider toOutputStream( Supplier<OutputStream> outSupplier )\n+    public FormattedLogProvider toOutputStream(Supplier<OutputStream> outSupplier)\n     {\n-        return new Builder().toOutputStream( outSupplier );\n+      return toPrintWriter(Suppliers.adapted(outSupplier, OUTPUT_STREAM_CONVERTER));\n     }\n \n     /**\n@@ -315,9 +183,9 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n      * @param writer A {@link Writer} to write to\n      * @return A {@link FormattedLogProvider} instance that writes to the specified Writer\n      */\n-    public static FormattedLogProvider toWriter( Writer writer )\n+    public FormattedLogProvider toWriter(Writer writer)\n     {\n-        return new Builder().toWriter( writer );\n+      return toPrintWriter(new PrintWriter(writer));\n     }\n \n     /**\n@@ -326,9 +194,9 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n      * @param writer A {@link PrintWriter} to write to\n      * @return A {@link FormattedLogProvider} instance that writes to the specified PrintWriter\n      */\n-    public static FormattedLogProvider toPrintWriter( PrintWriter writer )\n+    public FormattedLogProvider toPrintWriter(PrintWriter writer)\n     {\n-        return new Builder().toPrintWriter( writer );\n+      return toPrintWriter(Suppliers.singleton(writer));\n     }\n \n     /**\n@@ -338,51 +206,184 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n      * @param writerSupplier A supplier for a {@link PrintWriter} to write to\n      * @return A {@link FormattedLogProvider} instance that writes to the specified PrintWriter\n      */\n-    public static FormattedLogProvider toPrintWriter( Supplier<PrintWriter> writerSupplier )\n-    {\n-        return new Builder().toPrintWriter( writerSupplier );\n-    }\n-\n-    FormattedLogProvider( Supplier<PrintWriter> writerSupplier,\n-                          ZoneId zoneId, boolean renderContext,\n-                          Map<String, Level> levels, Level defaultLevel, boolean autoFlush )\n-    {\n-        this.writerSupplier = writerSupplier;\n-        this.zoneId = zoneId;\n-        this.renderContext = renderContext;\n-        this.levels = new HashMap<>( levels );\n-        this.defaultLevel = defaultLevel;\n-        this.autoFlush = autoFlush;\n-    }\n-\n-    @Override\n-    protected FormattedLog buildLog( Class loggingClass )\n+    public FormattedLogProvider toPrintWriter(Supplier<PrintWriter> writerSupplier)\n     {\n-        String className = loggingClass.getName();\n-        String shortenedClassName = PACKAGE_PATTERN.matcher( className ).replaceAll( \"$1.\" );\n-        return buildLog( shortenedClassName, levelForContext( className ) );\n+      return new FormattedLogProvider(writerSupplier, zoneId, renderContext, levels, defaultLevel, autoFlush);\n     }\n-\n-    @Override\n-    protected FormattedLog buildLog( String name )\n-    {\n-        return buildLog( name, levelForContext( name ) );\n-    }\n-\n-    private FormattedLog buildLog( String context, Level level )\n-    {\n-        return new FormattedLog( writerSupplier, zoneId, this, renderContext ? context : null, level, autoFlush );\n-    }\n-\n-    private Level levelForContext( String context )\n+  }\n+\n+  private final Supplier<PrintWriter> writerSupplier;\n+  private final ZoneId zoneId;\n+  private final boolean renderContext;\n+  private final Map<String, Level> levels;\n+  private final Level defaultLevel;\n+  private final boolean autoFlush;\n+\n+  /**\n+   * Start creating a {@link FormattedLogProvider} which will not render the context (the class name or log name) in each output line.\n+   * Use {@link Builder#toOutputStream} to complete.\n+   *\n+   * @return a builder for a {@link FormattedLogProvider}\n+   */\n+  public static Builder withoutRenderingContext()\n+  {\n+    return new Builder().withoutRenderingContext();\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLogProvider} with UTC timezone for datestamps in the log\n+   *\n+   * @return a builder for a {@link FormattedLogProvider}\n+   */\n+  public static Builder withUTCTimeZone()\n+  {\n+    return new Builder().withUTCZoneId();\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLogProvider} with the specified zoneId for datestamps in the log\n+   *\n+   * @param zoneId to use\n+   * @return a builder for a {@link FormattedLogProvider}\n+   */\n+  public static Builder withZoneId(ZoneId zoneId)\n+  {\n+    return new Builder().withZoneId(zoneId);\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLogProvider} with the specified zoneId from timezone for datestamps in the log\n+   *\n+   * @param timeZone to use\n+   * @return a builder for a {@link FormattedLogProvider}\n+   * @deprecated use {@link #withZoneId(ZoneId)}\n+   */\n+  @Deprecated\n+  public static Builder withTimeZone(TimeZone timeZone)\n+  {\n+    return new Builder().withZoneId(timeZone.toZoneId());\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLogProvider} with the specified log {@link Level} for all {@link Log}s by default.\n+   * Use {@link Builder#toOutputStream} to complete.\n+   *\n+   * @param level the log level to use as a default\n+   * @return a builder for a {@link FormattedLogProvider}\n+   */\n+  public static Builder withDefaultLogLevel(Level level)\n+  {\n+    return new Builder().withDefaultLogLevel(level);\n+  }\n+\n+  /**\n+   * Start creating a {@link FormattedLogProvider} without auto flushing.\n+   * Use {@link Builder#toOutputStream} to complete.\n+   *\n+   * @return a builder for a {@link FormattedLogProvider}\n+   */\n+  public static Builder withoutAutoFlush()\n+  {\n+    return new Builder().withoutAutoFlush();\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLogProvider} instance that writes messages to an {@link OutputStream}.\n+   *\n+   * @param out An {@link OutputStream} to write to\n+   * @return A {@link FormattedLogProvider} instance that writes to the specified OutputStream\n+   */\n+  public static FormattedLogProvider toOutputStream(OutputStream out)\n+  {\n+    return new Builder().toOutputStream(out);\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLogProvider} instance that writes messages to {@link OutputStream}s obtained from the specified\n+   * {@link Supplier}. The OutputStream is obtained from the Supplier before every log message is written.\n+   *\n+   * @param outSupplier A supplier for an output stream to write to\n+   * @return A {@link FormattedLogProvider} instance\n+   */\n+  public static FormattedLogProvider toOutputStream(Supplier<OutputStream> outSupplier)\n+  {\n+    return new Builder().toOutputStream(outSupplier);\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLogProvider} instance that writes messages to a {@link Writer}.\n+   *\n+   * @param writer A {@link Writer} to write to\n+   * @return A {@link FormattedLogProvider} instance that writes to the specified Writer\n+   */\n+  public static FormattedLogProvider toWriter(Writer writer)\n+  {\n+    return new Builder().toWriter(writer);\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLogProvider} instance that writes messages to a {@link PrintWriter}.\n+   *\n+   * @param writer A {@link PrintWriter} to write to\n+   * @return A {@link FormattedLogProvider} instance that writes to the specified PrintWriter\n+   */\n+  public static FormattedLogProvider toPrintWriter(PrintWriter writer)\n+  {\n+    return new Builder().toPrintWriter(writer);\n+  }\n+\n+  /**\n+   * Creates a {@link FormattedLogProvider} instance that writes messages to {@link PrintWriter}s obtained from the specified\n+   * {@link Supplier}. The PrintWriter is obtained from the Supplier before every log message is written.\n+   *\n+   * @param writerSupplier A supplier for a {@link PrintWriter} to write to\n+   * @return A {@link FormattedLogProvider} instance that writes to the specified PrintWriter\n+   */\n+  public static FormattedLogProvider toPrintWriter(Supplier<PrintWriter> writerSupplier)\n+  {\n+    return new Builder().toPrintWriter(writerSupplier);\n+  }\n+\n+  FormattedLogProvider(Supplier<PrintWriter> writerSupplier,\n+                       ZoneId zoneId, boolean renderContext,\n+                       Map<String, Level> levels, Level defaultLevel, boolean autoFlush)\n+  {\n+    this.writerSupplier = writerSupplier;\n+    this.zoneId = zoneId;\n+    this.renderContext = renderContext;\n+    this.levels = new HashMap<>(levels);\n+    this.defaultLevel = defaultLevel;\n+    this.autoFlush = autoFlush;\n+  }\n+\n+  @Override\n+  protected FormattedLog buildLog(Class loggingClass)\n+  {\n+    String className = loggingClass.getName();\n+    String shortenedClassName = PACKAGE_PATTERN.matcher(className).replaceAll(\"$1.\");\n+    return buildLog(shortenedClassName, levelForContext(className));\n+  }\n+\n+  @Override\n+  protected FormattedLog buildLog(String name)\n+  {\n+    return buildLog(name, levelForContext(name));\n+  }\n+\n+  private FormattedLog buildLog(String context, Level level)\n+  {\n+    return new FormattedLog(writerSupplier, zoneId, this, renderContext ? context : null, level, autoFlush);\n+  }\n+\n+  private Level levelForContext(String context)\n+  {\n+    for (Map.Entry<String, Level> entry : levels.entrySet())\n     {\n-        for ( Map.Entry<String, Level> entry : levels.entrySet() )\n-        {\n-            if ( context.startsWith( entry.getKey() ) )\n-            {\n-                return entry.getValue();\n-            }\n-        }\n-        return defaultLevel;\n+      if (context.startsWith(entry.getKey()))\n+      {\n+        return entry.getValue();\n+      }\n     }\n+    return defaultLevel;\n+  }\n }\n",
            "diff_size": 454
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "346",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2396/FormattedLogProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2396/FormattedLogProvider.java\nindex bf1f1d47ea8..0b4d734bd72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2396/FormattedLogProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2396/FormattedLogProvider.java\n@@ -48,7 +48,7 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n     {\n         private boolean renderContext = true;\n         private ZoneId zoneId = ZoneOffset.UTC;\n-        private Map<String, Level> levels = new HashMap<>();\n+        private Map<String,Level> levels = new HashMap<>();\n         private Level defaultLevel = Level.INFO;\n         private boolean autoFlush = true;\n \n@@ -136,7 +136,7 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n          * @param levels a map containing paris of context and level\n          * @return this builder\n          */\n-        public Builder withLogLevels( Map<String, Level> levels )\n+        public Builder withLogLevels( Map<String,Level> levels )\n         {\n             this.levels.putAll( levels );\n             return this;\n@@ -214,7 +214,7 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n     private final Supplier<PrintWriter> writerSupplier;\n     private final ZoneId zoneId;\n     private final boolean renderContext;\n-    private final Map<String, Level> levels;\n+    private final Map<String,Level> levels;\n     private final Level defaultLevel;\n     private final boolean autoFlush;\n \n@@ -343,10 +343,8 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n         return new Builder().toPrintWriter( writerSupplier );\n     }\n \n-    FormattedLogProvider( Supplier<PrintWriter> writerSupplier,\n-                          ZoneId zoneId, boolean renderContext,\n-                          Map<String, Level> levels, Level defaultLevel, boolean autoFlush )\n-    {\n+    FormattedLogProvider( Supplier<PrintWriter> writerSupplier, ZoneId zoneId, boolean renderContext, Map<String,Level> levels, Level defaultLevel, boolean autoFlush )\n+{\n         this.writerSupplier = writerSupplier;\n         this.zoneId = zoneId;\n         this.renderContext = renderContext;\n@@ -376,7 +374,7 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n \n     private Level levelForContext( String context )\n     {\n-        for ( Map.Entry<String, Level> entry : levels.entrySet() )\n+        for ( Map.Entry<String,Level> entry : levels.entrySet() )\n         {\n             if ( context.startsWith( entry.getKey() ) )\n             {\n@@ -385,4 +383,4 @@ public class FormattedLogProvider extends AbstractLogProvider<FormattedLog>\n         }\n         return defaultLevel;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}