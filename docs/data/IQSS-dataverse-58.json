{
    "project_name": "IQSS-dataverse",
    "error_id": "58",
    "information": {
        "errors": [
            {
                "line": "134",
                "column": "5",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    @Override\n    public boolean canDecodeInput(BufferedInputStream stream) throws IOException {\n    \t//who closes this stream?\n        if (stream ==null){\n            throw new IllegalArgumentException(\"stream == null!\");\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "191",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/58/DTAFileReaderSpi.java\nindex 53ce587fc75..9f484970cfd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/58/DTAFileReaderSpi.java\n@@ -131,8 +131,8 @@ public class DTAFileReaderSpi extends TabularDataFileReaderSpi{\n \n     @Override\n     public boolean canDecodeInput(BufferedInputStream stream) throws IOException {\n-    \t//who closes this stream?\n-        if (stream ==null){\n+    //who closes this stream? if (stream ==null){\n+         if (stream ==null){\n             throw new IllegalArgumentException(\"stream == null!\");\n         }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/58/DTAFileReaderSpi.java\nindex 53ce587fc75..207438d0d8d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/58/DTAFileReaderSpi.java\n@@ -37,193 +37,193 @@ import org.apache.commons.codec.binary.Hex;\n \n /**\n  * Service Provider registration class for the Stata/DTA ingest plugin.\n- * Based on the code originally developed by Akio Sone, HMDC/ODUM \n+ * Based on the code originally developed by Akio Sone, HMDC/ODUM\n  * for v.2 of the DVN.\n- * \n+ *\n  * @author Leonid Andreev\n  * @author asone\n  */\n-public class DTAFileReaderSpi extends TabularDataFileReaderSpi{\n-\n-    private static Map<Byte, String> stataReleaseNumber = new HashMap<Byte, String>();\n-\n-    static {\n-        stataReleaseNumber.put((byte) 104, \"rel_3\");\n-        stataReleaseNumber.put((byte) 105, \"rel_4or5\");\n-        stataReleaseNumber.put((byte) 108, \"rel_6\");\n-        stataReleaseNumber.put((byte) 110, \"rel_7first\");\n-        stataReleaseNumber.put((byte) 111, \"rel_7scnd\");\n-        stataReleaseNumber.put((byte) 113, \"rel_8_or_9\");\n-        stataReleaseNumber.put((byte) 114, \"rel_10\");\n+public class DTAFileReaderSpi extends TabularDataFileReaderSpi {\n+\n+  private static Map<Byte, String> stataReleaseNumber = new HashMap<Byte, String>();\n+\n+  static {\n+    stataReleaseNumber.put((byte) 104, \"rel_3\");\n+    stataReleaseNumber.put((byte) 105, \"rel_4or5\");\n+    stataReleaseNumber.put((byte) 108, \"rel_6\");\n+    stataReleaseNumber.put((byte) 110, \"rel_7first\");\n+    stataReleaseNumber.put((byte) 111, \"rel_7scnd\");\n+    stataReleaseNumber.put((byte) 113, \"rel_8_or_9\");\n+    stataReleaseNumber.put((byte) 114, \"rel_10\");\n+  }\n+\n+  private static String[] formatNames = {\"dta\", \"DTA\"};\n+  private static String[] extensions = {\"dta\"};\n+  private static String[] mimeType = {\"application/x-stata\"};\n+\n+\n+  private static Logger dbgLog = Logger.getLogger(\n+    DTAFileReaderSpi.class.getPackage().getName());\n+\n+  private static int DTA_HEADER_SIZE = 4;\n+\n+  public DTAFileReaderSpi() {\n+    super(\"HU-IQSS-DataVerse-project\",\n+      \"4.0\",\n+      formatNames,\n+      extensions,\n+      mimeType,\n+      \"edu.harvard.iq.dataverse.ingest.tabulardata.impl.plugins.dta.DTAFileReaderSpi\");\n+    dbgLog.fine(\"DTAFileReaderSpi is called\");\n+  }\n+\n+  public String getDescription(Locale locale) {\n+    return \"HU-IQSS-DataVerse-project Stata File Ingest plugin\";\n+  }\n+\n+  @Override\n+  public boolean canDecodeInput(Object source) throws IOException {\n+    if (!(source instanceof BufferedInputStream)) {\n+      return false;\n+    }\n+    if (source == null) {\n+      throw new IllegalArgumentException(\"stream == null!\");\n+    }\n+    BufferedInputStream stream = (BufferedInputStream) source;\n+    dbgLog.fine(\"applying the dta test\\n\");\n+\n+    byte[] b = new byte[DTA_HEADER_SIZE];\n+\n+    if (stream.markSupported()) {\n+      stream.mark(0);\n+    }\n+    int nbytes = stream.read(b, 0, DTA_HEADER_SIZE);\n+\n+    if (nbytes == 0) {\n+      throw new IOException();\n     }\n \n-    private static String[] formatNames = {\"dta\", \"DTA\"};\n-    private static String[] extensions = {\"dta\"};\n-    private static String[] mimeType = {\"application/x-stata\"};\n-    \n-    \n-    private static Logger dbgLog = Logger.getLogger(\n-            DTAFileReaderSpi.class.getPackage().getName());\n-\n-    private static int DTA_HEADER_SIZE = 4;\n-    \n-    public DTAFileReaderSpi() {\n-        super(\"HU-IQSS-DataVerse-project\",\n-            \"4.0\",\n-            formatNames,\n-            extensions,\n-            mimeType,\n-            \"edu.harvard.iq.dataverse.ingest.tabulardata.impl.plugins.dta.DTAFileReaderSpi\");\n-         dbgLog.fine(\"DTAFileReaderSpi is called\");\n+    if (stream.markSupported()) {\n+      stream.reset();\n     }\n \n-    public String getDescription(Locale locale) {\n-        return \"HU-IQSS-DataVerse-project Stata File Ingest plugin\";\n+    dbgLog.info(\"hex dump: 1st 4bytes =>\" +\n+      new String(Hex.encodeHex(b)) + \"<-\");\n+\n+    if (b[2] != 1) {\n+      dbgLog.fine(\"3rd byte is not 1: given file is not stata-dta type\");\n+      return false;\n+    } else if ((b[1] != 1) && (b[1] != 2)) {\n+      dbgLog.fine(\"2nd byte is neither 0 nor 1: this file is not stata-dta type\");\n+      return false;\n+    } else if (!DTAFileReaderSpi.stataReleaseNumber.containsKey(b[0])) {\n+      dbgLog.fine(\"1st byte (\" + b[0] +\n+        \") is not within the ingestable range [rel. 3-10]:\" +\n+        \"this file is NOT stata-dta type\");\n+      return false;\n+    } else {\n+      dbgLog.fine(\"this file is stata-dta type: \" +\n+        DTAFileReaderSpi.stataReleaseNumber.get(b[0]) +\n+        \"(No in byte=\" + b[0] + \")\");\n+      return true;\n     }\n+  }\n \n-    @Override\n-    public boolean canDecodeInput(Object source) throws IOException {\n-        if (!(source instanceof BufferedInputStream)) {\n-            return false;\n-        }\n-        if (source ==null){\n-            throw new IllegalArgumentException(\"stream == null!\");\n-        }\n-        BufferedInputStream stream = (BufferedInputStream)source;\n-        dbgLog.fine(\"applying the dta test\\n\");\n-\n-        byte[] b = new byte[DTA_HEADER_SIZE];\n-\n-        if (stream.markSupported()){\n-            stream.mark(0);\n-        }\n-        int nbytes = stream.read(b, 0, DTA_HEADER_SIZE);\n-\n-        if (nbytes == 0){\n-            throw new IOException();\n-        }\n-\n-        if (stream.markSupported()){\n-            stream.reset();\n-        }\n-\n-       dbgLog.info(\"hex dump: 1st 4bytes =>\" +\n-                new String(Hex.encodeHex(b)) + \"<-\");\n-\n-        if (b[2] != 1) {\n-            dbgLog.fine(\"3rd byte is not 1: given file is not stata-dta type\");\n-            return false;\n-        } else if ((b[1] != 1) && (b[1] != 2)) {\n-            dbgLog.fine(\"2nd byte is neither 0 nor 1: this file is not stata-dta type\");\n-            return false;\n-        } else if (!DTAFileReaderSpi.stataReleaseNumber.containsKey(b[0])) {\n-            dbgLog.fine(\"1st byte (\" + b[0]+\n-                    \") is not within the ingestable range [rel. 3-10]:\"+\n-                    \"this file is NOT stata-dta type\");\n-            return false;\n-        } else {\n-            dbgLog.fine(\"this file is stata-dta type: \" +\n-                    DTAFileReaderSpi.stataReleaseNumber.get(b[0]) +\n-                    \"(No in byte=\" + b[0] + \")\");\n-            return true;\n-        }\n+  @Override\n+  public boolean canDecodeInput(BufferedInputStream stream) throws IOException {\n+    //who closes this stream?\n+    if (stream == null) {\n+      throw new IllegalArgumentException(\"stream == null!\");\n     }\n \n-    @Override\n-    public boolean canDecodeInput(BufferedInputStream stream) throws IOException {\n-    \t//who closes this stream?\n-        if (stream ==null){\n-            throw new IllegalArgumentException(\"stream == null!\");\n-        }\n-\n-        dbgLog.fine(\"applying the dta test\\n\");\n-\n-        byte[] b = new byte[DTA_HEADER_SIZE];\n-        \n-        if (stream.markSupported()){\n-            stream.mark(0);\n-        }\n-        int nbytes = stream.read(b, 0, DTA_HEADER_SIZE);\n-\n-        if (nbytes == 0){\n-            throw new IOException();\n-        }\n-\n-        if (stream.markSupported()){\n-            stream.reset();\n-        }\n-        \n-       dbgLog.info(\"hex dump: 1st 4bytes =>\" +\n-                new String(Hex.encodeHex(b)) + \"<-\");\n-\n-        if (b[2] != 1) {\n-            dbgLog.fine(\"3rd byte is not 1: given file is not stata-dta type\");\n-            return false;\n-        } else if ((b[1] != 1) && (b[1] != 2)) {\n-            dbgLog.fine(\"2nd byte is neither 0 nor 1: this file is not stata-dta type\");\n-            return false;\n-        } else if (!DTAFileReaderSpi.stataReleaseNumber.containsKey(b[0])) {\n-            dbgLog.fine(\"1st byte (\" + b[0]+\n-                    \") is not within the ingestable range [rel. 3-10]:\"+\n-                    \"this file is NOT stata-dta type\");\n-            return false;\n-        } else {\n-            dbgLog.fine(\"this file is stata-dta type: \" +\n-                    DTAFileReaderSpi.stataReleaseNumber.get(b[0]) +\n-                    \"(No in HEX=\" + b[0] + \")\");\n-            return true;\n-        }\n+    dbgLog.fine(\"applying the dta test\\n\");\n \n+    byte[] b = new byte[DTA_HEADER_SIZE];\n+\n+    if (stream.markSupported()) {\n+      stream.mark(0);\n     }\n+    int nbytes = stream.read(b, 0, DTA_HEADER_SIZE);\n \n+    if (nbytes == 0) {\n+      throw new IOException();\n+    }\n \n-    @Override\n-    public boolean canDecodeInput(File file) throws IOException {\n-        if (file ==null){\n-            throw new IllegalArgumentException(\"file == null!\");\n-        }\n-        if (!file.canRead()){\n-            throw new IIOException(\"cannot read the input file\");\n-        }\n-\n-        byte[] hdr4 = new byte[4];\n-        // set-up a FileChannel instance for a given file object\n-\t\ttry (FileChannel srcChannel = new FileInputStream(file).getChannel();) {\n-\n-\t\t\t// create a read-only MappedByteBuffer\n-\t\t\tMappedByteBuffer buff = srcChannel.map(FileChannel.MapMode.READ_ONLY, 0, DTA_HEADER_SIZE);\n-\n-\t\t\t// printHexDump(buff, \"hex dump of the byte-buffer\");\n-\n-\t\t\tbuff.rewind();\n-\n-\t\t\tdbgLog.fine(\"applying the dta test\\n\");\n-\n-\t\t\tbuff.get(hdr4, 0, 4);\n-\t\t}\n-       dbgLog.fine(\"hex dump: 1st 4bytes =>\" +\n-                new String(Hex.encodeHex(hdr4)) + \"<-\");\n-\n-        if (hdr4[2] != 1) {\n-            dbgLog.fine(\"3rd byte is not 1: given file is not stata-dta type\");\n-            return false;\n-        } else if ((hdr4[1] != 1) && (hdr4[1] != 2)) {\n-            dbgLog.fine(\"2nd byte is neither 0 nor 1: this file is not stata-dta type\");\n-            return false;\n-        } else if (!stataReleaseNumber.containsKey(hdr4[0])) {\n-            dbgLog.fine(\"1st byte (\" + hdr4[0] +\n-            \") is not within the ingestable range [rel. 3-10]: this file is NOT stata-dta type\");\n-            return false;\n-        } else {\n-            dbgLog.fine(\"this file is stata-dta type: \" +\n-                    stataReleaseNumber.get(hdr4[0]) +\n-                    \"(No in HEX=\" + hdr4[0] + \")\");\n-            return true;\n-        }\n+    if (stream.markSupported()) {\n+      stream.reset();\n     }\n-    \n-    @Override\n-    public TabularDataFileReader createReaderInstance(Object ext) throws IIOException {\n-        return new DTAFileReader(this);\n+\n+    dbgLog.info(\"hex dump: 1st 4bytes =>\" +\n+      new String(Hex.encodeHex(b)) + \"<-\");\n+\n+    if (b[2] != 1) {\n+      dbgLog.fine(\"3rd byte is not 1: given file is not stata-dta type\");\n+      return false;\n+    } else if ((b[1] != 1) && (b[1] != 2)) {\n+      dbgLog.fine(\"2nd byte is neither 0 nor 1: this file is not stata-dta type\");\n+      return false;\n+    } else if (!DTAFileReaderSpi.stataReleaseNumber.containsKey(b[0])) {\n+      dbgLog.fine(\"1st byte (\" + b[0] +\n+        \") is not within the ingestable range [rel. 3-10]:\" +\n+        \"this file is NOT stata-dta type\");\n+      return false;\n+    } else {\n+      dbgLog.fine(\"this file is stata-dta type: \" +\n+        DTAFileReaderSpi.stataReleaseNumber.get(b[0]) +\n+        \"(No in HEX=\" + b[0] + \")\");\n+      return true;\n     }\n+\n+  }\n+\n+\n+  @Override\n+  public boolean canDecodeInput(File file) throws IOException {\n+    if (file == null) {\n+      throw new IllegalArgumentException(\"file == null!\");\n+    }\n+    if (!file.canRead()) {\n+      throw new IIOException(\"cannot read the input file\");\n+    }\n+\n+    byte[] hdr4 = new byte[4];\n+    // set-up a FileChannel instance for a given file object\n+    try (FileChannel srcChannel = new FileInputStream(file).getChannel();) {\n+\n+      // create a read-only MappedByteBuffer\n+      MappedByteBuffer buff = srcChannel.map(FileChannel.MapMode.READ_ONLY, 0, DTA_HEADER_SIZE);\n+\n+      // printHexDump(buff, \"hex dump of the byte-buffer\");\n+\n+      buff.rewind();\n+\n+      dbgLog.fine(\"applying the dta test\\n\");\n+\n+      buff.get(hdr4, 0, 4);\n+    }\n+    dbgLog.fine(\"hex dump: 1st 4bytes =>\" +\n+      new String(Hex.encodeHex(hdr4)) + \"<-\");\n+\n+    if (hdr4[2] != 1) {\n+      dbgLog.fine(\"3rd byte is not 1: given file is not stata-dta type\");\n+      return false;\n+    } else if ((hdr4[1] != 1) && (hdr4[1] != 2)) {\n+      dbgLog.fine(\"2nd byte is neither 0 nor 1: this file is not stata-dta type\");\n+      return false;\n+    } else if (!stataReleaseNumber.containsKey(hdr4[0])) {\n+      dbgLog.fine(\"1st byte (\" + hdr4[0] +\n+        \") is not within the ingestable range [rel. 3-10]: this file is NOT stata-dta type\");\n+      return false;\n+    } else {\n+      dbgLog.fine(\"this file is stata-dta type: \" +\n+        stataReleaseNumber.get(hdr4[0]) +\n+        \"(No in HEX=\" + hdr4[0] + \")\");\n+      return true;\n+    }\n+  }\n+\n+  @Override\n+  public TabularDataFileReader createReaderInstance(Object ext) throws IIOException {\n+    return new DTAFileReader(this);\n+  }\n }\n",
            "diff_size": 312
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/58/DTAFileReaderSpi.java\nindex 53ce587fc75..27eb5a492d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/58/DTAFileReaderSpi.java\n@@ -20,18 +20,14 @@\n \n package edu.harvard.iq.dataverse.ingest.tabulardata.impl.plugins.dta;\n \n-\n import edu.harvard.iq.dataverse.ingest.tabulardata.TabularDataFileReader;\n import edu.harvard.iq.dataverse.ingest.tabulardata.spi.TabularDataFileReaderSpi;\n-\n import java.io.*;\n import java.nio.*;\n import java.nio.channels.*;\n import java.util.logging.*;\n-\n import javax.imageio.IIOException;\n import java.util.*;\n-\n import org.apache.commons.codec.binary.Hex;\n \n \n@@ -43,38 +39,32 @@ import org.apache.commons.codec.binary.Hex;\n  * @author Leonid Andreev\n  * @author asone\n  */\n-public class DTAFileReaderSpi extends TabularDataFileReaderSpi{\n+\n+\n+public class DTAFileReaderSpi extends TabularDataFileReaderSpi {\n \n     private static Map<Byte, String> stataReleaseNumber = new HashMap<Byte, String>();\n \n     static {\n-        stataReleaseNumber.put((byte) 104, \"rel_3\");\n-        stataReleaseNumber.put((byte) 105, \"rel_4or5\");\n-        stataReleaseNumber.put((byte) 108, \"rel_6\");\n-        stataReleaseNumber.put((byte) 110, \"rel_7first\");\n-        stataReleaseNumber.put((byte) 111, \"rel_7scnd\");\n-        stataReleaseNumber.put((byte) 113, \"rel_8_or_9\");\n-        stataReleaseNumber.put((byte) 114, \"rel_10\");\n+        stataReleaseNumber.put((byte)104, \"rel_3\");\n+        stataReleaseNumber.put((byte)105, \"rel_4or5\");\n+        stataReleaseNumber.put((byte)108, \"rel_6\");\n+        stataReleaseNumber.put((byte)110, \"rel_7first\");\n+        stataReleaseNumber.put((byte)111, \"rel_7scnd\");\n+        stataReleaseNumber.put((byte)113, \"rel_8_or_9\");\n+        stataReleaseNumber.put((byte)114, \"rel_10\");\n     }\n \n-    private static String[] formatNames = {\"dta\", \"DTA\"};\n-    private static String[] extensions = {\"dta\"};\n-    private static String[] mimeType = {\"application/x-stata\"};\n-    \n-    \n-    private static Logger dbgLog = Logger.getLogger(\n-            DTAFileReaderSpi.class.getPackage().getName());\n \n+    private static String[] formatNames = { \"dta\",\"DTA\"};\n+    private static String[] extensions = { \"dta\"};\n+    private static String[] mimeType = { \"application/x-stata\"};\n+    private static Logger dbgLog = Logger.getLogger(DTAFileReaderSpi.class.getPackage().getName());\n     private static int DTA_HEADER_SIZE = 4;\n-    \n+\n     public DTAFileReaderSpi() {\n-        super(\"HU-IQSS-DataVerse-project\",\n-            \"4.0\",\n-            formatNames,\n-            extensions,\n-            mimeType,\n-            \"edu.harvard.iq.dataverse.ingest.tabulardata.impl.plugins.dta.DTAFileReaderSpi\");\n-         dbgLog.fine(\"DTAFileReaderSpi is called\");\n+        super(\"HU-IQSS-DataVerse-project\", \"4.0\", formatNames, extensions, mimeType, \"edu.harvard.iq.dataverse.ingest.tabulardata.impl.plugins.dta.DTAFileReaderSpi\");\n+        dbgLog.fine(\"DTAFileReaderSpi is called\");\n     }\n \n     public String getDescription(Locale locale) {\n@@ -86,30 +76,27 @@ public class DTAFileReaderSpi extends TabularDataFileReaderSpi{\n         if (!(source instanceof BufferedInputStream)) {\n             return false;\n         }\n-        if (source ==null){\n+\n+        if (source == null) {\n             throw new IllegalArgumentException(\"stream == null!\");\n         }\n-        BufferedInputStream stream = (BufferedInputStream)source;\n-        dbgLog.fine(\"applying the dta test\\n\");\n \n+        BufferedInputStream stream = (BufferedInputStream) source;\n+        dbgLog.fine(\"applying the dta test\\n\");\n         byte[] b = new byte[DTA_HEADER_SIZE];\n-\n-        if (stream.markSupported()){\n+        if (stream.markSupported()) {\n             stream.mark(0);\n         }\n-        int nbytes = stream.read(b, 0, DTA_HEADER_SIZE);\n \n-        if (nbytes == 0){\n+        int nbytes = stream.read(b, 0, DTA_HEADER_SIZE);\n+        if (nbytes == 0) {\n             throw new IOException();\n         }\n \n-        if (stream.markSupported()){\n+        if (stream.markSupported()) {\n             stream.reset();\n         }\n-\n-       dbgLog.info(\"hex dump: 1st 4bytes =>\" +\n-                new String(Hex.encodeHex(b)) + \"<-\");\n-\n+        dbgLog.info(\"hex dump: 1st 4bytes =>\" + new String(Hex.encodeHex(b)) + \"<-\");\n         if (b[2] != 1) {\n             dbgLog.fine(\"3rd byte is not 1: given file is not stata-dta type\");\n             return false;\n@@ -117,45 +104,35 @@ public class DTAFileReaderSpi extends TabularDataFileReaderSpi{\n             dbgLog.fine(\"2nd byte is neither 0 nor 1: this file is not stata-dta type\");\n             return false;\n         } else if (!DTAFileReaderSpi.stataReleaseNumber.containsKey(b[0])) {\n-            dbgLog.fine(\"1st byte (\" + b[0]+\n-                    \") is not within the ingestable range [rel. 3-10]:\"+\n-                    \"this file is NOT stata-dta type\");\n-            return false;\n-        } else {\n-            dbgLog.fine(\"this file is stata-dta type: \" +\n-                    DTAFileReaderSpi.stataReleaseNumber.get(b[0]) +\n-                    \"(No in byte=\" + b[0] + \")\");\n-            return true;\n-        }\n+                   dbgLog.fine(\"1st byte (\" + b[0] + \") is not within the ingestable range [rel. 3-10]:\" + \"this file is NOT stata-dta type\");\n+                   return false;\n+               } else {\n+                   dbgLog.fine(\"this file is stata-dta type: \" + DTAFileReaderSpi.stataReleaseNumber.get(b[0]) + \"(No in byte=\" + b[0] + \")\");\n+                   return true;\n+               }\n     }\n \n     @Override\n     public boolean canDecodeInput(BufferedInputStream stream) throws IOException {\n-    \t//who closes this stream?\n-        if (stream ==null){\n+        //who closes this stream?\n+        if (stream == null) {\n             throw new IllegalArgumentException(\"stream == null!\");\n         }\n-\n         dbgLog.fine(\"applying the dta test\\n\");\n-\n         byte[] b = new byte[DTA_HEADER_SIZE];\n-        \n-        if (stream.markSupported()){\n+        if (stream.markSupported()) {\n             stream.mark(0);\n         }\n-        int nbytes = stream.read(b, 0, DTA_HEADER_SIZE);\n \n-        if (nbytes == 0){\n+        int nbytes = stream.read(b, 0, DTA_HEADER_SIZE);\n+        if (nbytes == 0) {\n             throw new IOException();\n         }\n \n-        if (stream.markSupported()){\n+        if (stream.markSupported()) {\n             stream.reset();\n         }\n-        \n-       dbgLog.info(\"hex dump: 1st 4bytes =>\" +\n-                new String(Hex.encodeHex(b)) + \"<-\");\n-\n+        dbgLog.info(\"hex dump: 1st 4bytes =>\" + new String(Hex.encodeHex(b)) + \"<-\");\n         if (b[2] != 1) {\n             dbgLog.fine(\"3rd byte is not 1: given file is not stata-dta type\");\n             return false;\n@@ -163,47 +140,37 @@ public class DTAFileReaderSpi extends TabularDataFileReaderSpi{\n             dbgLog.fine(\"2nd byte is neither 0 nor 1: this file is not stata-dta type\");\n             return false;\n         } else if (!DTAFileReaderSpi.stataReleaseNumber.containsKey(b[0])) {\n-            dbgLog.fine(\"1st byte (\" + b[0]+\n-                    \") is not within the ingestable range [rel. 3-10]:\"+\n-                    \"this file is NOT stata-dta type\");\n-            return false;\n-        } else {\n-            dbgLog.fine(\"this file is stata-dta type: \" +\n-                    DTAFileReaderSpi.stataReleaseNumber.get(b[0]) +\n-                    \"(No in HEX=\" + b[0] + \")\");\n-            return true;\n-        }\n-\n+                   dbgLog.fine(\"1st byte (\" + b[0] + \") is not within the ingestable range [rel. 3-10]:\" + \"this file is NOT stata-dta type\");\n+                   return false;\n+               } else {\n+                   dbgLog.fine(\"this file is stata-dta type: \" + DTAFileReaderSpi.stataReleaseNumber.get(b[0]) + \"(No in HEX=\" + b[0] + \")\");\n+                   return true;\n+               }\n     }\n \n-\n     @Override\n     public boolean canDecodeInput(File file) throws IOException {\n-        if (file ==null){\n+        if (file == null) {\n             throw new IllegalArgumentException(\"file == null!\");\n         }\n-        if (!file.canRead()){\n+\n+        if (!file.canRead()) {\n             throw new IIOException(\"cannot read the input file\");\n         }\n \n         byte[] hdr4 = new byte[4];\n         // set-up a FileChannel instance for a given file object\n-\t\ttry (FileChannel srcChannel = new FileInputStream(file).getChannel();) {\n+        try (FileChannel srcChannel = new FileInputStream(file).getChannel();) {\n \n-\t\t\t// create a read-only MappedByteBuffer\n-\t\t\tMappedByteBuffer buff = srcChannel.map(FileChannel.MapMode.READ_ONLY, 0, DTA_HEADER_SIZE);\n-\n-\t\t\t// printHexDump(buff, \"hex dump of the byte-buffer\");\n-\n-\t\t\tbuff.rewind();\n-\n-\t\t\tdbgLog.fine(\"applying the dta test\\n\");\n-\n-\t\t\tbuff.get(hdr4, 0, 4);\n-\t\t}\n-       dbgLog.fine(\"hex dump: 1st 4bytes =>\" +\n-                new String(Hex.encodeHex(hdr4)) + \"<-\");\n+            // create a read-only MappedByteBuffer\n+            MappedByteBuffer buff = srcChannel.map(FileChannel.MapMode.READ_ONLY, 0, DTA_HEADER_SIZE);\n \n+            // printHexDump(buff, \"hex dump of the byte-buffer\");\n+            buff.rewind();\n+            dbgLog.fine(\"applying the dta test\\n\");\n+            buff.get(hdr4, 0, 4);\n+        }\n+        dbgLog.fine(\"hex dump: 1st 4bytes =>\" + new String(Hex.encodeHex(hdr4)) + \"<-\");\n         if (hdr4[2] != 1) {\n             dbgLog.fine(\"3rd byte is not 1: given file is not stata-dta type\");\n             return false;\n@@ -211,19 +178,17 @@ public class DTAFileReaderSpi extends TabularDataFileReaderSpi{\n             dbgLog.fine(\"2nd byte is neither 0 nor 1: this file is not stata-dta type\");\n             return false;\n         } else if (!stataReleaseNumber.containsKey(hdr4[0])) {\n-            dbgLog.fine(\"1st byte (\" + hdr4[0] +\n-            \") is not within the ingestable range [rel. 3-10]: this file is NOT stata-dta type\");\n-            return false;\n-        } else {\n-            dbgLog.fine(\"this file is stata-dta type: \" +\n-                    stataReleaseNumber.get(hdr4[0]) +\n-                    \"(No in HEX=\" + hdr4[0] + \")\");\n-            return true;\n-        }\n+                   dbgLog.fine(\"1st byte (\" + hdr4[0] + \") is not within the ingestable range [rel. 3-10]: this file is NOT stata-dta type\");\n+                   return false;\n+               } else {\n+                   dbgLog.fine(\"this file is stata-dta type: \" + stataReleaseNumber.get(hdr4[0]) + \"(No in HEX=\" + hdr4[0] + \")\");\n+                   return true;\n+               }\n     }\n-    \n+\n     @Override\n     public TabularDataFileReader createReaderInstance(Object ext) throws IIOException {\n         return new DTAFileReader(this);\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 120
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "191",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/58/DTAFileReaderSpi.java\nindex 53ce587fc75..9f484970cfd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/58/DTAFileReaderSpi.java\n@@ -131,8 +131,8 @@ public class DTAFileReaderSpi extends TabularDataFileReaderSpi{\n \n     @Override\n     public boolean canDecodeInput(BufferedInputStream stream) throws IOException {\n-    \t//who closes this stream?\n-        if (stream ==null){\n+    //who closes this stream? if (stream ==null){\n+         if (stream ==null){\n             throw new IllegalArgumentException(\"stream == null!\");\n         }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "191",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/58/DTAFileReaderSpi.java\nindex 53ce587fc75..c045bd589f7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/58/DTAFileReaderSpi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/58/DTAFileReaderSpi.java\n@@ -131,8 +131,8 @@ public class DTAFileReaderSpi extends TabularDataFileReaderSpi{\n \n     @Override\n     public boolean canDecodeInput(BufferedInputStream stream) throws IOException {\n-    \t//who closes this stream?\n-        if (stream ==null){\n+        //who closes this stream?\n+    if (stream ==null){\n             throw new IllegalArgumentException(\"stream == null!\");\n         }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}