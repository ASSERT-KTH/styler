{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1432",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "43",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "111",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "127",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "239",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1432/RecordChanges.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1432/RecordChanges.java\nindex e420f9c9eba..aaa34909356 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1432/RecordChanges.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1432/RecordChanges.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.state;\n \n import org.neo4j.collection.primitive.Primitive;\n@@ -30,228 +31,227 @@ import org.neo4j.kernel.impl.util.statistics.LocalIntCounter;\n  * deciding when to make a record heavy and when to consider it changed for inclusion in the\n  * transaction as a command.\n  *\n- * @param <RECORD> type of record\n+ * @param <RECORD>     type of record\n  * @param <ADDITIONAL> additional payload\n  */\n-public class RecordChanges<RECORD,ADDITIONAL> implements RecordAccess<RECORD,ADDITIONAL>\n+public class RecordChanges<RECORD, ADDITIONAL> implements RecordAccess<RECORD, ADDITIONAL>\n {\n-    private PrimitiveLongObjectMap<RecordProxy<RECORD,ADDITIONAL>> recordChanges = Primitive.longObjectMap();\n-    private final Loader<RECORD,ADDITIONAL> loader;\n-    private final IntCounter changeCounter;\n-\n-    public RecordChanges( Loader<RECORD,ADDITIONAL> loader, IntCounter globalCounter )\n+  private PrimitiveLongObjectMap<RecordProxy<RECORD, ADDITIONAL>> recordChanges = Primitive.longObjectMap();\n+  private final Loader<RECORD, ADDITIONAL> loader;\n+  private final IntCounter changeCounter;\n+\n+  public RecordChanges(Loader<RECORD, ADDITIONAL> loader, IntCounter globalCounter)\n+  {\n+    this.loader = loader;\n+    this.changeCounter = new LocalIntCounter(globalCounter);\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"RecordChanges{\" +\n+        \"recordChanges=\" + recordChanges +\n+        '}';\n+  }\n+\n+  @Override\n+  public RecordProxy<RECORD, ADDITIONAL> getIfLoaded(long key)\n+  {\n+    return recordChanges.get(key);\n+  }\n+\n+  @Override\n+  public RecordProxy<RECORD, ADDITIONAL> getOrLoad(long key, ADDITIONAL additionalData)\n+  {\n+    RecordProxy<RECORD, ADDITIONAL> result = recordChanges.get(key);\n+    if (result == null)\n+    {\n+      RECORD record = loader.load(key, additionalData);\n+      result = new RecordChange<>(recordChanges, changeCounter, key, record, loader, false, additionalData);\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public void setTo(long key, RECORD newRecord, ADDITIONAL additionalData)\n+  {\n+    setRecord(key, newRecord, additionalData);\n+  }\n+\n+  @Override\n+  public RecordProxy<RECORD, ADDITIONAL> setRecord(long key, RECORD record, ADDITIONAL additionalData)\n+  {\n+    RecordChange<RECORD, ADDITIONAL> recordChange =\n+        new RecordChange<>(recordChanges, changeCounter, key, record, loader, false, additionalData);\n+    recordChanges.put(key, recordChange);\n+    return recordChange;\n+  }\n+\n+  @Override\n+  public int changeSize()\n+  {\n+    return changeCounter.value();\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    if (recordChanges.size() <= 32)\n     {\n-        this.loader = loader;\n-        this.changeCounter = new LocalIntCounter( globalCounter );\n+      recordChanges.clear();\n+    } else\n+    {\n+      // Let's not allow the internal maps to grow too big over time.\n+      recordChanges = Primitive.longObjectMap();\n     }\n+    changeCounter.clear();\n+  }\n \n-    @Override\n-    public String toString()\n+  @Override\n+  public RecordProxy<RECORD, ADDITIONAL> create(long key, ADDITIONAL additionalData)\n+  {\n+    if (recordChanges.containsKey(key))\n     {\n-        return \"RecordChanges{\" +\n-               \"recordChanges=\" + recordChanges +\n-               '}';\n+      throw new IllegalStateException(key + \" already exists\");\n     }\n \n-    @Override\n-    public RecordProxy<RECORD, ADDITIONAL> getIfLoaded( long key )\n+    RECORD record = loader.newUnused(key, additionalData);\n+    RecordChange<RECORD, ADDITIONAL> change =\n+        new RecordChange<>(recordChanges, changeCounter, key, record, loader, true, additionalData);\n+    recordChanges.put(key, change);\n+    return change;\n+  }\n+\n+  @Override\n+  public Iterable<RecordProxy<RECORD, ADDITIONAL>> changes()\n+  {\n+    return Iterables.filter(RecordProxy::isChanged, recordChanges.values());\n+  }\n+\n+  public static class RecordChange<RECORD, ADDITIONAL> implements RecordProxy<RECORD, ADDITIONAL>\n+  {\n+    private final PrimitiveLongObjectMap<RecordProxy<RECORD, ADDITIONAL>> allChanges;\n+    private final IntCounter changeCounter;\n+    private final Loader<RECORD, ADDITIONAL> loader;\n+\n+    private final ADDITIONAL additionalData;\n+    private final RECORD record;\n+    private final boolean created;\n+    private final long key;\n+\n+    private RECORD before;\n+    private boolean changed;\n+\n+    public RecordChange(PrimitiveLongObjectMap<RecordProxy<RECORD, ADDITIONAL>> allChanges, IntCounter changeCounter,\n+                        long key, RECORD record, Loader<RECORD, ADDITIONAL> loader, boolean created, ADDITIONAL additionalData)\n     {\n-        return recordChanges.get( key );\n+      this.allChanges = allChanges;\n+      this.changeCounter = changeCounter;\n+      this.key = key;\n+      this.record = record;\n+      this.loader = loader;\n+      this.created = created;\n+      this.additionalData = additionalData;\n     }\n \n     @Override\n-    public RecordProxy<RECORD, ADDITIONAL> getOrLoad( long key, ADDITIONAL additionalData )\n+    public String toString()\n     {\n-        RecordProxy<RECORD, ADDITIONAL> result = recordChanges.get( key );\n-        if ( result == null )\n-        {\n-            RECORD record = loader.load( key, additionalData );\n-            result = new RecordChange<>( recordChanges, changeCounter, key, record, loader, false, additionalData );\n-        }\n-        return result;\n+      return \"RecordChange{\" + \"record=\" + record + \"key=\" + key + \"created=\" + created + '}';\n     }\n \n     @Override\n-    public void setTo( long key, RECORD newRecord, ADDITIONAL additionalData )\n+    public long getKey()\n     {\n-        setRecord( key, newRecord, additionalData );\n+      return key;\n     }\n \n     @Override\n-    public RecordProxy<RECORD,ADDITIONAL> setRecord( long key, RECORD record, ADDITIONAL additionalData )\n+    public RECORD forChangingLinkage()\n     {\n-        RecordChange<RECORD, ADDITIONAL> recordChange =\n-                new RecordChange<>( recordChanges, changeCounter, key, record, loader, false, additionalData );\n-        recordChanges.put( key, recordChange );\n-        return recordChange;\n+      return prepareForChange();\n     }\n \n     @Override\n-    public int changeSize()\n+    public RECORD forChangingData()\n     {\n-        return changeCounter.value();\n+      ensureHeavy();\n+      return prepareForChange();\n     }\n \n-    @Override\n-    public void close()\n+    private RECORD prepareForChange()\n     {\n-        if ( recordChanges.size() <= 32 )\n-        {\n-            recordChanges.clear();\n-        }\n-        else\n+      ensureHasBeforeRecordImage();\n+      if (!this.changed)\n+      {\n+        RecordProxy<RECORD, ADDITIONAL> previous = this.allChanges.put(key, this);\n+\n+        if (previous == null || !previous.isChanged())\n         {\n-            // Let's not allow the internal maps to grow too big over time.\n-            recordChanges = Primitive.longObjectMap();\n+          changeCounter.increment();\n         }\n-        changeCounter.clear();\n+\n+        this.changed = true;\n+      }\n+      return this.record;\n     }\n \n-    @Override\n-    public RecordProxy<RECORD, ADDITIONAL> create( long key, ADDITIONAL additionalData )\n+    private void ensureHeavy()\n     {\n-        if ( recordChanges.containsKey( key ) )\n+      if (!created)\n+      {\n+        loader.ensureHeavy(record);\n+        if (before != null)\n         {\n-            throw new IllegalStateException( key + \" already exists\" );\n+          loader.ensureHeavy(before);\n         }\n-\n-        RECORD record = loader.newUnused( key, additionalData );\n-        RecordChange<RECORD,ADDITIONAL> change =\n-                new RecordChange<>( recordChanges, changeCounter, key, record, loader, true, additionalData );\n-        recordChanges.put( key, change );\n-        return change;\n+      }\n     }\n \n     @Override\n-    public Iterable<RecordProxy<RECORD,ADDITIONAL>> changes()\n+    public RECORD forReadingLinkage()\n     {\n-        return Iterables.filter( RecordProxy::isChanged, recordChanges.values() );\n+      return this.record;\n     }\n \n-    public static class RecordChange<RECORD,ADDITIONAL> implements RecordProxy<RECORD, ADDITIONAL>\n+    @Override\n+    public RECORD forReadingData()\n     {\n-        private final PrimitiveLongObjectMap<RecordProxy<RECORD,ADDITIONAL>> allChanges;\n-        private final IntCounter changeCounter;\n-        private final Loader<RECORD,ADDITIONAL> loader;\n-\n-        private final ADDITIONAL additionalData;\n-        private final RECORD record;\n-        private final boolean created;\n-        private final long key;\n-\n-        private RECORD before;\n-        private boolean changed;\n-\n-        public RecordChange( PrimitiveLongObjectMap<RecordProxy<RECORD,ADDITIONAL>> allChanges, IntCounter changeCounter,\n-                long key, RECORD record, Loader<RECORD,ADDITIONAL> loader, boolean created, ADDITIONAL additionalData )\n-        {\n-            this.allChanges = allChanges;\n-            this.changeCounter = changeCounter;\n-            this.key = key;\n-            this.record = record;\n-            this.loader = loader;\n-            this.created = created;\n-            this.additionalData = additionalData;\n-        }\n-\n-        @Override\n-        public String toString()\n-        {\n-            return \"RecordChange{\" + \"record=\" + record + \"key=\" + key + \"created=\" + created + '}';\n-        }\n-\n-        @Override\n-        public long getKey()\n-        {\n-            return key;\n-        }\n-\n-        @Override\n-        public RECORD forChangingLinkage()\n-        {\n-            return prepareForChange();\n-        }\n-\n-        @Override\n-        public RECORD forChangingData()\n-        {\n-            ensureHeavy();\n-            return prepareForChange();\n-        }\n-\n-        private RECORD prepareForChange()\n-        {\n-            ensureHasBeforeRecordImage();\n-            if ( !this.changed )\n-            {\n-                RecordProxy<RECORD,ADDITIONAL> previous = this.allChanges.put( key, this );\n-\n-                if ( previous == null || !previous.isChanged() )\n-                {\n-                    changeCounter.increment();\n-                }\n-\n-                this.changed = true;\n-            }\n-            return this.record;\n-        }\n-\n-        private void ensureHeavy()\n-        {\n-            if ( !created )\n-            {\n-                loader.ensureHeavy( record );\n-                if ( before != null )\n-                {\n-                    loader.ensureHeavy( before );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public RECORD forReadingLinkage()\n-        {\n-            return this.record;\n-        }\n-\n-        @Override\n-        public RECORD forReadingData()\n-        {\n-            ensureHeavy();\n-            return this.record;\n-        }\n+      ensureHeavy();\n+      return this.record;\n+    }\n \n-        @Override\n-        public boolean isChanged()\n-        {\n-            return this.changed;\n-        }\n+    @Override\n+    public boolean isChanged()\n+    {\n+      return this.changed;\n+    }\n \n-        @Override\n-        public RECORD getBefore()\n-        {\n-            ensureHasBeforeRecordImage();\n-            return before;\n-        }\n+    @Override\n+    public RECORD getBefore()\n+    {\n+      ensureHasBeforeRecordImage();\n+      return before;\n+    }\n \n-        private void ensureHasBeforeRecordImage()\n-        {\n-            if ( before == null )\n-            {\n-                this.before = loader.clone( record );\n-            }\n-        }\n+    private void ensureHasBeforeRecordImage()\n+    {\n+      if (before == null)\n+      {\n+        this.before = loader.clone(record);\n+      }\n+    }\n \n-        @Override\n-        public boolean isCreated()\n-        {\n-            return created;\n-        }\n+    @Override\n+    public boolean isCreated()\n+    {\n+      return created;\n+    }\n \n-        @Override\n-        public ADDITIONAL getAdditionalData()\n-        {\n-            return additionalData;\n-        }\n+    @Override\n+    public ADDITIONAL getAdditionalData()\n+    {\n+      return additionalData;\n     }\n+  }\n }\n",
            "diff_size": 282
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1432/RecordChanges.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1432/RecordChanges.java\nindex e420f9c9eba..805d8f89ad0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1432/RecordChanges.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1432/RecordChanges.java\n@@ -48,27 +48,26 @@ public class RecordChanges<RECORD,ADDITIONAL> implements RecordAccess<RECORD,ADD\n     @Override\n     public String toString()\n     {\n-        return \"RecordChanges{\" +\n-               \"recordChanges=\" + recordChanges +\n-               '}';\n+        return \"RecordChanges{\" + \"recordChanges=\" + recordChanges + '}';\n     }\n \n     @Override\n-    public RecordProxy<RECORD, ADDITIONAL> getIfLoaded( long key )\n+    public RecordProxy<RECORD,ADDITIONAL> getIfLoaded( long key )\n     {\n         return recordChanges.get( key );\n     }\n \n     @Override\n-    public RecordProxy<RECORD, ADDITIONAL> getOrLoad( long key, ADDITIONAL additionalData )\n+    public RecordProxy<RECORD,ADDITIONAL> getOrLoad( long key, ADDITIONAL additionalData )\n     {\n-        RecordProxy<RECORD, ADDITIONAL> result = recordChanges.get( key );\n+        RecordProxy<RECORD,ADDITIONAL> result = recordChanges.get( key );\n         if ( result == null )\n         {\n             RECORD record = loader.load( key, additionalData );\n             result = new RecordChange<>( recordChanges, changeCounter, key, record, loader, false, additionalData );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     @Override\n@@ -80,9 +79,8 @@ public class RecordChanges<RECORD,ADDITIONAL> implements RecordAccess<RECORD,ADD\n     @Override\n     public RecordProxy<RECORD,ADDITIONAL> setRecord( long key, RECORD record, ADDITIONAL additionalData )\n     {\n-        RecordChange<RECORD, ADDITIONAL> recordChange =\n-                new RecordChange<>( recordChanges, changeCounter, key, record, loader, false, additionalData );\n-        recordChanges.put( key, recordChange );\n+        RecordChange<RECORD,ADDITIONAL> recordChange = new RecordChange<>( recordChanges, changeCounter, key, record, loader, false, additionalData );\n+recordChanges.put( key, recordChange );\n         return recordChange;\n     }\n \n@@ -108,7 +106,7 @@ public class RecordChanges<RECORD,ADDITIONAL> implements RecordAccess<RECORD,ADD\n     }\n \n     @Override\n-    public RecordProxy<RECORD, ADDITIONAL> create( long key, ADDITIONAL additionalData )\n+    public RecordProxy<RECORD,ADDITIONAL> create( long key, ADDITIONAL additionalData )\n     {\n         if ( recordChanges.containsKey( key ) )\n         {\n@@ -116,9 +114,8 @@ public class RecordChanges<RECORD,ADDITIONAL> implements RecordAccess<RECORD,ADD\n         }\n \n         RECORD record = loader.newUnused( key, additionalData );\n-        RecordChange<RECORD,ADDITIONAL> change =\n-                new RecordChange<>( recordChanges, changeCounter, key, record, loader, true, additionalData );\n-        recordChanges.put( key, change );\n+        RecordChange<RECORD,ADDITIONAL> change = new RecordChange<>( recordChanges, changeCounter, key, record, loader, true, additionalData );\n+recordChanges.put( key, change );\n         return change;\n     }\n \n@@ -185,8 +182,7 @@ public class RecordChanges<RECORD,ADDITIONAL> implements RecordAccess<RECORD,ADD\n             if ( !this.changed )\n             {\n                 RecordProxy<RECORD,ADDITIONAL> previous = this.allChanges.put( key, this );\n-\n-                if ( previous == null || !previous.isChanged() )\n+if ( previous == null || !previous.isChanged() )\n                 {\n                     changeCounter.increment();\n                 }\n@@ -254,4 +250,4 @@ public class RecordChanges<RECORD,ADDITIONAL> implements RecordAccess<RECORD,ADD\n             return additionalData;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}