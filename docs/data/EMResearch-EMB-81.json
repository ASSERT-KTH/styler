{
    "project_name": "EMResearch-EMB",
    "error_id": "81",
    "information": {
        "errors": [
            {
                "line": "44",
                "column": "5",
                "severity": "warning",
                "message": "'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "    List<RuleMatch> cleanList = new ArrayList<>();\n    RuleMatch prevRuleMatch = null;\n    for(RuleMatch ruleMatch: ruleMatches) {\n      if (prevRuleMatch == null) {  // first item\n        prevRuleMatch = ruleMatch;\n        continue;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/81/CleanOverlappingFilter.java\nindex 79db6d0a01e..4cce908d774 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler/81/CleanOverlappingFilter.java\n@@ -41,7 +41,7 @@ public class CleanOverlappingFilter implements RuleMatchFilter {\n   public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n     List<RuleMatch> cleanList = new ArrayList<>();\n     RuleMatch prevRuleMatch = null;\n-    for(RuleMatch ruleMatch: ruleMatches) {\n+    for (RuleMatch ruleMatch: ruleMatches) {\n       if (prevRuleMatch == null) {  // first item\n         prevRuleMatch = ruleMatch;\n         continue;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/81/CleanOverlappingFilter.java\nindex 79db6d0a01e..571a2e5d3f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/intellij/81/CleanOverlappingFilter.java\n@@ -16,6 +16,7 @@\n  * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301\n  * USA\n  */\n+\n package org.languagetool.rules;\n \n import org.languagetool.Language;\n@@ -23,60 +24,60 @@ import org.languagetool.Language;\n import java.util.ArrayList;\n import java.util.List;\n \n-/* \n- * Remove overlapping errors according to the priorities established for the language.  \n+/*\n+ * Remove overlapping errors according to the priorities established for the language.\n  * (It assumes the input list is ordered by start position)\n- * \n+ *\n  * @since 3.6\n  */\n public class CleanOverlappingFilter implements RuleMatchFilter {\n \n-  private Language language;\n-  \n-  public CleanOverlappingFilter(Language lang) {\n-    this.language = lang;\n-  }\n-  \n-  @Override\n-  public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n-    List<RuleMatch> cleanList = new ArrayList<>();\n-    RuleMatch prevRuleMatch = null;\n-    for(RuleMatch ruleMatch: ruleMatches) {\n-      if (prevRuleMatch == null) {  // first item\n-        prevRuleMatch = ruleMatch;\n-        continue;\n-      }\n-      if (ruleMatch.getFromPos() < prevRuleMatch.getFromPos()) {\n-        throw new IllegalArgumentException(\n-            \"The list of rule matches is not ordered. Make sure it is sorted by start position.\");\n-      }\n-      // no overlapping (juxtaposed errors are not removed)\n-      if (ruleMatch.getFromPos() >= prevRuleMatch.getToPos()) {\n-        cleanList.add(prevRuleMatch);\n-        prevRuleMatch = ruleMatch;\n-        continue;\n-      }\n-      // overlapping\n-      int currentPriority = language.getRulePriority(ruleMatch.getRule());\n-      int prevPriority = language.getRulePriority(prevRuleMatch.getRule());\n-      if (currentPriority == prevPriority) {\n-        // take the longest error:\n-        currentPriority = ruleMatch.getToPos() - ruleMatch.getFromPos();\n-        prevPriority = prevRuleMatch.getToPos() - prevRuleMatch.getFromPos();\n-      }\n-      if (currentPriority == prevPriority) {\n-        currentPriority++; // take the last one (to keep the current results in the web UI) \n-      }\n-      if (currentPriority > prevPriority) {\n-        prevRuleMatch = ruleMatch;\n-      }\n+    private Language language;\n+\n+    public CleanOverlappingFilter(Language lang) {\n+        this.language = lang;\n     }\n-    //last match\n-    if (prevRuleMatch != null) {\n-      cleanList.add(prevRuleMatch);\n+\n+    @Override\n+    public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n+        List<RuleMatch> cleanList = new ArrayList<>();\n+        RuleMatch prevRuleMatch = null;\n+        for (RuleMatch ruleMatch : ruleMatches) {\n+            if (prevRuleMatch == null) {  // first item\n+                prevRuleMatch = ruleMatch;\n+                continue;\n+            }\n+            if (ruleMatch.getFromPos() < prevRuleMatch.getFromPos()) {\n+                throw new IllegalArgumentException(\n+                    \"The list of rule matches is not ordered. Make sure it is sorted by start position.\");\n+            }\n+            // no overlapping (juxtaposed errors are not removed)\n+            if (ruleMatch.getFromPos() >= prevRuleMatch.getToPos()) {\n+                cleanList.add(prevRuleMatch);\n+                prevRuleMatch = ruleMatch;\n+                continue;\n+            }\n+            // overlapping\n+            int currentPriority = language.getRulePriority(ruleMatch.getRule());\n+            int prevPriority = language.getRulePriority(prevRuleMatch.getRule());\n+            if (currentPriority == prevPriority) {\n+                // take the longest error:\n+                currentPriority = ruleMatch.getToPos() - ruleMatch.getFromPos();\n+                prevPriority = prevRuleMatch.getToPos() - prevRuleMatch.getFromPos();\n+            }\n+            if (currentPriority == prevPriority) {\n+                currentPriority++; // take the last one (to keep the current results in the web UI)\n+            }\n+            if (currentPriority > prevPriority) {\n+                prevRuleMatch = ruleMatch;\n+            }\n+        }\n+        //last match\n+        if (prevRuleMatch != null) {\n+            cleanList.add(prevRuleMatch);\n+        }\n+        return cleanList;\n     }\n-    return cleanList;\n-  }\n \n-  \n+\n }\n\\ No newline at end of file\n",
            "diff_size": 86
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/81/CleanOverlappingFilter.java\nindex 79db6d0a01e..9484892f714 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/codebuff/81/CleanOverlappingFilter.java\n@@ -19,7 +19,6 @@\n package org.languagetool.rules;\n \n import org.languagetool.Language;\n-\n import java.util.ArrayList;\n import java.util.List;\n \n@@ -29,54 +28,53 @@ import java.util.List;\n  * \n  * @since 3.6\n  */\n+\n+\n public class CleanOverlappingFilter implements RuleMatchFilter {\n \n-  private Language language;\n-  \n-  public CleanOverlappingFilter(Language lang) {\n-    this.language = lang;\n-  }\n-  \n-  @Override\n-  public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n-    List<RuleMatch> cleanList = new ArrayList<>();\n-    RuleMatch prevRuleMatch = null;\n-    for(RuleMatch ruleMatch: ruleMatches) {\n-      if (prevRuleMatch == null) {  // first item\n-        prevRuleMatch = ruleMatch;\n-        continue;\n-      }\n-      if (ruleMatch.getFromPos() < prevRuleMatch.getFromPos()) {\n-        throw new IllegalArgumentException(\n-            \"The list of rule matches is not ordered. Make sure it is sorted by start position.\");\n-      }\n+    private Language language;\n+\n+    public CleanOverlappingFilter(Language lang) {\n+        this.language = lang;\n+    }\n+\n+    @Override\n+    public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n+        List<RuleMatch> cleanList = new ArrayList<>();\n+        RuleMatch prevRuleMatch = null;\n+        for (RuleMatch ruleMatch : ruleMatches) {\n+            if (prevRuleMatch == null) {  // first item\n+                prevRuleMatch = ruleMatch;\n+                continue;\n+            }\n+            if (ruleMatch.getFromPos() < prevRuleMatch.getFromPos()) {\n+                throw new IllegalArgumentException(\"The list of rule matches is not ordered. Make sure it is sorted by start position.\");\n+            }\n       // no overlapping (juxtaposed errors are not removed)\n-      if (ruleMatch.getFromPos() >= prevRuleMatch.getToPos()) {\n-        cleanList.add(prevRuleMatch);\n-        prevRuleMatch = ruleMatch;\n-        continue;\n-      }\n+            if (ruleMatch.getFromPos() >= prevRuleMatch.getToPos()) {\n+                cleanList.add(prevRuleMatch);\n+                prevRuleMatch = ruleMatch;\n+                continue;\n+            }\n       // overlapping\n-      int currentPriority = language.getRulePriority(ruleMatch.getRule());\n-      int prevPriority = language.getRulePriority(prevRuleMatch.getRule());\n-      if (currentPriority == prevPriority) {\n+            int currentPriority = language.getRulePriority(ruleMatch.getRule());\n+            int prevPriority = language.getRulePriority(prevRuleMatch.getRule());\n+            if (currentPriority == prevPriority) {\n         // take the longest error:\n-        currentPriority = ruleMatch.getToPos() - ruleMatch.getFromPos();\n-        prevPriority = prevRuleMatch.getToPos() - prevRuleMatch.getFromPos();\n-      }\n-      if (currentPriority == prevPriority) {\n-        currentPriority++; // take the last one (to keep the current results in the web UI) \n-      }\n-      if (currentPriority > prevPriority) {\n-        prevRuleMatch = ruleMatch;\n-      }\n-    }\n+                currentPriority = ruleMatch.getToPos() - ruleMatch.getFromPos();\n+                prevPriority = prevRuleMatch.getToPos() - prevRuleMatch.getFromPos();\n+            }\n+            if (currentPriority == prevPriority) {\n+                currentPriority++; // take the last one (to keep the current results in the web UI) \n+            }\n+            if (currentPriority > prevPriority) {\n+                prevRuleMatch = ruleMatch;\n+            }\n+        }\n     //last match\n-    if (prevRuleMatch != null) {\n-      cleanList.add(prevRuleMatch);\n+        if (prevRuleMatch != null) {\n+            cleanList.add(prevRuleMatch);\n+        }\n+        return cleanList;\n     }\n-    return cleanList;\n-  }\n-\n-  \n }\n\\ No newline at end of file\n",
            "diff_size": 48
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/81/CleanOverlappingFilter.java\nindex 79db6d0a01e..4cce908d774 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_random/81/CleanOverlappingFilter.java\n@@ -41,7 +41,7 @@ public class CleanOverlappingFilter implements RuleMatchFilter {\n   public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n     List<RuleMatch> cleanList = new ArrayList<>();\n     RuleMatch prevRuleMatch = null;\n-    for(RuleMatch ruleMatch: ruleMatches) {\n+    for (RuleMatch ruleMatch: ruleMatches) {\n       if (prevRuleMatch == null) {  // first item\n         prevRuleMatch = ruleMatch;\n         continue;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/81/CleanOverlappingFilter.java\nindex 79db6d0a01e..4cce908d774 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/errored/1/81/CleanOverlappingFilter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/EMResearch-EMB/styler_three_grams/81/CleanOverlappingFilter.java\n@@ -41,7 +41,7 @@ public class CleanOverlappingFilter implements RuleMatchFilter {\n   public final List<RuleMatch> filter(List<RuleMatch> ruleMatches) {\n     List<RuleMatch> cleanList = new ArrayList<>();\n     RuleMatch prevRuleMatch = null;\n-    for(RuleMatch ruleMatch: ruleMatches) {\n+    for (RuleMatch ruleMatch: ruleMatches) {\n       if (prevRuleMatch == null) {  // first item\n         prevRuleMatch = ruleMatch;\n         continue;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}