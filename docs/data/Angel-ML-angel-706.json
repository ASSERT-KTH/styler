{
    "project_name": "Angel-ML-angel",
    "error_id": "706",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/706/ConfUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/706/ConfUtils.java\nindex 2d6d57dd11c..e7d559f6590 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/706/ConfUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/706/ConfUtils.java\n@@ -13,9 +13,8 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\r\n  * the License.\r\n  *\r\n- */\r\n-\r\n-\r\n+ */\n+\n package com.tencent.angel.utils;\r\n \r\n import com.tencent.angel.conf.AngelConf;\r\n@@ -161,9 +160,8 @@ public class ConfUtils {\n     return kvMap;\r\n   }\r\n \r\n-  private static void expandEnv(Configuration conf) {\r\n-\r\n-    Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\r\n+  private static void expandEnv(Configuration conf) {\n+  Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\r\n     Pattern pattern = Pattern.compile(\"\\\\$\\\\{[\\\\p{Alnum}\\\\p{Punct}]+?\\\\}\");\r\n \r\n     for (Map.Entry<String, String> kv : kvs.entrySet()) {\r\n@@ -210,8 +208,8 @@ public class ConfUtils {\n   }\r\n \r\n   public static void addResourceFiles(Configuration conf, String fileNames)\r\n-      throws MalformedURLException {\r\n-    String[] fileNameArray = fileNames.split(\",\");\r\n+      throws MalformedURLException {\n+  String[] fileNameArray = fileNames.split(\",\");\r\n     StringBuilder sb = new StringBuilder();\r\n \r\n     for (int i = 0; i < fileNameArray.length; i++) {\r\n@@ -268,4 +266,4 @@ public class ConfUtils {\n       throw new IOException(\"Error, could not add URL to system classloader\", t);\r\n     }\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "215",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/706/ConfUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/706/ConfUtils.java\nindex 2d6d57dd11c..a2cd1bf63fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/706/ConfUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/706/ConfUtils.java\n@@ -16,256 +16,256 @@\n  */\r\n \r\n \r\n-package com.tencent.angel.utils;\r\n-\r\n-import com.tencent.angel.conf.AngelConf;\r\n-import com.tencent.angel.exception.InvalidParameterException;\r\n-import java.io.File;\r\n-import java.io.FileInputStream;\r\n-import java.io.IOException;\r\n-import java.io.InputStream;\r\n-import java.lang.reflect.Method;\r\n-import java.net.MalformedURLException;\r\n-import java.net.URL;\r\n-import java.net.URLClassLoader;\r\n-import java.util.ArrayList;\r\n-import java.util.HashMap;\r\n-import java.util.List;\r\n-import java.util.Map;\r\n-import java.util.Properties;\r\n-import java.util.regex.Matcher;\r\n-import java.util.regex.Pattern;\r\n-import org.apache.commons.logging.Log;\r\n-import org.apache.commons.logging.LogFactory;\r\n-import org.apache.hadoop.conf.Configuration;\r\n-import org.apache.hadoop.fs.Path;\r\n-\r\n-public class ConfUtils {\r\n-\r\n-  private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\r\n-  private static final String angelSysConfFile = \"angel-site.xml\";\r\n-\r\n+package com.tencent.angel.utils;\n+\n+import com.tencent.angel.conf.AngelConf;\n+import com.tencent.angel.exception.InvalidParameterException;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.reflect.Method;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.apache.hadoop.conf.Configuration;\n+import org.apache.hadoop.fs.Path;\n+\n+public class ConfUtils {\n+\n+  private static final Log LOG = LogFactory.getLog(AngelRunJar.class);\n+  private static final String angelSysConfFile = \"angel-site.xml\";\n+\n   public static Configuration initConf(String[] cmdArgs) throws Exception {\r\n-    // Parse cmd parameters\r\n+    // Parse cmd parameters\n     Map<String, String> cmdConfMap = parseArgs(cmdArgs);\r\n \r\n-    // load hadoop configuration\r\n-    final Configuration conf = new Configuration();\r\n-    String hadoopHomePath = System.getenv(\"HADOOP_HOME\");\r\n-    if (hadoopHomePath == null) {\r\n-      LOG.warn(\"HADOOP_HOME is empty.\");\r\n-    } else {\r\n-      conf.addResource(new Path(hadoopHomePath + \"/etc/hadoop/yarn-site.xml\"));\r\n-      conf.addResource(new Path(hadoopHomePath + \"/etc/hadoop/hdfs-site.xml\"));\r\n+    // load hadoop configuration\n+    final Configuration conf = new Configuration();\n+    String hadoopHomePath = System.getenv(\"HADOOP_HOME\");\n+    if (hadoopHomePath == null) {\n+      LOG.warn(\"HADOOP_HOME is empty.\");\n+    } else {\n+      conf.addResource(new Path(hadoopHomePath + \"/etc/hadoop/yarn-site.xml\"));\n+      conf.addResource(new Path(hadoopHomePath + \"/etc/hadoop/hdfs-site.xml\"));\n     }\r\n \r\n-    // load angel system configuration\r\n-    String angelHomePath = System.getenv(\"ANGEL_HOME\");\r\n-    if (angelHomePath == null) {\r\n-      LOG.fatal(\"ANGEL_HOME is empty, please set it first\");\r\n-      throw new InvalidParameterException(\"ANGEL_HOME is empty, please set it first\");\r\n-    }\r\n-    LOG.info(\"angelHomePath conf path=\" + angelHomePath + \"/conf/\" + angelSysConfFile);\r\n-    conf.addResource(new Path(angelHomePath + \"/conf/\" + angelSysConfFile));\r\n+    // load angel system configuration\n+\n+    String angelHomePath = System.getenv(\"ANGEL_HOME\");\n+    if (angelHomePath == null) {\n+      LOG.fatal(\"ANGEL_HOME is empty, please set it first\");\n+      throw new InvalidParameterException(\"ANGEL_HOME is empty, please set it first\");\n+    }\n+    LOG.info(\"angelHomePath conf path=\" + angelHomePath + \"/conf/\" + angelSysConfFile);\n+    conf.addResource(new Path(angelHomePath + \"/conf/\" + angelSysConfFile));\n     LOG.info(\"load system config file success\");\r\n \r\n     // load user configuration:\r\n-    // load user config file\r\n-    String jobConfFile = cmdConfMap.get(AngelConf.ANGEL_APP_CONFIG_FILE);\r\n-    if (jobConfFile != null) {\r\n-      LOG.info(\"user app config file \" + jobConfFile);\r\n-      conf.addResource(new Path(jobConfFile));\r\n-    } else {\r\n-      jobConfFile = conf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\r\n-      if (jobConfFile != null) {\r\n-        LOG.info(\"user app config file \" + jobConfFile);\r\n-        conf.addResource(new Path(jobConfFile));\r\n-      }\r\n-    }\r\n-\r\n-    // load command line parameters\r\n-    if (cmdConfMap != null && !cmdConfMap.isEmpty()) {\r\n-      for (Map.Entry<String, String> entry : cmdConfMap.entrySet()) {\r\n-        conf.set(entry.getKey(), entry.getValue());\r\n-      }\r\n+    // load user config file\n+    String jobConfFile = cmdConfMap.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n+    if (jobConfFile != null) {\n+      LOG.info(\"user app config file \" + jobConfFile);\n+      conf.addResource(new Path(jobConfFile));\n+    } else {\n+      jobConfFile = conf.get(AngelConf.ANGEL_APP_CONFIG_FILE);\n+      if (jobConfFile != null) {\n+        LOG.info(\"user app config file \" + jobConfFile);\n+        conf.addResource(new Path(jobConfFile));\n+      }\n     }\r\n \r\n-    // load user job resource files\r\n-    String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\r\n-    if (userResourceFiles != null) {\r\n-      addResourceFiles(conf, userResourceFiles);\r\n+    // load command line parameters\n+\n+    if (cmdConfMap != null && !cmdConfMap.isEmpty()) {\n+      for (Map.Entry<String, String> entry : cmdConfMap.entrySet()) {\n+        conf.set(entry.getKey(), entry.getValue());\n+      }\n     }\r\n \r\n-    // load ml conf file for graph based algorithm\r\n-    String mlConfFiles = conf.get(AngelConf.ANGEL_ML_CONF);\r\n-    if (mlConfFiles != null && mlConfFiles.length() != 0) {\r\n-      addResourceFiles(conf, mlConfFiles);\r\n+    // load user job resource files\n+\n+    String userResourceFiles = conf.get(AngelConf.ANGEL_APP_USER_RESOURCE_FILES);\n+    if (userResourceFiles != null) {\n+      addResourceFiles(conf, userResourceFiles);\n     }\r\n \r\n-    // load user job jar if it exist\r\n-    String jobJar = conf.get(AngelConf.ANGEL_JOB_JAR);\r\n-    if (jobJar != null) {\r\n-      loadJar(jobJar);\r\n-      addResourceFiles(conf, jobJar);\r\n+    // load ml conf file for graph based algorithm\n+\n+    String mlConfFiles = conf.get(AngelConf.ANGEL_ML_CONF);\n+    if (mlConfFiles != null && mlConfFiles.length() != 0) {\n+      addResourceFiles(conf, mlConfFiles);\n     }\r\n \r\n-    // Expand the environment variable\r\n-    try {\r\n-      expandEnv(conf);\r\n-    } catch (Exception x) {\r\n-      LOG.warn(\"expand env in configuration failed.\", x);\r\n+    // load user job jar if it exist\n+\n+    String jobJar = conf.get(AngelConf.ANGEL_JOB_JAR);\n+    if (jobJar != null) {\n+      loadJar(jobJar);\n+      addResourceFiles(conf, jobJar);\n     }\r\n-    return conf;\r\n-  }\r\n \r\n-  private static Map<String, String> parseArgs(String[] args) throws InvalidParameterException {\r\n-    Map<String, String> kvMap = new HashMap<String, String>();\r\n-\r\n-    int seg = 0;\r\n-    for (int i = 0; i < args.length; i++) {\r\n-      if (args[i].startsWith(\"-D\")) {\r\n-        seg = args[i].indexOf(\"=\");\r\n-        if (seg > 0) {\r\n-          kvMap.put(args[i].substring(2, seg), args[i].substring(seg + 1));\r\n-        } else {\r\n-          throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\r\n-        }\r\n-      } else if (args[i].startsWith(\"--\")) {\r\n-        String key = args[i].substring(2);\r\n-        i++;\r\n-        if (i < args.length) {\r\n-          String value = args[i];\r\n-          kvMap.put(key, value);\r\n-        } else {\r\n-          throw new InvalidParameterException(\"there is no value for parameter \" + key);\r\n-        }\r\n-      } else if ((seg = args[i].indexOf(\":\")) > 0) {\r\n-        kvMap.put(args[i].substring(0, seg), args[i].substring(seg + 1));\r\n-      } else {\r\n-        switch (args[i]) {\r\n-          case \"jar\": {\r\n-            if (i == args.length - 1) {\r\n-              throw new InvalidParameterException(\"there must be a jar file after jar commond\");\r\n-            } else {\r\n-              i++;\r\n-              kvMap.put(AngelConf.ANGEL_JOB_JAR, args[i]);\r\n-            }\r\n-            break;\r\n-          }\r\n-          default: {\r\n-            throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\r\n-          }\r\n-        }\r\n-      }\r\n+    // Expand the environment variable\n+    try {\n+      expandEnv(conf);\n+    } catch (Exception x) {\n+      LOG.warn(\"expand env in configuration failed.\", x);\n+    }\n+    return conf;\n+  }\n+\n+  private static Map<String, String> parseArgs(String[] args) throws InvalidParameterException {\n+    Map<String, String> kvMap = new HashMap<String, String>();\n+    int seg = 0;\n+    for (int i = 0; i < args.length; i++) {\n+      if (args[i].startsWith(\"-D\")) {\n+        seg = args[i].indexOf(\"=\");\n+        if (seg > 0) {\n+          kvMap.put(args[i].substring(2, seg), args[i].substring(seg + 1));\n+        } else {\n+          throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n+        }\n+      } else if (args[i].startsWith(\"--\")) {\n+               String key = args[i].substring(2);\n+               i++;\n+               if (i < args.length) {\n+                 String value = args[i];\n+                 kvMap.put(key, value);\n+               } else {\n+                 throw new InvalidParameterException(\"there is no value for parameter \" + key);\n+               }\n+      } else if ((seg = args[i].indexOf(\":\")) > 0) {\n+               kvMap.put(args[i].substring(0, seg), args[i].substring(seg + 1));\n+             } else {\n+               switch (args[i]) {\n+                 case \"jar\": {\n+                   if (i == args.length - 1) {\n+                     throw new InvalidParameterException(\"there must be a jar file after jar commond\");\n+                   } else {\n+                     i++;\n+                     kvMap.put(AngelConf.ANGEL_JOB_JAR, args[i]);\n+                   }\n+                   break;\n+                 }\n+\n+                 default: {\n+                   throw new InvalidParameterException(\"unvalid parameter \" + args[i]);\n+                 }\n+               }\n+             }\n+    }\n+    return kvMap;\n+  }\n+\n+  private static void expandEnv(Configuration conf) {\n+    Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\n+    Pattern pattern = Pattern.compile(\"\\\\$\\\\{[\\\\p{Alnum}\\\\p{Punct}]+?\\\\}\");\n+    for (Map.Entry<String, String> kv : kvs.entrySet()) {\n+      String value = kv.getValue();\n+      Matcher matcher = pattern.matcher(value);\n+      List<String> keys = new ArrayList<String>();\n+      while (matcher.find()) {\n+        String matchedStr = matcher.group();\n+        keys.add(matchedStr.substring(2, matchedStr.length() - 1));\n+      }\n+\n+      int size = keys.size();\n+      for (int i = 0; i < size; i++) {\n+        String envValue = System.getenv(keys.get(i));\n+        if (envValue == null) {\n+          LOG.warn(\"env \" + keys.get(i) + \" is null, please check.\");\n+          continue;\n+        }\n+        value = value.replaceAll(\"\\\\$\\\\{\" + keys.get(i) + \"\\\\}\", envValue);\n+      }\n+      conf.set(kv.getKey(), value);\n     }\r\n-    return kvMap;\r\n-  }\r\n-\r\n-  private static void expandEnv(Configuration conf) {\r\n-\r\n-    Map<String, String> kvs = conf.getValByRegex(\"angel.*\");\r\n-    Pattern pattern = Pattern.compile(\"\\\\$\\\\{[\\\\p{Alnum}\\\\p{Punct}]+?\\\\}\");\r\n-\r\n-    for (Map.Entry<String, String> kv : kvs.entrySet()) {\r\n-      String value = kv.getValue();\r\n-      Matcher matcher = pattern.matcher(value);\r\n-      List<String> keys = new ArrayList<String>();\r\n \r\n-      while (matcher.find()) {\r\n-        String matchedStr = matcher.group();\r\n-        keys.add(matchedStr.substring(2, matchedStr.length() - 1));\r\n-      }\r\n-\r\n-      int size = keys.size();\r\n-      for (int i = 0; i < size; i++) {\r\n-        String envValue = System.getenv(keys.get(i));\r\n-        if (envValue == null) {\r\n-          LOG.warn(\"env \" + keys.get(i) + \" is null, please check.\");\r\n-          continue;\r\n-        }\r\n-        value = value.replaceAll(\"\\\\$\\\\{\" + keys.get(i) + \"\\\\}\", envValue);\r\n-      }\r\n-\r\n-      conf.set(kv.getKey(), value);\r\n-    }\r\n-\r\n-    // Add default fs(local fs) for lib jars.\r\n-    String libJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\r\n-    if (libJars != null) {\r\n-      StringBuilder sb = new StringBuilder();\r\n-      String[] jars = libJars.split(\",\");\r\n-      for (int i = 0; i < jars.length; i++) {\r\n-        if (new Path(jars[i]).isAbsoluteAndSchemeAuthorityNull()) {\r\n-          sb.append(\"file://\").append(jars[i]);\r\n-        } else {\r\n-          sb.append(jars[i]);\r\n-        }\r\n-        if (i != jars.length - 1) {\r\n-          sb.append(\",\");\r\n-        }\r\n-      }\r\n-      conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\r\n-      LOG.info(\"jars loaded: \" + sb.toString());\r\n-    }\r\n-  }\r\n-\r\n-  public static void addResourceFiles(Configuration conf, String fileNames)\r\n-      throws MalformedURLException {\r\n-    String[] fileNameArray = fileNames.split(\",\");\r\n-    StringBuilder sb = new StringBuilder();\r\n-\r\n-    for (int i = 0; i < fileNameArray.length; i++) {\r\n-      Path filePath = new Path(fileNameArray[i]);\r\n-      if (!filePath.isAbsolute()) {\r\n-        String pwd = \"\";\r\n-        File pwdFile = new File(\"\");\r\n-        try {\r\n-          pwd = pwdFile.getAbsolutePath();\r\n-        } catch (Throwable e) {\r\n-          LOG.warn(\"get pwd failed \" + e.getMessage());\r\n-        }\r\n-        LOG.info(\"PWD=\" + pwd);\r\n-\r\n-        sb.append(\"file://\").append(pwd).append(File.separatorChar).append(fileNameArray[i]);\r\n-      } else if (filePath.isAbsoluteAndSchemeAuthorityNull()) {\r\n-        sb.append(\"file://\").append(fileNameArray[i]);\r\n-      } else {\r\n-        sb.append(fileNameArray[i]);\r\n-      }\r\n-      if (i != fileNameArray.length - 1) {\r\n-        sb.append(\",\");\r\n-      }\r\n-    }\r\n-\r\n-    String addJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\r\n-\r\n-    if (addJars == null || addJars.trim().isEmpty()) {\r\n-      conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\r\n-    } else {\r\n-      conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString() + \",\" + addJars);\r\n-    }\r\n-  }\r\n-\r\n-  public static void addResourceProperties(Configuration conf, String fileName) throws IOException {\r\n-    Properties properties = new Properties();\r\n-    InputStream inStream = new FileInputStream(fileName);\r\n-    properties.load(inStream);\r\n-    for (Map.Entry<Object, Object> confTuple : properties.entrySet()) {\r\n-      String key = confTuple.getKey().toString();\r\n-      String value = confTuple.getValue().toString();\r\n-      conf.set(key, value);\r\n-    }\r\n-  }\r\n-\r\n-  private static void loadJar(String jarFile) throws IOException {\r\n-    URLClassLoader sysloader = (URLClassLoader) ClassLoader.getSystemClassLoader();\r\n-    Class<? extends URLClassLoader> sysclass = URLClassLoader.class;\r\n-    try {\r\n-      Method method = sysclass.getDeclaredMethod(\"addURL\", URL.class);\r\n-      method.setAccessible(true);\r\n-      method.invoke(sysloader, new File(jarFile).toURI().toURL());\r\n-    } catch (Throwable t) {\r\n-      throw new IOException(\"Error, could not add URL to system classloader\", t);\r\n-    }\r\n-  }\r\n-}\r\n+    // Add default fs(local fs) for lib jars.\n+\n+    String libJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n+    if (libJars != null) {\n+      StringBuilder sb = new StringBuilder();\n+      String[] jars = libJars.split(\",\");\n+      for (int i = 0; i < jars.length; i++) {\n+        if (new Path(jars[i]).isAbsoluteAndSchemeAuthorityNull()) {\n+          sb.append(\"file://\").append(jars[i]);\n+        } else {\n+          sb.append(jars[i]);\n+        }\n+\n+        if (i != jars.length - 1) {\n+          sb.append(\",\");\n+        }\n+      }\n+      conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\n+      LOG.info(\"jars loaded: \" + sb.toString());\n+    }\n+  }\n+\n+  public static void addResourceFiles(Configuration conf, String fileNames) throws MalformedURLException {\n+    String[] fileNameArray = fileNames.split(\",\");\n+    StringBuilder sb = new StringBuilder();\n+    for (int i = 0; i < fileNameArray.length; i++) {\n+      Path filePath = new Path(fileNameArray[i]);\n+      if (!filePath.isAbsolute()) {\n+        String pwd = \"\";\n+        File pwdFile = new File(\"\");\n+        try {\n+          pwd = pwdFile.getAbsolutePath();\n+        } catch (Throwable e) {\n+          LOG.warn(\"get pwd failed \" + e.getMessage());\n+        }\n+        LOG.info(\"PWD=\" + pwd);\n+        sb.append(\"file://\").append(pwd).append(File.separatorChar).append(fileNameArray[i]);\n+      } else if (filePath.isAbsoluteAndSchemeAuthorityNull()) {\n+               sb.append(\"file://\").append(fileNameArray[i]);\n+      } else {\n+               sb.append(fileNameArray[i]);\n+      }\n+\n+      if (i != fileNameArray.length - 1) {\n+        sb.append(\",\");\n+      }\n+    }\n+\n+    String addJars = conf.get(AngelConf.ANGEL_JOB_LIBJARS);\n+    if (addJars == null || addJars.trim().isEmpty()) {\n+      conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString());\n+    } else {\n+      conf.set(AngelConf.ANGEL_JOB_LIBJARS, sb.toString() + \",\" + addJars);\n+    }\n+  }\n+\n+  public static void addResourceProperties(Configuration conf, String fileName) throws IOException {\n+    Properties properties = new Properties();\n+    InputStream inStream = new FileInputStream(fileName);\n+    properties.load(inStream);\n+    for (Map.Entry<Object, Object> confTuple : properties.entrySet()) {\n+      String key = confTuple.getKey().toString();\n+      String value = confTuple.getValue().toString();\n+      conf.set(key, value);\n+    }\n+  }\n+\n+  private static void loadJar(String jarFile) throws IOException {\n+    URLClassLoader sysloader = (URLClassLoader) ClassLoader.getSystemClassLoader();\n+    Class<? extends URLClassLoader> sysclass = URLClassLoader.class;\n+    try {\n+      Method method = sysclass.getDeclaredMethod(\"addURL\", URL.class);\n+      method.setAccessible(true);\n+      method.invoke(sysloader, new File(jarFile).toURI().toURL());\n+    } catch (Throwable t) {\n+      throw new IOException(\"Error, could not add URL to system classloader\", t);\n+    }\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 273
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}