{
    "project_name": "decorators-squad-eo-yaml",
    "error_id": "15",
    "information": {
        "errors": [
            {
                "line": "102",
                "column": "12",
                "severity": "error",
                "message": "'for' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "            alfa.yamlMapping(\"alfa\").string(\"key2\"), Matchers.equalTo(\"value2\")\n        );\n        for(final YamlNode value : sequence.values()) {\n            System.out.println(value.type());\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/15/ReadYamlSequenceTest.java\nindex 442cbac4308..219510af474 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler/15/ReadYamlSequenceTest.java\n@@ -99,7 +99,7 @@ public final class ReadYamlSequenceTest {\n         MatcherAssert.assertThat(\n             alfa.yamlMapping(\"alfa\").string(\"key2\"), Matchers.equalTo(\"value2\")\n         );\n-        for(final YamlNode value : sequence.values()) {\n+        for (final YamlNode value : sequence.values()) {\n             System.out.println(value.type());\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/15/ReadYamlSequenceTest.java\nindex 442cbac4308..d586fed3562 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/15/ReadYamlSequenceTest.java\n@@ -1,17 +1,17 @@\n /**\n  * Copyright (c) 2016-2020, Mihai Emil Andronache\n  * All rights reserved.\n- *\n+ * <p>\n  * Redistribution and use in source and binary forms, with or without\n- *  modification, are permitted provided that the following conditions are met:\n+ * modification, are permitted provided that the following conditions are met:\n  * Redistributions of source code must retain the above copyright notice, this\n- *  list of conditions and the following disclaimer.\n- *  Redistributions in binary form must reproduce the above copyright notice,\n- *  this list of conditions and the following disclaimer in the documentation\n- *  and/or other materials provided with the distribution.\n+ * list of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n  * Neither the name of the copyright holder nor the names of its\n- *  contributors may be used to endorse or promote products derived from\n- *  this software without specific prior written permission.\n+ * contributors may be used to endorse or promote products derived from\n+ * this software without specific prior written permission.\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n@@ -25,6 +25,7 @@\n  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n  * SUCH DAMAGE.\n  */\n+\n package com.amihaiemil.eoyaml;\n \n import java.util.ArrayList;\n@@ -51,7 +52,7 @@ public final class ReadYamlSequenceTest {\n      * The YamlMapping starts after the dash line.\n      */\n     @Test\n-    public void returnsYamlMappingFromIndex(){\n+    public void returnsYamlMappingFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -78,7 +79,7 @@ public final class ReadYamlSequenceTest {\n      * as value of this key.\n      */\n     @Test\n-    public void returnsYamlMappingWithMappingValueStartingAtDash(){\n+    public void returnsYamlMappingWithMappingValueStartingAtDash() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- scalar0\", 0));\n         lines.add(new RtYamlLine(\"- scalar1\", 1));\n@@ -99,7 +100,7 @@ public final class ReadYamlSequenceTest {\n         MatcherAssert.assertThat(\n             alfa.yamlMapping(\"alfa\").string(\"key2\"), Matchers.equalTo(\"value2\")\n         );\n-        for(final YamlNode value : sequence.values()) {\n+        for (final YamlNode value : sequence.values()) {\n             System.out.println(value.type());\n         }\n     }\n@@ -109,7 +110,7 @@ public final class ReadYamlSequenceTest {\n      * at the dash line.\n      */\n     @Test\n-    public void returnsYamlMappingWithScalarValuesStartingAtDash(){\n+    public void returnsYamlMappingWithScalarValuesStartingAtDash() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- scalar0\", 0));\n         lines.add(new RtYamlLine(\"- scalar1\", 1));\n@@ -118,7 +119,7 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"  omega: value\", 4));\n         lines.add(new RtYamlLine(\"- scalar2\", 5));\n         final YamlSequence sequence = new ReadYamlSequence(\n-                new AllYamlLines(lines)\n+            new AllYamlLines(lines)\n         );\n         System.out.println(sequence);\n         final YamlMapping dashMap = sequence.yamlMapping(2);\n@@ -141,7 +142,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return the YamlSequence from a given index.\n      */\n     @Test\n-    public void returnsYamlSequenceFromIndex(){\n+    public void returnsYamlSequenceFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  - rultor\", 1));\n@@ -164,7 +165,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return the plain scalar string from a given index.\n      */\n     @Test\n-    public void returnsStringFromIndex(){\n+    public void returnsStringFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- rultor\", 0));\n         lines.add(new RtYamlLine(\"- 0pdd\", 1));\n@@ -182,7 +183,7 @@ public final class ReadYamlSequenceTest {\n      */\n     @Test\n     @Ignore\n-    public void returnsFoldedBlockScalarStringFromIndex(){\n+    public void returnsFoldedBlockScalarStringFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- rultor\", 0));\n         lines.add(new RtYamlLine(\"- 0pdd\", 1));\n@@ -205,7 +206,7 @@ public final class ReadYamlSequenceTest {\n      * string lines from a given index.\n      */\n     @Test\n-    public void returnsLiteralBlockScalarFromIndex(){\n+    public void returnsLiteralBlockScalarFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- rultor\", 0));\n         lines.add(new RtYamlLine(\"- 0pdd\", 1));\n@@ -240,7 +241,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return its size.\n      */\n     @Test\n-    public void returnsSize(){\n+    public void returnsSize() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -260,7 +261,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can be iterated.\n      */\n     @Test\n-    public void readSequenceIsIterable(){\n+    public void readSequenceIsIterable() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -281,7 +282,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return null on a misread scalar.\n      */\n     @Test\n-    public void returnsNullOnMisreadScalar(){\n+    public void returnsNullOnMisreadScalar() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -303,7 +304,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return null on a misread sequence.\n      */\n     @Test\n-    public void returnsNullOnMisreadSequence(){\n+    public void returnsNullOnMisreadSequence() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -325,7 +326,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return null on a misread sequence.\n      */\n     @Test\n-    public void returnsNullOnMisreadMapping(){\n+    public void returnsNullOnMisreadMapping() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -348,7 +349,7 @@ public final class ReadYamlSequenceTest {\n      * exist.\n      */\n     @Test\n-    public void returnsNullOnOutOfIndex(){\n+    public void returnsNullOnOutOfIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -385,12 +386,12 @@ public final class ReadYamlSequenceTest {\n         final YamlSequence seq = new ReadYamlSequence(new AllYamlLines(lines));\n         Iterator<YamlNode> iterator = seq.values().iterator();\n         MatcherAssert.assertThat(\n-                iterator.next().asMapping(),\n-                Matchers.equalTo(Yaml.createYamlMappingBuilder().build())\n+            iterator.next().asMapping(),\n+            Matchers.equalTo(Yaml.createYamlMappingBuilder().build())\n         );\n         MatcherAssert.assertThat(\n-                iterator.next().asSequence(),\n-                Matchers.equalTo(Yaml.createYamlSequenceBuilder().build())\n+            iterator.next().asSequence(),\n+            Matchers.equalTo(Yaml.createYamlSequenceBuilder().build())\n         );\n     }\n \n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "102",
                    "column": "12",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/15/ReadYamlSequenceTest.java\nindex 442cbac4308..5f45110f2d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/15/ReadYamlSequenceTest.java\n@@ -51,7 +51,7 @@ public final class ReadYamlSequenceTest {\n      * The YamlMapping starts after the dash line.\n      */\n     @Test\n-    public void returnsYamlMappingFromIndex(){\n+    public void returnsYamlMappingFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -78,7 +78,7 @@ public final class ReadYamlSequenceTest {\n      * as value of this key.\n      */\n     @Test\n-    public void returnsYamlMappingWithMappingValueStartingAtDash(){\n+    public void returnsYamlMappingWithMappingValueStartingAtDash() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- scalar0\", 0));\n         lines.add(new RtYamlLine(\"- scalar1\", 1));\n@@ -109,7 +109,7 @@ public final class ReadYamlSequenceTest {\n      * at the dash line.\n      */\n     @Test\n-    public void returnsYamlMappingWithScalarValuesStartingAtDash(){\n+    public void returnsYamlMappingWithScalarValuesStartingAtDash() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- scalar0\", 0));\n         lines.add(new RtYamlLine(\"- scalar1\", 1));\n@@ -118,7 +118,7 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"  omega: value\", 4));\n         lines.add(new RtYamlLine(\"- scalar2\", 5));\n         final YamlSequence sequence = new ReadYamlSequence(\n-                new AllYamlLines(lines)\n+    new AllYamlLines(lines)\n         );\n         System.out.println(sequence);\n         final YamlMapping dashMap = sequence.yamlMapping(2);\n@@ -141,7 +141,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return the YamlSequence from a given index.\n      */\n     @Test\n-    public void returnsYamlSequenceFromIndex(){\n+    public void returnsYamlSequenceFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  - rultor\", 1));\n@@ -164,7 +164,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return the plain scalar string from a given index.\n      */\n     @Test\n-    public void returnsStringFromIndex(){\n+    public void returnsStringFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- rultor\", 0));\n         lines.add(new RtYamlLine(\"- 0pdd\", 1));\n@@ -182,7 +182,7 @@ public final class ReadYamlSequenceTest {\n      */\n     @Test\n     @Ignore\n-    public void returnsFoldedBlockScalarStringFromIndex(){\n+    public void returnsFoldedBlockScalarStringFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- rultor\", 0));\n         lines.add(new RtYamlLine(\"- 0pdd\", 1));\n@@ -205,7 +205,7 @@ public final class ReadYamlSequenceTest {\n      * string lines from a given index.\n      */\n     @Test\n-    public void returnsLiteralBlockScalarFromIndex(){\n+    public void returnsLiteralBlockScalarFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- rultor\", 0));\n         lines.add(new RtYamlLine(\"- 0pdd\", 1));\n@@ -240,7 +240,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return its size.\n      */\n     @Test\n-    public void returnsSize(){\n+    public void returnsSize() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -260,7 +260,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can be iterated.\n      */\n     @Test\n-    public void readSequenceIsIterable(){\n+    public void readSequenceIsIterable() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -281,7 +281,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return null on a misread scalar.\n      */\n     @Test\n-    public void returnsNullOnMisreadScalar(){\n+    public void returnsNullOnMisreadScalar() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -303,7 +303,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return null on a misread sequence.\n      */\n     @Test\n-    public void returnsNullOnMisreadSequence(){\n+    public void returnsNullOnMisreadSequence() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -325,7 +325,7 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return null on a misread sequence.\n      */\n     @Test\n-    public void returnsNullOnMisreadMapping(){\n+    public void returnsNullOnMisreadMapping() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -348,7 +348,7 @@ public final class ReadYamlSequenceTest {\n      * exist.\n      */\n     @Test\n-    public void returnsNullOnOutOfIndex(){\n+    public void returnsNullOnOutOfIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -384,12 +384,10 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"- []\", 1));\n         final YamlSequence seq = new ReadYamlSequence(new AllYamlLines(lines));\n         Iterator<YamlNode> iterator = seq.values().iterator();\n-        MatcherAssert.assertThat(\n-                iterator.next().asMapping(),\n+        MatcherAssert.assertThat(iterator.next().asMapping(),\n                 Matchers.equalTo(Yaml.createYamlMappingBuilder().build())\n         );\n-        MatcherAssert.assertThat(\n-                iterator.next().asSequence(),\n+        MatcherAssert.assertThat(iterator.next().asSequence(),\n                 Matchers.equalTo(Yaml.createYamlSequenceBuilder().build())\n         );\n     }\n@@ -405,4 +403,4 @@ public final class ReadYamlSequenceTest {\n         );\n         MatcherAssert.assertThat(sequence.toString(), Matchers.isEmptyString());\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "'alfa' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "78",
                    "severity": "error",
                    "message": "'\"alfa\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "79",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "'\"value\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "110",
                    "severity": "error",
                    "message": "'alfa' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "111",
                    "severity": "error",
                    "message": "'\"alfa\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "112",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "113",
                    "severity": "error",
                    "message": "'\"value\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "114",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "'alfa' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "117",
                    "severity": "error",
                    "message": "'\"alfa\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "118",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "119",
                    "severity": "error",
                    "message": "'\"value2\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "120",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "228",
                    "severity": "error",
                    "message": "'sequence' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "229",
                    "severity": "error",
                    "message": "'2' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "230",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "'\"first second\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "232",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "416",
                    "severity": "error",
                    "message": "'iterator' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "417",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "418",
                    "severity": "error",
                    "message": "'Yaml' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "419",
                    "severity": "error",
                    "message": "')' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "420",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "422",
                    "severity": "error",
                    "message": "'iterator' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "423",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "424",
                    "severity": "error",
                    "message": "'Yaml' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "425",
                    "severity": "error",
                    "message": "')' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "426",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/15/ReadYamlSequenceTest.java\nindex 442cbac4308..759ece3db51 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/15/ReadYamlSequenceTest.java\n@@ -31,7 +31,6 @@ import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n import java.util.List;\n-\n import org.hamcrest.MatcherAssert;\n import org.hamcrest.Matchers;\n import org.junit.Ignore;\n@@ -44,14 +43,18 @@ import org.junit.Test;\n  * @since 1.0.0\n  *\n  */\n+\n+\n public final class ReadYamlSequenceTest {\n \n     /**\n      * ReadYamlSequence can return the YamlMapping from a given index.\n      * The YamlMapping starts after the dash line.\n      */\n+\n+\n     @Test\n-    public void returnsYamlMappingFromIndex(){\n+    public void returnsYamlMappingFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -61,15 +64,21 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"    fourth: some\", 5));\n         lines.add(new RtYamlLine(\"    key: value\", 6));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n         System.out.println(sequence);\n-        final YamlMapping alfa = sequence.yamlMapping(2);\n+        final YamlMapping alfa = sequence.yamlMapping(\n+                                     2);\n         MatcherAssert.assertThat(alfa, Matchers.notNullValue());\n-        MatcherAssert.assertThat(alfa, Matchers.instanceOf(YamlMapping.class));\n+        MatcherAssert.assertThat(alfa, Matchers.instanceOf(\n+                                     YamlMapping.class\n+                                 ));\n         MatcherAssert.assertThat(\n-            alfa.yamlMapping(\"alfa\").string(\"key\"), Matchers.equalTo(\"value\")\n-        );\n+alfa.yamlMapping(\n+    \"alfa\").string(\"key\"),\n+Matchers.equalTo(\n+    \"value\")\n+);\n     }\n \n     /**\n@@ -77,8 +86,9 @@ public final class ReadYamlSequenceTest {\n      * at the dash line. The YamlMapping has a scalar key and another mapping\n      * as value of this key.\n      */\n+\n     @Test\n-    public void returnsYamlMappingWithMappingValueStartingAtDash(){\n+    public void returnsYamlMappingWithMappingValueStartingAtDash() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- scalar0\", 0));\n         lines.add(new RtYamlLine(\"- scalar1\", 1));\n@@ -87,19 +97,28 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"    key2: value2\", 4));\n         lines.add(new RtYamlLine(\"- scalar2\", 5));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n         System.out.println(sequence);\n-        final YamlMapping alfa = sequence.yamlMapping(2);\n+        final YamlMapping alfa = sequence.yamlMapping(\n+                                     2);\n         MatcherAssert.assertThat(alfa, Matchers.notNullValue());\n-        MatcherAssert.assertThat(alfa, Matchers.instanceOf(YamlMapping.class));\n+        MatcherAssert.assertThat(alfa, Matchers.instanceOf(\n+                                     YamlMapping.class\n+                                 ));\n         MatcherAssert.assertThat(\n-            alfa.yamlMapping(\"alfa\").string(\"key\"), Matchers.equalTo(\"value\")\n-        );\n+alfa.yamlMapping(\n+    \"alfa\").string(\"key\"),\n+Matchers.equalTo(\n+    \"value\")\n+);\n         MatcherAssert.assertThat(\n-            alfa.yamlMapping(\"alfa\").string(\"key2\"), Matchers.equalTo(\"value2\")\n-        );\n-        for(final YamlNode value : sequence.values()) {\n+alfa.yamlMapping(\n+    \"alfa\").string(\"key2\"),\n+Matchers.equalTo(\n+    \"value2\")\n+);\n+        for (final YamlNode value : sequence.values()) {\n             System.out.println(value.type());\n         }\n     }\n@@ -108,8 +127,9 @@ public final class ReadYamlSequenceTest {\n      * ReadYamlSequence can return the YamlMapping which starts right\n      * at the dash line.\n      */\n+\n     @Test\n-    public void returnsYamlMappingWithScalarValuesStartingAtDash(){\n+    public void returnsYamlMappingWithScalarValuesStartingAtDash() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- scalar0\", 0));\n         lines.add(new RtYamlLine(\"- scalar1\", 1));\n@@ -118,30 +138,32 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"  omega: value\", 4));\n         lines.add(new RtYamlLine(\"- scalar2\", 5));\n         final YamlSequence sequence = new ReadYamlSequence(\n-                new AllYamlLines(lines)\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n         System.out.println(sequence);\n-        final YamlMapping dashMap = sequence.yamlMapping(2);\n+        final YamlMapping dashMap = sequence.yamlMapping(\n+                                        2);\n         MatcherAssert.assertThat(dashMap, Matchers.notNullValue());\n-        MatcherAssert.assertThat(\n-            dashMap, Matchers.instanceOf(YamlMapping.class)\n-        );\n-        MatcherAssert.assertThat(\n-            dashMap.string(\"alfa\"), Matchers.equalTo(\"beta\")\n-        );\n-        MatcherAssert.assertThat(\n-            dashMap.string(\"teta\"), Matchers.equalTo(\"gama\")\n-        );\n-        MatcherAssert.assertThat(\n-            dashMap.string(\"omega\"), Matchers.equalTo(\"value\")\n-        );\n+        MatcherAssert.assertThat(dashMap, Matchers.instanceOf(\n+                                     YamlMapping.class\n+                                 ));\n+        MatcherAssert.assertThat(dashMap.string(\n+                                     \"alfa\"), Matchers.equalTo(\n+                                     \"beta\"));\n+        MatcherAssert.assertThat(dashMap.string(\n+                                     \"teta\"), Matchers.equalTo(\n+                                     \"gama\"));\n+        MatcherAssert.assertThat(dashMap.string(\n+                                     \"omega\"), Matchers.equalTo(\n+                                     \"value\"));\n     }\n \n     /**\n      * ReadYamlSequence can return the YamlSequence from a given index.\n      */\n+\n     @Test\n-    public void returnsYamlSequenceFromIndex(){\n+    public void returnsYamlSequenceFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  - rultor\", 1));\n@@ -149,40 +171,48 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"- scalar\", 3));\n         lines.add(new RtYamlLine(\"- otherScalar\", 4));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n         System.out.println(sequence);\n-        final YamlSequence devops = sequence.yamlSequence(0);\n+        final YamlSequence devops = sequence.yamlSequence(\n+                                        0);\n         MatcherAssert.assertThat(devops, Matchers.notNullValue());\n-        MatcherAssert.assertThat(\n-            devops, Matchers.instanceOf(YamlSequence.class)\n-        );\n-        MatcherAssert.assertThat(devops.size(), Matchers.equalTo(2));\n+        MatcherAssert.assertThat(devops, Matchers.instanceOf(\n+                                     YamlSequence.class\n+                                 ));\n+        MatcherAssert.assertThat(devops.size(), Matchers.equalTo(\n+                                     2));\n     }\n \n     /**\n      * ReadYamlSequence can return the plain scalar string from a given index.\n      */\n+\n     @Test\n-    public void returnsStringFromIndex(){\n+    public void returnsStringFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- rultor\", 0));\n         lines.add(new RtYamlLine(\"- 0pdd\", 1));\n         final YamlSequence devops = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n+                                        new AllYamlLines(lines)\n+                                    );\n         System.out.println(devops);\n-        MatcherAssert.assertThat(devops.string(0), Matchers.equalTo(\"rultor\"));\n-        MatcherAssert.assertThat(devops.string(1), Matchers.equalTo(\"0pdd\"));\n+        MatcherAssert.assertThat(devops.string(\n+                                     0), Matchers.equalTo(\n+                                     \"rultor\"));\n+        MatcherAssert.assertThat(devops.string(\n+                                     1), Matchers.equalTo(\n+                                     \"0pdd\"));\n     }\n \n     /**\n      * ReadYamlSequence can return the folded block scalar as a string,\n      * from a given index.\n      */\n+\n     @Test\n     @Ignore\n-    public void returnsFoldedBlockScalarStringFromIndex(){\n+    public void returnsFoldedBlockScalarStringFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- rultor\", 0));\n         lines.add(new RtYamlLine(\"- 0pdd\", 1));\n@@ -191,21 +221,24 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"  second\", 4));\n         lines.add(new RtYamlLine(\"- another\", 5));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n         System.out.println(sequence);\n         MatcherAssert.assertThat(\n-            sequence.foldedBlockScalar(2),\n-            Matchers.equalTo(\"first second\")\n-        );\n+sequence.foldedBlockScalar(\n+    2),\n+Matchers.equalTo(\n+    \"first second\")\n+);\n     }\n \n     /**\n      * ReadYamlSequence can return the folded block scalar as a collection of\n      * string lines from a given index.\n      */\n+\n     @Test\n-    public void returnsLiteralBlockScalarFromIndex(){\n+    public void returnsLiteralBlockScalarFromIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- rultor\", 0));\n         lines.add(new RtYamlLine(\"- 0pdd\", 1));\n@@ -214,33 +247,28 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"  second\", 4));\n         lines.add(new RtYamlLine(\"- another\", 5));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n         System.out.println(sequence);\n-        final Collection<String> literalLines = sequence.literalBlockScalar(2);\n-        MatcherAssert.assertThat(\n-            literalLines.size(),\n-            Matchers.is(2)\n-        );\n+        final Collection<String> literalLines = sequence.literalBlockScalar(\n+                                                    2);\n+        MatcherAssert.assertThat(literalLines.size(), Matchers.is(\n+                                     2));\n         final Iterator<String> linesIt = literalLines.iterator();\n-        MatcherAssert.assertThat(\n-            linesIt.next(),\n-            Matchers.equalTo(\"first\")\n-        );\n-        MatcherAssert.assertThat(\n-            linesIt.next(),\n-            Matchers.equalTo(\"second\")\n-        );\n-        MatcherAssert.assertThat(\n-            sequence.yamlMapping(2), Matchers.nullValue()\n-        );\n+        MatcherAssert.assertThat(linesIt.next(), Matchers.equalTo(\n+                                     \"first\"));\n+        MatcherAssert.assertThat(linesIt.next(), Matchers.equalTo(\n+                                     \"second\"));\n+        MatcherAssert.assertThat(sequence.yamlMapping(\n+                                     2), Matchers.nullValue());\n     }\n \n     /**\n      * ReadYamlSequence can return its size.\n      */\n+\n     @Test\n-    public void returnsSize(){\n+    public void returnsSize() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -250,17 +278,19 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"    fourth: some\", 5));\n         lines.add(new RtYamlLine(\"    key: value\", 6));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n         System.out.println(sequence);\n-        MatcherAssert.assertThat(sequence.size(), Matchers.is(3));\n+        MatcherAssert.assertThat(sequence.size(), Matchers.is(\n+                                     3));\n     }\n \n     /**\n      * ReadYamlSequence can be iterated.\n      */\n+\n     @Test\n-    public void readSequenceIsIterable(){\n+    public void readSequenceIsIterable() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -270,18 +300,22 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"    fourth: some\", 5));\n         lines.add(new RtYamlLine(\"    key: value\", 6));\n         final YamlSequence seq = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n+                                     new AllYamlLines(lines)\n+                                 );\n         System.out.println(seq);\n-        MatcherAssert.assertThat(seq, Matchers.not(Matchers.emptyIterable()));\n-        MatcherAssert.assertThat(seq, Matchers.iterableWithSize(3));\n+        MatcherAssert.assertThat(seq, Matchers.not(\n+                                     Matchers.emptyIterable()\n+                                 ));\n+        MatcherAssert.assertThat(seq, Matchers.iterableWithSize(\n+                                     3));\n     }\n \n     /**\n      * ReadYamlSequence can return null on a misread scalar.\n      */\n+\n     @Test\n-    public void returnsNullOnMisreadScalar(){\n+    public void returnsNullOnMisreadScalar() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -291,19 +325,18 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"    fourth: some\", 5));\n         lines.add(new RtYamlLine(\"    key: value\", 6));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n-        MatcherAssert.assertThat(\n-            sequence.string(0),\n-            Matchers.nullValue()\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n+        MatcherAssert.assertThat(sequence.string(\n+                                     0), Matchers.nullValue());\n     }\n \n     /**\n      * ReadYamlSequence can return null on a misread sequence.\n      */\n+\n     @Test\n-    public void returnsNullOnMisreadSequence(){\n+    public void returnsNullOnMisreadSequence() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -313,19 +346,18 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"    fourth: some\", 5));\n         lines.add(new RtYamlLine(\"    key: value\", 6));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n-        MatcherAssert.assertThat(\n-            sequence.yamlSequence(0),\n-            Matchers.nullValue()\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n+        MatcherAssert.assertThat(sequence.yamlSequence(\n+                                     0), Matchers.nullValue());\n     }\n \n     /**\n      * ReadYamlSequence can return null on a misread sequence.\n      */\n+\n     @Test\n-    public void returnsNullOnMisreadMapping(){\n+    public void returnsNullOnMisreadMapping() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -335,20 +367,19 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"    fourth: some\", 5));\n         lines.add(new RtYamlLine(\"    key: value\", 6));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n-        MatcherAssert.assertThat(\n-            sequence.yamlMapping(1),\n-            Matchers.nullValue()\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n+        MatcherAssert.assertThat(sequence.yamlMapping(\n+                                     1), Matchers.nullValue());\n     }\n \n     /**\n      * ReadYamlSequence can return null if the specified index does not\n      * exist.\n      */\n+\n     @Test\n-    public void returnsNullOnOutOfIndex(){\n+    public void returnsNullOnOutOfIndex() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- \", 0));\n         lines.add(new RtYamlLine(\"  beta: somethingElse\", 1));\n@@ -358,51 +389,56 @@ public final class ReadYamlSequenceTest {\n         lines.add(new RtYamlLine(\"    fourth: some\", 5));\n         lines.add(new RtYamlLine(\"    key: value\", 6));\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(lines)\n-        );\n-        MatcherAssert.assertThat(\n-            sequence.yamlMapping(10),\n-            Matchers.nullValue()\n-        );\n-        MatcherAssert.assertThat(\n-            sequence.string(10),\n-            Matchers.nullValue()\n-        );\n-        MatcherAssert.assertThat(\n-            sequence.yamlSequence(10),\n-            Matchers.nullValue()\n-        );\n+                                          new AllYamlLines(lines)\n+                                      );\n+        MatcherAssert.assertThat(sequence.yamlMapping(\n+                                     10), Matchers.nullValue());\n+        MatcherAssert.assertThat(sequence.string(\n+                                     10), Matchers.nullValue());\n+        MatcherAssert.assertThat(sequence.yamlSequence(\n+                                     10), Matchers.nullValue());\n     }\n \n     /**\n      * ReadYamlSequence returns the correct value for empty maps and sequences.\n      */\n+\n     @Test\n     public void dontTurnEmptyMapsAndArraysIntoStrings() {\n         final List<YamlLine> lines = new ArrayList<>();\n         lines.add(new RtYamlLine(\"- {}\", 0));\n         lines.add(new RtYamlLine(\"- []\", 1));\n-        final YamlSequence seq = new ReadYamlSequence(new AllYamlLines(lines));\n+        final YamlSequence seq = new ReadYamlSequence(\n+                                     new AllYamlLines(lines)\n+                                 );\n         Iterator<YamlNode> iterator = seq.values().iterator();\n         MatcherAssert.assertThat(\n-                iterator.next().asMapping(),\n-                Matchers.equalTo(Yaml.createYamlMappingBuilder().build())\n-        );\n+iterator.next().asMapping(),\n+Matchers.equalTo(\n+    Yaml.createYamlMappingBuilder().build()\n+)\n+);\n         MatcherAssert.assertThat(\n-                iterator.next().asSequence(),\n-                Matchers.equalTo(Yaml.createYamlSequenceBuilder().build())\n-        );\n+iterator.next().asSequence(),\n+Matchers.equalTo(\n+    Yaml.createYamlSequenceBuilder().build()\n+)\n+);\n     }\n \n     /**\n      * An empty ReadYamlSequence can be printed.\n      * @throws Exception if something goes wrong\n      */\n+\n     @Test\n     public void printsEmptyYaml() throws Exception {\n         final YamlSequence sequence = new ReadYamlSequence(\n-            new AllYamlLines(new ArrayList<YamlLine>())\n-        );\n+                                          new AllYamlLines(\n+                                              new ArrayList<YamlLine>()\n+                                          )\n+                                      );\n         MatcherAssert.assertThat(sequence.toString(), Matchers.isEmptyString());\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 182
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/15/ReadYamlSequenceTest.java\nindex 442cbac4308..219510af474 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_random/15/ReadYamlSequenceTest.java\n@@ -99,7 +99,7 @@ public final class ReadYamlSequenceTest {\n         MatcherAssert.assertThat(\n             alfa.yamlMapping(\"alfa\").string(\"key2\"), Matchers.equalTo(\"value2\")\n         );\n-        for(final YamlNode value : sequence.values()) {\n+        for (final YamlNode value : sequence.values()) {\n             System.out.println(value.type());\n         }\n     }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_three_grams/15/ReadYamlSequenceTest.java\nindex 442cbac4308..219510af474 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/15/ReadYamlSequenceTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/styler_three_grams/15/ReadYamlSequenceTest.java\n@@ -99,7 +99,7 @@ public final class ReadYamlSequenceTest {\n         MatcherAssert.assertThat(\n             alfa.yamlMapping(\"alfa\").string(\"key2\"), Matchers.equalTo(\"value2\")\n         );\n-        for(final YamlNode value : sequence.values()) {\n+        for (final YamlNode value : sequence.values()) {\n             System.out.println(value.type());\n         }\n     }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}