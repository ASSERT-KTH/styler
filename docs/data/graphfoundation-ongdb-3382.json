{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3382",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "65",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "182",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "212",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "264",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "285",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "292",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "304",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3382/Arguments.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3382/Arguments.java\nindex 7c9b1df675a..f7fa078563d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3382/Arguments.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3382/Arguments.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.commandline.arguments;\n \n import org.apache.commons.text.WordUtils;\n@@ -48,266 +49,264 @@ import static java.lang.String.format;\n  */\n public class Arguments\n {\n-    public static final Arguments NO_ARGS = new Arguments();\n-    private static final int LINE_LENGTH = 80;\n-    private static final int MIN_RIGHT_COL_WIDTH = 30;\n-    private static final String NEWLINE = System.getProperty( \"line.separator\" );\n-    private final Map<String,NamedArgument> namedArgs;\n-    private final ArrayList<PositionalArgument> positionalArgs;\n-    private Args parsedArgs;\n-\n-    public Arguments()\n+  public static final Arguments NO_ARGS = new Arguments();\n+  private static final int LINE_LENGTH = 80;\n+  private static final int MIN_RIGHT_COL_WIDTH = 30;\n+  private static final String NEWLINE = System.getProperty(\"line.separator\");\n+  private final Map<String, NamedArgument> namedArgs;\n+  private final ArrayList<PositionalArgument> positionalArgs;\n+  private Args parsedArgs;\n+\n+  public Arguments()\n+  {\n+    namedArgs = new LinkedHashMap<>();\n+    positionalArgs = new ArrayList<>();\n+  }\n+\n+  public Arguments withDatabase()\n+  {\n+    return withArgument(new Database());\n+  }\n+\n+  public Arguments withDatabase(String description)\n+  {\n+    return withArgument(new Database(description));\n+  }\n+\n+  public Arguments withAdditionalConfig()\n+  {\n+    return withArgument(new OptionalCanonicalPath(\"additional-config\", \"config-file-path\", \"\",\n+        \"Configuration file to supply additional configuration in.\"));\n+  }\n+\n+  public Arguments withTo(String description)\n+  {\n+    return withArgument(new MandatoryCanonicalPath(\"to\", \"destination-path\", description));\n+  }\n+\n+  public Arguments withOptionalPositionalArgument(int position, String value)\n+  {\n+    return withPositionalArgument(new OptionalPositionalArgument(position, value));\n+  }\n+\n+  public Arguments withMandatoryPositionalArgument(int position, String value)\n+  {\n+    return withPositionalArgument(new MandatoryPositionalArgument(position, value));\n+  }\n+\n+  public Arguments withArgument(NamedArgument namedArgument)\n+  {\n+    namedArgs.put(namedArgument.name(), namedArgument);\n+    return this;\n+  }\n+\n+  public Arguments withPositionalArgument(PositionalArgument arg)\n+  {\n+    positionalArgs.add(arg);\n+    return this;\n+  }\n+\n+  public String usage()\n+  {\n+    StringBuilder sb = new StringBuilder();\n+\n+    if (!namedArgs.isEmpty())\n     {\n-        namedArgs = new LinkedHashMap<>();\n-        positionalArgs = new ArrayList<>();\n+      sb.append(namedArgs.values().stream().map(NamedArgument::usage).collect(Collectors.joining(\" \")));\n     }\n \n-    public Arguments withDatabase()\n+    if (!positionalArgs.isEmpty())\n     {\n-        return withArgument( new Database() );\n+      sb.append(\" \");\n+      positionalArgs.sort(Comparator.comparingInt(PositionalArgument::position));\n+      sb.append(positionalArgs.stream().map(PositionalArgument::usage).collect(Collectors.joining(\" \")));\n     }\n \n-    public Arguments withDatabase( String description )\n-    {\n-        return withArgument( new Database( description ) );\n-    }\n+    return sb.toString().trim();\n+  }\n \n-    public Arguments withAdditionalConfig()\n+  public String description(String text)\n+  {\n+    String wrappedText = wrapText(text, LINE_LENGTH);\n+    if (namedArgs.isEmpty())\n     {\n-        return withArgument( new OptionalCanonicalPath( \"additional-config\", \"config-file-path\", \"\",\n-                \"Configuration file to supply additional configuration in.\" ) );\n+      return wrappedText;\n     }\n \n-    public Arguments withTo( String description )\n+    wrappedText = String.join(NEWLINE + NEWLINE, wrappedText, \"options:\");\n+\n+    //noinspection OptionalGetWithoutIsPresent handled by if-statement above\n+    final int alignLength = namedArgs.values().stream()\n+        .map(a -> a.optionsListing().length())\n+        .reduce(0, Integer::max);\n+\n+    return String.join(NEWLINE, wrappedText,\n+        namedArgs.values().stream()\n+            .map(c -> formatArgumentDescription(alignLength, c))\n+            .collect(Collectors.joining(NEWLINE)));\n+  }\n+\n+  /**\n+   * Original line-endings in the text are respected.\n+   *\n+   * @param text       to wrap\n+   * @param lineLength no line will exceed this length\n+   * @return the text where no line exceeds the specified length\n+   */\n+  public static String wrapText(final String text, final int lineLength)\n+  {\n+    List<String> lines = Arrays.asList(text.split(\"\\r?\\n\"));\n+\n+    return lines.stream()\n+        .map(l ->\n+            l.length() > lineLength ? WordUtils.wrap(l, lineLength) : l)\n+        .collect(Collectors.joining(NEWLINE));\n+  }\n+\n+  public String formatArgumentDescription(final int longestAlignmentLength, final NamedArgument argument)\n+  {\n+    final String left = format(\"  %s\", argument.optionsListing());\n+    final String right;\n+    if (argument instanceof OptionalNamedArg)\n     {\n-        return withArgument( new MandatoryCanonicalPath( \"to\", \"destination-path\", description ) );\n-    }\n-\n-    public Arguments withOptionalPositionalArgument( int position, String value )\n+      right = format(\"%s [default:%s]\", argument.description(),\n+          ((OptionalNamedArg) argument).defaultValue());\n+    } else\n     {\n-        return withPositionalArgument( new OptionalPositionalArgument( position, value ) );\n+      right = argument.description();\n     }\n-\n-    public Arguments withMandatoryPositionalArgument( int position, String value )\n+    // 5 = 2 leading spaces in left + 3 spaces as distance between columns\n+    return rightColumnFormatted(left, right, longestAlignmentLength + 5);\n+  }\n+\n+  public static String rightColumnFormatted(final String leftText, final String rightText, int rightAlignIndex)\n+  {\n+    final int newLineIndent = 6;\n+    int rightWidth = Arguments.LINE_LENGTH - rightAlignIndex;\n+    boolean startOnNewLine = false;\n+    if (rightWidth < MIN_RIGHT_COL_WIDTH)\n     {\n-        return withPositionalArgument( new MandatoryPositionalArgument( position, value ) );\n+      startOnNewLine = true;\n+      rightWidth = LINE_LENGTH - newLineIndent;\n     }\n \n-    public Arguments withArgument( NamedArgument namedArgument )\n-    {\n-        namedArgs.put( namedArgument.name(), namedArgument );\n-        return this;\n-    }\n+    final String[] rightLines = wrapText(rightText, rightWidth).split(NEWLINE);\n \n-    public Arguments withPositionalArgument( PositionalArgument arg )\n-    {\n-        positionalArgs.add( arg );\n-        return this;\n-    }\n-\n-    public String usage()\n-    {\n-        StringBuilder sb = new StringBuilder();\n+    final String fmt = \"%-\" + (startOnNewLine ? newLineIndent : rightAlignIndex) + \"s%s\";\n+    String firstLine = format(fmt, leftText, startOnNewLine ? \"\" : rightLines[0]);\n \n-        if ( !namedArgs.isEmpty() )\n-        {\n-            sb.append( namedArgs.values().stream().map( NamedArgument::usage ).collect( Collectors.joining( \" \" ) ) );\n-        }\n-\n-        if ( !positionalArgs.isEmpty() )\n-        {\n-            sb.append( \" \" );\n-            positionalArgs.sort( Comparator.comparingInt( PositionalArgument::position ) );\n-            sb.append( positionalArgs.stream().map( PositionalArgument::usage ).collect( Collectors.joining( \" \" ) ) );\n-        }\n-\n-        return sb.toString().trim();\n-    }\n+    String rest = Arrays.stream(rightLines)\n+        .skip(startOnNewLine ? 0 : 1)\n+        .map(l -> format(fmt, \"\", l))\n+        .collect(Collectors.joining(NEWLINE));\n \n-    public String description( String text )\n+    if (rest.isEmpty())\n     {\n-        String wrappedText = wrapText( text, LINE_LENGTH );\n-        if ( namedArgs.isEmpty() )\n-        {\n-            return wrappedText;\n-        }\n-\n-        wrappedText = String.join( NEWLINE + NEWLINE, wrappedText, \"options:\" );\n-\n-        //noinspection OptionalGetWithoutIsPresent handled by if-statement above\n-        final int alignLength = namedArgs.values().stream()\n-                .map( a -> a.optionsListing().length() )\n-                .reduce( 0, Integer::max );\n-\n-        return String.join( NEWLINE, wrappedText,\n-                namedArgs.values().stream()\n-                        .map( c -> formatArgumentDescription( alignLength, c ) )\n-                        .collect( Collectors.joining( NEWLINE ) ) );\n-    }\n-\n-    /**\n-     * Original line-endings in the text are respected.\n-     *\n-     * @param text to wrap\n-     * @param lineLength no line will exceed this length\n-     * @return the text where no line exceeds the specified length\n-     */\n-    public static String wrapText( final String text, final int lineLength )\n+      return firstLine;\n+    } else\n     {\n-        List<String> lines = Arrays.asList( text.split( \"\\r?\\n\" ) );\n-\n-        return lines.stream()\n-                .map( l ->\n-                        l.length() > lineLength ? WordUtils.wrap( l, lineLength ) : l )\n-                .collect( Collectors.joining( NEWLINE ) );\n+      return String.join(NEWLINE, firstLine, rest);\n     }\n-\n-    public String formatArgumentDescription( final int longestAlignmentLength, final NamedArgument argument )\n+  }\n+\n+  public Arguments parse(String[] args) throws IncorrectUsage\n+  {\n+    // Get boolean flags\n+    List<String> flags = namedArgs.entrySet().stream()\n+        .filter(e -> e.getValue() instanceof OptionalBooleanArg)\n+        .map(Entry::getKey)\n+        .collect(Collectors.toList());\n+\n+    parsedArgs = Args.withFlags(flags.toArray(new String[flags.size()])).parse(args);\n+    validate();\n+    return this;\n+  }\n+\n+  public String get(int pos)\n+  {\n+    if (pos >= 0 && pos < positionalArgs.size())\n     {\n-        final String left = format( \"  %s\", argument.optionsListing() );\n-        final String right;\n-        if ( argument instanceof OptionalNamedArg )\n-        {\n-            right = format( \"%s [default:%s]\", argument.description(),\n-                    ((OptionalNamedArg) argument).defaultValue() );\n-        }\n-        else\n-        {\n-            right = argument.description();\n-        }\n-        // 5 = 2 leading spaces in left + 3 spaces as distance between columns\n-        return rightColumnFormatted( left, right, longestAlignmentLength + 5 );\n+      return positionalArgs.get(pos).parse(parsedArgs);\n     }\n+    throw new IllegalArgumentException(format(\"Positional argument '%d' not specified.\", pos));\n+  }\n \n-    public static String rightColumnFormatted( final String leftText, final String rightText, int rightAlignIndex )\n+  public String get(String argName)\n+  {\n+    if (namedArgs.containsKey(argName))\n     {\n-        final int newLineIndent = 6;\n-        int rightWidth = Arguments.LINE_LENGTH - rightAlignIndex;\n-        boolean startOnNewLine = false;\n-        if ( rightWidth < MIN_RIGHT_COL_WIDTH )\n-        {\n-            startOnNewLine = true;\n-            rightWidth = LINE_LENGTH - newLineIndent;\n-        }\n-\n-        final String[] rightLines = wrapText( rightText, rightWidth ).split( NEWLINE );\n-\n-        final String fmt = \"%-\" + (startOnNewLine ? newLineIndent : rightAlignIndex) + \"s%s\";\n-        String firstLine = format( fmt, leftText, startOnNewLine ? \"\" : rightLines[0] );\n-\n-        String rest = Arrays.stream( rightLines )\n-                .skip( startOnNewLine ? 0 : 1 )\n-                .map( l -> format( fmt, \"\", l ) )\n-                .collect( Collectors.joining( NEWLINE ) );\n-\n-        if ( rest.isEmpty() )\n-        {\n-            return firstLine;\n-        }\n-        else\n-        {\n-            return String.join( NEWLINE, firstLine, rest );\n-        }\n+      return namedArgs.get(argName).parse(parsedArgs);\n     }\n+    throw new IllegalArgumentException(\"No such argument available to be parsed: \" + argName);\n+  }\n \n-    public Arguments parse( String[] args ) throws IncorrectUsage\n+  private void validate() throws IncorrectUsage\n+  {\n+    for (String o : parsedArgs.asMap().keySet())\n     {\n-        // Get boolean flags\n-        List<String> flags = namedArgs.entrySet().stream()\n-                .filter( e -> e.getValue() instanceof OptionalBooleanArg )\n-                .map( Entry::getKey )\n-                .collect( Collectors.toList() );\n-\n-        parsedArgs = Args.withFlags( flags.toArray( new String[flags.size()] ) ).parse( args );\n-        validate();\n-        return this;\n+      if (!namedArgs.containsKey(o))\n+      {\n+        throw new IncorrectUsage(format(\"unrecognized option: '%s'\", o));\n+      }\n     }\n-\n-    public String get( int pos )\n+    long mandatoryPositionalArgs = positionalArgs.stream()\n+        .filter(o -> o instanceof MandatoryPositionalArgument)\n+        .count();\n+    if (parsedArgs.orphans().size() < mandatoryPositionalArgs)\n     {\n-        if ( pos >= 0 && pos < positionalArgs.size() )\n-        {\n-            return positionalArgs.get( pos ).parse( parsedArgs );\n-        }\n-        throw new IllegalArgumentException( format( \"Positional argument '%d' not specified.\", pos ) );\n+      throw new IncorrectUsage(\"not enough arguments\");\n     }\n-\n-    public String get( String argName )\n+    String excessArgs = parsedArgs.orphans().stream()\n+        .skip(positionalArgs.size())\n+        .collect(Collectors.joining(\" \"));\n+    if (!excessArgs.isEmpty())\n     {\n-        if ( namedArgs.containsKey( argName ) )\n-        {\n-            return namedArgs.get( argName ).parse( parsedArgs );\n-        }\n-        throw new IllegalArgumentException( \"No such argument available to be parsed: \" + argName );\n+      throw new IncorrectUsage(format(\"unrecognized arguments: '%s'\", excessArgs));\n     }\n+  }\n \n-    private void validate() throws IncorrectUsage\n-    {\n-        for ( String o : parsedArgs.asMap().keySet() )\n-        {\n-            if ( !namedArgs.containsKey( o ) )\n-            {\n-                throw new IncorrectUsage( format( \"unrecognized option: '%s'\", o ) );\n-            }\n-        }\n-        long mandatoryPositionalArgs = positionalArgs.stream()\n-                .filter( o -> o instanceof MandatoryPositionalArgument )\n-                .count();\n-        if ( parsedArgs.orphans().size() < mandatoryPositionalArgs )\n-        {\n-            throw new IncorrectUsage( \"not enough arguments\" );\n-        }\n-        String excessArgs = parsedArgs.orphans().stream()\n-                .skip( positionalArgs.size() )\n-                .collect( Collectors.joining( \" \" ) );\n-        if ( !excessArgs.isEmpty() )\n-        {\n-            throw new IncorrectUsage( format( \"unrecognized arguments: '%s'\", excessArgs ) );\n-        }\n-    }\n+  public boolean getBoolean(String argName)\n+  {\n+    return get(argName, Boolean::parseBoolean);\n+  }\n \n-    public boolean getBoolean( String argName )\n-    {\n-        return get( argName, Boolean::parseBoolean );\n-    }\n+  public Optional<Path> getOptionalPath(String argName)\n+  {\n+    String p = get(argName);\n \n-    public Optional<Path> getOptionalPath( String argName )\n+    if (p.isEmpty())\n     {\n-        String p = get( argName );\n-\n-        if ( p.isEmpty() )\n-        {\n-            return Optional.empty();\n-        }\n-\n-        return Optional.of( Paths.get( p ) );\n+      return Optional.empty();\n     }\n \n-    public Path getMandatoryPath( String argName )\n-    {\n-        Optional<Path> p = getOptionalPath( argName );\n-        if ( p.isPresent() )\n-        {\n-            return p.get();\n-        }\n-        throw new IllegalArgumentException( format( \"Missing exampleValue for '%s'\", argName ) );\n-    }\n+    return Optional.of(Paths.get(p));\n+  }\n \n-    public <T> T get( String argName, Function<String,T> converter )\n+  public Path getMandatoryPath(String argName)\n+  {\n+    Optional<Path> p = getOptionalPath(argName);\n+    if (p.isPresent())\n     {\n-        return converter.apply( get( argName ) );\n+      return p.get();\n     }\n-\n-    /**\n-     * @param argName name of argument\n-     * @return true if argName was given as an explicit argument, false otherwise\n-     */\n-    public boolean has( String argName )\n+    throw new IllegalArgumentException(format(\"Missing exampleValue for '%s'\", argName));\n+  }\n+\n+  public <T> T get(String argName, Function<String, T> converter)\n+  {\n+    return converter.apply(get(argName));\n+  }\n+\n+  /**\n+   * @param argName name of argument\n+   * @return true if argName was given as an explicit argument, false otherwise\n+   */\n+  public boolean has(String argName)\n+  {\n+    if (namedArgs.containsKey(argName))\n     {\n-        if ( namedArgs.containsKey( argName ) )\n-        {\n-            return namedArgs.get( argName ).has( parsedArgs );\n-        }\n-        throw new IllegalArgumentException( \"No such argument available: \" + argName );\n+      return namedArgs.get(argName).has(parsedArgs);\n     }\n+    throw new IllegalArgumentException(\"No such argument available: \" + argName);\n+  }\n }\n",
            "diff_size": 362
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}