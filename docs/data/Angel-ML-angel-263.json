{
    "project_name": "Angel-ML-angel",
    "error_id": "263",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/263/GetHyperLogLogPartResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/263/GetHyperLogLogPartResult.java\nindex b2754af13da..f96d0ae863b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/263/GetHyperLogLogPartResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/263/GetHyperLogLogPartResult.java\n@@ -14,6 +14,7 @@\n  * the License.\n  *\n  */\n+\n package com.tencent.angel.spark.ml.psf.hyperanf;\n \n import com.clearspring.analytics.stream.cardinality.HyperLogLogPlus;\n@@ -45,7 +46,7 @@ public class GetHyperLogLogPartResult extends PartitionGetResult {\n   public void serialize(ByteBuf output) {\n     output.writeInt(logs.size());\n     ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it =\n-      logs.long2ObjectEntrySet().fastIterator();\n+        logs.long2ObjectEntrySet().fastIterator();\n     try {\n       while (it.hasNext()) {\n         Long2ObjectMap.Entry<HyperLogLogPlus> entry = it.next();\n@@ -81,7 +82,7 @@ public class GetHyperLogLogPartResult extends PartitionGetResult {\n   public int bufferLen() {\n     int len = 4;\n     ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it =\n-      logs.long2ObjectEntrySet().fastIterator();\n+        logs.long2ObjectEntrySet().fastIterator();\n     while (it.hasNext()) {\n       Long2ObjectMap.Entry<HyperLogLogPlus> entry = it.next();\n       len += 8;\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/263/GetHyperLogLogPartResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/263/GetHyperLogLogPartResult.java\nindex b2754af13da..a65b9a3e674 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/263/GetHyperLogLogPartResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/263/GetHyperLogLogPartResult.java\n@@ -44,9 +44,8 @@ public class GetHyperLogLogPartResult extends PartitionGetResult {\n   @Override\n   public void serialize(ByteBuf output) {\n     output.writeInt(logs.size());\n-    ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it =\n-      logs.long2ObjectEntrySet().fastIterator();\n-    try {\n+    ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it = logs.long2ObjectEntrySet().fastIterator();\n+try {\n       while (it.hasNext()) {\n         Long2ObjectMap.Entry<HyperLogLogPlus> entry = it.next();\n         output.writeLong(entry.getLongKey());\n@@ -80,9 +79,8 @@ public class GetHyperLogLogPartResult extends PartitionGetResult {\n   @Override\n   public int bufferLen() {\n     int len = 4;\n-    ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it =\n-      logs.long2ObjectEntrySet().fastIterator();\n-    while (it.hasNext()) {\n+    ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it = logs.long2ObjectEntrySet().fastIterator();\n+while (it.hasNext()) {\n       Long2ObjectMap.Entry<HyperLogLogPlus> entry = it.next();\n       len += 8;\n       len += 4;\n@@ -90,4 +88,4 @@ public class GetHyperLogLogPartResult extends PartitionGetResult {\n     }\n     return len;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/263/GetHyperLogLogPartResult.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/263/GetHyperLogLogPartResult.java\nindex b2754af13da..ba29a62a040 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/263/GetHyperLogLogPartResult.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/263/GetHyperLogLogPartResult.java\n@@ -22,7 +22,6 @@ import io.netty.buffer.ByteBuf;\n import it.unimi.dsi.fastutil.longs.Long2ObjectMap;\n import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;\n import it.unimi.dsi.fastutil.objects.ObjectIterator;\n-\n import java.io.IOException;\n \n public class GetHyperLogLogPartResult extends PartitionGetResult {\n@@ -44,12 +43,12 @@ public class GetHyperLogLogPartResult extends PartitionGetResult {\n   @Override\n   public void serialize(ByteBuf output) {\n     output.writeInt(logs.size());\n-    ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it =\n-      logs.long2ObjectEntrySet().fastIterator();\n+    ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it = logs.long2ObjectEntrySet().fastIterator();\n     try {\n       while (it.hasNext()) {\n         Long2ObjectMap.Entry<HyperLogLogPlus> entry = it.next();\n         output.writeLong(entry.getLongKey());\n+\n         byte[] bytes = entry.getValue().getBytes();\n         output.writeInt(bytes.length);\n         output.writeBytes(bytes);\n@@ -80,8 +79,7 @@ public class GetHyperLogLogPartResult extends PartitionGetResult {\n   @Override\n   public int bufferLen() {\n     int len = 4;\n-    ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it =\n-      logs.long2ObjectEntrySet().fastIterator();\n+    ObjectIterator<Long2ObjectMap.Entry<HyperLogLogPlus>> it = logs.long2ObjectEntrySet().fastIterator();\n     while (it.hasNext()) {\n       Long2ObjectMap.Entry<HyperLogLogPlus> entry = it.next();\n       len += 8;\n@@ -90,4 +88,5 @@ public class GetHyperLogLogPartResult extends PartitionGetResult {\n     }\n     return len;\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}