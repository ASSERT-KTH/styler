{
    "project_name": "wso2-attic-commons",
    "error_id": "243",
    "information": {
        "errors": [
            {
                "line": "34",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 126).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " *\n * @hibernate.class table=\"BPEL_CORRELATOR\"\n * @hibernate.query name=\"SELECT_CORRELATOR_IDS_BY_PROCESS\" query=\"select id from HCorrelator as c where c.process = :process\"\n */\npublic class HCorrelator extends HObject {\n    public final static String SELECT_CORRELATOR_IDS_BY_PROCESS = \"SELECT_CORRELATOR_IDS_BY_PROCESS\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/243/HCorrelator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/243/HCorrelator.java\nindex a74a413c1d0..fa4dd1ad1d9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/243/HCorrelator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/243/HCorrelator.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.daohib.bpel.hobj;\n \n \n@@ -34,84 +35,98 @@ import java.util.Set;\n  * @hibernate.query name=\"SELECT_CORRELATOR_IDS_BY_PROCESS\" query=\"select id from HCorrelator as c where c.process = :process\"\n  */\n public class HCorrelator extends HObject {\n-    public final static String SELECT_CORRELATOR_IDS_BY_PROCESS = \"SELECT_CORRELATOR_IDS_BY_PROCESS\";\n-\n-    private HProcess _process;\n-\n-    private String _correlatorId;\n-\n-    /** Receives/picks waiting for message. */\n-    private Set<HCorrelatorSelector> _selectors = new HashSet<HCorrelatorSelector>();\n-\n-    /** Messages waiting for picks/receives. */\n-    private Set<HCorrelatorMessage> _messages = new HashSet<HCorrelatorMessage>();\n-\n-    /** Constructor. */\n-    public HCorrelator() {\n-        super();\n-    }\n-\n-    /**\n-     * Get the set of {@link HCorrelatorMessage} objects representing the\n-     * messages that need matching to a selector (i.e. pick/receive).\n-     *\n-     * @hibernate.set lazy=\"true\" inverse=\"true\"\n-     * @hibernate.collection-key column=\"CORRELATOR\" foreign-key=\"none\"\n-     * @hibernate.collection-one-to-many class=\"org.apache.ode.daohib.bpel.hobj.HCorrelatorMessage\"\n-     */\n-    public Set<HCorrelatorMessage> getMessageCorrelations() {\n-        return _messages;\n-    }\n-\n-    /** Hibernate-mandated setter. */\n-    public void setMessageCorrelations(Set<HCorrelatorMessage> messages) {\n-        _messages = messages;\n-    }\n-\n-    /**\n-     * @hibernate.property\n-     * @hibernate.column name=\"CID\" index=\"IDX_CORRELATOR_CID\"\n-     */\n-    public String getCorrelatorId() {\n-        return _correlatorId;\n-    }\n-\n-    /** Hibernate-mandated setter. */\n-    public void setCorrelatorId(String correlatorId) {\n-        _correlatorId = correlatorId;\n-    }\n-\n-    /**\n-     * @hibernate.many-to-one column=\"PROCESS_ID\" foreign-key=\"none\"\n-     */\n-    public HProcess getProcess() {\n-        return _process;\n-    }\n-\n-    /** Hibernate-mandated setter. */\n-    public void setProcess(HProcess process) {\n-        _process = process;\n-    }\n-\n-    /**\n-     * Get the set of {@link HCorrelatorSelector} objects representing the\n-     * selectors (i.e. pick/receive) that need matching to an input message.\n-     *\n-     * @hibernate.set lazy=\"true\" inverse=\"true\"\n-     * @hibernate.collection-key column=\"CORRELATOR\" foreign-key=\"none\"\n-     * @hibernate.collection-one-to-many class=\"org.apache.ode.daohib.bpel.hobj.HCorrelatorSelector\"\n-     */\n-    public Set<HCorrelatorSelector> getSelectors() {\n-        return _selectors;\n-    }\n-\n-    /** Hibernate-mandated setter. */\n-    public void setSelectors(Set<HCorrelatorSelector> selectors) {\n-        _selectors = selectors;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"{HCorrelator process=\" + _process.getProcessId() + \", cid=\" + _correlatorId + \"}\";\n-    }\n+  public final static String SELECT_CORRELATOR_IDS_BY_PROCESS = \"SELECT_CORRELATOR_IDS_BY_PROCESS\";\n+\n+  private HProcess _process;\n+\n+  private String _correlatorId;\n+\n+  /**\n+   * Receives/picks waiting for message.\n+   */\n+  private Set<HCorrelatorSelector> _selectors = new HashSet<HCorrelatorSelector>();\n+\n+  /**\n+   * Messages waiting for picks/receives.\n+   */\n+  private Set<HCorrelatorMessage> _messages = new HashSet<HCorrelatorMessage>();\n+\n+  /**\n+   * Constructor.\n+   */\n+  public HCorrelator() {\n+    super();\n+  }\n+\n+  /**\n+   * Get the set of {@link HCorrelatorMessage} objects representing the\n+   * messages that need matching to a selector (i.e. pick/receive).\n+   *\n+   * @hibernate.set lazy=\"true\" inverse=\"true\"\n+   * @hibernate.collection-key column=\"CORRELATOR\" foreign-key=\"none\"\n+   * @hibernate.collection-one-to-many class=\"org.apache.ode.daohib.bpel.hobj.HCorrelatorMessage\"\n+   */\n+  public Set<HCorrelatorMessage> getMessageCorrelations() {\n+    return _messages;\n+  }\n+\n+  /**\n+   * Hibernate-mandated setter.\n+   */\n+  public void setMessageCorrelations(Set<HCorrelatorMessage> messages) {\n+    _messages = messages;\n+  }\n+\n+  /**\n+   * @hibernate.property\n+   * @hibernate.column name=\"CID\" index=\"IDX_CORRELATOR_CID\"\n+   */\n+  public String getCorrelatorId() {\n+    return _correlatorId;\n+  }\n+\n+  /**\n+   * Hibernate-mandated setter.\n+   */\n+  public void setCorrelatorId(String correlatorId) {\n+    _correlatorId = correlatorId;\n+  }\n+\n+  /**\n+   * @hibernate.many-to-one column=\"PROCESS_ID\" foreign-key=\"none\"\n+   */\n+  public HProcess getProcess() {\n+    return _process;\n+  }\n+\n+  /**\n+   * Hibernate-mandated setter.\n+   */\n+  public void setProcess(HProcess process) {\n+    _process = process;\n+  }\n+\n+  /**\n+   * Get the set of {@link HCorrelatorSelector} objects representing the\n+   * selectors (i.e. pick/receive) that need matching to an input message.\n+   *\n+   * @hibernate.set lazy=\"true\" inverse=\"true\"\n+   * @hibernate.collection-key column=\"CORRELATOR\" foreign-key=\"none\"\n+   * @hibernate.collection-one-to-many class=\"org.apache.ode.daohib.bpel.hobj.HCorrelatorSelector\"\n+   */\n+  public Set<HCorrelatorSelector> getSelectors() {\n+    return _selectors;\n+  }\n+\n+  /**\n+   * Hibernate-mandated setter.\n+   */\n+  public void setSelectors(Set<HCorrelatorSelector> selectors) {\n+    _selectors = selectors;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"{HCorrelator process=\" + _process.getProcessId() + \", cid=\" + _correlatorId + \"}\";\n+  }\n }\n",
            "diff_size": 95
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/243/HCorrelator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/243/HCorrelator.java\nindex a74a413c1d0..ffeba6c7a22 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/243/HCorrelator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/243/HCorrelator.java\n@@ -114,4 +114,4 @@ public class HCorrelator extends HObject {\n     public String toString() {\n         return \"{HCorrelator process=\" + _process.getProcessId() + \", cid=\" + _correlatorId + \"}\";\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "34",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}