{
    "project_name": "Angel-ML-angel",
    "error_id": "802",
    "information": {
        "errors": [
            {
                "line": "87",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 101).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n  @Test\n  public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n    UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n    w2Client.update(func).get();\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/802/UpdateFuncTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/802/UpdateFuncTest.java\nindex 003a08a32cb..77192dc2c36 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/802/UpdateFuncTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/802/UpdateFuncTest.java\n@@ -32,7 +32,7 @@ import org.junit.*;\n import java.util.Arrays;\n import java.util.concurrent.ExecutionException;\n \n-public class UpdateFuncTest{\n+public class UpdateFuncTest {\n   private static MatrixClient w2Client = null;\n   private static double[] localArray0 = null;\n   private static double[] localArray1 = null;\n@@ -56,7 +56,7 @@ public class UpdateFuncTest{\n \n     localArray0 = pull(w2Client, 0);\n     localArray1 = pull(w2Client, 1);\n-    dim  = localArray1.length;\n+    dim = localArray1.length;\n   }\n \n   @Test\n@@ -65,7 +65,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.abs(localArray1[i]), delta);\n     }\n@@ -77,19 +77,20 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] + localArray1[i], delta);\n     }\n   }\n \n   @Test\n-  public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n+  public void testAddS()\n+      throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n     w2Client.update(func).get();\n \n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] + 2.0, delta);\n     }\n@@ -102,7 +103,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] * -2.0 + 1, delta);\n     }\n@@ -114,7 +115,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.ceil(localArray0[i]), delta);\n     }\n@@ -126,7 +127,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i], delta);\n     }\n@@ -138,7 +139,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray1[i] / localArray0[i], delta);\n     }\n@@ -150,7 +151,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] / -1.0, delta);\n     }\n@@ -162,7 +163,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.exp(localArray0[i]), delta);\n     }\n@@ -174,7 +175,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.expm1(localArray0[i]), delta);\n     }\n@@ -186,7 +187,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], -1.0, delta);\n     }\n@@ -198,7 +199,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.floor(localArray0[i]), delta);\n     }\n@@ -210,7 +211,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], 0.0 + localArray1[i], delta);\n     }\n@@ -222,7 +223,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log(localArray0[i]), delta);\n     }\n@@ -234,7 +235,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log1p(localArray0[i]), delta);\n     }\n@@ -246,7 +247,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log10(localArray0[i]), delta);\n     }\n@@ -259,7 +260,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.max(localArray1[i], 0.0), delta);\n     }\n@@ -271,7 +272,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.max(localArray1[i], localArray0[i]), delta);\n     }\n@@ -284,7 +285,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.min(localArray1[i], 0.0), delta);\n     }\n@@ -296,7 +297,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.min(localArray1[i], localArray0[i]), delta);\n     }\n@@ -308,7 +309,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] * localArray1[i], delta);\n     }\n@@ -320,7 +321,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] * -1.0, delta);\n     }\n@@ -332,7 +333,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.pow(localArray0[i], 3.0), delta);\n     }\n@@ -344,7 +345,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i], delta);\n     }\n@@ -356,7 +357,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.round(localArray0[i]), delta);\n     }\n@@ -369,7 +370,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] * 2.0, delta);\n     }\n@@ -381,7 +382,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.signum(localArray1[i]), delta);\n     }\n@@ -393,7 +394,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.sqrt(localArray0[i]), delta);\n     }\n@@ -405,7 +406,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] - localArray1[i], delta);\n     }\n@@ -417,7 +418,7 @@ public class UpdateFuncTest{\n     w2Client.update(func).get();\n \n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] - (-1.1), delta);\n     }\n@@ -431,11 +432,11 @@ public class UpdateFuncTest{\n \n   private static double[] pull(MatrixClient client, int rowId) {\n     GetRowResult rowResult = (GetRowResult) client.get(new Pull(client.getMatrixId(), rowId));\n-    return ((DenseDoubleVector)rowResult.getRow()).getValues();\n+    return ((DenseDoubleVector) rowResult.getRow()).getValues();\n   }\n \n   @AfterClass\n-  public static void stop() throws Exception{\n+  public static void stop() throws Exception {\n     LocalClusterHelper.cleanup();\n   }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/802/UpdateFuncTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/802/UpdateFuncTest.java\nindex 003a08a32cb..66aff3de5f8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/802/UpdateFuncTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/802/UpdateFuncTest.java\n@@ -32,7 +32,7 @@ import org.junit.*;\n import java.util.Arrays;\n import java.util.concurrent.ExecutionException;\n \n-public class UpdateFuncTest{\n+public class UpdateFuncTest {\n   private static MatrixClient w2Client = null;\n   private static double[] localArray0 = null;\n   private static double[] localArray1 = null;\n@@ -56,7 +56,7 @@ public class UpdateFuncTest{\n \n     localArray0 = pull(w2Client, 0);\n     localArray1 = pull(w2Client, 1);\n-    dim  = localArray1.length;\n+    dim = localArray1.length;\n   }\n \n   @Test\n@@ -435,7 +435,7 @@ public class UpdateFuncTest{\n   }\n \n   @AfterClass\n-  public static void stop() throws Exception{\n+  public static void stop() throws Exception {\n     LocalClusterHelper.cleanup();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "84",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/802/UpdateFuncTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/802/UpdateFuncTest.java\nindex 003a08a32cb..5bd9a9f30d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/802/UpdateFuncTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/802/UpdateFuncTest.java\n@@ -28,11 +28,11 @@ import com.tencent.angel.psagent.matrix.MatrixClient;\n import com.tencent.angel.psagent.matrix.MatrixClientFactory;\n import org.apache.log4j.PropertyConfigurator;\n import org.junit.*;\n-\n import java.util.Arrays;\n import java.util.concurrent.ExecutionException;\n \n-public class UpdateFuncTest{\n+public class UpdateFuncTest {\n+\n   private static MatrixClient w2Client = null;\n   private static double[] localArray0 = null;\n   private static double[] localArray1 = null;\n@@ -53,19 +53,17 @@ public class UpdateFuncTest{\n     w2Client.update(new RandomNormal(w2Client.getMatrixId(), 1, 0.0, 1.0)).get();\n     // row 2 is filled with 1.0\n     w2Client.update(new Fill(w2Client.getMatrixId(), 2, 1.0)).get();\n-\n     localArray0 = pull(w2Client, 0);\n     localArray1 = pull(w2Client, 1);\n-    dim  = localArray1.length;\n+    dim = localArray1.length;\n   }\n \n   @Test\n   public void testAbs() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new Abs(w2Client.getMatrixId(), 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.abs(localArray1[i]), delta);\n     }\n@@ -75,9 +73,8 @@ public class UpdateFuncTest{\n   public void testAdd() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new Add(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] + localArray1[i], delta);\n     }\n@@ -87,9 +84,8 @@ public class UpdateFuncTest{\n   public void testAddS() throws InvalidParameterException, InterruptedException, ExecutionException {\n     UpdateFunc func = new AddS(w2Client.getMatrixId(), 0, 3, 2.0);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] + 2.0, delta);\n     }\n@@ -100,9 +96,8 @@ public class UpdateFuncTest{\n     w2Client.update(new Fill(w2Client.getMatrixId(), 3, 1.0)).get();\n     UpdateFunc func = new Axpy(w2Client.getMatrixId(), 0, 3, -2.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] * -2.0 + 1, delta);\n     }\n@@ -112,9 +107,8 @@ public class UpdateFuncTest{\n   public void testCeil() throws Exception {\n     UpdateFunc func = new Ceil(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.ceil(localArray0[i]), delta);\n     }\n@@ -124,9 +118,8 @@ public class UpdateFuncTest{\n   public void testCopy() throws Exception {\n     UpdateFunc func = new Copy(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i], delta);\n     }\n@@ -136,9 +129,8 @@ public class UpdateFuncTest{\n   public void testDiv() throws Exception {\n     UpdateFunc func = new Div(w2Client.getMatrixId(), 1, 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray1[i] / localArray0[i], delta);\n     }\n@@ -148,9 +140,8 @@ public class UpdateFuncTest{\n   public void testDivS() throws Exception {\n     UpdateFunc func = new DivS(w2Client.getMatrixId(), 0, 3, -1.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] / -1.0, delta);\n     }\n@@ -160,9 +151,8 @@ public class UpdateFuncTest{\n   public void testExp() throws Exception {\n     UpdateFunc func = new Exp(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.exp(localArray0[i]), delta);\n     }\n@@ -172,9 +162,8 @@ public class UpdateFuncTest{\n   public void testExpm1() throws Exception {\n     UpdateFunc func = new Expm1(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.expm1(localArray0[i]), delta);\n     }\n@@ -184,9 +173,8 @@ public class UpdateFuncTest{\n   public void testFill() throws Exception {\n     UpdateFunc func = new Fill(w2Client.getMatrixId(), 3, -1.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], -1.0, delta);\n     }\n@@ -196,9 +184,8 @@ public class UpdateFuncTest{\n   public void testFloor() throws Exception {\n     UpdateFunc func = new Floor(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.floor(localArray0[i]), delta);\n     }\n@@ -208,9 +195,8 @@ public class UpdateFuncTest{\n   public void testIncrement() throws Exception {\n     UpdateFunc func = new Increment(w2Client.getMatrixId(), 3, localArray1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], 0.0 + localArray1[i], delta);\n     }\n@@ -220,9 +206,8 @@ public class UpdateFuncTest{\n   public void testLog() throws Exception {\n     UpdateFunc func = new Log(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log(localArray0[i]), delta);\n     }\n@@ -232,9 +217,8 @@ public class UpdateFuncTest{\n   public void testLog1p() throws Exception {\n     UpdateFunc func = new Log1p(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log1p(localArray0[i]), delta);\n     }\n@@ -244,9 +228,8 @@ public class UpdateFuncTest{\n   public void testLog10() throws Exception {\n     UpdateFunc func = new Log10(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.log10(localArray0[i]), delta);\n     }\n@@ -257,9 +240,8 @@ public class UpdateFuncTest{\n     w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n     UpdateFunc func = new MaxA(w2Client.getMatrixId(), 3, localArray1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.max(localArray1[i], 0.0), delta);\n     }\n@@ -269,9 +251,8 @@ public class UpdateFuncTest{\n   public void testMaxV() throws Exception {\n     UpdateFunc func = new MaxV(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.max(localArray1[i], localArray0[i]), delta);\n     }\n@@ -282,9 +263,8 @@ public class UpdateFuncTest{\n     w2Client.update(new Fill(w2Client.getMatrixId(), 3, 0.0)).get();\n     UpdateFunc func = new MinA(w2Client.getMatrixId(), 3, localArray1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.min(localArray1[i], 0.0), delta);\n     }\n@@ -294,9 +274,8 @@ public class UpdateFuncTest{\n   public void testMinV() throws Exception {\n     UpdateFunc func = new MinV(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.min(localArray1[i], localArray0[i]), delta);\n     }\n@@ -306,9 +285,8 @@ public class UpdateFuncTest{\n   public void testMul() throws Exception {\n     UpdateFunc func = new Mul(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] * localArray1[i], delta);\n     }\n@@ -318,9 +296,8 @@ public class UpdateFuncTest{\n   public void testMulS() throws Exception {\n     UpdateFunc func = new MulS(w2Client.getMatrixId(), 0, 3, -1.0);\n     w2Client.update(func).get();\n-\n     double[] addResult = pull(w2Client, 3);\n-    assert(addResult.length == dim);\n+    assert (addResult.length == dim);\n     for (int i = 0; i < addResult.length; i++) {\n       Assert.assertEquals(addResult[i], localArray0[i] * -1.0, delta);\n     }\n@@ -330,9 +307,8 @@ public class UpdateFuncTest{\n   public void testPow() throws Exception {\n     UpdateFunc func = new Pow(w2Client.getMatrixId(), 0, 3, 3.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.pow(localArray0[i], 3.0), delta);\n     }\n@@ -342,9 +318,8 @@ public class UpdateFuncTest{\n   public void testPut() throws Exception {\n     UpdateFunc func = new Push(w2Client.getMatrixId(), 3, localArray0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i], delta);\n     }\n@@ -354,9 +329,8 @@ public class UpdateFuncTest{\n   public void testRound() throws Exception {\n     UpdateFunc func = new Round(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.round(localArray0[i]), delta);\n     }\n@@ -367,9 +341,8 @@ public class UpdateFuncTest{\n     w2Client.update(new Push(w2Client.getMatrixId(), 3, localArray0)).get();\n     UpdateFunc func = new Scale(w2Client.getMatrixId(), 3, 2.0);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] * 2.0, delta);\n     }\n@@ -379,9 +352,8 @@ public class UpdateFuncTest{\n   public void testSignum() throws Exception {\n     UpdateFunc func = new Signum(w2Client.getMatrixId(), 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.signum(localArray1[i]), delta);\n     }\n@@ -391,9 +363,8 @@ public class UpdateFuncTest{\n   public void testSqrt() throws Exception {\n     UpdateFunc func = new Sqrt(w2Client.getMatrixId(), 0, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], Math.sqrt(localArray0[i]), delta);\n     }\n@@ -403,9 +374,8 @@ public class UpdateFuncTest{\n   public void testSub() throws Exception {\n     UpdateFunc func = new Sub(w2Client.getMatrixId(), 0, 1, 3);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] - localArray1[i], delta);\n     }\n@@ -415,9 +385,8 @@ public class UpdateFuncTest{\n   public void testSubS() throws Exception {\n     UpdateFunc func = new SubS(w2Client.getMatrixId(), 0, 3, -1.1);\n     w2Client.update(func).get();\n-\n     double[] result = pull(w2Client, 3);\n-    assert(result.length == dim);\n+    assert (result.length == dim);\n     for (int i = 0; i < result.length; i++) {\n       Assert.assertEquals(result[i], localArray0[i] - (-1.1), delta);\n     }\n@@ -428,14 +397,14 @@ public class UpdateFuncTest{\n     System.out.println(Arrays.toString(arr));\n   }\n \n-\n   private static double[] pull(MatrixClient client, int rowId) {\n     GetRowResult rowResult = (GetRowResult) client.get(new Pull(client.getMatrixId(), rowId));\n-    return ((DenseDoubleVector)rowResult.getRow()).getValues();\n+    return ((DenseDoubleVector) rowResult.getRow()).getValues();\n   }\n \n   @AfterClass\n-  public static void stop() throws Exception{\n+  public static void stop() throws Exception {\n     LocalClusterHelper.cleanup();\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 70
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}