{
    "project_name": "IQSS-dataverse",
    "error_id": "40",
    "information": {
        "errors": [
            {
                "line": "19",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " */\npublic class RoleAssignmentSet implements Iterable<RoleAssignment> {\n\t\n\tprivate final RoleAssignee roas;\n\tprivate final Set<RoleAssignment> assignments = new HashSet<>();\n\t",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/40/RoleAssignmentSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/40/RoleAssignmentSet.java\nindex 65f7edc0941..f2a9ef0619e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/40/RoleAssignmentSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/40/RoleAssignmentSet.java\n@@ -7,55 +7,56 @@ import java.util.Iterator;\n import java.util.Set;\n \n /**\n- * A set of assignment for a given {@link RoleAssignee} user has. \n- * \n+ * A set of assignment for a given {@link RoleAssignee} user has.\n+ * <p>\n  * LATER: we could probably refactor this class out.\n+ *\n  * @author michael\n- * \n+ * <p>\n  * We definitely should factor this out.\n  * Oscar\n  */\n public class RoleAssignmentSet implements Iterable<RoleAssignment> {\n-\t\n-\tprivate final RoleAssignee roas;\n-\tprivate final Set<RoleAssignment> assignments = new HashSet<>();\n-\t\n-\tpublic RoleAssignmentSet( RoleAssignee aRoleAssignee) {\n-\t\troas = aRoleAssignee;\n-\t}\n-\t\n-\tpublic void add( Iterable<RoleAssignment> ras ) {\n-\t\tfor ( RoleAssignment ra : ras ) {\n-\t\t\tassignments.add(ra);\n-\t\t}\n-\t}\n-\t\n-\tpublic void add( RoleAssignment ra ) {\n-\t\tassignments.add( ra );\n-\t}\n-\t\n-\tpublic Set<Permission> getPermissions() {\n-\t\tBitSet acc = new BitSet();\n-\t\tfor ( RoleAssignment ra : assignments ) {\n-\t\t\tacc.union( new BitSet(ra.getRole().getPermissionsBits()) );\n-\t\t}\n-\t\treturn acc.asSetOf( Permission.class );\n-\t}\n-\n-    public RoleAssignee getRoleAssignee() {\n-        return roas;\n+\n+  private final RoleAssignee roas;\n+  private final Set<RoleAssignment> assignments = new HashSet<>();\n+\n+  public RoleAssignmentSet(RoleAssignee aRoleAssignee) {\n+    roas = aRoleAssignee;\n+  }\n+\n+  public void add(Iterable<RoleAssignment> ras) {\n+    for (RoleAssignment ra : ras) {\n+      assignments.add(ra);\n     }\n+  }\n+\n+  public void add(RoleAssignment ra) {\n+    assignments.add(ra);\n+  }\n+\n+  public Set<Permission> getPermissions() {\n+    BitSet acc = new BitSet();\n+    for (RoleAssignment ra : assignments) {\n+      acc.union(new BitSet(ra.getRole().getPermissionsBits()));\n+    }\n+    return acc.asSetOf(Permission.class);\n+  }\n+\n+  public RoleAssignee getRoleAssignee() {\n+    return roas;\n+  }\n+\n+  public Set<RoleAssignment> getAssignments() {\n+    return assignments;\n+  }\n+\n+  @Override\n+  public Iterator<RoleAssignment> iterator() {\n+    return assignments.iterator();\n+  }\n \n-\tpublic Set<RoleAssignment> getAssignments() {\n-\t\treturn assignments;\n-\t}\n-\n-\t@Override\n-\tpublic Iterator<RoleAssignment> iterator() {\n-\t\treturn assignments.iterator();\n-\t}\n-\t\n-\tpublic boolean isEmpty() {\n-\t\treturn assignments.isEmpty();\n-\t}\n+  public boolean isEmpty() {\n+    return assignments.isEmpty();\n+  }\n }\n",
            "diff_size": 70
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "24",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/40/RoleAssignmentSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/40/RoleAssignmentSet.java\nindex 65f7edc0941..2518bac9240 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/40/RoleAssignmentSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/40/RoleAssignmentSet.java\n@@ -16,46 +16,47 @@ import java.util.Set;\n  * Oscar\n  */\n public class RoleAssignmentSet implements Iterable<RoleAssignment> {\n-\t\n-\tprivate final RoleAssignee roas;\n-\tprivate final Set<RoleAssignment> assignments = new HashSet<>();\n-\t\n-\tpublic RoleAssignmentSet( RoleAssignee aRoleAssignee) {\n+\n+    private final RoleAssignee roas;\n+private final Set<RoleAssignment> assignments = new HashSet<>();\n+\n+public RoleAssignmentSet( RoleAssignee aRoleAssignee) {\n \t\troas = aRoleAssignee;\n-\t}\n-\t\n-\tpublic void add( Iterable<RoleAssignment> ras ) {\n+    }\n+\n+public void add( Iterable<RoleAssignment> ras ) {\n \t\tfor ( RoleAssignment ra : ras ) {\n-\t\t\tassignments.add(ra);\n-\t\t}\n-\t}\n-\t\n-\tpublic void add( RoleAssignment ra ) {\n+    assignments.add(ra);\n+    }\n+    }\n+\n+public void add( RoleAssignment ra ) {\n \t\tassignments.add( ra );\n-\t}\n-\t\n-\tpublic Set<Permission> getPermissions() {\n+    }\n+\n+public Set<Permission> getPermissions() {\n \t\tBitSet acc = new BitSet();\n \t\tfor ( RoleAssignment ra : assignments ) {\n-\t\t\tacc.union( new BitSet(ra.getRole().getPermissionsBits()) );\n-\t\t}\n+    acc.union( new BitSet(ra.getRole().getPermissionsBits()) );\n+    }\n \t\treturn acc.asSetOf( Permission.class );\n-\t}\n+    }\n \n-    public RoleAssignee getRoleAssignee() {\n+public RoleAssignee getRoleAssignee() {\n         return roas;\n     }\n \n-\tpublic Set<RoleAssignment> getAssignments() {\n-\t\treturn assignments;\n-\t}\n+public Set<RoleAssignment> getAssignments() {\n+    return assignments;\n+    }\n \n \t@Override\n \tpublic Iterator<RoleAssignment> iterator() {\n-\t\treturn assignments.iterator();\n-\t}\n-\t\n-\tpublic boolean isEmpty() {\n+    return assignments.iterator();\n+    }\n+\n+public boolean isEmpty() {\n \t\treturn assignments.isEmpty();\n-\t}\n-}\n+    }\n+\n+    }\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/40/RoleAssignmentSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/40/RoleAssignmentSet.java\nindex 65f7edc0941..78267a7d47d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/40/RoleAssignmentSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/40/RoleAssignmentSet.java\n@@ -15,47 +15,49 @@ import java.util.Set;\n  * We definitely should factor this out.\n  * Oscar\n  */\n+\n+\n public class RoleAssignmentSet implements Iterable<RoleAssignment> {\n-\t\n-\tprivate final RoleAssignee roas;\n-\tprivate final Set<RoleAssignment> assignments = new HashSet<>();\n-\t\n-\tpublic RoleAssignmentSet( RoleAssignee aRoleAssignee) {\n-\t\troas = aRoleAssignee;\n-\t}\n-\t\n-\tpublic void add( Iterable<RoleAssignment> ras ) {\n-\t\tfor ( RoleAssignment ra : ras ) {\n-\t\t\tassignments.add(ra);\n-\t\t}\n-\t}\n-\t\n-\tpublic void add( RoleAssignment ra ) {\n-\t\tassignments.add( ra );\n-\t}\n-\t\n-\tpublic Set<Permission> getPermissions() {\n-\t\tBitSet acc = new BitSet();\n-\t\tfor ( RoleAssignment ra : assignments ) {\n-\t\t\tacc.union( new BitSet(ra.getRole().getPermissionsBits()) );\n-\t\t}\n-\t\treturn acc.asSetOf( Permission.class );\n-\t}\n+\n+    private final RoleAssignee roas;\n+    private final Set<RoleAssignment> assignments = new HashSet<>();\n+\n+    public RoleAssignmentSet(RoleAssignee aRoleAssignee) {\n+        roas = aRoleAssignee;\n+    }\n+\n+    public void add(Iterable<RoleAssignment> ras) {\n+        for (RoleAssignment ra : ras) {\n+            assignments.add(ra);\n+        }\n+    }\n+\n+    public void add(RoleAssignment ra) {\n+        assignments.add(ra);\n+    }\n+\n+    public Set<Permission> getPermissions() {\n+        BitSet acc = new BitSet();\n+        for (RoleAssignment ra : assignments) {\n+            acc.union(new BitSet(ra.getRole().getPermissionsBits()));\n+        }\n+        return acc.asSetOf(Permission.class);\n+    }\n \n     public RoleAssignee getRoleAssignee() {\n         return roas;\n     }\n \n-\tpublic Set<RoleAssignment> getAssignments() {\n-\t\treturn assignments;\n-\t}\n+    public Set<RoleAssignment> getAssignments() {\n+        return assignments;\n+    }\n \n-\t@Override\n-\tpublic Iterator<RoleAssignment> iterator() {\n-\t\treturn assignments.iterator();\n-\t}\n-\t\n-\tpublic boolean isEmpty() {\n-\t\treturn assignments.isEmpty();\n-\t}\n-}\n+    @Override\n+    public Iterator<RoleAssignment> iterator() {\n+        return assignments.iterator();\n+    }\n+\n+    public boolean isEmpty() {\n+        return assignments.isEmpty();\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 39
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "19",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}