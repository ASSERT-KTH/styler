{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2901",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2901/ExplicitIndexRead.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2901/ExplicitIndexRead.java\nindex 4fb01d017a8..188959cb20a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2901/ExplicitIndexRead.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2901/ExplicitIndexRead.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import java.util.Map;\n@@ -28,132 +29,136 @@ import org.neo4j.internal.kernel.api.exceptions.explicitindex.ExplicitIndexNotFo\n  */\n public interface ExplicitIndexRead\n {\n-    /**\n-     * Finds item from explicit index\n-     *\n-     * @param cursor the cursor to use for consuming the result\n-     * @param index the name of the explicit index\n-     * @param key the key to find\n-     * @param value the value corresponding to the key\n-     * @throws ExplicitIndexNotFoundKernelException if index is not there\n-     */\n-    void nodeExplicitIndexLookup( NodeExplicitIndexCursor cursor, String index, String key, Object value )\n-            throws ExplicitIndexNotFoundKernelException;\n+  /**\n+   * Finds item from explicit index\n+   *\n+   * @param cursor the cursor to use for consuming the result\n+   * @param index  the name of the explicit index\n+   * @param key    the key to find\n+   * @param value  the value corresponding to the key\n+   * @throws ExplicitIndexNotFoundKernelException if index is not there\n+   */\n+  void nodeExplicitIndexLookup(NodeExplicitIndexCursor cursor, String index, String key, Object value)\n+      throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n-     * Queries explicit index\n-     *\n-     * @param cursor the cursor to use for consuming the result\n-     * @param index the name of the explicit index\n-     * @param query the query object\n-     * @throws ExplicitIndexNotFoundKernelException if index is not there\n-     */\n-    void nodeExplicitIndexQuery( NodeExplicitIndexCursor cursor, String index, Object query )\n-            throws ExplicitIndexNotFoundKernelException;\n+  /**\n+   * Queries explicit index\n+   *\n+   * @param cursor the cursor to use for consuming the result\n+   * @param index  the name of the explicit index\n+   * @param query  the query object\n+   * @throws ExplicitIndexNotFoundKernelException if index is not there\n+   */\n+  void nodeExplicitIndexQuery(NodeExplicitIndexCursor cursor, String index, Object query)\n+      throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n-     * Queries explicit index\n-     *\n-     * @param cursor the cursor to use for consuming the result\n-     * @param index the name of the explicit index\n-     * @param key the key to find\n-     * @param query the query object\n-     * @throws ExplicitIndexNotFoundKernelException if index is not there\n-     */\n-    void nodeExplicitIndexQuery( NodeExplicitIndexCursor cursor, String index, String key, Object query )\n-            throws ExplicitIndexNotFoundKernelException;\n+  /**\n+   * Queries explicit index\n+   *\n+   * @param cursor the cursor to use for consuming the result\n+   * @param index  the name of the explicit index\n+   * @param key    the key to find\n+   * @param query  the query object\n+   * @throws ExplicitIndexNotFoundKernelException if index is not there\n+   */\n+  void nodeExplicitIndexQuery(NodeExplicitIndexCursor cursor, String index, String key, Object query)\n+      throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n-     * Check whether a node index with the given name exists.\n-     *\n-     * @param indexName name of node index to check for existence.\n-     * @param customConfiguration if {@code null} the configuration of existing won't be matched, otherwise it will\n-     * be matched and a mismatch will throw {@link IllegalArgumentException}.\n-     * @return whether or not node explicit index with name {@code indexName} exists.\n-     * @throws IllegalArgumentException on index existence with provided name, but mismatching {@code customConfiguration}.\n-     */\n-    boolean nodeExplicitIndexExists( String indexName, Map<String,String> customConfiguration );\n+  /**\n+   * Check whether a node index with the given name exists.\n+   *\n+   * @param indexName           name of node index to check for existence.\n+   * @param customConfiguration if {@code null} the configuration of existing won't be matched, otherwise it will\n+   *                            be matched and a mismatch will throw {@link IllegalArgumentException}.\n+   * @return whether or not node explicit index with name {@code indexName} exists.\n+   * @throws IllegalArgumentException on index existence with provided name, but mismatching {@code customConfiguration}.\n+   */\n+  boolean nodeExplicitIndexExists(String indexName, Map<String, String> customConfiguration);\n \n-    /**\n-     * Return the configuration of the given index\n-     * @param indexName the name of the index\n-     * @return the configuration of the index with the given name\n-     * @throws ExplicitIndexNotFoundKernelException if the index is not there\n-     */\n-    Map<String, String> nodeExplicitIndexGetConfiguration( String indexName )\n-            throws ExplicitIndexNotFoundKernelException;\n+  /**\n+   * Return the configuration of the given index\n+   *\n+   * @param indexName the name of the index\n+   * @return the configuration of the index with the given name\n+   * @throws ExplicitIndexNotFoundKernelException if the index is not there\n+   */\n+  Map<String, String> nodeExplicitIndexGetConfiguration(String indexName)\n+      throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n-     * Finds item from explicit index\n-     *\n-     * @param cursor the cursor to use for consuming the result\n-     * @param index the name of the explicit index\n-     * @param key the key to find\n-     * @param value the value corresponding to the key\n-     * @throws ExplicitIndexNotFoundKernelException if index is not there\n-     */\n-    void relationshipExplicitIndexLookup(\n-            RelationshipExplicitIndexCursor cursor, String index, String key, Object value, long source, long target )\n-            throws ExplicitIndexNotFoundKernelException;\n+  /**\n+   * Finds item from explicit index\n+   *\n+   * @param cursor the cursor to use for consuming the result\n+   * @param index  the name of the explicit index\n+   * @param key    the key to find\n+   * @param value  the value corresponding to the key\n+   * @throws ExplicitIndexNotFoundKernelException if index is not there\n+   */\n+  void relationshipExplicitIndexLookup(\n+      RelationshipExplicitIndexCursor cursor, String index, String key, Object value, long source, long target)\n+      throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n-     * Queries explicit index\n-     *\n-     * @param cursor the cursor to use for consuming the result\n-     * @param index the name of the explicit index\n-     * @param query the query object\n-     * @param source the source node or <code>-1</code> if any\n-     * @param target the source node or <code>-1</code> if any\n-     * @throws ExplicitIndexNotFoundKernelException if index is not there\n-     */\n-    void relationshipExplicitIndexQuery(\n-            RelationshipExplicitIndexCursor cursor, String index, Object query, long source, long target )\n-            throws ExplicitIndexNotFoundKernelException;\n+  /**\n+   * Queries explicit index\n+   *\n+   * @param cursor the cursor to use for consuming the result\n+   * @param index  the name of the explicit index\n+   * @param query  the query object\n+   * @param source the source node or <code>-1</code> if any\n+   * @param target the source node or <code>-1</code> if any\n+   * @throws ExplicitIndexNotFoundKernelException if index is not there\n+   */\n+  void relationshipExplicitIndexQuery(\n+      RelationshipExplicitIndexCursor cursor, String index, Object query, long source, long target)\n+      throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n-     * Queries explicit index\n-     *\n-     * @param cursor the cursor to use for consuming the result\n-     * @param index the name of the explicit index\n-     * @param key the key to find\n-     * @param query the query object\n-     * @param source the source node or <code>-1</code> if any\n-     * @param target the source node or <code>-1</code> if any\n-     * @throws ExplicitIndexNotFoundKernelException if index is not there\n-     */\n-    void relationshipExplicitIndexQuery(\n-            RelationshipExplicitIndexCursor cursor, String index, String key, Object query, long source, long target )\n-            throws ExplicitIndexNotFoundKernelException;\n+  /**\n+   * Queries explicit index\n+   *\n+   * @param cursor the cursor to use for consuming the result\n+   * @param index  the name of the explicit index\n+   * @param key    the key to find\n+   * @param query  the query object\n+   * @param source the source node or <code>-1</code> if any\n+   * @param target the source node or <code>-1</code> if any\n+   * @throws ExplicitIndexNotFoundKernelException if index is not there\n+   */\n+  void relationshipExplicitIndexQuery(\n+      RelationshipExplicitIndexCursor cursor, String index, String key, Object query, long source, long target)\n+      throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n-     * Check whether a relationship index with the given name exists.\n-     *\n-     * @param indexName name of relationship index to check for existence.\n-     * @param customConfiguration if {@code null} the configuration of existing won't be matched, otherwise it will\n-     * be matched and a mismatch will throw {@link IllegalArgumentException}.\n-     * @return whether or not relationship explicit index with name {@code indexName} exists.\n-     * @throws IllegalArgumentException on index existence with provided name, but mismatching {@code customConfiguration}.\n-     */\n-    boolean relationshipExplicitIndexExists( String indexName, Map<String,String> customConfiguration );\n+  /**\n+   * Check whether a relationship index with the given name exists.\n+   *\n+   * @param indexName           name of relationship index to check for existence.\n+   * @param customConfiguration if {@code null} the configuration of existing won't be matched, otherwise it will\n+   *                            be matched and a mismatch will throw {@link IllegalArgumentException}.\n+   * @return whether or not relationship explicit index with name {@code indexName} exists.\n+   * @throws IllegalArgumentException on index existence with provided name, but mismatching {@code customConfiguration}.\n+   */\n+  boolean relationshipExplicitIndexExists(String indexName, Map<String, String> customConfiguration);\n \n-    /**\n-     * Retrieve all node explicit indexes\n-     * @return the names of all node explicit indexes\n-     */\n-    String[] nodeExplicitIndexesGetAll();\n+  /**\n+   * Retrieve all node explicit indexes\n+   *\n+   * @return the names of all node explicit indexes\n+   */\n+  String[] nodeExplicitIndexesGetAll();\n \n-    /**\n-     * Retrieve all relationship explicit indexes\n-     * @return the names of all relationship explicit indexes\n-     */\n-    String[] relationshipExplicitIndexesGetAll();\n+  /**\n+   * Retrieve all relationship explicit indexes\n+   *\n+   * @return the names of all relationship explicit indexes\n+   */\n+  String[] relationshipExplicitIndexesGetAll();\n \n-    /**\n-     * Return the configuration of the given index\n-     * @param indexName the name of the index\n-     * @return the configuration of the index with the given name\n-     * @throws ExplicitIndexNotFoundKernelException if the index doesn't exist\n-     */\n-    Map<String, String> relationshipExplicitIndexGetConfiguration( String indexName )\n-            throws ExplicitIndexNotFoundKernelException;\n+  /**\n+   * Return the configuration of the given index\n+   *\n+   * @param indexName the name of the index\n+   * @return the configuration of the index with the given name\n+   * @throws ExplicitIndexNotFoundKernelException if the index doesn't exist\n+   */\n+  Map<String, String> relationshipExplicitIndexGetConfiguration(String indexName)\n+      throws ExplicitIndexNotFoundKernelException;\n }\n",
            "diff_size": 122
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 192).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2901/ExplicitIndexRead.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2901/ExplicitIndexRead.java\nindex 4fb01d017a8..0dc5a349a8b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2901/ExplicitIndexRead.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2901/ExplicitIndexRead.java\n@@ -37,10 +37,9 @@ public interface ExplicitIndexRead\n      * @param value the value corresponding to the key\n      * @throws ExplicitIndexNotFoundKernelException if index is not there\n      */\n-    void nodeExplicitIndexLookup( NodeExplicitIndexCursor cursor, String index, String key, Object value )\n-            throws ExplicitIndexNotFoundKernelException;\n+    void nodeExplicitIndexLookup( NodeExplicitIndexCursor cursor, String index, String key, Object value ) throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n+/**\n      * Queries explicit index\n      *\n      * @param cursor the cursor to use for consuming the result\n@@ -48,10 +47,9 @@ public interface ExplicitIndexRead\n      * @param query the query object\n      * @throws ExplicitIndexNotFoundKernelException if index is not there\n      */\n-    void nodeExplicitIndexQuery( NodeExplicitIndexCursor cursor, String index, Object query )\n-            throws ExplicitIndexNotFoundKernelException;\n+    void nodeExplicitIndexQuery( NodeExplicitIndexCursor cursor, String index, Object query ) throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n+/**\n      * Queries explicit index\n      *\n      * @param cursor the cursor to use for consuming the result\n@@ -60,10 +58,9 @@ public interface ExplicitIndexRead\n      * @param query the query object\n      * @throws ExplicitIndexNotFoundKernelException if index is not there\n      */\n-    void nodeExplicitIndexQuery( NodeExplicitIndexCursor cursor, String index, String key, Object query )\n-            throws ExplicitIndexNotFoundKernelException;\n+    void nodeExplicitIndexQuery( NodeExplicitIndexCursor cursor, String index, String key, Object query ) throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n+/**\n      * Check whether a node index with the given name exists.\n      *\n      * @param indexName name of node index to check for existence.\n@@ -80,10 +77,9 @@ public interface ExplicitIndexRead\n      * @return the configuration of the index with the given name\n      * @throws ExplicitIndexNotFoundKernelException if the index is not there\n      */\n-    Map<String, String> nodeExplicitIndexGetConfiguration( String indexName )\n-            throws ExplicitIndexNotFoundKernelException;\n+    Map<String,String> nodeExplicitIndexGetConfiguration( String indexName ) throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n+/**\n      * Finds item from explicit index\n      *\n      * @param cursor the cursor to use for consuming the result\n@@ -92,11 +88,9 @@ public interface ExplicitIndexRead\n      * @param value the value corresponding to the key\n      * @throws ExplicitIndexNotFoundKernelException if index is not there\n      */\n-    void relationshipExplicitIndexLookup(\n-            RelationshipExplicitIndexCursor cursor, String index, String key, Object value, long source, long target )\n-            throws ExplicitIndexNotFoundKernelException;\n+    void relationshipExplicitIndexLookup( RelationshipExplicitIndexCursor cursor, String index, String key, Object value, long source, long target ) throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n+/**\n      * Queries explicit index\n      *\n      * @param cursor the cursor to use for consuming the result\n@@ -106,11 +100,9 @@ public interface ExplicitIndexRead\n      * @param target the source node or <code>-1</code> if any\n      * @throws ExplicitIndexNotFoundKernelException if index is not there\n      */\n-    void relationshipExplicitIndexQuery(\n-            RelationshipExplicitIndexCursor cursor, String index, Object query, long source, long target )\n-            throws ExplicitIndexNotFoundKernelException;\n+    void relationshipExplicitIndexQuery( RelationshipExplicitIndexCursor cursor, String index, Object query, long source, long target ) throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n+/**\n      * Queries explicit index\n      *\n      * @param cursor the cursor to use for consuming the result\n@@ -121,11 +113,9 @@ public interface ExplicitIndexRead\n      * @param target the source node or <code>-1</code> if any\n      * @throws ExplicitIndexNotFoundKernelException if index is not there\n      */\n-    void relationshipExplicitIndexQuery(\n-            RelationshipExplicitIndexCursor cursor, String index, String key, Object query, long source, long target )\n-            throws ExplicitIndexNotFoundKernelException;\n+    void relationshipExplicitIndexQuery( RelationshipExplicitIndexCursor cursor, String index, String key, Object query, long source, long target ) throws ExplicitIndexNotFoundKernelException;\n \n-    /**\n+/**\n      * Check whether a relationship index with the given name exists.\n      *\n      * @param indexName name of relationship index to check for existence.\n@@ -154,6 +144,5 @@ public interface ExplicitIndexRead\n      * @return the configuration of the index with the given name\n      * @throws ExplicitIndexNotFoundKernelException if the index doesn't exist\n      */\n-    Map<String, String> relationshipExplicitIndexGetConfiguration( String indexName )\n-            throws ExplicitIndexNotFoundKernelException;\n-}\n+    Map<String,String> relationshipExplicitIndexGetConfiguration( String indexName ) throws ExplicitIndexNotFoundKernelException;\n+    }\n\\ No newline at end of file\n",
            "diff_size": 27
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}