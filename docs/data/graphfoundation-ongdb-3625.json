{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3625",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "6",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "75",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3625/DatabaseMetadataService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3625/DatabaseMetadataService.java\nindex 57a6359d498..6efaa653832 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3625/DatabaseMetadataService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3625/DatabaseMetadataService.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.rest.web;\n \n import javax.ws.rs.DefaultValue;\n@@ -33,55 +34,54 @@ import org.neo4j.kernel.internal.GraphDatabaseAPI;\n import org.neo4j.server.database.Database;\n import org.neo4j.server.rest.repr.RepresentationWriteHandler;\n \n-@Path( \"/relationship/types\" )\n+@Path(\"/relationship/types\")\n public class DatabaseMetadataService\n {\n-    private final Database database;\n-    private RepresentationWriteHandler representationWriteHandler = RepresentationWriteHandler.DO_NOTHING;\n+  private final Database database;\n+  private RepresentationWriteHandler representationWriteHandler = RepresentationWriteHandler.DO_NOTHING;\n \n-    public DatabaseMetadataService( @Context Database database )\n-    {\n-        this.database = database;\n-    }\n+  public DatabaseMetadataService(@Context Database database)\n+  {\n+    this.database = database;\n+  }\n \n-    @GET\n-    @Produces( MediaType.APPLICATION_JSON )\n-    public Response getRelationshipTypes( @QueryParam( \"in_use\" ) @DefaultValue( \"true\" ) boolean inUse )\n+  @GET\n+  @Produces(MediaType.APPLICATION_JSON)\n+  public Response getRelationshipTypes(@QueryParam(\"in_use\") @DefaultValue(\"true\") boolean inUse)\n+  {\n+    try\n     {\n-        try\n-        {\n-            GraphDatabaseAPI db = database.getGraph();\n-            Iterable<RelationshipType> relationshipTypes = inUse\n-                                                           ? db.getAllRelationshipTypesInUse()\n-                                                           : db.getAllRelationshipTypes();\n-            return Response.ok()\n-                    .type( MediaType.APPLICATION_JSON )\n-                    .entity( generateJsonRepresentation( relationshipTypes ) )\n-                    .build();\n-        }\n-        finally\n-        {\n-            representationWriteHandler.onRepresentationFinal();\n-        }\n-    }\n-\n-    private String generateJsonRepresentation( Iterable<RelationshipType> relationshipTypes )\n+      GraphDatabaseAPI db = database.getGraph();\n+      Iterable<RelationshipType> relationshipTypes = inUse\n+          ? db.getAllRelationshipTypesInUse()\n+          : db.getAllRelationshipTypes();\n+      return Response.ok()\n+          .type(MediaType.APPLICATION_JSON)\n+          .entity(generateJsonRepresentation(relationshipTypes))\n+          .build();\n+    } finally\n     {\n-        StringBuilder sb = new StringBuilder();\n-        sb.append( \"[\" );\n-        for ( RelationshipType rt : relationshipTypes )\n-        {\n-            sb.append( \"\\\"\" );\n-            sb.append( rt.name() );\n-            sb.append( \"\\\",\" );\n-        }\n-        sb.append( \"]\" );\n-        return sb.toString()\n-                .replaceAll( \",]\", \"]\" );\n+      representationWriteHandler.onRepresentationFinal();\n     }\n+  }\n \n-    public void setRepresentationWriteHandler( RepresentationWriteHandler representationWriteHandler )\n+  private String generateJsonRepresentation(Iterable<RelationshipType> relationshipTypes)\n+  {\n+    StringBuilder sb = new StringBuilder();\n+    sb.append(\"[\");\n+    for (RelationshipType rt : relationshipTypes)\n     {\n-        this.representationWriteHandler = representationWriteHandler;\n+      sb.append(\"\\\"\");\n+      sb.append(rt.name());\n+      sb.append(\"\\\",\");\n     }\n+    sb.append(\"]\");\n+    return sb.toString()\n+        .replaceAll(\",]\", \"]\");\n+  }\n+\n+  public void setRepresentationWriteHandler(RepresentationWriteHandler representationWriteHandler)\n+  {\n+    this.representationWriteHandler = representationWriteHandler;\n+  }\n }\n",
            "diff_size": 60
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3625/DatabaseMetadataService.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3625/DatabaseMetadataService.java\nindex 57a6359d498..f635a5c5124 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3625/DatabaseMetadataService.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3625/DatabaseMetadataService.java\n@@ -51,13 +51,8 @@ public class DatabaseMetadataService\n         try\n         {\n             GraphDatabaseAPI db = database.getGraph();\n-            Iterable<RelationshipType> relationshipTypes = inUse\n-                                                           ? db.getAllRelationshipTypesInUse()\n-                                                           : db.getAllRelationshipTypes();\n-            return Response.ok()\n-                    .type( MediaType.APPLICATION_JSON )\n-                    .entity( generateJsonRepresentation( relationshipTypes ) )\n-                    .build();\n+            Iterable<RelationshipType> relationshipTypes = inUse ? db.getAllRelationshipTypesInUse() : db.getAllRelationshipTypes();\n+return Response.ok().type( MediaType.APPLICATION_JSON ).entity( generateJsonRepresentation( relationshipTypes ) ).build();\n         }\n         finally\n         {\n@@ -76,12 +71,11 @@ public class DatabaseMetadataService\n             sb.append( \"\\\",\" );\n         }\n         sb.append( \"]\" );\n-        return sb.toString()\n-                .replaceAll( \",]\", \"]\" );\n+        return sb.toString().replaceAll( \",]\", \"]\" );\n     }\n \n     public void setRepresentationWriteHandler( RepresentationWriteHandler representationWriteHandler )\n     {\n         this.representationWriteHandler = representationWriteHandler;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}