{
    "project_name": "StevenLooman-sonar-magik",
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "160",
                "severity": "warning",
                "message": "Comment has incorrect indentation level 0, expected is 8, indentation should be the same level as line 161.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
            }
        ]
    },
    "source_code": "\n    b.rule(MAGIK).is(\n//        b.zeroOrMore(\n        b.oneOrMore(\n            b.firstOf(\n                PACKAGE_SPECIFICATION,",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/14/MagikGrammar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler/14/MagikGrammar.java\nindex 5bffa57b48b..274f758feeb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/14/MagikGrammar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler/14/MagikGrammar.java\n@@ -156,8 +156,7 @@ public enum MagikGrammar implements GrammarRuleKey {\n         b.sequence(SPACING_NO_LB, b.regexp(NEWLINE_REGEXP)),\n         b.sequence(SPACING_NO_LB, b.endOfInput()))).skip();\n \n-    b.rule(MAGIK).is(\n-//        b.zeroOrMore(\n+    b.rule(MAGIK).is(//        b.zeroOrMore(\n         b.oneOrMore(\n             b.firstOf(\n                 PACKAGE_SPECIFICATION,\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "166",
                    "severity": "warning",
                    "message": "Comment has incorrect indentation level 0, expected is 8, indentation should be the same level as line 167.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/14/MagikGrammar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/intellij/14/MagikGrammar.java\nindex 5bffa57b48b..c777dc69dae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/14/MagikGrammar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/intellij/14/MagikGrammar.java\n@@ -101,27 +101,32 @@ public enum MagikGrammar implements GrammarRuleKey {\n   // CHECKSTYLE.OFF: LineLength\n   private static final String STRING_DOUBLE_REGEXP = \"(\\\"[^\\\"]*\\\")\";\n   private static final String STRING_SINGLE_REGEXP = \"('[^']*')\";\n-  private static final String STRING_REGEXP = \"(?s)(\" + STRING_DOUBLE_REGEXP + \"|\" + STRING_SINGLE_REGEXP + \")\";\n+  private static final String STRING_REGEXP =\n+      \"(?s)(\" + STRING_DOUBLE_REGEXP + \"|\" + STRING_SINGLE_REGEXP + \")\";\n \n   private static final String DIGITS_REGEXP = \"[0-9]+\";\n   private static final String HEX_DIGITS_REGEXP = \"[0-9a-f]+\";\n   private static final String RADIX_REGEXP = \"(?is)r\" + HEX_DIGITS_REGEXP;\n   private static final String EXPONENT_REGEXP = \"(?is)(e|&)[+-]?\" + DIGITS_REGEXP;\n   private static final String DECIMAL_REGEXP = \"\\\\.\" + DIGITS_REGEXP;\n-  private static final String NUMBER_REGEXP = DIGITS_REGEXP + \"(\" + RADIX_REGEXP + \"|\" + EXPONENT_REGEXP + \"|\" + DECIMAL_REGEXP + \")*\";\n+  private static final String NUMBER_REGEXP =\n+      DIGITS_REGEXP + \"(\" + RADIX_REGEXP + \"|\" + EXPONENT_REGEXP + \"|\" + DECIMAL_REGEXP + \")*\";\n \n   private static final String CHARACTER_REGEXP = \"%(\\\\W|\\\\w+)\";\n   private static final String COMMENT_REGEXP = \"(?s)#[^\\r\\n]*\";\n \n   private static final String SIMPLE_IDENTIFIER_REGEXP = \"([a-z!?]|\\\\\\\\.)([a-z0-9_!?]|\\\\\\\\.)*\";\n   private static final String PIPED_IDENTIFIER_REGEXP = \"\\\\|[^\\\\|]*\\\\|\";\n-  private static final String BARE_IDENTIFIER_REGEXP = \"(\" + SIMPLE_IDENTIFIER_REGEXP + \"|\" + PIPED_IDENTIFIER_REGEXP + \")\";\n+  private static final String BARE_IDENTIFIER_REGEXP =\n+      \"(\" + SIMPLE_IDENTIFIER_REGEXP + \"|\" + PIPED_IDENTIFIER_REGEXP + \")\";\n   private static final String LABEL_REGEXP = \"(?is)\" + BARE_IDENTIFIER_REGEXP + \"+\";\n-  private static final String IDENTIFIER_REGEXP = \"(?is)(\" + BARE_IDENTIFIER_REGEXP + \":\" + \")?(\" + BARE_IDENTIFIER_REGEXP + \")+\";\n+  private static final String IDENTIFIER_REGEXP =\n+      \"(?is)(\" + BARE_IDENTIFIER_REGEXP + \":\" + \")?(\" + BARE_IDENTIFIER_REGEXP + \")+\";\n \n   private static final String SIMPLE_SYMBOL_REGEXP = \"([a-z0-9_!?]|\\\\\\\\.)+\";\n   private static final String PIPED_SYMBOL_REGEXP = \"(\\\\|[^\\\\|]*\\\\|)\";\n-  private static final String SYMBOL_REGEXP = \"(?is):(\" + SIMPLE_SYMBOL_REGEXP + \"|\" + PIPED_SYMBOL_REGEXP + \")+\";\n+  private static final String SYMBOL_REGEXP =\n+      \"(?is):(\" + SIMPLE_SYMBOL_REGEXP + \"|\" + PIPED_SYMBOL_REGEXP + \")+\";\n \n   private static final String LINE_TERMINATOR_REGEXP = \"\\\\n\\\\r\";\n   private static final String WHITESPACE_REGEXP = \"\\\\t\\\\v\\\\f\\\\u0020\\\\u00A0\\\\uFEFF\";\n@@ -132,6 +137,7 @@ public enum MagikGrammar implements GrammarRuleKey {\n \n   /**\n    * Create a new LexerlessGrammar for the Magik language.\n+   *\n    * @return Grammar for the Magik language\n    */\n   public static LexerlessGrammar create() {\n@@ -226,18 +232,44 @@ public enum MagikGrammar implements GrammarRuleKey {\n     b.rule(GATHER).is(MagikKeyword.GATHER, EXPRESSIONS);\n \n     b.rule(EXPRESSION).is(ASSIGNMENT_EXPRESSION);\n-    b.rule(ASSIGNMENT_EXPRESSION).is(AUGMENTED_ASSIGNMENT_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON), AUGMENTED_ASSIGNMENT_EXPRESSION)).skipIfOneChild();\n-    b.rule(AUGMENTED_ASSIGNMENT_EXPRESSION).is(OR_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, OPERATOR, b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON), OR_EXPRESSION)).skipIfOneChild();\n-    b.rule(OR_EXPRESSION).is(XOR_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikKeyword.ORIF, MagikKeyword.OR), XOR_EXPRESSION)).skipIfOneChild();\n-    b.rule(XOR_EXPRESSION).is(AND_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, MagikKeyword.XOR, AND_EXPRESSION)).skipIfOneChild();\n-    b.rule(AND_EXPRESSION).is(EQUALITY_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikKeyword.ANDIF, MagikKeyword.AND), EQUALITY_EXPRESSION)).skipIfOneChild();\n-    b.rule(EQUALITY_EXPRESSION).is(RELATIONAL_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikKeyword.ISNT, MagikKeyword.IS, MagikKeyword.CF, MagikPunctuator.EQ, MagikPunctuator.NEQ, MagikPunctuator.NE), RELATIONAL_EXPRESSION)).skipIfOneChild();\n-    b.rule(RELATIONAL_EXPRESSION).is(ADDITIVE_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikPunctuator.GE, MagikPunctuator.GT, MagikPunctuator.LE, MagikPunctuator.LT), ADDITIVE_EXPRESSION)).skipIfOneChild();\n-    b.rule(ADDITIVE_EXPRESSION).is(MULTIPLICATIVE_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikPunctuator.PLUS, MagikPunctuator.MINUS), MULTIPLICATIVE_EXPRESSION)).skipIfOneChild();\n-    b.rule(MULTIPLICATIVE_EXPRESSION).is(EXPONENTIAL_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikPunctuator.STAR, MagikPunctuator.DIV, MagikKeyword.DIV, MagikKeyword.MOD), EXPONENTIAL_EXPRESSION)).skipIfOneChild();\n-    b.rule(EXPONENTIAL_EXPRESSION).is(UNARY_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, MagikPunctuator.EXP, UNARY_EXPRESSION)).skipIfOneChild();\n+    b.rule(ASSIGNMENT_EXPRESSION).is(AUGMENTED_ASSIGNMENT_EXPRESSION,\n+        b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB,\n+            b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON),\n+            AUGMENTED_ASSIGNMENT_EXPRESSION)).skipIfOneChild();\n+    b.rule(AUGMENTED_ASSIGNMENT_EXPRESSION).is(OR_EXPRESSION,\n+        b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, OPERATOR,\n+            b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON), OR_EXPRESSION))\n+        .skipIfOneChild();\n+    b.rule(OR_EXPRESSION).is(XOR_EXPRESSION,\n+        b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikKeyword.ORIF, MagikKeyword.OR),\n+            XOR_EXPRESSION)).skipIfOneChild();\n+    b.rule(XOR_EXPRESSION).is(AND_EXPRESSION,\n+        b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, MagikKeyword.XOR, AND_EXPRESSION))\n+        .skipIfOneChild();\n+    b.rule(AND_EXPRESSION).is(EQUALITY_EXPRESSION,\n+        b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikKeyword.ANDIF, MagikKeyword.AND),\n+            EQUALITY_EXPRESSION)).skipIfOneChild();\n+    b.rule(EQUALITY_EXPRESSION).is(RELATIONAL_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB,\n+        b.firstOf(MagikKeyword.ISNT, MagikKeyword.IS, MagikKeyword.CF, MagikPunctuator.EQ,\n+            MagikPunctuator.NEQ, MagikPunctuator.NE), RELATIONAL_EXPRESSION)).skipIfOneChild();\n+    b.rule(RELATIONAL_EXPRESSION).is(ADDITIVE_EXPRESSION, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB,\n+        b.firstOf(MagikPunctuator.GE, MagikPunctuator.GT, MagikPunctuator.LE, MagikPunctuator.LT),\n+        ADDITIVE_EXPRESSION)).skipIfOneChild();\n+    b.rule(ADDITIVE_EXPRESSION).is(MULTIPLICATIVE_EXPRESSION,\n+        b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB,\n+            b.firstOf(MagikPunctuator.PLUS, MagikPunctuator.MINUS), MULTIPLICATIVE_EXPRESSION))\n+        .skipIfOneChild();\n+    b.rule(MULTIPLICATIVE_EXPRESSION).is(EXPONENTIAL_EXPRESSION,\n+        b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB,\n+            b.firstOf(MagikPunctuator.STAR, MagikPunctuator.DIV, MagikKeyword.DIV,\n+                MagikKeyword.MOD), EXPONENTIAL_EXPRESSION)).skipIfOneChild();\n+    b.rule(EXPONENTIAL_EXPRESSION).is(UNARY_EXPRESSION,\n+        b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, MagikPunctuator.EXP, UNARY_EXPRESSION))\n+        .skipIfOneChild();\n     b.rule(UNARY_EXPRESSION).is(b.firstOf(\n-        b.sequence(b.firstOf(MagikPunctuator.NOT, MagikKeyword.NOT, MagikPunctuator.PLUS, MagikPunctuator.MINUS, MagikKeyword.ALLRESULTS, MagikKeyword.SCATTER), UNARY_EXPRESSION),\n+        b.sequence(b.firstOf(MagikPunctuator.NOT, MagikKeyword.NOT, MagikPunctuator.PLUS,\n+            MagikPunctuator.MINUS, MagikKeyword.ALLRESULTS, MagikKeyword.SCATTER),\n+            UNARY_EXPRESSION),\n         POSTFIX_EXPRESSION)).skipIfOneChild();\n     b.rule(POSTFIX_EXPRESSION).is(\n         ATOM,\n@@ -281,15 +313,18 @@ public enum MagikGrammar implements GrammarRuleKey {\n             MagikKeyword.MAYBE,\n             MagikKeyword.PRIMITIVE,\n             MagikKeyword.THISTHREAD\n-            ));\n+        ));\n \n     b.rule(METHOD_INVOCATION).is(\n         MagikPunctuator.DOT, IDENTIFIER,\n-        b.optional(SPACING_NO_LB, NEXT_NOT_LB, MagikPunctuator.PAREN_L, ARGUMENTS, MagikPunctuator.PAREN_R),\n-        b.optional(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON), EXPRESSION));\n+        b.optional(SPACING_NO_LB, NEXT_NOT_LB, MagikPunctuator.PAREN_L, ARGUMENTS,\n+            MagikPunctuator.PAREN_R),\n+        b.optional(SPACING_NO_LB, NEXT_NOT_LB,\n+            b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON), EXPRESSION));\n     b.rule(INDEXED_INVOCATION).is(\n         MagikPunctuator.SQUARE_L, ARGUMENTS, MagikPunctuator.SQUARE_R,\n-        b.optional(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON), EXPRESSION));\n+        b.optional(SPACING_NO_LB, NEXT_NOT_LB,\n+            b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON), EXPRESSION));\n     b.rule(PROCEDURE_INVOCATION).is(MagikPunctuator.PAREN_L, ARGUMENTS, MagikPunctuator.PAREN_R);\n   }\n \n@@ -320,7 +355,8 @@ public enum MagikGrammar implements GrammarRuleKey {\n                 MagikKeyword.IMPORT)),\n         b.firstOf(\n             MULTI_VARIABLE_DECLARATION,\n-            b.sequence(VARIABLE_DECLARATION, b.zeroOrMore(MagikPunctuator.COMMA, VARIABLE_DECLARATION))),\n+            b.sequence(VARIABLE_DECLARATION,\n+                b.zeroOrMore(MagikPunctuator.COMMA, VARIABLE_DECLARATION))),\n         EOS);\n     b.rule(MULTI_VARIABLE_DECLARATION).is(\n         b.sequence(MagikPunctuator.PAREN_L, IDENTIFIERS_WITH_GATHER, MagikPunctuator.PAREN_R,\n@@ -340,7 +376,8 @@ public enum MagikGrammar implements GrammarRuleKey {\n         MagikPunctuator.EMIT,\n         b.firstOf(\n             EXPRESSIONS,\n-            b.sequence(b.optional(MagikPunctuator.PAREN_L), EXPRESSIONS, b.optional(MagikPunctuator.PAREN_R))\n+            b.sequence(b.optional(MagikPunctuator.PAREN_L), EXPRESSIONS,\n+                b.optional(MagikPunctuator.PAREN_R))\n         ),\n         EOS);\n     b.rule(STATEMENT_SEPARATOR).is(MagikPunctuator.SEMICOLON).skip();\n@@ -356,7 +393,8 @@ public enum MagikGrammar implements GrammarRuleKey {\n     b.rule(THROW_STATEMENT).is(\n         MagikKeyword.THROW, EXPRESSION,\n         b.optional(SPACING_NO_LB, NEXT_NOT_LB, MagikKeyword.WITH, EXPRESSION));\n-    b.rule(PROTECT_BLOCK).is(MagikKeyword.PROTECT, BODY, MagikKeyword.PROTECTION, BODY, MagikKeyword.ENDPROTECT);\n+    b.rule(PROTECT_BLOCK)\n+        .is(MagikKeyword.PROTECT, BODY, MagikKeyword.PROTECTION, BODY, MagikKeyword.ENDPROTECT);\n     b.rule(TRY_BLOCK).is(\n         MagikKeyword.TRY, b.optional(MagikKeyword.WITH, IDENTIFIERS),\n         BODY,\n@@ -367,7 +405,8 @@ public enum MagikGrammar implements GrammarRuleKey {\n         b.optional(SPACING_NO_LB, NEXT_NOT_LB, EXPRESSION),\n         BODY, MagikKeyword.ENDCATCH);\n     b.rule(LOCK_BLOCK).is(MagikKeyword.LOCK, EXPRESSION, BODY, MagikKeyword.ENDLOCK);\n-    b.rule(IF).is(MagikKeyword.IF, EXPRESSION, MagikKeyword.THEN, BODY, b.zeroOrMore(ELIF), b.optional(ELSE), MagikKeyword.ENDIF);\n+    b.rule(IF).is(MagikKeyword.IF, EXPRESSION, MagikKeyword.THEN, BODY, b.zeroOrMore(ELIF),\n+        b.optional(ELSE), MagikKeyword.ENDIF);\n     b.rule(ELIF).is(MagikKeyword.ELIF, EXPRESSION, MagikKeyword.THEN, BODY);\n     b.rule(ELSE).is(MagikKeyword.ELSE, BODY);\n     b.rule(FOR).is(MagikKeyword.FOR, IDENTIFIERS_WITH_GATHER, OVER);\n@@ -376,11 +415,15 @@ public enum MagikGrammar implements GrammarRuleKey {\n     b.rule(LOOP).is(\n         MagikKeyword.LOOP, b.optional(LABEL),\n         BODY,\n-        b.optional(MagikKeyword.FINALLY, b.optional(MagikKeyword.WITH, IDENTIFIERS_WITH_GATHER), BODY),\n+        b.optional(MagikKeyword.FINALLY, b.optional(MagikKeyword.WITH, IDENTIFIERS_WITH_GATHER),\n+            BODY),\n         MagikKeyword.ENDLOOP);\n-    b.rule(LEAVE_STATEMENT).is(MagikKeyword.LEAVE, b.optional(LABEL), b.optional(SPACING_NO_LB, NEXT_NOT_LB, MagikKeyword.WITH, EXPRESSIONS));\n-    b.rule(CONTINUE_STATEMENT).is(MagikKeyword.CONTINUE, b.optional(LABEL), b.optional(SPACING_NO_LB, NEXT_NOT_LB, MagikKeyword.WITH, EXPRESSIONS));\n-    b.rule(LOOPBODY).is(MagikKeyword.LOOPBODY, MagikPunctuator.PAREN_L, EXPRESSIONS, MagikPunctuator.PAREN_R);\n+    b.rule(LEAVE_STATEMENT).is(MagikKeyword.LEAVE, b.optional(LABEL),\n+        b.optional(SPACING_NO_LB, NEXT_NOT_LB, MagikKeyword.WITH, EXPRESSIONS));\n+    b.rule(CONTINUE_STATEMENT).is(MagikKeyword.CONTINUE, b.optional(LABEL),\n+        b.optional(SPACING_NO_LB, NEXT_NOT_LB, MagikKeyword.WITH, EXPRESSIONS));\n+    b.rule(LOOPBODY)\n+        .is(MagikKeyword.LOOPBODY, MagikPunctuator.PAREN_L, EXPRESSIONS, MagikPunctuator.PAREN_R);\n   }\n \n   private static void constructs(LexerlessGrammarBuilder b) {\n@@ -389,10 +432,15 @@ public enum MagikGrammar implements GrammarRuleKey {\n         MagikKeyword.METHOD, IDENTIFIER,\n         b.firstOf(\n             b.sequence(MagikPunctuator.DOT, IDENTIFIER,\n-                b.optional(SPACING_NO_LB, NEXT_NOT_LB, MagikPunctuator.PAREN_L, PARAMETERS, MagikPunctuator.PAREN_R),\n-                b.optional(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON), ASSIGNMENT_PARAMETER)),\n+                b.optional(SPACING_NO_LB, NEXT_NOT_LB, MagikPunctuator.PAREN_L, PARAMETERS,\n+                    MagikPunctuator.PAREN_R),\n+                b.optional(SPACING_NO_LB, NEXT_NOT_LB,\n+                    b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON),\n+                    ASSIGNMENT_PARAMETER)),\n             b.sequence(MagikPunctuator.SQUARE_L, PARAMETERS, MagikPunctuator.SQUARE_R,\n-                b.optional(SPACING_NO_LB, NEXT_NOT_LB, b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON), ASSIGNMENT_PARAMETER))),\n+                b.optional(SPACING_NO_LB, NEXT_NOT_LB,\n+                    b.firstOf(MagikPunctuator.CHEVRON, MagikPunctuator.BOOT_CHEVRON),\n+                    ASSIGNMENT_PARAMETER))),\n         BODY,\n         MagikKeyword.ENDMETHOD, EOS);\n \n@@ -404,7 +452,8 @@ public enum MagikGrammar implements GrammarRuleKey {\n         PARAMETER\n     );\n \n-    b.rule(ARGUMENTS).is(b.optional(ARGUMENT, b.zeroOrMore(b.optional(MagikPunctuator.COMMA), ARGUMENT)));\n+    b.rule(ARGUMENTS)\n+        .is(b.optional(ARGUMENT, b.zeroOrMore(b.optional(MagikPunctuator.COMMA), ARGUMENT)));\n     b.rule(ARGUMENT).is(EXPRESSION);\n \n     b.rule(EXPRESSIONS).is(\n@@ -414,7 +463,8 @@ public enum MagikGrammar implements GrammarRuleKey {\n     b.rule(IDENTIFIERS).is(\n         IDENTIFIER, b.zeroOrMore(SPACING_NO_LB, NEXT_NOT_LB, MagikPunctuator.COMMA, IDENTIFIER));\n     b.rule(IDENTIFIERS_WITH_GATHER).is(\n-        b.optional(MagikKeyword.GATHER), IDENTIFIER, b.zeroOrMore(MagikPunctuator.COMMA, b.optional(MagikKeyword.GATHER), IDENTIFIER));\n+        b.optional(MagikKeyword.GATHER), IDENTIFIER,\n+        b.zeroOrMore(MagikPunctuator.COMMA, b.optional(MagikKeyword.GATHER), IDENTIFIER));\n \n     b.rule(OPERATOR).is(\n         b.firstOf(\n@@ -425,14 +475,16 @@ public enum MagikGrammar implements GrammarRuleKey {\n             MagikPunctuator.PLUS, MagikPunctuator.MINUS,\n             MagikPunctuator.STAR, MagikPunctuator.DIV,\n             MagikPunctuator.EXP\n-            )).skip();\n+        )).skip();\n \n-    b.rule(PRAGMA).is(MagikKeyword.PRAGMA, SPACING, MagikPunctuator.PAREN_L, PRAGMA_PARAMS, MagikPunctuator.PAREN_R);\n+    b.rule(PRAGMA).is(MagikKeyword.PRAGMA, SPACING, MagikPunctuator.PAREN_L, PRAGMA_PARAMS,\n+        MagikPunctuator.PAREN_R);\n     b.rule(PRAGMA_PARAMS).is(PRAGMA_PARAM, b.zeroOrMore(MagikPunctuator.COMMA, PRAGMA_PARAM));\n     b.rule(PRAGMA_PARAM).is(IDENTIFIER, SPACING, MagikPunctuator.EQ, PRAGMA_VALUE);\n     b.rule(PRAGMA_VALUE).is(b.firstOf(\n         IDENTIFIER,\n-        b.sequence(MagikPunctuator.BRACE_L, IDENTIFIER, b.zeroOrMore(MagikPunctuator.COMMA, IDENTIFIER), MagikPunctuator.BRACE_R)));\n+        b.sequence(MagikPunctuator.BRACE_L, IDENTIFIER,\n+            b.zeroOrMore(MagikPunctuator.COMMA, IDENTIFIER), MagikPunctuator.BRACE_R)));\n \n     b.rule(PACKAGE_SPECIFICATION).is(MagikKeyword.PACKAGE, IDENTIFIER, EOS);\n   }\n",
            "diff_size": 88
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/14/MagikGrammar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_random/14/MagikGrammar.java\nindex 5bffa57b48b..274f758feeb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/14/MagikGrammar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_random/14/MagikGrammar.java\n@@ -156,8 +156,7 @@ public enum MagikGrammar implements GrammarRuleKey {\n         b.sequence(SPACING_NO_LB, b.regexp(NEWLINE_REGEXP)),\n         b.sequence(SPACING_NO_LB, b.endOfInput()))).skip();\n \n-    b.rule(MAGIK).is(\n-//        b.zeroOrMore(\n+    b.rule(MAGIK).is(//        b.zeroOrMore(\n         b.oneOrMore(\n             b.firstOf(\n                 PACKAGE_SPECIFICATION,\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/14/MagikGrammar.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_three_grams/14/MagikGrammar.java\nindex 5bffa57b48b..274f758feeb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/errored/1/14/MagikGrammar.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/StevenLooman-sonar-magik/styler_three_grams/14/MagikGrammar.java\n@@ -156,8 +156,7 @@ public enum MagikGrammar implements GrammarRuleKey {\n         b.sequence(SPACING_NO_LB, b.regexp(NEWLINE_REGEXP)),\n         b.sequence(SPACING_NO_LB, b.endOfInput()))).skip();\n \n-    b.rule(MAGIK).is(\n-//        b.zeroOrMore(\n+    b.rule(MAGIK).is(//        b.zeroOrMore(\n         b.oneOrMore(\n             b.firstOf(\n                 PACKAGE_SPECIFICATION,\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}