{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4452",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "74",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4452/PhysicalFlushableChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4452/PhysicalFlushableChannel.java\nindex f948b34025b..4cbe3036750 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4452/PhysicalFlushableChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4452/PhysicalFlushableChannel.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.transaction.log;\n \n import java.io.Flushable;\n@@ -35,166 +36,165 @@ import static java.lang.Math.min;\n  */\n public class PhysicalFlushableChannel implements FlushableChannel\n {\n-    public static final int DEFAULT_BUFFER_SIZE = (int) ByteUnit.kibiBytes( 512 );\n-\n-    private volatile boolean closed;\n-\n-    protected final ByteBuffer buffer;\n-    protected StoreChannel channel;\n-\n-    public PhysicalFlushableChannel( StoreChannel channel )\n-    {\n-        this( channel, DEFAULT_BUFFER_SIZE );\n-    }\n-\n-    public PhysicalFlushableChannel( StoreChannel channel, int bufferSize )\n-    {\n-        this.channel = channel;\n-        this.buffer = ByteBuffer.allocate( bufferSize );\n-    }\n-\n-    void setChannel( LogVersionedStoreChannel channel )\n-    {\n-        this.channel = channel;\n-    }\n-\n-    /**\n-     * External synchronization between this method and close is required so that they aren't called concurrently.\n-     * Currently that's done by acquiring the PhysicalLogFile monitor.\n-     */\n-    @Override\n-    public Flushable prepareForFlush() throws IOException\n-    {\n-        buffer.flip();\n-        StoreChannel channel = this.channel;\n-        try\n-        {\n-            channel.writeAll( buffer );\n-        }\n-        catch ( ClosedChannelException e )\n-        {\n-            handleClosedChannelException( e );\n-        }\n-        buffer.clear();\n-        return channel;\n-    }\n-\n-    private void handleClosedChannelException( ClosedChannelException e ) throws ClosedChannelException\n-    {\n-        // We don't want to check the closed flag every time we empty, instead we can avoid unnecessary the\n-        // volatile read and catch ClosedChannelException where we see if the channel being closed was\n-        // deliberate or not. If it was deliberately closed then throw IllegalStateException instead so\n-        // that callers won't treat this as a kernel panic.\n-        if ( closed )\n-        {\n-            throw new IllegalStateException( \"This log channel has been closed\", e );\n-        }\n-\n-        // OK, this channel was closed without us really knowing about it, throw exception as is.\n-        throw e;\n-    }\n-\n-    @Override\n-    public FlushableChannel put( byte value ) throws IOException\n-    {\n-        bufferWithGuaranteedSpace( 1 ).put( value );\n-        return this;\n-    }\n-\n-    @Override\n-    public FlushableChannel putShort( short value ) throws IOException\n-    {\n-        bufferWithGuaranteedSpace( 2 ).putShort( value );\n-        return this;\n-    }\n-\n-    @Override\n-    public FlushableChannel putInt( int value ) throws IOException\n-    {\n-        bufferWithGuaranteedSpace( 4 ).putInt( value );\n-        return this;\n-    }\n-\n-    @Override\n-    public FlushableChannel putLong( long value ) throws IOException\n-    {\n-        bufferWithGuaranteedSpace( 8 ).putLong( value );\n-        return this;\n-    }\n-\n-    @Override\n-    public FlushableChannel putFloat( float value ) throws IOException\n-    {\n-        bufferWithGuaranteedSpace( 4 ).putFloat( value );\n-        return this;\n-    }\n-\n-    @Override\n-    public FlushableChannel putDouble( double value ) throws IOException\n-    {\n-        bufferWithGuaranteedSpace( 8 ).putDouble( value );\n-        return this;\n-    }\n-\n-    @Override\n-    public FlushableChannel put( byte[] value, int length ) throws IOException\n-    {\n-        int offset = 0;\n-        while ( offset < length )\n-        {\n-            int chunkSize = min( length - offset, buffer.capacity() >> 1 );\n-            bufferWithGuaranteedSpace( chunkSize ).put( value, offset, chunkSize );\n-\n-            offset += chunkSize;\n-        }\n-        return this;\n-    }\n-\n-    private ByteBuffer bufferWithGuaranteedSpace( int spaceInBytes ) throws IOException\n-    {\n-        assert spaceInBytes < buffer.capacity();\n-        if ( buffer.remaining() < spaceInBytes )\n-        {\n-            prepareForFlush();\n-        }\n-        return buffer;\n-    }\n-\n-    /**\n-     * External synchronization between this method and emptyBufferIntoChannelAndClearIt is required so that they\n-     * aren't called concurrently. Currently that's done by acquiring the PhysicalLogFile monitor.\n-     */\n-    @Override\n-    public void close() throws IOException\n-    {\n-        prepareForFlush().flush();\n-        closed = true;\n-        channel.close();\n-    }\n-\n-    /**\n-     * @return the position of the channel, also taking into account buffer position.\n-     * @throws IOException if underlying channel throws {@link IOException}.\n-     */\n-    public long position() throws IOException\n-    {\n-        return channel.position() + buffer.position();\n-    }\n-\n-    /**\n-     * Sets position of this channel to the new {@code position}. This works only if the underlying channel\n-     * supports positioning.\n-     *\n-     * @param position new position (byte offset) to set as new current position.\n-     * @throws IOException if underlying channel throws {@link IOException}.\n-     */\n-    public void position( long position ) throws IOException\n-    {\n-        // Currently we take the pessimistic approach of flushing (doesn't imply forcing) buffer to\n-        // channel before moving to a new position. This works in all cases, but there could be\n-        // made an optimization where we could see that we're moving within the current buffer range\n-        // and if so skip flushing and simply move the cursor in the buffer.\n-        prepareForFlush().flush();\n-        channel.position( position );\n-    }\n+  public static final int DEFAULT_BUFFER_SIZE = (int) ByteUnit.kibiBytes(512);\n+\n+  private volatile boolean closed;\n+\n+  protected final ByteBuffer buffer;\n+  protected StoreChannel channel;\n+\n+  public PhysicalFlushableChannel(StoreChannel channel)\n+  {\n+    this(channel, DEFAULT_BUFFER_SIZE);\n+  }\n+\n+  public PhysicalFlushableChannel(StoreChannel channel, int bufferSize)\n+  {\n+    this.channel = channel;\n+    this.buffer = ByteBuffer.allocate(bufferSize);\n+  }\n+\n+  void setChannel(LogVersionedStoreChannel channel)\n+  {\n+    this.channel = channel;\n+  }\n+\n+  /**\n+   * External synchronization between this method and close is required so that they aren't called concurrently.\n+   * Currently that's done by acquiring the PhysicalLogFile monitor.\n+   */\n+  @Override\n+  public Flushable prepareForFlush() throws IOException\n+  {\n+    buffer.flip();\n+    StoreChannel channel = this.channel;\n+    try\n+    {\n+      channel.writeAll(buffer);\n+    } catch (ClosedChannelException e)\n+    {\n+      handleClosedChannelException(e);\n+    }\n+    buffer.clear();\n+    return channel;\n+  }\n+\n+  private void handleClosedChannelException(ClosedChannelException e) throws ClosedChannelException\n+  {\n+    // We don't want to check the closed flag every time we empty, instead we can avoid unnecessary the\n+    // volatile read and catch ClosedChannelException where we see if the channel being closed was\n+    // deliberate or not. If it was deliberately closed then throw IllegalStateException instead so\n+    // that callers won't treat this as a kernel panic.\n+    if (closed)\n+    {\n+      throw new IllegalStateException(\"This log channel has been closed\", e);\n+    }\n+\n+    // OK, this channel was closed without us really knowing about it, throw exception as is.\n+    throw e;\n+  }\n+\n+  @Override\n+  public FlushableChannel put(byte value) throws IOException\n+  {\n+    bufferWithGuaranteedSpace(1).put(value);\n+    return this;\n+  }\n+\n+  @Override\n+  public FlushableChannel putShort(short value) throws IOException\n+  {\n+    bufferWithGuaranteedSpace(2).putShort(value);\n+    return this;\n+  }\n+\n+  @Override\n+  public FlushableChannel putInt(int value) throws IOException\n+  {\n+    bufferWithGuaranteedSpace(4).putInt(value);\n+    return this;\n+  }\n+\n+  @Override\n+  public FlushableChannel putLong(long value) throws IOException\n+  {\n+    bufferWithGuaranteedSpace(8).putLong(value);\n+    return this;\n+  }\n+\n+  @Override\n+  public FlushableChannel putFloat(float value) throws IOException\n+  {\n+    bufferWithGuaranteedSpace(4).putFloat(value);\n+    return this;\n+  }\n+\n+  @Override\n+  public FlushableChannel putDouble(double value) throws IOException\n+  {\n+    bufferWithGuaranteedSpace(8).putDouble(value);\n+    return this;\n+  }\n+\n+  @Override\n+  public FlushableChannel put(byte[] value, int length) throws IOException\n+  {\n+    int offset = 0;\n+    while (offset < length)\n+    {\n+      int chunkSize = min(length - offset, buffer.capacity() >> 1);\n+      bufferWithGuaranteedSpace(chunkSize).put(value, offset, chunkSize);\n+\n+      offset += chunkSize;\n+    }\n+    return this;\n+  }\n+\n+  private ByteBuffer bufferWithGuaranteedSpace(int spaceInBytes) throws IOException\n+  {\n+    assert spaceInBytes < buffer.capacity();\n+    if (buffer.remaining() < spaceInBytes)\n+    {\n+      prepareForFlush();\n+    }\n+    return buffer;\n+  }\n+\n+  /**\n+   * External synchronization between this method and emptyBufferIntoChannelAndClearIt is required so that they\n+   * aren't called concurrently. Currently that's done by acquiring the PhysicalLogFile monitor.\n+   */\n+  @Override\n+  public void close() throws IOException\n+  {\n+    prepareForFlush().flush();\n+    closed = true;\n+    channel.close();\n+  }\n+\n+  /**\n+   * @return the position of the channel, also taking into account buffer position.\n+   * @throws IOException if underlying channel throws {@link IOException}.\n+   */\n+  public long position() throws IOException\n+  {\n+    return channel.position() + buffer.position();\n+  }\n+\n+  /**\n+   * Sets position of this channel to the new {@code position}. This works only if the underlying channel\n+   * supports positioning.\n+   *\n+   * @param position new position (byte offset) to set as new current position.\n+   * @throws IOException if underlying channel throws {@link IOException}.\n+   */\n+  public void position(long position) throws IOException\n+  {\n+    // Currently we take the pessimistic approach of flushing (doesn't imply forcing) buffer to\n+    // channel before moving to a new position. This works in all cases, but there could be\n+    // made an optimization where we could see that we're moving within the current buffer range\n+    // and if so skip flushing and simply move the cursor in the buffer.\n+    prepareForFlush().flush();\n+    channel.position(position);\n+  }\n }\n",
            "diff_size": 163
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4452/PhysicalFlushableChannel.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4452/PhysicalFlushableChannel.java\nindex f948b34025b..56ea6c52404 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4452/PhysicalFlushableChannel.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4452/PhysicalFlushableChannel.java\n@@ -35,7 +35,7 @@ import static java.lang.Math.min;\n  */\n public class PhysicalFlushableChannel implements FlushableChannel\n {\n-    public static final int DEFAULT_BUFFER_SIZE = (int) ByteUnit.kibiBytes( 512 );\n+    public static final int DEFAULT_BUFFER_SIZE = ( int) ByteUnit.kibiBytes( 512 );\n \n     private volatile boolean closed;\n \n@@ -144,8 +144,7 @@ public class PhysicalFlushableChannel implements FlushableChannel\n         {\n             int chunkSize = min( length - offset, buffer.capacity() >> 1 );\n             bufferWithGuaranteedSpace( chunkSize ).put( value, offset, chunkSize );\n-\n-            offset += chunkSize;\n+offset += chunkSize;\n         }\n         return this;\n     }\n@@ -157,7 +156,8 @@ public class PhysicalFlushableChannel implements FlushableChannel\n         {\n             prepareForFlush();\n         }\n-        return buffer;\n+\n+return buffer;\n     }\n \n     /**\n@@ -197,4 +197,4 @@ public class PhysicalFlushableChannel implements FlushableChannel\n         prepareForFlush().flush();\n         channel.position( position );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}