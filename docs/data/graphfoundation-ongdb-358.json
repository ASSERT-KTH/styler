{
    "project_name": "graphfoundation-ongdb",
    "error_id": "358",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "157",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/358/StructurePropagation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/358/StructurePropagation.java\nindex e1f399d8285..2ab2c507781 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/358/StructurePropagation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/358/StructurePropagation.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n /**\n@@ -43,7 +44,7 @@ package org.neo4j.index.internal.gbptree;\n  *  <li> rightKey - if position of midChild in current level is {@code n} then rightKey is the key at position {@code n}.\n  *  If {@code n==keyCount} then rightKey to rightKey in parent in a recursive manor.\n  * </ul>\n- *\n+ * <p>\n  * If position of {@link #midChild} {@code n > 0}.\n  * <pre>\n  * Current level-> [...,leftKey,rightKey,...]\n@@ -53,7 +54,7 @@ package org.neo4j.index.internal.gbptree;\n  *                 v           v            v\n  * Child nodes-> [...] <\u2500\u2500\u2500> [...] <\u2500\u2500\u2500\u2500> [...]\n  * </pre>\n- *\n+ * <p>\n  * If position of {@link #midChild} {@code n == 0}.\n  * <pre>\n  *\n@@ -67,7 +68,7 @@ package org.neo4j.index.internal.gbptree;\n  *                     v               v           v\n  * Child nodes->     [...] <\u2500\u2500\u2500\u2500\u2500\u2500\u2500> [...] <\u2500\u2500\u2500> [...]\n  * </pre>\n- *\n+ * <p>\n  * * If position of {@link #midChild} {@code n == keyCount}.\n  * <pre>\n  *\n@@ -81,122 +82,123 @@ package org.neo4j.index.internal.gbptree;\n  *                    v           v                 v\n  * Child nodes->   [...] <\u2500\u2500\u2500\u2500> [...] <\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500> [...]\n  * </pre>\n+ *\n  * @param <KEY> type of key.\n  */\n class StructurePropagation<KEY>\n {\n-    /* <CONTENT> */\n-    // Below are the \"content\" of structure propagation\n-    /**\n-     * See {@link #keyReplaceStrategy}.\n-     */\n-    final KEY leftKey;\n-\n-    /**\n-     * See {@link #keyReplaceStrategy}.\n-     */\n-    final KEY rightKey;\n-\n-    /**\n-     * See {@link #keyReplaceStrategy}.\n-     */\n-    final KEY bubbleKey;\n-\n-    /**\n-     * New version of left sibling to mid child.\n-     */\n-    long leftChild;\n-\n-    /**\n-     * New version of the child that was traversed to/through while traversing down the tree.\n-     */\n-    long midChild;\n-\n-    /**\n-     * New right sibling to {@link #midChild}, depending on {@link #hasRightKeyInsert} this can be simple replace of an insert.\n-     */\n-    long rightChild;\n-    /* </CONTENT> */\n-\n-    /* <ACTIONS> */\n-    // Below are the actions, deciding what the content of structure propagation should be used for.\n-    /**\n-     * Left child pointer needs to be replaced by {@link #leftChild}.\n-     */\n-    boolean hasLeftChildUpdate;\n-\n-    /**\n-     * Right child pointer needs to be replaced by {@link #rightChild} OR, if {@link #hasRightKeyInsert} is true\n-     * {@link #rightChild} should be inserted as a completely new additional child, moving old right child to the right.\n-     */\n-    boolean hasRightChildUpdate;\n-\n-    /**\n-     * Mid child pointer needs to be replaced by {@link #midChild}.\n-     */\n-    boolean hasMidChildUpdate;\n-\n-    /**\n-     * {@link #rightKey} should be inserted at right keys position (not replacing old right key).\n-     */\n-    boolean hasRightKeyInsert;\n-    /* </ACTIONS> */\n-\n-    /**\n-     * Depending on keyReplaceStrategy either {@link KeyReplaceStrategy#REPLACE replace} left / right key with\n-     * {@link #leftKey} / {@link #rightKey} or replace left / right key by {@link #bubbleKey} (with strategy\n-     * {@link KeyReplaceStrategy#BUBBLE bubble} rightmost from subtree). In the case of bubble, {@link #leftKey} / {@link #rightKey}\n-     * is used to find \"common ancestor\" of leaves involved in merge. See {@link org.neo4j.index.internal.gbptree}.\n-     */\n-    KeyReplaceStrategy keyReplaceStrategy;\n-    boolean hasLeftKeyReplace;\n-    boolean hasRightKeyReplace;\n-\n-    StructurePropagation( KEY leftKey, KEY rightKey, KEY bubbleKey )\n-    {\n-        this.leftKey = leftKey;\n-        this.rightKey = rightKey;\n-        this.bubbleKey = bubbleKey;\n-    }\n-\n-    /**\n-     * Clear booleans indicating change has occurred.\n-     */\n-    void clear()\n-    {\n-        hasLeftChildUpdate = false;\n-        hasRightChildUpdate = false;\n-        hasMidChildUpdate = false;\n-        hasRightKeyInsert = false;\n-        hasLeftKeyReplace = false;\n-        hasRightKeyReplace = false;\n-    }\n-\n-    interface StructureUpdate\n-    {\n-        void update( StructurePropagation structurePropagation, long childId );\n-    }\n-\n-    static final StructureUpdate UPDATE_LEFT_CHILD = ( sp, childId ) ->\n-    {\n-        sp.hasLeftChildUpdate = true;\n-        sp.leftChild = childId;\n-    };\n-\n-    static final StructureUpdate UPDATE_MID_CHILD = ( sp, childId ) ->\n-    {\n-        sp.hasMidChildUpdate = true;\n-        sp.midChild = childId;\n-    };\n-\n-    static final StructureUpdate UPDATE_RIGHT_CHILD = ( sp, childId ) ->\n-    {\n-        sp.hasRightChildUpdate = true;\n-        sp.rightChild = childId;\n-    };\n-\n-    enum KeyReplaceStrategy\n-    {\n-        REPLACE, BUBBLE\n-    }\n+  /* <CONTENT> */\n+  // Below are the \"content\" of structure propagation\n+  /**\n+   * See {@link #keyReplaceStrategy}.\n+   */\n+  final KEY leftKey;\n+\n+  /**\n+   * See {@link #keyReplaceStrategy}.\n+   */\n+  final KEY rightKey;\n+\n+  /**\n+   * See {@link #keyReplaceStrategy}.\n+   */\n+  final KEY bubbleKey;\n+\n+  /**\n+   * New version of left sibling to mid child.\n+   */\n+  long leftChild;\n+\n+  /**\n+   * New version of the child that was traversed to/through while traversing down the tree.\n+   */\n+  long midChild;\n+\n+  /**\n+   * New right sibling to {@link #midChild}, depending on {@link #hasRightKeyInsert} this can be simple replace of an insert.\n+   */\n+  long rightChild;\n+  /* </CONTENT> */\n+\n+  /* <ACTIONS> */\n+  // Below are the actions, deciding what the content of structure propagation should be used for.\n+  /**\n+   * Left child pointer needs to be replaced by {@link #leftChild}.\n+   */\n+  boolean hasLeftChildUpdate;\n+\n+  /**\n+   * Right child pointer needs to be replaced by {@link #rightChild} OR, if {@link #hasRightKeyInsert} is true\n+   * {@link #rightChild} should be inserted as a completely new additional child, moving old right child to the right.\n+   */\n+  boolean hasRightChildUpdate;\n+\n+  /**\n+   * Mid child pointer needs to be replaced by {@link #midChild}.\n+   */\n+  boolean hasMidChildUpdate;\n+\n+  /**\n+   * {@link #rightKey} should be inserted at right keys position (not replacing old right key).\n+   */\n+  boolean hasRightKeyInsert;\n+  /* </ACTIONS> */\n+\n+  /**\n+   * Depending on keyReplaceStrategy either {@link KeyReplaceStrategy#REPLACE replace} left / right key with\n+   * {@link #leftKey} / {@link #rightKey} or replace left / right key by {@link #bubbleKey} (with strategy\n+   * {@link KeyReplaceStrategy#BUBBLE bubble} rightmost from subtree). In the case of bubble, {@link #leftKey} / {@link #rightKey}\n+   * is used to find \"common ancestor\" of leaves involved in merge. See {@link org.neo4j.index.internal.gbptree}.\n+   */\n+  KeyReplaceStrategy keyReplaceStrategy;\n+  boolean hasLeftKeyReplace;\n+  boolean hasRightKeyReplace;\n+\n+  StructurePropagation(KEY leftKey, KEY rightKey, KEY bubbleKey)\n+  {\n+    this.leftKey = leftKey;\n+    this.rightKey = rightKey;\n+    this.bubbleKey = bubbleKey;\n+  }\n+\n+  /**\n+   * Clear booleans indicating change has occurred.\n+   */\n+  void clear()\n+  {\n+    hasLeftChildUpdate = false;\n+    hasRightChildUpdate = false;\n+    hasMidChildUpdate = false;\n+    hasRightKeyInsert = false;\n+    hasLeftKeyReplace = false;\n+    hasRightKeyReplace = false;\n+  }\n+\n+  interface StructureUpdate\n+  {\n+    void update(StructurePropagation structurePropagation, long childId);\n+  }\n+\n+  static final StructureUpdate UPDATE_LEFT_CHILD = (sp, childId) ->\n+  {\n+    sp.hasLeftChildUpdate = true;\n+    sp.leftChild = childId;\n+  };\n+\n+  static final StructureUpdate UPDATE_MID_CHILD = (sp, childId) ->\n+  {\n+    sp.hasMidChildUpdate = true;\n+    sp.midChild = childId;\n+  };\n+\n+  static final StructureUpdate UPDATE_RIGHT_CHILD = (sp, childId) ->\n+  {\n+    sp.hasRightChildUpdate = true;\n+    sp.rightChild = childId;\n+  };\n+\n+  enum KeyReplaceStrategy\n+  {\n+    REPLACE, BUBBLE\n+  }\n }\n",
            "diff_size": 119
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/358/StructurePropagation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/358/StructurePropagation.java\nindex e1f399d8285..0e5b73f3905 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/358/StructurePropagation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/358/StructurePropagation.java\n@@ -199,4 +199,4 @@ class StructurePropagation<KEY>\n     {\n         REPLACE, BUBBLE\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}