{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2927",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2927/DuplicatingLogProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2927/DuplicatingLogProvider.java\nindex a68f52fefe5..dd87dd97eea 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2927/DuplicatingLogProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2927/DuplicatingLogProvider.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.logging;\n \n import java.util.ArrayList;\n@@ -33,62 +34,62 @@ import java.util.function.Function;\n  */\n public class DuplicatingLogProvider extends AbstractLogProvider<DuplicatingLog>\n {\n-    private final CopyOnWriteArraySet<LogProvider> logProviders;\n-    private final Map<DuplicatingLog,Map<LogProvider,Log>> duplicatingLogCache =\n-            Collections.synchronizedMap( new WeakHashMap<DuplicatingLog,Map<LogProvider,Log>>() );\n+  private final CopyOnWriteArraySet<LogProvider> logProviders;\n+  private final Map<DuplicatingLog, Map<LogProvider, Log>> duplicatingLogCache =\n+      Collections.synchronizedMap(new WeakHashMap<DuplicatingLog, Map<LogProvider, Log>>());\n \n-    /**\n-     * @param logProviders A list of {@link LogProvider} instances that messages should be duplicated to\n-     */\n-    public DuplicatingLogProvider( LogProvider... logProviders )\n-    {\n-        this.logProviders = new CopyOnWriteArraySet<>( Arrays.asList( logProviders ) );\n-    }\n+  /**\n+   * @param logProviders A list of {@link LogProvider} instances that messages should be duplicated to\n+   */\n+  public DuplicatingLogProvider(LogProvider... logProviders)\n+  {\n+    this.logProviders = new CopyOnWriteArraySet<>(Arrays.asList(logProviders));\n+  }\n \n-    /**\n-     * Remove a {@link LogProvider} from the duplicating set. Note that the LogProvider must return\n-     * cached Log instances from its {@link LogProvider#getLog(String)} for this to behave as expected.\n-     *\n-     * @param logProvider the LogProvider to be removed\n-     * @return true if the log was found and removed\n-     */\n-    public boolean remove( LogProvider logProvider )\n+  /**\n+   * Remove a {@link LogProvider} from the duplicating set. Note that the LogProvider must return\n+   * cached Log instances from its {@link LogProvider#getLog(String)} for this to behave as expected.\n+   *\n+   * @param logProvider the LogProvider to be removed\n+   * @return true if the log was found and removed\n+   */\n+  public boolean remove(LogProvider logProvider)\n+  {\n+    if (!this.logProviders.remove(logProvider))\n     {\n-        if ( !this.logProviders.remove( logProvider ) )\n-        {\n-            return false;\n-        }\n-        for ( DuplicatingLog duplicatingLog : cachedLogs() )\n-        {\n-            duplicatingLog.remove( duplicatingLogCache.get( duplicatingLog ).remove( logProvider ) );\n-        }\n-        return true;\n+      return false;\n     }\n-\n-    @Override\n-    protected DuplicatingLog buildLog( final Class loggingClass )\n+    for (DuplicatingLog duplicatingLog : cachedLogs())\n     {\n-        return buildLog( logProvider -> logProvider.getLog( loggingClass ) );\n+      duplicatingLog.remove(duplicatingLogCache.get(duplicatingLog).remove(logProvider));\n     }\n+    return true;\n+  }\n \n-    @Override\n-    protected DuplicatingLog buildLog( final String name )\n-    {\n-        return buildLog( logProvider -> logProvider.getLog( name ) );\n-    }\n+  @Override\n+  protected DuplicatingLog buildLog(final Class loggingClass)\n+  {\n+    return buildLog(logProvider -> logProvider.getLog(loggingClass));\n+  }\n+\n+  @Override\n+  protected DuplicatingLog buildLog(final String name)\n+  {\n+    return buildLog(logProvider -> logProvider.getLog(name));\n+  }\n \n-    private DuplicatingLog buildLog( Function<LogProvider, Log> logConstructor )\n+  private DuplicatingLog buildLog(Function<LogProvider, Log> logConstructor)\n+  {\n+    ArrayList<Log> logs = new ArrayList<>(logProviders.size());\n+    HashMap<LogProvider, Log> providedLogs = new HashMap<>();\n+    for (LogProvider logProvider : logProviders)\n     {\n-        ArrayList<Log> logs = new ArrayList<>( logProviders.size() );\n-        HashMap<LogProvider, Log> providedLogs = new HashMap<>();\n-        for ( LogProvider logProvider : logProviders )\n-        {\n-            Log log = logConstructor.apply( logProvider );\n-            providedLogs.put( logProvider, log );\n-            logs.add( log );\n-        }\n-        DuplicatingLog duplicatingLog = new DuplicatingLog( logs );\n-        duplicatingLogCache.put( duplicatingLog, providedLogs );\n-        return duplicatingLog;\n+      Log log = logConstructor.apply(logProvider);\n+      providedLogs.put(logProvider, log);\n+      logs.add(log);\n     }\n+    DuplicatingLog duplicatingLog = new DuplicatingLog(logs);\n+    duplicatingLogCache.put(duplicatingLog, providedLogs);\n+    return duplicatingLog;\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 167).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2927/DuplicatingLogProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2927/DuplicatingLogProvider.java\nindex a68f52fefe5..c8c74019b16 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2927/DuplicatingLogProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2927/DuplicatingLogProvider.java\n@@ -34,10 +34,9 @@ import java.util.function.Function;\n public class DuplicatingLogProvider extends AbstractLogProvider<DuplicatingLog>\n {\n     private final CopyOnWriteArraySet<LogProvider> logProviders;\n-    private final Map<DuplicatingLog,Map<LogProvider,Log>> duplicatingLogCache =\n-            Collections.synchronizedMap( new WeakHashMap<DuplicatingLog,Map<LogProvider,Log>>() );\n+    private final Map<DuplicatingLog,Map<LogProvider,Log>> duplicatingLogCache = Collections.synchronizedMap( new WeakHashMap<DuplicatingLog,Map<LogProvider,Log>>() );\n \n-    /**\n+/**\n      * @param logProviders A list of {@link LogProvider} instances that messages should be duplicated to\n      */\n     public DuplicatingLogProvider( LogProvider... logProviders )\n@@ -77,18 +76,19 @@ public class DuplicatingLogProvider extends AbstractLogProvider<DuplicatingLog>\n         return buildLog( logProvider -> logProvider.getLog( name ) );\n     }\n \n-    private DuplicatingLog buildLog( Function<LogProvider, Log> logConstructor )\n+    private DuplicatingLog buildLog( Function<LogProvider,Log> logConstructor )\n     {\n         ArrayList<Log> logs = new ArrayList<>( logProviders.size() );\n-        HashMap<LogProvider, Log> providedLogs = new HashMap<>();\n+        HashMap<LogProvider,Log> providedLogs = new HashMap<>();\n         for ( LogProvider logProvider : logProviders )\n         {\n             Log log = logConstructor.apply( logProvider );\n             providedLogs.put( logProvider, log );\n             logs.add( log );\n         }\n-        DuplicatingLog duplicatingLog = new DuplicatingLog( logs );\n+\n+DuplicatingLog duplicatingLog = new DuplicatingLog( logs );\n         duplicatingLogCache.put( duplicatingLog, providedLogs );\n         return duplicatingLog;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 8
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "38",
                    "column": "127",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "64",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "89",
                    "column": "9",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "89",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2927/DuplicatingLogProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2927/DuplicatingLogProvider.java\nindex a68f52fefe5..15d7cbae99d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2927/DuplicatingLogProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2927/DuplicatingLogProvider.java\n@@ -31,15 +31,16 @@ import java.util.function.Function;\n /**\n  * A {@link LogProvider} implementation that duplicates all messages to other LogProvider instances\n  */\n+\n public class DuplicatingLogProvider extends AbstractLogProvider<DuplicatingLog>\n {\n     private final CopyOnWriteArraySet<LogProvider> logProviders;\n-    private final Map<DuplicatingLog,Map<LogProvider,Log>> duplicatingLogCache =\n-            Collections.synchronizedMap( new WeakHashMap<DuplicatingLog,Map<LogProvider,Log>>() );\n+    private final Map<DuplicatingLog,Map<LogProvider,Log>> duplicatingLogCache = Collections.synchronizedMap( new WeakHashMap <DuplicatingLog,Map<LogProvider,Log>>() );\n \n     /**\n      * @param logProviders A list of {@link LogProvider} instances that messages should be duplicated to\n      */\n+\n     public DuplicatingLogProvider( LogProvider... logProviders )\n     {\n         this.logProviders = new CopyOnWriteArraySet<>( Arrays.asList( logProviders ) );\n@@ -52,16 +53,20 @@ public class DuplicatingLogProvider extends AbstractLogProvider<DuplicatingLog>\n      * @param logProvider the LogProvider to be removed\n      * @return true if the log was found and removed\n      */\n+\n     public boolean remove( LogProvider logProvider )\n     {\n-        if ( !this.logProviders.remove( logProvider ) )\n+        if ( ! this.logProviders.remove( logProvider ) )\n         {\n             return false;\n         }\n-        for ( DuplicatingLog duplicatingLog : cachedLogs() )\n+\n+        for( DuplicatingLog duplicatingLog : cachedLogs()\n+        )\n         {\n             duplicatingLog.remove( duplicatingLogCache.get( duplicatingLog ).remove( logProvider ) );\n         }\n+\n         return true;\n     }\n \n@@ -77,18 +82,19 @@ public class DuplicatingLogProvider extends AbstractLogProvider<DuplicatingLog>\n         return buildLog( logProvider -> logProvider.getLog( name ) );\n     }\n \n-    private DuplicatingLog buildLog( Function<LogProvider, Log> logConstructor )\n+    private DuplicatingLog buildLog( Function<LogProvider,Log> logConstructor )\n     {\n         ArrayList<Log> logs = new ArrayList<>( logProviders.size() );\n-        HashMap<LogProvider, Log> providedLogs = new HashMap<>();\n-        for ( LogProvider logProvider : logProviders )\n+        HashMap<LogProvider,Log> providedLogs = new HashMap<>();\n+        for( LogProvider logProvider : logProviders)\n         {\n             Log log = logConstructor.apply( logProvider );\n             providedLogs.put( logProvider, log );\n             logs.add( log );\n         }\n+\n         DuplicatingLog duplicatingLog = new DuplicatingLog( logs );\n         duplicatingLogCache.put( duplicatingLog, providedLogs );\n         return duplicatingLog;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}