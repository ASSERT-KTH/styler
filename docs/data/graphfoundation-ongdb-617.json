{
    "project_name": "graphfoundation-ongdb",
    "error_id": "617",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "87",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "223",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "92",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "157",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "238",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "320",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "343",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "349",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "384",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "384",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "405",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "407",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "423",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "426",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "431",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "450",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "466",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "471",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "471",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "473",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "519",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "534",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "595",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "618",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "619",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "637",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "643",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "673",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "679",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "681",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "682",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "684",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "687",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "707",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "708",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "708",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "710",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "724",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "728",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "734",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "734",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "735",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "735",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "735",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "737",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "751",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "751",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "754",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "754",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "756",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "756",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "768",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "768",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "64",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "773",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "778",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "778",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "783",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "783",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "788",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "788",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "795",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "795",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "799",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "806",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "822",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "822",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "827",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "827",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "845",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "845",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "848",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "848",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "874",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "894",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "894",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "896",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "896",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "910",
                    "column": "92",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "910",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "917",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "917",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "919",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "919",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "921",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "923",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "923",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "938",
                    "column": "89",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "938",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "943",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "943",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "945",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "947",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "960",
                    "column": "89",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "960",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "965",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "965",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "967",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "967",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "969",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "969",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "982",
                    "column": "91",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "982",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "987",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "987",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1003",
                    "column": "83",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1004",
                    "column": "146",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1009",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1009",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1014",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1014",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1014",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1016",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1016",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1024",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1026",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1036",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1036",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1042",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1042",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1045",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1045",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1048",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1048",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1048",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1051",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1051",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1051",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1054",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1057",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1068",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1068",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1073",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1073",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1085",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1085",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1088",
                    "column": "82",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1089",
                    "column": "148",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1091",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1091",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1094",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1094",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1097",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1104",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1104",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1127",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1127",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1134",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1134",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1202",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1205",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1227",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1227",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1239",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1239",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1245",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1245",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1251",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1251",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1257",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1257",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1262",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1262",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1262",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1264",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1264",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1269",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1269",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1280",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1280",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1282",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1282",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1287",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1287",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1287",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1289",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1289",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1301",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1301",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1305",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1305",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1307",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1307",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1326",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1326",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1328",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1328",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1331",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1331",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1351",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1351",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1357",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1357",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1360",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1360",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1364",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1364",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1370",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1370",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1372",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1372",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1375",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1377",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1377",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1388",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1388",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1390",
                    "column": "72",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1390",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1393",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1393",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1396",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1396",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1405",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1405",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1405",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1407",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1407",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/617/Settings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/617/Settings.java\nindex 485d3e4a311..3f350b27650 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/617/Settings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/617/Settings.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.configuration;\n \n import org.apache.commons.lang3.StringUtils;\n@@ -79,1353 +80,1333 @@ import static org.neo4j.io.fs.FileUtils.fixSeparatorsInPath;\n  */\n public class Settings\n {\n-    private static final String MATCHES_PATTERN_MESSAGE = \"matches the pattern `%s`\";\n-\n-    private interface SettingHelper<T> extends Setting<T>\n-    {\n-        String lookup( Function<String, String> settings );\n-\n-        String defaultLookup( Function<String, String> settings );\n-    }\n-\n-    public static final String NO_DEFAULT = null;\n-    public static final String EMPTY = \"\";\n+  private static final String MATCHES_PATTERN_MESSAGE = \"matches the pattern `%s`\";\n \n-    public static final String TRUE = \"true\";\n-    public static final String FALSE = \"false\";\n+  private interface SettingHelper<T> extends Setting<T>\n+  {\n+    String lookup(Function<String, String> settings);\n \n-    public static final String DEFAULT = \"default\";\n+    String defaultLookup(Function<String, String> settings);\n+  }\n \n-    public static final String SEPARATOR = \",\";\n+  public static final String NO_DEFAULT = null;\n+  public static final String EMPTY = \"\";\n \n-    private static final String SIZE_FORMAT = \"\\\\d+[kmgKMG]?\";\n+  public static final String TRUE = \"true\";\n+  public static final String FALSE = \"false\";\n \n-    private static final String SIZE_UNITS = Arrays.toString(\n-            SIZE_FORMAT.substring( SIZE_FORMAT.indexOf( '[' ) + 1,\n-                    SIZE_FORMAT.indexOf( ']' ) )\n-                    .toCharArray() )\n-            .replace( \"[\", \"\" )\n-            .replace( \"]\", \"\" );\n+  public static final String DEFAULT = \"default\";\n \n-    public static final String ANY = \".+\";\n+  public static final String SEPARATOR = \",\";\n \n-    /**\n-     * Helper class to build a {@link Setting}. A setting always have a name, a parser and a default value.\n-     *\n-     * @param <T> The concrete type of the setting that is being build\n-     */\n-    public static final class SettingBuilder<T>\n-    {\n-        private final String name;\n-        private final Function<String,T> parser;\n-        private final String defaultValue;\n-        private Setting<T> inheritedSetting;\n-        private List<BiFunction<T, Function<String,String>,T>> valueConstraints;\n+  private static final String SIZE_FORMAT = \"\\\\d+[kmgKMG]?\";\n \n-        private SettingBuilder( @Nonnull final String name, @Nonnull final Function<String,T> parser, @Nullable final String defaultValue )\n-        {\n-            this.name = name;\n-            this.parser = parser;\n-            this.defaultValue = defaultValue;\n-        }\n+  private static final String SIZE_UNITS = Arrays.toString(\n+      SIZE_FORMAT.substring(SIZE_FORMAT.indexOf('[') + 1,\n+          SIZE_FORMAT.indexOf(']'))\n+          .toCharArray())\n+      .replace(\"[\", \"\")\n+      .replace(\"]\", \"\");\n \n-        /**\n-         * Setup a class to inherit from. Both the default value and the actual user supplied value will be inherited.\n-         * Limited to one parent, but chains are allowed and works as expected by going up on level until a valid value\n-         * is found.\n-         *\n-         * @param inheritedSetting the setting to inherit value and default value from.\n-         * @throws AssertionError if more than one inheritance is provided.\n-         */\n-        @Nonnull\n-        public SettingBuilder<T> inherits( @Nonnull final Setting<T> inheritedSetting )\n-        {\n-            // Make sure we only inherits from one other setting\n-            if ( this.inheritedSetting != null )\n-            {\n-                throw new AssertionError( \"Can only inherit from one setting\" );\n-            }\n-\n-            this.inheritedSetting = inheritedSetting;\n-            return this;\n-        }\n+  public static final String ANY = \".+\";\n \n-        /**\n-         * Add a constraint to this setting. If an error occurs, the constraint should throw {@link IllegalArgumentException}.\n-         * Constraints are allowed to modify values and they are applied in the order they are attached to the builder.\n-         *\n-         * @param constraint to add.\n-         */\n-        @Nonnull\n-        public SettingBuilder<T> constraint( @Nonnull final BiFunction<T, Function<String,String>,T> constraint )\n-        {\n-            if ( valueConstraints == null )\n-            {\n-                valueConstraints = new LinkedList<>(); // Must guarantee order\n-            }\n-            valueConstraints.add( constraint );\n-            return this;\n-        }\n+  /**\n+   * Helper class to build a {@link Setting}. A setting always have a name, a parser and a default value.\n+   *\n+   * @param <T> The concrete type of the setting that is being build\n+   */\n+  public static final class SettingBuilder<T>\n+  {\n+    private final String name;\n+    private final Function<String, T> parser;\n+    private final String defaultValue;\n+    private Setting<T> inheritedSetting;\n+    private List<BiFunction<T, Function<String, String>, T>> valueConstraints;\n \n-        @Nonnull\n-        public Setting<T> build()\n-        {\n-            BiFunction<String,Function<String, String>, String> valueLookup = named();\n-            BiFunction<String, Function<String, String>, String> defaultLookup = determineDefaultLookup( defaultValue, valueLookup );\n-            if ( inheritedSetting != null )\n-            {\n-                valueLookup = inheritedValue( valueLookup, inheritedSetting );\n-                defaultLookup = inheritedDefault( defaultLookup, inheritedSetting );\n-            }\n-\n-            return new DefaultSetting<>( name, parser, valueLookup, defaultLookup, valueConstraints );\n-        }\n+    private SettingBuilder(@Nonnull final String name, @Nonnull final Function<String, T> parser, @Nullable final String defaultValue)\n+    {\n+      this.name = name;\n+      this.parser = parser;\n+      this.defaultValue = defaultValue;\n     }\n \n     /**\n-     * Constructs a {@link Setting} with a specified default value.\n+     * Setup a class to inherit from. Both the default value and the actual user supplied value will be inherited.\n+     * Limited to one parent, but chains are allowed and works as expected by going up on level until a valid value\n+     * is found.\n      *\n-     * @param name of the setting, e.g. \"dbms.transaction.timeout\".\n-     * @param parser that will convert the string representation to the concrete type T.\n-     * @param defaultValue the string representation of the default value.\n-     * @param <T> the concrete type of the setting.\n+     * @param inheritedSetting the setting to inherit value and default value from.\n+     * @throws AssertionError if more than one inheritance is provided.\n      */\n     @Nonnull\n-    public static <T> Setting<T> setting( @Nonnull final String name, @Nonnull final Function<String,T> parser,\n-            @Nullable final String defaultValue )\n+    public SettingBuilder<T> inherits(@Nonnull final Setting<T> inheritedSetting)\n     {\n-        return new SettingBuilder<>( name, parser, defaultValue ).build();\n+      // Make sure we only inherits from one other setting\n+      if (this.inheritedSetting != null)\n+      {\n+        throw new AssertionError(\"Can only inherit from one setting\");\n+      }\n+\n+      this.inheritedSetting = inheritedSetting;\n+      return this;\n     }\n \n     /**\n-     * Start building a setting with default value set to {@link Settings#NO_DEFAULT}.\n+     * Add a constraint to this setting. If an error occurs, the constraint should throw {@link IllegalArgumentException}.\n+     * Constraints are allowed to modify values and they are applied in the order they are attached to the builder.\n      *\n-     * @param name of the setting, e.g. \"dbms.transaction.timeout\".\n-     * @param parser that will convert the string representation to the concrete type T.\n-     * @param <T> the concrete type of the setting.\n+     * @param constraint to add.\n      */\n     @Nonnull\n-    public static <T> SettingBuilder<T> buildSetting( @Nonnull final String name, @Nonnull final Function<String, T> parser )\n+    public SettingBuilder<T> constraint(@Nonnull final BiFunction<T, Function<String, String>, T> constraint)\n     {\n-        return buildSetting( name, parser, NO_DEFAULT );\n+      if (valueConstraints == null)\n+      {\n+        valueConstraints = new LinkedList<>(); // Must guarantee order\n+      }\n+      valueConstraints.add(constraint);\n+      return this;\n     }\n \n-    /**\n-     * Start building a setting with a specified default value.\n-     *\n-     * @param name of the setting, e.g. \"dbms.transaction.timeout\".\n-     * @param parser that will convert the string representation to the concrete type T.\n-     * @param defaultValue the string representation of the default value.\n-     * @param <T> the concrete type of the setting.\n-     */\n     @Nonnull\n-    public static <T> SettingBuilder<T> buildSetting( @Nonnull final String name, @Nonnull final Function<String,T> parser,\n-            @Nullable final String defaultValue )\n+    public Setting<T> build()\n     {\n-        return new SettingBuilder<>( name, parser, defaultValue );\n+      BiFunction<String, Function<String, String>, String> valueLookup = named();\n+      BiFunction<String, Function<String, String>, String> defaultLookup = determineDefaultLookup(defaultValue, valueLookup);\n+      if (inheritedSetting != null)\n+      {\n+        valueLookup = inheritedValue(valueLookup, inheritedSetting);\n+        defaultLookup = inheritedDefault(defaultLookup, inheritedSetting);\n+      }\n+\n+      return new DefaultSetting<>(name, parser, valueLookup, defaultLookup, valueConstraints);\n     }\n-\n-    public static BiFunction<String,Function<String,String>,String> determineDefaultLookup( String defaultValue,\n-            BiFunction<String,Function<String,String>,String> valueLookup )\n+  }\n+\n+  /**\n+   * Constructs a {@link Setting} with a specified default value.\n+   *\n+   * @param name         of the setting, e.g. \"dbms.transaction.timeout\".\n+   * @param parser       that will convert the string representation to the concrete type T.\n+   * @param defaultValue the string representation of the default value.\n+   * @param <T>          the concrete type of the setting.\n+   */\n+  @Nonnull\n+  public static <T> Setting<T> setting(@Nonnull final String name, @Nonnull final Function<String, T> parser,\n+                                       @Nullable final String defaultValue)\n+  {\n+    return new SettingBuilder<>(name, parser, defaultValue).build();\n+  }\n+\n+  /**\n+   * Start building a setting with default value set to {@link Settings#NO_DEFAULT}.\n+   *\n+   * @param name   of the setting, e.g. \"dbms.transaction.timeout\".\n+   * @param parser that will convert the string representation to the concrete type T.\n+   * @param <T>    the concrete type of the setting.\n+   */\n+  @Nonnull\n+  public static <T> SettingBuilder<T> buildSetting(@Nonnull final String name, @Nonnull final Function<String, T> parser)\n+  {\n+    return buildSetting(name, parser, NO_DEFAULT);\n+  }\n+\n+  /**\n+   * Start building a setting with a specified default value.\n+   *\n+   * @param name         of the setting, e.g. \"dbms.transaction.timeout\".\n+   * @param parser       that will convert the string representation to the concrete type T.\n+   * @param defaultValue the string representation of the default value.\n+   * @param <T>          the concrete type of the setting.\n+   */\n+  @Nonnull\n+  public static <T> SettingBuilder<T> buildSetting(@Nonnull final String name, @Nonnull final Function<String, T> parser,\n+                                                   @Nullable final String defaultValue)\n+  {\n+    return new SettingBuilder<>(name, parser, defaultValue);\n+  }\n+\n+  public static BiFunction<String, Function<String, String>, String> determineDefaultLookup(String defaultValue,\n+                                                                                            BiFunction<String, Function<String, String>, String> valueLookup)\n+  {\n+    BiFunction<String, Function<String, String>, String> defaultLookup;\n+    if (defaultValue != null)\n     {\n-        BiFunction<String,Function<String,String>,String> defaultLookup;\n-        if ( defaultValue != null )\n-        {\n-            defaultLookup = withDefault( defaultValue, valueLookup );\n+      defaultLookup = withDefault(defaultValue, valueLookup);\n+    } else\n+    {\n+      defaultLookup = (n, from) -> null;\n+    }\n+    return defaultLookup;\n+  }\n+\n+  public static <OUT, IN1, IN2> Setting<OUT> derivedSetting(String name,\n+                                                            Setting<IN1> in1, Setting<IN2> in2,\n+                                                            BiFunction<IN1, IN2, OUT> derivation,\n+                                                            Function<String, OUT> overrideConverter)\n+  {\n+    // NOTE:\n+    // we do not scope the input settings here (indeed they might be shared...)\n+    // if needed we can add a configuration option to allow for it\n+    return new ScopeAwareSetting<OUT>()\n+    {\n+      @Override\n+      protected String provideName()\n+      {\n+        return name;\n+      }\n+\n+      @Override\n+      public String getDefaultValue()\n+      {\n+        return NO_DEFAULT;\n+      }\n+\n+      @Override\n+      public OUT from(Configuration config)\n+      {\n+        return config.get(this);\n+      }\n+\n+      @Override\n+      public OUT apply(Function<String, String> config)\n+      {\n+        String override = config.apply(name());\n+        if (override != null)\n+        {\n+          // Derived settings are intended not to be overridden and we should throw an exception here. However\n+          // we temporarily need to allow the Desktop app to override the value of the derived setting\n+          // unsupported.dbms.directories.database because we are not yet in a position to rework it to\n+          // conform to the standard directory structure layout.\n+          return overrideConverter.apply(override);\n         }\n-        else\n-        {\n-            defaultLookup = ( n, from ) -> null;\n+        return derivation.apply(in1.apply(config), in2.apply(config));\n+      }\n+\n+      @Override\n+      public String valueDescription()\n+      {\n+        return in1.valueDescription();\n+      }\n+    };\n+  }\n+\n+  public static <OUT, IN1> Setting<OUT> derivedSetting(String name,\n+                                                       Setting<IN1> in1,\n+                                                       Function<IN1, OUT> derivation,\n+                                                       Function<String, OUT> overrideConverter)\n+  {\n+    return new ScopeAwareSetting<OUT>()\n+    {\n+      @Override\n+      protected String provideName()\n+      {\n+        return name;\n+      }\n+\n+      @Override\n+      public String getDefaultValue()\n+      {\n+        return NO_DEFAULT;\n+      }\n+\n+      @Override\n+      public OUT from(Configuration config)\n+      {\n+        return config.get(this);\n+      }\n+\n+      @Override\n+      public OUT apply(Function<String, String> config)\n+      {\n+        String override = config.apply(name());\n+        if (override != null)\n+        {\n+          return overrideConverter.apply(override);\n         }\n-        return defaultLookup;\n+        return derivation.apply(in1.apply(config));\n+      }\n+\n+      @Override\n+      public String valueDescription()\n+      {\n+        return in1.valueDescription();\n+      }\n+    };\n+  }\n+\n+  public static Setting<File> pathSetting(String name, String defaultValue)\n+  {\n+    return new FileSetting(name, defaultValue);\n+  }\n+\n+  public static Setting<File> pathSetting(String name, String defaultValue, Setting<File> relativeRoot)\n+  {\n+    return new FileSetting(name, defaultValue, relativeRoot);\n+  }\n+\n+  private static <T> BiFunction<String, Function<String, String>, String> inheritedValue(\n+      final BiFunction<String, Function<String, String>, String> lookup, final Setting<T> inheritedSetting)\n+  {\n+    return (name, settings) ->\n+    {\n+      String value = lookup.apply(name, settings);\n+      if (value == null)\n+      {\n+        value = ((SettingHelper<T>) inheritedSetting).lookup(settings);\n+      }\n+      return value;\n+    };\n+  }\n+\n+  private static <T> BiFunction<String, Function<String, String>, String> inheritedDefault(\n+      final BiFunction<String, Function<String, String>, String> lookup, final Setting<T> inheritedSetting)\n+  {\n+    return (name, settings) ->\n+    {\n+      String value = lookup.apply(name, settings);\n+      if (value == null)\n+      {\n+        value = ((SettingHelper<T>) inheritedSetting).defaultLookup(settings);\n+      }\n+      return value;\n+    };\n+  }\n+\n+  public static final Function<String, Integer> INTEGER = new Function<String, Integer>()\n+  {\n+    @Override\n+    public Integer apply(String value)\n+    {\n+      try\n+      {\n+        return Integer.valueOf(value);\n+      } catch (NumberFormatException e)\n+      {\n+        throw new IllegalArgumentException(\"not a valid integer value\");\n+      }\n     }\n \n-    public static <OUT, IN1, IN2> Setting<OUT> derivedSetting( String name,\n-                                                               Setting<IN1> in1, Setting<IN2> in2,\n-                                                               BiFunction<IN1, IN2, OUT> derivation,\n-                                                               Function<String, OUT> overrideConverter )\n+    @Override\n+    public String toString()\n     {\n-        // NOTE:\n-        // we do not scope the input settings here (indeed they might be shared...)\n-        // if needed we can add a configuration option to allow for it\n-        return new ScopeAwareSetting<OUT>()\n-        {\n-            @Override\n-            protected String provideName()\n-            {\n-                return name;\n-            }\n-\n-            @Override\n-            public String getDefaultValue()\n-            {\n-                return NO_DEFAULT;\n-            }\n-\n-            @Override\n-            public OUT from( Configuration config )\n-            {\n-                return config.get( this );\n-            }\n-\n-            @Override\n-            public OUT apply( Function<String, String> config )\n-            {\n-                String override = config.apply( name() );\n-                if ( override != null )\n-                {\n-                    // Derived settings are intended not to be overridden and we should throw an exception here. However\n-                    // we temporarily need to allow the Desktop app to override the value of the derived setting\n-                    // unsupported.dbms.directories.database because we are not yet in a position to rework it to\n-                    // conform to the standard directory structure layout.\n-                    return overrideConverter.apply( override );\n-                }\n-                return derivation.apply( in1.apply( config ), in2.apply( config ) );\n-            }\n-\n-            @Override\n-            public String valueDescription()\n-            {\n-                return in1.valueDescription();\n-            }\n-        };\n+      return \"an integer\";\n     }\n+  };\n \n-    public static <OUT, IN1> Setting<OUT> derivedSetting( String name,\n-                                                          Setting<IN1> in1,\n-                                                          Function<IN1, OUT> derivation,\n-                                                          Function<String,OUT> overrideConverter )\n+  public static final Function<String, Long> LONG = new Function<String, Long>()\n+  {\n+    @Override\n+    public Long apply(String value)\n     {\n-        return new ScopeAwareSetting<OUT>()\n-        {\n-            @Override\n-            protected String provideName()\n-            {\n-                return name;\n-            }\n-\n-            @Override\n-            public String getDefaultValue()\n-            {\n-                return NO_DEFAULT;\n-            }\n-\n-            @Override\n-            public OUT from( Configuration config )\n-            {\n-                return config.get( this );\n-            }\n-\n-            @Override\n-            public OUT apply( Function<String, String> config )\n-            {\n-                String override = config.apply( name() );\n-                if ( override != null )\n-                {\n-                    return overrideConverter.apply( override );\n-                }\n-                return derivation.apply( in1.apply( config ) );\n-            }\n-\n-            @Override\n-            public String valueDescription()\n-            {\n-                return in1.valueDescription();\n-            }\n-        };\n+      try\n+      {\n+        return Long.valueOf(value);\n+      } catch (NumberFormatException e)\n+      {\n+        throw new IllegalArgumentException(\"not a valid long value\");\n+      }\n     }\n \n-    public static Setting<File> pathSetting( String name, String defaultValue )\n+    @Override\n+    public String toString()\n     {\n-        return new FileSetting( name, defaultValue );\n+      return \"a long\";\n     }\n+  };\n \n-    public static Setting<File> pathSetting( String name, String defaultValue, Setting<File> relativeRoot )\n+  public static final Function<String, Boolean> BOOLEAN = new Function<String, Boolean>()\n+  {\n+    @Override\n+    public Boolean apply(String value)\n     {\n-        return new FileSetting( name, defaultValue, relativeRoot );\n+      if (value.equalsIgnoreCase(\"true\"))\n+      {\n+        return Boolean.TRUE;\n+      } else if (value.equalsIgnoreCase(\"false\"))\n+      {\n+        return Boolean.FALSE;\n+      } else\n+      {\n+        throw new IllegalArgumentException(\"must be 'true' or 'false'\");\n+      }\n     }\n \n-    private static <T> BiFunction<String,Function<String, String>, String> inheritedValue(\n-            final BiFunction<String,Function<String,String>, String> lookup, final Setting<T> inheritedSetting )\n+    @Override\n+    public String toString()\n     {\n-        return ( name, settings ) ->\n-        {\n-            String value = lookup.apply( name, settings );\n-            if ( value == null )\n-            {\n-                value = ((SettingHelper<T>) inheritedSetting).lookup( settings );\n-            }\n-            return value;\n-        };\n+      return \"a boolean\";\n     }\n+  };\n \n-    private static <T> BiFunction<String,Function<String, String>, String> inheritedDefault(\n-            final BiFunction<String,Function<String,String>, String> lookup, final Setting<T> inheritedSetting )\n+  public static final Function<String, Float> FLOAT = new Function<String, Float>()\n+  {\n+    @Override\n+    public Float apply(String value)\n     {\n-        return ( name, settings ) ->\n-        {\n-            String value = lookup.apply( name, settings );\n-            if ( value == null )\n-            {\n-                value = ((SettingHelper<T>) inheritedSetting).defaultLookup( settings );\n-            }\n-            return value;\n-        };\n+      try\n+      {\n+        return Float.valueOf(value);\n+      } catch (NumberFormatException e)\n+      {\n+        throw new IllegalArgumentException(\"not a valid float value\");\n+      }\n     }\n \n-    public static final Function<String, Integer> INTEGER = new Function<String, Integer>()\n+    @Override\n+    public String toString()\n     {\n-        @Override\n-        public Integer apply( String value )\n-        {\n-            try\n-            {\n-                return Integer.valueOf( value );\n-            }\n-            catch ( NumberFormatException e )\n-            {\n-                throw new IllegalArgumentException( \"not a valid integer value\" );\n-            }\n-        }\n+      return \"a float\";\n+    }\n+  };\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"an integer\";\n-        }\n-    };\n+  public static final Function<String, Double> DOUBLE = new Function<String, Double>()\n+  {\n+    @Override\n+    public Double apply(String value)\n+    {\n+      try\n+      {\n+        return Double.valueOf(value);\n+      } catch (NumberFormatException e)\n+      {\n+        throw new IllegalArgumentException(\"not a valid double value\");\n+      }\n+    }\n \n-    public static final Function<String, Long> LONG = new Function<String, Long>()\n+    @Override\n+    public String toString()\n     {\n-        @Override\n-        public Long apply( String value )\n-        {\n-            try\n-            {\n-                return Long.valueOf( value );\n-            }\n-            catch ( NumberFormatException e )\n-            {\n-                throw new IllegalArgumentException( \"not a valid long value\" );\n-            }\n-        }\n+      return \"a double\";\n+    }\n+  };\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"a long\";\n-        }\n-    };\n+  public static final Function<String, String> STRING = new Function<String, String>()\n+  {\n+    @Override\n+    public String apply(String value)\n+    {\n+      return value.trim();\n+    }\n \n-    public static final Function<String, Boolean> BOOLEAN = new Function<String, Boolean>()\n+    @Override\n+    public String toString()\n     {\n+      return \"a string\";\n+    }\n+  };\n+\n+  public static final Function<String, List<String>> STRING_LIST = list(SEPARATOR, STRING);\n+\n+  public static final Function<String, HostnamePort> HOSTNAME_PORT = new Function<String, HostnamePort>()\n+  {\n+    @Override\n+    public HostnamePort apply(String value)\n+    {\n+      return new HostnamePort(value);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return \"a hostname and port\";\n+    }\n+  };\n+\n+  public static final Function<String, Duration> DURATION = new Function<String, Duration>()\n+  {\n+    @Override\n+    public Duration apply(String value)\n+    {\n+      return Duration.ofMillis(TimeUtil.parseTimeMillis.apply(value));\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return \"a duration (\" + TimeUtil.VALID_TIME_DESCRIPTION + \")\";\n+    }\n+  };\n+\n+  public static final Function<String, ZoneId> TIMEZONE = new Function<String, ZoneId>()\n+  {\n+    @Override\n+    public ZoneId apply(String value)\n+    {\n+      return DateTimeValue.parseZoneOffsetOrZoneName(value);\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return \"a string describing a timezone, either described by offset (e.g. '+02:00') or by name (e.g. 'Europe/Stockholm')\";\n+    }\n+  };\n+\n+  public static final Function<String, ListenSocketAddress> LISTEN_SOCKET_ADDRESS =\n+      new Function<String, ListenSocketAddress>()\n+      {\n         @Override\n-        public Boolean apply( String value )\n+        public ListenSocketAddress apply(String value)\n         {\n-            if ( value.equalsIgnoreCase( \"true\" ) )\n-            {\n-                return Boolean.TRUE;\n-            }\n-            else if ( value.equalsIgnoreCase( \"false\" ) )\n-            {\n-                return Boolean.FALSE;\n-            }\n-            else\n-            {\n-                throw new IllegalArgumentException( \"must be 'true' or 'false'\" );\n-            }\n+          return SocketAddressParser.socketAddress(value, ListenSocketAddress::new);\n         }\n \n         @Override\n         public String toString()\n         {\n-            return \"a boolean\";\n+          return \"a listen socket address\";\n         }\n-    };\n+      };\n \n-    public static final Function<String, Float> FLOAT = new Function<String, Float>()\n-    {\n+  public static final Function<String, AdvertisedSocketAddress> ADVERTISED_SOCKET_ADDRESS =\n+      new Function<String, AdvertisedSocketAddress>()\n+      {\n         @Override\n-        public Float apply( String value )\n+        public AdvertisedSocketAddress apply(String value)\n         {\n-            try\n-            {\n-                return Float.valueOf( value );\n-            }\n-            catch ( NumberFormatException e )\n-            {\n-                throw new IllegalArgumentException( \"not a valid float value\" );\n-            }\n+          return SocketAddressParser.socketAddress(value, AdvertisedSocketAddress::new);\n         }\n \n         @Override\n         public String toString()\n         {\n-            return \"a float\";\n+          return \"an advertised socket address\";\n         }\n+      };\n+\n+  public static BaseSetting<ListenSocketAddress> listenAddress(String name, int defaultPort)\n+  {\n+    return new ScopeAwareSetting<ListenSocketAddress>()\n+    {\n+      @Override\n+      protected String provideName()\n+      {\n+        return name;\n+      }\n+\n+      @Override\n+      public String getDefaultValue()\n+      {\n+        return default_listen_address.getDefaultValue() + \":\" + defaultPort;\n+      }\n+\n+      @Override\n+      public ListenSocketAddress from(Configuration config)\n+      {\n+        return config.get(this);\n+      }\n+\n+      @Override\n+      public ListenSocketAddress apply(Function<String, String> config)\n+      {\n+        String name = name();\n+        String value = config.apply(name);\n+        String hostname = default_listen_address.apply(config);\n+\n+        return SocketAddressParser.deriveSocketAddress(name, value, hostname, defaultPort, ListenSocketAddress::new);\n+      }\n+\n+      @Override\n+      public String valueDescription()\n+      {\n+        return LISTEN_SOCKET_ADDRESS.toString();\n+      }\n+    };\n+  }\n+\n+  public static BaseSetting<AdvertisedSocketAddress> advertisedAddress(String name,\n+                                                                       Setting<ListenSocketAddress> listenAddressSetting)\n+  {\n+    return new ScopeAwareSetting<AdvertisedSocketAddress>()\n+    {\n+      @Override\n+      protected String provideName()\n+      {\n+        return name;\n+      }\n+\n+      @Override\n+      public String getDefaultValue()\n+      {\n+        return default_advertised_address.getDefaultValue() + \":\" +\n+            LISTEN_SOCKET_ADDRESS.apply(listenAddressSetting.getDefaultValue()).socketAddress().getPort();\n+      }\n+\n+      @Override\n+      public AdvertisedSocketAddress from(Configuration config)\n+      {\n+        return config.get(this);\n+      }\n+\n+      @Override\n+      public AdvertisedSocketAddress apply(Function<String, String> config)\n+      {\n+        ListenSocketAddress listenSocketAddress = listenAddressSetting.apply(config);\n+        String hostname = default_advertised_address.apply(config);\n+        int port = listenSocketAddress.socketAddress().getPort();\n+\n+        String name = name();\n+        String value = config.apply(name);\n+\n+        return SocketAddressParser.deriveSocketAddress(name, value, hostname, port, AdvertisedSocketAddress::new);\n+      }\n+\n+      @Override\n+      public void withScope(Function<String, String> scopingRule)\n+      {\n+        super.withScope(scopingRule);\n+        listenAddressSetting.withScope(scopingRule);\n+      }\n+\n+      @Override\n+      public String valueDescription()\n+      {\n+        return ADVERTISED_SOCKET_ADDRESS.toString();\n+      }\n     };\n+  }\n \n-    public static final Function<String, Double> DOUBLE = new Function<String, Double>()\n+  public static final Function<String, Long> BYTES = new Function<String, Long>()\n+  {\n+    @Override\n+    public Long apply(String value)\n     {\n+      long bytes;\n+      try\n+      {\n+        bytes = ByteUnit.parse(value);\n+      } catch (IllegalArgumentException e)\n+      {\n+        throw new IllegalArgumentException(format(\n+            \"%s is not a valid size, must be e.g. 10, 5K, 1M, 11G\", value));\n+      }\n+      if (bytes < 0)\n+      {\n+        throw new IllegalArgumentException(\n+            value + \" is not a valid number of bytes. Must be positive or zero.\");\n+      }\n+      return bytes;\n+    }\n+\n+    @Override\n+    public String toString()\n+    {\n+      return \"a byte size (valid multipliers are `\" + SIZE_UNITS.replace(\", \", \"`, `\") + \"`)\";\n+    }\n+  };\n+\n+  public static final Function<String, URI> URI =\n+      new Function<String, URI>()\n+      {\n         @Override\n-        public Double apply( String value )\n-        {\n-            try\n-            {\n-                return Double.valueOf( value );\n-            }\n-            catch ( NumberFormatException e )\n-            {\n-                throw new IllegalArgumentException( \"not a valid double value\" );\n-            }\n+        public URI apply(String value)\n+        {\n+          try\n+          {\n+            return new URI(value);\n+          } catch (URISyntaxException e)\n+          {\n+            throw new IllegalArgumentException(\"not a valid URI\");\n+          }\n         }\n \n         @Override\n         public String toString()\n         {\n-            return \"a double\";\n+          return \"a URI\";\n         }\n-    };\n+      };\n \n-    public static final Function<String, String> STRING = new Function<String, String>()\n+  public static final Function<String, URI> NORMALIZED_RELATIVE_URI = new Function<String, URI>()\n+  {\n+    @Override\n+    public URI apply(String value)\n     {\n-        @Override\n-        public String apply( String value )\n+      try\n+      {\n+        String normalizedUri = new URI(value).normalize().getPath();\n+        if (normalizedUri.endsWith(\"/\"))\n         {\n-            return value.trim();\n+          // Force the string end without \"/\"\n+          normalizedUri = normalizedUri.substring(0, normalizedUri.length() - 1);\n         }\n+        return new URI(normalizedUri);\n+      } catch (URISyntaxException e)\n+      {\n+        throw new IllegalArgumentException(\"not a valid URI\");\n+      }\n+    }\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"a string\";\n-        }\n-    };\n+    @Override\n+    public String toString()\n+    {\n+      return \"a URI\";\n+    }\n+  };\n \n-    public static final Function<String,List<String>> STRING_LIST = list( SEPARATOR, STRING );\n+  public static final Function<String, File> PATH = new Function<String, File>()\n+  {\n+    @Override\n+    public File apply(String setting)\n+    {\n+      File file = new File(fixSeparatorsInPath(setting));\n+      if (!file.isAbsolute())\n+      {\n+        throw new IllegalArgumentException(\"Paths must be absolute. Got \" + file);\n+      }\n+      return file;\n+    }\n \n-    public static final Function<String,HostnamePort> HOSTNAME_PORT = new Function<String, HostnamePort>()\n+    @Override\n+    public String toString()\n     {\n-        @Override\n-        public HostnamePort apply( String value )\n+      return \"a path\";\n+    }\n+  };\n+\n+  public static <T extends Enum<T>> Function<String, T> options(final Class<T> enumClass)\n+  {\n+    return options(EnumSet.allOf(enumClass), false);\n+  }\n+\n+  public static <T extends Enum<T>> Function<String, T> options(final Class<T> enumClass, boolean ignoreCase)\n+  {\n+    return options(EnumSet.allOf(enumClass), ignoreCase);\n+  }\n+\n+  public static <T> Function<String, T> options(T... optionValues)\n+  {\n+    return options(Iterables.iterable(optionValues), false);\n+  }\n+\n+  public static <T> Function<String, T> optionsIgnoreCase(T... optionValues)\n+  {\n+    return options(Iterables.iterable(optionValues), true);\n+  }\n+\n+  public static <T> Function<String, T> options(final Iterable<T> optionValues, final boolean ignoreCase)\n+  {\n+    return new Function<String, T>()\n+    {\n+      @Override\n+      public T apply(String value)\n+      {\n+        for (T optionValue : optionValues)\n         {\n-            return new HostnamePort( value );\n-        }\n+          String allowedValue = optionValue.toString();\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"a hostname and port\";\n+          if (allowedValue.equals(value) || (ignoreCase && allowedValue.equalsIgnoreCase(value)))\n+          {\n+            return optionValue;\n+          }\n         }\n+        String possibleValues = Iterables.asList(optionValues).toString();\n+        throw new IllegalArgumentException(\n+            \"must be one of \" + possibleValues + \" case \" + (ignoreCase ? \"insensitive\" : \"sensitive\"));\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return describeOneOf(optionValues);\n+      }\n     };\n+  }\n+\n+  /**\n+   * @param optionValues iterable of objects with descriptive toString methods\n+   * @return a string describing possible values like \"one of `X, Y, Z`\"\n+   */\n+  @Nonnull\n+  public static String describeOneOf(@Nonnull Iterable optionValues)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"one of `\");\n+    String comma = \"\";\n+    for (Object optionValue : optionValues)\n+    {\n+      builder.append(comma).append(optionValue);\n+      comma = \"`, `\";\n+    }\n+    builder.append('`');\n+    return builder.toString();\n+  }\n \n-    public static final Function<String,Duration> DURATION = new Function<String, Duration>()\n+  public static <T> Function<String, List<T>> list(final String separator, final Function<String, T> itemParser)\n+  {\n+    return new Function<String, List<T>>()\n     {\n-        @Override\n-        public Duration apply( String value )\n-        {\n-            return Duration.ofMillis( TimeUtil.parseTimeMillis.apply( value ) );\n+      @Override\n+      public List<T> apply(String value)\n+      {\n+        List<T> list = new ArrayList<>();\n+        String[] parts = value.split(separator);\n+        for (String part : parts)\n+        {\n+          part = part.trim();\n+          if (StringUtils.isNotEmpty(part))\n+          {\n+            list.add(itemParser.apply(part));\n+          }\n         }\n+        return list;\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return \"a list separated by \\\"\" + separator + \"\\\" where items are \" + itemParser;\n+      }\n+    };\n+  }\n \n-        @Override\n-        public String toString()\n+  // Modifiers\n+  public static BiFunction<String, Function<String, String>, String> matches(final String regex)\n+  {\n+    final Pattern pattern = Pattern.compile(regex);\n+\n+    return new BiFunction<String, Function<String, String>, String>()\n+    {\n+      @Override\n+      public String apply(String value, Function<String, String> settings)\n+      {\n+        if (!pattern.matcher(value).matches())\n         {\n-            return \"a duration (\" + TimeUtil.VALID_TIME_DESCRIPTION + \")\";\n+          throw new IllegalArgumentException(\"value does not match expression:\" + regex);\n         }\n+\n+        return value;\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return format(MATCHES_PATTERN_MESSAGE, regex);\n+      }\n     };\n+  }\n \n-    public static final Function<String,ZoneId> TIMEZONE = new Function<String,ZoneId>()\n-    {\n+  public static final BiFunction<List<String>, Function<String, String>, List<String>> nonEmptyList =\n+      new BiFunction<List<String>, Function<String, String>, List<String>>()\n+      {\n         @Override\n-        public ZoneId apply( String value )\n+        public List<String> apply(List<String> values, Function<String, String> settings)\n         {\n-            return DateTimeValue.parseZoneOffsetOrZoneName(value);\n+          if (values.isEmpty())\n+          {\n+            throw new IllegalArgumentException(\"setting must not be empty\");\n+          }\n+          return values;\n         }\n \n         @Override\n         public String toString()\n         {\n-            return \"a string describing a timezone, either described by offset (e.g. '+02:00') or by name (e.g. 'Europe/Stockholm')\";\n+          return \"non-empty list\";\n         }\n-    };\n-\n-    public static final Function<String, ListenSocketAddress> LISTEN_SOCKET_ADDRESS =\n-            new Function<String, ListenSocketAddress>()\n-            {\n-                @Override\n-                public ListenSocketAddress apply( String value )\n-                {\n-                    return SocketAddressParser.socketAddress( value, ListenSocketAddress::new );\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    return \"a listen socket address\";\n-                }\n-            };\n-\n-    public static final Function<String, AdvertisedSocketAddress> ADVERTISED_SOCKET_ADDRESS =\n-            new Function<String, AdvertisedSocketAddress>()\n-            {\n-                @Override\n-                public AdvertisedSocketAddress apply( String value )\n-                {\n-                    return SocketAddressParser.socketAddress( value, AdvertisedSocketAddress::new );\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    return \"an advertised socket address\";\n-                }\n-            };\n-\n-    public static BaseSetting<ListenSocketAddress> listenAddress( String name, int defaultPort )\n-    {\n-        return new ScopeAwareSetting<ListenSocketAddress>()\n-        {\n-            @Override\n-            protected String provideName()\n-            {\n-                return name;\n-            }\n-\n-            @Override\n-            public String getDefaultValue()\n-            {\n-                return default_listen_address.getDefaultValue() + \":\" + defaultPort;\n-            }\n-\n-            @Override\n-            public ListenSocketAddress from( Configuration config )\n-            {\n-                return config.get( this );\n-            }\n-\n-            @Override\n-            public ListenSocketAddress apply( Function<String, String> config )\n-            {\n-                String name = name();\n-                String value = config.apply( name );\n-                String hostname = default_listen_address.apply( config );\n-\n-                return SocketAddressParser.deriveSocketAddress( name, value, hostname, defaultPort, ListenSocketAddress::new );\n-            }\n-\n-            @Override\n-            public String valueDescription()\n-            {\n-                return LISTEN_SOCKET_ADDRESS.toString();\n-            }\n-        };\n-    }\n+      };\n \n-    public static BaseSetting<AdvertisedSocketAddress> advertisedAddress( String name,\n-            Setting<ListenSocketAddress> listenAddressSetting )\n-    {\n-        return new ScopeAwareSetting<AdvertisedSocketAddress>()\n-        {\n-            @Override\n-            protected String provideName()\n-            {\n-                return name;\n-            }\n-\n-            @Override\n-            public String getDefaultValue()\n-            {\n-                return default_advertised_address.getDefaultValue() + \":\" +\n-                        LISTEN_SOCKET_ADDRESS.apply( listenAddressSetting.getDefaultValue() ).socketAddress().getPort();\n-            }\n-\n-            @Override\n-            public AdvertisedSocketAddress from( Configuration config )\n-            {\n-                return config.get( this );\n-            }\n-\n-            @Override\n-            public AdvertisedSocketAddress apply( Function<String, String> config )\n-            {\n-                ListenSocketAddress listenSocketAddress = listenAddressSetting.apply( config );\n-                String hostname = default_advertised_address.apply( config );\n-                int port = listenSocketAddress.socketAddress().getPort();\n-\n-                String name = name();\n-                String value = config.apply( name );\n-\n-                return SocketAddressParser.deriveSocketAddress( name, value, hostname, port, AdvertisedSocketAddress::new );\n-            }\n-\n-            @Override\n-            public void withScope( Function<String,String> scopingRule )\n-            {\n-                super.withScope( scopingRule );\n-                listenAddressSetting.withScope( scopingRule );\n-            }\n-\n-            @Override\n-            public String valueDescription()\n-            {\n-                return ADVERTISED_SOCKET_ADDRESS.toString();\n-            }\n-        };\n-    }\n+  public static BiFunction<List<String>, Function<String, String>, List<String>> matchesAny(final String regex)\n+  {\n+    final Pattern pattern = Pattern.compile(regex);\n \n-    public static final Function<String, Long> BYTES = new Function<String, Long>()\n+    return new BiFunction<List<String>, Function<String, String>, List<String>>()\n     {\n-        @Override\n-        public Long apply( String value )\n-        {\n-            long bytes;\n-            try\n-            {\n-                bytes = ByteUnit.parse( value );\n-            }\n-            catch ( IllegalArgumentException e )\n-            {\n-                throw new IllegalArgumentException( format(\n-                        \"%s is not a valid size, must be e.g. 10, 5K, 1M, 11G\", value ) );\n-            }\n-            if ( bytes < 0 )\n-            {\n-                throw new IllegalArgumentException(\n-                        value + \" is not a valid number of bytes. Must be positive or zero.\" );\n-            }\n-            return bytes;\n+      @Override\n+      public List<String> apply(List<String> values, Function<String, String> settings)\n+      {\n+        for (String value : values)\n+        {\n+          if (!pattern.matcher(value).matches())\n+          {\n+            throw new IllegalArgumentException(\"value does not match expression:\" + regex);\n+          }\n         }\n \n-        @Override\n-        public String toString()\n-        {\n-            return \"a byte size (valid multipliers are `\" + SIZE_UNITS.replace( \", \", \"`, `\" ) + \"`)\";\n-        }\n+        return values;\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return format(MATCHES_PATTERN_MESSAGE, regex);\n+      }\n     };\n+  }\n \n-    public static final Function<String, URI> URI =\n-            new Function<String, URI>()\n-            {\n-                @Override\n-                public URI apply( String value )\n-                {\n-                    try\n-                    {\n-                        return new URI( value );\n-                    }\n-                    catch ( URISyntaxException e )\n-                    {\n-                        throw new IllegalArgumentException( \"not a valid URI\" );\n-                    }\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    return \"a URI\";\n-                }\n-            };\n-\n-    public static final Function<String, URI> NORMALIZED_RELATIVE_URI = new Function<String, URI>()\n+  public static <T extends Comparable<T>> BiFunction<T, Function<String, String>, T> min(final T min)\n+  {\n+    return new BiFunction<T, Function<String, String>, T>()\n     {\n-        @Override\n-        public URI apply( String value )\n+      @Override\n+      public T apply(T value, Function<String, String> settings)\n+      {\n+        if (value != null && value.compareTo(min) < 0)\n         {\n-            try\n-            {\n-                String normalizedUri = new URI( value ).normalize().getPath();\n-                if ( normalizedUri.endsWith( \"/\" ) )\n-                {\n-                    // Force the string end without \"/\"\n-                    normalizedUri = normalizedUri.substring( 0, normalizedUri.length() - 1 );\n-                }\n-                return new URI( normalizedUri );\n-            }\n-            catch ( URISyntaxException e )\n-            {\n-                throw new IllegalArgumentException( \"not a valid URI\" );\n-            }\n+          throw new IllegalArgumentException(format(\"minimum allowed value is: %s\", min));\n         }\n+        return value;\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return \"is minimum `\" + min + \"`\";\n+      }\n+    };\n+  }\n \n-        @Override\n-        public String toString()\n+  public static <T extends Comparable<T>> BiFunction<T, Function<String, String>, T> max(final T max)\n+  {\n+    return new BiFunction<T, Function<String, String>, T>()\n+    {\n+      @Override\n+      public T apply(T value, Function<String, String> settings)\n+      {\n+        if (value != null && value.compareTo(max) > 0)\n         {\n-            return \"a URI\";\n+          throw new IllegalArgumentException(format(\"maximum allowed value is: %s\", max));\n         }\n+        return value;\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return \"is maximum `\" + max + \"`\";\n+      }\n     };\n+  }\n \n-    public static final Function<String, File> PATH = new Function<String, File>()\n+  public static <T extends Comparable<T>> BiFunction<T, Function<String, String>, T> range(final T min, final T max)\n+  {\n+    return new BiFunction<T, Function<String, String>, T>()\n     {\n-        @Override\n-        public File apply( String setting )\n+      @Override\n+      public T apply(T from1, Function<String, String> from2)\n+      {\n+        return min(min).apply(max(max).apply(from1, from2), from2);\n+      }\n+\n+      @Override\n+      public String toString()\n+      {\n+        return format(\"is in the range `%s` to `%s`\", min, max);\n+      }\n+    };\n+  }\n+\n+  public static final BiFunction<Integer, Function<String, String>, Integer> port =\n+      illegalValueMessage(\"must be a valid port number\", range(0, 65535));\n+\n+  public static <T> BiFunction<T, Function<String, String>, T> illegalValueMessage(final String message,\n+                                                                                   final BiFunction<T, Function<String, String>, T> valueFunction)\n+  {\n+    return new BiFunction<T, Function<String, String>, T>()\n+    {\n+      @Override\n+      public T apply(T from1, Function<String, String> from2)\n+      {\n+        try\n+        {\n+          return valueFunction.apply(from1, from2);\n+        } catch (IllegalArgumentException e)\n         {\n-            File file = new File( fixSeparatorsInPath( setting ) );\n-            if ( !file.isAbsolute() )\n-            {\n-                throw new IllegalArgumentException( \"Paths must be absolute. Got \" + file );\n-            }\n-            return file;\n+          throw new IllegalArgumentException(message);\n         }\n+      }\n \n-        @Override\n-        public String toString()\n+      @Override\n+      public String toString()\n+      {\n+        String description = message;\n+        if (valueFunction != null\n+            && !format(MATCHES_PATTERN_MESSAGE, ANY).equals(\n+            valueFunction.toString()))\n         {\n-            return \"a path\";\n+          description += \" (\" + valueFunction + \")\";\n         }\n+        return description;\n+      }\n     };\n+  }\n \n-    public static <T extends Enum<T>> Function<String, T> options( final Class<T> enumClass )\n-    {\n-        return options( EnumSet.allOf( enumClass ), false );\n-    }\n+  // Setting converters and constraints\n+  public static long parseLongWithUnit(String numberWithPotentialUnit)\n+  {\n+    int firstNonDigitIndex = findFirstNonDigit(numberWithPotentialUnit);\n+    String number = numberWithPotentialUnit.substring(0, firstNonDigitIndex);\n \n-    public static <T extends Enum<T>> Function<String, T> options( final Class<T> enumClass, boolean ignoreCase )\n+    long multiplier = 1;\n+    if (firstNonDigitIndex < numberWithPotentialUnit.length())\n     {\n-        return options( EnumSet.allOf( enumClass ), ignoreCase );\n+      String unit = numberWithPotentialUnit.substring(firstNonDigitIndex);\n+      if (unit.equalsIgnoreCase(\"k\"))\n+      {\n+        multiplier = 1024;\n+      } else if (unit.equalsIgnoreCase(\"m\"))\n+      {\n+        multiplier = 1024 * 1024;\n+      } else if (unit.equalsIgnoreCase(\"g\"))\n+      {\n+        multiplier = 1024 * 1024 * 1024;\n+      } else\n+      {\n+        throw new IllegalArgumentException(\n+            \"Illegal unit '\" + unit + \"' for number '\" + numberWithPotentialUnit + \"'\");\n+      }\n     }\n \n-    public static <T> Function<String, T> options( T... optionValues )\n+    return parseLong(number) * multiplier;\n+  }\n+\n+  /**\n+   * @return index of first non-digit character in {@code numberWithPotentialUnit}. If all digits then\n+   * {@code numberWithPotentialUnit.length()} is returned.\n+   */\n+  private static int findFirstNonDigit(String numberWithPotentialUnit)\n+  {\n+    int firstNonDigitIndex = numberWithPotentialUnit.length();\n+    for (int i = 0; i < numberWithPotentialUnit.length(); i++)\n     {\n-        return options( Iterables.iterable( optionValues ), false );\n+      if (!isDigit(numberWithPotentialUnit.charAt(i)))\n+      {\n+        firstNonDigitIndex = i;\n+        break;\n+      }\n     }\n-\n-    public static <T> Function<String, T> optionsIgnoreCase( T... optionValues )\n+    return firstNonDigitIndex;\n+  }\n+\n+  // Setting helpers\n+  private static BiFunction<String, Function<String, String>, String> named()\n+  {\n+    return (name, settings) -> settings.apply(name);\n+  }\n+\n+  private static BiFunction<String, Function<String, String>, String> withDefault(final String defaultValue,\n+                                                                                  final BiFunction<String, Function<String, String>, String> lookup)\n+  {\n+    return (name, settings) ->\n     {\n-        return options( Iterables.iterable( optionValues ), true );\n-    }\n+      String value = lookup.apply(name, settings);\n+      if (value == null)\n+      {\n+        return defaultValue;\n+      } else\n+      {\n+        return value;\n+      }\n+    };\n+  }\n \n-    public static <T> Function<String, T> options( final Iterable<T> optionValues, final boolean ignoreCase )\n+  public static <T> Setting<T> legacyFallback(Setting<T> fallbackSetting, Setting<T> newSetting)\n+  {\n+    return new Setting<T>()\n     {\n-        return new Function<String, T>()\n-        {\n-            @Override\n-            public T apply( String value )\n-            {\n-                for ( T optionValue : optionValues )\n-                {\n-                    String allowedValue = optionValue.toString();\n-\n-                    if ( allowedValue.equals( value ) || (ignoreCase && allowedValue.equalsIgnoreCase( value )) )\n-                    {\n-                        return optionValue;\n-                    }\n-                }\n-                String possibleValues = Iterables.asList( optionValues ).toString();\n-                throw new IllegalArgumentException(\n-                        \"must be one of \" + possibleValues + \" case \" + (ignoreCase ? \"insensitive\" : \"sensitive\") );\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return describeOneOf( optionValues );\n-            }\n-        };\n-    }\n-\n-    /**\n-     *\n-     * @param optionValues iterable of objects with descriptive toString methods\n-     * @return a string describing possible values like \"one of `X, Y, Z`\"\n-     */\n-    @Nonnull\n-    public static String describeOneOf( @Nonnull Iterable optionValues )\n+      @Override\n+      public String name()\n+      {\n+        return newSetting.name();\n+      }\n+\n+      @Override\n+      public String getDefaultValue()\n+      {\n+        return newSetting.getDefaultValue();\n+      }\n+\n+      @Override\n+      public T from(Configuration config)\n+      {\n+        return newSetting.from(config);\n+      }\n+\n+      @Override\n+      public T apply(Function<String, String> config)\n+      {\n+        String newValue = config.apply(newSetting.name());\n+        return newValue == null ? fallbackSetting.apply(config) : newSetting.apply(config);\n+      }\n+\n+      @Override\n+      public void withScope(Function<String, String> scopingRule)\n+      {\n+        newSetting.withScope(scopingRule);\n+      }\n+\n+      @Override\n+      public String valueDescription()\n+      {\n+        return newSetting.valueDescription();\n+      }\n+\n+      @Override\n+      public Optional<String> description()\n+      {\n+        return newSetting.description();\n+      }\n+\n+      @Override\n+      public boolean dynamic()\n+      {\n+        return newSetting.dynamic();\n+      }\n+\n+      @Override\n+      public boolean deprecated()\n+      {\n+        return newSetting.deprecated();\n+      }\n+\n+      @Override\n+      public Optional<String> replacement()\n+      {\n+        return newSetting.replacement();\n+      }\n+\n+      @Override\n+      public boolean internal()\n+      {\n+        return newSetting.internal();\n+      }\n+\n+      @Override\n+      public boolean secret()\n+      {\n+        return newSetting.secret();\n+      }\n+\n+      @Override\n+      public Optional<String> documentedDefaultValue()\n+      {\n+        return newSetting.documentedDefaultValue();\n+      }\n+    };\n+  }\n+\n+  private Settings()\n+  {\n+    throw new AssertionError();\n+  }\n+\n+  public static class DefaultSetting<T> extends ScopeAwareSetting<T> implements SettingHelper<T>\n+  {\n+    private final String name;\n+    private final Function<String, T> parser;\n+    private final BiFunction<String, Function<String, String>, String> valueLookup;\n+    private final BiFunction<String, Function<String, String>, String> defaultLookup;\n+    private final List<BiFunction<T, Function<String, String>, T>> valueConverters;\n+\n+    protected DefaultSetting(String name, Function<String, T> parser,\n+                             BiFunction<String, Function<String, String>, String> valueLookup,\n+                             BiFunction<String, Function<String, String>, String> defaultLookup,\n+                             List<BiFunction<T, Function<String, String>, T>> valueConverters)\n     {\n-        StringBuilder builder = new StringBuilder();\n-        builder.append( \"one of `\" );\n-        String comma = \"\";\n-        for ( Object optionValue : optionValues )\n-        {\n-            builder.append( comma ).append( optionValue );\n-            comma = \"`, `\";\n-        }\n-        builder.append( '`' );\n-        return builder.toString();\n+      this.name = name;\n+      this.parser = parser;\n+      this.valueLookup = valueLookup;\n+      this.defaultLookup = defaultLookup;\n+      this.valueConverters = valueConverters;\n     }\n \n-    public static <T> Function<String, List<T>> list( final String separator, final Function<String, T> itemParser )\n+    @Override\n+    protected String provideName()\n     {\n-        return new Function<String, List<T>>()\n-        {\n-            @Override\n-            public List<T> apply( String value )\n-            {\n-                List<T> list = new ArrayList<>();\n-                String[] parts = value.split( separator );\n-                for ( String part : parts )\n-                {\n-                    part = part.trim();\n-                    if ( StringUtils.isNotEmpty( part ) )\n-                    {\n-                        list.add( itemParser.apply( part ) );\n-                    }\n-                }\n-                return list;\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return \"a list separated by \\\"\" + separator + \"\\\" where items are \" + itemParser;\n-            }\n-        };\n+      return name;\n     }\n \n-    // Modifiers\n-    public static BiFunction<String, Function<String, String>, String> matches( final String regex )\n+    @Override\n+    public String getDefaultValue()\n     {\n-        final Pattern pattern = Pattern.compile( regex );\n-\n-        return new BiFunction<String, Function<String, String>, String>()\n-        {\n-            @Override\n-            public String apply( String value, Function<String, String> settings )\n-            {\n-                if ( !pattern.matcher( value ).matches() )\n-                {\n-                    throw new IllegalArgumentException( \"value does not match expression:\" + regex );\n-                }\n-\n-                return value;\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return format( MATCHES_PATTERN_MESSAGE, regex );\n-            }\n-        };\n-    }\n-\n-    public static final BiFunction<List<String>,Function<String,String>,List<String>> nonEmptyList =\n-            new BiFunction<List<String>,Function<String,String>,List<String>>()\n-            {\n-                @Override\n-                public List<String> apply( List<String> values, Function<String,String> settings )\n-                {\n-                    if ( values.isEmpty() )\n-                    {\n-                        throw new IllegalArgumentException( \"setting must not be empty\" );\n-                    }\n-                    return values;\n-                }\n-\n-                @Override\n-                public String toString()\n-                {\n-                    return \"non-empty list\";\n-                }\n-            };\n-\n-    public static BiFunction<List<String>,Function<String,String>,List<String>> matchesAny( final String regex )\n-    {\n-        final Pattern pattern = Pattern.compile( regex );\n-\n-        return new BiFunction<List<String>,Function<String,String>,List<String>>()\n-        {\n-            @Override\n-            public List<String> apply( List<String> values, Function<String,String> settings )\n-            {\n-                for ( String value : values )\n-                {\n-                    if ( !pattern.matcher( value ).matches() )\n-                    {\n-                        throw new IllegalArgumentException( \"value does not match expression:\" + regex );\n-                    }\n-                }\n-\n-                return values;\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return format( MATCHES_PATTERN_MESSAGE, regex );\n-            }\n-        };\n+      return defaultLookup(from -> null);\n     }\n \n-    public static <T extends Comparable<T>> BiFunction<T, Function<String, String>, T> min( final T min )\n+    @Override\n+    public T from(Configuration config)\n     {\n-        return new BiFunction<T, Function<String, String>, T>()\n-        {\n-            @Override\n-            public T apply( T value, Function<String, String> settings )\n-            {\n-                if ( value != null && value.compareTo( min ) < 0 )\n-                {\n-                    throw new IllegalArgumentException( format( \"minimum allowed value is: %s\", min ) );\n-                }\n-                return value;\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return \"is minimum `\" + min + \"`\";\n-            }\n-        };\n+      return config.get(this);\n     }\n \n-    public static <T extends Comparable<T>> BiFunction<T, Function<String, String>, T> max( final T max )\n+    @Override\n+    public Optional<Function<String, T>> getParser()\n     {\n-        return new BiFunction<T, Function<String, String>, T>()\n-        {\n-            @Override\n-            public T apply( T value, Function<String, String> settings )\n-            {\n-                if ( value != null && value.compareTo( max ) > 0 )\n-                {\n-                    throw new IllegalArgumentException( format( \"maximum allowed value is: %s\", max ) );\n-                }\n-                return value;\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return \"is maximum `\" + max + \"`\";\n-            }\n-        };\n+      return Optional.of(parser);\n     }\n \n-    public static <T extends Comparable<T>> BiFunction<T, Function<String, String>, T> range( final T min, final T max )\n+    @Override\n+    public String lookup(Function<String, String> settings)\n     {\n-        return new BiFunction<T, Function<String, String>, T>()\n-        {\n-            @Override\n-            public T apply( T from1, Function<String, String> from2 )\n-            {\n-                return min(min).apply( max(max).apply( from1, from2 ), from2 );\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                return format( \"is in the range `%s` to `%s`\", min, max );\n-            }\n-        };\n+      return valueLookup.apply(name(), settings);\n     }\n \n-    public static final BiFunction<Integer, Function<String, String>, Integer> port =\n-            illegalValueMessage( \"must be a valid port number\", range( 0, 65535 ) );\n-\n-    public static <T> BiFunction<T, Function<String, String>, T> illegalValueMessage( final String message,\n-            final BiFunction<T,Function<String,String>,T> valueFunction )\n+    @Override\n+    public String defaultLookup(Function<String, String> settings)\n     {\n-        return new BiFunction<T, Function<String, String>, T>()\n-        {\n-            @Override\n-            public T apply( T from1, Function<String, String> from2 )\n-            {\n-                try\n-                {\n-                    return valueFunction.apply( from1, from2 );\n-                }\n-                catch ( IllegalArgumentException e )\n-                {\n-                    throw new IllegalArgumentException( message );\n-                }\n-            }\n-\n-            @Override\n-            public String toString()\n-            {\n-                String description = message;\n-                if ( valueFunction != null\n-                     && !format( MATCHES_PATTERN_MESSAGE, ANY ).equals(\n-                             valueFunction.toString() ) )\n-                {\n-                    description += \" (\" + valueFunction + \")\";\n-                }\n-                return description;\n-            }\n-        };\n+      return defaultLookup.apply(name(), settings);\n     }\n \n-    // Setting converters and constraints\n-    public static long parseLongWithUnit( String numberWithPotentialUnit )\n+    @Override\n+    public T apply(Function<String, String> settings)\n     {\n-        int firstNonDigitIndex = findFirstNonDigit( numberWithPotentialUnit );\n-        String number = numberWithPotentialUnit.substring( 0, firstNonDigitIndex );\n+      // Lookup value as string\n+      String value = lookup(settings);\n \n-        long multiplier = 1;\n-        if ( firstNonDigitIndex < numberWithPotentialUnit.length() )\n+      // Try defaults\n+      if (value == null)\n+      {\n+        try\n         {\n-            String unit = numberWithPotentialUnit.substring( firstNonDigitIndex );\n-            if ( unit.equalsIgnoreCase( \"k\" ) )\n-            {\n-                multiplier = 1024;\n-            }\n-            else if ( unit.equalsIgnoreCase( \"m\" ) )\n-            {\n-                multiplier = 1024 * 1024;\n-            }\n-            else if ( unit.equalsIgnoreCase( \"g\" ) )\n-            {\n-                multiplier = 1024 * 1024 * 1024;\n-            }\n-            else\n-            {\n-                throw new IllegalArgumentException(\n-                        \"Illegal unit '\" + unit + \"' for number '\" + numberWithPotentialUnit + \"'\" );\n-            }\n+          value = defaultLookup(settings);\n+        } catch (Exception e)\n+        {\n+          throw new IllegalArgumentException(format(\"Missing mandatory setting '%s'\", name()));\n+        }\n+      }\n+\n+      // If still null, return null\n+      if (value == null)\n+      {\n+        return null;\n+      }\n+\n+      // Parse value\n+      T result;\n+      try\n+      {\n+        result = parser.apply(value);\n+        // Apply converters and constraints\n+        if (valueConverters != null)\n+        {\n+          for (BiFunction<T, Function<String, String>, T> valueConverter : valueConverters)\n+          {\n+            result = valueConverter.apply(result, settings);\n+          }\n         }\n+      } catch (IllegalArgumentException e)\n+      {\n+        throw new InvalidSettingException(name(), value, e.getMessage());\n+      }\n \n-        return parseLong( number ) * multiplier;\n+      return result;\n     }\n \n-    /**\n-     * @return index of first non-digit character in {@code numberWithPotentialUnit}. If all digits then\n-     * {@code numberWithPotentialUnit.length()} is returned.\n-     */\n-    private static int findFirstNonDigit( String numberWithPotentialUnit )\n+    @Override\n+    public String valueDescription()\n     {\n-        int firstNonDigitIndex = numberWithPotentialUnit.length();\n-        for ( int i = 0; i < numberWithPotentialUnit.length(); i++ )\n-        {\n-            if ( !isDigit( numberWithPotentialUnit.charAt( i ) ) )\n-            {\n-                firstNonDigitIndex = i;\n-                break;\n-            }\n+      StringBuilder builder = new StringBuilder();\n+      builder.append(name()).append(\" is \").append(parser);\n+\n+      if (valueConverters != null && valueConverters.size() > 0)\n+      {\n+        builder.append(\" which \");\n+        boolean first = true;\n+        for (BiFunction<T, Function<String, String>, T> valueConverter : valueConverters)\n+        {\n+          if (!first)\n+          {\n+            builder.append(\", and \");\n+          }\n+          builder.append(valueConverter);\n+          first = false;\n         }\n-        return firstNonDigitIndex;\n+      }\n+\n+      return builder.toString();\n     }\n+  }\n \n-    // Setting helpers\n-    private static BiFunction<String,Function<String, String>, String> named()\n+  private static class FileSetting extends ScopeAwareSetting<File>\n+  {\n+    private final String name;\n+    private final String defaultValue;\n+    private final Setting<File> relativeRoot;\n+\n+    FileSetting(String name, String defaultValue)\n     {\n-        return ( name, settings ) -> settings.apply( name );\n+      this(name, defaultValue, GraphDatabaseSettings.neo4j_home);\n     }\n \n-    private static BiFunction<String,Function<String,String>,String> withDefault( final String defaultValue,\n-            final BiFunction<String,Function<String,String>,String> lookup )\n+    FileSetting(String name, String defaultValue, Setting<File> relativeRoot)\n     {\n-        return ( name, settings ) ->\n-        {\n-            String value = lookup.apply( name, settings );\n-            if ( value == null )\n-            {\n-                return defaultValue;\n-            }\n-            else\n-            {\n-                return value;\n-            }\n-        };\n+      this.name = name;\n+      this.defaultValue = defaultValue;\n+      this.relativeRoot = relativeRoot;\n     }\n \n-    public static <T> Setting<T> legacyFallback( Setting<T> fallbackSetting, Setting<T> newSetting )\n+    @Override\n+    protected String provideName()\n     {\n-        return new Setting<T>()\n-        {\n-            @Override\n-            public String name()\n-            {\n-                return newSetting.name();\n-            }\n-\n-            @Override\n-            public String getDefaultValue()\n-            {\n-                return newSetting.getDefaultValue();\n-            }\n-\n-            @Override\n-            public T from( Configuration config )\n-            {\n-                return newSetting.from( config );\n-            }\n-\n-            @Override\n-            public T apply( Function<String, String> config )\n-            {\n-                String newValue = config.apply( newSetting.name() );\n-                return newValue == null ? fallbackSetting.apply( config ) : newSetting.apply( config );\n-            }\n-\n-            @Override\n-            public void withScope( Function<String,String> scopingRule )\n-            {\n-                newSetting.withScope( scopingRule );\n-            }\n-\n-            @Override\n-            public String valueDescription()\n-            {\n-                return newSetting.valueDescription();\n-            }\n-\n-            @Override\n-            public Optional<String> description()\n-            {\n-                return newSetting.description();\n-            }\n-\n-            @Override\n-            public boolean dynamic()\n-            {\n-                return newSetting.dynamic();\n-            }\n-\n-            @Override\n-            public boolean deprecated()\n-            {\n-                return newSetting.deprecated();\n-            }\n-\n-            @Override\n-            public Optional<String> replacement()\n-            {\n-                return newSetting.replacement();\n-            }\n-\n-            @Override\n-            public boolean internal()\n-            {\n-                return newSetting.internal();\n-            }\n-\n-            @Override\n-            public boolean secret()\n-            {\n-                return newSetting.secret();\n-            }\n-\n-            @Override\n-            public Optional<String> documentedDefaultValue()\n-            {\n-                return newSetting.documentedDefaultValue();\n-            }\n-        };\n+      return name;\n     }\n \n-    private Settings()\n+    @Override\n+    public String getDefaultValue()\n     {\n-        throw new AssertionError();\n+      return defaultValue;\n     }\n \n-    public static class DefaultSetting<T> extends ScopeAwareSetting<T> implements SettingHelper<T>\n+    @Override\n+    public File from(Configuration config)\n     {\n-        private final String name;\n-        private final Function<String, T> parser;\n-        private final BiFunction<String,Function<String,String>,String> valueLookup;\n-        private final BiFunction<String,Function<String,String>,String> defaultLookup;\n-        private final List<BiFunction<T,Function<String,String>,T>> valueConverters;\n-\n-        protected DefaultSetting( String name, Function<String,T> parser,\n-                BiFunction<String,Function<String,String>,String> valueLookup,\n-                BiFunction<String,Function<String,String>,String> defaultLookup,\n-                List<BiFunction<T,Function<String,String>,T>> valueConverters )\n-        {\n-            this.name = name;\n-            this.parser = parser;\n-            this.valueLookup = valueLookup;\n-            this.defaultLookup = defaultLookup;\n-            this.valueConverters = valueConverters;\n-        }\n-\n-        @Override\n-        protected String provideName()\n-        {\n-            return name;\n-        }\n-\n-        @Override\n-        public String getDefaultValue()\n-        {\n-            return defaultLookup( from -> null );\n-        }\n-\n-        @Override\n-        public T from( Configuration config )\n-        {\n-            return config.get( this );\n-        }\n-\n-        @Override\n-        public Optional<Function<String, T>> getParser()\n-        {\n-            return Optional.of( parser );\n-        }\n-\n-        @Override\n-        public String lookup( Function<String, String> settings )\n-        {\n-            return valueLookup.apply( name(), settings );\n-        }\n-\n-        @Override\n-        public String defaultLookup( Function<String, String> settings )\n-        {\n-            return defaultLookup.apply( name(), settings );\n-        }\n-\n-        @Override\n-        public T apply( Function<String, String> settings )\n-        {\n-            // Lookup value as string\n-            String value = lookup( settings );\n-\n-            // Try defaults\n-            if ( value == null )\n-            {\n-                try\n-                {\n-                    value = defaultLookup( settings );\n-                }\n-                catch ( Exception e )\n-                {\n-                    throw new IllegalArgumentException( format( \"Missing mandatory setting '%s'\", name() ) );\n-                }\n-            }\n-\n-            // If still null, return null\n-            if ( value == null )\n-            {\n-                return null;\n-            }\n-\n-            // Parse value\n-            T result;\n-            try\n-            {\n-                result = parser.apply( value );\n-                // Apply converters and constraints\n-                if ( valueConverters != null )\n-                {\n-                    for ( BiFunction<T,Function<String,String>,T> valueConverter : valueConverters )\n-                    {\n-                        result = valueConverter.apply( result, settings );\n-                    }\n-                }\n-            }\n-            catch ( IllegalArgumentException e )\n-            {\n-                throw new InvalidSettingException( name(), value, e.getMessage() );\n-            }\n-\n-            return result;\n-        }\n-\n-        @Override\n-        public String valueDescription()\n-        {\n-            StringBuilder builder = new StringBuilder(  );\n-            builder.append( name() ).append( \" is \" ).append( parser );\n-\n-            if ( valueConverters != null && valueConverters.size() > 0 )\n-            {\n-                builder.append( \" which \" );\n-                boolean first = true;\n-                for ( BiFunction<T,Function<String,String>,T> valueConverter : valueConverters )\n-                {\n-                    if ( !first )\n-                    {\n-                        builder.append( \", and \" );\n-                    }\n-                    builder.append( valueConverter );\n-                    first = false;\n-                }\n-            }\n-\n-            return builder.toString();\n-        }\n+      return config.get(this);\n     }\n \n-    private static class FileSetting extends ScopeAwareSetting<File>\n+    @Override\n+    public File apply(Function<String, String> config)\n     {\n-        private final String name;\n-        private final String defaultValue;\n-        private final Setting<File> relativeRoot;\n-\n-        FileSetting( String name, String defaultValue )\n-        {\n-            this( name, defaultValue, GraphDatabaseSettings.neo4j_home );\n-        }\n-\n-        FileSetting( String name, String defaultValue, Setting<File> relativeRoot )\n-        {\n-            this.name = name;\n-            this.defaultValue = defaultValue;\n-            this.relativeRoot = relativeRoot;\n-        }\n-\n-        @Override\n-        protected String provideName()\n-        {\n-            return name;\n-        }\n+      String value = config.apply(name());\n+      if (value == null)\n+      {\n+        value = defaultValue;\n+      }\n+      if (value == null)\n+      {\n+        return null;\n+      }\n+\n+      String setting = fixSeparatorsInPath(value);\n+      File settingFile = new File(setting);\n+\n+      if (settingFile.isAbsolute())\n+      {\n+        return settingFile;\n+      } else\n+      {\n+        return new File(relativeRoot.apply(config), setting);\n+      }\n+    }\n \n-        @Override\n-        public String getDefaultValue()\n-        {\n-            return defaultValue;\n-        }\n+    @Override\n+    public String valueDescription()\n+    {\n+      return \"A filesystem path; relative paths are resolved against the root, _<\" + relativeRoot.name() + \">_\";\n+    }\n+  }\n \n-        @Override\n-        public File from( Configuration config )\n-        {\n-            return config.get( this );\n-        }\n+  public static BaseSetting<String> prefixSetting(final String name, final Function<String, String> parser, final String defaultValue)\n+  {\n+    BiFunction<String, Function<String, String>, String> valueLookup = (n, settings) -> settings.apply(n);\n+    BiFunction<String, Function<String, String>, String> defaultLookup = determineDefaultLookup(defaultValue, valueLookup);\n \n-        @Override\n-        public File apply( Function<String, String> config )\n+    return new Settings.DefaultSetting<String>(name, parser, valueLookup, defaultLookup, Collections.emptyList())\n+    {\n+      @Override\n+      public Map<String, String> validate(Map<String, String> rawConfig, Consumer<String> warningConsumer) throws InvalidSettingException\n+      {\n+        // Validate setting, if present or default value otherwise\n+        try\n         {\n-            String value = config.apply( name() );\n-            if ( value == null )\n-            {\n-                value = defaultValue;\n-            }\n-            if ( value == null )\n-            {\n-                return null;\n-            }\n-\n-            String setting = fixSeparatorsInPath( value );\n-            File settingFile = new File( setting );\n-\n-            if ( settingFile.isAbsolute() )\n-            {\n-                return settingFile;\n-            }\n-            else\n-            {\n-                return new File( relativeRoot.apply( config ), setting );\n-            }\n-        }\n+          apply(rawConfig::get);\n+          // only return if it was present though\n \n-        @Override\n-        public String valueDescription()\n+          return rawConfig.entrySet().stream().filter(entry -> entry.getKey().startsWith(name())).collect(CollectorsUtil.entriesToMap());\n+        } catch (RuntimeException e)\n         {\n-            return \"A filesystem path; relative paths are resolved against the root, _<\" + relativeRoot.name() + \">_\";\n+          throw new InvalidSettingException(e.getMessage(), e);\n         }\n-    }\n-\n-    public static BaseSetting<String> prefixSetting( final String name, final Function<String,String> parser, final String defaultValue )\n-    {\n-        BiFunction<String,Function<String,String>,String> valueLookup = ( n, settings ) -> settings.apply( n );\n-        BiFunction<String,Function<String,String>,String> defaultLookup = determineDefaultLookup( defaultValue, valueLookup );\n-\n-        return new Settings.DefaultSetting<String>( name, parser, valueLookup, defaultLookup, Collections.emptyList() )\n-        {\n-            @Override\n-            public Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer ) throws InvalidSettingException\n-            {\n-                // Validate setting, if present or default value otherwise\n-                try\n-                {\n-                    apply( rawConfig::get );\n-                    // only return if it was present though\n-\n-                    return rawConfig.entrySet().stream().filter( entry -> entry.getKey().startsWith( name() ) ).collect( CollectorsUtil.entriesToMap() );\n-                }\n-                catch ( RuntimeException e )\n-                {\n-                    throw new InvalidSettingException( e.getMessage(), e );\n-                }\n-            }\n-        };\n-    }\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 1925
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "225",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "240",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 190).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "341",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "355",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 193).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "627",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "883",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "996",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1082",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1196",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 265).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/617/Settings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/617/Settings.java\nindex 485d3e4a311..e66a3392415 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/617/Settings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/617/Settings.java\n@@ -83,16 +83,17 @@ public class Settings\n \n     private interface SettingHelper<T> extends Setting<T>\n     {\n-        String lookup( Function<String, String> settings );\n-\n-        String defaultLookup( Function<String, String> settings );\n+        String lookup( Function<String,String> settings );\n+String defaultLookup( Function<String,String> settings );\n     }\n \n     public static final String NO_DEFAULT = null;\n-    public static final String EMPTY = \"\";\n+\n+public static final String EMPTY = \"\";\n \n     public static final String TRUE = \"true\";\n-    public static final String FALSE = \"false\";\n+\n+public static final String FALSE = \"false\";\n \n     public static final String DEFAULT = \"default\";\n \n@@ -100,14 +101,10 @@ public class Settings\n \n     private static final String SIZE_FORMAT = \"\\\\d+[kmgKMG]?\";\n \n-    private static final String SIZE_UNITS = Arrays.toString(\n-            SIZE_FORMAT.substring( SIZE_FORMAT.indexOf( '[' ) + 1,\n-                    SIZE_FORMAT.indexOf( ']' ) )\n-                    .toCharArray() )\n-            .replace( \"[\", \"\" )\n-            .replace( \"]\", \"\" );\n+    private static final String SIZE_UNITS = Arrays.toString( SIZE_FORMAT.substring( SIZE_FORMAT.indexOf( '[' ) + 1,\n+                    SIZE_FORMAT.indexOf( ']' ) ).toCharArray() ).replace( \"[\", \"\" ).replace( \"]\", \"\" );\n \n-    public static final String ANY = \".+\";\n+public static final String ANY = \".+\";\n \n     /**\n      * Helper class to build a {@link Setting}. A setting always have a name, a parser and a default value.\n@@ -205,7 +202,7 @@ public class Settings\n      * @param <T> the concrete type of the setting.\n      */\n     @Nonnull\n-    public static <T> SettingBuilder<T> buildSetting( @Nonnull final String name, @Nonnull final Function<String, T> parser )\n+    public static <T> SettingBuilder<T> buildSetting( @Nonnull final String name, @Nonnull final Function<String,T> parser )\n     {\n         return buildSetting( name, parser, NO_DEFAULT );\n     }\n@@ -225,8 +222,7 @@ public class Settings\n         return new SettingBuilder<>( name, parser, defaultValue );\n     }\n \n-    public static BiFunction<String,Function<String,String>,String> determineDefaultLookup( String defaultValue,\n-            BiFunction<String,Function<String,String>,String> valueLookup )\n+    public static BiFunction<String,Function<String,String>,String> determineDefaultLookup( String defaultValue, BiFunction<String,Function<String,String>,String> valueLookup )\n     {\n         BiFunction<String,Function<String,String>,String> defaultLookup;\n         if ( defaultValue != null )\n@@ -237,14 +233,12 @@ public class Settings\n         {\n             defaultLookup = ( n, from ) -> null;\n         }\n-        return defaultLookup;\n+\n+return defaultLookup;\n     }\n \n-    public static <OUT, IN1, IN2> Setting<OUT> derivedSetting( String name,\n-                                                               Setting<IN1> in1, Setting<IN2> in2,\n-                                                               BiFunction<IN1, IN2, OUT> derivation,\n-                                                               Function<String, OUT> overrideConverter )\n-    {\n+    public static <OUT, IN1, IN2> Setting<OUT> derivedSetting( String name, Setting<IN1> in1, Setting<IN2> in2, BiFunction<IN1, IN2, OUT> derivation, Function<String,OUT> overrideConverter )\n+{\n         // NOTE:\n         // we do not scope the input settings here (indeed they might be shared...)\n         // if needed we can add a configuration option to allow for it\n@@ -269,7 +263,7 @@ public class Settings\n             }\n \n             @Override\n-            public OUT apply( Function<String, String> config )\n+            public OUT apply( Function<String,String> config )\n             {\n                 String override = config.apply( name() );\n                 if ( override != null )\n@@ -280,7 +274,8 @@ public class Settings\n                     // conform to the standard directory structure layout.\n                     return overrideConverter.apply( override );\n                 }\n-                return derivation.apply( in1.apply( config ), in2.apply( config ) );\n+\n+return derivation.apply( in1.apply( config ), in2.apply( config ) );\n             }\n \n             @Override\n@@ -291,11 +286,8 @@ public class Settings\n         };\n     }\n \n-    public static <OUT, IN1> Setting<OUT> derivedSetting( String name,\n-                                                          Setting<IN1> in1,\n-                                                          Function<IN1, OUT> derivation,\n-                                                          Function<String,OUT> overrideConverter )\n-    {\n+    public static <OUT,IN1> Setting<OUT> derivedSetting( String name, Setting<IN1> in1, Function<IN1,OUT> derivation, Function<String,OUT> overrideConverter )\n+{\n         return new ScopeAwareSetting<OUT>()\n         {\n             @Override\n@@ -317,14 +309,15 @@ public class Settings\n             }\n \n             @Override\n-            public OUT apply( Function<String, String> config )\n+            public OUT apply( Function<String,String> config )\n             {\n                 String override = config.apply( name() );\n                 if ( override != null )\n                 {\n                     return overrideConverter.apply( override );\n                 }\n-                return derivation.apply( in1.apply( config ) );\n+\n+return derivation.apply( in1.apply( config ) );\n             }\n \n             @Override\n@@ -345,8 +338,7 @@ public class Settings\n         return new FileSetting( name, defaultValue, relativeRoot );\n     }\n \n-    private static <T> BiFunction<String,Function<String, String>, String> inheritedValue(\n-            final BiFunction<String,Function<String,String>, String> lookup, final Setting<T> inheritedSetting )\n+    private static <T> BiFunction<String,Function<String, String>, String> inheritedValue( final BiFunction<String,Function<String,String>, String> lookup, final Setting<T> inheritedSetting )\n     {\n         return ( name, settings ) ->\n         {\n@@ -355,12 +347,12 @@ public class Settings\n             {\n                 value = ((SettingHelper<T>) inheritedSetting).lookup( settings );\n             }\n-            return value;\n+\n+return value;\n         };\n     }\n \n-    private static <T> BiFunction<String,Function<String, String>, String> inheritedDefault(\n-            final BiFunction<String,Function<String,String>, String> lookup, final Setting<T> inheritedSetting )\n+    private static <T> BiFunction<String,Function<String, String>, String> inheritedDefault( final BiFunction<String,Function<String,String>, String> lookup, final Setting<T> inheritedSetting )\n     {\n         return ( name, settings ) ->\n         {\n@@ -369,11 +361,12 @@ public class Settings\n             {\n                 value = ((SettingHelper<T>) inheritedSetting).defaultLookup( settings );\n             }\n-            return value;\n+\n+return value;\n         };\n     }\n \n-    public static final Function<String, Integer> INTEGER = new Function<String, Integer>()\n+    public static final Function<String,Integer> INTEGER = new Function<String, Integer>()\n     {\n         @Override\n         public Integer apply( String value )\n@@ -395,7 +388,7 @@ public class Settings\n         }\n     };\n \n-    public static final Function<String, Long> LONG = new Function<String, Long>()\n+    public static final Function<String,Long> LONG = new Function<String, Long>()\n     {\n         @Override\n         public Long apply( String value )\n@@ -417,7 +410,7 @@ public class Settings\n         }\n     };\n \n-    public static final Function<String, Boolean> BOOLEAN = new Function<String, Boolean>()\n+    public static final Function<String,Boolean> BOOLEAN = new Function<String, Boolean>()\n     {\n         @Override\n         public Boolean apply( String value )\n@@ -443,7 +436,7 @@ public class Settings\n         }\n     };\n \n-    public static final Function<String, Float> FLOAT = new Function<String, Float>()\n+    public static final Function<String,Float> FLOAT = new Function<String, Float>()\n     {\n         @Override\n         public Float apply( String value )\n@@ -465,7 +458,7 @@ public class Settings\n         }\n     };\n \n-    public static final Function<String, Double> DOUBLE = new Function<String, Double>()\n+    public static final Function<String,Double> DOUBLE = new Function<String, Double>()\n     {\n         @Override\n         public Double apply( String value )\n@@ -487,7 +480,7 @@ public class Settings\n         }\n     };\n \n-    public static final Function<String, String> STRING = new Function<String, String>()\n+    public static final Function<String,String> STRING = new Function<String, String>()\n     {\n         @Override\n         public String apply( String value )\n@@ -549,8 +542,7 @@ public class Settings\n         }\n     };\n \n-    public static final Function<String, ListenSocketAddress> LISTEN_SOCKET_ADDRESS =\n-            new Function<String, ListenSocketAddress>()\n+    public static final Function<String,ListenSocketAddress> LISTEN_SOCKET_ADDRESS = new Function<String, ListenSocketAddress>()\n             {\n                 @Override\n                 public ListenSocketAddress apply( String value )\n@@ -565,8 +557,7 @@ public class Settings\n                 }\n             };\n \n-    public static final Function<String, AdvertisedSocketAddress> ADVERTISED_SOCKET_ADDRESS =\n-            new Function<String, AdvertisedSocketAddress>()\n+public static final Function<String,AdvertisedSocketAddress> ADVERTISED_SOCKET_ADDRESS = new Function<String, AdvertisedSocketAddress>()\n             {\n                 @Override\n                 public AdvertisedSocketAddress apply( String value )\n@@ -581,7 +572,7 @@ public class Settings\n                 }\n             };\n \n-    public static BaseSetting<ListenSocketAddress> listenAddress( String name, int defaultPort )\n+public static BaseSetting<ListenSocketAddress> listenAddress( String name, int defaultPort )\n     {\n         return new ScopeAwareSetting<ListenSocketAddress>()\n         {\n@@ -604,13 +595,12 @@ public class Settings\n             }\n \n             @Override\n-            public ListenSocketAddress apply( Function<String, String> config )\n+            public ListenSocketAddress apply( Function<String,String> config )\n             {\n                 String name = name();\n                 String value = config.apply( name );\n                 String hostname = default_listen_address.apply( config );\n-\n-                return SocketAddressParser.deriveSocketAddress( name, value, hostname, defaultPort, ListenSocketAddress::new );\n+return SocketAddressParser.deriveSocketAddress( name, value, hostname, defaultPort, ListenSocketAddress::new );\n             }\n \n             @Override\n@@ -621,8 +611,7 @@ public class Settings\n         };\n     }\n \n-    public static BaseSetting<AdvertisedSocketAddress> advertisedAddress( String name,\n-            Setting<ListenSocketAddress> listenAddressSetting )\n+    public static BaseSetting<AdvertisedSocketAddress> advertisedAddress( String name, Setting<ListenSocketAddress> listenAddressSetting )\n     {\n         return new ScopeAwareSetting<AdvertisedSocketAddress>()\n         {\n@@ -635,8 +624,7 @@ public class Settings\n             @Override\n             public String getDefaultValue()\n             {\n-                return default_advertised_address.getDefaultValue() + \":\" +\n-                        LISTEN_SOCKET_ADDRESS.apply( listenAddressSetting.getDefaultValue() ).socketAddress().getPort();\n+                return default_advertised_address.getDefaultValue() + \":\" + LISTEN_SOCKET_ADDRESS.apply( listenAddressSetting.getDefaultValue() ).socketAddress().getPort();\n             }\n \n             @Override\n@@ -646,16 +634,14 @@ public class Settings\n             }\n \n             @Override\n-            public AdvertisedSocketAddress apply( Function<String, String> config )\n+            public AdvertisedSocketAddress apply( Function<String,String> config )\n             {\n                 ListenSocketAddress listenSocketAddress = listenAddressSetting.apply( config );\n                 String hostname = default_advertised_address.apply( config );\n                 int port = listenSocketAddress.socketAddress().getPort();\n-\n-                String name = name();\n+String name = name();\n                 String value = config.apply( name );\n-\n-                return SocketAddressParser.deriveSocketAddress( name, value, hostname, port, AdvertisedSocketAddress::new );\n+return SocketAddressParser.deriveSocketAddress( name, value, hostname, port, AdvertisedSocketAddress::new );\n             }\n \n             @Override\n@@ -673,7 +659,7 @@ public class Settings\n         };\n     }\n \n-    public static final Function<String, Long> BYTES = new Function<String, Long>()\n+    public static final Function<String,Long> BYTES = new Function<String, Long>()\n     {\n         @Override\n         public Long apply( String value )\n@@ -685,15 +671,15 @@ public class Settings\n             }\n             catch ( IllegalArgumentException e )\n             {\n-                throw new IllegalArgumentException( format(\n-                        \"%s is not a valid size, must be e.g. 10, 5K, 1M, 11G\", value ) );\n+                throw new IllegalArgumentException( format( \"%s is not a valid size, must be e.g. 10, 5K, 1M, 11G\", value ) );\n             }\n-            if ( bytes < 0 )\n+\n+if ( bytes < 0 )\n             {\n-                throw new IllegalArgumentException(\n-                        value + \" is not a valid number of bytes. Must be positive or zero.\" );\n+                throw new IllegalArgumentException( value + \" is not a valid number of bytes. Must be positive or zero.\" );\n             }\n-            return bytes;\n+\n+return bytes;\n         }\n \n         @Override\n@@ -703,8 +689,7 @@ public class Settings\n         }\n     };\n \n-    public static final Function<String, URI> URI =\n-            new Function<String, URI>()\n+    public static final Function<String,URI> URI = new Function<String, URI>()\n             {\n                 @Override\n                 public URI apply( String value )\n@@ -726,7 +711,7 @@ public class Settings\n                 }\n             };\n \n-    public static final Function<String, URI> NORMALIZED_RELATIVE_URI = new Function<String, URI>()\n+public static final Function<String,URI> NORMALIZED_RELATIVE_URI = new Function<String, URI>()\n     {\n         @Override\n         public URI apply( String value )\n@@ -754,7 +739,7 @@ public class Settings\n         }\n     };\n \n-    public static final Function<String, File> PATH = new Function<String, File>()\n+    public static final Function<String,File> PATH = new Function<String, File>()\n     {\n         @Override\n         public File apply( String setting )\n@@ -764,7 +749,8 @@ public class Settings\n             {\n                 throw new IllegalArgumentException( \"Paths must be absolute. Got \" + file );\n             }\n-            return file;\n+\n+return file;\n         }\n \n         @Override\n@@ -774,27 +760,27 @@ public class Settings\n         }\n     };\n \n-    public static <T extends Enum<T>> Function<String, T> options( final Class<T> enumClass )\n+    public static <T extends Enum<T>> Function<String,T> options( final Class<T> enumClass )\n     {\n         return options( EnumSet.allOf( enumClass ), false );\n     }\n \n-    public static <T extends Enum<T>> Function<String, T> options( final Class<T> enumClass, boolean ignoreCase )\n+    public static <T extends Enum<T>> Function<String,T> options( final Class<T> enumClass, boolean ignoreCase )\n     {\n         return options( EnumSet.allOf( enumClass ), ignoreCase );\n     }\n \n-    public static <T> Function<String, T> options( T... optionValues )\n+    public static <T> Function<String,T> options( T... optionValues )\n     {\n         return options( Iterables.iterable( optionValues ), false );\n     }\n \n-    public static <T> Function<String, T> optionsIgnoreCase( T... optionValues )\n+    public static <T> Function<String,T> optionsIgnoreCase( T... optionValues )\n     {\n         return options( Iterables.iterable( optionValues ), true );\n     }\n \n-    public static <T> Function<String, T> options( final Iterable<T> optionValues, final boolean ignoreCase )\n+    public static <T> Function<String,T> options( final Iterable<T> optionValues, final boolean ignoreCase )\n     {\n         return new Function<String, T>()\n         {\n@@ -804,15 +790,13 @@ public class Settings\n                 for ( T optionValue : optionValues )\n                 {\n                     String allowedValue = optionValue.toString();\n-\n-                    if ( allowedValue.equals( value ) || (ignoreCase && allowedValue.equalsIgnoreCase( value )) )\n+if ( allowedValue.equals( value ) || ( ignoreCase && allowedValue.equalsIgnoreCase( value )) )\n                     {\n                         return optionValue;\n                     }\n                 }\n                 String possibleValues = Iterables.asList( optionValues ).toString();\n-                throw new IllegalArgumentException(\n-                        \"must be one of \" + possibleValues + \" case \" + (ignoreCase ? \"insensitive\" : \"sensitive\") );\n+                throw new IllegalArgumentException( \"must be one of \" + possibleValues + \" case \" + ( ignoreCase ? \"insensitive\" : \"sensitive\") );\n             }\n \n             @Override\n@@ -843,7 +827,7 @@ public class Settings\n         return builder.toString();\n     }\n \n-    public static <T> Function<String, List<T>> list( final String separator, final Function<String, T> itemParser )\n+    public static <T> Function<String, List<T>> list( final String separator, final Function<String,T> itemParser )\n     {\n         return new Function<String, List<T>>()\n         {\n@@ -875,11 +859,10 @@ public class Settings\n     public static BiFunction<String, Function<String, String>, String> matches( final String regex )\n     {\n         final Pattern pattern = Pattern.compile( regex );\n-\n-        return new BiFunction<String, Function<String, String>, String>()\n+return new BiFunction<String, Function<String, String>, String>()\n         {\n             @Override\n-            public String apply( String value, Function<String, String> settings )\n+            public String apply( String value, Function<String,String> settings )\n             {\n                 if ( !pattern.matcher( value ).matches() )\n                 {\n@@ -897,8 +880,7 @@ public class Settings\n         };\n     }\n \n-    public static final BiFunction<List<String>,Function<String,String>,List<String>> nonEmptyList =\n-            new BiFunction<List<String>,Function<String,String>,List<String>>()\n+    public static final BiFunction<List<String>, Function<String,String>, List<String>> nonEmptyList = new BiFunction<List<String>, Function<String,String>, List<String>>()\n             {\n                 @Override\n                 public List<String> apply( List<String> values, Function<String,String> settings )\n@@ -907,7 +889,8 @@ public class Settings\n                     {\n                         throw new IllegalArgumentException( \"setting must not be empty\" );\n                     }\n-                    return values;\n+\n+return values;\n                 }\n \n                 @Override\n@@ -917,11 +900,10 @@ public class Settings\n                 }\n             };\n \n-    public static BiFunction<List<String>,Function<String,String>,List<String>> matchesAny( final String regex )\n+public static BiFunction<List<String>, Function<String,String>, List<String>> matchesAny( final String regex )\n     {\n         final Pattern pattern = Pattern.compile( regex );\n-\n-        return new BiFunction<List<String>,Function<String,String>,List<String>>()\n+return new BiFunction<List<String>, Function<String,String>, List<String>>()\n         {\n             @Override\n             public List<String> apply( List<String> values, Function<String,String> settings )\n@@ -950,13 +932,14 @@ public class Settings\n         return new BiFunction<T, Function<String, String>, T>()\n         {\n             @Override\n-            public T apply( T value, Function<String, String> settings )\n+            public T apply( T value, Function<String,String> settings )\n             {\n                 if ( value != null && value.compareTo( min ) < 0 )\n                 {\n                     throw new IllegalArgumentException( format( \"minimum allowed value is: %s\", min ) );\n                 }\n-                return value;\n+\n+return value;\n             }\n \n             @Override\n@@ -972,13 +955,14 @@ public class Settings\n         return new BiFunction<T, Function<String, String>, T>()\n         {\n             @Override\n-            public T apply( T value, Function<String, String> settings )\n+            public T apply( T value, Function<String,String> settings )\n             {\n                 if ( value != null && value.compareTo( max ) > 0 )\n                 {\n                     throw new IllegalArgumentException( format( \"maximum allowed value is: %s\", max ) );\n                 }\n-                return value;\n+\n+return value;\n             }\n \n             @Override\n@@ -994,7 +978,7 @@ public class Settings\n         return new BiFunction<T, Function<String, String>, T>()\n         {\n             @Override\n-            public T apply( T from1, Function<String, String> from2 )\n+            public T apply( T from1, Function<String,String> from2 )\n             {\n                 return min(min).apply( max(max).apply( from1, from2 ), from2 );\n             }\n@@ -1007,16 +991,14 @@ public class Settings\n         };\n     }\n \n-    public static final BiFunction<Integer, Function<String, String>, Integer> port =\n-            illegalValueMessage( \"must be a valid port number\", range( 0, 65535 ) );\n+    public static final BiFunction<Integer, Function<String, String>, Integer> port = illegalValueMessage( \"must be a valid port number\", range( 0, 65535 ) );\n \n-    public static <T> BiFunction<T, Function<String, String>, T> illegalValueMessage( final String message,\n-            final BiFunction<T,Function<String,String>,T> valueFunction )\n+public static <T> BiFunction<T, Function<String, String>, T> illegalValueMessage( final String message, final BiFunction<T,Function<String,String>,T> valueFunction )\n     {\n         return new BiFunction<T, Function<String, String>, T>()\n         {\n             @Override\n-            public T apply( T from1, Function<String, String> from2 )\n+            public T apply( T from1, Function<String,String> from2 )\n             {\n                 try\n                 {\n@@ -1032,13 +1014,12 @@ public class Settings\n             public String toString()\n             {\n                 String description = message;\n-                if ( valueFunction != null\n-                     && !format( MATCHES_PATTERN_MESSAGE, ANY ).equals(\n-                             valueFunction.toString() ) )\n-                {\n+                if ( valueFunction != null && !format( MATCHES_PATTERN_MESSAGE, ANY ).equals( valueFunction.toString() ) )\n+{\n                     description += \" (\" + valueFunction + \")\";\n                 }\n-                return description;\n+\n+return description;\n             }\n         };\n     }\n@@ -1067,9 +1048,8 @@ public class Settings\n             }\n             else\n             {\n-                throw new IllegalArgumentException(\n-                        \"Illegal unit '\" + unit + \"' for number '\" + numberWithPotentialUnit + \"'\" );\n-            }\n+                throw new IllegalArgumentException( \"Illegal unit '\" + unit + \"' for number '\" + numberWithPotentialUnit + \"'\" );\n+    }\n         }\n \n         return parseLong( number ) * multiplier;\n@@ -1099,8 +1079,7 @@ public class Settings\n         return ( name, settings ) -> settings.apply( name );\n     }\n \n-    private static BiFunction<String,Function<String,String>,String> withDefault( final String defaultValue,\n-            final BiFunction<String,Function<String,String>,String> lookup )\n+    private static BiFunction<String,Function<String,String>,String> withDefault( final String defaultValue, final BiFunction<String,Function<String,String>,String> lookup )\n     {\n         return ( name, settings ) ->\n         {\n@@ -1139,7 +1118,7 @@ public class Settings\n             }\n \n             @Override\n-            public T apply( Function<String, String> config )\n+            public T apply( Function<String,String> config )\n             {\n                 String newValue = config.apply( newSetting.name() );\n                 return newValue == null ? fallbackSetting.apply( config ) : newSetting.apply( config );\n@@ -1209,15 +1188,12 @@ public class Settings\n     public static class DefaultSetting<T> extends ScopeAwareSetting<T> implements SettingHelper<T>\n     {\n         private final String name;\n-        private final Function<String, T> parser;\n+        private final Function<String,T> parser;\n         private final BiFunction<String,Function<String,String>,String> valueLookup;\n         private final BiFunction<String,Function<String,String>,String> defaultLookup;\n         private final List<BiFunction<T,Function<String,String>,T>> valueConverters;\n \n-        protected DefaultSetting( String name, Function<String,T> parser,\n-                BiFunction<String,Function<String,String>,String> valueLookup,\n-                BiFunction<String,Function<String,String>,String> defaultLookup,\n-                List<BiFunction<T,Function<String,String>,T>> valueConverters )\n+        protected DefaultSetting( String name, Function<String,T> parser, BiFunction<String,Function<String,String>,String> valueLookup, BiFunction<String,Function<String,String>,String> defaultLookup, List<BiFunction<T,Function<String,String>,T>> valueConverters )\n         {\n             this.name = name;\n             this.parser = parser;\n@@ -1251,19 +1227,19 @@ public class Settings\n         }\n \n         @Override\n-        public String lookup( Function<String, String> settings )\n+        public String lookup( Function<String,String> settings )\n         {\n             return valueLookup.apply( name(), settings );\n         }\n \n         @Override\n-        public String defaultLookup( Function<String, String> settings )\n+        public String defaultLookup( Function<String,String> settings )\n         {\n             return defaultLookup.apply( name(), settings );\n         }\n \n         @Override\n-        public T apply( Function<String, String> settings )\n+        public T apply( Function<String,String> settings )\n         {\n             // Lookup value as string\n             String value = lookup( settings );\n@@ -1312,10 +1288,9 @@ public class Settings\n         @Override\n         public String valueDescription()\n         {\n-            StringBuilder builder = new StringBuilder(  );\n+            StringBuilder builder = new StringBuilder();\n             builder.append( name() ).append( \" is \" ).append( parser );\n-\n-            if ( valueConverters != null && valueConverters.size() > 0 )\n+if ( valueConverters != null && valueConverters.size() > 0 )\n             {\n                 builder.append( \" which \" );\n                 boolean first = true;\n@@ -1371,22 +1346,22 @@ public class Settings\n         }\n \n         @Override\n-        public File apply( Function<String, String> config )\n+        public File apply( Function<String,String> config )\n         {\n             String value = config.apply( name() );\n             if ( value == null )\n             {\n                 value = defaultValue;\n             }\n-            if ( value == null )\n+\n+if ( value == null )\n             {\n                 return null;\n             }\n \n             String setting = fixSeparatorsInPath( value );\n             File settingFile = new File( setting );\n-\n-            if ( settingFile.isAbsolute() )\n+if ( settingFile.isAbsolute() )\n             {\n                 return settingFile;\n             }\n@@ -1407,8 +1382,7 @@ public class Settings\n     {\n         BiFunction<String,Function<String,String>,String> valueLookup = ( n, settings ) -> settings.apply( n );\n         BiFunction<String,Function<String,String>,String> defaultLookup = determineDefaultLookup( defaultValue, valueLookup );\n-\n-        return new Settings.DefaultSetting<String>( name, parser, valueLookup, defaultLookup, Collections.emptyList() )\n+return new Settings.DefaultSetting<String>( name, parser, valueLookup, defaultLookup, Collections.emptyList() )\n         {\n             @Override\n             public Map<String,String> validate( Map<String,String> rawConfig, Consumer<String> warningConsumer ) throws InvalidSettingException\n@@ -1428,4 +1402,4 @@ public class Settings\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 144
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}