{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1154",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "120",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1154/DeleteDuplicateNodesStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1154/DeleteDuplicateNodesStep.java\nindex 8c2fe1dd08b..0a0d5ea5a9b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1154/DeleteDuplicateNodesStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1154/DeleteDuplicateNodesStep.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport;\n \n import java.io.IOException;\n@@ -36,70 +37,70 @@ import static org.neo4j.kernel.impl.transaction.state.PropertyDeleter.deleteProp\n \n public class DeleteDuplicateNodesStep extends LonelyProcessingStep\n {\n-    private final NodeStore nodeStore;\n-    private final PropertyStore propertyStore;\n-    private final PrimitiveLongIterator nodeIds;\n-    private final DataImporter.Monitor storeMonitor;\n+  private final NodeStore nodeStore;\n+  private final PropertyStore propertyStore;\n+  private final PrimitiveLongIterator nodeIds;\n+  private final DataImporter.Monitor storeMonitor;\n \n-    private long nodesRemoved;\n-    private long propertiesRemoved;\n+  private long nodesRemoved;\n+  private long propertiesRemoved;\n \n-    public DeleteDuplicateNodesStep( StageControl control, Configuration config, PrimitiveLongIterator nodeIds, NodeStore nodeStore,\n-            PropertyStore propertyStore, DataImporter.Monitor storeMonitor )\n-    {\n-        super( control, \"DEDUP\", config );\n-        this.nodeStore = nodeStore;\n-        this.propertyStore = propertyStore;\n-        this.nodeIds = nodeIds;\n-        this.storeMonitor = storeMonitor;\n-    }\n+  public DeleteDuplicateNodesStep(StageControl control, Configuration config, PrimitiveLongIterator nodeIds, NodeStore nodeStore,\n+                                  PropertyStore propertyStore, DataImporter.Monitor storeMonitor)\n+  {\n+    super(control, \"DEDUP\", config);\n+    this.nodeStore = nodeStore;\n+    this.propertyStore = propertyStore;\n+    this.nodeIds = nodeIds;\n+    this.storeMonitor = storeMonitor;\n+  }\n \n-    @Override\n-    protected void process()\n+  @Override\n+  protected void process()\n+  {\n+    NodeRecord nodeRecord = nodeStore.newRecord();\n+    PropertyRecord propertyRecord = propertyStore.newRecord();\n+    try (RecordCursor<NodeRecord> cursor = nodeStore.newRecordCursor(nodeRecord).acquire(0, NORMAL);\n+         RecordCursor<PropertyRecord> propertyCursor = propertyStore.newRecordCursor(propertyRecord).acquire(0, NORMAL))\n     {\n-        NodeRecord nodeRecord = nodeStore.newRecord();\n-        PropertyRecord propertyRecord = propertyStore.newRecord();\n-        try ( RecordCursor<NodeRecord> cursor = nodeStore.newRecordCursor( nodeRecord ).acquire( 0, NORMAL );\n-              RecordCursor<PropertyRecord> propertyCursor = propertyStore.newRecordCursor( propertyRecord ).acquire( 0, NORMAL ) )\n-        {\n-            while ( nodeIds.hasNext() )\n-            {\n-                long duplicateNodeId = nodeIds.next();\n-                cursor.next( duplicateNodeId );\n-                assert nodeRecord.inUse() : nodeRecord;\n-                // Ensure heavy so that the dynamic label records gets loaded (and then deleted) too\n-                nodeStore.ensureHeavy( nodeRecord );\n+      while (nodeIds.hasNext())\n+      {\n+        long duplicateNodeId = nodeIds.next();\n+        cursor.next(duplicateNodeId);\n+        assert nodeRecord.inUse() : nodeRecord;\n+        // Ensure heavy so that the dynamic label records gets loaded (and then deleted) too\n+        nodeStore.ensureHeavy(nodeRecord);\n \n-                // Delete property records\n-                long nextProp = nodeRecord.getNextProp();\n-                while ( !Record.NULL_REFERENCE.is( nextProp ) )\n-                {\n-                    propertyCursor.next( nextProp );\n-                    assert propertyRecord.inUse() : propertyRecord + \" for \" + nodeRecord;\n-                    propertyStore.ensureHeavy( propertyRecord );\n-                    propertiesRemoved += propertyRecord.numberOfProperties();\n-                    nextProp = propertyRecord.getNextProp();\n-                    deletePropertyRecordIncludingValueRecords( propertyRecord );\n-                    propertyStore.updateRecord( propertyRecord );\n-                }\n+        // Delete property records\n+        long nextProp = nodeRecord.getNextProp();\n+        while (!Record.NULL_REFERENCE.is(nextProp))\n+        {\n+          propertyCursor.next(nextProp);\n+          assert propertyRecord.inUse() : propertyRecord + \" for \" + nodeRecord;\n+          propertyStore.ensureHeavy(propertyRecord);\n+          propertiesRemoved += propertyRecord.numberOfProperties();\n+          nextProp = propertyRecord.getNextProp();\n+          deletePropertyRecordIncludingValueRecords(propertyRecord);\n+          propertyStore.updateRecord(propertyRecord);\n+        }\n \n-                // Delete node (and dynamic label records, if any)\n-                nodeRecord.setInUse( false );\n-                for ( DynamicRecord labelRecord : nodeRecord.getDynamicLabelRecords() )\n-                {\n-                    labelRecord.setInUse( false );\n-                }\n-                nodeStore.updateRecord( nodeRecord );\n-                nodesRemoved++;\n-            }\n+        // Delete node (and dynamic label records, if any)\n+        nodeRecord.setInUse(false);\n+        for (DynamicRecord labelRecord : nodeRecord.getDynamicLabelRecords())\n+        {\n+          labelRecord.setInUse(false);\n         }\n+        nodeStore.updateRecord(nodeRecord);\n+        nodesRemoved++;\n+      }\n     }\n+  }\n \n-    @Override\n-    public void close() throws Exception\n-    {\n-        super.close();\n-        storeMonitor.nodesRemoved( nodesRemoved );\n-        storeMonitor.propertiesRemoved( propertiesRemoved );\n-    }\n+  @Override\n+  public void close() throws Exception\n+  {\n+    super.close();\n+    storeMonitor.nodesRemoved(nodesRemoved);\n+    storeMonitor.propertiesRemoved(propertiesRemoved);\n+  }\n }\n",
            "diff_size": 67
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1154/DeleteDuplicateNodesStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1154/DeleteDuplicateNodesStep.java\nindex 8c2fe1dd08b..29bd0dcb99c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1154/DeleteDuplicateNodesStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1154/DeleteDuplicateNodesStep.java\n@@ -60,8 +60,8 @@ public class DeleteDuplicateNodesStep extends LonelyProcessingStep\n         NodeRecord nodeRecord = nodeStore.newRecord();\n         PropertyRecord propertyRecord = propertyStore.newRecord();\n         try ( RecordCursor<NodeRecord> cursor = nodeStore.newRecordCursor( nodeRecord ).acquire( 0, NORMAL );\n-              RecordCursor<PropertyRecord> propertyCursor = propertyStore.newRecordCursor( propertyRecord ).acquire( 0, NORMAL ) )\n-        {\n+RecordCursor<PropertyRecord> propertyCursor = propertyStore.newRecordCursor( propertyRecord ).acquire( 0, NORMAL ) )\n+{\n             while ( nodeIds.hasNext() )\n             {\n                 long duplicateNodeId = nodeIds.next();\n@@ -102,4 +102,4 @@ public class DeleteDuplicateNodesStep extends LonelyProcessingStep\n         storeMonitor.nodesRemoved( nodesRemoved );\n         storeMonitor.propertiesRemoved( propertiesRemoved );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}