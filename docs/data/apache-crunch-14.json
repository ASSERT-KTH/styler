{
    "project_name": "apache-crunch",
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "97",
                "column": "77",
                "severity": "warning",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "  }\n\n  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n    return new AvroFileReaderFactory(reader, ptype);\n  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler/14/AvroFileSource.java\nindex 66db25d46d0..8d5c0970d1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler/14/AvroFileSource.java\n@@ -94,7 +94,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/intellij/14/AvroFileSource.java\nindex 66db25d46d0..680b1c7be53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/intellij/14/AvroFileSource.java\n@@ -6,15 +6,16 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.crunch.io.avro;\n \n import java.io.IOException;\n@@ -38,10 +39,10 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n \n   private static <S> FormatBundle getBundle(AvroType<S> ptype, AvroMode mode) {\n     FormatBundle bundle = FormatBundle.forInput(AvroInputFormat.class)\n-          .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n-          .set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString())\n-          .set(Avros.REFLECT_DATA_FACTORY_CLASS, Avros.REFLECT_DATA_FACTORY.getClass().getName())\n-          .set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n+        .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n+        .set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString())\n+        .set(Avros.REFLECT_DATA_FACTORY_CLASS, Avros.REFLECT_DATA_FACTORY.getClass().getName())\n+        .set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n     mode.configure(bundle);\n     return bundle;\n   }\n@@ -52,7 +53,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   }\n \n   private DatumReader<T> reader;\n-  \n+\n   public AvroFileSource(Path path, AvroType<T> ptype) {\n     super(path, ptype, getBundle(ptype));\n   }\n@@ -73,11 +74,11 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, AvroMode mode) {\n     super(paths, ptype, getBundle(ptype, mode));\n   }\n-  \n+\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, DatumReader<T> reader) {\n     super(paths, ptype, getBundle(ptype));\n     this.reader = reader;\n-  }  \n+  }\n \n   @Override\n   public String toString() {\n@@ -94,7 +95,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'.' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "45",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/naturalize/14/AvroFileSource.java\nindex 66db25d46d0..5a7925cd8df 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/naturalize/14/AvroFileSource.java\n@@ -38,11 +38,11 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n \n   private static <S> FormatBundle getBundle(AvroType<S> ptype, AvroMode mode) {\n     FormatBundle bundle = FormatBundle.forInput(AvroInputFormat.class)\n-          .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n+    .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n           .set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString())\n           .set(Avros.REFLECT_DATA_FACTORY_CLASS, Avros.REFLECT_DATA_FACTORY.getClass().getName())\n           .set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n-    mode.configure(bundle);\n+mode.configure(bundle);\n     return bundle;\n   }\n \n@@ -94,7 +94,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "'Avros' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "'Avros' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/codebuff/14/AvroFileSource.java\nindex 66db25d46d0..6d7034af2ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/codebuff/14/AvroFileSource.java\n@@ -18,7 +18,6 @@\n package org.apache.crunch.io.avro;\n \n import java.io.IOException;\n-\n import java.util.List;\n import org.apache.avro.io.DatumReader;\n import org.apache.avro.mapred.AvroJob;\n@@ -37,22 +36,19 @@ import org.apache.hadoop.fs.Path;\n public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSource<T> {\n \n   private static <S> FormatBundle getBundle(AvroType<S> ptype, AvroMode mode) {\n-    FormatBundle bundle = FormatBundle.forInput(AvroInputFormat.class)\n-          .set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect()))\n-          .set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString())\n-          .set(Avros.REFLECT_DATA_FACTORY_CLASS, Avros.REFLECT_DATA_FACTORY.getClass().getName())\n-          .set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n+    FormatBundle bundle = FormatBundle.forInput(AvroInputFormat.class).set(AvroJob.INPUT_IS_REFLECT, String.valueOf(ptype.hasReflect())).set(AvroJob.INPUT_SCHEMA, ptype.getSchema().toString()).set(\n+      Avros.REFLECT_DATA_FACTORY_CLASS,\n+      Avros.REFLECT_DATA_FACTORY.getClass().getName()).set(RuntimeParameters.DISABLE_COMBINE_FILE, Boolean.FALSE.toString());\n     mode.configure(bundle);\n     return bundle;\n   }\n \n-\n   private static <S> FormatBundle getBundle(AvroType<S> ptype) {\n     return getBundle(ptype, AvroMode.fromType(ptype));\n   }\n \n   private DatumReader<T> reader;\n-  \n+\n   public AvroFileSource(Path path, AvroType<T> ptype) {\n     super(path, ptype, getBundle(ptype));\n   }\n@@ -73,11 +69,11 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, AvroMode mode) {\n     super(paths, ptype, getBundle(ptype, mode));\n   }\n-  \n+\n   public AvroFileSource(List<Path> paths, AvroType<T> ptype, DatumReader<T> reader) {\n     super(paths, ptype, getBundle(ptype));\n     this.reader = reader;\n-  }  \n+  }\n \n   @Override\n   public String toString() {\n@@ -94,7 +90,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_random/14/AvroFileSource.java\nindex 66db25d46d0..8d5c0970d1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_random/14/AvroFileSource.java\n@@ -94,7 +94,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_three_grams/14/AvroFileSource.java\nindex 66db25d46d0..8d5c0970d1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/errored/1/14/AvroFileSource.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-crunch/styler_three_grams/14/AvroFileSource.java\n@@ -94,7 +94,7 @@ public class AvroFileSource<T> extends FileSourceImpl<T> implements ReadableSour\n     return new AvroReadableData<T>(this.paths, (AvroType<T>) ptype);\n   }\n \n-  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype){\n+  protected AvroFileReaderFactory<T> getFileReaderFactory(AvroType<T> ptype) {\n     return new AvroFileReaderFactory(reader, ptype);\n   }\n }\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}