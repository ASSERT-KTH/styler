{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2336",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "68",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "114",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "77",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2336/IndexAccessors.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2336/IndexAccessors.java\nindex 5a455d669c0..0307ca5e9c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2336/IndexAccessors.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2336/IndexAccessors.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking.index;\n \n import java.io.Closeable;\n@@ -40,90 +41,86 @@ import org.neo4j.kernel.impl.store.record.IndexRule;\n \n public class IndexAccessors implements Closeable\n {\n-    private final Map<Long,IndexAccessor> accessors = new HashMap<>();\n-    private final List<IndexRule> onlineIndexRules = new ArrayList<>();\n-    private final List<IndexRule> notOnlineIndexRules = new ArrayList<>();\n+  private final Map<Long, IndexAccessor> accessors = new HashMap<>();\n+  private final List<IndexRule> onlineIndexRules = new ArrayList<>();\n+  private final List<IndexRule> notOnlineIndexRules = new ArrayList<>();\n \n-    public IndexAccessors( IndexProviderMap providers,\n-                           RecordStore<DynamicRecord> schemaStore,\n-                           IndexSamplingConfig samplingConfig ) throws IOException\n+  public IndexAccessors(IndexProviderMap providers,\n+                        RecordStore<DynamicRecord> schemaStore,\n+                        IndexSamplingConfig samplingConfig) throws IOException\n+  {\n+    Iterator<IndexRule> rules = new SchemaStorage(schemaStore).indexesGetAll();\n+    for (; ; )\n     {\n-        Iterator<IndexRule> rules = new SchemaStorage( schemaStore ).indexesGetAll();\n-        for (; ; )\n+      try\n+      {\n+        if (rules.hasNext())\n         {\n-            try\n+          // we intentionally only check indexes that are online since\n+          // - populating indexes will be rebuilt on next startup\n+          // - failed indexes have to be dropped by the user anyways\n+          IndexRule indexRule = rules.next();\n+          if (indexRule.isIndexWithoutOwningConstraint())\n+          {\n+            notOnlineIndexRules.add(indexRule);\n+          } else\n+          {\n+            if (InternalIndexState.ONLINE ==\n+                provider(providers, indexRule).getInitialState(indexRule.getId(), indexRule.getIndexDescriptor()))\n             {\n-                if ( rules.hasNext() )\n-                {\n-                    // we intentionally only check indexes that are online since\n-                    // - populating indexes will be rebuilt on next startup\n-                    // - failed indexes have to be dropped by the user anyways\n-                    IndexRule indexRule = rules.next();\n-                    if ( indexRule.isIndexWithoutOwningConstraint() )\n-                    {\n-                        notOnlineIndexRules.add( indexRule );\n-                    }\n-                    else\n-                    {\n-                        if ( InternalIndexState.ONLINE ==\n-                                provider( providers, indexRule ).getInitialState( indexRule.getId(), indexRule.getIndexDescriptor() ) )\n-                        {\n-                            onlineIndexRules.add( indexRule );\n-                        }\n-                        else\n-                        {\n-                            notOnlineIndexRules.add( indexRule );\n-                        }\n-                    }\n-                }\n-                else\n-                {\n-                    break;\n-                }\n-            }\n-            catch ( Exception e )\n+              onlineIndexRules.add(indexRule);\n+            } else\n             {\n-                // ignore; inconsistencies of the schema store are specifically handled elsewhere.\n+              notOnlineIndexRules.add(indexRule);\n             }\n-        }\n-\n-        for ( IndexRule indexRule : onlineIndexRules )\n+          }\n+        } else\n         {\n-            long indexId = indexRule.getId();\n-            accessors.put( indexId, provider( providers, indexRule )\n-                    .getOnlineAccessor( indexId, indexRule.getIndexDescriptor(), samplingConfig ) );\n+          break;\n         }\n+      } catch (Exception e)\n+      {\n+        // ignore; inconsistencies of the schema store are specifically handled elsewhere.\n+      }\n     }\n \n-    private IndexProvider provider( IndexProviderMap providers, IndexRule indexRule )\n+    for (IndexRule indexRule : onlineIndexRules)\n     {\n-        return providers.lookup( indexRule.getProviderDescriptor() );\n+      long indexId = indexRule.getId();\n+      accessors.put(indexId, provider(providers, indexRule)\n+          .getOnlineAccessor(indexId, indexRule.getIndexDescriptor(), samplingConfig));\n     }\n+  }\n \n-    public Collection<IndexRule> notOnlineRules()\n-    {\n-        return notOnlineIndexRules;\n-    }\n+  private IndexProvider provider(IndexProviderMap providers, IndexRule indexRule)\n+  {\n+    return providers.lookup(indexRule.getProviderDescriptor());\n+  }\n \n-    public IndexAccessor accessorFor( IndexRule indexRule )\n-    {\n-        return accessors.get( indexRule.getId() );\n-    }\n+  public Collection<IndexRule> notOnlineRules()\n+  {\n+    return notOnlineIndexRules;\n+  }\n \n-    public Iterable<IndexRule> onlineRules()\n-    {\n-        return onlineIndexRules;\n-    }\n+  public IndexAccessor accessorFor(IndexRule indexRule)\n+  {\n+    return accessors.get(indexRule.getId());\n+  }\n \n-    @Override\n-    public void close() throws IOException\n+  public Iterable<IndexRule> onlineRules()\n+  {\n+    return onlineIndexRules;\n+  }\n+\n+  @Override\n+  public void close() throws IOException\n+  {\n+    for (IndexAccessor accessor : accessors.values())\n     {\n-        for ( IndexAccessor accessor : accessors.values() )\n-        {\n-            accessor.close();\n-        }\n-        accessors.clear();\n-        onlineIndexRules.clear();\n-        notOnlineIndexRules.clear();\n+      accessor.close();\n     }\n+    accessors.clear();\n+    onlineIndexRules.clear();\n+    notOnlineIndexRules.clear();\n+  }\n }\n",
            "diff_size": 101
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2336/IndexAccessors.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2336/IndexAccessors.java\nindex 5a455d669c0..d7c044a7409 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2336/IndexAccessors.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2336/IndexAccessors.java\n@@ -44,10 +44,9 @@ public class IndexAccessors implements Closeable\n     private final List<IndexRule> onlineIndexRules = new ArrayList<>();\n     private final List<IndexRule> notOnlineIndexRules = new ArrayList<>();\n \n-    public IndexAccessors( IndexProviderMap providers,\n-                           RecordStore<DynamicRecord> schemaStore,\n+    public IndexAccessors( IndexProviderMap providers, RecordStore<DynamicRecord> schemaStore,\n                            IndexSamplingConfig samplingConfig ) throws IOException\n-    {\n+{\n         Iterator<IndexRule> rules = new SchemaStorage( schemaStore ).indexesGetAll();\n         for (; ; )\n         {\n@@ -65,8 +64,7 @@ public class IndexAccessors implements Closeable\n                     }\n                     else\n                     {\n-                        if ( InternalIndexState.ONLINE ==\n-                                provider( providers, indexRule ).getInitialState( indexRule.getId(), indexRule.getIndexDescriptor() ) )\n+                        if ( InternalIndexState.ONLINE == provider( providers, indexRule ).getInitialState( indexRule.getId(), indexRule.getIndexDescriptor() ) )\n                         {\n                             onlineIndexRules.add( indexRule );\n                         }\n@@ -90,9 +88,8 @@ public class IndexAccessors implements Closeable\n         for ( IndexRule indexRule : onlineIndexRules )\n         {\n             long indexId = indexRule.getId();\n-            accessors.put( indexId, provider( providers, indexRule )\n-                    .getOnlineAccessor( indexId, indexRule.getIndexDescriptor(), samplingConfig ) );\n-        }\n+            accessors.put( indexId, provider( providers, indexRule ).getOnlineAccessor( indexId, indexRule.getIndexDescriptor(), samplingConfig ) );\n+    }\n     }\n \n     private IndexProvider provider( IndexProviderMap providers, IndexRule indexRule )\n@@ -126,4 +123,4 @@ public class IndexAccessors implements Closeable\n         onlineIndexRules.clear();\n         notOnlineIndexRules.clear();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}