{
    "project_name": "neo4j-neo4j",
    "error_id": "3003",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "50",
                    "column": "138",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3003/SecureHasherConfigurations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3003/SecureHasherConfigurations.java\nindex e23a5ae437c..efb2df31f8c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3003/SecureHasherConfigurations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/3003/SecureHasherConfigurations.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cypher.internal.security;\n \n import java.util.Map;\n@@ -28,26 +29,25 @@ public abstract class SecureHasherConfigurations\n     static final String CURRENT_VERSION = \"1\";\n \n     // add new configurations here\n-    static final Map<String,SecureHasherConfiguration> configurations = Map.of(\n-            // <version-number>, Pair.of(<algorithm>, <algorithm-iterations>)\n-            \"0\", new SecureHasherConfiguration( \"SHA-256\", 1 ),\n-            \"1\", new SecureHasherConfiguration( \"SHA-256\", 1024 )\n+    static final Map<String, SecureHasherConfiguration> configurations = Map.of(\n+      // <version-number>, Pair.of(<algorithm>, <algorithm-iterations>)\n+      \"0\", new SecureHasherConfiguration(\"SHA-256\", 1),\n+      \"1\", new SecureHasherConfiguration(\"SHA-256\", 1024)\n     );\n \n-    public static String getVersionForConfiguration( String algorithm, int iterations )\n+    public static String getVersionForConfiguration(String algorithm, int iterations)\n     {\n         var entry = configurations.entrySet().stream().filter(\n-                configuration -> configuration.getValue().algorithm.equals( algorithm ) &&\n-                                 configuration.getValue().iterations == iterations ).findFirst();\n+          configuration -> configuration.getValue().algorithm.equals(algorithm) &&\n+            configuration.getValue().iterations == iterations).findFirst();\n \n-        if ( entry.isPresent() )\n+        if (entry.isPresent())\n         {\n             return entry.get().getKey();\n-        }\n-        else\n+        } else\n         {\n             throw new InvalidArgumentException(\n-                    String.format( \"There exists no version with this combination of algorithm:'%s' and iterations:'%d'\", algorithm, iterations ) );\n+              String.format(\"There exists no version with this combination of algorithm:'%s' and iterations:'%d'\", algorithm, iterations));\n         }\n     }\n }\n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3003/SecureHasherConfigurations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3003/SecureHasherConfigurations.java\nindex e23a5ae437c..f5cbdd7eebd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/3003/SecureHasherConfigurations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/3003/SecureHasherConfigurations.java\n@@ -39,8 +39,7 @@ public abstract class SecureHasherConfigurations\n         var entry = configurations.entrySet().stream().filter(\n                 configuration -> configuration.getValue().algorithm.equals( algorithm ) &&\n                                  configuration.getValue().iterations == iterations ).findFirst();\n-\n-        if ( entry.isPresent() )\n+if ( entry.isPresent() )\n         {\n             return entry.get().getKey();\n         }\n@@ -50,4 +49,4 @@ public abstract class SecureHasherConfigurations\n                     String.format( \"There exists no version with this combination of algorithm:'%s' and iterations:'%d'\", algorithm, iterations ) );\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}