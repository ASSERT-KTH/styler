{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "187",
    "information": {
        "errors": [
            {
                "line": "297",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 106).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  public URI toUri() {\n    try {\n      return new URI(CloudStorageFileSystem.URI_SCHEME, bucket(), path.toAbsolutePath().toString(), null);\n    } catch (URISyntaxException e) {\n      throw new AssertionError(e);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "297",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/187/CloudStoragePath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/187/CloudStoragePath.java\nindex d31a3e0af1a..08e34a07039 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/187/CloudStoragePath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/187/CloudStoragePath.java\n@@ -104,8 +104,8 @@ public final class CloudStoragePath implements Path {\n    * is {@code true}.\n    *\n    * @throws IllegalArgumentException if path contains extra slashes or dot-dirs when\n-   *     {@link CloudStorageConfiguration#permitEmptyPathComponents() permitEmptyPathComponents}\n-   *     is {@code false}, or if the resulting path is empty.\n+   *                                  {@link CloudStorageConfiguration#permitEmptyPathComponents() permitEmptyPathComponents}\n+   *                                  is {@code false}, or if the resulting path is empty.\n    */\n   @Override\n   public CloudStoragePath toRealPath(LinkOption... options) {\n@@ -276,9 +276,9 @@ public final class CloudStoragePath implements Path {\n   public boolean equals(Object other) {\n     return this == other\n         || other instanceof CloudStoragePath\n-            && Objects.equals(bucket(), ((CloudStoragePath) other).bucket())\n-            && Objects.equals(\n-                toRealPathInternal(false), ((CloudStoragePath) other).toRealPathInternal(false));\n+        && Objects.equals(bucket(), ((CloudStoragePath) other).bucket())\n+        && Objects.equals(\n+        toRealPathInternal(false), ((CloudStoragePath) other).toRealPathInternal(false));\n   }\n \n   @Override\n@@ -294,7 +294,8 @@ public final class CloudStoragePath implements Path {\n   @Override\n   public URI toUri() {\n     try {\n-      return new URI(CloudStorageFileSystem.URI_SCHEME, bucket(), path.toAbsolutePath().toString(), null);\n+      return new URI(CloudStorageFileSystem.URI_SCHEME, bucket(), path.toAbsolutePath().toString(),\n+          null);\n     } catch (URISyntaxException e) {\n       throw new AssertionError(e);\n     }\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "36",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 6, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "122",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 179).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "127",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "261",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "262",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "263",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "281",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "282",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "282",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "298",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "309",
                    "severity": "warning",
                    "message": "'if' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "310",
                    "severity": "warning",
                    "message": "'if rcurly' has incorrect indentation level 11, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "311",
                    "severity": "warning",
                    "message": "'else' child has incorrect indentation level 13, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/187/CloudStoragePath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/187/CloudStoragePath.java\nindex d31a3e0af1a..0de5749114e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/187/CloudStoragePath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/187/CloudStoragePath.java\n@@ -7,7 +7,6 @@ import static com.google.common.base.Preconditions.checkNotNull;\n \n import com.google.cloud.storage.BlobId;\n import com.google.common.collect.UnmodifiableIterator;\n-\n import java.io.File;\n import java.net.URI;\n import java.net.URISyntaxException;\n@@ -21,7 +20,6 @@ import java.util.Collections;\n import java.util.Iterator;\n import java.util.Objects;\n import java.util.regex.Pattern;\n-\n import javax.annotation.Nullable;\n import javax.annotation.concurrent.Immutable;\n \n@@ -30,12 +28,12 @@ import javax.annotation.concurrent.Immutable;\n  *\n  * @see UnixPath\n  */\n+\n+\n @Immutable\n public final class CloudStoragePath implements Path {\n \n-  private static final Pattern EXTRA_SLASHES_OR_DOT_DIRS_PATTERN =\n-      Pattern.compile(\"^\\\\.\\\\.?/|//|/\\\\.\\\\.?/|/\\\\.\\\\.?$\");\n-\n+  private static final Pattern EXTRA_SLASHES_OR_DOT_DIRS_PATTERN = Pattern.compile(\"^\\\\.\\\\.?/|//|/\\\\.\\\\.?/|/\\\\.\\\\.?$\");\n   private final CloudStorageFileSystem fileSystem;\n   private final UnixPath path;\n \n@@ -45,13 +43,13 @@ public final class CloudStoragePath implements Path {\n   }\n \n   static CloudStoragePath getPath(CloudStorageFileSystem fileSystem, String path, String... more) {\n-    return new CloudStoragePath(\n-        fileSystem, UnixPath.getPath(fileSystem.config().permitEmptyPathComponents(), path, more));\n+    return new CloudStoragePath(fileSystem, UnixPath.getPath(fileSystem.config().permitEmptyPathComponents(), path, more));\n   }\n \n   /**\n    * Returns the Cloud Storage bucket name being served by this file system.\n    */\n+\n   public String bucket() {\n     return fileSystem.bucket();\n   }\n@@ -59,6 +57,7 @@ public final class CloudStoragePath implements Path {\n   /**\n    * Returns path converted to a {@link BlobId} so I/O can be performed.\n    */\n+\n   BlobId getBlobId() {\n     return BlobId.of(bucket(), toRealPath().path.toString());\n   }\n@@ -68,7 +67,8 @@ public final class CloudStoragePath implements Path {\n   }\n \n   boolean seemsLikeADirectoryAndUsePseudoDirectories() {\n-    return path.seemsLikeADirectory() && fileSystem.config().usePseudoDirectories();\n+    return path.seemsLikeADirectory()\n+      && fileSystem.config().usePseudoDirectories();\n   }\n \n   @Override\n@@ -91,6 +91,7 @@ public final class CloudStoragePath implements Path {\n    * Changes relative path to be absolute, using\n    * {@link CloudStorageConfiguration#workingDirectory() workingDirectory} as current dir.\n    */\n+\n   @Override\n   public CloudStoragePath toAbsolutePath() {\n     return newPath(path.toAbsolutePath(getWorkingDirectory()));\n@@ -107,6 +108,7 @@ public final class CloudStoragePath implements Path {\n    *     {@link CloudStorageConfiguration#permitEmptyPathComponents() permitEmptyPathComponents}\n    *     is {@code false}, or if the resulting path is empty.\n    */\n+\n   @Override\n   public CloudStoragePath toRealPath(LinkOption... options) {\n     checkNotNullArray(options);\n@@ -115,23 +117,21 @@ public final class CloudStoragePath implements Path {\n \n   private UnixPath toRealPathInternal(boolean errorCheck) {\n     UnixPath objectName = path.toAbsolutePath(getWorkingDirectory());\n-    if (errorCheck && !fileSystem.config().permitEmptyPathComponents()) {\n-      checkArgument(\n-          !EXTRA_SLASHES_OR_DOT_DIRS_PATTERN.matcher(objectName).find(),\n-          \"I/O not allowed on dot-dirs or extra slashes when !permitEmptyPathComponents: %s\",\n-          objectName);\n+    if (errorCheck\n+      && !fileSystem.config().permitEmptyPathComponents()) {\n+      checkArgument(!EXTRA_SLASHES_OR_DOT_DIRS_PATTERN.matcher(objectName).find(), \"I/O not allowed on dot-dirs or extra slashes when !permitEmptyPathComponents: %s\", objectName);\n     }\n     if (fileSystem.config().stripPrefixSlash()) {\n       objectName = objectName.removeBeginningSeparator();\n     }\n-    checkArgument(\n-        !errorCheck || !objectName.isEmpty(), \"I/O not allowed on empty GCS object names.\");\n+    checkArgument(!errorCheck || !objectName.isEmpty(), \"I/O not allowed on empty GCS object names.\");\n     return objectName;\n   }\n \n   /**\n    * Returns path without extra slashes or {@code .} and {@code ..} and preserves trailing slash.\n    */\n+\n   @Override\n   public CloudStoragePath normalize() {\n     return newPath(path.normalize());\n@@ -226,6 +226,7 @@ public final class CloudStoragePath implements Path {\n   /**\n    * Throws {@link UnsupportedOperationException} because this feature hasn't been implemented yet.\n    */\n+\n   @Override\n   public WatchKey register(WatchService watcher, Kind<?>[] events, Modifier... modifiers) {\n     // TODO: Implement me.\n@@ -235,6 +236,7 @@ public final class CloudStoragePath implements Path {\n   /**\n    * Throws {@link UnsupportedOperationException} because this feature hasn't been implemented yet.\n    */\n+\n   @Override\n   public WatchKey register(WatchService watcher, Kind<?>... events) {\n     // TODO: Implement me.\n@@ -245,6 +247,7 @@ public final class CloudStoragePath implements Path {\n    * Throws {@link UnsupportedOperationException} because GCS files are not backed by the local file\n    * system.\n    */\n+\n   @Override\n   public File toFile() {\n     throw new UnsupportedOperationException(\"GCS objects aren't available locally\");\n@@ -255,9 +258,9 @@ public final class CloudStoragePath implements Path {\n     if (path.isEmpty()) {\n       return Collections.<Path>singleton(this).iterator();\n     } else if (path.isRoot()) {\n-      return Collections.emptyIterator();\n-    } else {\n-      return new PathIterator();\n+             return Collections.emptyIterator();\n+           } else {\n+             return new PathIterator();\n     }\n   }\n \n@@ -274,11 +277,9 @@ public final class CloudStoragePath implements Path {\n \n   @Override\n   public boolean equals(Object other) {\n-    return this == other\n-        || other instanceof CloudStoragePath\n-            && Objects.equals(bucket(), ((CloudStoragePath) other).bucket())\n-            && Objects.equals(\n-                toRealPathInternal(false), ((CloudStoragePath) other).toRealPathInternal(false));\n+    return this == other || other instanceof CloudStoragePath\n+    && Objects.equals(bucket(), ((CloudStoragePath) other).bucket())\n+    && Objects.equals(toRealPathInternal(false), ((CloudStoragePath) other).toRealPathInternal(false));\n   }\n \n   @Override\n@@ -305,9 +306,9 @@ public final class CloudStoragePath implements Path {\n     if (newPath == path) { // Nonuse of equals is intentional.\n       return this;\n     } else if (newPath != null) {\n-      return new CloudStoragePath(fileSystem, newPath);\n-    } else {\n-      return null;\n+             return new CloudStoragePath(fileSystem, newPath);\n+           } else {\n+             return null;\n     }\n   }\n \n@@ -322,7 +323,9 @@ public final class CloudStoragePath implements Path {\n   /**\n    * Transform iterator providing a slight performance boost over {@code FluentIterable}.\n    */\n+\n   private final class PathIterator extends UnmodifiableIterator<Path> {\n+\n     private final Iterator<String> delegate = path.split();\n \n     @Override\n@@ -335,4 +338,4 @@ public final class CloudStoragePath implements Path {\n       return delegate.hasNext();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "297",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "298",
                    "severity": "warning",
                    "message": "'try rcurly' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/187/CloudStoragePath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/187/CloudStoragePath.java\nindex d31a3e0af1a..cf5f0dcc86e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/187/CloudStoragePath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/187/CloudStoragePath.java\n@@ -295,7 +295,7 @@ public final class CloudStoragePath implements Path {\n   public URI toUri() {\n     try {\n       return new URI(CloudStorageFileSystem.URI_SCHEME, bucket(), path.toAbsolutePath().toString(), null);\n-    } catch (URISyntaxException e) {\n+  } catch (URISyntaxException e) {\n       throw new AssertionError(e);\n     }\n   }\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "297",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}