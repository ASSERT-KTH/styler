{
    "project_name": "codefollower-H2-Research",
    "error_id": "102",
    "information": {
        "errors": [
            {
                "line": "66",
                "column": "40",
                "severity": "warning",
                "message": "Don't use trailing comments.",
                "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
            }
        ]
    },
    "source_code": "        if (!rows.hasNext()) {\n            return ValueBoolean.get(all);\n        } else if (l.containsNull()) { //\u5982\u679cleft\u662fnull\uff0c\u90a3\u4e48\u8fd4\u56denull\n            return ValueNull.INSTANCE;\n        }\n        if (!database.getSettings().optimizeInSelect) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/102/ConditionInQuery.java\nindex 0398c465240..856583f4ee9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/102/ConditionInQuery.java\n@@ -63,8 +63,9 @@ public class ConditionInQuery extends PredicateWithSubquery {\n         Value l = left.getValue(session);\n         if (!rows.hasNext()) {\n             return ValueBoolean.get(all);\n-        } else if (l.containsNull()) { //\u5982\u679cleft\u662fnull\uff0c\u90a3\u4e48\u8fd4\u56denull\n-            return ValueNull.INSTANCE;\n+        } else if (l.containsNull()) {\n+            //\u5982\u679cleft\u662fnull\uff0c\u90a3\u4e48\u8fd4\u56denull\n+        return ValueNull.INSTANCE;\n         }\n         if (!database.getSettings().optimizeInSelect) {\n             return getValueSlow(rows, l);\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "67",
                    "column": "36",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/102/ConditionInQuery.java\nindex 0398c465240..b33a800026a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/102/ConditionInQuery.java\n@@ -3,6 +3,7 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.expression.condition;\n \n import org.h2.api.ErrorCode;\n@@ -29,130 +30,130 @@ import org.h2.value.ValueRow;\n  */\n public class ConditionInQuery extends PredicateWithSubquery {\n \n-    private final Database database;\n-    private Expression left;\n-    private final boolean all;\n-    private final int compareType;\n-\n-    public ConditionInQuery(Database database, Expression left, Query query, boolean all, int compareType) {\n-        super(query);\n-        this.database = database;\n-        this.left = left;\n-        /*\n-         * Need to do it now because other methods may be invoked in different\n-         * order.\n-         */\n-        query.setRandomAccessResult(true);\n-        this.all = all;\n-        this.compareType = compareType;\n+  private final Database database;\n+  private Expression left;\n+  private final boolean all;\n+  private final int compareType;\n+\n+  public ConditionInQuery(Database database, Expression left, Query query, boolean all, int compareType) {\n+    super(query);\n+    this.database = database;\n+    this.left = left;\n+    /*\n+     * Need to do it now because other methods may be invoked in different\n+     * order.\n+     */\n+    query.setRandomAccessResult(true);\n+    this.all = all;\n+    this.compareType = compareType;\n+  }\n+\n+  @Override\n+  public Value getValue(Session session) {\n+    query.setSession(session);\n+    // We need a LocalResult\n+    query.setNeverLazy(true);\n+    // \u5b50\u67e5\u8be2\u6ca1\u6709\u8bb0\u5f55\u65f6\uff0c\u5982\u679c\u662fALL\u7c7b\u578b\u7684\u5b50\u67e5\u8be2\uff0c\u90a3\u4e48\u8ba4\u4e3a\u6761\u4ef6\u4e3atrue\uff0c\n+    // \u5426\u5219\u4e3afalse\uff0c\n+    // \u5047\u8bbe\u8868\u4e2d\u5b57\u6bb5id\u7684\u503c\u662f1\u52306\uff0c\u8fd9\u6761\u8bed\u53e5\n+    // delete from ConditionInSelectTest where id > ALL(select id from ConditionInSelectTest where id>10)\n+    // \u91cc\u9762\u7684\u5b50\u67e5\u8be2\u6ca1\u6709\u503c\uff0c\u6240\u4ee5where id<ALL()\u65f6\u90fd\u4e3atrue\uff0c\u5b9e\u9645\u4e0a\u662f\u5220\u9664\u6240\u6709\u8bb0\u5f55\n+    // \u5982\u679c\u6539\u6210ANY\uff0c\u90a3\u4e48\u4ec0\u4e48\u8bb0\u5f55\u90fd\u4e0d\u5220\n+    query.setDistinctIfPossible();\n+    LocalResult rows = (LocalResult) query.query(0);\n+    Value l = left.getValue(session);\n+    if (!rows.hasNext()) {\n+      return ValueBoolean.get(all);\n+    } else if (l.containsNull()) { //\u5982\u679cleft\u662fnull\uff0c\u90a3\u4e48\u8fd4\u56denull\n+      return ValueNull.INSTANCE;\n     }\n-\n-    @Override\n-    public Value getValue(Session session) {\n-        query.setSession(session);\n-        // We need a LocalResult\n-        query.setNeverLazy(true);\n-        // \u5b50\u67e5\u8be2\u6ca1\u6709\u8bb0\u5f55\u65f6\uff0c\u5982\u679c\u662fALL\u7c7b\u578b\u7684\u5b50\u67e5\u8be2\uff0c\u90a3\u4e48\u8ba4\u4e3a\u6761\u4ef6\u4e3atrue\uff0c\n-        // \u5426\u5219\u4e3afalse\uff0c\n-        // \u5047\u8bbe\u8868\u4e2d\u5b57\u6bb5id\u7684\u503c\u662f1\u52306\uff0c\u8fd9\u6761\u8bed\u53e5\n-        // delete from ConditionInSelectTest where id > ALL(select id from ConditionInSelectTest where id>10)\n-        // \u91cc\u9762\u7684\u5b50\u67e5\u8be2\u6ca1\u6709\u503c\uff0c\u6240\u4ee5where id<ALL()\u65f6\u90fd\u4e3atrue\uff0c\u5b9e\u9645\u4e0a\u662f\u5220\u9664\u6240\u6709\u8bb0\u5f55\n-        // \u5982\u679c\u6539\u6210ANY\uff0c\u90a3\u4e48\u4ec0\u4e48\u8bb0\u5f55\u90fd\u4e0d\u5220\n-        query.setDistinctIfPossible();\n-        LocalResult rows = (LocalResult) query.query(0);\n-        Value l = left.getValue(session);\n-        if (!rows.hasNext()) {\n-            return ValueBoolean.get(all);\n-        } else if (l.containsNull()) { //\u5982\u679cleft\u662fnull\uff0c\u90a3\u4e48\u8fd4\u56denull\n-            return ValueNull.INSTANCE;\n-        }\n-        if (!database.getSettings().optimizeInSelect) {\n-            return getValueSlow(rows, l);\n-        }\n-        if (all || compareType != Comparison.EQUAL) {\n-            return getValueSlow(rows, l);\n-        }\n-        // \u4e0b\u9762\u4ee3\u7801\u662f\u5904\u7406\u975eall\uff0c\u4e14\u662fEQUAL\u6216EQUAL_NULL_SAFE\u7684\u60c5\u51b5\n-\n-        // \u83b7\u5f97\u7ed3\u679c\u96c6\u4e2d\u7b2c\u4e00\u5217\u7684\u7c7b\u578b\n-        int columnCount = query.getColumnCount();\n-        if (columnCount != 1) {\n-            l = l.convertTo(Value.ROW);\n-            Value[] leftValue = ((ValueRow) l).getList();\n-            if (columnCount == leftValue.length && rows.containsDistinct(leftValue)) {\n-                return ValueBoolean.TRUE;\n-            }\n-        } else {\n-            TypeInfo colType = rows.getColumnType(0);\n-            if (colType.getValueType() == Value.NULL) {\n-                return ValueNull.INSTANCE;\n-            }\n-            if (l.getValueType() == Value.ROW) {\n-                Value[] leftList = ((ValueRow) l).getList();\n-                if (leftList.length != 1) {\n-                    throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n-                }\n-                l = leftList[0];\n-            }\n-            //\u628aleft\u7684\u503c\u8f6c\u6210\u7ed3\u679c\u96c6\u4e2d\u7b2c\u4e00\u5217\u7684\u7c7b\u578b\uff0c\u7136\u540e\u5224\u65ad\u7ed3\u679c\u96c6\u4e2d\u662f\u5426\u5305\u542b\u5b83\uff0c\u8fd4\u56detrue\n-            l = l.convertTo(colType, database.getMode(), null);\n-            if (rows.containsDistinct(new Value[] { l })) { \n-                return ValueBoolean.TRUE;\n-            }\n-        }\n-        //\u7ed3\u679c\u96c6\u4e2d\u4e0d\u5305\u542bleft\u4e14\u6709null\uff0c\u90a3\u4e48\u8fd4\u56denull\n-        if (rows.containsNull()) {\n-            return ValueNull.INSTANCE;\n+    if (!database.getSettings().optimizeInSelect) {\n+      return getValueSlow(rows, l);\n+    }\n+    if (all || compareType != Comparison.EQUAL) {\n+      return getValueSlow(rows, l);\n+    }\n+    // \u4e0b\u9762\u4ee3\u7801\u662f\u5904\u7406\u975eall\uff0c\u4e14\u662fEQUAL\u6216EQUAL_NULL_SAFE\u7684\u60c5\u51b5\n+\n+    // \u83b7\u5f97\u7ed3\u679c\u96c6\u4e2d\u7b2c\u4e00\u5217\u7684\u7c7b\u578b\n+    int columnCount = query.getColumnCount();\n+    if (columnCount != 1) {\n+      l = l.convertTo(Value.ROW);\n+      Value[] leftValue = ((ValueRow) l).getList();\n+      if (columnCount == leftValue.length && rows.containsDistinct(leftValue)) {\n+        return ValueBoolean.TRUE;\n+      }\n+    } else {\n+      TypeInfo colType = rows.getColumnType(0);\n+      if (colType.getValueType() == Value.NULL) {\n+        return ValueNull.INSTANCE;\n+      }\n+      if (l.getValueType() == Value.ROW) {\n+        Value[] leftList = ((ValueRow) l).getList();\n+        if (leftList.length != 1) {\n+          throw DbException.get(ErrorCode.COLUMN_COUNT_DOES_NOT_MATCH);\n         }\n-        return ValueBoolean.FALSE;\n+        l = leftList[0];\n+      }\n+      //\u628aleft\u7684\u503c\u8f6c\u6210\u7ed3\u679c\u96c6\u4e2d\u7b2c\u4e00\u5217\u7684\u7c7b\u578b\uff0c\u7136\u540e\u5224\u65ad\u7ed3\u679c\u96c6\u4e2d\u662f\u5426\u5305\u542b\u5b83\uff0c\u8fd4\u56detrue\n+      l = l.convertTo(colType, database.getMode(), null);\n+      if (rows.containsDistinct(new Value[] {l})) {\n+        return ValueBoolean.TRUE;\n+      }\n     }\n-\n-    private Value getValueSlow(ResultInterface rows, Value l) {\n-        // this only returns the correct result if the result has at least one\n-        // row, and if l is not null\n-        boolean hasNull = false;\n-        if (all) {\n-            while (rows.next()) {\n-                Value cmp = compare(l, rows);\n-                if (cmp == ValueNull.INSTANCE) {\n-                    hasNull = true;\n-                } else if (cmp == ValueBoolean.FALSE) {\n-                    return cmp;\n-                }\n-            }\n-        } else {\n-            while (rows.next()) {\n-                Value cmp = compare(l, rows);\n-                if (cmp == ValueNull.INSTANCE) {\n-                    hasNull = true;\n-                } else if (cmp == ValueBoolean.TRUE) {\n-                    return cmp;\n-                }\n-            }\n+    //\u7ed3\u679c\u96c6\u4e2d\u4e0d\u5305\u542bleft\u4e14\u6709null\uff0c\u90a3\u4e48\u8fd4\u56denull\n+    if (rows.containsNull()) {\n+      return ValueNull.INSTANCE;\n+    }\n+    return ValueBoolean.FALSE;\n+  }\n+\n+  private Value getValueSlow(ResultInterface rows, Value l) {\n+    // this only returns the correct result if the result has at least one\n+    // row, and if l is not null\n+    boolean hasNull = false;\n+    if (all) {\n+      while (rows.next()) {\n+        Value cmp = compare(l, rows);\n+        if (cmp == ValueNull.INSTANCE) {\n+          hasNull = true;\n+        } else if (cmp == ValueBoolean.FALSE) {\n+          return cmp;\n         }\n-        if (hasNull) {\n-            return ValueNull.INSTANCE;\n+      }\n+    } else {\n+      while (rows.next()) {\n+        Value cmp = compare(l, rows);\n+        if (cmp == ValueNull.INSTANCE) {\n+          hasNull = true;\n+        } else if (cmp == ValueBoolean.TRUE) {\n+          return cmp;\n         }\n-        return ValueBoolean.get(all);\n+      }\n     }\n-\n-    private Value compare(Value l, ResultInterface rows) {\n-        Value[] currentRow = rows.currentRow();\n-        Value r = l.getValueType() != Value.ROW && query.getColumnCount() == 1 ? currentRow[0]\n-                : ValueRow.get(currentRow);\n-        return Comparison.compare(database, l, r, compareType);\n+    if (hasNull) {\n+      return ValueNull.INSTANCE;\n     }\n-\n-    @Override\n-    public void mapColumns(ColumnResolver resolver, int level, int state) {\n-        left.mapColumns(resolver, level, state);\n-        super.mapColumns(resolver, level, state);\n-    }\n-\n-    @Override\n-    public Expression optimize(Session session) {\n-        left = left.optimize(session);\n-        return super.optimize(session);\n+    return ValueBoolean.get(all);\n+  }\n+\n+  private Value compare(Value l, ResultInterface rows) {\n+    Value[] currentRow = rows.currentRow();\n+    Value r = l.getValueType() != Value.ROW && query.getColumnCount() == 1 ? currentRow[0]\n+        : ValueRow.get(currentRow);\n+    return Comparison.compare(database, l, r, compareType);\n+  }\n+\n+  @Override\n+  public void mapColumns(ColumnResolver resolver, int level, int state) {\n+    left.mapColumns(resolver, level, state);\n+    super.mapColumns(resolver, level, state);\n+  }\n+\n+  @Override\n+  public Expression optimize(Session session) {\n+    left = left.optimize(session);\n+    return super.optimize(session);\n \n //\u65e9\u671f\u7684\u7248\u672cConditionInSelect\u6709\u4e0b\u9762\u8fd9\u4e2a\u5224\u65ad\n //      //\u5982where id in(select id,name from ConditionInSelectTest where id=3)\n@@ -162,74 +163,74 @@ public class ConditionInQuery extends PredicateWithSubquery {\n //      if (query.getColumnCount() != 1) {\n //          throw DbException.get(ErrorCode.SUBQUERY_IS_NOT_SINGLE_COLUMN);\n //      }\n+  }\n+\n+  @Override\n+  public void setEvaluatable(TableFilter tableFilter, boolean b) {\n+    left.setEvaluatable(tableFilter, b);\n+    super.setEvaluatable(tableFilter, b);\n+  }\n+\n+  @Override\n+  public StringBuilder getSQL(StringBuilder builder, boolean alwaysQuote) {\n+    builder.append('(');\n+    left.getSQL(builder, alwaysQuote).append(' ');\n+    if (all) {\n+      builder.append(Comparison.getCompareOperator(compareType)).\n+          append(\" ALL\");\n+    } else {\n+      if (compareType == Comparison.EQUAL) {\n+        builder.append(\"IN\");\n+      } else {\n+        builder.append(Comparison.getCompareOperator(compareType)).\n+            append(\" ANY\");\n+      }\n     }\n-\n-    @Override\n-    public void setEvaluatable(TableFilter tableFilter, boolean b) {\n-        left.setEvaluatable(tableFilter, b);\n-        super.setEvaluatable(tableFilter, b);\n+    return super.getSQL(builder, alwaysQuote).append(')');\n+  }\n+\n+  @Override\n+  public void updateAggregate(Session session, int stage) {\n+    left.updateAggregate(session, stage);\n+    super.updateAggregate(session, stage);\n+  }\n+\n+  @Override\n+  public boolean isEverything(ExpressionVisitor visitor) {\n+    return left.isEverything(visitor) && super.isEverything(visitor);\n+  }\n+\n+  @Override\n+  public int getCost() {\n+    return left.getCost() + super.getCost();\n+  }\n+\n+  @Override\n+  public void createIndexConditions(Session session, TableFilter filter) {\n+    if (!session.getDatabase().getSettings().optimizeInList) {\n+      return;\n     }\n-\n-    @Override\n-    public StringBuilder getSQL(StringBuilder builder, boolean alwaysQuote) {\n-        builder.append('(');\n-        left.getSQL(builder, alwaysQuote).append(' ');\n-        if (all) {\n-            builder.append(Comparison.getCompareOperator(compareType)).\n-                append(\" ALL\");\n-        } else {\n-            if (compareType == Comparison.EQUAL) {\n-                builder.append(\"IN\");\n-            } else {\n-                builder.append(Comparison.getCompareOperator(compareType)).\n-                    append(\" ANY\");\n-            }\n-        }\n-        return super.getSQL(builder, alwaysQuote).append(')');\n+    if (compareType != Comparison.EQUAL) {\n+      return;\n     }\n-\n-    @Override\n-    public void updateAggregate(Session session, int stage) {\n-        left.updateAggregate(session, stage);\n-        super.updateAggregate(session, stage);\n+    if (query.getColumnCount() != 1) {\n+      return;\n     }\n-\n-    @Override\n-    public boolean isEverything(ExpressionVisitor visitor) {\n-        return left.isEverything(visitor) && super.isEverything(visitor);\n+    if (!(left instanceof ExpressionColumn)) {\n+      return;\n     }\n-\n-    @Override\n-    public int getCost() {\n-        return left.getCost() + super.getCost();\n+    ExpressionColumn l = (ExpressionColumn) left;\n+    if (filter != l.getTableFilter()) {\n+      return;\n     }\n-\n-    @Override\n-    public void createIndexConditions(Session session, TableFilter filter) {\n-        if (!session.getDatabase().getSettings().optimizeInList) {\n-            return;\n-        }\n-        if (compareType != Comparison.EQUAL) {\n-            return;\n-        }\n-        if (query.getColumnCount() != 1) {\n-            return;\n-        }\n-        if (!(left instanceof ExpressionColumn)) {\n-            return;\n-        }\n-        ExpressionColumn l = (ExpressionColumn) left;\n-        if (filter != l.getTableFilter()) {\n-            return;\n-        }\n-        // query\u4e2d\u7684columnResolver\u4e0efilter\u4e0d\u662f\u540c\u4e00\u4e2a\u5b9e\u4f8b\u65f6\u5c31\u628aquery\u52a0\u5165\u7d22\u5f15\u6761\u4ef6\n-        // \u4e5f\u5c31\u662f\u8bf4\u5982\u679cquery\u4e2d\u7684columnResolver\u4e0efilter\u662f\u540c\u4e00\u4e2a\u5b9e\u4f8b\uff0c\n-        // \u5c31\u76f8\u5f53\u4e8efilter\u81ea\u5df1\u627e\u81ea\u5df1\u4e86\uff0c\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\n-        ExpressionVisitor visitor = ExpressionVisitor.getNotFromResolverVisitor(filter);\n-        if (!query.isEverything(visitor)) {\n-            return;\n-        }\n-        filter.addIndexCondition(IndexCondition.getInQuery(l, query));\n+    // query\u4e2d\u7684columnResolver\u4e0efilter\u4e0d\u662f\u540c\u4e00\u4e2a\u5b9e\u4f8b\u65f6\u5c31\u628aquery\u52a0\u5165\u7d22\u5f15\u6761\u4ef6\n+    // \u4e5f\u5c31\u662f\u8bf4\u5982\u679cquery\u4e2d\u7684columnResolver\u4e0efilter\u662f\u540c\u4e00\u4e2a\u5b9e\u4f8b\uff0c\n+    // \u5c31\u76f8\u5f53\u4e8efilter\u81ea\u5df1\u627e\u81ea\u5df1\u4e86\uff0c\u4f1a\u51fa\u73b0\u6b7b\u5faa\u73af\n+    ExpressionVisitor visitor = ExpressionVisitor.getNotFromResolverVisitor(filter);\n+    if (!query.isEverything(visitor)) {\n+      return;\n     }\n+    filter.addIndexCondition(IndexCondition.getInQuery(l, query));\n+  }\n \n }\n",
            "diff_size": 263
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "68",
                    "column": "40",
                    "severity": "warning",
                    "message": "Don't use trailing comments.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.TrailingCommentCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/102/ConditionInQuery.java\nindex 0398c465240..4c1f5951f7c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/102/ConditionInQuery.java\n@@ -27,6 +27,8 @@ import org.h2.value.ValueRow;\n /**\n  * An IN() condition with a subquery, as in WHERE ID IN(SELECT ...)\n  */\n+\n+\n public class ConditionInQuery extends PredicateWithSubquery {\n \n     private final Database database;\n@@ -96,7 +98,7 @@ public class ConditionInQuery extends PredicateWithSubquery {\n             }\n             //\u628aleft\u7684\u503c\u8f6c\u6210\u7ed3\u679c\u96c6\u4e2d\u7b2c\u4e00\u5217\u7684\u7c7b\u578b\uff0c\u7136\u540e\u5224\u65ad\u7ed3\u679c\u96c6\u4e2d\u662f\u5426\u5305\u542b\u5b83\uff0c\u8fd4\u56detrue\n             l = l.convertTo(colType, database.getMode(), null);\n-            if (rows.containsDistinct(new Value[] { l })) { \n+            if (rows.containsDistinct(new Value[] { l })) {\n                 return ValueBoolean.TRUE;\n             }\n         }\n@@ -138,8 +140,7 @@ public class ConditionInQuery extends PredicateWithSubquery {\n \n     private Value compare(Value l, ResultInterface rows) {\n         Value[] currentRow = rows.currentRow();\n-        Value r = l.getValueType() != Value.ROW && query.getColumnCount() == 1 ? currentRow[0]\n-                : ValueRow.get(currentRow);\n+        Value r = l.getValueType() != Value.ROW && query.getColumnCount() == 1 ? currentRow[0] : ValueRow.get(currentRow);\n         return Comparison.compare(database, l, r, compareType);\n     }\n \n@@ -175,14 +176,12 @@ public class ConditionInQuery extends PredicateWithSubquery {\n         builder.append('(');\n         left.getSQL(builder, alwaysQuote).append(' ');\n         if (all) {\n-            builder.append(Comparison.getCompareOperator(compareType)).\n-                append(\" ALL\");\n+            builder.append(Comparison.getCompareOperator(compareType)).append(\" ALL\");\n         } else {\n             if (compareType == Comparison.EQUAL) {\n                 builder.append(\"IN\");\n             } else {\n-                builder.append(Comparison.getCompareOperator(compareType)).\n-                    append(\" ANY\");\n+                builder.append(Comparison.getCompareOperator(compareType)).append(\" ANY\");\n             }\n         }\n         return super.getSQL(builder, alwaysQuote).append(')');\n@@ -232,4 +231,4 @@ public class ConditionInQuery extends PredicateWithSubquery {\n         filter.addIndexCondition(IndexCondition.getInQuery(l, query));\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/102/ConditionInQuery.java\nindex 0398c465240..856583f4ee9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/102/ConditionInQuery.java\n@@ -63,8 +63,9 @@ public class ConditionInQuery extends PredicateWithSubquery {\n         Value l = left.getValue(session);\n         if (!rows.hasNext()) {\n             return ValueBoolean.get(all);\n-        } else if (l.containsNull()) { //\u5982\u679cleft\u662fnull\uff0c\u90a3\u4e48\u8fd4\u56denull\n-            return ValueNull.INSTANCE;\n+        } else if (l.containsNull()) {\n+            //\u5982\u679cleft\u662fnull\uff0c\u90a3\u4e48\u8fd4\u56denull\n+        return ValueNull.INSTANCE;\n         }\n         if (!database.getSettings().optimizeInSelect) {\n             return getValueSlow(rows, l);\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/102/ConditionInQuery.java\nindex 0398c465240..62a213840f1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/102/ConditionInQuery.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/102/ConditionInQuery.java\n@@ -63,8 +63,9 @@ public class ConditionInQuery extends PredicateWithSubquery {\n         Value l = left.getValue(session);\n         if (!rows.hasNext()) {\n             return ValueBoolean.get(all);\n-        } else if (l.containsNull()) { //\u5982\u679cleft\u662fnull\uff0c\u90a3\u4e48\u8fd4\u56denull\n-            return ValueNull.INSTANCE;\n+        } else if (l.containsNull()) {\n+    //\u5982\u679cleft\u662fnull\uff0c\u90a3\u4e48\u8fd4\u56denull\n+        return ValueNull.INSTANCE;\n         }\n         if (!database.getSettings().optimizeInSelect) {\n             return getValueSlow(rows, l);\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}