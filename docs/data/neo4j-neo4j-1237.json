{
    "project_name": "neo4j-neo4j",
    "error_id": "1237",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1237/SingleSourceShortestPath.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1237/SingleSourceShortestPath.java\nindex 44d1949cb13..19f53e8e06f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1237/SingleSourceShortestPath.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1237/SingleSourceShortestPath.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.shortestpath;\n \n import java.util.List;\n@@ -32,8 +33,8 @@ import org.neo4j.graphdb.RelationshipType;\n  * An object implementing this encapsulates an algorithm able to solve the\n  * single source shortest path problem. I.e. it can find the shortest path(s)\n  * from a given start node to all other nodes in a network.\n- * @param <CostType>\n- *            The datatype the edge weights are represented by.\n+ *\n+ * @param <CostType> The datatype the edge weights are represented by.\n  */\n public interface SingleSourceShortestPath<CostType>\n {\n@@ -44,79 +45,88 @@ public interface SingleSourceShortestPath<CostType>\n \n     /**\n      * This sets the start node. The found paths will start in this node.\n-     * @param node\n-     *            The start node.\n+     *\n+     * @param node The start node.\n      */\n-    void setStartNode( Node node );\n+    void setStartNode(Node node);\n \n     /**\n      * A call to this will run the algorithm to find a single shortest path, if\n      * not already done, and return it as an alternating list of\n      * Node/Relationship.\n+     *\n      * @return The path as an alternating list of Node/Relationship.\n      */\n-    List<Entity> getPath( Node targetNode );\n+    List<Entity> getPath(Node targetNode);\n \n     /**\n      * A call to this will run the algorithm, if not already done, and return\n      * the found path to the target node if found as a list of nodes.\n+     *\n      * @return The path as a list of nodes.\n      */\n-    List<Node> getPathAsNodes( Node targetNode );\n+    List<Node> getPathAsNodes(Node targetNode);\n \n     /**\n      * A call to this will run the algorithm to find a single shortest path, if\n      * not already done, and return it as a list of Relationships.\n+     *\n      * @return The path as a list of Relationships.\n      */\n-    List<Relationship> getPathAsRelationships( Node targetNode );\n+    List<Relationship> getPathAsRelationships(Node targetNode);\n \n     /**\n      * A call to this will run the algorithm to find all shortest paths, if not\n      * already done, and return them as alternating lists of Node/Relationship.\n+     *\n      * @return A list of the paths as alternating lists of Node/Relationship.\n      */\n-    List<List<Entity>> getPaths( Node targetNode );\n+    List<List<Entity>> getPaths(Node targetNode);\n \n     /**\n      * A call to this will run the algorithm to find all shortest paths, if not\n      * already done, and return them as lists of nodes.\n+     *\n      * @return A list of the paths as lists of nodes.\n      */\n-    List<List<Node>> getPathsAsNodes( Node targetNode );\n+    List<List<Node>> getPathsAsNodes(Node targetNode);\n \n     /**\n      * A call to this will run the algorithm to find all shortest paths, if not\n      * already done, and return them as lists of relationships.\n+     *\n      * @return A list of the paths as lists of relationships.\n      */\n-    List<List<Relationship>> getPathsAsRelationships( Node targetNode );\n+    List<List<Relationship>> getPathsAsRelationships(Node targetNode);\n \n     /**\n      * A call to this will run the algorithm, if not already done, and return\n      * the cost for the shortest paths between the start node and the target\n      * node.\n+     *\n      * @return The total weight of the shortest path(s).\n      */\n-    CostType getCost( Node targetNode );\n+    CostType getCost(Node targetNode);\n \n     /**\n      * @param node\n      * @return The nodes previous to the argument node in all found shortest\n-     *         paths or null if there are no such nodes.\n+     * paths or null if there are no such nodes.\n      */\n-    List<Node> getPredecessorNodes( Node node );\n+    List<Node> getPredecessorNodes(Node node);\n \n     /**\n      * This can be used to retrieve the entire data structure representing the\n      * predecessors for every node.\n+     *\n      * @return\n      */\n-    Map<Node,List<Relationship>> getPredecessors();\n+    Map<Node, List<Relationship>> getPredecessors();\n \n     /**\n      * This can be used to retrieve the Direction in which relationships should\n      * be in the shortest path(s).\n+     *\n      * @return The direction.\n      */\n     Direction getDirection();\n@@ -124,6 +134,7 @@ public interface SingleSourceShortestPath<CostType>\n     /**\n      * This can be used to retrieve the types of relationships that are\n      * traversed.\n+     *\n      * @return The relationship type(s).\n      */\n     RelationshipType[] getRelationshipTypes();\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}