{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2480",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "43",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "150",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "147",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "167",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "209",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "241",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "252",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "315",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "325",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "341",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "344",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "346",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "357",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "376",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "380",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "385",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "389",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2480/Envelope.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2480/Envelope.java\nindex ab00ae7316d..60d31680072 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2480/Envelope.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2480/Envelope.java\n@@ -17,380 +17,376 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.gis.spatial.index;\n \n import java.util.Arrays;\n \n public class Envelope\n {\n-    static final double MAXIMAL_ENVELOPE_SIDE_RATIO = 100_000;\n-\n-    protected final double[] min;\n-    protected final double[] max;\n-\n-    /**\n-     * Copy constructor\n-     */\n-    public Envelope( Envelope e )\n-    {\n-        this( e.min, e.max );\n-    }\n-\n-    /**\n-     * General constructor for the n-dimensional case\n-     */\n-    public Envelope( double[] min, double[] max )\n-    {\n-        this.min = min.clone();\n-        this.max = max.clone();\n-        if ( !isValid() )\n-        {\n-            throw new IllegalArgumentException( \"Invalid envelope created \" + toString() );\n-        }\n-    }\n-\n-    /**\n-     * Special constructor for the 2D case\n-     */\n-    public Envelope( double xmin, double xmax, double ymin, double ymax )\n-    {\n-        this( new double[] { xmin, ymin }, new double[] { xmax, ymax } );\n-    }\n-\n-    /**\n-     * @return a copy of the envelope where the ratio of smallest to largest side is not more than 1:100\n-     */\n-    public Envelope withSideRatioNotTooSmall( )\n-    {\n-        double[] from = Arrays.copyOf( this.min, min.length );\n-        double[] to = Arrays.copyOf( this.max, max.length );\n-        double highestDiff = -Double.MAX_VALUE;\n-        double[] diffs = new double[from.length];\n-        for ( int i = 0; i < from.length; i++ )\n-        {\n-            diffs[i] = to[i] - from[i];\n-            highestDiff = Math.max( highestDiff, diffs[i] );\n-        }\n-        final double mindiff = highestDiff / MAXIMAL_ENVELOPE_SIDE_RATIO;\n-        for ( int i = 0; i < from.length; i++ )\n-        {\n-            if ( diffs[i] < mindiff )\n-            {\n-                to[i] = from[i] + mindiff;\n-            }\n-        }\n-        return new Envelope( from, to );\n-    }\n-\n-    public double[] getMin()\n+  static final double MAXIMAL_ENVELOPE_SIDE_RATIO = 100_000;\n+\n+  protected final double[] min;\n+  protected final double[] max;\n+\n+  /**\n+   * Copy constructor\n+   */\n+  public Envelope(Envelope e)\n+  {\n+    this(e.min, e.max);\n+  }\n+\n+  /**\n+   * General constructor for the n-dimensional case\n+   */\n+  public Envelope(double[] min, double[] max)\n+  {\n+    this.min = min.clone();\n+    this.max = max.clone();\n+    if (!isValid())\n     {\n-        return min;\n+      throw new IllegalArgumentException(\"Invalid envelope created \" + toString());\n     }\n-\n-    public double[] getMax()\n-    {\n-        return max;\n-    }\n-\n-    public double getMin( int dimension )\n+  }\n+\n+  /**\n+   * Special constructor for the 2D case\n+   */\n+  public Envelope(double xmin, double xmax, double ymin, double ymax)\n+  {\n+    this(new double[] {xmin, ymin}, new double[] {xmax, ymax});\n+  }\n+\n+  /**\n+   * @return a copy of the envelope where the ratio of smallest to largest side is not more than 1:100\n+   */\n+  public Envelope withSideRatioNotTooSmall()\n+  {\n+    double[] from = Arrays.copyOf(this.min, min.length);\n+    double[] to = Arrays.copyOf(this.max, max.length);\n+    double highestDiff = -Double.MAX_VALUE;\n+    double[] diffs = new double[from.length];\n+    for (int i = 0; i < from.length; i++)\n     {\n-        return min[dimension];\n+      diffs[i] = to[i] - from[i];\n+      highestDiff = Math.max(highestDiff, diffs[i]);\n     }\n-\n-    public double getMax( int dimension )\n+    final double mindiff = highestDiff / MAXIMAL_ENVELOPE_SIDE_RATIO;\n+    for (int i = 0; i < from.length; i++)\n     {\n-        return max[dimension];\n+      if (diffs[i] < mindiff)\n+      {\n+        to[i] = from[i] + mindiff;\n+      }\n     }\n-\n-    public double getMinX()\n+    return new Envelope(from, to);\n+  }\n+\n+  public double[] getMin()\n+  {\n+    return min;\n+  }\n+\n+  public double[] getMax()\n+  {\n+    return max;\n+  }\n+\n+  public double getMin(int dimension)\n+  {\n+    return min[dimension];\n+  }\n+\n+  public double getMax(int dimension)\n+  {\n+    return max[dimension];\n+  }\n+\n+  public double getMinX()\n+  {\n+    return getMin(0);\n+  }\n+\n+  public double getMaxX()\n+  {\n+    return getMax(0);\n+  }\n+\n+  public double getMinY()\n+  {\n+    return getMin(1);\n+  }\n+\n+  public double getMaxY()\n+  {\n+    return getMax(1);\n+  }\n+\n+  public int getDimension()\n+  {\n+    return min.length;\n+  }\n+\n+  /**\n+   * Note that this doesn't exclude the envelope boundary.\n+   * See JTS Envelope.\n+   */\n+  public boolean contains(Envelope other)\n+  {\n+    return covers(other);\n+  }\n+\n+  public boolean covers(Envelope other)\n+  {\n+    boolean covers = getDimension() == other.getDimension();\n+    for (int i = 0; i < min.length && covers; i++)\n     {\n-        return getMin(0);\n+      covers = other.min[i] >= min[i] && other.max[i] <= max[i];\n     }\n+    return covers;\n+  }\n \n-    public double getMaxX()\n+  public boolean intersects(Envelope other)\n+  {\n+    boolean intersects = getDimension() == other.getDimension();\n+    for (int i = 0; i < min.length && intersects; i++)\n     {\n-        return getMax(0);\n+      intersects = other.min[i] <= max[i] && other.max[i] >= min[i];\n     }\n+    return intersects;\n+  }\n \n-    public double getMinY()\n+  public void expandToInclude(Envelope other)\n+  {\n+    if (getDimension() != other.getDimension())\n     {\n-        return getMin(1);\n-    }\n-\n-    public double getMaxY()\n-    {\n-        return getMax(1);\n-    }\n-\n-    public int getDimension()\n+      throw new IllegalArgumentException(\"Cannot join Envelopes with different dimensions: \" + this.getDimension() + \" != \" + other.getDimension());\n+    } else\n     {\n-        return min.length;\n-    }\n-\n-    /**\n-     * Note that this doesn't exclude the envelope boundary.\n-     * See JTS Envelope.\n-     */\n-    public boolean contains( Envelope other )\n-    {\n-        return covers(other);\n-    }\n-\n-    public boolean covers( Envelope other )\n-    {\n-        boolean covers = getDimension() == other.getDimension();\n-        for ( int i = 0; i < min.length && covers; i++ )\n+      for (int i = 0; i < min.length; i++)\n+      {\n+        if (other.min[i] < min[i])\n         {\n-            covers = other.min[i] >= min[i] && other.max[i] <= max[i];\n+          min[i] = other.min[i];\n         }\n-        return covers;\n-    }\n-\n-    public boolean intersects( Envelope other )\n-    {\n-        boolean intersects = getDimension() == other.getDimension();\n-        for ( int i = 0; i < min.length && intersects; i++ )\n+        if (other.max[i] > max[i])\n         {\n-            intersects = other.min[i] <= max[i] && other.max[i] >= min[i];\n+          max[i] = other.max[i];\n         }\n-        return intersects;\n+      }\n     }\n+  }\n \n-    public void expandToInclude( Envelope other )\n+  @Override\n+  public boolean equals(Object obj)\n+  {\n+    if (obj instanceof Envelope)\n     {\n-        if ( getDimension() != other.getDimension() )\n+      Envelope other = (Envelope) obj;\n+      if (this.getDimension() != other.getDimension())\n+      {\n+        return false;\n+      }\n+      for (int i = 0; i < getDimension(); i++)\n+      {\n+        if (this.min[i] != other.getMin(i) || this.max[i] != other.getMax(i))\n         {\n-            throw new IllegalArgumentException( \"Cannot join Envelopes with different dimensions: \" + this.getDimension() + \" != \" + other.getDimension() );\n+          return false;\n         }\n-        else\n-        {\n-            for ( int i = 0; i < min.length; i++ )\n-            {\n-                if ( other.min[i] < min[i] )\n-                {\n-                    min[i] = other.min[i];\n-                }\n-                if ( other.max[i] > max[i] )\n-                {\n-                    max[i] = other.max[i];\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public boolean equals( Object obj )\n+      }\n+      return true;\n+    } else\n     {\n-        if ( obj instanceof Envelope )\n-        {\n-            Envelope other = (Envelope) obj;\n-            if ( this.getDimension() != other.getDimension() )\n-            {\n-                return false;\n-            }\n-            for ( int i = 0; i < getDimension(); i++ )\n-            {\n-                if ( this.min[i] != other.getMin( i ) || this.max[i] != other.getMax( i ) )\n-                {\n-                    return false;\n-                }\n-            }\n-            return true;\n-        }\n-        else\n-        {\n-            return false;\n-        }\n+      return false;\n     }\n+  }\n \n-    @Override\n-    public int hashCode()\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = 1;\n+    for (double element : min)\n     {\n-        int result = 1;\n-        for ( double element : min )\n-        {\n-            long bits = Double.doubleToLongBits( element );\n-            result = 31 * result + (int) (bits ^ (bits >>> 32));\n-        }\n-        for ( double element : max )\n-        {\n-            long bits = Double.doubleToLongBits( element );\n-            result = 31 * result + (int) (bits ^ (bits >>> 32));\n-        }\n-        return result;\n+      long bits = Double.doubleToLongBits(element);\n+      result = 31 * result + (int) (bits ^ (bits >>> 32));\n     }\n-\n-    /**\n-     * Return the distance between the two envelopes on one dimension. This can return negative values if the envelopes intersect on this dimension.\n-     * @return distance between envelopes\n-     */\n-    public double distance( Envelope other, int dimension )\n+    for (double element : max)\n     {\n-        if ( min[dimension] < other.min[dimension] )\n-        {\n-            return other.min[dimension] - max[dimension];\n-        }\n-        else\n-        {\n-            return min[dimension] - other.max[dimension];\n-        }\n+      long bits = Double.doubleToLongBits(element);\n+      result = 31 * result + (int) (bits ^ (bits >>> 32));\n     }\n-\n-    /**\n-     * Find the pythagorean distance between two envelopes\n-     */\n-    public double distance( Envelope other )\n+    return result;\n+  }\n+\n+  /**\n+   * Return the distance between the two envelopes on one dimension. This can return negative values if the envelopes intersect on this dimension.\n+   *\n+   * @return distance between envelopes\n+   */\n+  public double distance(Envelope other, int dimension)\n+  {\n+    if (min[dimension] < other.min[dimension])\n     {\n-        if ( intersects(other) )\n-        {\n-            return 0;\n-        }\n-\n-        double distance = 0.0;\n-        for ( int i = 0; i < min.length; i++ )\n-        {\n-            double dist = distance(other, i);\n-            if ( dist > 0 )\n-            {\n-                distance += dist * dist;\n-            }\n-        }\n-        return Math.sqrt(distance);\n-    }\n-\n-    /**\n-     * @return getWidth(0) for special 2D case with the first dimension being x (width)\n-     */\n-    public double getWidth()\n+      return other.min[dimension] - max[dimension];\n+    } else\n     {\n-        return getWidth(0);\n+      return min[dimension] - other.max[dimension];\n     }\n-\n-    /**\n-     * Return the width of the envelope at the specified dimension\n-     * @return with of that dimension, ie. max[d] - min[d]\n-     */\n-    public double getWidth( int dimension )\n+  }\n+\n+  /**\n+   * Find the pythagorean distance between two envelopes\n+   */\n+  public double distance(Envelope other)\n+  {\n+    if (intersects(other))\n     {\n-        return max[dimension] - min[dimension];\n+      return 0;\n     }\n \n-    /**\n-     * Return the fractional widths of the envelope at all axes\n-     *\n-     * @param divisor the number of segments to divide by (a 2D envelope will be divided into quadrants using 2)\n-     * @return double array of widths, ie. max[d] - min[d]\n-     */\n-    public double[] getWidths( int divisor )\n+    double distance = 0.0;\n+    for (int i = 0; i < min.length; i++)\n     {\n-        double[] widths = Arrays.copyOf(max, max.length);\n-        for ( int d = 0; d < max.length; d++ )\n-        {\n-            widths[d] -= min[d];\n-            widths[d] /= divisor;\n-        }\n-        return widths;\n+      double dist = distance(other, i);\n+      if (dist > 0)\n+      {\n+        distance += dist * dist;\n+      }\n     }\n-\n-    public double getArea()\n+    return Math.sqrt(distance);\n+  }\n+\n+  /**\n+   * @return getWidth(0) for special 2D case with the first dimension being x (width)\n+   */\n+  public double getWidth()\n+  {\n+    return getWidth(0);\n+  }\n+\n+  /**\n+   * Return the width of the envelope at the specified dimension\n+   *\n+   * @return with of that dimension, ie. max[d] - min[d]\n+   */\n+  public double getWidth(int dimension)\n+  {\n+    return max[dimension] - min[dimension];\n+  }\n+\n+  /**\n+   * Return the fractional widths of the envelope at all axes\n+   *\n+   * @param divisor the number of segments to divide by (a 2D envelope will be divided into quadrants using 2)\n+   * @return double array of widths, ie. max[d] - min[d]\n+   */\n+  public double[] getWidths(int divisor)\n+  {\n+    double[] widths = Arrays.copyOf(max, max.length);\n+    for (int d = 0; d < max.length; d++)\n     {\n-        double area = 1.0;\n-        for ( int i = 0; i < min.length; i++ )\n-        {\n-            area *= max[i] - min[i];\n-        }\n-        return area;\n+      widths[d] -= min[d];\n+      widths[d] /= divisor;\n     }\n+    return widths;\n+  }\n \n-    public double overlap( Envelope other )\n+  public double getArea()\n+  {\n+    double area = 1.0;\n+    for (int i = 0; i < min.length; i++)\n     {\n-        Envelope smallest = this.getArea() < other.getArea() ? this : other;\n-        Envelope intersection = this.intersection(other);\n-        return intersection == null ? 0.0 : smallest.isPoint() ? 1.0 : intersection.getArea() / smallest.getArea();\n+      area *= max[i] - min[i];\n     }\n-\n-    public boolean isPoint()\n+    return area;\n+  }\n+\n+  public double overlap(Envelope other)\n+  {\n+    Envelope smallest = this.getArea() < other.getArea() ? this : other;\n+    Envelope intersection = this.intersection(other);\n+    return intersection == null ? 0.0 : smallest.isPoint() ? 1.0 : intersection.getArea() / smallest.getArea();\n+  }\n+\n+  public boolean isPoint()\n+  {\n+    boolean ans = true;\n+    for (int i = 0; i < min.length && ans; i++)\n     {\n-        boolean ans = true;\n-        for ( int i = 0; i < min.length && ans; i++ )\n-        {\n-            ans = min[i] == max[i];\n-        }\n-        return ans;\n+      ans = min[i] == max[i];\n     }\n+    return ans;\n+  }\n \n-    private boolean isValid()\n+  private boolean isValid()\n+  {\n+    boolean valid = min != null && max != null && min.length == max.length;\n+    for (int i = 0; valid && i < min.length; i++)\n     {\n-        boolean valid = min != null && max != null && min.length == max.length;\n-        for ( int i = 0; valid && i < min.length; i++ )\n-        {\n-            valid = min[i] <= max[i];\n-        }\n-        return valid;\n+      valid = min[i] <= max[i];\n     }\n-\n-    @Override\n-    public String toString()\n+    return valid;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"Envelope: min=\" + makeString(min) + \", max=\" + makeString(max);\n+  }\n+\n+  private static String makeString(double[] vals)\n+  {\n+    StringBuilder sb = new StringBuilder();\n+    if (vals == null)\n     {\n-        return \"Envelope: min=\" + makeString(min) + \", max=\" + makeString(max);\n-    }\n-\n-    private static String makeString( double[] vals )\n+      sb.append(\"null\");\n+    } else\n     {\n-        StringBuilder sb = new StringBuilder();\n-        if ( vals == null )\n+      for (double val : vals)\n+      {\n+        if (sb.length() > 0)\n         {\n-            sb.append(\"null\");\n-        }\n-        else\n+          sb.append(\",\");\n+        } else\n         {\n-            for ( double val : vals )\n-            {\n-                if ( sb.length() > 0 )\n-                {\n-                    sb.append( \",\" );\n-                }\n-                else\n-                {\n-                    sb.append( \"(\" );\n-                }\n-                sb.append( val );\n-            }\n-            if ( sb.length() > 0 )\n-            {\n-                sb.append( \")\" );\n-            }\n+          sb.append(\"(\");\n         }\n-        return sb.toString();\n+        sb.append(val);\n+      }\n+      if (sb.length() > 0)\n+      {\n+        sb.append(\")\");\n+      }\n     }\n+    return sb.toString();\n+  }\n \n-    public Envelope intersection( Envelope other )\n+  public Envelope intersection(Envelope other)\n+  {\n+    if (getDimension() == other.getDimension())\n     {\n-        if ( getDimension() == other.getDimension() )\n+      double[] iMin = new double[this.min.length];\n+      double[] iMax = new double[this.min.length];\n+      Arrays.fill(iMin, Double.NaN);\n+      Arrays.fill(iMax, Double.NaN);\n+      boolean result = true;\n+      for (int i = 0; i < min.length; i++)\n+      {\n+        if (other.min[i] <= this.max[i] && other.max[i] >= this.min[i])\n         {\n-            double[] iMin = new double[this.min.length];\n-            double[] iMax = new double[this.min.length];\n-            Arrays.fill(iMin, Double.NaN);\n-            Arrays.fill(iMax, Double.NaN);\n-            boolean result = true;\n-            for ( int i = 0; i < min.length; i++ )\n-            {\n-                if ( other.min[i] <= this.max[i] && other.max[i] >= this.min[i] )\n-                {\n-                    iMin[i] = Math.max(this.min[i], other.min[i]);\n-                    iMax[i] = Math.min(this.max[i], other.max[i]);\n-                }\n-                else\n-                {\n-                    result = false;\n-                }\n-            }\n-            return result ? new Envelope( iMin, iMax ) : null;\n-        }\n-        else\n+          iMin[i] = Math.max(this.min[i], other.min[i]);\n+          iMax[i] = Math.min(this.max[i], other.max[i]);\n+        } else\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot calculate intersection of Envelopes with different dimensions: \" + this.getDimension() + \" != \" + other.getDimension() );\n+          result = false;\n         }\n+      }\n+      return result ? new Envelope(iMin, iMax) : null;\n+    } else\n+    {\n+      throw new IllegalArgumentException(\n+          \"Cannot calculate intersection of Envelopes with different dimensions: \" + this.getDimension() + \" != \" + other.getDimension());\n     }\n+  }\n }\n",
            "diff_size": 504
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "216",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "401",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 177).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2480/Envelope.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2480/Envelope.java\nindex ab00ae7316d..816f0f576f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2480/Envelope.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2480/Envelope.java\n@@ -104,22 +104,22 @@ public class Envelope\n \n     public double getMinX()\n     {\n-        return getMin(0);\n+        return getMin( 0);\n     }\n \n     public double getMaxX()\n     {\n-        return getMax(0);\n+        return getMax( 0);\n     }\n \n     public double getMinY()\n     {\n-        return getMin(1);\n+        return getMin( 1);\n     }\n \n     public double getMaxY()\n     {\n-        return getMax(1);\n+        return getMax( 1);\n     }\n \n     public int getDimension()\n@@ -143,7 +143,8 @@ public class Envelope\n         {\n             covers = other.min[i] >= min[i] && other.max[i] <= max[i];\n         }\n-        return covers;\n+\n+return covers;\n     }\n \n     public boolean intersects( Envelope other )\n@@ -153,7 +154,8 @@ public class Envelope\n         {\n             intersects = other.min[i] <= max[i] && other.max[i] >= min[i];\n         }\n-        return intersects;\n+\n+return intersects;\n     }\n \n     public void expandToInclude( Envelope other )\n@@ -170,7 +172,8 @@ public class Envelope\n                 {\n                     min[i] = other.min[i];\n                 }\n-                if ( other.max[i] > max[i] )\n+\n+if ( other.max[i] > max[i] )\n                 {\n                     max[i] = other.max[i];\n                 }\n@@ -210,14 +213,15 @@ public class Envelope\n         for ( double element : min )\n         {\n             long bits = Double.doubleToLongBits( element );\n-            result = 31 * result + (int) (bits ^ (bits >>> 32));\n+            result = 31 * result + ( int) ( bits ^ ( bits >>> 32 ));\n         }\n         for ( double element : max )\n         {\n             long bits = Double.doubleToLongBits( element );\n-            result = 31 * result + (int) (bits ^ (bits >>> 32));\n+            result = 31 * result + ( int) ( bits ^ ( bits >>> 32 ));\n         }\n-        return result;\n+\n+return result;\n     }\n \n     /**\n@@ -249,7 +253,7 @@ public class Envelope\n         double distance = 0.0;\n         for ( int i = 0; i < min.length; i++ )\n         {\n-            double dist = distance(other, i);\n+            double dist = distance( other, i );\n             if ( dist > 0 )\n             {\n                 distance += dist * dist;\n@@ -263,7 +267,7 @@ public class Envelope\n      */\n     public double getWidth()\n     {\n-        return getWidth(0);\n+        return getWidth( 0);\n     }\n \n     /**\n@@ -283,13 +287,14 @@ public class Envelope\n      */\n     public double[] getWidths( int divisor )\n     {\n-        double[] widths = Arrays.copyOf(max, max.length);\n+        double[] widths = Arrays.copyOf( max, max.length);\n         for ( int d = 0; d < max.length; d++ )\n         {\n             widths[d] -= min[d];\n             widths[d] /= divisor;\n         }\n-        return widths;\n+\n+return widths;\n     }\n \n     public double getArea()\n@@ -299,7 +304,8 @@ public class Envelope\n         {\n             area *= max[i] - min[i];\n         }\n-        return area;\n+\n+return area;\n     }\n \n     public double overlap( Envelope other )\n@@ -316,7 +322,8 @@ public class Envelope\n         {\n             ans = min[i] == max[i];\n         }\n-        return ans;\n+\n+return ans;\n     }\n \n     private boolean isValid()\n@@ -326,7 +333,8 @@ public class Envelope\n         {\n             valid = min[i] <= max[i];\n         }\n-        return valid;\n+\n+return valid;\n     }\n \n     @Override\n@@ -340,7 +348,7 @@ public class Envelope\n         StringBuilder sb = new StringBuilder();\n         if ( vals == null )\n         {\n-            sb.append(\"null\");\n+            sb.append( \"null\");\n         }\n         else\n         {\n@@ -356,7 +364,8 @@ public class Envelope\n                 }\n                 sb.append( val );\n             }\n-            if ( sb.length() > 0 )\n+\n+if ( sb.length() > 0 )\n             {\n                 sb.append( \")\" );\n             }\n@@ -370,15 +379,15 @@ public class Envelope\n         {\n             double[] iMin = new double[this.min.length];\n             double[] iMax = new double[this.min.length];\n-            Arrays.fill(iMin, Double.NaN);\n-            Arrays.fill(iMax, Double.NaN);\n+            Arrays.fill( iMin, Double.NaN);\n+            Arrays.fill( iMax, Double.NaN);\n             boolean result = true;\n             for ( int i = 0; i < min.length; i++ )\n             {\n                 if ( other.min[i] <= this.max[i] && other.max[i] >= this.min[i] )\n                 {\n-                    iMin[i] = Math.max(this.min[i], other.min[i]);\n-                    iMax[i] = Math.min(this.max[i], other.max[i]);\n+                    iMin[i] = Math.max( this.min[i], other.min[i]);\n+                    iMax[i] = Math.min( this.max[i], other.max[i]);\n                 }\n                 else\n                 {\n@@ -389,8 +398,7 @@ public class Envelope\n         }\n         else\n         {\n-            throw new IllegalArgumentException(\n-                    \"Cannot calculate intersection of Envelopes with different dimensions: \" + this.getDimension() + \" != \" + other.getDimension() );\n-        }\n+            throw new IllegalArgumentException( \"Cannot calculate intersection of Envelopes with different dimensions: \" + this.getDimension() + \" != \" + other.getDimension() );\n+    }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}