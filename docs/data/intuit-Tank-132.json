{
    "project_name": "intuit-Tank",
    "error_id": "132",
    "information": {
        "errors": [
            {
                "line": "231",
                "column": "56",
                "severity": "warning",
                "message": "'?' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    }\n\n    public String getCollectionFilterString(Collection<? extends Object> c) {\n        StringBuilder sb = new StringBuilder();\n        if (c != null) {\n            for (Object o : c) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/132/PreferencesBean.java\nindex 02952959368..cbb974dfd32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/132/PreferencesBean.java\n@@ -228,7 +228,7 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n         return ret;\n     }\n \n-    public String getCollectionFilterString(Collection<? extends Object> c) {\n+    public String getCollectionFilterString(Collection< ? extends Object> c) {\n         StringBuilder sb = new StringBuilder();\n         if (c != null) {\n             for (Object o : c) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "225",
                    "column": "54",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/132/PreferencesBean.java\nindex 02952959368..6eea7928d1a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/132/PreferencesBean.java\n@@ -1,6 +1,7 @@\n /**\n  * Copyright 2011 Intuit Inc. All Rights Reserved\n  */\n+\n package com.intuit.tank;\n \n /*\n@@ -43,232 +44,223 @@ import com.intuit.tank.vm.common.util.ReportUtil;\n \n /**\n  * PreferencesBean\n- * \n+ *\n  * @author dangleton\n- * \n  */\n \n @Named\n @SessionScoped\n public class PreferencesBean implements Serializable, PreferencesChangedListener {\n \n-    private static final long serialVersionUID = 1L;\n-    private String preferredDateTimeFormat = TankConstants.DATE_FORMAT;\n-    private String preferredTimeStampFormat = ReportUtil.DATE_FORMAT;\n-\n-    private FastDateFormat timestampFormat;\n-\n-    private FastDateFormat dateTimeFotmat;\n-\n-    private Preferences preferences;\n-\n-    private int screenWidth = 1200;\n-    private int screenHeight = 600;\n-\n-    private TimeZone clientTimeZone = TimeZone.getTimeZone(\"PST\");\n-\n-    /**\n-     * Constructor\n-     */\n-    @PostConstruct\n-    public void init() {\n-        dateTimeFotmat = FastDateFormat.getInstance(TankConstants.DATE_FORMAT_WITH_TIMEZONE, clientTimeZone);\n-        timestampFormat = FastDateFormat.getInstance(preferredTimeStampFormat);\n+  private static final long serialVersionUID = 1L;\n+  private String preferredDateTimeFormat = TankConstants.DATE_FORMAT;\n+  private String preferredTimeStampFormat = ReportUtil.DATE_FORMAT;\n+\n+  private FastDateFormat timestampFormat;\n+\n+  private FastDateFormat dateTimeFotmat;\n+\n+  private Preferences preferences;\n+\n+  private int screenWidth = 1200;\n+  private int screenHeight = 600;\n+\n+  private TimeZone clientTimeZone = TimeZone.getTimeZone(\"PST\");\n+\n+  /**\n+   * Constructor\n+   */\n+  @PostConstruct\n+  public void init() {\n+    dateTimeFotmat = FastDateFormat.getInstance(TankConstants.DATE_FORMAT_WITH_TIMEZONE, clientTimeZone);\n+    timestampFormat = FastDateFormat.getInstance(preferredTimeStampFormat);\n+  }\n+\n+  /**\n+   * @return the preferences\n+   */\n+  public Preferences getPreferences() {\n+    return preferences;\n+  }\n+\n+  /**\n+   * @return the clientTimeZone\n+   */\n+  public TimeZone getClientTimeZone() {\n+    return clientTimeZone;\n+  }\n+\n+  /**\n+   * @param clientTimeZone the clientTimeZone to set\n+   */\n+  public void setClientTimeZone(TimeZone clientTimeZone) {\n+    this.clientTimeZone = clientTimeZone;\n+    dateTimeFotmat = FastDateFormat.getInstance(TankConstants.DATE_FORMAT, clientTimeZone);\n+  }\n+\n+  /**\n+   * @param preferences\n+   */\n+  public void observeLogin(@Observes(notifyObserver = Reception.IF_EXISTS) @Deleted Preferences preferences) {\n+    init(preferences.getCreator());\n+  }\n+\n+  /**\n+   * @param owner\n+   */\n+  public void init(String owner) {\n+    preferences = new PreferencesDao().getForOwner(owner);\n+    validatePrefs(owner);\n+  }\n+\n+  /**\n+   * @param width\n+   * @param height\n+   */\n+  public void setScreenSizes(String width, String height) {\n+    if (NumberUtils.isDigits(width)) {\n+      this.screenWidth = NumberUtils.toInt(width) - 20;\n     }\n-\n-    /**\n-     * @return the preferences\n-     */\n-    public Preferences getPreferences() {\n-        return preferences;\n+    if (NumberUtils.isDigits(height)) {\n+      this.screenHeight = NumberUtils.toInt(height) - 20;\n     }\n-\n-    /**\n-     * @return the clientTimeZone\n-     */\n-    public TimeZone getClientTimeZone() {\n-        return clientTimeZone;\n+  }\n+\n+  /**\n+   * @return the screenWidth\n+   */\n+  public int getScreenWidth() {\n+    return screenWidth;\n+  }\n+\n+  /**\n+   * @param screenWidth the screenWidth to set\n+   */\n+  public void setScreenWidth(int screenWidth) {\n+    this.screenWidth = screenWidth;\n+  }\n+\n+  /**\n+   * @return the screenHeight\n+   */\n+  public int getScreenHeight() {\n+    return screenHeight;\n+  }\n+\n+  /**\n+   * @param screenHeight the screenHeight to set\n+   */\n+  public void setScreenHeight(int screenHeight) {\n+    this.screenHeight = screenHeight;\n+  }\n+\n+  /**\n+   * @param owner\n+   * @return\n+   */\n+  private void validatePrefs(String owner) {\n+    if (preferences == null) {\n+      preferences = new Preferences();\n+      preferences.setCreator(owner);\n     }\n-\n-    /**\n-     * @param clientTimeZone\n-     *            the clientTimeZone to set\n-     */\n-    public void setClientTimeZone(TimeZone clientTimeZone) {\n-        this.clientTimeZone = clientTimeZone;\n-        dateTimeFotmat = FastDateFormat.getInstance(TankConstants.DATE_FORMAT, clientTimeZone);\n+    boolean needsSave = false;\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getProjectTableColumns(),\n+      DefaultTableColumnUtil.PROJECT_COL_PREFS);\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getDatafilesTableColumns(),\n+      DefaultTableColumnUtil.DATA_FILES_COL_PREFS);\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getJobsTableColumns(),\n+      DefaultTableColumnUtil.JOBS_COL_PREFS);\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptsTableColumns(),\n+      DefaultTableColumnUtil.SCRIPTS_COL_PREFS);\n+    needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptStepTableColumns(),\n+      DefaultTableColumnUtil.SCRIPT_STEPS_COL_PREFS);\n+    if (needsSave) {\n+      preferences = new PreferencesDao().saveOrUpdate(preferences);\n     }\n \n-    /**\n-     * \n-     * @param preferences\n-     */\n-    public void observeLogin(@Observes(notifyObserver = Reception.IF_EXISTS) @Deleted Preferences preferences) {\n-        init(preferences.getCreator());\n+  }\n+\n+  private boolean checkPrefs(String owner, List<ColumnPreferences> existingPrefs,\n+                             List<ColumnPreferences> defaultPreferences) {\n+    boolean ret = false;\n+    for (int i = 0; i < defaultPreferences.size(); i++) {\n+      ColumnPreferences p = defaultPreferences.get(i);\n+      if (!existingPrefs.contains(p)) {\n+        ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(),\n+          p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE\n+          : Hidability.NON_HIDABLE);\n+        pref.setCreator(owner);\n+        existingPrefs.add(i, pref);\n+        ret = true;\n+      }\n     }\n-\n-    /**\n-     *\n-     * @param owner\n-     */\n-    public void init(String owner) {\n-        preferences = new PreferencesDao().getForOwner(owner);\n-        validatePrefs(owner);\n+    return ret;\n+  }\n+\n+  /**\n+   * @inheritDoc\n+   */\n+  @Override\n+  public void prefsChanged() {\n+    if (preferences != null) {\n+      new PreferencesDao().saveOrUpdate(preferences);\n     }\n \n-    /**\n-     *\n-     * @param width\n-     * @param height\n-     */\n-    public void setScreenSizes(String width, String height) {\n-        if (NumberUtils.isDigits(width)) {\n-            this.screenWidth = NumberUtils.toInt(width) - 20;\n-        }\n-        if (NumberUtils.isDigits(height)) {\n-            this.screenHeight = NumberUtils.toInt(height) - 20;\n-        }\n-    }\n-\n-    /**\n-     * @return the screenWidth\n-     */\n-    public int getScreenWidth() {\n-        return screenWidth;\n+  }\n+\n+  /**\n+   * Format the date according to the user's preferences\n+   *\n+   * @param date\n+   * @return\n+   */\n+  public String formatDate(Date date) {\n+    String ret = null;\n+    if (date != null) {\n+      ret = dateTimeFotmat.format(date);\n     }\n-\n-    /**\n-     * @param screenWidth\n-     *            the screenWidth to set\n-     */\n-    public void setScreenWidth(int screenWidth) {\n-        this.screenWidth = screenWidth;\n-    }\n-\n-    /**\n-     * @return the screenHeight\n-     */\n-    public int getScreenHeight() {\n-        return screenHeight;\n-    }\n-\n-    /**\n-     * @param screenHeight\n-     *            the screenHeight to set\n-     */\n-    public void setScreenHeight(int screenHeight) {\n-        this.screenHeight = screenHeight;\n-    }\n-\n-    /**\n-     * @param owner\n-     * @return\n-     */\n-    private void validatePrefs(String owner) {\n-        if (preferences == null) {\n-            preferences = new Preferences();\n-            preferences.setCreator(owner);\n-        }\n-        boolean needsSave = false;\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getProjectTableColumns(),\n-                DefaultTableColumnUtil.PROJECT_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getDatafilesTableColumns(),\n-                DefaultTableColumnUtil.DATA_FILES_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getJobsTableColumns(),\n-                DefaultTableColumnUtil.JOBS_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptsTableColumns(),\n-                DefaultTableColumnUtil.SCRIPTS_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptStepTableColumns(),\n-                DefaultTableColumnUtil.SCRIPT_STEPS_COL_PREFS);\n-        if (needsSave) {\n-            preferences = new PreferencesDao().saveOrUpdate(preferences);\n+    return ret;\n+  }\n+\n+  public String getCollectionFilterString(Collection<? extends Object> c) {\n+    StringBuilder sb = new StringBuilder();\n+    if (c != null) {\n+      for (Object o : c) {\n+        if (sb.length() != 0) {\n+          sb.append(\", \");\n         }\n-\n-    }\n-\n-    private boolean checkPrefs(String owner, List<ColumnPreferences> existingPrefs,\n-            List<ColumnPreferences> defaultPreferences) {\n-        boolean ret = false;\n-        for (int i = 0; i < defaultPreferences.size(); i++) {\n-            ColumnPreferences p = defaultPreferences.get(i);\n-            if (!existingPrefs.contains(p)) {\n-                ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(),\n-                        p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE\n-                                : Hidability.NON_HIDABLE);\n-                pref.setCreator(owner);\n-                existingPrefs.add(i, pref);\n-                ret = true;\n-            }\n-        }\n-        return ret;\n-    }\n-\n-    /**\n-     * @inheritDoc\n-     */\n-    @Override\n-    public void prefsChanged() {\n-        if (preferences != null) {\n-            new PreferencesDao().saveOrUpdate(preferences);\n-        }\n-\n-    }\n-\n-    /**\n-     * Format the date according to the user's preferences\n-     * \n-     * @param date\n-     * @return\n-     */\n-    public String formatDate(Date date) {\n-        String ret = null;\n-        if (date != null) {\n-            ret = dateTimeFotmat.format(date);\n-        }\n-        return ret;\n-    }\n-\n-    public String getCollectionFilterString(Collection<? extends Object> c) {\n-        StringBuilder sb = new StringBuilder();\n-        if (c != null) {\n-            for (Object o : c) {\n-                if (sb.length() != 0) {\n-                    sb.append(\", \");\n-                }\n-                sb.append(o.toString());\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n-    /**\n-     * @return the timestampFormat\n-     */\n-    public FastDateFormat getTimestampFormat() {\n-        return timestampFormat;\n-    }\n-\n-    /**\n-     * @param timestampFormat\n-     *            the timestampFormat to set\n-     */\n-    public void setTimestampFormat(FastDateFormat timestampFormat) {\n-        this.timestampFormat = timestampFormat;\n-    }\n-\n-    /**\n-     * @return the dateTimeFotmat\n-     */\n-    public FastDateFormat getDateTimeFormat() {\n-        return dateTimeFotmat;\n-    }\n-\n-    /**\n-     * @param dateTimeFotmat\n-     *            the dateTimeFotmat to set\n-     */\n-    public void setDateTimeFotmat(FastDateFormat dateTimeFotmat) {\n-        this.dateTimeFotmat = dateTimeFotmat;\n+        sb.append(o.toString());\n+      }\n     }\n+    return sb.toString();\n+  }\n+\n+  /**\n+   * @return the timestampFormat\n+   */\n+  public FastDateFormat getTimestampFormat() {\n+    return timestampFormat;\n+  }\n+\n+  /**\n+   * @param timestampFormat the timestampFormat to set\n+   */\n+  public void setTimestampFormat(FastDateFormat timestampFormat) {\n+    this.timestampFormat = timestampFormat;\n+  }\n+\n+  /**\n+   * @return the dateTimeFotmat\n+   */\n+  public FastDateFormat getDateTimeFormat() {\n+    return dateTimeFotmat;\n+  }\n+\n+  /**\n+   * @param dateTimeFotmat the dateTimeFotmat to set\n+   */\n+  public void setDateTimeFotmat(FastDateFormat dateTimeFotmat) {\n+    this.dateTimeFotmat = dateTimeFotmat;\n+  }\n \n }\n",
            "diff_size": 334
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "231",
                    "column": "56",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/132/PreferencesBean.java\nindex 02952959368..a7f8ea33ea0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/132/PreferencesBean.java\n@@ -195,7 +195,7 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n                 ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(),\n                         p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE\n                                 : Hidability.NON_HIDABLE);\n-                pref.setCreator(owner);\n+pref.setCreator(owner);\n                 existingPrefs.add(i, pref);\n                 ret = true;\n             }\n@@ -271,4 +271,4 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n         this.dateTimeFotmat = dateTimeFotmat;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "190",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "193",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "206",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "243",
                    "column": "56",
                    "severity": "warning",
                    "message": "'?' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/132/PreferencesBean.java\nindex 02952959368..4024ce9d442 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/132/PreferencesBean.java\n@@ -16,21 +16,20 @@ package com.intuit.tank;\n  * #L%\n  */\n \n+\n+\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n import java.util.TimeZone;\n-\n import javax.annotation.PostConstruct;\n import javax.enterprise.context.SessionScoped;\n import javax.enterprise.event.Observes;\n import javax.enterprise.event.Reception;\n import javax.inject.Named;\n-\n import org.apache.commons.lang3.math.NumberUtils;\n import org.apache.commons.lang3.time.FastDateFormat;\n-\n import com.intuit.tank.admin.Deleted;\n import com.intuit.tank.dao.PreferencesDao;\n import com.intuit.tank.prefs.PreferencesChangedListener;\n@@ -55,30 +54,29 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     private static final long serialVersionUID = 1L;\n     private String preferredDateTimeFormat = TankConstants.DATE_FORMAT;\n     private String preferredTimeStampFormat = ReportUtil.DATE_FORMAT;\n-\n     private FastDateFormat timestampFormat;\n-\n     private FastDateFormat dateTimeFotmat;\n-\n     private Preferences preferences;\n-\n     private int screenWidth = 1200;\n     private int screenHeight = 600;\n-\n     private TimeZone clientTimeZone = TimeZone.getTimeZone(\"PST\");\n \n     /**\n      * Constructor\n      */\n+\n     @PostConstruct\n     public void init() {\n-        dateTimeFotmat = FastDateFormat.getInstance(TankConstants.DATE_FORMAT_WITH_TIMEZONE, clientTimeZone);\n+        dateTimeFotmat = FastDateFormat.getInstance(TankConstants.DATE_FORMAT_WITH_TIMEZONE,\n+            clientTimeZone);\n         timestampFormat = FastDateFormat.getInstance(preferredTimeStampFormat);\n     }\n \n     /**\n      * @return the preferences\n      */\n+\n+\n     public Preferences getPreferences() {\n         return preferences;\n     }\n@@ -86,6 +84,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @return the clientTimeZone\n      */\n+\n+\n     public TimeZone getClientTimeZone() {\n         return clientTimeZone;\n     }\n@@ -94,6 +94,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param clientTimeZone\n      *            the clientTimeZone to set\n      */\n+\n+\n     public void setClientTimeZone(TimeZone clientTimeZone) {\n         this.clientTimeZone = clientTimeZone;\n         dateTimeFotmat = FastDateFormat.getInstance(TankConstants.DATE_FORMAT, clientTimeZone);\n@@ -103,6 +105,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * \n      * @param preferences\n      */\n+\n+\n     public void observeLogin(@Observes(notifyObserver = Reception.IF_EXISTS) @Deleted Preferences preferences) {\n         init(preferences.getCreator());\n     }\n@@ -111,6 +115,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      *\n      * @param owner\n      */\n+\n+\n     public void init(String owner) {\n         preferences = new PreferencesDao().getForOwner(owner);\n         validatePrefs(owner);\n@@ -121,6 +127,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param width\n      * @param height\n      */\n+\n+\n     public void setScreenSizes(String width, String height) {\n         if (NumberUtils.isDigits(width)) {\n             this.screenWidth = NumberUtils.toInt(width) - 20;\n@@ -133,6 +141,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @return the screenWidth\n      */\n+\n+\n     public int getScreenWidth() {\n         return screenWidth;\n     }\n@@ -141,6 +151,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param screenWidth\n      *            the screenWidth to set\n      */\n+\n+\n     public void setScreenWidth(int screenWidth) {\n         this.screenWidth = screenWidth;\n     }\n@@ -148,6 +160,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @return the screenHeight\n      */\n+\n+\n     public int getScreenHeight() {\n         return screenHeight;\n     }\n@@ -156,6 +170,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param screenHeight\n      *            the screenHeight to set\n      */\n+\n+\n     public void setScreenHeight(int screenHeight) {\n         this.screenHeight = screenHeight;\n     }\n@@ -164,37 +180,30 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param owner\n      * @return\n      */\n+\n     private void validatePrefs(String owner) {\n         if (preferences == null) {\n             preferences = new Preferences();\n             preferences.setCreator(owner);\n         }\n         boolean needsSave = false;\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getProjectTableColumns(),\n-                DefaultTableColumnUtil.PROJECT_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getDatafilesTableColumns(),\n-                DefaultTableColumnUtil.DATA_FILES_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getJobsTableColumns(),\n-                DefaultTableColumnUtil.JOBS_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptsTableColumns(),\n-                DefaultTableColumnUtil.SCRIPTS_COL_PREFS);\n-        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptStepTableColumns(),\n-                DefaultTableColumnUtil.SCRIPT_STEPS_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getProjectTableColumns(), DefaultTableColumnUtil.PROJECT_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getDatafilesTableColumns(), DefaultTableColumnUtil.DATA_FILES_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getJobsTableColumns(), DefaultTableColumnUtil.JOBS_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptsTableColumns(), DefaultTableColumnUtil.SCRIPTS_COL_PREFS);\n+        needsSave |= checkPrefs(preferences.getCreator(), preferences.getScriptStepTableColumns(), DefaultTableColumnUtil.SCRIPT_STEPS_COL_PREFS);\n         if (needsSave) {\n             preferences = new PreferencesDao().saveOrUpdate(preferences);\n         }\n-\n     }\n \n-    private boolean checkPrefs(String owner, List<ColumnPreferences> existingPrefs,\n-            List<ColumnPreferences> defaultPreferences) {\n+    private boolean checkPrefs(String owner,\n+        List<ColumnPreferences> existingPrefs, List<ColumnPreferences> defaultPreferences) {\n         boolean ret = false;\n         for (int i = 0; i < defaultPreferences.size(); i++) {\n             ColumnPreferences p = defaultPreferences.get(i);\n             if (!existingPrefs.contains(p)) {\n-                ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(),\n-                        p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE\n-                                : Hidability.NON_HIDABLE);\n+                ColumnPreferences pref = new ColumnPreferences(p.getColName(), p.getDisplayName(), p.getSize(), p.isVisible() ? Visibility.VISIBLE : Visibility.HIDDEN, p.isHideable() ? Hidability.HIDABLE : Hidability.NON_HIDABLE);\n                 pref.setCreator(owner);\n                 existingPrefs.add(i, pref);\n                 ret = true;\n@@ -206,12 +215,12 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @inheritDoc\n      */\n+\n     @Override\n     public void prefsChanged() {\n         if (preferences != null) {\n             new PreferencesDao().saveOrUpdate(preferences);\n         }\n-\n     }\n \n     /**\n@@ -220,6 +229,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param date\n      * @return\n      */\n+\n+\n     public String formatDate(Date date) {\n         String ret = null;\n         if (date != null) {\n@@ -228,6 +239,7 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n         return ret;\n     }\n \n+\n     public String getCollectionFilterString(Collection<? extends Object> c) {\n         StringBuilder sb = new StringBuilder();\n         if (c != null) {\n@@ -244,6 +256,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @return the timestampFormat\n      */\n+\n+\n     public FastDateFormat getTimestampFormat() {\n         return timestampFormat;\n     }\n@@ -252,6 +266,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param timestampFormat\n      *            the timestampFormat to set\n      */\n+\n+\n     public void setTimestampFormat(FastDateFormat timestampFormat) {\n         this.timestampFormat = timestampFormat;\n     }\n@@ -259,6 +275,8 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n     /**\n      * @return the dateTimeFotmat\n      */\n+\n+\n     public FastDateFormat getDateTimeFormat() {\n         return dateTimeFotmat;\n     }\n@@ -267,8 +285,10 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n      * @param dateTimeFotmat\n      *            the dateTimeFotmat to set\n      */\n+\n+\n     public void setDateTimeFotmat(FastDateFormat dateTimeFotmat) {\n         this.dateTimeFotmat = dateTimeFotmat;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 64
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/132/PreferencesBean.java\nindex 02952959368..cbb974dfd32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/132/PreferencesBean.java\n@@ -228,7 +228,7 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n         return ret;\n     }\n \n-    public String getCollectionFilterString(Collection<? extends Object> c) {\n+    public String getCollectionFilterString(Collection< ? extends Object> c) {\n         StringBuilder sb = new StringBuilder();\n         if (c != null) {\n             for (Object o : c) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/132/PreferencesBean.java\nindex 02952959368..cbb974dfd32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/132/PreferencesBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/132/PreferencesBean.java\n@@ -228,7 +228,7 @@ public class PreferencesBean implements Serializable, PreferencesChangedListener\n         return ret;\n     }\n \n-    public String getCollectionFilterString(Collection<? extends Object> c) {\n+    public String getCollectionFilterString(Collection< ? extends Object> c) {\n         StringBuilder sb = new StringBuilder();\n         if (c != null) {\n             for (Object o : c) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}