{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "75",
    "information": {
        "errors": [
            {
                "line": "105",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n    // we did not remove old InstanceCacheManager now\n\t// microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n\t// must not throw exception\n    String microserviceVersionFactoryClass = serviceRegistryConfig.getMicroserviceVersionFactory();\n    if (microserviceVersionFactoryClass == null) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/75/AbstractServiceRegistry.java\nindex 27e4d4dd77e..5113ad377d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler/75/AbstractServiceRegistry.java\n@@ -102,8 +102,8 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n     appManager = new AppManager(eventBus);\n \n     // we did not remove old InstanceCacheManager now\n-\t// microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n-\t// must not throw exception\n+    // microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n+ // must not throw exception\n     String microserviceVersionFactoryClass = serviceRegistryConfig.getMicroserviceVersionFactory();\n     if (microserviceVersionFactoryClass == null) {\n       return;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/75/AbstractServiceRegistry.java\nindex 27e4d4dd77e..3c781c13337 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/75/AbstractServiceRegistry.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package io.servicecomb.serviceregistry.registry;\n \n import java.util.HashMap;\n@@ -71,7 +72,7 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n   protected ServiceCenterTask serviceCenterTask;\n \n   public AbstractServiceRegistry(EventBus eventBus, ServiceRegistryConfig serviceRegistryConfig,\n-      MicroserviceDefinition microserviceDefinition) {\n+                                 MicroserviceDefinition microserviceDefinition) {\n     this.eventBus = eventBus;\n     this.serviceRegistryConfig = serviceRegistryConfig;\n     this.microserviceDefinition = microserviceDefinition;\n@@ -102,8 +103,8 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n     appManager = new AppManager(eventBus);\n \n     // we did not remove old InstanceCacheManager now\n-\t// microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n-\t// must not throw exception\n+    // microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n+    // must not throw exception\n     String microserviceVersionFactoryClass = serviceRegistryConfig.getMicroserviceVersionFactory();\n     if (microserviceVersionFactoryClass == null) {\n       return;\n@@ -201,7 +202,7 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n   }\n \n   public List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n-      String versionRule) {\n+                                                        String versionRule) {\n     List<MicroserviceInstance> instances = srClient.findServiceInstance(microservice.getServiceId(),\n         appId,\n         serviceName,\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "107",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "177",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "183",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "185",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "189",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 168).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "194",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 134).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/75/AbstractServiceRegistry.java\nindex 27e4d4dd77e..667cbc1bad8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/75/AbstractServiceRegistry.java\n@@ -20,12 +20,9 @@ import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.google.common.eventbus.EventBus;\n-\n import io.servicecomb.serviceregistry.Features;\n import io.servicecomb.serviceregistry.ServiceRegistry;\n import io.servicecomb.serviceregistry.api.Const;\n@@ -70,8 +67,7 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n \n   protected ServiceCenterTask serviceCenterTask;\n \n-  public AbstractServiceRegistry(EventBus eventBus, ServiceRegistryConfig serviceRegistryConfig,\n-      MicroserviceDefinition microserviceDefinition) {\n+  public AbstractServiceRegistry(EventBus eventBus, ServiceRegistryConfig serviceRegistryConfig, MicroserviceDefinition microserviceDefinition) {\n     this.eventBus = eventBus;\n     this.serviceRegistryConfig = serviceRegistryConfig;\n     this.microserviceDefinition = microserviceDefinition;\n@@ -87,14 +83,12 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n     }\n \n     initCacheManager();\n-\n     ipPortManager = new IpPortManager(serviceRegistryConfig, instanceCacheManager);\n     if (srClient == null) {\n       srClient = createServiceRegistryClient();\n     }\n \n     createServiceCenterTask();\n-\n     eventBus.register(this);\n   }\n \n@@ -102,15 +96,15 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n     appManager = new AppManager(eventBus);\n \n     // we did not remove old InstanceCacheManager now\n-\t// microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n-\t// must not throw exception\n+  // microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n+  // must not throw exception\n+\n     String microserviceVersionFactoryClass = serviceRegistryConfig.getMicroserviceVersionFactory();\n     if (microserviceVersionFactoryClass == null) {\n       return;\n     }\n \n-    MicroserviceVersionFactory microserviceVersionFactory =\n-        (MicroserviceVersionFactory) Class.forName(microserviceVersionFactoryClass).newInstance();\n+    MicroserviceVersionFactory microserviceVersionFactory = (MicroserviceVersionFactory) Class.forName(microserviceVersionFactoryClass).newInstance();\n     appManager.setMicroserviceVersionFactory(microserviceVersionFactory);\n     LOGGER.info(\"microserviceVersionFactory is {}.\", microserviceVersionFactoryClass);\n   }\n@@ -174,61 +168,55 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n       if (path.getProperty() == null) {\n         path.setProperty(new HashMap<>());\n       }\n+\n       path.getProperty().put(Const.PATH_CHECKSESSION, \"false\");\n     }\n   }\n \n   private void createServiceCenterTask() {\n-    MicroserviceServiceCenterTask task =\n-        new MicroserviceServiceCenterTask(eventBus, serviceRegistryConfig, srClient, microservice);\n+    MicroserviceServiceCenterTask task = new MicroserviceServiceCenterTask(eventBus, serviceRegistryConfig, srClient, microservice);\n     serviceCenterTask = new ServiceCenterTask(eventBus, serviceRegistryConfig.getHeartbeatInterval(), task);\n   }\n \n   public boolean unregisterInstance() {\n     MicroserviceInstance microserviceInstance = microservice.getInstance();\n-    boolean result = srClient.unregisterMicroserviceInstance(microserviceInstance.getServiceId(),\n-        microserviceInstance.getInstanceId());\n+    boolean result = srClient.unregisterMicroserviceInstance(microserviceInstance.getServiceId(), microserviceInstance.getInstanceId());\n     if (!result) {\n-      LOGGER.error(\"Unregister microservice instance failed. microserviceId={} instanceId={}\",\n-          microserviceInstance.getServiceId(),\n-          microserviceInstance.getInstanceId());\n+      LOGGER.error(\"Unregister microservice instance failed. microserviceId={} instanceId={}\", microserviceInstance.getServiceId(), microserviceInstance.getInstanceId());\n       return false;\n     }\n-    LOGGER.info(\"Unregister microservice instance success. microserviceId={} instanceId={}\",\n-        microserviceInstance.getServiceId(),\n-        microserviceInstance.getInstanceId());\n+\n+    LOGGER.info(\"Unregister microservice instance success. microserviceId={} instanceId={}\", microserviceInstance.getServiceId(), microserviceInstance.getInstanceId());\n     return true;\n   }\n \n-  public List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n-      String versionRule) {\n-    List<MicroserviceInstance> instances = srClient.findServiceInstance(microservice.getServiceId(),\n-        appId,\n-        serviceName,\n-        versionRule);\n+  public List<MicroserviceInstance> findServiceInstance(String appId, String serviceName, String versionRule) {\n+    List<MicroserviceInstance> instances = srClient.findServiceInstance(microservice.getServiceId(), appId, serviceName, versionRule);\n     if (instances == null) {\n-      LOGGER.error(\"find empty instances from service center. service={}/{}/{}\", appId, serviceName, versionRule);\n+      LOGGER.error(\"find empty instances from service center. service={}/{}/{}\",\n+appId,\n+serviceName,\n+versionRule);\n       return null;\n     }\n \n     LOGGER.info(\"find instances[{}] from service center success. service={}/{}/{}\",\n-        instances.size(),\n-        appId,\n-        serviceName,\n-        versionRule);\n+instances.size(),\n+appId,\n+serviceName,\n+versionRule);\n     for (MicroserviceInstance instance : instances) {\n       LOGGER.info(\"service id={}, instance id={}, endpoints={}\",\n-          instance.getServiceId(),\n-          instance.getInstanceId(),\n-          instance.getEndpoints());\n+instance.getServiceId(),\n+instance.getInstanceId(),\n+instance.getEndpoints());\n     }\n     return instances;\n   }\n \n   @Override\n   public boolean updateMicroserviceProperties(Map<String, String> properties) {\n-    boolean success = srClient.updateMicroserviceProperties(microservice.getServiceId(),\n-        properties);\n+    boolean success = srClient.updateMicroserviceProperties(microservice.getServiceId(), properties);\n     if (success) {\n       microservice.setProperties(properties);\n     }\n@@ -238,8 +226,8 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n   public boolean updateInstanceProperties(Map<String, String> instanceProperties) {\n     MicroserviceInstance microserviceInstance = microservice.getInstance();\n     boolean success = srClient.updateInstanceProperties(microserviceInstance.getServiceId(),\n-        microserviceInstance.getInstanceId(),\n-        instanceProperties);\n+microserviceInstance.getInstanceId(),\n+instanceProperties);\n     if (success) {\n       microserviceInstance.setProperties(instanceProperties);\n     }\n@@ -262,4 +250,4 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n     eventBus.post(new ShutdownEvent());\n     unregisterInstance();\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 45
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/75/AbstractServiceRegistry.java\nindex 27e4d4dd77e..5113ad377d0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_random/75/AbstractServiceRegistry.java\n@@ -102,8 +102,8 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n     appManager = new AppManager(eventBus);\n \n     // we did not remove old InstanceCacheManager now\n-\t// microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n-\t// must not throw exception\n+    // microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n+ // must not throw exception\n     String microserviceVersionFactoryClass = serviceRegistryConfig.getMicroserviceVersionFactory();\n     if (microserviceVersionFactoryClass == null) {\n       return;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/75/AbstractServiceRegistry.java\nindex 27e4d4dd77e..d989e1dda93 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/75/AbstractServiceRegistry.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/75/AbstractServiceRegistry.java\n@@ -102,8 +102,8 @@ public abstract class AbstractServiceRegistry implements ServiceRegistry {\n     appManager = new AppManager(eventBus);\n \n     // we did not remove old InstanceCacheManager now\n-\t// microserviceVersionFactoryClass is null, means use old InstanceCacheManager\n-\t// must not throw exception\n+    // microserviceVersionFactoryClass is null, means use old InstanceCacheManager // must not throw exception\n+    // must not throw exception\n     String microserviceVersionFactoryClass = serviceRegistryConfig.getMicroserviceVersionFactory();\n     if (microserviceVersionFactoryClass == null) {\n       return;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}