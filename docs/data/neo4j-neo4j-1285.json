{
    "project_name": "neo4j-neo4j",
    "error_id": "1285",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "52",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "86",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "97",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "140",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "21",
                    "severity": "error",
                    "message": "'}' at column 21 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "119",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "197",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "210",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "77",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1285/GenericNativeIndexReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1285/GenericNativeIndexReader.java\nindex 6f381e6bb11..ec0c2a3893b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1285/GenericNativeIndexReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1285/GenericNativeIndexReader.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.util.List;\n@@ -43,66 +44,64 @@ import static org.neo4j.kernel.impl.index.schema.NativeIndexKey.Inclusion.HIGH;\n import static org.neo4j.kernel.impl.index.schema.NativeIndexKey.Inclusion.LOW;\n import static org.neo4j.kernel.impl.index.schema.NativeIndexKey.Inclusion.NEUTRAL;\n \n-class GenericNativeIndexReader extends NativeIndexReader<GenericKey,NativeIndexValue>\n+class GenericNativeIndexReader extends NativeIndexReader<GenericKey, NativeIndexValue>\n {\n     private final IndexSpecificSpaceFillingCurveSettings spaceFillingCurveSettings;\n     private final SpaceFillingCurveConfiguration configuration;\n \n-    GenericNativeIndexReader( GBPTree<GenericKey,NativeIndexValue> tree, IndexLayout<GenericKey,NativeIndexValue> layout,\n-            IndexDescriptor descriptor, IndexSpecificSpaceFillingCurveSettings spaceFillingCurveSettings,\n-            SpaceFillingCurveConfiguration configuration )\n+    GenericNativeIndexReader(GBPTree<GenericKey, NativeIndexValue> tree, IndexLayout<GenericKey, NativeIndexValue> layout,\n+                             IndexDescriptor descriptor, IndexSpecificSpaceFillingCurveSettings spaceFillingCurveSettings,\n+                             SpaceFillingCurveConfiguration configuration)\n     {\n-        super( tree, layout, descriptor );\n+        super(tree, layout, descriptor);\n         this.spaceFillingCurveSettings = spaceFillingCurveSettings;\n         this.configuration = configuration;\n     }\n \n     @Override\n-    void validateQuery( IndexQueryConstraints constraints, IndexQuery[] predicates )\n+    void validateQuery(IndexQueryConstraints constraints, IndexQuery[] predicates)\n     {\n-        QueryValidator.validateOrder( GenericNativeIndexProvider.CAPABILITY, constraints.order(), predicates );\n-        QueryValidator.validateCompositeQuery( predicates );\n+        QueryValidator.validateOrder(GenericNativeIndexProvider.CAPABILITY, constraints.order(), predicates);\n+        QueryValidator.validateCompositeQuery(predicates);\n     }\n \n     @Override\n-    public void query( QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n-            IndexQuery... query )\n+    public void query(QueryContext context, IndexProgressor.EntityValueClient client, IndexQueryConstraints constraints,\n+                      IndexQuery... query)\n     {\n-        IndexQuery.GeometryRangePredicate geometryRangePredicate = getGeometryRangePredicateIfAny( query );\n-        if ( geometryRangePredicate != null )\n+        IndexQuery.GeometryRangePredicate geometryRangePredicate = getGeometryRangePredicateIfAny(query);\n+        if (geometryRangePredicate != null)\n         {\n-            validateQuery( constraints, query );\n+            validateQuery(constraints, query);\n             try\n             {\n                 // If there's a GeometryRangeQuery among the predicates then this query changes from a straight-forward: build from/to and seek...\n                 // into a query that is split into multiple sub-queries. Predicates both before and after will have to be accompanied each sub-query.\n-                BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor( client, descriptor.schema().getPropertyIds() );\n-                client.initialize( descriptor, multiProgressor, query, constraints, false );\n+                BridgingIndexProgressor multiProgressor = new BridgingIndexProgressor(client, descriptor.schema().getPropertyIds());\n+                client.initialize(descriptor, multiProgressor, query, constraints, false);\n                 double[] from = geometryRangePredicate.from() == null ? null : geometryRangePredicate.from().coordinate();\n                 double[] to = geometryRangePredicate.to() == null ? null : geometryRangePredicate.to().coordinate();\n                 CoordinateReferenceSystem crs = geometryRangePredicate.crs();\n-                SpaceFillingCurve curve = spaceFillingCurveSettings.forCrs( crs );\n-                List<SpaceFillingCurve.LongRange> ranges = curve.getTilesIntersectingEnvelope( from, to, configuration );\n-                for ( SpaceFillingCurve.LongRange range : ranges )\n+                SpaceFillingCurve curve = spaceFillingCurveSettings.forCrs(crs);\n+                List<SpaceFillingCurve.LongRange> ranges = curve.getTilesIntersectingEnvelope(from, to, configuration);\n+                for (SpaceFillingCurve.LongRange range : ranges)\n                 {\n                     // Here's a sub-query that we'll have to do for this geometry range. Build this query from all predicates\n                     // and when getting to the geometry range predicate that sparked these sub-query chenanigans, swap in this sub-query in its place.\n                     GenericKey treeKeyFrom = layout.newKey();\n                     GenericKey treeKeyTo = layout.newKey();\n-                    initializeFromToKeys( treeKeyFrom, treeKeyTo );\n-                    boolean needFiltering = initializeRangeForGeometrySubQuery( treeKeyFrom, treeKeyTo, query, crs, range );\n-                    startSeekForInitializedRange( multiProgressor, treeKeyFrom, treeKeyTo, query, constraints, needFiltering, context.cursorTracer() );\n+                    initializeFromToKeys(treeKeyFrom, treeKeyTo);\n+                    boolean needFiltering = initializeRangeForGeometrySubQuery(treeKeyFrom, treeKeyTo, query, crs, range);\n+                    startSeekForInitializedRange(multiProgressor, treeKeyFrom, treeKeyTo, query, constraints, needFiltering, context.cursorTracer());\n                 }\n-            }\n-            catch ( IllegalArgumentException e )\n+            } catch (IllegalArgumentException e)\n             {\n                 // Invalid query ranges will cause this state (eg. min>max)\n-                client.initialize( descriptor, IndexProgressor.EMPTY, query, constraints, false );\n+                client.initialize(descriptor, IndexProgressor.EMPTY, query, constraints, false);\n             }\n-        }\n-        else\n+        } else\n         {\n-            super.query( context, client, constraints, query );\n+            super.query(context, client, constraints, query);\n         }\n     }\n \n@@ -116,116 +115,113 @@ class GenericNativeIndexReader extends NativeIndexReader<GenericKey,NativeIndexV\n      * by the caller.\n      *\n      * @param treeKeyFrom the \"from\" key to construct from the query.\n-     * @param treeKeyTo the \"to\" key to construct from the query.\n-     * @param query the query to construct keys from to later send to {@link GBPTree} when reading.\n-     * @param crs {@link CoordinateReferenceSystem} for the specific {@code range}, if range is specified too.\n-     * @param range sub-range of a larger {@link IndexQuery.GeometryRangePredicate} to use instead of {@link IndexQuery.GeometryRangePredicate}\n-     * in the query.\n+     * @param treeKeyTo   the \"to\" key to construct from the query.\n+     * @param query       the query to construct keys from to later send to {@link GBPTree} when reading.\n+     * @param crs         {@link CoordinateReferenceSystem} for the specific {@code range}, if range is specified too.\n+     * @param range       sub-range of a larger {@link IndexQuery.GeometryRangePredicate} to use instead of {@link IndexQuery.GeometryRangePredicate}\n+     *                    in the query.\n      * @return {@code true} if filtering is needed for the results from the reader, otherwise {@code false}.\n      */\n-    private boolean initializeRangeForGeometrySubQuery( GenericKey treeKeyFrom, GenericKey treeKeyTo,\n-            IndexQuery[] query, CoordinateReferenceSystem crs, SpaceFillingCurve.LongRange range )\n+    private boolean initializeRangeForGeometrySubQuery(GenericKey treeKeyFrom, GenericKey treeKeyTo,\n+                                                       IndexQuery[] query, CoordinateReferenceSystem crs, SpaceFillingCurve.LongRange range)\n     {\n         boolean needsFiltering = false;\n-        for ( int i = 0; i < query.length; i++ )\n+        for (int i = 0; i < query.length; i++)\n         {\n             IndexQuery predicate = query[i];\n-            switch ( predicate.type() )\n+            switch (predicate.type())\n             {\n-            case exists:\n-                treeKeyFrom.initValueAsLowest( i, ValueGroup.UNKNOWN );\n-                treeKeyTo.initValueAsHighest( i, ValueGroup.UNKNOWN );\n-                break;\n-            case exact:\n-                ExactPredicate exactPredicate = (ExactPredicate) predicate;\n-                treeKeyFrom.initFromValue( i, exactPredicate.value(), NEUTRAL );\n-                treeKeyTo.initFromValue( i, exactPredicate.value(), NEUTRAL );\n-                break;\n-            case range:\n-                if ( isGeometryRangeQuery( predicate ) )\n-                {\n-                    // Use the supplied SpaceFillingCurve range instead of the GeometryRangePredicate because at the time of calling this method\n-                    // the original geometry range have been split up into multiple sub-ranges and this invocation is for one of those sub-ranges.\n-                    // We can not take query inclusion / exclusion into consideration here because then we risk missing border values. Always use\n-                    // Inclusion.LOW / HIGH respectively and filter out points later on.\n-                    treeKeyFrom.stateSlot( i ).writePointDerived( crs, range.min, LOW );\n-                    treeKeyTo.stateSlot( i ).writePointDerived( crs, range.max + 1, HIGH );\n+                case exists:\n+                    treeKeyFrom.initValueAsLowest(i, ValueGroup.UNKNOWN);\n+                    treeKeyTo.initValueAsHighest(i, ValueGroup.UNKNOWN);\n+                    break;\n+                case exact:\n+                    ExactPredicate exactPredicate = (ExactPredicate) predicate;\n+                    treeKeyFrom.initFromValue(i, exactPredicate.value(), NEUTRAL);\n+                    treeKeyTo.initFromValue(i, exactPredicate.value(), NEUTRAL);\n+                    break;\n+                case range:\n+                    if (isGeometryRangeQuery(predicate))\n+                    {\n+                        // Use the supplied SpaceFillingCurve range instead of the GeometryRangePredicate because at the time of calling this method\n+                        // the original geometry range have been split up into multiple sub-ranges and this invocation is for one of those sub-ranges.\n+                        // We can not take query inclusion / exclusion into consideration here because then we risk missing border values. Always use\n+                        // Inclusion.LOW / HIGH respectively and filter out points later on.\n+                        treeKeyFrom.stateSlot(i).writePointDerived(crs, range.min, LOW);\n+                        treeKeyTo.stateSlot(i).writePointDerived(crs, range.max + 1, HIGH);\n+                        needsFiltering = true;\n+                    } else\n+                    {\n+                        RangePredicate<?> rangePredicate = (RangePredicate<?>) predicate;\n+                        initFromForRange(i, rangePredicate, treeKeyFrom);\n+                        initToForRange(i, rangePredicate, treeKeyTo);\n+                    }\n+                    break;\n+                case stringPrefix:\n+                    StringPrefixPredicate prefixPredicate = (StringPrefixPredicate) predicate;\n+                    treeKeyFrom.stateSlot(i).initAsPrefixLow(prefixPredicate.prefix());\n+                    treeKeyTo.stateSlot(i).initAsPrefixHigh(prefixPredicate.prefix());\n+                    break;\n+                case stringSuffix:\n+                case stringContains:\n+                    treeKeyFrom.initValueAsLowest(i, ValueGroup.TEXT);\n+                    treeKeyTo.initValueAsHighest(i, ValueGroup.TEXT);\n                     needsFiltering = true;\n-                }\n-                else\n-                {\n-                    RangePredicate<?> rangePredicate = (RangePredicate<?>) predicate;\n-                    initFromForRange( i, rangePredicate, treeKeyFrom );\n-                    initToForRange( i, rangePredicate, treeKeyTo );\n-                }\n-                break;\n-            case stringPrefix:\n-                StringPrefixPredicate prefixPredicate = (StringPrefixPredicate) predicate;\n-                treeKeyFrom.stateSlot( i ).initAsPrefixLow( prefixPredicate.prefix() );\n-                treeKeyTo.stateSlot( i ).initAsPrefixHigh( prefixPredicate.prefix() );\n-                break;\n-            case stringSuffix:\n-            case stringContains:\n-                treeKeyFrom.initValueAsLowest( i, ValueGroup.TEXT );\n-                treeKeyTo.initValueAsHighest( i, ValueGroup.TEXT );\n-                needsFiltering = true;\n-                break;\n-            default:\n-                throw new IllegalArgumentException( \"IndexQuery of type \" + predicate.type() + \" is not supported.\" );\n+                    break;\n+                default:\n+                    throw new IllegalArgumentException(\"IndexQuery of type \" + predicate.type() + \" is not supported.\");\n             }\n         }\n         return needsFiltering;\n     }\n \n     @Override\n-    boolean initializeRangeForQuery( GenericKey treeKeyFrom, GenericKey treeKeyTo, IndexQuery[] query )\n+    boolean initializeRangeForQuery(GenericKey treeKeyFrom, GenericKey treeKeyTo, IndexQuery[] query)\n     {\n-        return initializeRangeForGeometrySubQuery( treeKeyFrom, treeKeyTo, query, null, null );\n+        return initializeRangeForGeometrySubQuery(treeKeyFrom, treeKeyTo, query, null, null);\n     }\n \n-    private static void initFromForRange( int stateSlot, RangePredicate<?> rangePredicate, GenericKey treeKeyFrom )\n+    private static void initFromForRange(int stateSlot, RangePredicate<?> rangePredicate, GenericKey treeKeyFrom)\n     {\n         Value fromValue = rangePredicate.fromValue();\n-        if ( fromValue == Values.NO_VALUE )\n+        if (fromValue == Values.NO_VALUE)\n         {\n-            treeKeyFrom.initValueAsLowest( stateSlot, rangePredicate.valueGroup() );\n-        }\n-        else\n+            treeKeyFrom.initValueAsLowest(stateSlot, rangePredicate.valueGroup());\n+        } else\n         {\n-            treeKeyFrom.initFromValue( stateSlot, fromValue, fromInclusion( rangePredicate ) );\n-            treeKeyFrom.setCompareId( true );\n+            treeKeyFrom.initFromValue(stateSlot, fromValue, fromInclusion(rangePredicate));\n+            treeKeyFrom.setCompareId(true);\n         }\n     }\n \n-    private static void initToForRange( int stateSlot, RangePredicate<?> rangePredicate, GenericKey treeKeyTo )\n+    private static void initToForRange(int stateSlot, RangePredicate<?> rangePredicate, GenericKey treeKeyTo)\n     {\n         Value toValue = rangePredicate.toValue();\n-        if ( toValue == Values.NO_VALUE )\n+        if (toValue == Values.NO_VALUE)\n         {\n-            treeKeyTo.initValueAsHighest( stateSlot, rangePredicate.valueGroup() );\n-        }\n-        else\n+            treeKeyTo.initValueAsHighest(stateSlot, rangePredicate.valueGroup());\n+        } else\n         {\n-            treeKeyTo.initFromValue( stateSlot, toValue, toInclusion( rangePredicate ) );\n-            treeKeyTo.setCompareId( true );\n+            treeKeyTo.initFromValue(stateSlot, toValue, toInclusion(rangePredicate));\n+            treeKeyTo.setCompareId(true);\n         }\n     }\n \n-    private static NativeIndexKey.Inclusion fromInclusion( RangePredicate<?> rangePredicate )\n+    private static NativeIndexKey.Inclusion fromInclusion(RangePredicate<?> rangePredicate)\n     {\n         return rangePredicate.fromInclusive() ? LOW : HIGH;\n     }\n \n-    private static NativeIndexKey.Inclusion toInclusion( RangePredicate<?> rangePredicate )\n+    private static NativeIndexKey.Inclusion toInclusion(RangePredicate<?> rangePredicate)\n     {\n         return rangePredicate.toInclusive() ? HIGH : LOW;\n     }\n \n-    private IndexQuery.GeometryRangePredicate getGeometryRangePredicateIfAny( IndexQuery[] predicates )\n+    private IndexQuery.GeometryRangePredicate getGeometryRangePredicateIfAny(IndexQuery[] predicates)\n     {\n-        for ( IndexQuery predicate : predicates )\n+        for (IndexQuery predicate : predicates)\n         {\n-            if ( isGeometryRangeQuery( predicate ) )\n+            if (isGeometryRangeQuery(predicate))\n             {\n                 return (IndexQuery.GeometryRangePredicate) predicate;\n             }\n@@ -233,7 +229,7 @@ class GenericNativeIndexReader extends NativeIndexReader<GenericKey,NativeIndexV\n         return null;\n     }\n \n-    private boolean isGeometryRangeQuery( IndexQuery predicate )\n+    private boolean isGeometryRangeQuery(IndexQuery predicate)\n     {\n         return predicate instanceof IndexQuery.GeometryRangePredicate;\n     }\n",
            "diff_size": 115
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}