{
    "project_name": "IQSS-dataverse",
    "error_id": "51",
    "information": {
        "errors": [
            {
                "line": "32",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    \n    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n\tprotected EntityManager em;\n    \n    @EJB\n    ActionLogServiceBean actionLogSvc;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/51/IpGroupsServiceBean.java\nindex c03cf26e11e..8079f66c30b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler/51/IpGroupsServiceBean.java\n@@ -29,7 +29,7 @@ public class IpGroupsServiceBean {\n     private static final Logger logger = Logger.getLogger(IpGroupsServiceBean.class.getName());\n     \n     @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-\tprotected EntityManager em;\n+protected EntityManager em;\n     \n     @EJB\n     ActionLogServiceBean actionLogSvc;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/51/IpGroupsServiceBean.java\nindex c03cf26e11e..67ef5068951 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/51/IpGroupsServiceBean.java\n@@ -19,126 +19,128 @@ import javax.persistence.PersistenceContext;\n \n /**\n  * Provides CRUD tools to efficiently manage IP groups in a Java EE container.\n- * \n+ *\n  * @author michael\n  */\n @Named\n @Stateless\n public class IpGroupsServiceBean {\n-    \n-    private static final Logger logger = Logger.getLogger(IpGroupsServiceBean.class.getName());\n-    \n-    @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-\tprotected EntityManager em;\n-    \n-    @EJB\n-    ActionLogServiceBean actionLogSvc;\n-\t\n-    @EJB\n-    RoleAssigneeServiceBean roleAssigneeSvc;\n-    \n-    /**\n-     * Stores (inserts/updates) the passed IP group.\n-     * @param grp The group to store.\n-     * @return Managed version of the group. The provider might be un-set.\n-     */\n-    public IpGroup store( IpGroup grp ) {\n-        ActionLogRecord alr = new ActionLogRecord(ActionLogRecord.ActionType.GlobalGroups, \"ipCreate\");\n-        if ( grp.getGroupProvider() != null ) {\n-            alr.setInfo( grp.getIdentifier());\n-        } else {\n-            alr.setInfo( grp.getDisplayName() );\n-        }\n-        alr.setInfo( alr.getInfo() + \"// \" + grp.getRanges() );\n-        \n-        if ( grp.getId() == null ) {\n-            if ( grp.getPersistedGroupAlias() != null ) {\n-                IpGroup existing = getByGroupName( grp.getPersistedGroupAlias() );\n-                if ( existing == null ) {\n-                    // new group\n-                    em.persist( grp );\n-                    actionLogSvc.log( alr );\n-                    return grp;\n-                    \n-                } else {\n-                    existing.setDescription(grp.getDescription());\n-                    existing.setDisplayName(grp.getDisplayName());\n-                    existing.setIpv4Ranges(grp.getIpv4Ranges());\n-                    existing.setIpv6Ranges(grp.getIpv6Ranges());\n-                    actionLogSvc.log( alr.setActionSubType(\"ipUpdate\") );\n-                    return existing;\n-                }\n-            } else {\n-                actionLogSvc.log( alr );\n-                em.persist( grp );\n-                return grp;\n-            }\n-        } else {\n-            actionLogSvc.log( alr.setActionSubType(\"ipUpdate\") );\n-            return em.merge(grp);\n-        }\n-    }\n-    \n-    public IpGroup get( long id ) {\n-       return em.find( IpGroup.class, id);\n+\n+  private static final Logger logger = Logger.getLogger(IpGroupsServiceBean.class.getName());\n+\n+  @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n+  protected EntityManager em;\n+\n+  @EJB\n+  ActionLogServiceBean actionLogSvc;\n+\n+  @EJB\n+  RoleAssigneeServiceBean roleAssigneeSvc;\n+\n+  /**\n+   * Stores (inserts/updates) the passed IP group.\n+   *\n+   * @param grp The group to store.\n+   * @return Managed version of the group. The provider might be un-set.\n+   */\n+  public IpGroup store(IpGroup grp) {\n+    ActionLogRecord alr = new ActionLogRecord(ActionLogRecord.ActionType.GlobalGroups, \"ipCreate\");\n+    if (grp.getGroupProvider() != null) {\n+      alr.setInfo(grp.getIdentifier());\n+    } else {\n+      alr.setInfo(grp.getDisplayName());\n     }\n-    \n-    public IpGroup getByGroupName( String alias ) {\n-        try {\n-            return em.createNamedQuery(\"IpGroup.findByPersistedGroupAlias\", IpGroup.class)\n-              .setParameter(\"persistedGroupAlias\", alias)\n-              .getSingleResult();\n-        } catch ( NoResultException nre ) {\n-            return null;\n+    alr.setInfo(alr.getInfo() + \"// \" + grp.getRanges());\n+\n+    if (grp.getId() == null) {\n+      if (grp.getPersistedGroupAlias() != null) {\n+        IpGroup existing = getByGroupName(grp.getPersistedGroupAlias());\n+        if (existing == null) {\n+          // new group\n+          em.persist(grp);\n+          actionLogSvc.log(alr);\n+          return grp;\n+\n+        } else {\n+          existing.setDescription(grp.getDescription());\n+          existing.setDisplayName(grp.getDisplayName());\n+          existing.setIpv4Ranges(grp.getIpv4Ranges());\n+          existing.setIpv6Ranges(grp.getIpv6Ranges());\n+          actionLogSvc.log(alr.setActionSubType(\"ipUpdate\"));\n+          return existing;\n         }\n+      } else {\n+        actionLogSvc.log(alr);\n+        em.persist(grp);\n+        return grp;\n+      }\n+    } else {\n+      actionLogSvc.log(alr.setActionSubType(\"ipUpdate\"));\n+      return em.merge(grp);\n     }\n-    \n-    public List<IpGroup> findAll() {\n-        return em.createNamedQuery(\"IpGroup.findAll\", IpGroup.class).getResultList();\n+  }\n+\n+  public IpGroup get(long id) {\n+    return em.find(IpGroup.class, id);\n+  }\n+\n+  public IpGroup getByGroupName(String alias) {\n+    try {\n+      return em.createNamedQuery(\"IpGroup.findByPersistedGroupAlias\", IpGroup.class)\n+        .setParameter(\"persistedGroupAlias\", alias)\n+        .getSingleResult();\n+    } catch (NoResultException nre) {\n+      return null;\n     }\n-    \n-    public Set<IpGroup> findAllIncludingIp( IpAddress ipa ) {\n-        if ( ipa instanceof IPv4Address ) {\n-            IPv4Address ip4 = (IPv4Address) ipa;\n-            List<IpGroup> groupList = em.createNamedQuery(\"IPv4Range.findGroupsContainingAddressAsLong\", IpGroup.class)\n-                    .setParameter(\"addressAsLong\", ip4.toBigInteger()).getResultList();\n-            return new HashSet<>(groupList);\n-\n-        } else if ( ipa instanceof IPv6Address ) {\n-            IPv6Address ip6 = (IPv6Address) ipa;\n-            long[] ip6arr = ip6.toLongArray();\n-            List<IpGroup> groupList = em.createNamedQuery(\"IPv6Range.findGroupsContainingABCD\", IpGroup.class)\n-                    .setParameter(\"a\", ip6arr[0])\n-                    .setParameter(\"b\", ip6arr[1])\n-                    .setParameter(\"c\", ip6arr[2])\n-                    .setParameter(\"d\", ip6arr[3])\n-                    .getResultList();\n-            return new HashSet<>(groupList);\n+  }\n \n-        } else {\n-            throw new IllegalArgumentException( \"Unknown IpAddress type: \" + ipa.getClass() + \" (for IpAddress:\" + ipa + \")\" );\n-        }\n+  public List<IpGroup> findAll() {\n+    return em.createNamedQuery(\"IpGroup.findAll\", IpGroup.class).getResultList();\n+  }\n+\n+  public Set<IpGroup> findAllIncludingIp(IpAddress ipa) {\n+    if (ipa instanceof IPv4Address) {\n+      IPv4Address ip4 = (IPv4Address) ipa;\n+      List<IpGroup> groupList = em.createNamedQuery(\"IPv4Range.findGroupsContainingAddressAsLong\", IpGroup.class)\n+        .setParameter(\"addressAsLong\", ip4.toBigInteger()).getResultList();\n+      return new HashSet<>(groupList);\n+\n+    } else if (ipa instanceof IPv6Address) {\n+      IPv6Address ip6 = (IPv6Address) ipa;\n+      long[] ip6arr = ip6.toLongArray();\n+      List<IpGroup> groupList = em.createNamedQuery(\"IPv6Range.findGroupsContainingABCD\", IpGroup.class)\n+        .setParameter(\"a\", ip6arr[0])\n+        .setParameter(\"b\", ip6arr[1])\n+        .setParameter(\"c\", ip6arr[2])\n+        .setParameter(\"d\", ip6arr[3])\n+        .getResultList();\n+      return new HashSet<>(groupList);\n+\n+    } else {\n+      throw new IllegalArgumentException(\"Unknown IpAddress type: \" + ipa.getClass() + \" (for IpAddress:\" + ipa + \")\");\n     }\n-    \n-    /**\n-     * Deletes the group - if it has no assignments.\n-     * @param grp the group to be deleted\n-     * @throws IllegalArgumentException if the group has assignments\n-     * @see RoleAssigneeServiceBean#getAssignmentsFor(java.lang.String) \n-     */\n-    public void deleteGroup( IpGroup grp ) {\n-        ActionLogRecord alr = new ActionLogRecord(ActionLogRecord.ActionType.GlobalGroups, \"ipDelete\");\n-        alr.setInfo( grp.getIdentifier() );\n-        if ( roleAssigneeSvc.getAssignmentsFor(grp.getIdentifier()).isEmpty() ) {\n-            em.remove( grp );\n-            actionLogSvc.log(alr);\n-            \n-        } else {\n-            String failReason = \"Group \" + grp.getAlias() + \" has assignments and thus can't be deleted.\";\n-            alr.setActionResult(ActionLogRecord.Result.BadRequest);\n-            alr.setInfo( alr.getInfo() + \"// \" + failReason);\n-            actionLogSvc.log(alr);\n-            throw new IllegalArgumentException(failReason);\n-        }\n+  }\n+\n+  /**\n+   * Deletes the group - if it has no assignments.\n+   *\n+   * @param grp the group to be deleted\n+   * @throws IllegalArgumentException if the group has assignments\n+   * @see RoleAssigneeServiceBean#getAssignmentsFor(java.lang.String)\n+   */\n+  public void deleteGroup(IpGroup grp) {\n+    ActionLogRecord alr = new ActionLogRecord(ActionLogRecord.ActionType.GlobalGroups, \"ipDelete\");\n+    alr.setInfo(grp.getIdentifier());\n+    if (roleAssigneeSvc.getAssignmentsFor(grp.getIdentifier()).isEmpty()) {\n+      em.remove(grp);\n+      actionLogSvc.log(alr);\n+\n+    } else {\n+      String failReason = \"Group \" + grp.getAlias() + \" has assignments and thus can't be deleted.\";\n+      alr.setActionResult(ActionLogRecord.Result.BadRequest);\n+      alr.setInfo(alr.getInfo() + \"// \" + failReason);\n+      actionLogSvc.log(alr);\n+      throw new IllegalArgumentException(failReason);\n     }\n+  }\n }\n",
            "diff_size": 161
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/51/IpGroupsServiceBean.java\nindex c03cf26e11e..cbdef3841c9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/naturalize/51/IpGroupsServiceBean.java\n@@ -29,13 +29,13 @@ public class IpGroupsServiceBean {\n     private static final Logger logger = Logger.getLogger(IpGroupsServiceBean.class.getName());\n     \n     @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-\tprotected EntityManager em;\n-    \n+    protected EntityManager em;\n+\n     @EJB\n     ActionLogServiceBean actionLogSvc;\n-\t\n+\n     @EJB\n-    RoleAssigneeServiceBean roleAssigneeSvc;\n+RoleAssigneeServiceBean roleAssigneeSvc;\n     \n     /**\n      * Stores (inserts/updates) the passed IP group.\n@@ -59,8 +59,7 @@ public class IpGroupsServiceBean {\n                     em.persist( grp );\n                     actionLogSvc.log( alr );\n                     return grp;\n-                    \n-                } else {\n+    } else {\n                     existing.setDescription(grp.getDescription());\n                     existing.setDisplayName(grp.getDisplayName());\n                     existing.setIpv4Ranges(grp.getIpv4Ranges());\n@@ -85,8 +84,7 @@ public class IpGroupsServiceBean {\n     \n     public IpGroup getByGroupName( String alias ) {\n         try {\n-            return em.createNamedQuery(\"IpGroup.findByPersistedGroupAlias\", IpGroup.class)\n-              .setParameter(\"persistedGroupAlias\", alias)\n+            return em.createNamedQuery(\"IpGroup.findByPersistedGroupAlias\", IpGroup.class).setParameter(\"persistedGroupAlias\", alias)\n               .getSingleResult();\n         } catch ( NoResultException nre ) {\n             return null;\n@@ -141,4 +139,4 @@ public class IpGroupsServiceBean {\n             throw new IllegalArgumentException(failReason);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/51/IpGroupsServiceBean.java\nindex c03cf26e11e..e4f06a168f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/codebuff/51/IpGroupsServiceBean.java\n@@ -22,18 +22,20 @@ import javax.persistence.PersistenceContext;\n  * \n  * @author michael\n  */\n+\n+\n @Named\n @Stateless\n public class IpGroupsServiceBean {\n-    \n+\n     private static final Logger logger = Logger.getLogger(IpGroupsServiceBean.class.getName());\n-    \n+\n     @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-\tprotected EntityManager em;\n-    \n+    protected EntityManager em;\n+\n     @EJB\n     ActionLogServiceBean actionLogSvc;\n-\t\n+\n     @EJB\n     RoleAssigneeServiceBean roleAssigneeSvc;\n     \n@@ -42,81 +44,70 @@ public class IpGroupsServiceBean {\n      * @param grp The group to store.\n      * @return Managed version of the group. The provider might be un-set.\n      */\n-    public IpGroup store( IpGroup grp ) {\n+\n+    public IpGroup store(IpGroup grp) {\n         ActionLogRecord alr = new ActionLogRecord(ActionLogRecord.ActionType.GlobalGroups, \"ipCreate\");\n-        if ( grp.getGroupProvider() != null ) {\n-            alr.setInfo( grp.getIdentifier());\n+        if (grp.getGroupProvider() != null) {\n+            alr.setInfo(grp.getIdentifier());\n         } else {\n-            alr.setInfo( grp.getDisplayName() );\n+            alr.setInfo(grp.getDisplayName());\n         }\n-        alr.setInfo( alr.getInfo() + \"// \" + grp.getRanges() );\n-        \n-        if ( grp.getId() == null ) {\n-            if ( grp.getPersistedGroupAlias() != null ) {\n-                IpGroup existing = getByGroupName( grp.getPersistedGroupAlias() );\n-                if ( existing == null ) {\n+        alr.setInfo(alr.getInfo() + \"// \" + grp.getRanges());\n+        if (grp.getId() == null) {\n+            if (grp.getPersistedGroupAlias() != null) {\n+                IpGroup existing = getByGroupName(grp.getPersistedGroupAlias());\n+                if (existing == null) {\n                     // new group\n-                    em.persist( grp );\n-                    actionLogSvc.log( alr );\n+                    em.persist(grp);\n+                    actionLogSvc.log(alr);\n                     return grp;\n-                    \n                 } else {\n                     existing.setDescription(grp.getDescription());\n                     existing.setDisplayName(grp.getDisplayName());\n                     existing.setIpv4Ranges(grp.getIpv4Ranges());\n                     existing.setIpv6Ranges(grp.getIpv6Ranges());\n-                    actionLogSvc.log( alr.setActionSubType(\"ipUpdate\") );\n+                    actionLogSvc.log(alr.setActionSubType(\"ipUpdate\"));\n                     return existing;\n                 }\n             } else {\n-                actionLogSvc.log( alr );\n-                em.persist( grp );\n+                actionLogSvc.log(alr);\n+                em.persist(grp);\n                 return grp;\n             }\n         } else {\n-            actionLogSvc.log( alr.setActionSubType(\"ipUpdate\") );\n+            actionLogSvc.log(alr.setActionSubType(\"ipUpdate\"));\n             return em.merge(grp);\n         }\n     }\n-    \n-    public IpGroup get( long id ) {\n-       return em.find( IpGroup.class, id);\n+\n+    public IpGroup get(long id) {\n+        return em.find(IpGroup.class, id);\n     }\n-    \n-    public IpGroup getByGroupName( String alias ) {\n+\n+    public IpGroup getByGroupName(String alias) {\n         try {\n-            return em.createNamedQuery(\"IpGroup.findByPersistedGroupAlias\", IpGroup.class)\n-              .setParameter(\"persistedGroupAlias\", alias)\n-              .getSingleResult();\n-        } catch ( NoResultException nre ) {\n+            return em.createNamedQuery(\"IpGroup.findByPersistedGroupAlias\", IpGroup.class).setParameter(\"persistedGroupAlias\", alias).getSingleResult();\n+        } catch (NoResultException nre) {\n             return null;\n         }\n     }\n-    \n+\n     public List<IpGroup> findAll() {\n         return em.createNamedQuery(\"IpGroup.findAll\", IpGroup.class).getResultList();\n     }\n-    \n-    public Set<IpGroup> findAllIncludingIp( IpAddress ipa ) {\n-        if ( ipa instanceof IPv4Address ) {\n+\n+    public Set<IpGroup> findAllIncludingIp(IpAddress ipa) {\n+        if (ipa instanceof IPv4Address) {\n             IPv4Address ip4 = (IPv4Address) ipa;\n-            List<IpGroup> groupList = em.createNamedQuery(\"IPv4Range.findGroupsContainingAddressAsLong\", IpGroup.class)\n-                    .setParameter(\"addressAsLong\", ip4.toBigInteger()).getResultList();\n+            List<IpGroup> groupList = em.createNamedQuery(\"IPv4Range.findGroupsContainingAddressAsLong\", IpGroup.class).setParameter(\"addressAsLong\", ip4.toBigInteger()).getResultList();\n             return new HashSet<>(groupList);\n-\n-        } else if ( ipa instanceof IPv6Address ) {\n+        } else if (ipa instanceof IPv6Address) {\n             IPv6Address ip6 = (IPv6Address) ipa;\n             long[] ip6arr = ip6.toLongArray();\n-            List<IpGroup> groupList = em.createNamedQuery(\"IPv6Range.findGroupsContainingABCD\", IpGroup.class)\n-                    .setParameter(\"a\", ip6arr[0])\n-                    .setParameter(\"b\", ip6arr[1])\n-                    .setParameter(\"c\", ip6arr[2])\n-                    .setParameter(\"d\", ip6arr[3])\n-                    .getResultList();\n+            List<IpGroup> groupList = em.createNamedQuery(\"IPv6Range.findGroupsContainingABCD\", IpGroup.class).setParameter(\"a\", ip6arr[0]).setParameter(\"b\", ip6arr[1]).setParameter(\"c\", ip6arr[2]).setParameter(\"d\", ip6arr[3]).getResultList();\n             return new HashSet<>(groupList);\n-\n         } else {\n-            throw new IllegalArgumentException( \"Unknown IpAddress type: \" + ipa.getClass() + \" (for IpAddress:\" + ipa + \")\" );\n+            throw new IllegalArgumentException(\"Unknown IpAddress type: \" + ipa.getClass() + \" (for IpAddress:\" + ipa + \")\");\n         }\n     }\n     \n@@ -126,19 +117,19 @@ public class IpGroupsServiceBean {\n      * @throws IllegalArgumentException if the group has assignments\n      * @see RoleAssigneeServiceBean#getAssignmentsFor(java.lang.String) \n      */\n-    public void deleteGroup( IpGroup grp ) {\n+\n+    public void deleteGroup(IpGroup grp) {\n         ActionLogRecord alr = new ActionLogRecord(ActionLogRecord.ActionType.GlobalGroups, \"ipDelete\");\n-        alr.setInfo( grp.getIdentifier() );\n-        if ( roleAssigneeSvc.getAssignmentsFor(grp.getIdentifier()).isEmpty() ) {\n-            em.remove( grp );\n+        alr.setInfo(grp.getIdentifier());\n+        if (roleAssigneeSvc.getAssignmentsFor(grp.getIdentifier()).isEmpty()) {\n+            em.remove(grp);\n             actionLogSvc.log(alr);\n-            \n         } else {\n             String failReason = \"Group \" + grp.getAlias() + \" has assignments and thus can't be deleted.\";\n             alr.setActionResult(ActionLogRecord.Result.BadRequest);\n-            alr.setInfo( alr.getInfo() + \"// \" + failReason);\n+            alr.setInfo(alr.getInfo() + \"// \" + failReason);\n             actionLogSvc.log(alr);\n             throw new IllegalArgumentException(failReason);\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 58
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/51/IpGroupsServiceBean.java\nindex c03cf26e11e..8079f66c30b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_random/51/IpGroupsServiceBean.java\n@@ -29,7 +29,7 @@ public class IpGroupsServiceBean {\n     private static final Logger logger = Logger.getLogger(IpGroupsServiceBean.class.getName());\n     \n     @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-\tprotected EntityManager em;\n+protected EntityManager em;\n     \n     @EJB\n     ActionLogServiceBean actionLogSvc;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "36",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/51/IpGroupsServiceBean.java\nindex c03cf26e11e..fa308579a0d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/51/IpGroupsServiceBean.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/styler_three_grams/51/IpGroupsServiceBean.java\n@@ -29,7 +29,7 @@ public class IpGroupsServiceBean {\n     private static final Logger logger = Logger.getLogger(IpGroupsServiceBean.class.getName());\n     \n     @PersistenceContext(unitName = \"VDCNet-ejbPU\")\n-\tprotected EntityManager em;\n+    protected EntityManager em;\n     \n     @EJB\n     ActionLogServiceBean actionLogSvc;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ]
}