{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1157",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "93",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "127",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "132",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1157/StorePropertyPayloadCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1157/StorePropertyPayloadCursor.java\nindex 1aa28a8e393..6c64e26d720 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1157/StorePropertyPayloadCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1157/StorePropertyPayloadCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.store;\n \n import java.nio.ByteBuffer;\n@@ -71,274 +72,273 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.FORCE;\n  */\n class StorePropertyPayloadCursor\n {\n-    private static final int MAX_BYTES_IN_SHORT_STRING_OR_SHORT_ARRAY = 32;\n-    private static final int INTERNAL_BYTE_ARRAY_SIZE = 4096;\n-    private static final int INITIAL_POSITION = -1;\n-\n-    /**\n-     * Reusable initial buffer for reading of dynamic records.\n-     */\n-    private final ByteBuffer cachedBuffer = ByteBuffer.allocate( INTERNAL_BYTE_ARRAY_SIZE );\n-\n-    private final RecordCursor<DynamicRecord> stringRecordCursor;\n-    private final RecordCursor<DynamicRecord> arrayRecordCursor;\n-    private ByteBuffer buffer = cachedBuffer;\n-\n-    private long[] data;\n-    private int position = INITIAL_POSITION;\n-    private int numberOfBlocks;\n-    private boolean exhausted;\n-\n-    StorePropertyPayloadCursor( RecordCursor<DynamicRecord> stringRecordCursor,\n-            RecordCursor<DynamicRecord> arrayRecordCursor )\n-    {\n-        this.stringRecordCursor = stringRecordCursor;\n-        this.arrayRecordCursor = arrayRecordCursor;\n-    }\n-\n-    void init( long[] blocks, int numberOfBlocks )\n-    {\n-        position = INITIAL_POSITION;\n-        buffer = cachedBuffer;\n-        data = blocks;\n-        this.numberOfBlocks = numberOfBlocks;\n-        exhausted = false;\n-    }\n-\n-    void clear()\n-    {\n-        position = INITIAL_POSITION;\n-        numberOfBlocks = 0;\n-        exhausted = false;\n-        buffer = cachedBuffer;\n-    }\n-\n-    boolean next()\n-    {\n-        if ( exhausted )\n-        {\n-            return false;\n-        }\n-\n-        if ( position == INITIAL_POSITION )\n-        {\n-            position = 0;\n-        }\n-        else if ( position < numberOfBlocks )\n-        {\n-            position += currentBlocksUsed();\n-        }\n-\n-        if ( position >= numberOfBlocks || type() == null )\n-        {\n-            exhausted = true;\n-            return false;\n-        }\n-        return true;\n-    }\n-\n-    PropertyType type()\n-    {\n-        long propBlock = currentHeader();\n-        return PropertyType.getPropertyTypeOrNull( propBlock );\n-    }\n-\n-    int propertyKeyId()\n-    {\n-        return PropertyBlock.keyIndexId( currentHeader() );\n-    }\n-\n-    private BooleanValue booleanValue()\n-    {\n-        assertOfType( BOOL );\n-        return Values.booleanValue( PropertyBlock.fetchByte( currentHeader() ) == 1 );\n-    }\n-\n-    private ByteValue byteValue()\n-    {\n-        assertOfType( BYTE );\n-        return Values.byteValue( PropertyBlock.fetchByte( currentHeader() ) );\n-    }\n-\n-    private ShortValue shortValue()\n-    {\n-        assertOfType( SHORT );\n-        return Values.shortValue( PropertyBlock.fetchShort( currentHeader() ) );\n-    }\n-\n-    private CharValue charValue()\n-    {\n-        assertOfType( CHAR );\n-        return Values.charValue( (char) PropertyBlock.fetchShort( currentHeader() ) );\n-    }\n-\n-    private IntValue intValue()\n+  private static final int MAX_BYTES_IN_SHORT_STRING_OR_SHORT_ARRAY = 32;\n+  private static final int INTERNAL_BYTE_ARRAY_SIZE = 4096;\n+  private static final int INITIAL_POSITION = -1;\n+\n+  /**\n+   * Reusable initial buffer for reading of dynamic records.\n+   */\n+  private final ByteBuffer cachedBuffer = ByteBuffer.allocate(INTERNAL_BYTE_ARRAY_SIZE);\n+\n+  private final RecordCursor<DynamicRecord> stringRecordCursor;\n+  private final RecordCursor<DynamicRecord> arrayRecordCursor;\n+  private ByteBuffer buffer = cachedBuffer;\n+\n+  private long[] data;\n+  private int position = INITIAL_POSITION;\n+  private int numberOfBlocks;\n+  private boolean exhausted;\n+\n+  StorePropertyPayloadCursor(RecordCursor<DynamicRecord> stringRecordCursor,\n+                             RecordCursor<DynamicRecord> arrayRecordCursor)\n+  {\n+    this.stringRecordCursor = stringRecordCursor;\n+    this.arrayRecordCursor = arrayRecordCursor;\n+  }\n+\n+  void init(long[] blocks, int numberOfBlocks)\n+  {\n+    position = INITIAL_POSITION;\n+    buffer = cachedBuffer;\n+    data = blocks;\n+    this.numberOfBlocks = numberOfBlocks;\n+    exhausted = false;\n+  }\n+\n+  void clear()\n+  {\n+    position = INITIAL_POSITION;\n+    numberOfBlocks = 0;\n+    exhausted = false;\n+    buffer = cachedBuffer;\n+  }\n+\n+  boolean next()\n+  {\n+    if (exhausted)\n     {\n-        assertOfType( INT );\n-        return Values.intValue( PropertyBlock.fetchInt( currentHeader() ) );\n+      return false;\n     }\n \n-    private FloatValue floatValue()\n+    if (position == INITIAL_POSITION)\n     {\n-        assertOfType( FLOAT );\n-        return Values.floatValue( Float.intBitsToFloat( PropertyBlock.fetchInt( currentHeader() ) ) );\n-    }\n-\n-    private LongValue longValue()\n+      position = 0;\n+    } else if (position < numberOfBlocks)\n     {\n-        assertOfType( LONG );\n-        if ( PropertyBlock.valueIsInlined( currentHeader() ) )\n-        {\n-            return Values.longValue( PropertyBlock.fetchLong( currentHeader() ) >>> 1 );\n-        }\n-\n-        return Values.longValue( data[position + 1] );\n+      position += currentBlocksUsed();\n     }\n \n-    private DoubleValue doubleValue()\n+    if (position >= numberOfBlocks || type() == null)\n     {\n-        assertOfType( DOUBLE );\n-        return Values.doubleValue( Double.longBitsToDouble( data[position + 1] ) );\n+      exhausted = true;\n+      return false;\n     }\n-\n-    private TextValue shortStringValue()\n+    return true;\n+  }\n+\n+  PropertyType type()\n+  {\n+    long propBlock = currentHeader();\n+    return PropertyType.getPropertyTypeOrNull(propBlock);\n+  }\n+\n+  int propertyKeyId()\n+  {\n+    return PropertyBlock.keyIndexId(currentHeader());\n+  }\n+\n+  private BooleanValue booleanValue()\n+  {\n+    assertOfType(BOOL);\n+    return Values.booleanValue(PropertyBlock.fetchByte(currentHeader()) == 1);\n+  }\n+\n+  private ByteValue byteValue()\n+  {\n+    assertOfType(BYTE);\n+    return Values.byteValue(PropertyBlock.fetchByte(currentHeader()));\n+  }\n+\n+  private ShortValue shortValue()\n+  {\n+    assertOfType(SHORT);\n+    return Values.shortValue(PropertyBlock.fetchShort(currentHeader()));\n+  }\n+\n+  private CharValue charValue()\n+  {\n+    assertOfType(CHAR);\n+    return Values.charValue((char) PropertyBlock.fetchShort(currentHeader()));\n+  }\n+\n+  private IntValue intValue()\n+  {\n+    assertOfType(INT);\n+    return Values.intValue(PropertyBlock.fetchInt(currentHeader()));\n+  }\n+\n+  private FloatValue floatValue()\n+  {\n+    assertOfType(FLOAT);\n+    return Values.floatValue(Float.intBitsToFloat(PropertyBlock.fetchInt(currentHeader())));\n+  }\n+\n+  private LongValue longValue()\n+  {\n+    assertOfType(LONG);\n+    if (PropertyBlock.valueIsInlined(currentHeader()))\n     {\n-        assertOfType( SHORT_STRING );\n-        return LongerShortString.decode( data, position, currentBlocksUsed() );\n+      return Values.longValue(PropertyBlock.fetchLong(currentHeader()) >>> 1);\n     }\n \n-    TextValue stringValue()\n+    return Values.longValue(data[position + 1]);\n+  }\n+\n+  private DoubleValue doubleValue()\n+  {\n+    assertOfType(DOUBLE);\n+    return Values.doubleValue(Double.longBitsToDouble(data[position + 1]));\n+  }\n+\n+  private TextValue shortStringValue()\n+  {\n+    assertOfType(SHORT_STRING);\n+    return LongerShortString.decode(data, position, currentBlocksUsed());\n+  }\n+\n+  TextValue stringValue()\n+  {\n+    assertOfType(STRING);\n+    readFromStore(stringRecordCursor);\n+    buffer.flip();\n+    return Values.stringValue(UTF8.decode(buffer.array(), 0, buffer.limit()));\n+  }\n+\n+  private Value shortArrayValue()\n+  {\n+    assertOfType(SHORT_ARRAY);\n+    Bits bits = valueAsBits();\n+    return ShortArray.decode(bits);\n+  }\n+\n+  Value arrayValue()\n+  {\n+    assertOfType(ARRAY);\n+    readFromStore(arrayRecordCursor);\n+    buffer.flip();\n+    return PropertyUtil.readArrayFromBuffer(buffer);\n+  }\n+\n+  Value geometryValue()\n+  {\n+    assertOfType(GEOMETRY);\n+    return GeometryType.decode(data, position);\n+  }\n+\n+  Value temporalValue()\n+  {\n+    assertOfType(TEMPORAL);\n+    return TemporalType.decode(data, position);\n+  }\n+\n+  Value value()\n+  {\n+    switch (type())\n     {\n-        assertOfType( STRING );\n-        readFromStore( stringRecordCursor );\n-        buffer.flip();\n-        return Values.stringValue( UTF8.decode( buffer.array(), 0, buffer.limit() ) );\n+      case BOOL:\n+        return booleanValue();\n+      case BYTE:\n+        return byteValue();\n+      case SHORT:\n+        return shortValue();\n+      case CHAR:\n+        return charValue();\n+      case INT:\n+        return intValue();\n+      case LONG:\n+        return longValue();\n+      case FLOAT:\n+        return floatValue();\n+      case DOUBLE:\n+        return doubleValue();\n+      case SHORT_STRING:\n+        return shortStringValue();\n+      case STRING:\n+        return stringValue();\n+      case SHORT_ARRAY:\n+        return shortArrayValue();\n+      case ARRAY:\n+        return arrayValue();\n+      case GEOMETRY:\n+        return geometryValue();\n+      case TEMPORAL:\n+        return temporalValue();\n+      default:\n+        throw new IllegalStateException(\"No such type:\" + type());\n     }\n-\n-    private Value shortArrayValue()\n+  }\n+\n+  private long currentHeader()\n+  {\n+    return data[position];\n+  }\n+\n+  private int currentBlocksUsed()\n+  {\n+    return type().calculateNumberOfBlocksUsed(currentHeader());\n+  }\n+\n+  private Bits valueAsBits()\n+  {\n+    Bits bits = Bits.bits(MAX_BYTES_IN_SHORT_STRING_OR_SHORT_ARRAY);\n+    int blocksUsed = currentBlocksUsed();\n+    for (int i = 0; i < blocksUsed; i++)\n     {\n-        assertOfType( SHORT_ARRAY );\n-        Bits bits = valueAsBits();\n-        return ShortArray.decode( bits );\n+      bits.put(data[position + i]);\n     }\n-\n-    Value arrayValue()\n+    return bits;\n+  }\n+\n+  private void readFromStore(RecordCursor<DynamicRecord> cursor)\n+  {\n+    buffer.clear();\n+    long startBlockId = PropertyBlock.fetchLong(currentHeader());\n+    cursor.placeAt(startBlockId, FORCE);\n+    while (true)\n     {\n-        assertOfType( ARRAY );\n-        readFromStore( arrayRecordCursor );\n+      cursor.next();\n+      DynamicRecord dynamicRecord = cursor.get();\n+      byte[] data = dynamicRecord.getData();\n+      if (buffer.remaining() < data.length)\n+      {\n         buffer.flip();\n-        return PropertyUtil.readArrayFromBuffer( buffer );\n-    }\n-\n-    Value geometryValue()\n-    {\n-        assertOfType( GEOMETRY );\n-        return GeometryType.decode( data, position );\n-    }\n-\n-    Value temporalValue()\n-    {\n-        assertOfType( TEMPORAL );\n-        return TemporalType.decode( data, position );\n-    }\n-\n-    Value value()\n-    {\n-        switch ( type() )\n-        {\n-        case BOOL:\n-            return booleanValue();\n-        case BYTE:\n-            return byteValue();\n-        case SHORT:\n-            return shortValue();\n-        case CHAR:\n-            return charValue();\n-        case INT:\n-            return intValue();\n-        case LONG:\n-            return longValue();\n-        case FLOAT:\n-            return floatValue();\n-        case DOUBLE:\n-            return doubleValue();\n-        case SHORT_STRING:\n-            return shortStringValue();\n-        case STRING:\n-            return stringValue();\n-        case SHORT_ARRAY:\n-            return shortArrayValue();\n-        case ARRAY:\n-            return arrayValue();\n-        case GEOMETRY:\n-            return geometryValue();\n-        case TEMPORAL:\n-            return temporalValue();\n-        default:\n-            throw new IllegalStateException( \"No such type:\" + type() );\n-        }\n-    }\n-\n-    private long currentHeader()\n-    {\n-        return data[position];\n+        ByteBuffer newBuffer = newBiggerBuffer(data.length);\n+        newBuffer.put(buffer);\n+        buffer = newBuffer;\n+      }\n+      buffer.put(data, 0, data.length);\n+      if (Record.NULL_REFERENCE.is(dynamicRecord.getNextBlock()))\n+      {\n+        break;\n+      }\n     }\n+  }\n \n-    private int currentBlocksUsed()\n+  private ByteBuffer newBiggerBuffer(int requiredCapacity)\n+  {\n+    int newCapacity;\n+    do\n     {\n-        return type().calculateNumberOfBlocksUsed( currentHeader() );\n+      newCapacity = buffer.capacity() * 2;\n     }\n+    while (newCapacity - buffer.limit() < requiredCapacity);\n \n-    private Bits valueAsBits()\n-    {\n-        Bits bits = Bits.bits( MAX_BYTES_IN_SHORT_STRING_OR_SHORT_ARRAY );\n-        int blocksUsed = currentBlocksUsed();\n-        for ( int i = 0; i < blocksUsed; i++ )\n-        {\n-            bits.put( data[position + i] );\n-        }\n-        return bits;\n-    }\n+    return ByteBuffer.allocate(newCapacity).order(ByteOrder.LITTLE_ENDIAN);\n+  }\n \n-    private void readFromStore( RecordCursor<DynamicRecord> cursor )\n-    {\n-        buffer.clear();\n-        long startBlockId = PropertyBlock.fetchLong( currentHeader() );\n-        cursor.placeAt( startBlockId, FORCE );\n-        while ( true )\n-        {\n-            cursor.next();\n-            DynamicRecord dynamicRecord = cursor.get();\n-            byte[] data = dynamicRecord.getData();\n-            if ( buffer.remaining() < data.length )\n-            {\n-                buffer.flip();\n-                ByteBuffer newBuffer = newBiggerBuffer( data.length );\n-                newBuffer.put( buffer );\n-                buffer = newBuffer;\n-            }\n-            buffer.put( data, 0, data.length );\n-            if ( Record.NULL_REFERENCE.is( dynamicRecord.getNextBlock() ) )\n-            {\n-                break;\n-            }\n-        }\n-    }\n-\n-    private ByteBuffer newBiggerBuffer( int requiredCapacity )\n-    {\n-        int newCapacity;\n-        do\n-        {\n-            newCapacity = buffer.capacity() * 2;\n-        }\n-        while ( newCapacity - buffer.limit() < requiredCapacity );\n-\n-        return ByteBuffer.allocate( newCapacity ).order( ByteOrder.LITTLE_ENDIAN );\n-    }\n-\n-    private void assertOfType( PropertyType expected )\n-    {\n-        assert type() == expected : \"Expected type \" + expected + \" but was \" + type();\n-    }\n+  private void assertOfType(PropertyType expected)\n+  {\n+    assert type() == expected : \"Expected type \" + expected + \" but was \" + type();\n+  }\n }\n",
            "diff_size": 407
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1157/StorePropertyPayloadCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1157/StorePropertyPayloadCursor.java\nindex 1aa28a8e393..6ce857439e4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1157/StorePropertyPayloadCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1157/StorePropertyPayloadCursor.java\n@@ -89,8 +89,7 @@ class StorePropertyPayloadCursor\n     private int numberOfBlocks;\n     private boolean exhausted;\n \n-    StorePropertyPayloadCursor( RecordCursor<DynamicRecord> stringRecordCursor,\n-            RecordCursor<DynamicRecord> arrayRecordCursor )\n+    StorePropertyPayloadCursor( RecordCursor<DynamicRecord> stringRecordCursor, RecordCursor<DynamicRecord> arrayRecordCursor )\n     {\n         this.stringRecordCursor = stringRecordCursor;\n         this.arrayRecordCursor = arrayRecordCursor;\n@@ -297,7 +296,8 @@ class StorePropertyPayloadCursor\n         {\n             bits.put( data[position + i] );\n         }\n-        return bits;\n+\n+return bits;\n     }\n \n     private void readFromStore( RecordCursor<DynamicRecord> cursor )\n@@ -333,12 +333,11 @@ class StorePropertyPayloadCursor\n             newCapacity = buffer.capacity() * 2;\n         }\n         while ( newCapacity - buffer.limit() < requiredCapacity );\n-\n-        return ByteBuffer.allocate( newCapacity ).order( ByteOrder.LITTLE_ENDIAN );\n+return ByteBuffer.allocate( newCapacity ).order( ByteOrder.LITTLE_ENDIAN );\n     }\n \n     private void assertOfType( PropertyType expected )\n     {\n         assert type() == expected : \"Expected type \" + expected + \" but was \" + type();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}