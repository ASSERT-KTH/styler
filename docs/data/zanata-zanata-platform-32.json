{
    "project_name": "zanata-zanata-platform",
    "error_id": "32",
    "information": {
        "errors": [
            {
                "line": "63",
                "column": "9",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        // NB: Need to manually implement the cache loader feature\n        V cachedValue = getCache().get(key);\n        if(cachedValue == null && cacheLoader != null) {\n            try {\n                cachedValue = cacheLoader.load(key);\n            } catch (Exception e) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/32/InfinispanCacheWrapper.java\nindex 8e789509808..6613465a3ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler/32/InfinispanCacheWrapper.java\n@@ -60,7 +60,7 @@ public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n     public synchronized V getWithLoader(K key) {\n         // NB: Need to manually implement the cache loader feature\n         V cachedValue = getCache().get(key);\n-        if(cachedValue == null && cacheLoader != null) {\n+        if (cachedValue == null && cacheLoader != null) {\n             try {\n                 cachedValue = cacheLoader.load(key);\n             } catch (Exception e) {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/32/InfinispanCacheWrapper.java\nindex 8e789509808..64ef9555a32 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/intellij/32/InfinispanCacheWrapper.java\n@@ -18,6 +18,7 @@\n  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA, or see the FSF\n  * site: http://www.fsf.org.\n  */\n+\n package org.zanata.cache;\n \n import com.google.common.cache.CacheLoader;\n@@ -29,69 +30,69 @@ import org.infinispan.manager.CacheContainer;\n  */\n public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n \n-    private final String cacheName;\n-    private final CacheContainer cacheContainer;\n-    private CacheLoader<K, V> cacheLoader;\n+  private final String cacheName;\n+  private final CacheContainer cacheContainer;\n+  private CacheLoader<K, V> cacheLoader;\n \n-    public InfinispanCacheWrapper(String cacheName,\n-            CacheContainer cacheContainer) {\n-        this.cacheName = cacheName;\n-        this.cacheContainer = cacheContainer;\n-    }\n+  public InfinispanCacheWrapper(String cacheName,\n+                                CacheContainer cacheContainer) {\n+    this.cacheName = cacheName;\n+    this.cacheContainer = cacheContainer;\n+  }\n \n-    public InfinispanCacheWrapper(String cacheName,\n-            CacheContainer cacheContainer,\n-            CacheLoader<K, V> cacheLoader) {\n-        this(cacheName, cacheContainer);\n-        this.cacheLoader = cacheLoader;\n-    }\n+  public InfinispanCacheWrapper(String cacheName,\n+                                CacheContainer cacheContainer,\n+                                CacheLoader<K, V> cacheLoader) {\n+    this(cacheName, cacheContainer);\n+    this.cacheLoader = cacheLoader;\n+  }\n \n-    @Override\n-    public void put(K key, V value) {\n-        getCache().put(key, value);\n-    }\n+  @Override\n+  public void put(K key, V value) {\n+    getCache().put(key, value);\n+  }\n \n-    @Override\n-    public V get(K key) {\n-        return getCache().get(key);\n-    }\n+  @Override\n+  public V get(K key) {\n+    return getCache().get(key);\n+  }\n \n-    @Override\n-    public synchronized V getWithLoader(K key) {\n-        // NB: Need to manually implement the cache loader feature\n-        V cachedValue = getCache().get(key);\n-        if(cachedValue == null && cacheLoader != null) {\n-            try {\n-                cachedValue = cacheLoader.load(key);\n-            } catch (Exception e) {\n-                throw new RuntimeException(\n-                        \"Unable to load entry with cache loader \", e);\n-            }\n-            getCache().put(key, cachedValue);\n-        }\n-        return cachedValue;\n+  @Override\n+  public synchronized V getWithLoader(K key) {\n+    // NB: Need to manually implement the cache loader feature\n+    V cachedValue = getCache().get(key);\n+    if (cachedValue == null && cacheLoader != null) {\n+      try {\n+        cachedValue = cacheLoader.load(key);\n+      } catch (Exception e) {\n+        throw new RuntimeException(\n+          \"Unable to load entry with cache loader \", e);\n+      }\n+      getCache().put(key, cachedValue);\n     }\n+    return cachedValue;\n+  }\n \n-    @Override\n-    public boolean remove(K key) {\n-        return getCache().remove(key) != null;\n-    }\n+  @Override\n+  public boolean remove(K key) {\n+    return getCache().remove(key) != null;\n+  }\n \n-    public Cache<K, V> getCache() {\n-        return cacheContainer.getCache(cacheName);\n-    }\n+  public Cache<K, V> getCache() {\n+    return cacheContainer.getCache(cacheName);\n+  }\n \n-    public static <K, V> InfinispanCacheWrapper<K, V> create(\n-            final String cacheName,\n-            final CacheContainer cacheManager) {\n-        cacheManager.getCache(cacheName);\n-        return new InfinispanCacheWrapper<K, V>(cacheName, cacheManager);\n-    }\n+  public static <K, V> InfinispanCacheWrapper<K, V> create(\n+    final String cacheName,\n+    final CacheContainer cacheManager) {\n+    cacheManager.getCache(cacheName);\n+    return new InfinispanCacheWrapper<K, V>(cacheName, cacheManager);\n+  }\n \n-    public static <K, V> InfinispanCacheWrapper<K, V> create(\n-            final String cacheName,\n-            final CacheContainer cacheManager, CacheLoader<K, V> loader) {\n-        cacheManager.getCache(cacheName);\n-        return new InfinispanCacheWrapper<K, V>(cacheName, cacheManager, loader);\n-    }\n+  public static <K, V> InfinispanCacheWrapper<K, V> create(\n+    final String cacheName,\n+    final CacheContainer cacheManager, CacheLoader<K, V> loader) {\n+    cacheManager.getCache(cacheName);\n+    return new InfinispanCacheWrapper<K, V>(cacheName, cacheManager, loader);\n+  }\n }\n",
            "diff_size": 58
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/32/InfinispanCacheWrapper.java\nindex 8e789509808..8aebb0a3f7a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/naturalize/32/InfinispanCacheWrapper.java\n@@ -60,7 +60,7 @@ public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n     public synchronized V getWithLoader(K key) {\n         // NB: Need to manually implement the cache loader feature\n         V cachedValue = getCache().get(key);\n-        if(cachedValue == null && cacheLoader != null) {\n+        if (cachedValue == null && cacheLoader != null) {\n             try {\n                 cachedValue = cacheLoader.load(key);\n             } catch (Exception e) {\n@@ -94,4 +94,4 @@ public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n         cacheManager.getCache(cacheName);\n         return new InfinispanCacheWrapper<K, V>(cacheName, cacheManager, loader);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/32/InfinispanCacheWrapper.java\nindex 8e789509808..4b13e157f19 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/codebuff/32/InfinispanCacheWrapper.java\n@@ -27,21 +27,19 @@ import org.infinispan.manager.CacheContainer;\n /**\n  * @author Carlos Munoz <a href=\"mailto:camunoz@redhat.com\">camunoz@redhat.com</a>\n  */\n-public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n \n+\n+public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n     private final String cacheName;\n     private final CacheContainer cacheContainer;\n     private CacheLoader<K, V> cacheLoader;\n \n-    public InfinispanCacheWrapper(String cacheName,\n-            CacheContainer cacheContainer) {\n+    public InfinispanCacheWrapper(String cacheName, CacheContainer cacheContainer) {\n         this.cacheName = cacheName;\n         this.cacheContainer = cacheContainer;\n     }\n \n-    public InfinispanCacheWrapper(String cacheName,\n-            CacheContainer cacheContainer,\n-            CacheLoader<K, V> cacheLoader) {\n+    public InfinispanCacheWrapper(String cacheName, CacheContainer cacheContainer, CacheLoader<K, V> cacheLoader) {\n         this(cacheName, cacheContainer);\n         this.cacheLoader = cacheLoader;\n     }\n@@ -60,12 +58,11 @@ public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n     public synchronized V getWithLoader(K key) {\n         // NB: Need to manually implement the cache loader feature\n         V cachedValue = getCache().get(key);\n-        if(cachedValue == null && cacheLoader != null) {\n+        if (cachedValue == null && cacheLoader != null) {\n             try {\n                 cachedValue = cacheLoader.load(key);\n             } catch (Exception e) {\n-                throw new RuntimeException(\n-                        \"Unable to load entry with cache loader \", e);\n+                throw new RuntimeException(\"Unable to load entry with cache loader \", e);\n             }\n             getCache().put(key, cachedValue);\n         }\n@@ -81,17 +78,14 @@ public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n         return cacheContainer.getCache(cacheName);\n     }\n \n-    public static <K, V> InfinispanCacheWrapper<K, V> create(\n-            final String cacheName,\n-            final CacheContainer cacheManager) {\n+    public static <K, V> InfinispanCacheWrapper<K, V> create(final String cacheName,\n+        final CacheContainer cacheManager) {\n         cacheManager.getCache(cacheName);\n         return new InfinispanCacheWrapper<K, V>(cacheName, cacheManager);\n     }\n \n-    public static <K, V> InfinispanCacheWrapper<K, V> create(\n-            final String cacheName,\n-            final CacheContainer cacheManager, CacheLoader<K, V> loader) {\n+    public static <K, V> InfinispanCacheWrapper<K, V> create(final String cacheName, final CacheContainer cacheManager, CacheLoader<K, V> loader) {\n         cacheManager.getCache(cacheName);\n         return new InfinispanCacheWrapper<K, V>(cacheName, cacheManager, loader);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/32/InfinispanCacheWrapper.java\nindex 8e789509808..6613465a3ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_random/32/InfinispanCacheWrapper.java\n@@ -60,7 +60,7 @@ public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n     public synchronized V getWithLoader(K key) {\n         // NB: Need to manually implement the cache loader feature\n         V cachedValue = getCache().get(key);\n-        if(cachedValue == null && cacheLoader != null) {\n+        if (cachedValue == null && cacheLoader != null) {\n             try {\n                 cachedValue = cacheLoader.load(key);\n             } catch (Exception e) {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/32/InfinispanCacheWrapper.java\nindex 8e789509808..6613465a3ec 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/errored/1/32/InfinispanCacheWrapper.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/zanata-zanata-platform/styler_three_grams/32/InfinispanCacheWrapper.java\n@@ -60,7 +60,7 @@ public class InfinispanCacheWrapper<K, V> implements CacheWrapper<K, V> {\n     public synchronized V getWithLoader(K key) {\n         // NB: Need to manually implement the cache loader feature\n         V cachedValue = getCache().get(key);\n-        if(cachedValue == null && cacheLoader != null) {\n+        if (cachedValue == null && cacheLoader != null) {\n             try {\n                 cachedValue = cacheLoader.load(key);\n             } catch (Exception e) {\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}