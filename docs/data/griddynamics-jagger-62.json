{
    "project_name": "griddynamics-jagger",
    "error_id": "62",
    "information": {
        "errors": [
            {
                "line": "32",
                "severity": "warning",
                "message": "Line is longer than 150 characters (found 237).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * @n\n * @par Details:\n * @details It is no matter what type you select for query, endpoint and result. This kind of invoker has no logic. It is very helpful when you would like to create a pause between tests or you are waiting when service will be available.\n *\n * @param <Q> - Query type\n * @param <R> - Result type",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "37",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/62/WaitingInvoker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/62/WaitingInvoker.java\nindex 10db43bcb2f..a12a356cb61 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/62/WaitingInvoker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/intellij/62/WaitingInvoker.java\n@@ -25,17 +25,18 @@ import com.griddynamics.jagger.invoker.Invoker;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-/** Sleeps for specified time\n- * @author Dmitry Kotlyarov\n- * @n\n- * @par Details:\n- * @details It is no matter what type you select for query, endpoint and result. This kind of invoker has no logic. It is very helpful when you would like to create a pause between tests or you are waiting when service will be available.\n+/**\n+ * Sleeps for specified time\n  *\n  * @param <Q> - Query type\n  * @param <R> - Result type\n  * @param <E> - Endpoint type\n- *\n- * @ingroup Main_Invokers_group */\n+ * @author Dmitry Kotlyarov\n+ * @n\n+ * @par Details:\n+ * @details It is no matter what type you select for query, endpoint and result. This kind of invoker has no logic. It is very helpful when you would like to create a pause between tests or you are waiting when service will be available.\n+ * @ingroup Main_Invokers_group\n+ */\n @Deprecated\n public class WaitingInvoker<Q, R, E> implements Invoker<Q, R, E> {\n     private static final Logger log = LoggerFactory.getLogger(WaitingInvoker.class);\n@@ -43,24 +44,29 @@ public class WaitingInvoker<Q, R, E> implements Invoker<Q, R, E> {\n     private final R result;\n     private final int sleepMs;\n \n-    /** Make an invocation to target\n+    /**\n+     * Make an invocation to target\n+     *\n+     * @param result  - an object, which will returns as the result of invocation\n+     * @param sleepMs - time for sleeping\n      * @author Dmitry Kotlyarov\n      * @n\n-     * @param result - an object, which will returns as the result of invocation\n-     * @param sleepMs - time for sleeping*/\n+     */\n     public WaitingInvoker(R result, int sleepMs) {\n         this.result = result;\n         this.sleepMs = sleepMs;\n     }\n \n-    /** Sleep for exact time\n-     * @author Mairbek Khadikov\n-     * @n\n+    /**\n+     * Sleep for exact time\n+     *\n      * @param query    - some query\n      * @param endpoint - some endpoint\n-     *\n      * @return invocation result\n-     * @throws InvocationException when invocation failed */\n+     * @throws InvocationException when invocation failed\n+     * @author Mairbek Khadikov\n+     * @n\n+     */\n     @Override\n     public R invoke(Q query, E endpoint) throws InvocationException {\n         log.debug(\"Invoked query {} on endpoint {}\", query, endpoint);\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/62/WaitingInvoker.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/62/WaitingInvoker.java\nindex 10db43bcb2f..e1e7de9c10a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/errored/1/62/WaitingInvoker.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/griddynamics-jagger/naturalize/62/WaitingInvoker.java\n@@ -71,4 +71,4 @@ public class WaitingInvoker<Q, R, E> implements Invoker<Q, R, E> {\n         }\n         return result;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "32",
                    "severity": "warning",
                    "message": "Line is longer than 150 characters (found 237).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}