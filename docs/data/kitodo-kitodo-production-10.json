{
    "project_name": "kitodo-kitodo-production",
    "error_id": "10",
    "information": {
        "errors": [
            {
                "line": "73",
                "column": "21",
                "severity": "warning",
                "message": "'array initialization' child has incorrect indentation level 20, expected level should be one of the following: 16, 68, 71.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "        } catch (DAOException e) {\n            Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(),\n                    processId}, logger, e);\n        }\n    }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/10/CommentForm.java\nindex 3c99949c0df..93b84fd4d23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler/10/CommentForm.java\n@@ -69,8 +69,7 @@ public class CommentForm extends BaseForm {\n         try {\n             this.process = ServiceManager.getProcessService().getById(processId);\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(),\n-                    processId}, logger, e);\n+            Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(), processId}, logger, e);\n         }\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/10/CommentForm.java\nindex 3c99949c0df..2e6e49746fc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/intellij/10/CommentForm.java\n@@ -70,7 +70,7 @@ public class CommentForm extends BaseForm {\n             this.process = ServiceManager.getProcessService().getById(processId);\n         } catch (DAOException e) {\n             Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(),\n-                    processId}, logger, e);\n+                processId}, logger, e);\n         }\n     }\n \n@@ -114,8 +114,8 @@ public class CommentForm extends BaseForm {\n             try {\n                 comment.setCorrectionTask(ServiceManager.getTaskService().getById(Integer.parseInt(getCorrectionTaskId())));\n             } catch (NumberFormatException | DAOException e) {\n-                Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[]{ObjectType.TASK.getTranslationSingular(), getCorrectionTaskId()},\n-                        logger, e);\n+                Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.TASK.getTranslationSingular(), getCorrectionTaskId()},\n+                    logger, e);\n                 return null;\n             }\n             comment.setType(CommentType.ERROR);\n@@ -217,8 +217,8 @@ public class CommentForm extends BaseForm {\n             return Collections.emptyList();\n         } else {\n             return ServiceManager.getTaskService().getPreviousTasksForProblemReporting(\n-                    currentTaskOptions.get(0).getOrdering(),\n-                    this.process.getId());\n+                currentTaskOptions.get(0).getOrdering(),\n+                this.process.getId());\n         }\n     }\n \n@@ -246,7 +246,7 @@ public class CommentForm extends BaseForm {\n         for (Task task : batchHelper.getSteps()) {\n             for (Comment processComment : ServiceManager.getCommentService().getAllCommentsByProcess(task.getProcess())) {\n                 if (!processComment.isCorrected()\n-                        && processComment.getCorrectionTask().getTitle().equals(comment.getCorrectionTask().getTitle())) {\n+                    && processComment.getCorrectionTask().getTitle().equals(comment.getCorrectionTask().getTitle())) {\n                     solveProblem(processComment);\n                 }\n             }\n@@ -269,16 +269,15 @@ public class CommentForm extends BaseForm {\n             }\n         } catch (DAOException e) {\n             Helper.setErrorMessage(ERROR_LOADING_ONE,\n-                    new Object[] {ObjectType.PROCESS.getTranslationSingular(), this.currentTask.getProcess().getId()},\n-                    logger, e);\n+                new Object[] {ObjectType.PROCESS.getTranslationSingular(), this.currentTask.getProcess().getId()},\n+                logger, e);\n         }\n     }\n \n     /**\n      * Set current task by ID.\n      *\n-     * @param taskId\n-     *          ID of task to set\n+     * @param taskId ID of task to set\n      */\n     public void setCurrentTaskById(int taskId) {\n         try {\n@@ -286,7 +285,7 @@ public class CommentForm extends BaseForm {\n             this.setProcessById(this.currentTask.getProcess().getId());\n         } catch (DAOException e) {\n             Helper.setErrorMessage(ERROR_LOADING_ONE,\n-                    new Object[] {ObjectType.TASK.getTranslationSingular(), taskId}, logger, e);\n+                new Object[] {ObjectType.TASK.getTranslationSingular(), taskId}, logger, e);\n         }\n     }\n \n@@ -333,7 +332,7 @@ public class CommentForm extends BaseForm {\n             return \"\";\n         } else {\n             return MessageFormat.format(Helper.getTranslation(\"dataEditor.comment.parallelTaskInWorkText\"),\n-                    concurrentTasks.get(0).getTitle(), concurrentTasks.get(0).getProcessingUser().getFullName());\n+                concurrentTasks.get(0).getTitle(), concurrentTasks.get(0).getProcessingUser().getFullName());\n         }\n     }\n \n",
            "diff_size": 12
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "73",
                    "column": "5",
                    "severity": "warning",
                    "message": "'processId' has incorrect indentation level 4, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/10/CommentForm.java\nindex 3c99949c0df..d0a6c8182ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/naturalize/10/CommentForm.java\n@@ -70,7 +70,7 @@ public class CommentForm extends BaseForm {\n             this.process = ServiceManager.getProcessService().getById(processId);\n         } catch (DAOException e) {\n             Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(),\n-                    processId}, logger, e);\n+    processId}, logger, e);\n         }\n     }\n \n@@ -364,4 +364,4 @@ public class CommentForm extends BaseForm {\n         this.currentTask = currentTask;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "250",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "282",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 148).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "306",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 165).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "380",
                    "severity": "warning",
                    "message": "Line is longer than 140 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/10/CommentForm.java\nindex 3c99949c0df..067a1a65153 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/codebuff/10/CommentForm.java\n@@ -17,12 +17,10 @@ import java.util.Collections;\n import java.util.Date;\n import java.util.List;\n import java.util.Objects;\n-\n import javax.enterprise.context.SessionScoped;\n import javax.faces.context.FacesContext;\n import javax.inject.Named;\n import javax.servlet.http.HttpServletRequest;\n-\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n import org.kitodo.data.database.beans.Comment;\n@@ -42,6 +40,7 @@ import org.kitodo.production.services.workflow.WorkflowControllerService;\n @Named(\"CommentForm\")\n @SessionScoped\n public class CommentForm extends BaseForm {\n+\n     private static final Logger logger = LogManager.getLogger(CommentForm.class);\n     private boolean correctionComment = false;\n     private String commentMessage;\n@@ -56,6 +55,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @return value of process\n      */\n+\n+\n     public Process getProcess() {\n         return process;\n     }\n@@ -65,12 +66,16 @@ public class CommentForm extends BaseForm {\n      *\n      * @param processId process ID\n      */\n+\n+\n     public void setProcessById(int processId) {\n         try {\n             this.process = ServiceManager.getProcessService().getById(processId);\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(),\n-                    processId}, logger, e);\n+            Helper.setErrorMessage(\"errorLoadingOne\",\n+                new Object[] {ObjectType.PROCESS.getTranslationSingular(), processId },\n+                logger,\n+                e);\n         }\n     }\n \n@@ -79,6 +84,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @return List of Comments.\n      */\n+\n+\n     public List<Comment> getAllComments() {\n         return ServiceManager.getCommentService().getAllCommentsByProcess(this.process);\n     }\n@@ -88,6 +95,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @return value of message.\n      */\n+\n+\n     public String getCommentMessage() {\n         return this.commentMessage;\n     }\n@@ -97,6 +106,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @param commentMessage String\n      */\n+\n+\n     public void setCommentMessage(String commentMessage) {\n         this.commentMessage = commentMessage;\n     }\n@@ -104,6 +115,8 @@ public class CommentForm extends BaseForm {\n     /**\n      * Add a new comment to the process.\n      */\n+\n+\n     public String addComment() {\n         Comment comment = new Comment();\n         comment.setMessage(getCommentMessage());\n@@ -114,8 +127,11 @@ public class CommentForm extends BaseForm {\n             try {\n                 comment.setCorrectionTask(ServiceManager.getTaskService().getById(Integer.parseInt(getCorrectionTaskId())));\n             } catch (NumberFormatException | DAOException e) {\n-                Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[]{ObjectType.TASK.getTranslationSingular(), getCorrectionTaskId()},\n-                        logger, e);\n+                Helper.setErrorMessage(ERROR_LOADING_ONE,\n+                    new Object[] {ObjectType.TASK.getTranslationSingular(),\n+                                  getCorrectionTaskId()},\n+                    logger,\n+                    e);\n                 return null;\n             }\n             comment.setType(CommentType.ERROR);\n@@ -138,6 +154,7 @@ public class CommentForm extends BaseForm {\n         return null;\n     }\n \n+\n     private String redirect() {\n         HttpServletRequest origRequest = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();\n         if (origRequest.getRequestURI().contains(\"metadataEditor\")) {\n@@ -150,6 +167,8 @@ public class CommentForm extends BaseForm {\n     /**\n      * Add a new comment to all batch processes.\n      */\n+\n+\n     public String addCommentToAllBatchProcesses() {\n         for (Task task : this.batchHelper.getSteps()) {\n             this.currentTask = task;\n@@ -161,6 +180,8 @@ public class CommentForm extends BaseForm {\n     /**\n      * Report the problem.\n      */\n+\n+\n     private void reportProblem(Comment comment) {\n         try {\n             this.workflowControllerService.reportProblem(comment);\n@@ -175,6 +196,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @return value of correction comment\n      */\n+\n+\n     public boolean isCorrectionComment() {\n         return correctionComment;\n     }\n@@ -184,6 +207,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @param correctionComment as boolean\n      */\n+\n+\n     public void setCorrectionComment(boolean correctionComment) {\n         this.correctionComment = correctionComment;\n     }\n@@ -193,6 +218,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @return value of correctionTaskId\n      */\n+\n+\n     public String getCorrectionTaskId() {\n         return correctionTaskId;\n     }\n@@ -202,6 +229,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @param correctionTaskId as java.lang.String\n      */\n+\n+\n     public void setCorrectionTaskId(String correctionTaskId) {\n         this.correctionTaskId = correctionTaskId;\n     }\n@@ -209,6 +238,8 @@ public class CommentForm extends BaseForm {\n     /**\n      * Correction message to previous Tasks.\n      */\n+\n+\n     public List<Task> getPreviousStepsForProblemReporting() {\n         refreshProcess(this.process);\n         List<Task> currentTaskOptions = getCurrentTaskOptions();\n@@ -216,12 +247,11 @@ public class CommentForm extends BaseForm {\n             Helper.setErrorMessage(\"Invalid process state: no 'inwork' or 'open' task found!\");\n             return Collections.emptyList();\n         } else {\n-            return ServiceManager.getTaskService().getPreviousTasksForProblemReporting(\n-                    currentTaskOptions.get(0).getOrdering(),\n-                    this.process.getId());\n+            return ServiceManager.getTaskService().getPreviousTasksForProblemReporting(currentTaskOptions.get(0).getOrdering(), this.process.getId());\n         }\n     }\n \n+\n     public int getSizeOfPreviousStepsForProblemReporting() {\n         return getPreviousStepsForProblemReporting().size();\n     }\n@@ -229,6 +259,8 @@ public class CommentForm extends BaseForm {\n     /**\n      * Solve the problem.\n      */\n+\n+\n     public String solveProblem(Comment comment) {\n         try {\n             this.workflowControllerService.solveProblem(comment);\n@@ -242,11 +274,12 @@ public class CommentForm extends BaseForm {\n     /**\n      * Solve the problem to all batch processes.\n      */\n+\n+\n     public String solveProblemForAllBatchProcesses(Comment comment) {\n         for (Task task : batchHelper.getSteps()) {\n             for (Comment processComment : ServiceManager.getCommentService().getAllCommentsByProcess(task.getProcess())) {\n-                if (!processComment.isCorrected()\n-                        && processComment.getCorrectionTask().getTitle().equals(comment.getCorrectionTask().getTitle())) {\n+                if (!processComment.isCorrected() && processComment.getCorrectionTask().getTitle().equals(comment.getCorrectionTask().getTitle())) {\n                     solveProblem(processComment);\n                 }\n             }\n@@ -259,6 +292,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @param process Object process to refresh\n      */\n+\n+\n     private void refreshProcess(Process process) {\n         try {\n             if (!Objects.equals(process.getId(), 0)) {\n@@ -268,9 +303,7 @@ public class CommentForm extends BaseForm {\n                 }\n             }\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(ERROR_LOADING_ONE,\n-                    new Object[] {ObjectType.PROCESS.getTranslationSingular(), this.currentTask.getProcess().getId()},\n-                    logger, e);\n+            Helper.setErrorMessage(ERROR_LOADING_ONE, new Object[] {ObjectType.PROCESS.getTranslationSingular(), this.currentTask.getProcess().getId() }, logger, e);\n         }\n     }\n \n@@ -280,13 +313,17 @@ public class CommentForm extends BaseForm {\n      * @param taskId\n      *          ID of task to set\n      */\n+\n+\n     public void setCurrentTaskById(int taskId) {\n         try {\n             this.currentTask = ServiceManager.getTaskService().getById(taskId);\n             this.setProcessById(this.currentTask.getProcess().getId());\n         } catch (DAOException e) {\n             Helper.setErrorMessage(ERROR_LOADING_ONE,\n-                    new Object[] {ObjectType.TASK.getTranslationSingular(), taskId}, logger, e);\n+                new Object[] {ObjectType.TASK.getTranslationSingular(), taskId },\n+                logger,\n+                e);\n         }\n     }\n \n@@ -295,6 +332,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @param batchHelper as org.kitodo.production.helper.batch.BatchTaskHelper\n      */\n+\n+\n     public void setBatchHelper(BatchTaskHelper batchHelper) {\n         this.batchHelper = batchHelper;\n         this.currentTask = this.batchHelper.getCurrentStep();\n@@ -303,6 +342,8 @@ public class CommentForm extends BaseForm {\n     /**\n      * Set default comment.\n      */\n+\n+\n     public void newComment() {\n         if (getSizeOfPreviousStepsForProblemReporting() > 0) {\n             setCorrectionTaskId(getPreviousStepsForProblemReporting().get(0).getId().toString());\n@@ -318,6 +359,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @return whether there are concurrent tasks in work or not\n      */\n+\n+\n     public boolean isConcurrentTaskInWork() {\n         return !TaskService.getListOfConcurrentTasksInWork(this.process, this.currentTask).isEmpty();\n     }\n@@ -327,13 +370,14 @@ public class CommentForm extends BaseForm {\n      *\n      * @return concurrent task in work tooltip\n      */\n+\n+\n     public String getConcurrentTaskInWorkTooltip() {\n         List<Task> concurrentTasks = TaskService.getListOfConcurrentTasksInWork(this.process, this.currentTask);\n         if (concurrentTasks.isEmpty()) {\n             return \"\";\n         } else {\n-            return MessageFormat.format(Helper.getTranslation(\"dataEditor.comment.parallelTaskInWorkText\"),\n-                    concurrentTasks.get(0).getTitle(), concurrentTasks.get(0).getProcessingUser().getFullName());\n+            return MessageFormat.format(Helper.getTranslation(\"dataEditor.comment.parallelTaskInWorkText\"), concurrentTasks.get(0).getTitle(), concurrentTasks.get(0).getProcessingUser().getFullName());\n         }\n     }\n \n@@ -342,6 +386,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @return list of current task options for new correction comment\n      */\n+\n+\n     public List<Task> getCurrentTaskOptions() {\n         return TaskService.getCurrentTaskOptions(this.process);\n     }\n@@ -351,6 +397,8 @@ public class CommentForm extends BaseForm {\n      *\n      * @return value of currentTask\n      */\n+\n+\n     public Task getCurrentTask() {\n         return currentTask;\n     }\n@@ -360,8 +408,9 @@ public class CommentForm extends BaseForm {\n      *\n      * @param currentTask as org.kitodo.data.database.beans.Task\n      */\n+\n+\n     public void setCurrentTask(Task currentTask) {\n         this.currentTask = currentTask;\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 77
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/10/CommentForm.java\nindex 3c99949c0df..93b84fd4d23 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_random/10/CommentForm.java\n@@ -69,8 +69,7 @@ public class CommentForm extends BaseForm {\n         try {\n             this.process = ServiceManager.getProcessService().getById(processId);\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(),\n-                    processId}, logger, e);\n+            Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(), processId}, logger, e);\n         }\n     }\n \n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/10/CommentForm.java\nindex 3c99949c0df..dc6701733b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/errored/1/10/CommentForm.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/kitodo-kitodo-production/styler_three_grams/10/CommentForm.java\n@@ -69,8 +69,7 @@ public class CommentForm extends BaseForm {\n         try {\n             this.process = ServiceManager.getProcessService().getById(processId);\n         } catch (DAOException e) {\n-            Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(),\n-                    processId}, logger, e);\n+            Helper.setErrorMessage(\"errorLoadingOne\", new Object[] {ObjectType.PROCESS.getTranslationSingular(),processId}, logger, e);\n         }\n     }\n \n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}