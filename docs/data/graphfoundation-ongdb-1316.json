{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1316",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "104",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "113",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "130",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "140",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "192",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "137",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "216",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "128",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "245",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "258",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "265",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "279",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "7",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1316/SchemaRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1316/SchemaRecordCheck.java\nindex b9c508c0024..3b535edecb7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1316/SchemaRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1316/SchemaRecordCheck.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.consistency.checking;\n \n import java.util.HashMap;\n@@ -41,268 +42,263 @@ import org.neo4j.storageengine.api.schema.SchemaRule;\n /**\n  * Note that this class builds up an in-memory representation of the complete schema store by being used in\n  * multiple phases.\n- *\n+ * <p>\n  * This differs from other store checks, where we deliberately avoid building up state, expecting store to generally be\n  * larger than available memory. However, it is safe to make the assumption that schema storage will fit in memory\n  * because the same assumption is also made by the online database.\n  */\n public class SchemaRecordCheck implements RecordCheck<DynamicRecord, ConsistencyReport.SchemaConsistencyReport>\n {\n-    final SchemaRuleAccess ruleAccess;\n+  final SchemaRuleAccess ruleAccess;\n \n-    private final IndexAccessors indexAccessors;\n-    private final Map<Long, DynamicRecord> indexObligations;\n-    private final Map<Long, DynamicRecord> constraintObligations;\n-    private final Map<SchemaRule, DynamicRecord> verifiedRulesWithRecords;\n-    private final CheckStrategy strategy;\n+  private final IndexAccessors indexAccessors;\n+  private final Map<Long, DynamicRecord> indexObligations;\n+  private final Map<Long, DynamicRecord> constraintObligations;\n+  private final Map<SchemaRule, DynamicRecord> verifiedRulesWithRecords;\n+  private final CheckStrategy strategy;\n \n-    public SchemaRecordCheck( SchemaRuleAccess ruleAccess, IndexAccessors indexAccessors )\n-    {\n-        this.ruleAccess = ruleAccess;\n-        this.indexAccessors = indexAccessors;\n-        this.indexObligations = new HashMap<>();\n-        this.constraintObligations = new HashMap<>();\n-        this.verifiedRulesWithRecords = new HashMap<>();\n-        this.strategy = new RulesCheckStrategy();\n-    }\n+  public SchemaRecordCheck(SchemaRuleAccess ruleAccess, IndexAccessors indexAccessors)\n+  {\n+    this.ruleAccess = ruleAccess;\n+    this.indexAccessors = indexAccessors;\n+    this.indexObligations = new HashMap<>();\n+    this.constraintObligations = new HashMap<>();\n+    this.verifiedRulesWithRecords = new HashMap<>();\n+    this.strategy = new RulesCheckStrategy();\n+  }\n \n-    private SchemaRecordCheck(\n-            SchemaRuleAccess ruleAccess,\n-            IndexAccessors indexAccessors,\n-            Map<Long, DynamicRecord> indexObligations,\n-            Map<Long, DynamicRecord> constraintObligations,\n-            Map<SchemaRule, DynamicRecord> verifiedRulesWithRecords,\n-            CheckStrategy strategy )\n-    {\n-        this.ruleAccess = ruleAccess;\n-        this.indexAccessors = indexAccessors;\n-        this.indexObligations = indexObligations;\n-        this.constraintObligations = constraintObligations;\n-        this.verifiedRulesWithRecords = verifiedRulesWithRecords;\n-        this.strategy = strategy;\n-    }\n+  private SchemaRecordCheck(\n+      SchemaRuleAccess ruleAccess,\n+      IndexAccessors indexAccessors,\n+      Map<Long, DynamicRecord> indexObligations,\n+      Map<Long, DynamicRecord> constraintObligations,\n+      Map<SchemaRule, DynamicRecord> verifiedRulesWithRecords,\n+      CheckStrategy strategy)\n+  {\n+    this.ruleAccess = ruleAccess;\n+    this.indexAccessors = indexAccessors;\n+    this.indexObligations = indexObligations;\n+    this.constraintObligations = constraintObligations;\n+    this.verifiedRulesWithRecords = verifiedRulesWithRecords;\n+    this.strategy = strategy;\n+  }\n \n-    public SchemaRecordCheck forObligationChecking()\n+  public SchemaRecordCheck forObligationChecking()\n+  {\n+    return new SchemaRecordCheck(ruleAccess, indexAccessors, indexObligations, constraintObligations,\n+        verifiedRulesWithRecords, new ObligationsCheckStrategy());\n+  }\n+\n+  @Override\n+  public void check(DynamicRecord record,\n+                    CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine,\n+                    RecordAccess records)\n+  {\n+    if (record.inUse() && record.isStartRecord())\n     {\n-        return new SchemaRecordCheck( ruleAccess, indexAccessors, indexObligations, constraintObligations,\n-                verifiedRulesWithRecords, new ObligationsCheckStrategy() );\n+      // parse schema rule\n+      SchemaRule rule;\n+      try\n+      {\n+        rule = ruleAccess.loadSingleSchemaRule(record.getId());\n+      } catch (MalformedSchemaRuleException e)\n+      {\n+        engine.report().malformedSchemaRule();\n+        return;\n+      }\n+\n+      if (rule instanceof IndexRule)\n+      {\n+        strategy.checkIndexRule((IndexRule) rule, record, records, engine);\n+      } else if (rule instanceof ConstraintRule)\n+      {\n+        strategy.checkConstraintRule((ConstraintRule) rule, record, records, engine);\n+      } else\n+      {\n+        engine.report().unsupportedSchemaRuleKind(null);\n+      }\n     }\n+  }\n+\n+  private interface CheckStrategy\n+  {\n+    void checkIndexRule(IndexRule rule, DynamicRecord record, RecordAccess records,\n+                        CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine);\n \n+    void checkConstraintRule(ConstraintRule rule, DynamicRecord record,\n+                             RecordAccess records, CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine);\n+  }\n+\n+  /**\n+   * Verify rules can be de-serialized, have valid forward references, and build up internal state\n+   * for checking in back references in later phases (obligations)\n+   */\n+  private class RulesCheckStrategy implements CheckStrategy\n+  {\n     @Override\n-    public void check( DynamicRecord record,\n-                       CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine,\n-                       RecordAccess records )\n+    public void checkIndexRule(IndexRule rule, DynamicRecord record, RecordAccess records,\n+                               CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine)\n     {\n-        if ( record.inUse() && record.isStartRecord() )\n-        {\n-            // parse schema rule\n-            SchemaRule rule;\n-            try\n-            {\n-                rule = ruleAccess.loadSingleSchemaRule( record.getId() );\n-            }\n-            catch ( MalformedSchemaRuleException e )\n-            {\n-                engine.report().malformedSchemaRule();\n-                return;\n-            }\n+      checkSchema(rule, record, records, engine);\n \n-            if ( rule instanceof IndexRule )\n-            {\n-                strategy.checkIndexRule( (IndexRule)rule, record, records, engine );\n-            }\n-            else if ( rule instanceof ConstraintRule )\n-            {\n-                strategy.checkConstraintRule( (ConstraintRule) rule, record, records, engine );\n-            }\n-            else\n-            {\n-                engine.report().unsupportedSchemaRuleKind( null );\n-            }\n+      if (rule.canSupportUniqueConstraint() && rule.getOwningConstraint() != null)\n+      {\n+        DynamicRecord previousObligation = constraintObligations.put(rule.getOwningConstraint(), record.clone());\n+        if (previousObligation != null)\n+        {\n+          engine.report().duplicateObligation(previousObligation);\n         }\n+      }\n     }\n \n-    private interface CheckStrategy\n+    @Override\n+    public void checkConstraintRule(ConstraintRule rule, DynamicRecord record,\n+                                    RecordAccess records, CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine)\n     {\n-        void checkIndexRule( IndexRule rule, DynamicRecord record, RecordAccess records,\n-                CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine );\n+      checkSchema(rule, record, records, engine);\n \n-        void checkConstraintRule( ConstraintRule rule, DynamicRecord record,\n-                RecordAccess records, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine );\n+      if (rule.getConstraintDescriptor().enforcesUniqueness())\n+      {\n+        DynamicRecord previousObligation = indexObligations.put(rule.getOwnedIndex(), record.clone());\n+        if (previousObligation != null)\n+        {\n+          engine.report().duplicateObligation(previousObligation);\n+        }\n+      }\n     }\n+  }\n \n-    /**\n-     * Verify rules can be de-serialized, have valid forward references, and build up internal state\n-     * for checking in back references in later phases (obligations)\n-     */\n-    private class RulesCheckStrategy implements CheckStrategy\n+  /**\n+   * Verify obligations, that is correct back references\n+   */\n+  private class ObligationsCheckStrategy implements CheckStrategy\n+  {\n+    @Override\n+    public void checkIndexRule(IndexRule rule, DynamicRecord record, RecordAccess records,\n+                               CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine)\n     {\n-        @Override\n-        public void checkIndexRule( IndexRule rule, DynamicRecord record, RecordAccess records,\n-                CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n+      if (rule.canSupportUniqueConstraint())\n+      {\n+        DynamicRecord obligation = indexObligations.get(rule.getId());\n+        if (obligation == null) // no pointer to here\n         {\n-            checkSchema( rule, record, records, engine );\n-\n-            if ( rule.canSupportUniqueConstraint() && rule.getOwningConstraint() != null )\n-            {\n-                DynamicRecord previousObligation = constraintObligations.put( rule.getOwningConstraint(), record.clone() );\n-                if ( previousObligation != null )\n-                {\n-                    engine.report().duplicateObligation( previousObligation );\n-                }\n-            }\n-        }\n-\n-        @Override\n-        public void checkConstraintRule( ConstraintRule rule, DynamicRecord record,\n-                RecordAccess records, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n+          if (rule.getOwningConstraint() != null) // we only expect a pointer if we have an owner\n+          {\n+            engine.report().missingObligation(SchemaRule.Kind.UNIQUENESS_CONSTRAINT);\n+          }\n+        } else\n         {\n-            checkSchema( rule, record, records, engine );\n-\n-            if ( rule.getConstraintDescriptor().enforcesUniqueness() )\n-            {\n-                DynamicRecord previousObligation = indexObligations.put( rule.getOwnedIndex(), record.clone() );\n-                if ( previousObligation != null )\n-                {\n-                    engine.report().duplicateObligation( previousObligation );\n-                }\n-            }\n+          // if someone points to here, it must be our owner\n+          if (obligation.getId() != rule.getOwningConstraint())\n+          {\n+            engine.report().constraintIndexRuleNotReferencingBack(obligation);\n+          }\n         }\n+      }\n+      if (indexAccessors.notOnlineRules().contains(rule))\n+      {\n+        engine.report().schemaRuleNotOnline(rule);\n+      }\n     }\n \n-    /**\n-     * Verify obligations, that is correct back references\n-     */\n-    private class ObligationsCheckStrategy implements CheckStrategy\n+    @Override\n+    public void checkConstraintRule(ConstraintRule rule, DynamicRecord record,\n+                                    RecordAccess records, CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine)\n     {\n-        @Override\n-        public void checkIndexRule( IndexRule rule, DynamicRecord record, RecordAccess records,\n-                CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n+      if (rule.getConstraintDescriptor().enforcesUniqueness())\n+      {\n+        DynamicRecord obligation = constraintObligations.get(rule.getId());\n+        if (obligation == null)\n         {\n-            if ( rule.canSupportUniqueConstraint() )\n-            {\n-                DynamicRecord obligation = indexObligations.get( rule.getId() );\n-                if ( obligation == null ) // no pointer to here\n-                {\n-                    if ( rule.getOwningConstraint() != null ) // we only expect a pointer if we have an owner\n-                    {\n-                        engine.report().missingObligation( SchemaRule.Kind.UNIQUENESS_CONSTRAINT );\n-                    }\n-                }\n-                else\n-                {\n-                    // if someone points to here, it must be our owner\n-                    if ( obligation.getId() != rule.getOwningConstraint() )\n-                    {\n-                        engine.report().constraintIndexRuleNotReferencingBack( obligation );\n-                    }\n-                }\n-            }\n-            if ( indexAccessors.notOnlineRules().contains( rule ) )\n-            {\n-                engine.report().schemaRuleNotOnline( rule );\n-            }\n-        }\n-\n-        @Override\n-        public void checkConstraintRule( ConstraintRule rule, DynamicRecord record,\n-                RecordAccess records, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n+          engine.report().missingObligation(SchemaRule.Kind.CONSTRAINT_INDEX_RULE);\n+        } else\n         {\n-            if ( rule.getConstraintDescriptor().enforcesUniqueness() )\n-            {\n-                DynamicRecord obligation = constraintObligations.get( rule.getId() );\n-                if ( obligation == null )\n-                {\n-                    engine.report().missingObligation( SchemaRule.Kind.CONSTRAINT_INDEX_RULE );\n-                }\n-                else\n-                {\n-                    if ( obligation.getId() != rule.getOwnedIndex() )\n-                    {\n-                        engine.report().uniquenessConstraintNotReferencingBack( obligation );\n-                    }\n-                }\n-            }\n+          if (obligation.getId() != rule.getOwnedIndex())\n+          {\n+            engine.report().uniquenessConstraintNotReferencingBack(obligation);\n+          }\n         }\n+      }\n     }\n+  }\n+\n+  private void checkSchema(SchemaRule rule, DynamicRecord record,\n+                           RecordAccess records, CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine)\n+  {\n+    rule.schema().processWith(new CheckSchema(engine, records));\n+    checkForDuplicates(rule, record, engine);\n+  }\n \n-    private void checkSchema( SchemaRule rule, DynamicRecord record,\n-            RecordAccess records, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n+  static class CheckSchema implements SchemaProcessor\n+  {\n+    private final CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine;\n+    private final RecordAccess records;\n+\n+    CheckSchema(CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine,\n+                RecordAccess records)\n     {\n-        rule.schema().processWith( new CheckSchema( engine, records ) );\n-        checkForDuplicates( rule, record, engine );\n+      this.engine = engine;\n+      this.records = records;\n     }\n \n-    static class CheckSchema implements SchemaProcessor\n+    @Override\n+    public void processSpecific(LabelSchemaDescriptor schema)\n     {\n-        private final CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine;\n-        private final RecordAccess records;\n+      engine.comparativeCheck(records.label(schema.getLabelId()), VALID_LABEL);\n+      for (int propertyId : schema.getPropertyIds())\n+      {\n+        engine.comparativeCheck(records.propertyKey(propertyId), VALID_PROPERTY_KEY);\n+      }\n+    }\n \n-        CheckSchema( CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine,\n-                RecordAccess records )\n-        {\n-            this.engine = engine;\n-            this.records = records;\n-        }\n+    @Override\n+    public void processSpecific(RelationTypeSchemaDescriptor schema)\n+    {\n+      engine.comparativeCheck(records.relationshipType(schema.getRelTypeId()), VALID_RELATIONSHIP_TYPE);\n+      for (int propertyId : schema.getPropertyIds())\n+      {\n+        engine.comparativeCheck(records.propertyKey(propertyId), VALID_PROPERTY_KEY);\n+      }\n+    }\n+  }\n \n-        @Override\n-        public void processSpecific( LabelSchemaDescriptor schema )\n+  private void checkForDuplicates(SchemaRule rule, DynamicRecord record,\n+                                  CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine)\n+  {\n+    DynamicRecord previousContentRecord = verifiedRulesWithRecords.put(rule, record.clone());\n+    if (previousContentRecord != null)\n+    {\n+      engine.report().duplicateRuleContent(previousContentRecord);\n+    }\n+  }\n+\n+  private static final ComparativeRecordChecker<DynamicRecord, LabelTokenRecord,\n+      ConsistencyReport.SchemaConsistencyReport> VALID_LABEL =\n+      (record, labelTokenRecord, engine, records) ->\n+      {\n+        if (!labelTokenRecord.inUse())\n         {\n-            engine.comparativeCheck( records.label( schema.getLabelId() ), VALID_LABEL );\n-            for ( int propertyId : schema.getPropertyIds() )\n-            {\n-                engine.comparativeCheck( records.propertyKey( propertyId ), VALID_PROPERTY_KEY );\n-            }\n+          engine.report().labelNotInUse(labelTokenRecord);\n         }\n+      };\n \n-        @Override\n-        public void processSpecific( RelationTypeSchemaDescriptor schema )\n+  private static final ComparativeRecordChecker<DynamicRecord, RelationshipTypeTokenRecord,\n+      ConsistencyReport.SchemaConsistencyReport> VALID_RELATIONSHIP_TYPE =\n+      (record, relTypeTokenRecord, engine, records) ->\n+      {\n+        if (!relTypeTokenRecord.inUse())\n         {\n-            engine.comparativeCheck( records.relationshipType( schema.getRelTypeId() ), VALID_RELATIONSHIP_TYPE );\n-            for ( int propertyId : schema.getPropertyIds() )\n-            {\n-                engine.comparativeCheck( records.propertyKey( propertyId ), VALID_PROPERTY_KEY );\n-            }\n+          engine.report().relationshipTypeNotInUse(relTypeTokenRecord);\n         }\n-    }\n+      };\n \n-    private void checkForDuplicates( SchemaRule rule, DynamicRecord record,\n-            CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n-    {\n-        DynamicRecord previousContentRecord = verifiedRulesWithRecords.put( rule, record.clone() );\n-        if ( previousContentRecord != null )\n+  private static final ComparativeRecordChecker<DynamicRecord, PropertyKeyTokenRecord,\n+      ConsistencyReport.SchemaConsistencyReport> VALID_PROPERTY_KEY =\n+      (record, propertyKeyTokenRecord, engine, records) ->\n+      {\n+        if (!propertyKeyTokenRecord.inUse())\n         {\n-            engine.report().duplicateRuleContent( previousContentRecord );\n+          engine.report().propertyKeyNotInUse(propertyKeyTokenRecord);\n         }\n-    }\n-\n-    private static final ComparativeRecordChecker<DynamicRecord,LabelTokenRecord,\n-            ConsistencyReport.SchemaConsistencyReport> VALID_LABEL =\n-            ( record, labelTokenRecord, engine, records ) ->\n-            {\n-                if ( !labelTokenRecord.inUse() )\n-                {\n-                    engine.report().labelNotInUse( labelTokenRecord );\n-                }\n-            };\n-\n-    private static final ComparativeRecordChecker<DynamicRecord,RelationshipTypeTokenRecord,\n-            ConsistencyReport.SchemaConsistencyReport> VALID_RELATIONSHIP_TYPE =\n-            ( record, relTypeTokenRecord, engine, records ) ->\n-            {\n-                if ( !relTypeTokenRecord.inUse() )\n-                {\n-                    engine.report().relationshipTypeNotInUse( relTypeTokenRecord );\n-                }\n-            };\n-\n-    private static final ComparativeRecordChecker<DynamicRecord, PropertyKeyTokenRecord,\n-            ConsistencyReport.SchemaConsistencyReport> VALID_PROPERTY_KEY =\n-            ( record, propertyKeyTokenRecord, engine, records ) ->\n-            {\n-                if ( !propertyKeyTokenRecord.inUse() )\n-                {\n-                    engine.report().propertyKeyNotInUse( propertyKeyTokenRecord );\n-                }\n-            };\n+      };\n }\n",
            "diff_size": 322
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 187).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "122",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 238).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "168",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 175).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1316/SchemaRecordCheck.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1316/SchemaRecordCheck.java\nindex b9c508c0024..3ae2bd3d121 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1316/SchemaRecordCheck.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1316/SchemaRecordCheck.java\n@@ -51,9 +51,9 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n     final SchemaRuleAccess ruleAccess;\n \n     private final IndexAccessors indexAccessors;\n-    private final Map<Long, DynamicRecord> indexObligations;\n-    private final Map<Long, DynamicRecord> constraintObligations;\n-    private final Map<SchemaRule, DynamicRecord> verifiedRulesWithRecords;\n+    private final Map<Long,DynamicRecord> indexObligations;\n+    private final Map<Long,DynamicRecord> constraintObligations;\n+    private final Map<SchemaRule,DynamicRecord> verifiedRulesWithRecords;\n     private final CheckStrategy strategy;\n \n     public SchemaRecordCheck( SchemaRuleAccess ruleAccess, IndexAccessors indexAccessors )\n@@ -66,12 +66,8 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n         this.strategy = new RulesCheckStrategy();\n     }\n \n-    private SchemaRecordCheck(\n-            SchemaRuleAccess ruleAccess,\n-            IndexAccessors indexAccessors,\n-            Map<Long, DynamicRecord> indexObligations,\n-            Map<Long, DynamicRecord> constraintObligations,\n-            Map<SchemaRule, DynamicRecord> verifiedRulesWithRecords,\n+    private SchemaRecordCheck( SchemaRuleAccess ruleAccess,\n+            IndexAccessors indexAccessors, Map<Long,DynamicRecord> indexObligations, Map<Long,DynamicRecord> constraintObligations, Map<SchemaRule,DynamicRecord> verifiedRulesWithRecords,\n             CheckStrategy strategy )\n     {\n         this.ruleAccess = ruleAccess;\n@@ -89,10 +85,9 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n     }\n \n     @Override\n-    public void check( DynamicRecord record,\n-                       CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine,\n+    public void check( DynamicRecord record, CheckerEngine<DynamicRecord, ConsistencyReport.SchemaConsistencyReport> engine,\n                        RecordAccess records )\n-    {\n+{\n         if ( record.inUse() && record.isStartRecord() )\n         {\n             // parse schema rule\n@@ -109,7 +104,7 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n \n             if ( rule instanceof IndexRule )\n             {\n-                strategy.checkIndexRule( (IndexRule)rule, record, records, engine );\n+                strategy.checkIndexRule( (IndexRule) rule, record, records, engine );\n             }\n             else if ( rule instanceof ConstraintRule )\n             {\n@@ -124,10 +119,7 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n \n     private interface CheckStrategy\n     {\n-        void checkIndexRule( IndexRule rule, DynamicRecord record, RecordAccess records,\n-                CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine );\n-\n-        void checkConstraintRule( ConstraintRule rule, DynamicRecord record,\n+        void checkIndexRule( IndexRule rule, DynamicRecord record, RecordAccess records, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine ); void checkConstraintRule( ConstraintRule rule, DynamicRecord record,\n                 RecordAccess records, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine );\n     }\n \n@@ -138,12 +130,10 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n     private class RulesCheckStrategy implements CheckStrategy\n     {\n         @Override\n-        public void checkIndexRule( IndexRule rule, DynamicRecord record, RecordAccess records,\n-                CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n+        public void checkIndexRule( IndexRule rule, DynamicRecord record, RecordAccess records, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n         {\n             checkSchema( rule, record, records, engine );\n-\n-            if ( rule.canSupportUniqueConstraint() && rule.getOwningConstraint() != null )\n+if ( rule.canSupportUniqueConstraint() && rule.getOwningConstraint() != null )\n             {\n                 DynamicRecord previousObligation = constraintObligations.put( rule.getOwningConstraint(), record.clone() );\n                 if ( previousObligation != null )\n@@ -158,8 +148,7 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n                 RecordAccess records, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n         {\n             checkSchema( rule, record, records, engine );\n-\n-            if ( rule.getConstraintDescriptor().enforcesUniqueness() )\n+if ( rule.getConstraintDescriptor().enforcesUniqueness() )\n             {\n                 DynamicRecord previousObligation = indexObligations.put( rule.getOwnedIndex(), record.clone() );\n                 if ( previousObligation != null )\n@@ -176,8 +165,7 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n     private class ObligationsCheckStrategy implements CheckStrategy\n     {\n         @Override\n-        public void checkIndexRule( IndexRule rule, DynamicRecord record, RecordAccess records,\n-                CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n+        public void checkIndexRule( IndexRule rule, DynamicRecord record, RecordAccess records, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n         {\n             if ( rule.canSupportUniqueConstraint() )\n             {\n@@ -266,8 +254,7 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n         }\n     }\n \n-    private void checkForDuplicates( SchemaRule rule, DynamicRecord record,\n-            CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n+    private void checkForDuplicates( SchemaRule rule, DynamicRecord record, CheckerEngine<DynamicRecord,ConsistencyReport.SchemaConsistencyReport> engine )\n     {\n         DynamicRecord previousContentRecord = verifiedRulesWithRecords.put( rule, record.clone() );\n         if ( previousContentRecord != null )\n@@ -277,8 +264,7 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n     }\n \n     private static final ComparativeRecordChecker<DynamicRecord,LabelTokenRecord,\n-            ConsistencyReport.SchemaConsistencyReport> VALID_LABEL =\n-            ( record, labelTokenRecord, engine, records ) ->\n+            ConsistencyReport.SchemaConsistencyReport> VALID_LABEL = ( record, labelTokenRecord, engine, records ) ->\n             {\n                 if ( !labelTokenRecord.inUse() )\n                 {\n@@ -286,9 +272,8 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n                 }\n             };\n \n-    private static final ComparativeRecordChecker<DynamicRecord,RelationshipTypeTokenRecord,\n-            ConsistencyReport.SchemaConsistencyReport> VALID_RELATIONSHIP_TYPE =\n-            ( record, relTypeTokenRecord, engine, records ) ->\n+private static final ComparativeRecordChecker<DynamicRecord,RelationshipTypeTokenRecord,\n+            ConsistencyReport.SchemaConsistencyReport> VALID_RELATIONSHIP_TYPE = ( record, relTypeTokenRecord, engine, records ) ->\n             {\n                 if ( !relTypeTokenRecord.inUse() )\n                 {\n@@ -296,13 +281,12 @@ public class SchemaRecordCheck implements RecordCheck<DynamicRecord, Consistency\n                 }\n             };\n \n-    private static final ComparativeRecordChecker<DynamicRecord, PropertyKeyTokenRecord,\n-            ConsistencyReport.SchemaConsistencyReport> VALID_PROPERTY_KEY =\n-            ( record, propertyKeyTokenRecord, engine, records ) ->\n+private static final ComparativeRecordChecker<DynamicRecord, PropertyKeyTokenRecord,\n+            ConsistencyReport.SchemaConsistencyReport> VALID_PROPERTY_KEY = ( record, propertyKeyTokenRecord, engine, records ) ->\n             {\n                 if ( !propertyKeyTokenRecord.inUse() )\n                 {\n                     engine.report().propertyKeyNotInUse( propertyKeyTokenRecord );\n                 }\n             };\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 36
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}