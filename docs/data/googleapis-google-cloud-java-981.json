{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "981",
    "information": {
        "errors": [
            {
                "line": "59",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 107).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      .build();\n  private static final Query<Entity> GQL2 =\n      Query.gqlQueryBuilder(Query.ResultType.ENTITY, \"select * from kind1 where name = @name and age > @1\")\n      .setBinding(\"name\", \"name1\")\n      .addBinding(20)\n      .namespace(\"ns1\")",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/981/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/981/SerializationTest.java\nindex ef50270bcc6..09318cce52b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/981/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/981/SerializationTest.java\n@@ -47,20 +47,21 @@ public class SerializationTest {\n   private static final Key KEY2 = Key.builder(KEY1, \"v\", 2).build();\n   private static final DateTime DATE_TIME1 = DateTime.now();\n   private static final Blob BLOB1 = Blob.copyFrom(UTF_8.encode(\"hello world\"));\n-  private static final Cursor CURSOR1 = Cursor.copyFrom(new byte[] {1,2});\n+  private static final Cursor CURSOR1 = Cursor.copyFrom(new byte[] {1, 2});\n   private static final Cursor CURSOR2 = Cursor.copyFrom(new byte[] {10});\n   private static final Query<?> GQL1 =\n       Query.gqlQueryBuilder(\"select * from kind1 where name = @name and age > @1\")\n-      .setBinding(\"name\", \"name1\")\n-      .addBinding(20)\n-      .namespace(\"ns1\")\n-      .build();\n+          .setBinding(\"name\", \"name1\")\n+          .addBinding(20)\n+          .namespace(\"ns1\")\n+          .build();\n   private static final Query<Entity> GQL2 =\n-      Query.gqlQueryBuilder(Query.ResultType.ENTITY, \"select * from kind1 where name = @name and age > @1\")\n-      .setBinding(\"name\", \"name1\")\n-      .addBinding(20)\n-      .namespace(\"ns1\")\n-      .build();\n+      Query.gqlQueryBuilder(Query.ResultType.ENTITY,\n+          \"select * from kind1 where name = @name and age > @1\")\n+          .setBinding(\"name\", \"name1\")\n+          .addBinding(20)\n+          .namespace(\"ns1\")\n+          .build();\n   private static final Query<Entity> QUERY1 =\n       Query.entityQueryBuilder().kind(\"kind1\").build();\n   private static final Query<Key> QUERY2 = Query.keyQueryBuilder()\n@@ -115,19 +116,19 @@ public class SerializationTest {\n   @SuppressWarnings(\"rawtypes\")\n   private static final Multimap<Type, Value> TYPE_TO_VALUES =\n       ImmutableMultimap.<Type, Value>builder()\n-      .put(Type.NULL, NULL_VALUE)\n-      .put(Type.KEY, KEY_VALUE)\n-      .put(Type.STRING, STRING_VALUE)\n-      .putAll(Type.ENTITY, EMBEDDED_ENTITY_VALUE1, EMBEDDED_ENTITY_VALUE2,\n-          EMBEDDED_ENTITY_VALUE3)\n-      .put(Type.LIST, LIST_VALUE)\n-      .put(Type.LONG, LONG_VALUE)\n-      .put(Type.DOUBLE, DOUBLE_VALUE)\n-      .put(Type.BOOLEAN, BOOLEAN_VALUE)\n-      .put(Type.DATE_TIME, DATE_AND_TIME_VALUE)\n-      .put(Type.BLOB, BLOB_VALUE)\n-      .put(Type.RAW_VALUE, RAW_VALUE)\n-      .build();\n+          .put(Type.NULL, NULL_VALUE)\n+          .put(Type.KEY, KEY_VALUE)\n+          .put(Type.STRING, STRING_VALUE)\n+          .putAll(Type.ENTITY, EMBEDDED_ENTITY_VALUE1, EMBEDDED_ENTITY_VALUE2,\n+              EMBEDDED_ENTITY_VALUE3)\n+          .put(Type.LIST, LIST_VALUE)\n+          .put(Type.LONG, LONG_VALUE)\n+          .put(Type.DOUBLE, DOUBLE_VALUE)\n+          .put(Type.BOOLEAN, BOOLEAN_VALUE)\n+          .put(Type.DATE_TIME, DATE_AND_TIME_VALUE)\n+          .put(Type.BLOB, BLOB_VALUE)\n+          .put(Type.RAW_VALUE, RAW_VALUE)\n+          .build();\n \n   @Test\n   public void testValues() throws Exception {\n@@ -145,7 +146,7 @@ public class SerializationTest {\n \n   @Test\n   public void testTypes() throws Exception {\n-    Serializable[] types = { KEY1, KEY2, INCOMPLETE_KEY1, INCOMPLETE_KEY2, ENTITY1, ENTITY2,\n+    Serializable[] types = {KEY1, KEY2, INCOMPLETE_KEY1, INCOMPLETE_KEY2, ENTITY1, ENTITY2,\n         ENTITY3, EMBEDDED_ENTITY, PROJECTION_ENTITY, DATE_TIME1, BLOB1, CURSOR1, GQL1, GQL2,\n         QUERY1, QUERY2, QUERY3};\n     for (Serializable obj : types) {\n@@ -165,7 +166,7 @@ public class SerializationTest {\n       output.writeObject(obj);\n     }\n     try (ObjectInputStream input =\n-        new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n+             new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n       return (T) input.readObject();\n     }\n   }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "130",
                    "severity": "warning",
                    "message": "'method def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/981/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/981/SerializationTest.java\nindex ef50270bcc6..0c8898a47ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/981/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/981/SerializationTest.java\n@@ -47,7 +47,7 @@ public class SerializationTest {\n   private static final Key KEY2 = Key.builder(KEY1, \"v\", 2).build();\n   private static final DateTime DATE_TIME1 = DateTime.now();\n   private static final Blob BLOB1 = Blob.copyFrom(UTF_8.encode(\"hello world\"));\n-  private static final Cursor CURSOR1 = Cursor.copyFrom(new byte[] {1,2});\n+  private static final Cursor CURSOR1 = Cursor.copyFrom(new byte[] {1, 2});\n   private static final Cursor CURSOR2 = Cursor.copyFrom(new byte[] {10});\n   private static final Query<?> GQL1 =\n       Query.gqlQueryBuilder(\"select * from kind1 where name = @name and age > @1\")\n@@ -114,13 +114,11 @@ public class SerializationTest {\n \n   @SuppressWarnings(\"rawtypes\")\n   private static final Multimap<Type, Value> TYPE_TO_VALUES =\n-      ImmutableMultimap.<Type, Value>builder()\n-      .put(Type.NULL, NULL_VALUE)\n+      ImmutableMultimap.<Type, Value>builder().put(Type.NULL, NULL_VALUE)\n       .put(Type.KEY, KEY_VALUE)\n       .put(Type.STRING, STRING_VALUE)\n       .putAll(Type.ENTITY, EMBEDDED_ENTITY_VALUE1, EMBEDDED_ENTITY_VALUE2,\n-          EMBEDDED_ENTITY_VALUE3)\n-      .put(Type.LIST, LIST_VALUE)\n+          EMBEDDED_ENTITY_VALUE3).put(Type.LIST, LIST_VALUE)\n       .put(Type.LONG, LONG_VALUE)\n       .put(Type.DOUBLE, DOUBLE_VALUE)\n       .put(Type.BOOLEAN, BOOLEAN_VALUE)\n@@ -129,7 +127,7 @@ public class SerializationTest {\n       .put(Type.RAW_VALUE, RAW_VALUE)\n       .build();\n \n-  @Test\n+@Test\n   public void testValues() throws Exception {\n     for (Type type : Type.values()) {\n       for (Value<?> value : TYPE_TO_VALUES.get(type)) {\n@@ -169,4 +167,4 @@ public class SerializationTest {\n       return (T) input.readObject();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "41",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "49",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 214).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "53",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 351).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "65",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 289).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "66",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 533).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "91",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 201).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/981/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/981/SerializationTest.java\nindex ef50270bcc6..f716c1ea913 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/981/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/981/SerializationTest.java\n@@ -28,57 +28,29 @@ import com.google.gcloud.datastore.StructuredQuery.OrderBy;\n import com.google.gcloud.datastore.StructuredQuery.Projection;\n import com.google.gcloud.datastore.StructuredQuery.PropertyFilter;\n import com.google.gcloud.datastore.Value.Type;\n-\n import org.junit.Test;\n-\n import java.io.ByteArrayInputStream;\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n \n+\n public class SerializationTest {\n \n-  private static final IncompleteKey INCOMPLETE_KEY1 =\n-      IncompleteKey.builder(\"ds\", \"k\").ancestors(PathElement.of(\"p\", 1)).build();\n+  private static final IncompleteKey INCOMPLETE_KEY1 = IncompleteKey.builder(\"ds\", \"k\").ancestors(PathElement.of(\"p\", 1)).build();\n   private static final Key KEY1 = Key.builder(\"ds\", \"k\", \"n\").build();\n-  private static final IncompleteKey INCOMPLETE_KEY2 =\n-      IncompleteKey.builder(KEY1, \"v\").ancestors(PathElement.of(\"p\", 1)).build();\n+  private static final IncompleteKey INCOMPLETE_KEY2 = IncompleteKey.builder(KEY1, \"v\").ancestors(PathElement.of(\"p\", 1)).build();\n   private static final Key KEY2 = Key.builder(KEY1, \"v\", 2).build();\n   private static final DateTime DATE_TIME1 = DateTime.now();\n   private static final Blob BLOB1 = Blob.copyFrom(UTF_8.encode(\"hello world\"));\n-  private static final Cursor CURSOR1 = Cursor.copyFrom(new byte[] {1,2});\n-  private static final Cursor CURSOR2 = Cursor.copyFrom(new byte[] {10});\n-  private static final Query<?> GQL1 =\n-      Query.gqlQueryBuilder(\"select * from kind1 where name = @name and age > @1\")\n-      .setBinding(\"name\", \"name1\")\n-      .addBinding(20)\n-      .namespace(\"ns1\")\n-      .build();\n-  private static final Query<Entity> GQL2 =\n-      Query.gqlQueryBuilder(Query.ResultType.ENTITY, \"select * from kind1 where name = @name and age > @1\")\n-      .setBinding(\"name\", \"name1\")\n-      .addBinding(20)\n-      .namespace(\"ns1\")\n-      .build();\n-  private static final Query<Entity> QUERY1 =\n-      Query.entityQueryBuilder().kind(\"kind1\").build();\n-  private static final Query<Key> QUERY2 = Query.keyQueryBuilder()\n-      .kind(\"k\")\n-      .filter(PropertyFilter.eq(\"p1\", \"hello\"))\n-      .build();\n-  private static final Query<ProjectionEntity> QUERY3 = Query.projectionQueryBuilder()\n-      .kind(\"k\")\n-      .namespace(\"ns1\")\n-      .projection(Projection.property(\"p\"))\n-      .limit(100)\n-      .offset(5)\n-      .startCursor(CURSOR1)\n-      .endCursor(CURSOR2)\n-      .filter(CompositeFilter.and(PropertyFilter.gt(\"p1\", 10), PropertyFilter.eq(\"a\", \"v\")))\n-      .addGroupBy(\"p\")\n-      .addOrderBy(OrderBy.asc(\"p\"))\n-      .build();\n+  private static final Cursor CURSOR1 = Cursor.copyFrom(new byte[]{1, 2});\n+  private static final Cursor CURSOR2 = Cursor.copyFrom(new byte[]{10});\n+  private static final Query<?> GQL1 = Query.gqlQueryBuilder(\"select * from kind1 where name = @name and age > @1\").setBinding(\"name\", \"name1\").addBinding(20).namespace(\"ns1\").build();\n+  private static final Query<Entity> GQL2 = Query.gqlQueryBuilder(Query.ResultType.ENTITY, \"select * from kind1 where name = @name and age > @1\").setBinding(\"name\", \"name1\").addBinding(20).namespace(\"ns1\").build();\n+  private static final Query<Entity> QUERY1 = Query.entityQueryBuilder().kind(\"kind1\").build();\n+  private static final Query<Key> QUERY2 = Query.keyQueryBuilder().kind(\"k\").filter(PropertyFilter.eq(\"p1\", \"hello\")).build();\n+  private static final Query<ProjectionEntity> QUERY3 = Query.projectionQueryBuilder().kind(\"k\").namespace(\"ns1\").projection(Projection.property(\"p\")).limit(100).offset(5).startCursor(CURSOR1).endCursor(CURSOR2).filter(CompositeFilter.and(PropertyFilter.gt(\"p1\", 10), PropertyFilter.eq(\"a\", \"v\"))).addGroupBy(\"p\").addOrderBy(OrderBy.asc(\"p\")).build();\n   private static final KeyValue KEY_VALUE = KeyValue.of(KEY1);\n   private static final NullValue NULL_VALUE = NullValue.builder().indexed(true).build();\n   private static final StringValue STRING_VALUE = StringValue.of(\"hello\");\n@@ -87,47 +59,18 @@ public class SerializationTest {\n   private static final BooleanValue BOOLEAN_VALUE = BooleanValue.of(true);\n   private static final DateTimeValue DATE_AND_TIME_VALUE = DateTimeValue.of(DateTime.now());\n   private static final BlobValue BLOB_VALUE = BlobValue.of(BLOB1);\n-  private static final RawValue RAW_VALUE = RawValue.of(\n-      DatastoreV1.Value.newBuilder().setBlobKeyValue(\"blob-key\").setMeaning(18).build());\n+  private static final RawValue RAW_VALUE = RawValue.of(DatastoreV1.Value.newBuilder().setBlobKeyValue(\"blob-key\").setMeaning(18).build());\n   private static final Entity ENTITY1 = Entity.builder(KEY1).build();\n-  private static final Entity ENTITY2 =\n-      Entity.builder(KEY2).set(\"null\", NullValue.of()).build();\n-  private static final Entity ENTITY3 = Entity.builder(KEY2)\n-      .set(\"p1\", StringValue.builder(\"hi1\").meaning(10).build())\n-      .set(\"p2\", StringValue.builder(\"hi2\").meaning(11).indexed(false).build())\n-      .set(\"p3\", LongValue.builder(100).indexed(false).meaning(100).build())\n-      .set(\"blob\", BLOB1)\n-      .build();\n-  private static final FullEntity<IncompleteKey> EMBEDDED_ENTITY = Entity.builder(INCOMPLETE_KEY1)\n-      .set(\"p1\", STRING_VALUE)\n-      .set(\"p2\", LongValue.builder(100).indexed(false).meaning(100).build())\n-      .build();\n+  private static final Entity ENTITY2 = Entity.builder(KEY2).set(\"null\", NullValue.of()).build();\n+  private static final Entity ENTITY3 = Entity.builder(KEY2).set(\"p1\", StringValue.builder(\"hi1\").meaning(10).build()).set(\"p2\", StringValue.builder(\"hi2\").meaning(11).indexed(false).build()).set(\"p3\", LongValue.builder(100).indexed(false).meaning(100).build()).set(\"blob\", BLOB1).build();\n+  private static final FullEntity<IncompleteKey> EMBEDDED_ENTITY = Entity.builder(INCOMPLETE_KEY1).set(\"p1\", STRING_VALUE).set(\"p2\", LongValue.builder(100).indexed(false).meaning(100).build()).build();\n   private static final EntityValue EMBEDDED_ENTITY_VALUE1 = EntityValue.of(ENTITY1);\n   private static final EntityValue EMBEDDED_ENTITY_VALUE2 = EntityValue.of(ENTITY2);\n   private static final EntityValue EMBEDDED_ENTITY_VALUE3 = EntityValue.of(EMBEDDED_ENTITY);\n-  private static final ListValue LIST_VALUE = ListValue.builder()\n-      .addValue(NULL_VALUE)\n-      .addValue(STRING_VALUE)\n-      .addValue(new NullValue())\n-      .build();\n+  private static final ListValue LIST_VALUE = ListValue.builder().addValue(NULL_VALUE).addValue(STRING_VALUE).addValue(new NullValue()).build();\n   private static final ProjectionEntity PROJECTION_ENTITY = ProjectionEntity.fromPb(ENTITY1.toPb());\n \n-  @SuppressWarnings(\"rawtypes\")\n-  private static final Multimap<Type, Value> TYPE_TO_VALUES =\n-      ImmutableMultimap.<Type, Value>builder()\n-      .put(Type.NULL, NULL_VALUE)\n-      .put(Type.KEY, KEY_VALUE)\n-      .put(Type.STRING, STRING_VALUE)\n-      .putAll(Type.ENTITY, EMBEDDED_ENTITY_VALUE1, EMBEDDED_ENTITY_VALUE2,\n-          EMBEDDED_ENTITY_VALUE3)\n-      .put(Type.LIST, LIST_VALUE)\n-      .put(Type.LONG, LONG_VALUE)\n-      .put(Type.DOUBLE, DOUBLE_VALUE)\n-      .put(Type.BOOLEAN, BOOLEAN_VALUE)\n-      .put(Type.DATE_TIME, DATE_AND_TIME_VALUE)\n-      .put(Type.BLOB, BLOB_VALUE)\n-      .put(Type.RAW_VALUE, RAW_VALUE)\n-      .build();\n+  @SuppressWarnings(\"rawtypes\") private static final Multimap<Type, Value> TYPE_TO_VALUES = ImmutableMultimap.<Type, Value>builder().put(Type.NULL, NULL_VALUE).put(Type.KEY, KEY_VALUE).put(Type.STRING, STRING_VALUE).putAll(Type.ENTITY, EMBEDDED_ENTITY_VALUE1, EMBEDDED_ENTITY_VALUE2, EMBEDDED_ENTITY_VALUE3).put(Type.LIST, LIST_VALUE).put(Type.LONG, LONG_VALUE).put(Type.DOUBLE, DOUBLE_VALUE).put(Type.BOOLEAN, BOOLEAN_VALUE).put(Type.DATE_TIME, DATE_AND_TIME_VALUE).put(Type.BLOB, BLOB_VALUE).put(Type.RAW_VALUE, RAW_VALUE).build();\n \n   @Test\n   public void testValues() throws Exception {\n@@ -145,9 +88,7 @@ public class SerializationTest {\n \n   @Test\n   public void testTypes() throws Exception {\n-    Serializable[] types = { KEY1, KEY2, INCOMPLETE_KEY1, INCOMPLETE_KEY2, ENTITY1, ENTITY2,\n-        ENTITY3, EMBEDDED_ENTITY, PROJECTION_ENTITY, DATE_TIME1, BLOB1, CURSOR1, GQL1, GQL2,\n-        QUERY1, QUERY2, QUERY3};\n+    Serializable[] types = {KEY1, KEY2, INCOMPLETE_KEY1, INCOMPLETE_KEY2, ENTITY1, ENTITY2, ENTITY3, EMBEDDED_ENTITY, PROJECTION_ENTITY, DATE_TIME1, BLOB1, CURSOR1, GQL1, GQL2, QUERY1, QUERY2, QUERY3};\n     for (Serializable obj : types) {\n       Object copy = serializeAndDeserialize(obj);\n       assertEquals(obj, obj);\n@@ -158,15 +99,15 @@ public class SerializationTest {\n   }\n \n   @SuppressWarnings(\"unchecked\")\n-  private <T extends Serializable> T serializeAndDeserialize(T obj)\n-      throws IOException, ClassNotFoundException {\n+  private <T extends Serializable> T serializeAndDeserialize(T obj) throws IOException, ClassNotFoundException {\n     ByteArrayOutputStream bytes = new ByteArrayOutputStream();\n-    try (ObjectOutputStream output = new ObjectOutputStream(bytes)) {\n+    try (ObjectOutputStream output =\n+      new ObjectOutputStream(bytes)) {\n       output.writeObject(obj);\n     }\n     try (ObjectInputStream input =\n-        new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n+      new ObjectInputStream(new ByteArrayInputStream(bytes.toByteArray()))) {\n       return (T) input.readObject();\n     }\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 83
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "column": "108",
                    "severity": "warning",
                    "message": "'.' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.SeparatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/981/SerializationTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/981/SerializationTest.java\nindex ef50270bcc6..0cf52bd856a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/981/SerializationTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/981/SerializationTest.java\n@@ -56,8 +56,8 @@ public class SerializationTest {\n       .namespace(\"ns1\")\n       .build();\n   private static final Query<Entity> GQL2 =\n-      Query.gqlQueryBuilder(Query.ResultType.ENTITY, \"select * from kind1 where name = @name and age > @1\")\n-      .setBinding(\"name\", \"name1\")\n+      Query.gqlQueryBuilder(Query.ResultType.ENTITY, \"select * from kind1 where name = @name and age > @1\").\n+      setBinding(\"name\", \"name1\")\n       .addBinding(20)\n       .namespace(\"ns1\")\n       .build();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}