{
    "project_name": "apache-iotdb",
    "error_id": "154",
    "information": {
        "errors": [
            {
                "line": "19",
                "severity": "warning",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * under the License.\n */\npackage org.apache.iotdb.db.query.dataset.groupby;\n\nimport org.apache.iotdb.db.conf.IoTDBDescriptor;\nimport org.apache.iotdb.db.engine.StorageEngine;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/154/GroupByFillDataSet.java\nindex 11e82cd52c7..97ea10ba01c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler/154/GroupByFillDataSet.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/154/GroupByFillDataSet.java\nindex 11e82cd52c7..97ea10ba01c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/intellij/154/GroupByFillDataSet.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "19",
                    "severity": "warning",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "57",
                    "severity": "warning",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "58",
                    "severity": "warning",
                    "message": "'List' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "'GroupByEngineDataSet' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "warning",
                    "message": "'Map' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "61",
                    "severity": "warning",
                    "message": "'QueryContext' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "75",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "84",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "92",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "94",
                    "severity": "warning",
                    "message": "'groupByEngineDataSet' has incorrect indentation level 0, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "95",
                    "severity": "warning",
                    "message": "'groupByFillPlan' has incorrect indentation level 0, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "96",
                    "severity": "warning",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "102",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 8, expected level should be 10.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 159).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "116",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 194).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "140",
                    "severity": "warning",
                    "message": "'&&' has incorrect indentation level 10, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "178",
                    "severity": "warning",
                    "message": "'RowRecord' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "191",
                    "severity": "warning",
                    "message": "'RowRecord' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "192",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "197",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/154/GroupByFillDataSet.java\nindex 11e82cd52c7..74c1fd7dd6a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/codebuff/154/GroupByFillDataSet.java\n@@ -35,7 +35,6 @@ import org.apache.iotdb.tsfile.read.common.Field;\n import org.apache.iotdb.tsfile.read.common.RowRecord;\n import org.apache.iotdb.tsfile.read.query.dataset.QueryDataSet;\n import org.apache.iotdb.tsfile.utils.Pair;\n-\n import java.io.IOException;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -55,12 +54,11 @@ public class GroupByFillDataSet extends QueryDataSet {\n   private boolean isPeekEnded = false;\n \n   public GroupByFillDataSet(\n-      List<PartialPath> paths,\n-      List<TSDataType> dataTypes,\n-      GroupByEngineDataSet groupByEngineDataSet,\n-      Map<TSDataType, IFill> fillTypes,\n-      QueryContext context,\n-      GroupByTimeFillPlan groupByFillPlan)\n+    List<PartialPath> paths,\n+    List<TSDataType> dataTypes,\n+    GroupByEngineDataSet groupByEngineDataSet,\n+    Map<TSDataType, IFill> fillTypes,\n+    QueryContext context, GroupByTimeFillPlan groupByFillPlan)\n       throws StorageEngineException, IOException, QueryProcessException {\n     super(new ArrayList<>(paths), dataTypes, groupByFillPlan.isAscending());\n     this.groupByEngineDataSet = groupByEngineDataSet;\n@@ -74,59 +72,48 @@ public class GroupByFillDataSet extends QueryDataSet {\n     }\n   }\n \n-  private void initPreviousParis(QueryContext context, GroupByTimeFillPlan groupByFillPlan)\n-      throws StorageEngineException, IOException, QueryProcessException {\n+  private void initPreviousParis(QueryContext context, GroupByTimeFillPlan groupByFillPlan) throws StorageEngineException, IOException, QueryProcessException {\n     previousValue = new Object[paths.size()];\n     previousTime = new long[paths.size()];\n     firstNotNullTV = new TimeValuePair[paths.size()];\n-\n     for (int i = 0; i < paths.size(); i++) {\n       PartialPath path = (PartialPath) paths.get(i);\n       TSDataType dataType = dataTypes.get(i);\n       IFill fill;\n       if (fillTypes.containsKey(dataType)) {\n-        fill =\n-            new PreviousFill(\n-                dataType,\n-                groupByEngineDataSet.getStartTime(),\n-                ((PreviousFill) fillTypes.get(dataType)).getBeforeRange(),\n-                ((PreviousFill) fillTypes.get(dataType)).isUntilLast());\n+        fill = new PreviousFill(dataType, groupByEngineDataSet.getStartTime(), ((PreviousFill) fillTypes.get(dataType)).getBeforeRange(), ((PreviousFill) fillTypes.get(dataType)).isUntilLast());\n       } else {\n-        fill =\n-            new PreviousFill(\n-                dataType,\n-                groupByEngineDataSet.getStartTime(),\n-                IoTDBDescriptor.getInstance().getConfig().getDefaultFillInterval());\n+        fill = new PreviousFill(\n+                   dataType,\n+                   groupByEngineDataSet.getStartTime(),\n+                   IoTDBDescriptor.getInstance().getConfig().getDefaultFillInterval());\n       }\n       fill.configureFill(\n-          path,\n-          dataType,\n-          groupByEngineDataSet.getStartTime(),\n-          groupByFillPlan.getAllMeasurementsInDevice(path.getDevice()),\n-          context);\n-\n+path,\n+dataType,\n+groupByEngineDataSet.getStartTime(),\n+groupByFillPlan.getAllMeasurementsInDevice(path.getDevice()),\n+context);\n       firstNotNullTV[i] = fill.getFillResult();\n       TimeValuePair timeValuePair = firstNotNullTV[i];\n       previousValue[i] = null;\n       previousTime[i] = Long.MAX_VALUE;\n-      if (ascending && timeValuePair != null && timeValuePair.getValue() != null) {\n+      if (ascending\n+        && timeValuePair != null && timeValuePair.getValue() != null) {\n         previousValue[i] = timeValuePair.getValue().getValue();\n         previousTime[i] = timeValuePair.getTimestamp();\n       }\n     }\n   }\n \n-  private void initLastTimeArray(QueryContext context, GroupByTimeFillPlan groupByFillPlan)\n-      throws IOException, StorageEngineException, QueryProcessException {\n+  private void initLastTimeArray(QueryContext context, GroupByTimeFillPlan groupByFillPlan) throws IOException, StorageEngineException, QueryProcessException {\n     lastTimeArray = new long[paths.size()];\n     Arrays.fill(lastTimeArray, Long.MAX_VALUE);\n     List<PartialPath> seriesPaths = new ArrayList<>();\n     for (int i = 0; i < paths.size(); i++) {\n       seriesPaths.add((PartialPath) paths.get(i));\n     }\n-    List<Pair<Boolean, TimeValuePair>> lastValueContainer =\n-        LastQueryExecutor.calculateLastPairForSeriesLocally(\n-            seriesPaths, dataTypes, context, null, groupByFillPlan.getDeviceToMeasurements());\n+    List<Pair<Boolean, TimeValuePair>> lastValueContainer = LastQueryExecutor.calculateLastPairForSeriesLocally(seriesPaths, dataTypes, context, null, groupByFillPlan.getDeviceToMeasurements());\n     for (int i = 0; i < lastValueContainer.size(); i++) {\n       if (Boolean.TRUE.equals(lastValueContainer.get(i).left)) {\n         lastTimeArray[i] = lastValueContainer.get(i).right.getTimestamp();\n@@ -143,17 +130,17 @@ public class GroupByFillDataSet extends QueryDataSet {\n   @SuppressWarnings(\"squid:S3776\")\n   public RowRecord nextWithoutConstraint() throws IOException {\n     RowRecord rowRecord = groupByEngineDataSet.nextWithoutConstraint();\n-\n     for (int i = 0; i < paths.size(); i++) {\n       Field field = rowRecord.getFields().get(i);\n       // current group by result is null\n       if (field == null || field.getDataType() == null) {\n         TSDataType tsDataType = dataTypes.get(i);\n         // for desc query peek previous time and value\n-        if (!ascending && !isPeekEnded && !canUseCacheData(rowRecord, tsDataType, i)) {\n+        if (!ascending\n+          && !isPeekEnded\n+            && !canUseCacheData(rowRecord, tsDataType, i)) {\n           fillCache(i);\n         }\n-\n         if (canUseCacheData(rowRecord, tsDataType, i)) {\n           rowRecord.getFields().set(i, Field.getField(previousValue[i], tsDataType));\n         }\n@@ -186,12 +173,14 @@ public class GroupByFillDataSet extends QueryDataSet {\n   // and (fill type is not previous until last or now time is before last time)\n   // and (previous before range is not limited or previous before range contains the previous\n   // interval)\n-  private boolean canUseCacheData(RowRecord rowRecord, TSDataType tsDataType, int i) {\n+\n+  private boolean canUseCacheData(\n+    RowRecord rowRecord, TSDataType tsDataType, int i) {\n     PreviousFill previousFill = (PreviousFill) fillTypes.get(tsDataType);\n     return !cacheIsEmpty(i)\n-        && satisfyTime(rowRecord, tsDataType, previousFill, lastTimeArray[i])\n-        && satisfyRange(tsDataType, previousFill)\n-        && isIncreasingTime(rowRecord, previousTime[i]);\n+      && satisfyTime(rowRecord, tsDataType, previousFill, lastTimeArray[i])\n+      && satisfyRange(tsDataType, previousFill)\n+      && isIncreasingTime(rowRecord, previousTime[i]);\n   }\n \n   private boolean isIncreasingTime(RowRecord rowRecord, long time) {\n@@ -199,15 +188,13 @@ public class GroupByFillDataSet extends QueryDataSet {\n   }\n \n   private boolean satisfyTime(\n-      RowRecord rowRecord, TSDataType tsDataType, PreviousFill previousFill, long lastTime) {\n-    return (fillTypes.containsKey(tsDataType) && !previousFill.isUntilLast())\n-        || rowRecord.getTimestamp() <= lastTime;\n+    RowRecord rowRecord, TSDataType tsDataType, PreviousFill previousFill, long lastTime) {\n+    return (fillTypes.containsKey(tsDataType) && !previousFill.isUntilLast()) || rowRecord.getTimestamp() <= lastTime;\n   }\n \n   private boolean satisfyRange(TSDataType tsDataType, PreviousFill previousFill) {\n     return !fillTypes.containsKey(tsDataType)\n-        || previousFill.getBeforeRange() < 0\n-        || previousFill.getBeforeRange() >= groupByEngineDataSet.interval;\n+           || previousFill.getBeforeRange() < 0 || previousFill.getBeforeRange() >= groupByEngineDataSet.interval;\n   }\n \n   private boolean cacheIsEmpty(int i) {\n@@ -217,4 +204,4 @@ public class GroupByFillDataSet extends QueryDataSet {\n   private boolean firstCacheIsEmpty(int i) {\n     return firstNotNullTV[i] == null || firstNotNullTV[i].getValue() == null;\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 51
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/154/GroupByFillDataSet.java\nindex 11e82cd52c7..97ea10ba01c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_random/154/GroupByFillDataSet.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/154/GroupByFillDataSet.java\nindex 11e82cd52c7..97ea10ba01c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/errored/1/154/GroupByFillDataSet.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-iotdb/styler_three_grams/154/GroupByFillDataSet.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.iotdb.db.query.dataset.groupby;\n \n import org.apache.iotdb.db.conf.IoTDBDescriptor;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}