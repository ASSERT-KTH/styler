{
    "project_name": "Angel-ML-angel",
    "error_id": "60",
    "information": {
        "errors": [
            {
                "line": "6",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 102).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Copyright (C) 2017-2018 THL A29 Limited, a Tencent company. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in\n * compliance with the License. You may obtain a copy of the License at\n *\n * https://opensource.org/licenses/Apache-2.0",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/60/VFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/60/VFactory.java\nindex 84874052327..e4e63effaa8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/60/VFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/60/VFactory.java\n@@ -79,7 +79,7 @@ public class VFactory {\n   }\n \n   public static IntDoubleVector denseDoubleVector(int matrixId, int rowId, int clock,\n-      double[] values) {\n+                                                  double[] values) {\n     IntDoubleVectorStorage storage = new IntDoubleDenseVectorStorage(values);\n     return new IntDoubleVector(matrixId, rowId, clock, values.length, storage);\n   }\n@@ -100,7 +100,7 @@ public class VFactory {\n   }\n \n   public static IntFloatVector denseFloatVector(int matrixId, int rowId, int clock,\n-      float[] values) {\n+                                                float[] values) {\n     IntFloatVectorStorage storage = new IntFloatDenseVectorStorage(values);\n     return new IntFloatVector(matrixId, rowId, clock, values.length, storage);\n   }\n@@ -161,7 +161,7 @@ public class VFactory {\n   }\n \n   public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+                                                   int capacity) {\n     IntDoubleVectorStorage storage = new IntDoubleSparseVectorStorage(dim, capacity);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -172,7 +172,7 @@ public class VFactory {\n   }\n \n   public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, double[] values) {\n+                                                   int[] indices, double[] values) {\n     IntDoubleVectorStorage storage = new IntDoubleSparseVectorStorage(dim, indices, values);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -183,7 +183,7 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+                                                           long dim) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -194,7 +194,7 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+                                                           long dim, int capacity) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim, capacity);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -205,13 +205,14 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, double[] values) {\n+                                                           long dim, long[] indices,\n+                                                           double[] values) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim, indices, values);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n   public static LongDoubleVector sparseLongKeyDoubleVector(long dim, long[] indices,\n-      double[] values) {\n+                                                           double[] values) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim, indices, values);\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n@@ -227,7 +228,7 @@ public class VFactory {\n   }\n \n   public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+                                                 int capacity) {\n     IntFloatVectorStorage storage = new IntFloatSparseVectorStorage(dim, capacity);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -238,7 +239,7 @@ public class VFactory {\n   }\n \n   public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, float[] values) {\n+                                                 int[] indices, float[] values) {\n     IntFloatVectorStorage storage = new IntFloatSparseVectorStorage(dim, indices, values);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -249,7 +250,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+                                                         long dim) {\n     LongFloatVectorStorage storage = new LongFloatSparseVectorStorage(dim);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -260,7 +261,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+                                                         long dim, int capacity) {\n     LongFloatVectorStorage storage = new LongFloatSparseVectorStorage(dim, capacity);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -271,7 +272,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, float[] values) {\n+                                                         long dim, long[] indices, float[] values) {\n     LongFloatVectorStorage storage = new LongFloatSparseVectorStorage(dim, indices, values);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -292,7 +293,7 @@ public class VFactory {\n   }\n \n   public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+                                               int capacity) {\n     IntLongVectorStorage storage = new IntLongSparseVectorStorage(dim, capacity);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -303,7 +304,7 @@ public class VFactory {\n   }\n \n   public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, long[] values) {\n+                                               int[] indices, long[] values) {\n     IntLongVectorStorage storage = new IntLongSparseVectorStorage(dim, indices, values);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -314,7 +315,7 @@ public class VFactory {\n   }\n \n   public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+                                                       long dim) {\n     LongLongVectorStorage storage = new LongLongSparseVectorStorage(dim);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -325,7 +326,7 @@ public class VFactory {\n   }\n \n   public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+                                                       int capacity) {\n     LongLongVectorStorage storage = new LongLongSparseVectorStorage(dim, capacity);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -336,7 +337,7 @@ public class VFactory {\n   }\n \n   public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, long[] values) {\n+                                                       long[] indices, long[] values) {\n     LongLongVectorStorage storage = new LongLongSparseVectorStorage(dim, indices, values);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -357,7 +358,7 @@ public class VFactory {\n   }\n \n   public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+                                             int capacity) {\n     IntIntVectorStorage storage = new IntIntSparseVectorStorage(dim, capacity);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -368,7 +369,7 @@ public class VFactory {\n   }\n \n   public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, int[] values) {\n+                                             int[] indices, int[] values) {\n     IntIntVectorStorage storage = new IntIntSparseVectorStorage(dim, indices, values);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -389,7 +390,7 @@ public class VFactory {\n   }\n \n   public static LongIntVector sparseLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+                                                     int capacity) {\n     LongIntVectorStorage storage = new LongIntSparseVectorStorage(dim, capacity);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -400,7 +401,7 @@ public class VFactory {\n   }\n \n   public static LongIntVector sparseLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, int[] values) {\n+                                                     long[] indices, int[] values) {\n     LongIntVectorStorage storage = new LongIntSparseVectorStorage(dim, indices, values);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -421,7 +422,7 @@ public class VFactory {\n   }\n \n   public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+                                                   int capacity) {\n     IntDoubleSortedVectorStorage storage = new IntDoubleSortedVectorStorage(dim, capacity);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -432,21 +433,21 @@ public class VFactory {\n   }\n \n   public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int size, int[] indices, double[] values) {\n+                                                   int size, int[] indices, double[] values) {\n     IntDoubleSortedVectorStorage storage =\n         new IntDoubleSortedVectorStorage(dim, size, indices, values);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n   public static IntDoubleVector sortedDoubleVector(int dim, int size, int[] indices,\n-      double[] values) {\n+                                                   double[] values) {\n     IntDoubleSortedVectorStorage storage =\n         new IntDoubleSortedVectorStorage(dim, size, indices, values);\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n   public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, double[] values) {\n+                                                   int[] indices, double[] values) {\n     IntDoubleSortedVectorStorage storage = new IntDoubleSortedVectorStorage(dim, indices, values);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -457,7 +458,7 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+                                                           long dim) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -468,7 +469,7 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+                                                           long dim, int capacity) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, capacity);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -479,27 +480,29 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, int size, long[] indices, double[] values) {\n+                                                           long dim, int size, long[] indices,\n+                                                           double[] values) {\n     LongDoubleSortedVectorStorage storage =\n         new LongDoubleSortedVectorStorage(dim, size, indices, values);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(long dim, int size, long[] indices,\n-      double[] values) {\n+                                                           double[] values) {\n     LongDoubleSortedVectorStorage storage =\n         new LongDoubleSortedVectorStorage(dim, size, indices, values);\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, double[] values) {\n+                                                           long dim, long[] indices,\n+                                                           double[] values) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, indices, values);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(long dim, long[] indices,\n-      double[] values) {\n+                                                           double[] values) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, indices, values);\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n@@ -515,7 +518,7 @@ public class VFactory {\n   }\n \n   public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+                                                 int capacity) {\n     IntFloatSortedVectorStorage storage = new IntFloatSortedVectorStorage(dim, capacity);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -526,7 +529,7 @@ public class VFactory {\n   }\n \n   public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int size, int[] indices, float[] values) {\n+                                                 int size, int[] indices, float[] values) {\n     IntFloatSortedVectorStorage storage =\n         new IntFloatSortedVectorStorage(dim, size, indices, values);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n@@ -539,7 +542,7 @@ public class VFactory {\n   }\n \n   public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, float[] values) {\n+                                                 int[] indices, float[] values) {\n     IntFloatSortedVectorStorage storage = new IntFloatSortedVectorStorage(dim, indices, values);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -550,7 +553,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+                                                         long dim) {\n     LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -561,7 +564,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+                                                         long dim, int capacity) {\n     LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim, capacity);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -572,21 +575,22 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, int size, long[] indices, float[] values) {\n+                                                         long dim, int size, long[] indices,\n+                                                         float[] values) {\n     LongFloatSortedVectorStorage storage =\n         new LongFloatSortedVectorStorage(dim, size, indices, values);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n \n   public static LongFloatVector sortedLongKeyFloatVector(long dim, int size, long[] indices,\n-      float[] values) {\n+                                                         float[] values) {\n     LongFloatSortedVectorStorage storage =\n         new LongFloatSortedVectorStorage(dim, size, indices, values);\n     return new LongFloatVector(0, 0, 0, dim, storage);\n   }\n \n   public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, float[] values) {\n+                                                         long dim, long[] indices, float[] values) {\n     LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim, indices, values);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -607,7 +611,7 @@ public class VFactory {\n   }\n \n   public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+                                               int capacity) {\n     IntLongSortedVectorStorage storage = new IntLongSortedVectorStorage(dim, capacity);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -618,7 +622,7 @@ public class VFactory {\n   }\n \n   public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim,\n-      int size, int[] indices, long[] values) {\n+                                               int size, int[] indices, long[] values) {\n     IntLongSortedVectorStorage storage = new IntLongSortedVectorStorage(dim, size, indices, values);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -629,7 +633,7 @@ public class VFactory {\n   }\n \n   public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, long[] values) {\n+                                               int[] indices, long[] values) {\n     IntLongSortedVectorStorage storage = new IntLongSortedVectorStorage(dim, indices, values);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -640,7 +644,7 @@ public class VFactory {\n   }\n \n   public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+                                                       long dim) {\n     LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -651,7 +655,7 @@ public class VFactory {\n   }\n \n   public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+                                                       int capacity) {\n     LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim, capacity);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -662,21 +666,21 @@ public class VFactory {\n   }\n \n   public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      int size, long[] indices, long[] values) {\n+                                                       int size, long[] indices, long[] values) {\n     LongLongSortedVectorStorage storage =\n         new LongLongSortedVectorStorage(dim, size, indices, values);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n \n   public static LongLongVector sortedLongKeyLongVector(long dim, int size, long[] indices,\n-      long[] values) {\n+                                                       long[] values) {\n     LongLongSortedVectorStorage storage =\n         new LongLongSortedVectorStorage(dim, size, indices, values);\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n   public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, long[] values) {\n+                                                       long[] indices, long[] values) {\n     LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim, indices, values);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -697,7 +701,7 @@ public class VFactory {\n   }\n \n   public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+                                             int capacity) {\n     IntIntSortedVectorStorage storage = new IntIntSortedVectorStorage(dim, capacity);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -708,7 +712,7 @@ public class VFactory {\n   }\n \n   public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim, int size,\n-      int[] indices, int[] values) {\n+                                             int[] indices, int[] values) {\n     IntIntSortedVectorStorage storage = new IntIntSortedVectorStorage(dim, size, indices, values);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -719,7 +723,7 @@ public class VFactory {\n   }\n \n   public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, int[] values) {\n+                                             int[] indices, int[] values) {\n     IntIntSortedVectorStorage storage = new IntIntSortedVectorStorage(dim, indices, values);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -740,7 +744,7 @@ public class VFactory {\n   }\n \n   public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+                                                     int capacity) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, capacity);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -751,19 +755,19 @@ public class VFactory {\n   }\n \n   public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      int size, long[] indices, int[] values) {\n+                                                     int size, long[] indices, int[] values) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, size, indices, values);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n \n   public static LongIntVector sortedLongKeyIntVector(long dim, int size, long[] indices,\n-      int[] values) {\n+                                                     int[] values) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, size, indices, values);\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n   public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, int[] values) {\n+                                                     long[] indices, int[] values) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, indices, values);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -774,7 +778,7 @@ public class VFactory {\n   }\n \n   public static IntDummyVector intDummyVector(int matrixId, int rowId, int clock, int dim,\n-      int[] values) {\n+                                              int[] values) {\n     return new IntDummyVector(matrixId, rowId, clock, dim, values);\n   }\n \n@@ -783,7 +787,7 @@ public class VFactory {\n   }\n \n   public static LongDummyVector longDummyVector(int matrixId, int rowId, int clock, long dim,\n-      long[] values) {\n+                                                long[] values) {\n     return new LongDummyVector(matrixId, rowId, clock, dim, values);\n   }\n \n@@ -793,17 +797,17 @@ public class VFactory {\n \n   //---------------------------------------------------------------\n   public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      IntDoubleVector[] partitions, int subDim) {\n+                                                        IntDoubleVector[] partitions, int subDim) {\n     return new CompIntDoubleVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompIntDoubleVector compIntDoubleVector(int dim, IntDoubleVector[] partitions,\n-      int subDim) {\n+                                                        int subDim) {\n     return new CompIntDoubleVector(dim, partitions, subDim);\n   }\n \n   public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      IntDoubleVector[] partitions) {\n+                                                        IntDoubleVector[] partitions) {\n     return new CompIntDoubleVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -812,7 +816,7 @@ public class VFactory {\n   }\n \n   public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n+                                                        int subDim, StorageType storageType) {\n     int numParts = (dim + subDim - 1) / subDim;\n     IntDoubleVector[] partitions = new IntDoubleVector[numParts];\n     switch (storageType) {\n@@ -849,12 +853,12 @@ public class VFactory {\n   }\n \n   public static CompIntDoubleVector compIntDoubleVector(int dim, int subDim,\n-      StorageType storageType) {\n+                                                        StorageType storageType) {\n     return compIntDoubleVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n+                                                        int subDim) {\n     return new CompIntDoubleVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -863,17 +867,17 @@ public class VFactory {\n   }\n \n   public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      IntFloatVector[] partitions, int subDim) {\n+                                                      IntFloatVector[] partitions, int subDim) {\n     return new CompIntFloatVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompIntFloatVector compIntFloatVector(int dim, IntFloatVector[] partitions,\n-      int subDim) {\n+                                                      int subDim) {\n     return new CompIntFloatVector(dim, partitions, subDim);\n   }\n \n   public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      IntFloatVector[] partitions) {\n+                                                      IntFloatVector[] partitions) {\n     return new CompIntFloatVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -882,7 +886,7 @@ public class VFactory {\n   }\n \n   public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n+                                                      int subDim, StorageType storageType) {\n     int numParts = (dim + subDim - 1) / subDim;\n     IntFloatVector[] partitions = new IntFloatVector[numParts];\n     switch (storageType) {\n@@ -919,12 +923,12 @@ public class VFactory {\n   }\n \n   public static CompIntFloatVector compIntFloatVector(int dim, int subDim,\n-      StorageType storageType) {\n+                                                      StorageType storageType) {\n     return compIntFloatVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n+                                                      int subDim) {\n     return new CompIntFloatVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -933,17 +937,17 @@ public class VFactory {\n   }\n \n   public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      IntLongVector[] partitions, int subDim) {\n+                                                    IntLongVector[] partitions, int subDim) {\n     return new CompIntLongVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompIntLongVector compIntLongVector(int dim, IntLongVector[] partitions,\n-      int subDim) {\n+                                                    int subDim) {\n     return new CompIntLongVector(dim, partitions, subDim);\n   }\n \n   public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      IntLongVector[] partitions) {\n+                                                    IntLongVector[] partitions) {\n     return new CompIntLongVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -952,7 +956,7 @@ public class VFactory {\n   }\n \n   public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n+                                                    int subDim, StorageType storageType) {\n     int numParts = (dim + subDim - 1) / subDim;\n     IntLongVector[] partitions = new IntLongVector[numParts];\n     switch (storageType) {\n@@ -993,7 +997,7 @@ public class VFactory {\n   }\n \n   public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n+                                                    int subDim) {\n     return new CompIntLongVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1002,7 +1006,7 @@ public class VFactory {\n   }\n \n   public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      IntIntVector[] partitions, int subDim) {\n+                                                  IntIntVector[] partitions, int subDim) {\n     return new CompIntIntVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n@@ -1011,7 +1015,7 @@ public class VFactory {\n   }\n \n   public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      IntIntVector[] partitions) {\n+                                                  IntIntVector[] partitions) {\n     return new CompIntIntVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1020,7 +1024,7 @@ public class VFactory {\n   }\n \n   public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n+                                                  int subDim, StorageType storageType) {\n     int numParts = (dim + subDim - 1) / subDim;\n     IntIntVector[] partitions = new IntIntVector[numParts];\n     switch (storageType) {\n@@ -1061,7 +1065,7 @@ public class VFactory {\n   }\n \n   public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n+                                                  int subDim) {\n     return new CompIntIntVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1070,17 +1074,18 @@ public class VFactory {\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, LongDoubleVector[] partitions, long subDim) {\n+                                                          long dim, LongDoubleVector[] partitions,\n+                                                          long subDim) {\n     return new CompLongDoubleVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(long dim, LongDoubleVector[] partitions,\n-      long subDim) {\n+                                                          long subDim) {\n     return new CompLongDoubleVector(dim, partitions, subDim);\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, LongDoubleVector[] partitions) {\n+                                                          long dim, LongDoubleVector[] partitions) {\n     return new CompLongDoubleVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1089,7 +1094,8 @@ public class VFactory {\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim, StorageType storageType) {\n+                                                          long dim, long subDim,\n+                                                          StorageType storageType) {\n     int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongDoubleVector[] partitions = new LongDoubleVector[numParts];\n     switch (storageType) {\n@@ -1119,12 +1125,12 @@ public class VFactory {\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(long dim, long subDim,\n-      StorageType storageType) {\n+                                                          StorageType storageType) {\n     return compLongDoubleVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim) {\n+                                                          long dim, long subDim) {\n     return new CompLongDoubleVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1133,17 +1139,18 @@ public class VFactory {\n   }\n \n   public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, LongFloatVector[] partitions, long subDim) {\n+                                                        long dim, LongFloatVector[] partitions,\n+                                                        long subDim) {\n     return new CompLongFloatVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompLongFloatVector compLongFloatVector(long dim, LongFloatVector[] partitions,\n-      long subDim) {\n+                                                        long subDim) {\n     return new CompLongFloatVector(dim, partitions, subDim);\n   }\n \n   public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, LongFloatVector[] partitions) {\n+                                                        long dim, LongFloatVector[] partitions) {\n     return new CompLongFloatVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1152,7 +1159,8 @@ public class VFactory {\n   }\n \n   public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim, StorageType storageType) {\n+                                                        long dim, long subDim,\n+                                                        StorageType storageType) {\n     int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongFloatVector[] partitions = new LongFloatVector[numParts];\n     switch (storageType) {\n@@ -1182,12 +1190,12 @@ public class VFactory {\n   }\n \n   public static CompLongFloatVector compLongFloatVector(long dim, long subDim,\n-      StorageType storageType) {\n+                                                        StorageType storageType) {\n     return compLongFloatVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim) {\n+                                                        long dim, long subDim) {\n     return new CompLongFloatVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1196,17 +1204,17 @@ public class VFactory {\n   }\n \n   public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      LongLongVector[] partitions, long subDim) {\n+                                                      LongLongVector[] partitions, long subDim) {\n     return new CompLongLongVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompLongLongVector compLongLongVector(long dim, LongLongVector[] partitions,\n-      long subDim) {\n+                                                      long subDim) {\n     return new CompLongLongVector(dim, partitions, subDim);\n   }\n \n   public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      LongLongVector[] partitions) {\n+                                                      LongLongVector[] partitions) {\n     return new CompLongLongVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1215,7 +1223,7 @@ public class VFactory {\n   }\n \n   public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim, StorageType storageType) {\n+                                                      long subDim, StorageType storageType) {\n     int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongLongVector[] partitions = new LongLongVector[numParts];\n     switch (storageType) {\n@@ -1245,12 +1253,12 @@ public class VFactory {\n   }\n \n   public static CompLongLongVector compLongLongVector(long dim, long subDim,\n-      StorageType storageType) {\n+                                                      StorageType storageType) {\n     return compLongLongVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim) {\n+                                                      long subDim) {\n     return new CompLongLongVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1259,17 +1267,17 @@ public class VFactory {\n   }\n \n   public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      LongIntVector[] partitions, long subDim) {\n+                                                    LongIntVector[] partitions, long subDim) {\n     return new CompLongIntVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompLongIntVector compLongIntVector(long dim, LongIntVector[] partitions,\n-      long subDim) {\n+                                                    long subDim) {\n     return new CompLongIntVector(dim, partitions, subDim);\n   }\n \n   public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      LongIntVector[] partitions) {\n+                                                    LongIntVector[] partitions) {\n     return new CompLongIntVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1278,7 +1286,7 @@ public class VFactory {\n   }\n \n   public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim, StorageType storageType) {\n+                                                    long subDim, StorageType storageType) {\n     int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongIntVector[] partitions = new LongIntVector[numParts];\n     switch (storageType) {\n@@ -1308,12 +1316,12 @@ public class VFactory {\n   }\n \n   public static CompLongIntVector compLongIntVector(long dim, long subDim,\n-      StorageType storageType) {\n+                                                    StorageType storageType) {\n     return compLongIntVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim) {\n+                                                    long subDim) {\n     return new CompLongIntVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n",
            "diff_size": 110
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "100",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "160",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "170",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "223",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "233",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "286",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "296",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "317",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "348",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "358",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "378",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "409",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "419",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "425",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "431",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "470",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "482",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "497",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "507",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "519",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "558",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "585",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "595",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "605",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "626",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "636",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "670",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "680",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "690",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "710",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "720",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "725",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "741",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "759",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "763",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "767",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "775",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "816",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "824",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "828",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "832",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "840",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "881",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "889",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "893",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "897",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "905",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "945",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "953",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "961",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "969",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1009",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1143",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1152",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1204",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1213",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/60/VFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/60/VFactory.java\nindex 84874052327..0fb3e36ee14 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/60/VFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/60/VFactory.java\n@@ -15,7 +15,6 @@\n  *\n  */\n \n-\n package com.tencent.angel.ml.math2;\n \n import com.tencent.angel.exception.AngelException;\n@@ -78,8 +77,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector denseDoubleVector(int matrixId, int rowId, int clock,\n-      double[] values) {\n+  public static IntDoubleVector denseDoubleVector(int matrixId, int rowId, int clock, double[] values) {\n     IntDoubleVectorStorage storage = new IntDoubleDenseVectorStorage(values);\n     return new IntDoubleVector(matrixId, rowId, clock, values.length, storage);\n   }\n@@ -99,8 +97,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector denseFloatVector(int matrixId, int rowId, int clock,\n-      float[] values) {\n+  public static IntFloatVector denseFloatVector(int matrixId, int rowId, int clock, float[] values) {\n     IntFloatVectorStorage storage = new IntFloatDenseVectorStorage(values);\n     return new IntFloatVector(matrixId, rowId, clock, values.length, storage);\n   }\n@@ -160,8 +157,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntDoubleVectorStorage storage = new IntDoubleSparseVectorStorage(dim, capacity);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -171,8 +167,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, double[] values) {\n+  public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim, int[] indices, double[] values) {\n     IntDoubleVectorStorage storage = new IntDoubleSparseVectorStorage(dim, indices, values);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -183,7 +178,7 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+long dim) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -194,7 +189,7 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+long dim, int capacity) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim, capacity);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -205,13 +200,12 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, double[] values) {\n+long dim, long[] indices, double[] values) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim, indices, values);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongDoubleVector sparseLongKeyDoubleVector(long dim, long[] indices,\n-      double[] values) {\n+  public static LongDoubleVector sparseLongKeyDoubleVector(long dim, long[] indices, double[] values) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim, indices, values);\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n@@ -226,8 +220,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntFloatVectorStorage storage = new IntFloatSparseVectorStorage(dim, capacity);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -237,8 +230,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, float[] values) {\n+  public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim, int[] indices, float[] values) {\n     IntFloatVectorStorage storage = new IntFloatSparseVectorStorage(dim, indices, values);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -249,7 +241,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+long dim) {\n     LongFloatVectorStorage storage = new LongFloatSparseVectorStorage(dim);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -260,7 +252,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+long dim, int capacity) {\n     LongFloatVectorStorage storage = new LongFloatSparseVectorStorage(dim, capacity);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -271,7 +263,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, float[] values) {\n+long dim, long[] indices, float[] values) {\n     LongFloatVectorStorage storage = new LongFloatSparseVectorStorage(dim, indices, values);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -291,8 +283,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntLongVectorStorage storage = new IntLongSparseVectorStorage(dim, capacity);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -302,8 +293,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, long[] values) {\n+  public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim, int[] indices, long[] values) {\n     IntLongVectorStorage storage = new IntLongSparseVectorStorage(dim, indices, values);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -314,7 +304,7 @@ public class VFactory {\n   }\n \n   public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+long dim) {\n     LongLongVectorStorage storage = new LongLongSparseVectorStorage(dim);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -324,8 +314,7 @@ public class VFactory {\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+  public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongLongVectorStorage storage = new LongLongSparseVectorStorage(dim, capacity);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -336,7 +325,7 @@ public class VFactory {\n   }\n \n   public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, long[] values) {\n+long[] indices, long[] values) {\n     LongLongVectorStorage storage = new LongLongSparseVectorStorage(dim, indices, values);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -356,8 +345,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntIntVectorStorage storage = new IntIntSparseVectorStorage(dim, capacity);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -367,8 +355,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, int[] values) {\n+  public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim, int[] indices, int[] values) {\n     IntIntVectorStorage storage = new IntIntSparseVectorStorage(dim, indices, values);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -388,8 +375,7 @@ public class VFactory {\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongIntVector sparseLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+  public static LongIntVector sparseLongKeyIntVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongIntVectorStorage storage = new LongIntSparseVectorStorage(dim, capacity);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -400,7 +386,7 @@ public class VFactory {\n   }\n \n   public static LongIntVector sparseLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, int[] values) {\n+long[] indices, int[] values) {\n     LongIntVectorStorage storage = new LongIntSparseVectorStorage(dim, indices, values);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -420,8 +406,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntDoubleSortedVectorStorage storage = new IntDoubleSortedVectorStorage(dim, capacity);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -431,22 +416,19 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int size, int[] indices, double[] values) {\n+  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim, int size, int[] indices, double[] values) {\n     IntDoubleSortedVectorStorage storage =\n         new IntDoubleSortedVectorStorage(dim, size, indices, values);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static IntDoubleVector sortedDoubleVector(int dim, int size, int[] indices,\n-      double[] values) {\n+  public static IntDoubleVector sortedDoubleVector(int dim, int size, int[] indices, double[] values) {\n     IntDoubleSortedVectorStorage storage =\n         new IntDoubleSortedVectorStorage(dim, size, indices, values);\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, double[] values) {\n+  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim, int[] indices, double[] values) {\n     IntDoubleSortedVectorStorage storage = new IntDoubleSortedVectorStorage(dim, indices, values);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -457,7 +439,7 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+long dim) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -468,7 +450,7 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+long dim, int capacity) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, capacity);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -479,27 +461,25 @@ public class VFactory {\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, int size, long[] indices, double[] values) {\n+long dim, int size, long[] indices, double[] values) {\n     LongDoubleSortedVectorStorage storage =\n         new LongDoubleSortedVectorStorage(dim, size, indices, values);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongDoubleVector sortedLongKeyDoubleVector(long dim, int size, long[] indices,\n-      double[] values) {\n+  public static LongDoubleVector sortedLongKeyDoubleVector(long dim, int size, long[] indices, double[] values) {\n     LongDoubleSortedVectorStorage storage =\n         new LongDoubleSortedVectorStorage(dim, size, indices, values);\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n \n   public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, double[] values) {\n+long dim, long[] indices, double[] values) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, indices, values);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongDoubleVector sortedLongKeyDoubleVector(long dim, long[] indices,\n-      double[] values) {\n+  public static LongDoubleVector sortedLongKeyDoubleVector(long dim, long[] indices, double[] values) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, indices, values);\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n@@ -514,8 +494,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntFloatSortedVectorStorage storage = new IntFloatSortedVectorStorage(dim, capacity);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -525,8 +504,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int size, int[] indices, float[] values) {\n+  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim, int size, int[] indices, float[] values) {\n     IntFloatSortedVectorStorage storage =\n         new IntFloatSortedVectorStorage(dim, size, indices, values);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n@@ -538,8 +516,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, float[] values) {\n+  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim, int[] indices, float[] values) {\n     IntFloatSortedVectorStorage storage = new IntFloatSortedVectorStorage(dim, indices, values);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -550,7 +527,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+long dim) {\n     LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -561,7 +538,7 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+long dim, int capacity) {\n     LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim, capacity);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -572,21 +549,20 @@ public class VFactory {\n   }\n \n   public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, int size, long[] indices, float[] values) {\n+long dim, int size, long[] indices, float[] values) {\n     LongFloatSortedVectorStorage storage =\n         new LongFloatSortedVectorStorage(dim, size, indices, values);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongFloatVector sortedLongKeyFloatVector(long dim, int size, long[] indices,\n-      float[] values) {\n+  public static LongFloatVector sortedLongKeyFloatVector(long dim, int size, long[] indices, float[] values) {\n     LongFloatSortedVectorStorage storage =\n         new LongFloatSortedVectorStorage(dim, size, indices, values);\n     return new LongFloatVector(0, 0, 0, dim, storage);\n   }\n \n   public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, float[] values) {\n+long dim, long[] indices, float[] values) {\n     LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim, indices, values);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -606,8 +582,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntLongSortedVectorStorage storage = new IntLongSortedVectorStorage(dim, capacity);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -617,8 +592,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim,\n-      int size, int[] indices, long[] values) {\n+  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim, int size, int[] indices, long[] values) {\n     IntLongSortedVectorStorage storage = new IntLongSortedVectorStorage(dim, size, indices, values);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -628,8 +602,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, long[] values) {\n+  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim, int[] indices, long[] values) {\n     IntLongSortedVectorStorage storage = new IntLongSortedVectorStorage(dim, indices, values);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -640,7 +613,7 @@ public class VFactory {\n   }\n \n   public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+long dim) {\n     LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -650,8 +623,7 @@ public class VFactory {\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim, capacity);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -661,22 +633,21 @@ public class VFactory {\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      int size, long[] indices, long[] values) {\n+  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim, int size, long[] indices, long[] values) {\n     LongLongSortedVectorStorage storage =\n         new LongLongSortedVectorStorage(dim, size, indices, values);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n \n   public static LongLongVector sortedLongKeyLongVector(long dim, int size, long[] indices,\n-      long[] values) {\n+long[] values) {\n     LongLongSortedVectorStorage storage =\n         new LongLongSortedVectorStorage(dim, size, indices, values);\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n   public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, long[] values) {\n+long[] indices, long[] values) {\n     LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim, indices, values);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -696,8 +667,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntIntSortedVectorStorage storage = new IntIntSortedVectorStorage(dim, capacity);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -707,8 +677,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim, int size,\n-      int[] indices, int[] values) {\n+  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim, int size, int[] indices, int[] values) {\n     IntIntSortedVectorStorage storage = new IntIntSortedVectorStorage(dim, size, indices, values);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -718,8 +687,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, int[] values) {\n+  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim, int[] indices, int[] values) {\n     IntIntSortedVectorStorage storage = new IntIntSortedVectorStorage(dim, indices, values);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -739,8 +707,7 @@ public class VFactory {\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, capacity);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -750,20 +717,18 @@ public class VFactory {\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      int size, long[] indices, int[] values) {\n+  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim, int size, long[] indices, int[] values) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, size, indices, values);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongIntVector sortedLongKeyIntVector(long dim, int size, long[] indices,\n-      int[] values) {\n+  public static LongIntVector sortedLongKeyIntVector(long dim, int size, long[] indices, int[] values) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, size, indices, values);\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n   public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, int[] values) {\n+long[] indices, int[] values) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, indices, values);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -773,9 +738,8 @@ public class VFactory {\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDummyVector intDummyVector(int matrixId, int rowId, int clock, int dim,\n-      int[] values) {\n-    return new IntDummyVector(matrixId, rowId, clock, dim, values);\n+  public static IntDummyVector intDummyVector(int matrixId, int rowId, int clock, int dim, int[] values) {\n+  return new IntDummyVector(matrixId, rowId, clock, dim, values);\n   }\n \n   public static IntDummyVector intDummyVector(int dim, int[] values) {\n@@ -783,8 +747,8 @@ public class VFactory {\n   }\n \n   public static LongDummyVector longDummyVector(int matrixId, int rowId, int clock, long dim,\n-      long[] values) {\n-    return new LongDummyVector(matrixId, rowId, clock, dim, values);\n+long[] values) {\n+  return new LongDummyVector(matrixId, rowId, clock, dim, values);\n   }\n \n   public static LongDummyVector longDummyVector(long dim, long[] values) {\n@@ -792,28 +756,24 @@ public class VFactory {\n   }\n \n   //---------------------------------------------------------------\n-  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      IntDoubleVector[] partitions, int subDim) {\n-    return new CompIntDoubleVector(matrixId, rowId, clock, dim, partitions, subDim);\n+  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim, IntDoubleVector[] partitions, int subDim) {\n+  return new CompIntDoubleVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompIntDoubleVector compIntDoubleVector(int dim, IntDoubleVector[] partitions,\n-      int subDim) {\n-    return new CompIntDoubleVector(dim, partitions, subDim);\n+  public static CompIntDoubleVector compIntDoubleVector(int dim, IntDoubleVector[] partitions, int subDim) {\n+  return new CompIntDoubleVector(dim, partitions, subDim);\n   }\n \n-  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      IntDoubleVector[] partitions) {\n-    return new CompIntDoubleVector(matrixId, rowId, clock, dim, partitions);\n+  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim, IntDoubleVector[] partitions) {\n+  return new CompIntDoubleVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n   public static CompIntDoubleVector compIntDoubleVector(int dim, IntDoubleVector[] partitions) {\n     return new CompIntDoubleVector(dim, partitions);\n   }\n \n-  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n-    int numParts = (dim + subDim - 1) / subDim;\n+  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim, int subDim, StorageType storageType) {\n+  int numParts = (dim + subDim - 1) / subDim;\n     IntDoubleVector[] partitions = new IntDoubleVector[numParts];\n     switch (storageType) {\n       case DENSE:\n@@ -850,40 +810,35 @@ public class VFactory {\n \n   public static CompIntDoubleVector compIntDoubleVector(int dim, int subDim,\n       StorageType storageType) {\n-    return compIntDoubleVector(0, 0, 0, dim, subDim, storageType);\n+  return compIntDoubleVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n-    return new CompIntDoubleVector(matrixId, rowId, clock, dim, subDim);\n+  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim, int subDim) {\n+  return new CompIntDoubleVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n   public static CompIntDoubleVector compIntDoubleVector(int dim, int subDim) {\n     return new CompIntDoubleVector(dim, subDim);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      IntFloatVector[] partitions, int subDim) {\n-    return new CompIntFloatVector(matrixId, rowId, clock, dim, partitions, subDim);\n+  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim, IntFloatVector[] partitions, int subDim) {\n+  return new CompIntFloatVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int dim, IntFloatVector[] partitions,\n-      int subDim) {\n-    return new CompIntFloatVector(dim, partitions, subDim);\n+  public static CompIntFloatVector compIntFloatVector(int dim, IntFloatVector[] partitions, int subDim) {\n+  return new CompIntFloatVector(dim, partitions, subDim);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      IntFloatVector[] partitions) {\n-    return new CompIntFloatVector(matrixId, rowId, clock, dim, partitions);\n+  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim, IntFloatVector[] partitions) {\n+  return new CompIntFloatVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n   public static CompIntFloatVector compIntFloatVector(int dim, IntFloatVector[] partitions) {\n     return new CompIntFloatVector(dim, partitions);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n-    int numParts = (dim + subDim - 1) / subDim;\n+  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim, int subDim, StorageType storageType) {\n+  int numParts = (dim + subDim - 1) / subDim;\n     IntFloatVector[] partitions = new IntFloatVector[numParts];\n     switch (storageType) {\n       case DENSE:\n@@ -920,40 +875,35 @@ public class VFactory {\n \n   public static CompIntFloatVector compIntFloatVector(int dim, int subDim,\n       StorageType storageType) {\n-    return compIntFloatVector(0, 0, 0, dim, subDim, storageType);\n+  return compIntFloatVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n-    return new CompIntFloatVector(matrixId, rowId, clock, dim, subDim);\n+  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim, int subDim) {\n+  return new CompIntFloatVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n   public static CompIntFloatVector compIntFloatVector(int dim, int subDim) {\n     return new CompIntFloatVector(dim, subDim);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      IntLongVector[] partitions, int subDim) {\n-    return new CompIntLongVector(matrixId, rowId, clock, dim, partitions, subDim);\n+  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim, IntLongVector[] partitions, int subDim) {\n+  return new CompIntLongVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int dim, IntLongVector[] partitions,\n-      int subDim) {\n-    return new CompIntLongVector(dim, partitions, subDim);\n+  public static CompIntLongVector compIntLongVector(int dim, IntLongVector[] partitions, int subDim) {\n+  return new CompIntLongVector(dim, partitions, subDim);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      IntLongVector[] partitions) {\n-    return new CompIntLongVector(matrixId, rowId, clock, dim, partitions);\n+  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim, IntLongVector[] partitions) {\n+  return new CompIntLongVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n   public static CompIntLongVector compIntLongVector(int dim, IntLongVector[] partitions) {\n     return new CompIntLongVector(dim, partitions);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n-    int numParts = (dim + subDim - 1) / subDim;\n+  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim, int subDim, StorageType storageType) {\n+  int numParts = (dim + subDim - 1) / subDim;\n     IntLongVector[] partitions = new IntLongVector[numParts];\n     switch (storageType) {\n       case DENSE:\n@@ -992,36 +942,32 @@ public class VFactory {\n     return compIntLongVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n-    return new CompIntLongVector(matrixId, rowId, clock, dim, subDim);\n+  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim, int subDim) {\n+  return new CompIntLongVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n   public static CompIntLongVector compIntLongVector(int dim, int subDim) {\n     return new CompIntLongVector(dim, subDim);\n   }\n \n-  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      IntIntVector[] partitions, int subDim) {\n-    return new CompIntIntVector(matrixId, rowId, clock, dim, partitions, subDim);\n+  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim, IntIntVector[] partitions, int subDim) {\n+  return new CompIntIntVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompIntIntVector compIntIntVector(int dim, IntIntVector[] partitions, int subDim) {\n     return new CompIntIntVector(dim, partitions, subDim);\n   }\n \n-  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      IntIntVector[] partitions) {\n-    return new CompIntIntVector(matrixId, rowId, clock, dim, partitions);\n+  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim, IntIntVector[] partitions) {\n+  return new CompIntIntVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n   public static CompIntIntVector compIntIntVector(int dim, IntIntVector[] partitions) {\n     return new CompIntIntVector(dim, partitions);\n   }\n \n-  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n-    int numParts = (dim + subDim - 1) / subDim;\n+  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim, int subDim, StorageType storageType) {\n+  int numParts = (dim + subDim - 1) / subDim;\n     IntIntVector[] partitions = new IntIntVector[numParts];\n     switch (storageType) {\n       case DENSE:\n@@ -1060,9 +1006,8 @@ public class VFactory {\n     return compIntIntVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n-    return new CompIntIntVector(matrixId, rowId, clock, dim, subDim);\n+  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim, int subDim) {\n+  return new CompIntIntVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n   public static CompIntIntVector compIntIntVector(int dim, int subDim) {\n@@ -1070,18 +1015,18 @@ public class VFactory {\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, LongDoubleVector[] partitions, long subDim) {\n-    return new CompLongDoubleVector(matrixId, rowId, clock, dim, partitions, subDim);\n+long dim, LongDoubleVector[] partitions, long subDim) {\n+  return new CompLongDoubleVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(long dim, LongDoubleVector[] partitions,\n-      long subDim) {\n-    return new CompLongDoubleVector(dim, partitions, subDim);\n+long subDim) {\n+  return new CompLongDoubleVector(dim, partitions, subDim);\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, LongDoubleVector[] partitions) {\n-    return new CompLongDoubleVector(matrixId, rowId, clock, dim, partitions);\n+long dim, LongDoubleVector[] partitions) {\n+  return new CompLongDoubleVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(long dim, LongDoubleVector[] partitions) {\n@@ -1089,8 +1034,8 @@ public class VFactory {\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim, StorageType storageType) {\n-    int numParts = (int) ((dim + subDim - 1) / subDim);\n+long dim, long subDim, StorageType storageType) {\n+  int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongDoubleVector[] partitions = new LongDoubleVector[numParts];\n     switch (storageType) {\n       case DENSE:\n@@ -1120,12 +1065,12 @@ public class VFactory {\n \n   public static CompLongDoubleVector compLongDoubleVector(long dim, long subDim,\n       StorageType storageType) {\n-    return compLongDoubleVector(0, 0, 0, dim, subDim, storageType);\n+  return compLongDoubleVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim) {\n-    return new CompLongDoubleVector(matrixId, rowId, clock, dim, subDim);\n+long dim, long subDim) {\n+  return new CompLongDoubleVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n   public static CompLongDoubleVector compLongDoubleVector(long dim, long subDim) {\n@@ -1133,18 +1078,18 @@ public class VFactory {\n   }\n \n   public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, LongFloatVector[] partitions, long subDim) {\n-    return new CompLongFloatVector(matrixId, rowId, clock, dim, partitions, subDim);\n+long dim, LongFloatVector[] partitions, long subDim) {\n+  return new CompLongFloatVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompLongFloatVector compLongFloatVector(long dim, LongFloatVector[] partitions,\n-      long subDim) {\n-    return new CompLongFloatVector(dim, partitions, subDim);\n+long subDim) {\n+  return new CompLongFloatVector(dim, partitions, subDim);\n   }\n \n   public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, LongFloatVector[] partitions) {\n-    return new CompLongFloatVector(matrixId, rowId, clock, dim, partitions);\n+long dim, LongFloatVector[] partitions) {\n+  return new CompLongFloatVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n   public static CompLongFloatVector compLongFloatVector(long dim, LongFloatVector[] partitions) {\n@@ -1152,8 +1097,8 @@ public class VFactory {\n   }\n \n   public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim, StorageType storageType) {\n-    int numParts = (int) ((dim + subDim - 1) / subDim);\n+long dim, long subDim, StorageType storageType) {\n+  int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongFloatVector[] partitions = new LongFloatVector[numParts];\n     switch (storageType) {\n       case DENSE:\n@@ -1183,31 +1128,29 @@ public class VFactory {\n \n   public static CompLongFloatVector compLongFloatVector(long dim, long subDim,\n       StorageType storageType) {\n-    return compLongFloatVector(0, 0, 0, dim, subDim, storageType);\n+  return compLongFloatVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim) {\n-    return new CompLongFloatVector(matrixId, rowId, clock, dim, subDim);\n+long dim, long subDim) {\n+  return new CompLongFloatVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n   public static CompLongFloatVector compLongFloatVector(long dim, long subDim) {\n     return new CompLongFloatVector(dim, subDim);\n   }\n \n-  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      LongLongVector[] partitions, long subDim) {\n-    return new CompLongLongVector(matrixId, rowId, clock, dim, partitions, subDim);\n+  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim, LongLongVector[] partitions, long subDim) {\n+  return new CompLongLongVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompLongLongVector compLongLongVector(long dim, LongLongVector[] partitions,\n-      long subDim) {\n-    return new CompLongLongVector(dim, partitions, subDim);\n+long subDim) {\n+  return new CompLongLongVector(dim, partitions, subDim);\n   }\n \n-  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      LongLongVector[] partitions) {\n-    return new CompLongLongVector(matrixId, rowId, clock, dim, partitions);\n+  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim, LongLongVector[] partitions) {\n+  return new CompLongLongVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n   public static CompLongLongVector compLongLongVector(long dim, LongLongVector[] partitions) {\n@@ -1215,8 +1158,8 @@ public class VFactory {\n   }\n \n   public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim, StorageType storageType) {\n-    int numParts = (int) ((dim + subDim - 1) / subDim);\n+long subDim, StorageType storageType) {\n+  int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongLongVector[] partitions = new LongLongVector[numParts];\n     switch (storageType) {\n       case DENSE:\n@@ -1246,31 +1189,29 @@ public class VFactory {\n \n   public static CompLongLongVector compLongLongVector(long dim, long subDim,\n       StorageType storageType) {\n-    return compLongLongVector(0, 0, 0, dim, subDim, storageType);\n+  return compLongLongVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim) {\n-    return new CompLongLongVector(matrixId, rowId, clock, dim, subDim);\n+long subDim) {\n+  return new CompLongLongVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n   public static CompLongLongVector compLongLongVector(long dim, long subDim) {\n     return new CompLongLongVector(dim, subDim);\n   }\n \n-  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      LongIntVector[] partitions, long subDim) {\n-    return new CompLongIntVector(matrixId, rowId, clock, dim, partitions, subDim);\n+  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim, LongIntVector[] partitions, long subDim) {\n+  return new CompLongIntVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n   public static CompLongIntVector compLongIntVector(long dim, LongIntVector[] partitions,\n-      long subDim) {\n-    return new CompLongIntVector(dim, partitions, subDim);\n+long subDim) {\n+  return new CompLongIntVector(dim, partitions, subDim);\n   }\n \n-  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      LongIntVector[] partitions) {\n-    return new CompLongIntVector(matrixId, rowId, clock, dim, partitions);\n+  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim, LongIntVector[] partitions) {\n+  return new CompLongIntVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n   public static CompLongIntVector compLongIntVector(long dim, LongIntVector[] partitions) {\n@@ -1278,8 +1219,8 @@ public class VFactory {\n   }\n \n   public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim, StorageType storageType) {\n-    int numParts = (int) ((dim + subDim - 1) / subDim);\n+long subDim, StorageType storageType) {\n+  int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongIntVector[] partitions = new LongIntVector[numParts];\n     switch (storageType) {\n       case DENSE:\n@@ -1309,15 +1250,15 @@ public class VFactory {\n \n   public static CompLongIntVector compLongIntVector(long dim, long subDim,\n       StorageType storageType) {\n-    return compLongIntVector(0, 0, 0, dim, subDim, storageType);\n+  return compLongIntVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n   public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim) {\n-    return new CompLongIntVector(matrixId, rowId, clock, dim, subDim);\n+long subDim) {\n+  return new CompLongIntVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n   public static CompLongIntVector compLongIntVector(long dim, long subDim) {\n     return new CompLongIntVector(dim, subDim);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 203
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "171",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "181",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "191",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "206",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "221",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "231",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "241",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "251",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "261",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "281",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "291",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "301",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "311",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "321",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "341",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "351",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "371",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "381",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "401",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "411",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "412",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "416",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "417",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "421",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "431",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "441",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "451",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "452",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "456",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "457",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "461",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "466",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "481",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 109).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "491",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "492",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "497",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "501",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "511",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "521",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "531",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "532",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "536",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "537",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "541",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "561",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "571",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "581",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "591",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "601",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "611",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "612",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "616",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "617",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "621",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "641",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "651",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "661",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 120).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "681",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "691",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "696",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "701",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "711",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "719",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "729",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "733",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "737",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "745",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "780",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "784",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "792",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "796",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "800",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 129).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "808",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "843",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "847",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "855",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 138).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "859",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "863",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "871",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "910",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "918",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "926",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "934",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "973",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "981",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "985",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 113).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "989",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "997",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1025",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1029",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1037",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1041",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1045",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1053",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 141).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1081",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1085",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1093",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1097",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 107).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1101",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1109",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1137",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1141",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1149",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 140).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1153",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 104).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1157",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1165",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 137).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1193",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1197",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/60/VFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/60/VFactory.java\nindex 84874052327..427a6fe0be0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/60/VFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/60/VFactory.java\n@@ -78,8 +78,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector denseDoubleVector(int matrixId, int rowId, int clock,\n-      double[] values) {\n+  public static IntDoubleVector denseDoubleVector(int matrixId, int rowId, int clock, double[] values) {\n     IntDoubleVectorStorage storage = new IntDoubleDenseVectorStorage(values);\n     return new IntDoubleVector(matrixId, rowId, clock, values.length, storage);\n   }\n@@ -99,8 +98,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector denseFloatVector(int matrixId, int rowId, int clock,\n-      float[] values) {\n+  public static IntFloatVector denseFloatVector(int matrixId, int rowId, int clock, float[] values) {\n     IntFloatVectorStorage storage = new IntFloatDenseVectorStorage(values);\n     return new IntFloatVector(matrixId, rowId, clock, values.length, storage);\n   }\n@@ -160,8 +158,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntDoubleVectorStorage storage = new IntDoubleSparseVectorStorage(dim, capacity);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -171,8 +168,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, double[] values) {\n+  public static IntDoubleVector sparseDoubleVector(int matrixId, int rowId, int clock, int dim, int[] indices, double[] values) {\n     IntDoubleVectorStorage storage = new IntDoubleSparseVectorStorage(dim, indices, values);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -182,8 +178,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+  public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock, long dim) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -193,8 +188,7 @@ public class VFactory {\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+  public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim, capacity);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -204,14 +198,12 @@ public class VFactory {\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, double[] values) {\n+  public static LongDoubleVector sparseLongKeyDoubleVector(int matrixId, int rowId, int clock, long dim, long[] indices, double[] values) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim, indices, values);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongDoubleVector sparseLongKeyDoubleVector(long dim, long[] indices,\n-      double[] values) {\n+  public static LongDoubleVector sparseLongKeyDoubleVector(long dim, long[] indices, double[] values) {\n     LongDoubleVectorStorage storage = new LongDoubleSparseVectorStorage(dim, indices, values);\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n@@ -226,8 +218,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntFloatVectorStorage storage = new IntFloatSparseVectorStorage(dim, capacity);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -237,8 +228,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, float[] values) {\n+  public static IntFloatVector sparseFloatVector(int matrixId, int rowId, int clock, int dim, int[] indices, float[] values) {\n     IntFloatVectorStorage storage = new IntFloatSparseVectorStorage(dim, indices, values);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -248,8 +238,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+  public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock, long dim) {\n     LongFloatVectorStorage storage = new LongFloatSparseVectorStorage(dim);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -259,8 +248,7 @@ public class VFactory {\n     return new LongFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+  public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongFloatVectorStorage storage = new LongFloatSparseVectorStorage(dim, capacity);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -270,8 +258,7 @@ public class VFactory {\n     return new LongFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, float[] values) {\n+  public static LongFloatVector sparseLongKeyFloatVector(int matrixId, int rowId, int clock, long dim, long[] indices, float[] values) {\n     LongFloatVectorStorage storage = new LongFloatSparseVectorStorage(dim, indices, values);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -291,8 +278,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntLongVectorStorage storage = new IntLongSparseVectorStorage(dim, capacity);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -302,8 +288,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, long[] values) {\n+  public static IntLongVector sparseLongVector(int matrixId, int rowId, int clock, int dim, int[] indices, long[] values) {\n     IntLongVectorStorage storage = new IntLongSparseVectorStorage(dim, indices, values);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -313,8 +298,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+  public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim) {\n     LongLongVectorStorage storage = new LongLongSparseVectorStorage(dim);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -324,8 +308,7 @@ public class VFactory {\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+  public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongLongVectorStorage storage = new LongLongSparseVectorStorage(dim, capacity);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -335,8 +318,7 @@ public class VFactory {\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, long[] values) {\n+  public static LongLongVector sparseLongKeyLongVector(int matrixId, int rowId, int clock, long dim, long[] indices, long[] values) {\n     LongLongVectorStorage storage = new LongLongSparseVectorStorage(dim, indices, values);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -356,8 +338,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntIntVectorStorage storage = new IntIntSparseVectorStorage(dim, capacity);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -367,8 +348,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, int[] values) {\n+  public static IntIntVector sparseIntVector(int matrixId, int rowId, int clock, int dim, int[] indices, int[] values) {\n     IntIntVectorStorage storage = new IntIntSparseVectorStorage(dim, indices, values);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -388,8 +368,7 @@ public class VFactory {\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongIntVector sparseLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+  public static LongIntVector sparseLongKeyIntVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongIntVectorStorage storage = new LongIntSparseVectorStorage(dim, capacity);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -399,8 +378,7 @@ public class VFactory {\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongIntVector sparseLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, int[] values) {\n+  public static LongIntVector sparseLongKeyIntVector(int matrixId, int rowId, int clock, long dim, long[] indices, int[] values) {\n     LongIntVectorStorage storage = new LongIntSparseVectorStorage(dim, indices, values);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -420,8 +398,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntDoubleSortedVectorStorage storage = new IntDoubleSortedVectorStorage(dim, capacity);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -431,22 +408,17 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int size, int[] indices, double[] values) {\n-    IntDoubleSortedVectorStorage storage =\n-        new IntDoubleSortedVectorStorage(dim, size, indices, values);\n+  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim, int size, int[] indices, double[] values) {\n+    IntDoubleSortedVectorStorage storage = new IntDoubleSortedVectorStorage(dim, size, indices, values);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static IntDoubleVector sortedDoubleVector(int dim, int size, int[] indices,\n-      double[] values) {\n-    IntDoubleSortedVectorStorage storage =\n-        new IntDoubleSortedVectorStorage(dim, size, indices, values);\n+  public static IntDoubleVector sortedDoubleVector(int dim, int size, int[] indices, double[] values) {\n+    IntDoubleSortedVectorStorage storage = new IntDoubleSortedVectorStorage(dim, size, indices, values);\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, double[] values) {\n+  public static IntDoubleVector sortedDoubleVector(int matrixId, int rowId, int clock, int dim, int[] indices, double[] values) {\n     IntDoubleSortedVectorStorage storage = new IntDoubleSortedVectorStorage(dim, indices, values);\n     return new IntDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -456,8 +428,7 @@ public class VFactory {\n     return new IntDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+  public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock, long dim) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -467,8 +438,7 @@ public class VFactory {\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+  public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, capacity);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -478,28 +448,22 @@ public class VFactory {\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, int size, long[] indices, double[] values) {\n-    LongDoubleSortedVectorStorage storage =\n-        new LongDoubleSortedVectorStorage(dim, size, indices, values);\n+  public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock, long dim, int size, long[] indices, double[] values) {\n+    LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, size, indices, values);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongDoubleVector sortedLongKeyDoubleVector(long dim, int size, long[] indices,\n-      double[] values) {\n-    LongDoubleSortedVectorStorage storage =\n-        new LongDoubleSortedVectorStorage(dim, size, indices, values);\n+  public static LongDoubleVector sortedLongKeyDoubleVector(long dim, int size, long[] indices, double[] values) {\n+    LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, size, indices, values);\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, double[] values) {\n+  public static LongDoubleVector sortedLongKeyDoubleVector(int matrixId, int rowId, int clock, long dim, long[] indices, double[] values) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, indices, values);\n     return new LongDoubleVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongDoubleVector sortedLongKeyDoubleVector(long dim, long[] indices,\n-      double[] values) {\n+  public static LongDoubleVector sortedLongKeyDoubleVector(long dim, long[] indices, double[] values) {\n     LongDoubleSortedVectorStorage storage = new LongDoubleSortedVectorStorage(dim, indices, values);\n     return new LongDoubleVector(0, 0, 0, dim, storage);\n   }\n@@ -514,8 +478,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntFloatSortedVectorStorage storage = new IntFloatSortedVectorStorage(dim, capacity);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -525,21 +488,17 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int size, int[] indices, float[] values) {\n-    IntFloatSortedVectorStorage storage =\n-        new IntFloatSortedVectorStorage(dim, size, indices, values);\n+  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim, int size, int[] indices, float[] values) {\n+    IntFloatSortedVectorStorage storage = new IntFloatSortedVectorStorage(dim, size, indices, values);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n \n   public static IntFloatVector sortedFloatVector(int dim, int size, int[] indices, float[] values) {\n-    IntFloatSortedVectorStorage storage =\n-        new IntFloatSortedVectorStorage(dim, size, indices, values);\n+    IntFloatSortedVectorStorage storage = new IntFloatSortedVectorStorage(dim, size, indices, values);\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, float[] values) {\n+  public static IntFloatVector sortedFloatVector(int matrixId, int rowId, int clock, int dim, int[] indices, float[] values) {\n     IntFloatSortedVectorStorage storage = new IntFloatSortedVectorStorage(dim, indices, values);\n     return new IntFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -549,8 +508,7 @@ public class VFactory {\n     return new IntFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+  public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock, long dim) {\n     LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -560,8 +518,7 @@ public class VFactory {\n     return new LongFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, int capacity) {\n+  public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim, capacity);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -571,22 +528,17 @@ public class VFactory {\n     return new LongFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, int size, long[] indices, float[] values) {\n-    LongFloatSortedVectorStorage storage =\n-        new LongFloatSortedVectorStorage(dim, size, indices, values);\n+  public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock, long dim, int size, long[] indices, float[] values) {\n+    LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim, size, indices, values);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongFloatVector sortedLongKeyFloatVector(long dim, int size, long[] indices,\n-      float[] values) {\n-    LongFloatSortedVectorStorage storage =\n-        new LongFloatSortedVectorStorage(dim, size, indices, values);\n+  public static LongFloatVector sortedLongKeyFloatVector(long dim, int size, long[] indices, float[] values) {\n+    LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim, size, indices, values);\n     return new LongFloatVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long[] indices, float[] values) {\n+  public static LongFloatVector sortedLongKeyFloatVector(int matrixId, int rowId, int clock, long dim, long[] indices, float[] values) {\n     LongFloatSortedVectorStorage storage = new LongFloatSortedVectorStorage(dim, indices, values);\n     return new LongFloatVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -606,8 +558,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntLongSortedVectorStorage storage = new IntLongSortedVectorStorage(dim, capacity);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -617,8 +568,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim,\n-      int size, int[] indices, long[] values) {\n+  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim, int size, int[] indices, long[] values) {\n     IntLongSortedVectorStorage storage = new IntLongSortedVectorStorage(dim, size, indices, values);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -628,8 +578,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, long[] values) {\n+  public static IntLongVector sortedLongVector(int matrixId, int rowId, int clock, int dim, int[] indices, long[] values) {\n     IntLongSortedVectorStorage storage = new IntLongSortedVectorStorage(dim, indices, values);\n     return new IntLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -639,8 +588,7 @@ public class VFactory {\n     return new IntLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock,\n-      long dim) {\n+  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim) {\n     LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -650,8 +598,7 @@ public class VFactory {\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim, capacity);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -661,22 +608,17 @@ public class VFactory {\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      int size, long[] indices, long[] values) {\n-    LongLongSortedVectorStorage storage =\n-        new LongLongSortedVectorStorage(dim, size, indices, values);\n+  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim, int size, long[] indices, long[] values) {\n+    LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim, size, indices, values);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongLongVector sortedLongKeyLongVector(long dim, int size, long[] indices,\n-      long[] values) {\n-    LongLongSortedVectorStorage storage =\n-        new LongLongSortedVectorStorage(dim, size, indices, values);\n+  public static LongLongVector sortedLongKeyLongVector(long dim, int size, long[] indices, long[] values) {\n+    LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim, size, indices, values);\n     return new LongLongVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, long[] values) {\n+  public static LongLongVector sortedLongKeyLongVector(int matrixId, int rowId, int clock, long dim, long[] indices, long[] values) {\n     LongLongSortedVectorStorage storage = new LongLongSortedVectorStorage(dim, indices, values);\n     return new LongLongVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -696,8 +638,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim,\n-      int capacity) {\n+  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim, int capacity) {\n     IntIntSortedVectorStorage storage = new IntIntSortedVectorStorage(dim, capacity);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -707,8 +648,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim, int size,\n-      int[] indices, int[] values) {\n+  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim, int size, int[] indices, int[] values) {\n     IntIntSortedVectorStorage storage = new IntIntSortedVectorStorage(dim, size, indices, values);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -718,8 +658,7 @@ public class VFactory {\n     return new IntIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim,\n-      int[] indices, int[] values) {\n+  public static IntIntVector sortedIntVector(int matrixId, int rowId, int clock, int dim, int[] indices, int[] values) {\n     IntIntSortedVectorStorage storage = new IntIntSortedVectorStorage(dim, indices, values);\n     return new IntIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -739,8 +678,7 @@ public class VFactory {\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      int capacity) {\n+  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim, int capacity) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, capacity);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -750,20 +688,17 @@ public class VFactory {\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      int size, long[] indices, int[] values) {\n+  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim, int size, long[] indices, int[] values) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, size, indices, values);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n \n-  public static LongIntVector sortedLongKeyIntVector(long dim, int size, long[] indices,\n-      int[] values) {\n+  public static LongIntVector sortedLongKeyIntVector(long dim, int size, long[] indices, int[] values) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, size, indices, values);\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim,\n-      long[] indices, int[] values) {\n+  public static LongIntVector sortedLongKeyIntVector(int matrixId, int rowId, int clock, long dim, long[] indices, int[] values) {\n     LongIntSortedVectorStorage storage = new LongIntSortedVectorStorage(dim, indices, values);\n     return new LongIntVector(matrixId, rowId, clock, dim, storage);\n   }\n@@ -773,8 +708,7 @@ public class VFactory {\n     return new LongIntVector(0, 0, 0, dim, storage);\n   }\n \n-  public static IntDummyVector intDummyVector(int matrixId, int rowId, int clock, int dim,\n-      int[] values) {\n+  public static IntDummyVector intDummyVector(int matrixId, int rowId, int clock, int dim, int[] values) {\n     return new IntDummyVector(matrixId, rowId, clock, dim, values);\n   }\n \n@@ -782,8 +716,7 @@ public class VFactory {\n     return new IntDummyVector(dim, values);\n   }\n \n-  public static LongDummyVector longDummyVector(int matrixId, int rowId, int clock, long dim,\n-      long[] values) {\n+  public static LongDummyVector longDummyVector(int matrixId, int rowId, int clock, long dim, long[] values) {\n     return new LongDummyVector(matrixId, rowId, clock, dim, values);\n   }\n \n@@ -792,18 +725,16 @@ public class VFactory {\n   }\n \n   //---------------------------------------------------------------\n-  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      IntDoubleVector[] partitions, int subDim) {\n+\n+  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim, IntDoubleVector[] partitions, int subDim) {\n     return new CompIntDoubleVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompIntDoubleVector compIntDoubleVector(int dim, IntDoubleVector[] partitions,\n-      int subDim) {\n+  public static CompIntDoubleVector compIntDoubleVector(int dim, IntDoubleVector[] partitions, int subDim) {\n     return new CompIntDoubleVector(dim, partitions, subDim);\n   }\n \n-  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      IntDoubleVector[] partitions) {\n+  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim, IntDoubleVector[] partitions) {\n     return new CompIntDoubleVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -811,8 +742,7 @@ public class VFactory {\n     return new CompIntDoubleVector(dim, partitions);\n   }\n \n-  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n+  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim, int subDim, StorageType storageType) {\n     int numParts = (dim + subDim - 1) / subDim;\n     IntDoubleVector[] partitions = new IntDoubleVector[numParts];\n     switch (storageType) {\n@@ -844,17 +774,14 @@ public class VFactory {\n         }\n         break;\n     }\n-\n     return new CompIntDoubleVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n-  public static CompIntDoubleVector compIntDoubleVector(int dim, int subDim,\n-      StorageType storageType) {\n+  public static CompIntDoubleVector compIntDoubleVector(int dim, int subDim, StorageType storageType) {\n     return compIntDoubleVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n+  public static CompIntDoubleVector compIntDoubleVector(int matrixId, int rowId, int clock, int dim, int subDim) {\n     return new CompIntDoubleVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -862,18 +789,15 @@ public class VFactory {\n     return new CompIntDoubleVector(dim, subDim);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      IntFloatVector[] partitions, int subDim) {\n+  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim, IntFloatVector[] partitions, int subDim) {\n     return new CompIntFloatVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int dim, IntFloatVector[] partitions,\n-      int subDim) {\n+  public static CompIntFloatVector compIntFloatVector(int dim, IntFloatVector[] partitions, int subDim) {\n     return new CompIntFloatVector(dim, partitions, subDim);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      IntFloatVector[] partitions) {\n+  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim, IntFloatVector[] partitions) {\n     return new CompIntFloatVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -881,8 +805,7 @@ public class VFactory {\n     return new CompIntFloatVector(dim, partitions);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n+  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim, int subDim, StorageType storageType) {\n     int numParts = (dim + subDim - 1) / subDim;\n     IntFloatVector[] partitions = new IntFloatVector[numParts];\n     switch (storageType) {\n@@ -914,17 +837,14 @@ public class VFactory {\n         }\n         break;\n     }\n-\n     return new CompIntFloatVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int dim, int subDim,\n-      StorageType storageType) {\n+  public static CompIntFloatVector compIntFloatVector(int dim, int subDim, StorageType storageType) {\n     return compIntFloatVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n+  public static CompIntFloatVector compIntFloatVector(int matrixId, int rowId, int clock, int dim, int subDim) {\n     return new CompIntFloatVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -932,18 +852,15 @@ public class VFactory {\n     return new CompIntFloatVector(dim, subDim);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      IntLongVector[] partitions, int subDim) {\n+  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim, IntLongVector[] partitions, int subDim) {\n     return new CompIntLongVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int dim, IntLongVector[] partitions,\n-      int subDim) {\n+  public static CompIntLongVector compIntLongVector(int dim, IntLongVector[] partitions, int subDim) {\n     return new CompIntLongVector(dim, partitions, subDim);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      IntLongVector[] partitions) {\n+  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim, IntLongVector[] partitions) {\n     return new CompIntLongVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -951,8 +868,7 @@ public class VFactory {\n     return new CompIntLongVector(dim, partitions);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n+  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim, int subDim, StorageType storageType) {\n     int numParts = (dim + subDim - 1) / subDim;\n     IntLongVector[] partitions = new IntLongVector[numParts];\n     switch (storageType) {\n@@ -984,7 +900,6 @@ public class VFactory {\n         }\n         break;\n     }\n-\n     return new CompIntLongVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -992,8 +907,7 @@ public class VFactory {\n     return compIntLongVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n+  public static CompIntLongVector compIntLongVector(int matrixId, int rowId, int clock, int dim, int subDim) {\n     return new CompIntLongVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1001,8 +915,7 @@ public class VFactory {\n     return new CompIntLongVector(dim, subDim);\n   }\n \n-  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      IntIntVector[] partitions, int subDim) {\n+  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim, IntIntVector[] partitions, int subDim) {\n     return new CompIntIntVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n@@ -1010,8 +923,7 @@ public class VFactory {\n     return new CompIntIntVector(dim, partitions, subDim);\n   }\n \n-  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      IntIntVector[] partitions) {\n+  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim, IntIntVector[] partitions) {\n     return new CompIntIntVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1019,8 +931,7 @@ public class VFactory {\n     return new CompIntIntVector(dim, partitions);\n   }\n \n-  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim, StorageType storageType) {\n+  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim, int subDim, StorageType storageType) {\n     int numParts = (dim + subDim - 1) / subDim;\n     IntIntVector[] partitions = new IntIntVector[numParts];\n     switch (storageType) {\n@@ -1052,7 +963,6 @@ public class VFactory {\n         }\n         break;\n     }\n-\n     return new CompIntIntVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1060,8 +970,7 @@ public class VFactory {\n     return compIntIntVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim,\n-      int subDim) {\n+  public static CompIntIntVector compIntIntVector(int matrixId, int rowId, int clock, int dim, int subDim) {\n     return new CompIntIntVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1069,18 +978,15 @@ public class VFactory {\n     return new CompIntIntVector(dim, subDim);\n   }\n \n-  public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, LongDoubleVector[] partitions, long subDim) {\n+  public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock, long dim, LongDoubleVector[] partitions, long subDim) {\n     return new CompLongDoubleVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompLongDoubleVector compLongDoubleVector(long dim, LongDoubleVector[] partitions,\n-      long subDim) {\n+  public static CompLongDoubleVector compLongDoubleVector(long dim, LongDoubleVector[] partitions, long subDim) {\n     return new CompLongDoubleVector(dim, partitions, subDim);\n   }\n \n-  public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, LongDoubleVector[] partitions) {\n+  public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock, long dim, LongDoubleVector[] partitions) {\n     return new CompLongDoubleVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1088,8 +994,7 @@ public class VFactory {\n     return new CompLongDoubleVector(dim, partitions);\n   }\n \n-  public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim, StorageType storageType) {\n+  public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock, long dim, long subDim, StorageType storageType) {\n     int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongDoubleVector[] partitions = new LongDoubleVector[numParts];\n     switch (storageType) {\n@@ -1114,17 +1019,14 @@ public class VFactory {\n         }\n         break;\n     }\n-\n     return new CompLongDoubleVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n-  public static CompLongDoubleVector compLongDoubleVector(long dim, long subDim,\n-      StorageType storageType) {\n+  public static CompLongDoubleVector compLongDoubleVector(long dim, long subDim, StorageType storageType) {\n     return compLongDoubleVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim) {\n+  public static CompLongDoubleVector compLongDoubleVector(int matrixId, int rowId, int clock, long dim, long subDim) {\n     return new CompLongDoubleVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1132,18 +1034,15 @@ public class VFactory {\n     return new CompLongDoubleVector(dim, subDim);\n   }\n \n-  public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, LongFloatVector[] partitions, long subDim) {\n+  public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock, long dim, LongFloatVector[] partitions, long subDim) {\n     return new CompLongFloatVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompLongFloatVector compLongFloatVector(long dim, LongFloatVector[] partitions,\n-      long subDim) {\n+  public static CompLongFloatVector compLongFloatVector(long dim, LongFloatVector[] partitions, long subDim) {\n     return new CompLongFloatVector(dim, partitions, subDim);\n   }\n \n-  public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, LongFloatVector[] partitions) {\n+  public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock, long dim, LongFloatVector[] partitions) {\n     return new CompLongFloatVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1151,8 +1050,7 @@ public class VFactory {\n     return new CompLongFloatVector(dim, partitions);\n   }\n \n-  public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim, StorageType storageType) {\n+  public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock, long dim, long subDim, StorageType storageType) {\n     int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongFloatVector[] partitions = new LongFloatVector[numParts];\n     switch (storageType) {\n@@ -1177,17 +1075,14 @@ public class VFactory {\n         }\n         break;\n     }\n-\n     return new CompLongFloatVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n-  public static CompLongFloatVector compLongFloatVector(long dim, long subDim,\n-      StorageType storageType) {\n+  public static CompLongFloatVector compLongFloatVector(long dim, long subDim, StorageType storageType) {\n     return compLongFloatVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock,\n-      long dim, long subDim) {\n+  public static CompLongFloatVector compLongFloatVector(int matrixId, int rowId, int clock, long dim, long subDim) {\n     return new CompLongFloatVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1195,18 +1090,15 @@ public class VFactory {\n     return new CompLongFloatVector(dim, subDim);\n   }\n \n-  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      LongLongVector[] partitions, long subDim) {\n+  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim, LongLongVector[] partitions, long subDim) {\n     return new CompLongLongVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompLongLongVector compLongLongVector(long dim, LongLongVector[] partitions,\n-      long subDim) {\n+  public static CompLongLongVector compLongLongVector(long dim, LongLongVector[] partitions, long subDim) {\n     return new CompLongLongVector(dim, partitions, subDim);\n   }\n \n-  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      LongLongVector[] partitions) {\n+  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim, LongLongVector[] partitions) {\n     return new CompLongLongVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1214,8 +1106,7 @@ public class VFactory {\n     return new CompLongLongVector(dim, partitions);\n   }\n \n-  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim, StorageType storageType) {\n+  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim, long subDim, StorageType storageType) {\n     int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongLongVector[] partitions = new LongLongVector[numParts];\n     switch (storageType) {\n@@ -1240,17 +1131,14 @@ public class VFactory {\n         }\n         break;\n     }\n-\n     return new CompLongLongVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n-  public static CompLongLongVector compLongLongVector(long dim, long subDim,\n-      StorageType storageType) {\n+  public static CompLongLongVector compLongLongVector(long dim, long subDim, StorageType storageType) {\n     return compLongLongVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim) {\n+  public static CompLongLongVector compLongLongVector(int matrixId, int rowId, int clock, long dim, long subDim) {\n     return new CompLongLongVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n@@ -1258,18 +1146,15 @@ public class VFactory {\n     return new CompLongLongVector(dim, subDim);\n   }\n \n-  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      LongIntVector[] partitions, long subDim) {\n+  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim, LongIntVector[] partitions, long subDim) {\n     return new CompLongIntVector(matrixId, rowId, clock, dim, partitions, subDim);\n   }\n \n-  public static CompLongIntVector compLongIntVector(long dim, LongIntVector[] partitions,\n-      long subDim) {\n+  public static CompLongIntVector compLongIntVector(long dim, LongIntVector[] partitions, long subDim) {\n     return new CompLongIntVector(dim, partitions, subDim);\n   }\n \n-  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      LongIntVector[] partitions) {\n+  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim, LongIntVector[] partitions) {\n     return new CompLongIntVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n@@ -1277,8 +1162,7 @@ public class VFactory {\n     return new CompLongIntVector(dim, partitions);\n   }\n \n-  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim, StorageType storageType) {\n+  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim, long subDim, StorageType storageType) {\n     int numParts = (int) ((dim + subDim - 1) / subDim);\n     LongIntVector[] partitions = new LongIntVector[numParts];\n     switch (storageType) {\n@@ -1303,21 +1187,19 @@ public class VFactory {\n         }\n         break;\n     }\n-\n     return new CompLongIntVector(matrixId, rowId, clock, dim, partitions);\n   }\n \n-  public static CompLongIntVector compLongIntVector(long dim, long subDim,\n-      StorageType storageType) {\n+  public static CompLongIntVector compLongIntVector(long dim, long subDim, StorageType storageType) {\n     return compLongIntVector(0, 0, 0, dim, subDim, storageType);\n   }\n \n-  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim,\n-      long subDim) {\n+  public static CompLongIntVector compLongIntVector(int matrixId, int rowId, int clock, long dim, long subDim) {\n     return new CompLongIntVector(matrixId, rowId, clock, dim, subDim);\n   }\n \n   public static CompLongIntVector compLongIntVector(long dim, long subDim) {\n     return new CompLongIntVector(dim, subDim);\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 234
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "6",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}