{
    "project_name": "self-xdsd-self-core",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "95",
                "column": "15",
                "severity": "error",
                "message": "'if' is not followed by whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
            }
        ]
    },
    "source_code": "        } else {\n            boolean hasRole = false;\n            if(this.roles.contains(Contract.Roles.ANY)) {\n                hasRole = true;\n            } else {\n                final Contracts contracts = project.contracts()",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/19/UserHasRoles.java\nindex 0fe07160456..1b252597999 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler/19/UserHasRoles.java\n@@ -92,7 +92,7 @@ public abstract class UserHasRoles extends PreconditionCheck {\n             this.onFalse().perform(event);\n         } else {\n             boolean hasRole = false;\n-            if(this.roles.contains(Contract.Roles.ANY)) {\n+            if (this.roles.contains(Contract.Roles.ANY)) {\n                 hasRole = true;\n             } else {\n                 final Contracts contracts = project.contracts()\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "69",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "@param tag description should start with capital letter",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/19/UserHasRoles.java\nindex 0fe07160456..3bcd94e901c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/intellij/19/UserHasRoles.java\n@@ -20,6 +20,7 @@\n  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  * POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package com.selfxdsd.core.managers;\n \n import com.selfxdsd.api.*;\n@@ -34,7 +35,7 @@ import java.util.List;\n /**\n  * Intermediary step where we check if a user has certain Contributor roles.\n  * <br><br>\n- *\n+ * <p>\n  * This class is abstract and it should be extended by more specialized\n  * classes, which will set the user we're interested in (issue comment\n  * author, issue assignee etc) and the roles we're looking for.\n@@ -64,10 +65,11 @@ public abstract class UserHasRoles extends PreconditionCheck {\n \n     /**\n      * Ctor.\n-     * @param onTrue Step to follow if the author has on of the given roles.\n+     *\n+     * @param onTrue  Step to follow if the author has on of the given roles.\n      * @param onFalse Step to follow if the author none of the given roles.\n-     * @param user User we're interested in.\n-     * @param roles Roles.\n+     * @param user    User we're interested in.\n+     * @param roles   Roles.\n      */\n     public UserHasRoles(\n         final Step onTrue,\n@@ -92,7 +94,7 @@ public abstract class UserHasRoles extends PreconditionCheck {\n             this.onFalse().perform(event);\n         } else {\n             boolean hasRole = false;\n-            if(this.roles.contains(Contract.Roles.ANY)) {\n+            if (this.roles.contains(Contract.Roles.ANY)) {\n                 hasRole = true;\n             } else {\n                 final Contracts contracts = project.contracts()\n@@ -110,7 +112,7 @@ public abstract class UserHasRoles extends PreconditionCheck {\n             } else {\n                 LOG.debug(\n                     \"User \" + this.user\n-                    + \" does NOT have the right role.\"\n+                        + \" does NOT have the right role.\"\n                 );\n                 this.onFalse().perform(event);\n             }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/naturalize/19/UserHasRoles.java\nindex 0fe07160456..fc5afe52bc5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/naturalize/19/UserHasRoles.java\n@@ -92,7 +92,7 @@ public abstract class UserHasRoles extends PreconditionCheck {\n             this.onFalse().perform(event);\n         } else {\n             boolean hasRole = false;\n-            if(this.roles.contains(Contract.Roles.ANY)) {\n+            if (this.roles.contains(Contract.Roles.ANY)) {\n                 hasRole = true;\n             } else {\n                 final Contracts contracts = project.contracts()\n@@ -109,12 +109,11 @@ public abstract class UserHasRoles extends PreconditionCheck {\n                 this.onTrue().perform(event);\n             } else {\n                 LOG.debug(\n-                    \"User \" + this.user\n-                    + \" does NOT have the right role.\"\n+                    \"User \" + this.user + \" does NOT have the right role.\"\n                 );\n                 this.onFalse().perform(event);\n             }\n         }\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "54",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 82).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 102).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 16.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 91).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "column": "20",
                    "severity": "error",
                    "message": "'for' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "105",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/19/UserHasRoles.java\nindex 0fe07160456..b681d441967 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/codebuff/19/UserHasRoles.java\n@@ -27,7 +27,6 @@ import com.selfxdsd.api.pm.PreconditionCheck;\n import com.selfxdsd.api.pm.Step;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.util.Arrays;\n import java.util.List;\n \n@@ -43,23 +42,29 @@ import java.util.List;\n  * @version $Id$\n  * @since 0.0.30\n  */\n+\n+\n public abstract class UserHasRoles extends PreconditionCheck {\n \n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(\n-        UserHasRoles.class\n-    );\n+\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserHasRoles.class);\n \n     /**\n      * User we're interested in (login username).\n      */\n+\n+\n     private final String user;\n \n     /**\n      * Roles.\n      */\n+\n+\n     private final List<String> roles;\n \n     /**\n@@ -69,6 +74,8 @@ public abstract class UserHasRoles extends PreconditionCheck {\n      * @param user User we're interested in.\n      * @param roles Roles.\n      */\n+\n+\n     public UserHasRoles(\n         final Step onTrue,\n         final Step onFalse,\n@@ -83,21 +90,19 @@ public abstract class UserHasRoles extends PreconditionCheck {\n     @Override\n     public final void perform(final Event event) {\n         final Project project = event.project();\n-        final Contributor contributor = project\n-            .contributors()\n-            .getById(this.user, project.provider());\n+        final Contributor contributor = project.contributors().getById(this.user, project.provider());\n         if (contributor == null) {\n-            LOG.debug(\"User \" + this.user + \" is not a contributor \"\n-                + \" of this project.\");\n+            LOG.debug(\"User \"\n+                                                                 + this.user + \" is not a contributor \"\n++ \" of this project.\");\n             this.onFalse().perform(event);\n         } else {\n             boolean hasRole = false;\n-            if(this.roles.contains(Contract.Roles.ANY)) {\n+            if (this.roles.contains(Contract.Roles.ANY)) {\n                 hasRole = true;\n             } else {\n-                final Contracts contracts = project.contracts()\n-                    .ofContributor(contributor);\n-                for (final Contract contract : contracts) {\n+                final Contracts contracts = project.contracts().ofContributor(contributor);\n+                for(final Contract contract : contracts ) {\n                     if (this.roles.contains(contract.role())) {\n                         hasRole = true;\n                         break;\n@@ -105,16 +110,14 @@ public abstract class UserHasRoles extends PreconditionCheck {\n                 }\n             }\n             if (hasRole) {\n-                LOG.debug(\"User \" + this.user + \" has the right role.\");\n+                LOG.debug(\"User \"\n+                              + this.user + \" has the right role.\");\n                 this.onTrue().perform(event);\n             } else {\n-                LOG.debug(\n-                    \"User \" + this.user\n-                    + \" does NOT have the right role.\"\n-                );\n+                LOG.debug(\"User \"\n+                              + this.user + \" does NOT have the right role.\");\n                 this.onFalse().perform(event);\n             }\n         }\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 30
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/19/UserHasRoles.java\nindex 0fe07160456..1b252597999 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_random/19/UserHasRoles.java\n@@ -92,7 +92,7 @@ public abstract class UserHasRoles extends PreconditionCheck {\n             this.onFalse().perform(event);\n         } else {\n             boolean hasRole = false;\n-            if(this.roles.contains(Contract.Roles.ANY)) {\n+            if (this.roles.contains(Contract.Roles.ANY)) {\n                 hasRole = true;\n             } else {\n                 final Contracts contracts = project.contracts()\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/19/UserHasRoles.java\nindex 0fe07160456..1b252597999 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/errored/1/19/UserHasRoles.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/self-xdsd-self-core/styler_three_grams/19/UserHasRoles.java\n@@ -92,7 +92,7 @@ public abstract class UserHasRoles extends PreconditionCheck {\n             this.onFalse().perform(event);\n         } else {\n             boolean hasRole = false;\n-            if(this.roles.contains(Contract.Roles.ANY)) {\n+            if (this.roles.contains(Contract.Roles.ANY)) {\n                 hasRole = true;\n             } else {\n                 final Contracts contracts = project.contracts()\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "codebuff"
    ]
}