{
    "project_name": "neo4j-neo4j",
    "error_id": "1698",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "44",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1698/AbstractIndexProviderFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1698/AbstractIndexProviderFactory.java\nindex 7830c0773f0..3a655f8f8c6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1698/AbstractIndexProviderFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1698/AbstractIndexProviderFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import java.nio.file.Path;\n@@ -40,34 +41,34 @@ import org.neo4j.monitoring.Monitors;\n @RecoveryExtension\n public abstract class AbstractIndexProviderFactory extends ExtensionFactory<AbstractIndexProviderFactory.Dependencies>\n {\n-    protected AbstractIndexProviderFactory( String key )\n+    protected AbstractIndexProviderFactory(String key)\n     {\n-        super( ExtensionType.DATABASE, key );\n+        super(ExtensionType.DATABASE, key);\n     }\n \n     @Override\n-    public IndexProvider newInstance( ExtensionContext context, Dependencies dependencies )\n+    public IndexProvider newInstance(ExtensionContext context, Dependencies dependencies)\n     {\n         PageCache pageCache = dependencies.pageCache();\n         Path databaseDir = context.directory();\n         FileSystemAbstraction fs = dependencies.fileSystem();\n-        Log log = dependencies.getLogService().getInternalLogProvider().getLog( loggingClass() );\n+        Log log = dependencies.getLogService().getInternalLogProvider().getLog(loggingClass());\n         Monitors monitors = dependencies.monitors();\n         String monitorTag = descriptor().toString();\n-        monitors.addMonitorListener( new LoggingMonitor( log ), monitorTag );\n+        monitors.addMonitorListener(new LoggingMonitor(log), monitorTag);\n         Config config = dependencies.getConfig();\n         OperationalMode operationalMode = context.dbmsInfo().operationalMode;\n         RecoveryCleanupWorkCollector recoveryCleanupWorkCollector = dependencies.recoveryCleanupWorkCollector();\n-        return internalCreate( pageCache, databaseDir, fs, monitors, monitorTag, config, operationalMode, recoveryCleanupWorkCollector );\n+        return internalCreate(pageCache, databaseDir, fs, monitors, monitorTag, config, operationalMode, recoveryCleanupWorkCollector);\n     }\n \n     protected abstract Class<?> loggingClass();\n \n     public abstract IndexProviderDescriptor descriptor();\n \n-    protected abstract IndexProvider internalCreate( PageCache pageCache, Path storeDir, FileSystemAbstraction fs,\n-            Monitors monitors, String monitorTag, Config config, OperationalMode operationalMode,\n-            RecoveryCleanupWorkCollector recoveryCleanupWorkCollector );\n+    protected abstract IndexProvider internalCreate(PageCache pageCache, Path storeDir, FileSystemAbstraction fs,\n+                                                    Monitors monitors, String monitorTag, Config config, OperationalMode operationalMode,\n+                                                    RecoveryCleanupWorkCollector recoveryCleanupWorkCollector);\n \n     public interface Dependencies\n     {\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}