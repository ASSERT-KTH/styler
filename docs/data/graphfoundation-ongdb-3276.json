{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3276",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "116",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "136",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "149",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "188",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "196",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "206",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "228",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "230",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "236",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "288",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "292",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "303",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "324",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "333",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "365",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "368",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "370",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "392",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "396",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "396",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "398",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "405",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "411",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "411",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "414",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "431",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "448",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "453",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "453",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "455",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "462",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "475",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "477",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "488",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "504",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "507",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "507",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "517",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "533",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "540",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "582",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "584",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "589",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "601",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "604",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "628",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "633",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "636",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "638",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "656",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "677",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "703",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "716",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "723",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "729",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "732",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "741",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "741",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "744",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "744",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "753",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "753",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "755",
                    "column": "117",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "766",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "766",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "768",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "768",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "796",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "796",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "801",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "811",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "811",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "823",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "823",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "825",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "825",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "836",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "838",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "838",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "857",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "857",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "859",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "859",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "872",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "876",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "878",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "878",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "881",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "886",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "907",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "907",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "936",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "936",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "941",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "941",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "957",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "957",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "975",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "975",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "979",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "984",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "984",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1006",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1006",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1008",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1008",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1012",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1012",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1012",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1014",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1014",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1019",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1019",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1024",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1024",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1024",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1026",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1026",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1031",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1031",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1039",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1039",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1047",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1047",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1050",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1057",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1057",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1064",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1064",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1066",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1066",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1071",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1075",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1075",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1082",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1082",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1082",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1084",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1084",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1089",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1089",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1095",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1097",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1097",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1104",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1104",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1106",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1106",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1110",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1110",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1112",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1112",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1121",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1123",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1123",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1131",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1131",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1133",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1133",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1136",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1136",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1143",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1143",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1145",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1145",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1152",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1152",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1158",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1159",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1162",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1163",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1171",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1171",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1173",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1173",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1179",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1179",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1191",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1191",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3276/CommonAbstractStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3276/CommonAbstractStore.java\nindex ddd21814b94..bb5c25ebd64 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3276/CommonAbstractStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3276/CommonAbstractStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.io.File;\n@@ -61,1167 +62,1151 @@ import static org.neo4j.kernel.impl.store.record.RecordLoad.NORMAL;\n /**\n  * Contains common implementation of {@link RecordStore}.\n  */\n-public abstract class CommonAbstractStore<RECORD extends AbstractBaseRecord,HEADER extends StoreHeader>\n-        implements RecordStore<RECORD>, AutoCloseable\n+public abstract class CommonAbstractStore<RECORD extends AbstractBaseRecord, HEADER extends StoreHeader>\n+    implements RecordStore<RECORD>, AutoCloseable\n {\n-    static final String UNKNOWN_VERSION = \"Unknown\";\n-\n-    protected final Config configuration;\n-    protected final PageCache pageCache;\n-    final File storageFileName;\n-    protected final IdType idType;\n-    protected final IdGeneratorFactory idGeneratorFactory;\n-    protected final Log log;\n-    protected PagedFile storeFile;\n-    protected final String storeVersion;\n-    protected final RecordFormat<RECORD> recordFormat;\n-    private IdGenerator idGenerator;\n-    private boolean storeOk = true;\n-    private RuntimeException causeOfStoreNotOk;\n-    private final String typeDescriptor;\n-    protected int recordSize;\n-\n-    private final StoreHeaderFormat<HEADER> storeHeaderFormat;\n-    private HEADER storeHeader;\n-\n-    private final OpenOption[] openOptions;\n-\n-    /**\n-     * Opens and validates the store contained in <CODE>fileName</CODE>\n-     * loading any configuration defined in <CODE>config</CODE>. After\n-     * validation the <CODE>initStorage</CODE> method is called.\n-     * <p>\n-     * If the store had a clean shutdown it will be marked as <CODE>ok</CODE>\n-     * and the {@link #getStoreOk()} method will return true.\n-     * If a problem was found when opening the store the {@link #makeStoreOk()}\n-     * must be invoked.\n-     * <p>\n-     * throws IOException if the unable to open the storage or if the\n-     * <CODE>initStorage</CODE> method fails\n-     *\n-     * @param idType The Id used to index into this store\n-     */\n-    public CommonAbstractStore(\n-            File fileName,\n-            Config configuration,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            String typeDescriptor,\n-            RecordFormat<RECORD> recordFormat,\n-            StoreHeaderFormat<HEADER> storeHeaderFormat,\n-            String storeVersion,\n-            OpenOption... openOptions )\n-    {\n-        this.storageFileName = fileName;\n-        this.configuration = configuration;\n-        this.idGeneratorFactory = idGeneratorFactory;\n-        this.pageCache = pageCache;\n-        this.idType = idType;\n-        this.typeDescriptor = typeDescriptor;\n-        this.recordFormat = recordFormat;\n-        this.storeHeaderFormat = storeHeaderFormat;\n-        this.storeVersion = storeVersion;\n-        this.openOptions = openOptions;\n-        this.log = logProvider.getLog( getClass() );\n-    }\n-\n-    void initialise( boolean createIfNotExists )\n-    {\n-        try\n-        {\n-            checkAndLoadStorage( createIfNotExists );\n-        }\n-        catch ( Exception e )\n-        {\n-            closeAndThrow( e );\n-        }\n-    }\n-\n-    private void closeAndThrow( Exception e )\n-    {\n-        if ( storeFile != null )\n-        {\n-            try\n-            {\n-                closeStoreFile();\n-            }\n-            catch ( IOException failureToClose )\n-            {\n-                // Not really a suppressed exception, but we still want to throw the real exception, e,\n-                // but perhaps also throw this in there or convenience.\n-                e.addSuppressed( failureToClose );\n-            }\n-        }\n-        throwIfUnchecked( e );\n-        throw new RuntimeException( e );\n-    }\n-\n-    /**\n-     * Returns the type and version that identifies this store.\n-     *\n-     * @return This store's implementation type and version identifier\n-     */\n-    public String getTypeDescriptor()\n-    {\n-        return typeDescriptor;\n-    }\n-\n-    /**\n-     * This method is called by constructors. Checks the header record and loads the store.\n-     * <p>\n-     * Note: This method will map the file with the page cache. The store file must not\n-     * be accessed directly until it has been unmapped - the store file must only be\n-     * accessed through the page cache.\n-     * @param createIfNotExists If true, creates and initialises the store file if it does not exist already. If false,\n-     * this method will instead throw an exception in that situation.\n-     */\n-    protected void checkAndLoadStorage( boolean createIfNotExists )\n-    {\n-        int pageSize = pageCache.pageSize();\n-        int filePageSize;\n-        try ( PagedFile pagedFile = pageCache.map( storageFileName, pageSize, ANY_PAGE_SIZE ) )\n-        {\n-            extractHeaderRecord( pagedFile );\n-            filePageSize = pageCache.pageSize() - pageCache.pageSize() % getRecordSize();\n-        }\n-        catch ( NoSuchFileException | StoreNotFoundException e )\n-        {\n-            if ( createIfNotExists )\n-            {\n-                try\n-                {\n-                    createStore( pageSize );\n-                    return;\n-                }\n-                catch ( IOException e1 )\n-                {\n-                    e.addSuppressed( e1 );\n-                }\n-            }\n-            if ( e instanceof StoreNotFoundException )\n-            {\n-                throw (StoreNotFoundException) e;\n-            }\n-            throw new StoreNotFoundException( \"Store file not found: \" + storageFileName, e );\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( \"Unable to open store file: \" + storageFileName, e );\n-        }\n-        loadStorage( filePageSize );\n-    }\n-\n-    private void createStore( int pageSize ) throws IOException\n-    {\n-        try ( PagedFile file = pageCache.map( storageFileName, pageSize, StandardOpenOption.CREATE ) )\n-        {\n-            initialiseNewStoreFile( file );\n-        }\n-        checkAndLoadStorage( false );\n-    }\n-\n-    private void loadStorage( int filePageSize )\n-    {\n-        try\n-        {\n-            storeFile = pageCache.map( getStorageFileName(), filePageSize, openOptions );\n-            loadIdGenerator();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( \"Unable to open store file: \" + storageFileName, e );\n-        }\n-    }\n-\n-    protected void initialiseNewStoreFile( PagedFile file ) throws IOException\n-    {\n-        if ( getNumberOfReservedLowIds() > 0 )\n-        {\n-            try ( PageCursor pageCursor = file.io( 0, PF_SHARED_WRITE_LOCK ) )\n-            {\n-                if ( pageCursor.next() )\n-                {\n-                    pageCursor.setOffset( 0 );\n-                    createHeaderRecord( pageCursor );\n-                    if ( pageCursor.checkAndClearBoundsFlag() )\n-                    {\n-                        throw new UnderlyingStorageException(\n-                                \"Out of page bounds when writing header; page size too small: \" + pageCache.pageSize() +\n-                                        \" bytes.\" );\n-                    }\n-                }\n-            }\n-        }\n-\n-        // Determine record size right after writing the header since some stores\n-        // use it when initializing their stores to write some records.\n-        recordSize = determineRecordSize();\n-\n-        idGeneratorFactory.create( getIdFileName(), getNumberOfReservedLowIds(), false );\n-    }\n-\n-    private void createHeaderRecord( PageCursor cursor )\n-    {\n-        int offset = cursor.getOffset();\n-        storeHeaderFormat.writeHeader( cursor );\n-        cursor.setOffset( offset );\n-        readHeaderAndInitializeRecordFormat( cursor );\n-    }\n-\n-    private void extractHeaderRecord( PagedFile pagedFile ) throws IOException\n-    {\n-        if ( getNumberOfReservedLowIds() > 0 )\n-        {\n-            try ( PageCursor pageCursor = pagedFile.io( 0, PF_SHARED_READ_LOCK ) )\n-            {\n-\n-                if ( pageCursor.next() )\n-                {\n-                    do\n-                    {\n-                        pageCursor.setOffset( 0 );\n-                        readHeaderAndInitializeRecordFormat( pageCursor );\n-                    }\n-                    while ( pageCursor.shouldRetry() );\n-                    if ( pageCursor.checkAndClearBoundsFlag() )\n-                    {\n-                        throw new UnderlyingStorageException(\n-                                \"Out of page bounds when reading header; page size too small: \" +\n-                                pageCache.pageSize() + \" bytes.\" );\n-                    }\n-                }\n-                else\n-                {\n-                    throw new StoreNotFoundException( \"Fail to read header record of store file: \" +\n-                                                      storageFileName );\n-                }\n-            }\n-        }\n-        else\n-        {\n-            readHeaderAndInitializeRecordFormat( null );\n-        }\n-        recordSize = determineRecordSize();\n-    }\n-\n-    protected long pageIdForRecord( long id )\n-    {\n-        return RecordPageLocationCalculator.pageIdForRecord( id, storeFile.pageSize(), recordSize );\n-    }\n-\n-    protected int offsetForId( long id )\n-    {\n-        return RecordPageLocationCalculator.offsetForId( id, storeFile.pageSize(), recordSize );\n-    }\n-\n-    @Override\n-    public int getRecordsPerPage()\n-    {\n-        return storeFile.pageSize() / recordSize;\n-    }\n-\n-    public byte[] getRawRecordData( long id ) throws IOException\n-    {\n-        byte[] data = new byte[recordSize];\n-        long pageId = pageIdForRecord( id );\n-        int offset = offsetForId( id );\n-        try ( PageCursor cursor = storeFile.io( pageId, PagedFile.PF_SHARED_READ_LOCK ) )\n-        {\n-            if ( cursor.next() )\n-            {\n-                do\n-                {\n-                    cursor.setOffset( offset );\n-                    cursor.getBytes( data );\n-                }\n-                while ( cursor.shouldRetry() );\n-                checkForDecodingErrors( cursor, id, CHECK );\n-            }\n-        }\n-        return data;\n-    }\n-\n-    /**\n-     * This method is called when opening the store to extract header data and determine things like\n-     * record size of the specific record format for this store. Some formats rely on information\n-     * in the store header, that's why it happens at this stage.\n-     *\n-     * @param cursor {@link PageCursor} initialized at the start of the store header where header information\n-     * can be read if need be. This can be {@code null} if this store has no store header. The initialization\n-     * of the record format still happens in here.\n-     * @throws IOException if there were problems reading header information.\n-     */\n-    private void readHeaderAndInitializeRecordFormat( PageCursor cursor )\n-    {\n-        storeHeader = storeHeaderFormat.readHeader( cursor );\n-    }\n-\n-    private void loadIdGenerator()\n-    {\n+  static final String UNKNOWN_VERSION = \"Unknown\";\n+\n+  protected final Config configuration;\n+  protected final PageCache pageCache;\n+  final File storageFileName;\n+  protected final IdType idType;\n+  protected final IdGeneratorFactory idGeneratorFactory;\n+  protected final Log log;\n+  protected PagedFile storeFile;\n+  protected final String storeVersion;\n+  protected final RecordFormat<RECORD> recordFormat;\n+  private IdGenerator idGenerator;\n+  private boolean storeOk = true;\n+  private RuntimeException causeOfStoreNotOk;\n+  private final String typeDescriptor;\n+  protected int recordSize;\n+\n+  private final StoreHeaderFormat<HEADER> storeHeaderFormat;\n+  private HEADER storeHeader;\n+\n+  private final OpenOption[] openOptions;\n+\n+  /**\n+   * Opens and validates the store contained in <CODE>fileName</CODE>\n+   * loading any configuration defined in <CODE>config</CODE>. After\n+   * validation the <CODE>initStorage</CODE> method is called.\n+   * <p>\n+   * If the store had a clean shutdown it will be marked as <CODE>ok</CODE>\n+   * and the {@link #getStoreOk()} method will return true.\n+   * If a problem was found when opening the store the {@link #makeStoreOk()}\n+   * must be invoked.\n+   * <p>\n+   * throws IOException if the unable to open the storage or if the\n+   * <CODE>initStorage</CODE> method fails\n+   *\n+   * @param idType The Id used to index into this store\n+   */\n+  public CommonAbstractStore(\n+      File fileName,\n+      Config configuration,\n+      IdType idType,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      String typeDescriptor,\n+      RecordFormat<RECORD> recordFormat,\n+      StoreHeaderFormat<HEADER> storeHeaderFormat,\n+      String storeVersion,\n+      OpenOption... openOptions)\n+  {\n+    this.storageFileName = fileName;\n+    this.configuration = configuration;\n+    this.idGeneratorFactory = idGeneratorFactory;\n+    this.pageCache = pageCache;\n+    this.idType = idType;\n+    this.typeDescriptor = typeDescriptor;\n+    this.recordFormat = recordFormat;\n+    this.storeHeaderFormat = storeHeaderFormat;\n+    this.storeVersion = storeVersion;\n+    this.openOptions = openOptions;\n+    this.log = logProvider.getLog(getClass());\n+  }\n+\n+  void initialise(boolean createIfNotExists)\n+  {\n+    try\n+    {\n+      checkAndLoadStorage(createIfNotExists);\n+    } catch (Exception e)\n+    {\n+      closeAndThrow(e);\n+    }\n+  }\n+\n+  private void closeAndThrow(Exception e)\n+  {\n+    if (storeFile != null)\n+    {\n+      try\n+      {\n+        closeStoreFile();\n+      } catch (IOException failureToClose)\n+      {\n+        // Not really a suppressed exception, but we still want to throw the real exception, e,\n+        // but perhaps also throw this in there or convenience.\n+        e.addSuppressed(failureToClose);\n+      }\n+    }\n+    throwIfUnchecked(e);\n+    throw new RuntimeException(e);\n+  }\n+\n+  /**\n+   * Returns the type and version that identifies this store.\n+   *\n+   * @return This store's implementation type and version identifier\n+   */\n+  public String getTypeDescriptor()\n+  {\n+    return typeDescriptor;\n+  }\n+\n+  /**\n+   * This method is called by constructors. Checks the header record and loads the store.\n+   * <p>\n+   * Note: This method will map the file with the page cache. The store file must not\n+   * be accessed directly until it has been unmapped - the store file must only be\n+   * accessed through the page cache.\n+   *\n+   * @param createIfNotExists If true, creates and initialises the store file if it does not exist already. If false,\n+   *                          this method will instead throw an exception in that situation.\n+   */\n+  protected void checkAndLoadStorage(boolean createIfNotExists)\n+  {\n+    int pageSize = pageCache.pageSize();\n+    int filePageSize;\n+    try (PagedFile pagedFile = pageCache.map(storageFileName, pageSize, ANY_PAGE_SIZE))\n+    {\n+      extractHeaderRecord(pagedFile);\n+      filePageSize = pageCache.pageSize() - pageCache.pageSize() % getRecordSize();\n+    } catch (NoSuchFileException | StoreNotFoundException e)\n+    {\n+      if (createIfNotExists)\n+      {\n         try\n         {\n-            if ( storeOk )\n-            {\n-                openIdGenerator();\n-            }\n-            // else we will rebuild the id generator after recovery, and we don't want to have the id generator\n-            // picking up calls to freeId during recovery.\n-        }\n-        catch ( InvalidIdGeneratorException e )\n-        {\n-            setStoreNotOk( e );\n-        }\n-        finally\n-        {\n-            if ( !getStoreOk() )\n-            {\n-                log.debug( getStorageFileName() + \" non clean shutdown detected\" );\n-            }\n-        }\n-    }\n-\n-    public boolean isInUse( long id )\n-    {\n-        long pageId = pageIdForRecord( id );\n-        int offset = offsetForId( id );\n-\n-        try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_READ_LOCK ) )\n-        {\n-            boolean recordIsInUse = false;\n-            if ( cursor.next() )\n-            {\n-                do\n-                {\n-                    cursor.setOffset( offset );\n-                    recordIsInUse = isInUse( cursor );\n-                }\n-                while ( cursor.shouldRetry() );\n-                checkForDecodingErrors( cursor, id, NORMAL );\n-            }\n-            return recordIsInUse;\n-        }\n-        catch ( IOException e )\n+          createStore(pageSize);\n+          return;\n+        } catch (IOException e1)\n         {\n-            throw new UnderlyingStorageException( e );\n+          e.addSuppressed(e1);\n         }\n-    }\n-\n-    /**\n-     * DANGER: make sure to always close this cursor.\n-     */\n-    public PageCursor openPageCursorForReading( long id )\n+      }\n+      if (e instanceof StoreNotFoundException)\n+      {\n+        throw (StoreNotFoundException) e;\n+      }\n+      throw new StoreNotFoundException(\"Store file not found: \" + storageFileName, e);\n+    } catch (IOException e)\n     {\n-        try\n-        {\n-            long pageId = pageIdForRecord( id );\n-            return storeFile.io( pageId, PF_SHARED_READ_LOCK );\n-        }\n-        catch ( IOException e )\n-        {\n-            // TODO: think about what we really should be doing with the exception handling here...\n-            throw new UnderlyingStorageException( e );\n-        }\n+      throw new UnderlyingStorageException(\"Unable to open store file: \" + storageFileName, e);\n     }\n+    loadStorage(filePageSize);\n+  }\n \n-    /**\n-     * Should rebuild the id generator from scratch.\n-     * <p>\n-     * Note: This method may be called both while the store has the store file mapped in the\n-     * page cache, and while the store file is not mapped. Implementers must therefore\n-     * map their own temporary PagedFile for the store file, and do their file IO through that,\n-     * if they need to access the data in the store file.\n-     */\n-    final void rebuildIdGenerator()\n+  private void createStore(int pageSize) throws IOException\n+  {\n+    try (PagedFile file = pageCache.map(storageFileName, pageSize, StandardOpenOption.CREATE))\n     {\n-        int blockSize = getRecordSize();\n-        if ( blockSize <= 0 )\n-        {\n-            throw new InvalidRecordException( \"Illegal blockSize: \" + blockSize );\n-        }\n-\n-        log.info( \"Rebuilding id generator for[\" + getStorageFileName() + \"] ...\" );\n-        closeIdGenerator();\n-        createIdGenerator( getIdFileName() );\n-        openIdGenerator();\n-\n-        long defraggedCount = 0;\n-        boolean fastRebuild = isOnlyFastIdGeneratorRebuildEnabled( configuration );\n-\n-        try\n-        {\n-            long foundHighId = scanForHighId();\n-            setHighId( foundHighId );\n-            if ( !fastRebuild )\n-            {\n-                try ( PageCursor cursor = storeFile.io( 0, PF_SHARED_WRITE_LOCK | PF_READ_AHEAD ) )\n-                {\n-                    defraggedCount = rebuildIdGeneratorSlow( cursor, getRecordsPerPage(), blockSize, foundHighId );\n-                }\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( \"Unable to rebuild id generator \" + getStorageFileName(), e );\n-        }\n-\n-        log.info( \"[\" + getStorageFileName() + \"] high id=\" + getHighId() + \" (defragged=\" + defraggedCount + \")\" );\n-        log.info( getStorageFileName() + \" rebuild id generator, highId=\" + getHighId() +\n-                  \" defragged count=\" + defraggedCount );\n-\n-        if ( !fastRebuild )\n-        {\n-            closeIdGenerator();\n-            openIdGenerator();\n-        }\n+      initialiseNewStoreFile(file);\n     }\n+    checkAndLoadStorage(false);\n+  }\n \n-    protected boolean isOnlyFastIdGeneratorRebuildEnabled( Config config )\n+  private void loadStorage(int filePageSize)\n+  {\n+    try\n     {\n-        return config.get( Configuration.rebuild_idgenerators_fast );\n-    }\n-\n-    private long rebuildIdGeneratorSlow( PageCursor cursor, int recordsPerPage, int blockSize,\n-                                         long foundHighId ) throws IOException\n+      storeFile = pageCache.map(getStorageFileName(), filePageSize, openOptions);\n+      loadIdGenerator();\n+    } catch (IOException e)\n     {\n-        if ( !cursor.isWriteLocked() )\n-        {\n-            throw new IllegalArgumentException(\n-                    \"The store scanning id generator rebuild process requires a page cursor that is write-locked\" );\n-        }\n-        long defragCount = 0;\n-        long[] freedBatch = new long[recordsPerPage]; // we process in batches of one page worth of records\n-        int startingId = getNumberOfReservedLowIds();\n-        int defragged;\n-\n-        boolean done = false;\n-        while ( !done && cursor.next() )\n-        {\n-            long idPageOffset = cursor.getCurrentPageId() * recordsPerPage;\n-\n-            defragged = 0;\n-            for ( int i = startingId; i < recordsPerPage; i++ )\n-            {\n-                int offset = i * blockSize;\n-                cursor.setOffset( offset );\n-                long recordId = idPageOffset + i;\n-                if ( recordId >= foundHighId )\n-                {   // We don't have to go further than the high id we found earlier\n-                    done = true;\n-                    break;\n-                }\n-\n-                if ( !isInUse( cursor ) )\n-                {\n-                    freedBatch[defragged++] = recordId;\n-                }\n-                else if ( isRecordReserved( cursor ) )\n-                {\n-                    cursor.setOffset( offset );\n-                    cursor.putByte( Record.NOT_IN_USE.byteValue() );\n-                    cursor.putInt( 0 );\n-                    freedBatch[defragged++] = recordId;\n-                }\n-            }\n-            checkIdScanCursorBounds( cursor );\n-\n-            for ( int i = 0; i < defragged; i++ )\n-            {\n-                freeId( freedBatch[i] );\n-            }\n-            defragCount += defragged;\n-            startingId = 0;\n-        }\n-        return defragCount;\n+      throw new UnderlyingStorageException(\"Unable to open store file: \" + storageFileName, e);\n     }\n+  }\n \n-    private void checkIdScanCursorBounds( PageCursor cursor )\n+  protected void initialiseNewStoreFile(PagedFile file) throws IOException\n+  {\n+    if (getNumberOfReservedLowIds() > 0)\n     {\n-        if ( cursor.checkAndClearBoundsFlag() )\n+      try (PageCursor pageCursor = file.io(0, PF_SHARED_WRITE_LOCK))\n+      {\n+        if (pageCursor.next())\n         {\n+          pageCursor.setOffset(0);\n+          createHeaderRecord(pageCursor);\n+          if (pageCursor.checkAndClearBoundsFlag())\n+          {\n             throw new UnderlyingStorageException(\n-                    \"Out of bounds access on page \" + cursor.getCurrentPageId() + \" detected while scanning the \" +\n-                    storageFileName + \" file for deleted records\" );\n-        }\n-    }\n-\n-    /**\n-     * Marks this store as \"not ok\".\n-     */\n-    void setStoreNotOk( RuntimeException cause )\n-    {\n-        storeOk = false;\n-        causeOfStoreNotOk = cause;\n-        idGenerator = null; // since we will rebuild it later\n-    }\n-\n-    /**\n-     * If store is \"not ok\" <CODE>false</CODE> is returned.\n-     *\n-     * @return True if this store is ok\n-     */\n-    boolean getStoreOk()\n-    {\n-        return storeOk;\n-    }\n-\n-    /**\n-     * Throws cause of not being OK if {@link #getStoreOk()} returns {@code false}.\n-     */\n-    void checkStoreOk()\n-    {\n-        if ( !storeOk )\n-        {\n-            throw causeOfStoreNotOk;\n-        }\n-    }\n-\n-    /**\n-     * Returns the next id for this store's {@link IdGenerator}.\n-     *\n-     * @return The next free id\n-     */\n-    @Override\n-    public long nextId()\n-    {\n-        assertIdGeneratorInitialized();\n-        return idGenerator.nextId();\n-    }\n-\n-    private void assertIdGeneratorInitialized()\n-    {\n-        if ( idGenerator == null )\n-        {\n-            throw new IllegalStateException( \"IdGenerator is not initialized\" );\n-        }\n-    }\n-\n-    @Override\n-    public IdRange nextIdBatch( int size )\n-    {\n-        assertIdGeneratorInitialized();\n-        return idGenerator.nextIdBatch( size );\n-    }\n-\n-    /**\n-     * Frees an id for this store's {@link IdGenerator}.\n-     *\n-     * @param id The id to free\n-     */\n-    @Override\n-    public void freeId( long id )\n-    {\n-        IdGenerator generator = this.idGenerator;\n-        if ( generator != null )\n-        {\n-            generator.freeId( id );\n+                \"Out of page bounds when writing header; page size too small: \" + pageCache.pageSize() +\n+                    \" bytes.\");\n+          }\n         }\n-        // else we're deleting records as part of applying transactions during recovery, and that's fine\n+      }\n     }\n \n-    /**\n-     * Return the highest id in use. If this store is not OK yet, the high id is calculated from the highest\n-     * in use record on the store, using {@link #scanForHighId()}.\n-     *\n-     * @return The high id, i.e. highest id in use + 1.\n-     */\n-    @Override\n-    public long getHighId()\n-    {\n-        return idGenerator != null ? idGenerator.getHighId() : scanForHighId();\n-    }\n-\n-    /**\n-     * Sets the high id, i.e. highest id in use + 1 (use this when rebuilding id generator).\n-     *\n-     * @param highId The high id to set.\n-     */\n-    public void setHighId( long highId )\n-    {\n-        // This method might get called during recovery, where we don't have a reliable id generator yet,\n-        // so ignore these calls and let rebuildIdGenerators() figure out the high id after recovery.\n-        IdGenerator generator = this.idGenerator;\n-        if ( generator != null )\n-        {\n-            //noinspection SynchronizationOnLocalVariableOrMethodParameter\n-            synchronized ( generator )\n-            {\n-                if ( highId > generator.getHighId() )\n-                {\n-                    generator.setHighId( highId );\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * If store is not ok a call to this method will rebuild the {@link\n-     * IdGenerator} used by this store and if successful mark it as OK.\n-     *\n-     * WARNING: this method must NOT be called if recovery is required, but hasn't performed.\n-     * To remove all negations from the above statement: Only call this method if store is in need of\n-     * recovery and recovery has been performed.\n-     */\n-    void makeStoreOk()\n-    {\n-        if ( !storeOk )\n-        {\n-            rebuildIdGenerator();\n-            storeOk = true;\n-            causeOfStoreNotOk = null;\n-        }\n-    }\n-\n-    /**\n-     * Returns the name of this store.\n-     *\n-     * @return The name of this store\n-     */\n-    @Override\n-    public File getStorageFileName()\n-    {\n-        return storageFileName;\n-    }\n+    // Determine record size right after writing the header since some stores\n+    // use it when initializing their stores to write some records.\n+    recordSize = determineRecordSize();\n \n-    private File getIdFileName()\n-    {\n-        return new File( getStorageFileName().getPath() + \".id\" );\n-    }\n+    idGeneratorFactory.create(getIdFileName(), getNumberOfReservedLowIds(), false);\n+  }\n \n-    /**\n-     * Opens the {@link IdGenerator} used by this store.\n-     * <p>\n-     * Note: This method may be called both while the store has the store file mapped in the\n-     * page cache, and while the store file is not mapped. Implementers must therefore\n-     * map their own temporary PagedFile for the store file, and do their file IO through that,\n-     * if they need to access the data in the store file.\n-     */\n-    void openIdGenerator()\n-    {\n-        idGenerator = idGeneratorFactory.open( getIdFileName(), getIdType(), this::scanForHighId, recordFormat.getMaxId() );\n-    }\n+  private void createHeaderRecord(PageCursor cursor)\n+  {\n+    int offset = cursor.getOffset();\n+    storeHeaderFormat.writeHeader(cursor);\n+    cursor.setOffset(offset);\n+    readHeaderAndInitializeRecordFormat(cursor);\n+  }\n \n-    /**\n-     * Starts from the end of the file and scans backwards to find the highest in use record.\n-     * Can be used even if {@link #makeStoreOk()} hasn't been called. Basically this method should be used\n-     * over {@link #getHighestPossibleIdInUse()} and {@link #getHighId()} in cases where a store has been opened\n-     * but is in a scenario where recovery isn't possible, like some tooling or migration.\n-     *\n-     * @return the id of the highest in use record + 1, i.e. highId.\n-     */\n-    protected long scanForHighId()\n+  private void extractHeaderRecord(PagedFile pagedFile) throws IOException\n+  {\n+    if (getNumberOfReservedLowIds() > 0)\n     {\n-        try ( PageCursor cursor = storeFile.io( 0, PF_SHARED_READ_LOCK ) )\n-        {\n-            int recordsPerPage = getRecordsPerPage();\n-            int recordSize = getRecordSize();\n-            long highestId = getNumberOfReservedLowIds();\n-            boolean found;\n-            /*\n-             * We do this in chunks of pages instead of one page at a time, the performance impact is significant.\n-             * We first pre-fetch a large chunk sequentially, which is then scanned backwards for used records.\n-             */\n-            final long chunkSizeInPages = 256; // 2MiB (8192 bytes/page * 256 pages/chunk)\n-\n-            long chunkEndId = storeFile.getLastPageId();\n-            while ( chunkEndId >= 0 )\n-            {\n-                // Do pre-fetch of the chunk\n-                long chunkStartId = max( chunkEndId - chunkSizeInPages, 0 );\n-                preFetchChunk( cursor, chunkStartId, chunkEndId );\n-\n-                // Scan pages backwards in the chunk\n-                for ( long currentId = chunkEndId; currentId >= chunkStartId && cursor.next( currentId ); currentId-- )\n-                {\n-                    do\n-                    {\n-                        found = false;\n-                        // Scan record backwards in the page\n-                        for ( int offset = recordsPerPage * recordSize - recordSize; offset >= 0; offset -= recordSize )\n-                        {\n-                            cursor.setOffset( offset );\n-                            if ( isInUse( cursor ) )\n-                            {\n-                                // We've found the highest id in use\n-                                highestId = (cursor.getCurrentPageId() * recordsPerPage) + offset / recordSize + 1;\n-                                found = true;\n-                                break;\n-                            }\n-                        }\n-                    }\n-                    while ( cursor.shouldRetry() );\n-\n-                    checkIdScanCursorBounds( cursor );\n-                    if ( found )\n-                    {\n-                        return highestId;\n-                    }\n-                }\n-                chunkEndId = chunkStartId - 1;\n-            }\n+      try (PageCursor pageCursor = pagedFile.io(0, PF_SHARED_READ_LOCK))\n+      {\n \n-            return getNumberOfReservedLowIds();\n-        }\n-        catch ( IOException e )\n+        if (pageCursor.next())\n         {\n-            throw new UnderlyingStorageException( \"Unable to find high id by scanning backwards \" + getStorageFileName(), e );\n-        }\n-    }\n-\n-    /**\n-     * Do a pre-fetch of pages in sequential order on the range [{@code pageIdStart},{@code pageIdEnd}].\n-     *\n-     * @param cursor Cursor to pre-fetch on.\n-     * @param pageIdStart Page id to start pre-fetching from.\n-     * @param pageIdEnd Page id to end pre-fetching on, inclusive {@code pageIdEnd}.\n-     */\n-    private static void preFetchChunk( PageCursor cursor, long pageIdStart, long pageIdEnd ) throws IOException\n-    {\n-        for ( long currentPageId = pageIdStart; currentPageId <= pageIdEnd; currentPageId++ )\n+          do\n+          {\n+            pageCursor.setOffset(0);\n+            readHeaderAndInitializeRecordFormat(pageCursor);\n+          }\n+          while (pageCursor.shouldRetry());\n+          if (pageCursor.checkAndClearBoundsFlag())\n+          {\n+            throw new UnderlyingStorageException(\n+                \"Out of page bounds when reading header; page size too small: \" +\n+                    pageCache.pageSize() + \" bytes.\");\n+          }\n+        } else\n         {\n-            cursor.next( currentPageId );\n+          throw new StoreNotFoundException(\"Fail to read header record of store file: \" +\n+              storageFileName);\n         }\n-    }\n-\n-    protected int determineRecordSize()\n-    {\n-        return recordFormat.getRecordSize( storeHeader );\n-    }\n-\n-    @Override\n-    public final int getRecordSize()\n-    {\n-        return recordSize;\n-    }\n-\n-    @Override\n-    public int getRecordDataSize()\n-    {\n-        return recordSize - recordFormat.getRecordHeaderSize();\n-    }\n-\n-    private boolean isInUse( PageCursor cursor )\n-    {\n-        return recordFormat.isInUse( cursor );\n-    }\n-\n-    protected boolean isRecordReserved( PageCursor cursor )\n-    {\n-        return false;\n-    }\n-\n-    private void createIdGenerator( File fileName )\n-    {\n-        idGeneratorFactory.create( fileName, 0, false );\n-    }\n-\n-    /** Closed the {@link IdGenerator} used by this store */\n-    void closeIdGenerator()\n-    {\n-        if ( idGenerator != null )\n+      }\n+    } else\n+    {\n+      readHeaderAndInitializeRecordFormat(null);\n+    }\n+    recordSize = determineRecordSize();\n+  }\n+\n+  protected long pageIdForRecord(long id)\n+  {\n+    return RecordPageLocationCalculator.pageIdForRecord(id, storeFile.pageSize(), recordSize);\n+  }\n+\n+  protected int offsetForId(long id)\n+  {\n+    return RecordPageLocationCalculator.offsetForId(id, storeFile.pageSize(), recordSize);\n+  }\n+\n+  @Override\n+  public int getRecordsPerPage()\n+  {\n+    return storeFile.pageSize() / recordSize;\n+  }\n+\n+  public byte[] getRawRecordData(long id) throws IOException\n+  {\n+    byte[] data = new byte[recordSize];\n+    long pageId = pageIdForRecord(id);\n+    int offset = offsetForId(id);\n+    try (PageCursor cursor = storeFile.io(pageId, PagedFile.PF_SHARED_READ_LOCK))\n+    {\n+      if (cursor.next())\n+      {\n+        do\n         {\n-            idGenerator.close();\n+          cursor.setOffset(offset);\n+          cursor.getBytes(data);\n         }\n-    }\n-\n-    @Override\n-    public void flush()\n+        while (cursor.shouldRetry());\n+        checkForDecodingErrors(cursor, id, CHECK);\n+      }\n+    }\n+    return data;\n+  }\n+\n+  /**\n+   * This method is called when opening the store to extract header data and determine things like\n+   * record size of the specific record format for this store. Some formats rely on information\n+   * in the store header, that's why it happens at this stage.\n+   *\n+   * @param cursor {@link PageCursor} initialized at the start of the store header where header information\n+   *               can be read if need be. This can be {@code null} if this store has no store header. The initialization\n+   *               of the record format still happens in here.\n+   * @throws IOException if there were problems reading header information.\n+   */\n+  private void readHeaderAndInitializeRecordFormat(PageCursor cursor)\n+  {\n+    storeHeader = storeHeaderFormat.readHeader(cursor);\n+  }\n+\n+  private void loadIdGenerator()\n+  {\n+    try\n+    {\n+      if (storeOk)\n+      {\n+        openIdGenerator();\n+      }\n+      // else we will rebuild the id generator after recovery, and we don't want to have the id generator\n+      // picking up calls to freeId during recovery.\n+    } catch (InvalidIdGeneratorException e)\n     {\n-        try\n-        {\n-            storeFile.flushAndForce();\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( \"Failed to flush\", e );\n-        }\n-    }\n-\n-    /**\n-     * Checks if this store is closed and throws exception if it is.\n-     *\n-     * @throws IllegalStateException if the store is closed\n-     */\n-    void assertNotClosed()\n+      setStoreNotOk(e);\n+    } finally\n     {\n-        if ( storeFile == null )\n-        {\n-            throw new IllegalStateException( this + \" for file '\" + storageFileName + \"' is closed\" );\n-        }\n+      if (!getStoreOk())\n+      {\n+        log.debug(getStorageFileName() + \" non clean shutdown detected\");\n+      }\n     }\n+  }\n \n-    /**\n-     * Closes this store. This will cause all buffers and channels to be closed.\n-     * Requesting an operation from after this method has been invoked is\n-     * illegal and an exception will be thrown.\n-     * <p>\n-     * This method will start by invoking the {@link #closeStoreFile()} method\n-     * giving the implementing store way to do anything that it needs to do\n-     * before the pagedFile is closed.\n-     */\n-    @Override\n-    public void close()\n-    {\n-        try\n-        {\n-            closeStoreFile();\n-        }\n-        catch ( IOException | IllegalStateException e )\n-        {\n-            throw new UnderlyingStorageException( \"Failed to close store file: \" + getStorageFileName(), e );\n-        }\n-    }\n+  public boolean isInUse(long id)\n+  {\n+    long pageId = pageIdForRecord(id);\n+    int offset = offsetForId(id);\n \n-    private void closeStoreFile() throws IOException\n+    try (PageCursor cursor = storeFile.io(pageId, PF_SHARED_READ_LOCK))\n     {\n-        try\n+      boolean recordIsInUse = false;\n+      if (cursor.next())\n+      {\n+        do\n         {\n-            /*\n-             * Note: the closing ordering here is important!\n-             * It is the case since we wand to mark the id generator as closed cleanly ONLY IF\n-             * also the store file is cleanly shutdown.\n-             */\n-            if ( storeFile != null )\n-            {\n-                storeFile.close();\n-            }\n-            if ( idGenerator != null )\n-            {\n-                if ( contains( openOptions, DELETE_ON_CLOSE ) )\n-                {\n-                    idGenerator.delete();\n-                }\n-                else\n-                {\n-                    idGenerator.close();\n-                }\n-            }\n+          cursor.setOffset(offset);\n+          recordIsInUse = isInUse(cursor);\n         }\n-        finally\n+        while (cursor.shouldRetry());\n+        checkForDecodingErrors(cursor, id, NORMAL);\n+      }\n+      return recordIsInUse;\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(e);\n+    }\n+  }\n+\n+  /**\n+   * DANGER: make sure to always close this cursor.\n+   */\n+  public PageCursor openPageCursorForReading(long id)\n+  {\n+    try\n+    {\n+      long pageId = pageIdForRecord(id);\n+      return storeFile.io(pageId, PF_SHARED_READ_LOCK);\n+    } catch (IOException e)\n+    {\n+      // TODO: think about what we really should be doing with the exception handling here...\n+      throw new UnderlyingStorageException(e);\n+    }\n+  }\n+\n+  /**\n+   * Should rebuild the id generator from scratch.\n+   * <p>\n+   * Note: This method may be called both while the store has the store file mapped in the\n+   * page cache, and while the store file is not mapped. Implementers must therefore\n+   * map their own temporary PagedFile for the store file, and do their file IO through that,\n+   * if they need to access the data in the store file.\n+   */\n+  final void rebuildIdGenerator()\n+  {\n+    int blockSize = getRecordSize();\n+    if (blockSize <= 0)\n+    {\n+      throw new InvalidRecordException(\"Illegal blockSize: \" + blockSize);\n+    }\n+\n+    log.info(\"Rebuilding id generator for[\" + getStorageFileName() + \"] ...\");\n+    closeIdGenerator();\n+    createIdGenerator(getIdFileName());\n+    openIdGenerator();\n+\n+    long defraggedCount = 0;\n+    boolean fastRebuild = isOnlyFastIdGeneratorRebuildEnabled(configuration);\n+\n+    try\n+    {\n+      long foundHighId = scanForHighId();\n+      setHighId(foundHighId);\n+      if (!fastRebuild)\n+      {\n+        try (PageCursor cursor = storeFile.io(0, PF_SHARED_WRITE_LOCK | PF_READ_AHEAD))\n         {\n-            storeFile = null;\n+          defraggedCount = rebuildIdGeneratorSlow(cursor, getRecordsPerPage(), blockSize, foundHighId);\n         }\n-    }\n-\n-    /** @return The highest possible id in use, -1 if no id in use. */\n-    @Override\n-    public long getHighestPossibleIdInUse()\n-    {\n-        return idGenerator != null ? idGenerator.getHighestPossibleIdInUse() : scanForHighId() - 1;\n-    }\n-\n-    /**\n-     * Sets the highest id in use. After this call highId will be this given id + 1.\n-     *\n-     * @param highId The highest id in use to set.\n-     */\n-    @Override\n-    public void setHighestPossibleIdInUse( long highId )\n+      }\n+    } catch (IOException e)\n     {\n-        setHighId( highId + 1 );\n+      throw new UnderlyingStorageException(\"Unable to rebuild id generator \" + getStorageFileName(), e);\n     }\n \n-    /** @return The total number of ids in use. */\n-    public long getNumberOfIdsInUse()\n-    {\n-        assertIdGeneratorInitialized();\n-        return idGenerator.getNumberOfIdsInUse();\n-    }\n+    log.info(\"[\" + getStorageFileName() + \"] high id=\" + getHighId() + \" (defragged=\" + defraggedCount + \")\");\n+    log.info(getStorageFileName() + \" rebuild id generator, highId=\" + getHighId() +\n+        \" defragged count=\" + defraggedCount);\n \n-    /**\n-     * @return the number of records at the beginning of the store file that are reserved for other things\n-     * than actual records. Stuff like permanent configuration data.\n-     */\n-    @Override\n-    public int getNumberOfReservedLowIds()\n+    if (!fastRebuild)\n     {\n-        return storeHeaderFormat.numberOfReservedRecords();\n+      closeIdGenerator();\n+      openIdGenerator();\n     }\n+  }\n \n-    public IdType getIdType()\n-    {\n-        return idType;\n-    }\n+  protected boolean isOnlyFastIdGeneratorRebuildEnabled(Config config)\n+  {\n+    return config.get(Configuration.rebuild_idgenerators_fast);\n+  }\n \n-    void logVersions( Logger logger )\n+  private long rebuildIdGeneratorSlow(PageCursor cursor, int recordsPerPage, int blockSize,\n+                                      long foundHighId) throws IOException\n+  {\n+    if (!cursor.isWriteLocked())\n     {\n-        logger.log( \"  \" + getTypeDescriptor() + \" \" + storeVersion );\n+      throw new IllegalArgumentException(\n+          \"The store scanning id generator rebuild process requires a page cursor that is write-locked\");\n     }\n+    long defragCount = 0;\n+    long[] freedBatch = new long[recordsPerPage]; // we process in batches of one page worth of records\n+    int startingId = getNumberOfReservedLowIds();\n+    int defragged;\n \n-    void logIdUsage( Logger logger )\n+    boolean done = false;\n+    while (!done && cursor.next())\n     {\n-        logger.log( String.format( \"  %s: used=%s high=%s\",\n-                getTypeDescriptor(), getNumberOfIdsInUse(), getHighestPossibleIdInUse() ) );\n-    }\n+      long idPageOffset = cursor.getCurrentPageId() * recordsPerPage;\n \n-    /**\n-     * Visits this store, and any other store managed by this store.\n-     * TODO this could, and probably should, replace all override-and-do-the-same-thing-to-all-my-managed-stores\n-     * methods like:\n-     * {@link #makeStoreOk()},\n-     * {@link #close()} (where that method could be deleted all together and do a visit in {@link #close()}),\n-     * {@link #logIdUsage(Logger)},\n-     * {@link #logVersions(Logger)}\n-     * For a good samaritan to pick up later.\n-     */\n-    void visitStore( Visitor<CommonAbstractStore<RECORD,HEADER>,RuntimeException> visitor )\n-    {\n-        visitor.visit( this );\n-    }\n-\n-    /**\n-     * Called from the part of the code that starts the {@link MetaDataStore} and friends, together with any\n-     * existing transaction log, seeing that there are transactions to recover. Now, this shouldn't be\n-     * needed because the state of the id generator _should_ reflect this fact, but turns out that,\n-     * given HA and the nature of the .id files being like orphans to the rest of the store, we just\n-     * can't trust that to be true. If we happen to have id generators open during recovery we delegate\n-     * {@link #freeId(long)} calls to {@link IdGenerator#freeId(long)} and since the id generator is most likely\n-     * out of date w/ regards to high id, it may very well blow up.\n-     *\n-     * This also marks the store as not OK. A call to {@link #makeStoreOk()} is needed once recovery is complete.\n-     */\n-    final void deleteIdGenerator()\n-    {\n-        if ( idGenerator != null )\n-        {\n-            idGenerator.delete();\n-            idGenerator = null;\n-            setStoreNotOk( new IllegalStateException( \"IdGenerator is not initialized\" ) );\n-        }\n-    }\n-\n-    @Override\n-    public long getNextRecordReference( RECORD record )\n-    {\n-        return recordFormat.getNextRecordReference( record );\n-    }\n-\n-    @Override\n-    public RECORD newRecord()\n-    {\n-        return recordFormat.newRecord();\n-    }\n-\n-    /**\n-     * Acquires a {@link PageCursor} from the {@link PagedFile store file} and reads the requested record\n-     * in the correct page and offset.\n-     *\n-     * @param id the record id.\n-     * @param record the record instance to load the data into.\n-     * @param mode how strict to be when loading, f.ex {@link RecordLoad#FORCE} will always read what's there\n-     * and load into the record, whereas {@link RecordLoad#NORMAL} will throw {@link InvalidRecordException}\n-     * if not in use.\n-     */\n-    @Override\n-    public RECORD getRecord( long id, RECORD record, RecordLoad mode )\n-    {\n-        try ( PageCursor cursor = storeFile.io( getNumberOfReservedLowIds(), PF_SHARED_READ_LOCK ) )\n-        {\n-            readIntoRecord( id, record, mode, cursor );\n-            return record;\n-        }\n-        catch ( IOException e )\n-        {\n-            throw new UnderlyingStorageException( e );\n+      defragged = 0;\n+      for (int i = startingId; i < recordsPerPage; i++)\n+      {\n+        int offset = i * blockSize;\n+        cursor.setOffset(offset);\n+        long recordId = idPageOffset + i;\n+        if (recordId >= foundHighId)\n+        {   // We don't have to go further than the high id we found earlier\n+          done = true;\n+          break;\n         }\n-    }\n \n-    @Override\n-    public void getRecordByCursor( long id, RECORD record, RecordLoad mode, PageCursor cursor ) throws UnderlyingStorageException\n-    {\n-        try\n+        if (!isInUse(cursor))\n         {\n-            readIntoRecord( id, record, mode, cursor );\n-        }\n-        catch ( IOException e )\n+          freedBatch[defragged++] = recordId;\n+        } else if (isRecordReserved(cursor))\n         {\n-            throw new UnderlyingStorageException( e );\n+          cursor.setOffset(offset);\n+          cursor.putByte(Record.NOT_IN_USE.byteValue());\n+          cursor.putInt(0);\n+          freedBatch[defragged++] = recordId;\n         }\n-\n-    }\n-\n-    void readIntoRecord( long id, RECORD record, RecordLoad mode, PageCursor cursor ) throws IOException\n-    {\n-        // Mark the record with this id regardless of whether or not we load the contents of it.\n-        // This is done in this method since there are multiple call sites and they all want the id\n-        // on that record, so it's to ensure it isn't forgotten.\n-        record.setId( id );\n-        long pageId = pageIdForRecord( id );\n-        int offset = offsetForId( id );\n-        if ( cursor.next( pageId ) )\n+      }\n+      checkIdScanCursorBounds(cursor);\n+\n+      for (int i = 0; i < defragged; i++)\n+      {\n+        freeId(freedBatch[i]);\n+      }\n+      defragCount += defragged;\n+      startingId = 0;\n+    }\n+    return defragCount;\n+  }\n+\n+  private void checkIdScanCursorBounds(PageCursor cursor)\n+  {\n+    if (cursor.checkAndClearBoundsFlag())\n+    {\n+      throw new UnderlyingStorageException(\n+          \"Out of bounds access on page \" + cursor.getCurrentPageId() + \" detected while scanning the \" +\n+              storageFileName + \" file for deleted records\");\n+    }\n+  }\n+\n+  /**\n+   * Marks this store as \"not ok\".\n+   */\n+  void setStoreNotOk(RuntimeException cause)\n+  {\n+    storeOk = false;\n+    causeOfStoreNotOk = cause;\n+    idGenerator = null; // since we will rebuild it later\n+  }\n+\n+  /**\n+   * If store is \"not ok\" <CODE>false</CODE> is returned.\n+   *\n+   * @return True if this store is ok\n+   */\n+  boolean getStoreOk()\n+  {\n+    return storeOk;\n+  }\n+\n+  /**\n+   * Throws cause of not being OK if {@link #getStoreOk()} returns {@code false}.\n+   */\n+  void checkStoreOk()\n+  {\n+    if (!storeOk)\n+    {\n+      throw causeOfStoreNotOk;\n+    }\n+  }\n+\n+  /**\n+   * Returns the next id for this store's {@link IdGenerator}.\n+   *\n+   * @return The next free id\n+   */\n+  @Override\n+  public long nextId()\n+  {\n+    assertIdGeneratorInitialized();\n+    return idGenerator.nextId();\n+  }\n+\n+  private void assertIdGeneratorInitialized()\n+  {\n+    if (idGenerator == null)\n+    {\n+      throw new IllegalStateException(\"IdGenerator is not initialized\");\n+    }\n+  }\n+\n+  @Override\n+  public IdRange nextIdBatch(int size)\n+  {\n+    assertIdGeneratorInitialized();\n+    return idGenerator.nextIdBatch(size);\n+  }\n+\n+  /**\n+   * Frees an id for this store's {@link IdGenerator}.\n+   *\n+   * @param id The id to free\n+   */\n+  @Override\n+  public void freeId(long id)\n+  {\n+    IdGenerator generator = this.idGenerator;\n+    if (generator != null)\n+    {\n+      generator.freeId(id);\n+    }\n+    // else we're deleting records as part of applying transactions during recovery, and that's fine\n+  }\n+\n+  /**\n+   * Return the highest id in use. If this store is not OK yet, the high id is calculated from the highest\n+   * in use record on the store, using {@link #scanForHighId()}.\n+   *\n+   * @return The high id, i.e. highest id in use + 1.\n+   */\n+  @Override\n+  public long getHighId()\n+  {\n+    return idGenerator != null ? idGenerator.getHighId() : scanForHighId();\n+  }\n+\n+  /**\n+   * Sets the high id, i.e. highest id in use + 1 (use this when rebuilding id generator).\n+   *\n+   * @param highId The high id to set.\n+   */\n+  public void setHighId(long highId)\n+  {\n+    // This method might get called during recovery, where we don't have a reliable id generator yet,\n+    // so ignore these calls and let rebuildIdGenerators() figure out the high id after recovery.\n+    IdGenerator generator = this.idGenerator;\n+    if (generator != null)\n+    {\n+      //noinspection SynchronizationOnLocalVariableOrMethodParameter\n+      synchronized (generator)\n+      {\n+        if (highId > generator.getHighId())\n         {\n-            // There is a page in the store that covers this record, go read it\n-            do\n-            {\n-                prepareForReading( cursor, offset, record );\n-                recordFormat.read( record, cursor, mode, recordSize );\n-            }\n-            while ( cursor.shouldRetry() );\n-            checkForDecodingErrors( cursor, id, mode );\n-            verifyAfterReading( record, mode );\n+          generator.setHighId(highId);\n         }\n-        else\n-        {\n-            verifyAfterNotRead( record, mode );\n-        }\n-    }\n-\n-    @Override\n-    public void updateRecord( RECORD record )\n-    {\n-        long id = record.getId();\n-        IdValidator.assertValidId( getIdType(), id, recordFormat.getMaxId() );\n-\n-        long pageId = pageIdForRecord( id );\n-        int offset = offsetForId( id );\n-        try ( PageCursor cursor = storeFile.io( pageId, PF_SHARED_WRITE_LOCK ) )\n+      }\n+    }\n+  }\n+\n+  /**\n+   * If store is not ok a call to this method will rebuild the {@link\n+   * IdGenerator} used by this store and if successful mark it as OK.\n+   * <p>\n+   * WARNING: this method must NOT be called if recovery is required, but hasn't performed.\n+   * To remove all negations from the above statement: Only call this method if store is in need of\n+   * recovery and recovery has been performed.\n+   */\n+  void makeStoreOk()\n+  {\n+    if (!storeOk)\n+    {\n+      rebuildIdGenerator();\n+      storeOk = true;\n+      causeOfStoreNotOk = null;\n+    }\n+  }\n+\n+  /**\n+   * Returns the name of this store.\n+   *\n+   * @return The name of this store\n+   */\n+  @Override\n+  public File getStorageFileName()\n+  {\n+    return storageFileName;\n+  }\n+\n+  private File getIdFileName()\n+  {\n+    return new File(getStorageFileName().getPath() + \".id\");\n+  }\n+\n+  /**\n+   * Opens the {@link IdGenerator} used by this store.\n+   * <p>\n+   * Note: This method may be called both while the store has the store file mapped in the\n+   * page cache, and while the store file is not mapped. Implementers must therefore\n+   * map their own temporary PagedFile for the store file, and do their file IO through that,\n+   * if they need to access the data in the store file.\n+   */\n+  void openIdGenerator()\n+  {\n+    idGenerator = idGeneratorFactory.open(getIdFileName(), getIdType(), this::scanForHighId, recordFormat.getMaxId());\n+  }\n+\n+  /**\n+   * Starts from the end of the file and scans backwards to find the highest in use record.\n+   * Can be used even if {@link #makeStoreOk()} hasn't been called. Basically this method should be used\n+   * over {@link #getHighestPossibleIdInUse()} and {@link #getHighId()} in cases where a store has been opened\n+   * but is in a scenario where recovery isn't possible, like some tooling or migration.\n+   *\n+   * @return the id of the highest in use record + 1, i.e. highId.\n+   */\n+  protected long scanForHighId()\n+  {\n+    try (PageCursor cursor = storeFile.io(0, PF_SHARED_READ_LOCK))\n+    {\n+      int recordsPerPage = getRecordsPerPage();\n+      int recordSize = getRecordSize();\n+      long highestId = getNumberOfReservedLowIds();\n+      boolean found;\n+      /*\n+       * We do this in chunks of pages instead of one page at a time, the performance impact is significant.\n+       * We first pre-fetch a large chunk sequentially, which is then scanned backwards for used records.\n+       */\n+      final long chunkSizeInPages = 256; // 2MiB (8192 bytes/page * 256 pages/chunk)\n+\n+      long chunkEndId = storeFile.getLastPageId();\n+      while (chunkEndId >= 0)\n+      {\n+        // Do pre-fetch of the chunk\n+        long chunkStartId = max(chunkEndId - chunkSizeInPages, 0);\n+        preFetchChunk(cursor, chunkStartId, chunkEndId);\n+\n+        // Scan pages backwards in the chunk\n+        for (long currentId = chunkEndId; currentId >= chunkStartId && cursor.next(currentId); currentId--)\n         {\n-            if ( cursor.next() )\n+          do\n+          {\n+            found = false;\n+            // Scan record backwards in the page\n+            for (int offset = recordsPerPage * recordSize - recordSize; offset >= 0; offset -= recordSize)\n             {\n-                cursor.setOffset( offset );\n-                recordFormat.write( record, cursor, recordSize );\n-                checkForDecodingErrors( cursor, id, NORMAL ); // We don't free ids if something weird goes wrong\n-                if ( !record.inUse() )\n-                {\n-                    freeId( id );\n-                }\n-                if ( (!record.inUse() || !record.requiresSecondaryUnit()) && record.hasSecondaryUnitId() )\n-                {\n-                    // If record was just now deleted, or if the record used a secondary unit, but not anymore\n-                    // then free the id of that secondary unit.\n-                    freeId( record.getSecondaryUnitId() );\n-                }\n+              cursor.setOffset(offset);\n+              if (isInUse(cursor))\n+              {\n+                // We've found the highest id in use\n+                highestId = (cursor.getCurrentPageId() * recordsPerPage) + offset / recordSize + 1;\n+                found = true;\n+                break;\n+              }\n             }\n+          }\n+          while (cursor.shouldRetry());\n+\n+          checkIdScanCursorBounds(cursor);\n+          if (found)\n+          {\n+            return highestId;\n+          }\n         }\n-        catch ( IOException e )\n+        chunkEndId = chunkStartId - 1;\n+      }\n+\n+      return getNumberOfReservedLowIds();\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(\"Unable to find high id by scanning backwards \" + getStorageFileName(), e);\n+    }\n+  }\n+\n+  /**\n+   * Do a pre-fetch of pages in sequential order on the range [{@code pageIdStart},{@code pageIdEnd}].\n+   *\n+   * @param cursor      Cursor to pre-fetch on.\n+   * @param pageIdStart Page id to start pre-fetching from.\n+   * @param pageIdEnd   Page id to end pre-fetching on, inclusive {@code pageIdEnd}.\n+   */\n+  private static void preFetchChunk(PageCursor cursor, long pageIdStart, long pageIdEnd) throws IOException\n+  {\n+    for (long currentPageId = pageIdStart; currentPageId <= pageIdEnd; currentPageId++)\n+    {\n+      cursor.next(currentPageId);\n+    }\n+  }\n+\n+  protected int determineRecordSize()\n+  {\n+    return recordFormat.getRecordSize(storeHeader);\n+  }\n+\n+  @Override\n+  public final int getRecordSize()\n+  {\n+    return recordSize;\n+  }\n+\n+  @Override\n+  public int getRecordDataSize()\n+  {\n+    return recordSize - recordFormat.getRecordHeaderSize();\n+  }\n+\n+  private boolean isInUse(PageCursor cursor)\n+  {\n+    return recordFormat.isInUse(cursor);\n+  }\n+\n+  protected boolean isRecordReserved(PageCursor cursor)\n+  {\n+    return false;\n+  }\n+\n+  private void createIdGenerator(File fileName)\n+  {\n+    idGeneratorFactory.create(fileName, 0, false);\n+  }\n+\n+  /**\n+   * Closed the {@link IdGenerator} used by this store\n+   */\n+  void closeIdGenerator()\n+  {\n+    if (idGenerator != null)\n+    {\n+      idGenerator.close();\n+    }\n+  }\n+\n+  @Override\n+  public void flush()\n+  {\n+    try\n+    {\n+      storeFile.flushAndForce();\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(\"Failed to flush\", e);\n+    }\n+  }\n+\n+  /**\n+   * Checks if this store is closed and throws exception if it is.\n+   *\n+   * @throws IllegalStateException if the store is closed\n+   */\n+  void assertNotClosed()\n+  {\n+    if (storeFile == null)\n+    {\n+      throw new IllegalStateException(this + \" for file '\" + storageFileName + \"' is closed\");\n+    }\n+  }\n+\n+  /**\n+   * Closes this store. This will cause all buffers and channels to be closed.\n+   * Requesting an operation from after this method has been invoked is\n+   * illegal and an exception will be thrown.\n+   * <p>\n+   * This method will start by invoking the {@link #closeStoreFile()} method\n+   * giving the implementing store way to do anything that it needs to do\n+   * before the pagedFile is closed.\n+   */\n+  @Override\n+  public void close()\n+  {\n+    try\n+    {\n+      closeStoreFile();\n+    } catch (IOException | IllegalStateException e)\n+    {\n+      throw new UnderlyingStorageException(\"Failed to close store file: \" + getStorageFileName(), e);\n+    }\n+  }\n+\n+  private void closeStoreFile() throws IOException\n+  {\n+    try\n+    {\n+      /*\n+       * Note: the closing ordering here is important!\n+       * It is the case since we wand to mark the id generator as closed cleanly ONLY IF\n+       * also the store file is cleanly shutdown.\n+       */\n+      if (storeFile != null)\n+      {\n+        storeFile.close();\n+      }\n+      if (idGenerator != null)\n+      {\n+        if (contains(openOptions, DELETE_ON_CLOSE))\n         {\n-            throw new UnderlyingStorageException( e );\n-        }\n-    }\n-\n-    @Override\n-    public void prepareForCommit( RECORD record )\n-    {\n-        prepareForCommit( record, this );\n-    }\n-\n-    @Override\n-    public void prepareForCommit( RECORD record, IdSequence idSequence )\n-    {\n-        if ( record.inUse() )\n+          idGenerator.delete();\n+        } else\n         {\n-            recordFormat.prepare( record, recordSize, idSequence );\n+          idGenerator.close();\n         }\n-    }\n-\n-    @Override\n-    public <EXCEPTION extends Exception> void scanAllRecords( Visitor<RECORD,EXCEPTION> visitor ) throws EXCEPTION\n-    {\n-        try ( RecordCursor<RECORD> cursor = newRecordCursor( newRecord() ) )\n+      }\n+    } finally\n+    {\n+      storeFile = null;\n+    }\n+  }\n+\n+  /**\n+   * @return The highest possible id in use, -1 if no id in use.\n+   */\n+  @Override\n+  public long getHighestPossibleIdInUse()\n+  {\n+    return idGenerator != null ? idGenerator.getHighestPossibleIdInUse() : scanForHighId() - 1;\n+  }\n+\n+  /**\n+   * Sets the highest id in use. After this call highId will be this given id + 1.\n+   *\n+   * @param highId The highest id in use to set.\n+   */\n+  @Override\n+  public void setHighestPossibleIdInUse(long highId)\n+  {\n+    setHighId(highId + 1);\n+  }\n+\n+  /**\n+   * @return The total number of ids in use.\n+   */\n+  public long getNumberOfIdsInUse()\n+  {\n+    assertIdGeneratorInitialized();\n+    return idGenerator.getNumberOfIdsInUse();\n+  }\n+\n+  /**\n+   * @return the number of records at the beginning of the store file that are reserved for other things\n+   * than actual records. Stuff like permanent configuration data.\n+   */\n+  @Override\n+  public int getNumberOfReservedLowIds()\n+  {\n+    return storeHeaderFormat.numberOfReservedRecords();\n+  }\n+\n+  public IdType getIdType()\n+  {\n+    return idType;\n+  }\n+\n+  void logVersions(Logger logger)\n+  {\n+    logger.log(\"  \" + getTypeDescriptor() + \" \" + storeVersion);\n+  }\n+\n+  void logIdUsage(Logger logger)\n+  {\n+    logger.log(String.format(\"  %s: used=%s high=%s\",\n+        getTypeDescriptor(), getNumberOfIdsInUse(), getHighestPossibleIdInUse()));\n+  }\n+\n+  /**\n+   * Visits this store, and any other store managed by this store.\n+   * TODO this could, and probably should, replace all override-and-do-the-same-thing-to-all-my-managed-stores\n+   * methods like:\n+   * {@link #makeStoreOk()},\n+   * {@link #close()} (where that method could be deleted all together and do a visit in {@link #close()}),\n+   * {@link #logIdUsage(Logger)},\n+   * {@link #logVersions(Logger)}\n+   * For a good samaritan to pick up later.\n+   */\n+  void visitStore(Visitor<CommonAbstractStore<RECORD, HEADER>, RuntimeException> visitor)\n+  {\n+    visitor.visit(this);\n+  }\n+\n+  /**\n+   * Called from the part of the code that starts the {@link MetaDataStore} and friends, together with any\n+   * existing transaction log, seeing that there are transactions to recover. Now, this shouldn't be\n+   * needed because the state of the id generator _should_ reflect this fact, but turns out that,\n+   * given HA and the nature of the .id files being like orphans to the rest of the store, we just\n+   * can't trust that to be true. If we happen to have id generators open during recovery we delegate\n+   * {@link #freeId(long)} calls to {@link IdGenerator#freeId(long)} and since the id generator is most likely\n+   * out of date w/ regards to high id, it may very well blow up.\n+   * <p>\n+   * This also marks the store as not OK. A call to {@link #makeStoreOk()} is needed once recovery is complete.\n+   */\n+  final void deleteIdGenerator()\n+  {\n+    if (idGenerator != null)\n+    {\n+      idGenerator.delete();\n+      idGenerator = null;\n+      setStoreNotOk(new IllegalStateException(\"IdGenerator is not initialized\"));\n+    }\n+  }\n+\n+  @Override\n+  public long getNextRecordReference(RECORD record)\n+  {\n+    return recordFormat.getNextRecordReference(record);\n+  }\n+\n+  @Override\n+  public RECORD newRecord()\n+  {\n+    return recordFormat.newRecord();\n+  }\n+\n+  /**\n+   * Acquires a {@link PageCursor} from the {@link PagedFile store file} and reads the requested record\n+   * in the correct page and offset.\n+   *\n+   * @param id     the record id.\n+   * @param record the record instance to load the data into.\n+   * @param mode   how strict to be when loading, f.ex {@link RecordLoad#FORCE} will always read what's there\n+   *               and load into the record, whereas {@link RecordLoad#NORMAL} will throw {@link InvalidRecordException}\n+   *               if not in use.\n+   */\n+  @Override\n+  public RECORD getRecord(long id, RECORD record, RecordLoad mode)\n+  {\n+    try (PageCursor cursor = storeFile.io(getNumberOfReservedLowIds(), PF_SHARED_READ_LOCK))\n+    {\n+      readIntoRecord(id, record, mode, cursor);\n+      return record;\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(e);\n+    }\n+  }\n+\n+  @Override\n+  public void getRecordByCursor(long id, RECORD record, RecordLoad mode, PageCursor cursor) throws UnderlyingStorageException\n+  {\n+    try\n+    {\n+      readIntoRecord(id, record, mode, cursor);\n+    } catch (IOException e)\n+    {\n+      throw new UnderlyingStorageException(e);\n+    }\n+\n+  }\n+\n+  void readIntoRecord(long id, RECORD record, RecordLoad mode, PageCursor cursor) throws IOException\n+  {\n+    // Mark the record with this id regardless of whether or not we load the contents of it.\n+    // This is done in this method since there are multiple call sites and they all want the id\n+    // on that record, so it's to ensure it isn't forgotten.\n+    record.setId(id);\n+    long pageId = pageIdForRecord(id);\n+    int offset = offsetForId(id);\n+    if (cursor.next(pageId))\n+    {\n+      // There is a page in the store that covers this record, go read it\n+      do\n+      {\n+        prepareForReading(cursor, offset, record);\n+        recordFormat.read(record, cursor, mode, recordSize);\n+      }\n+      while (cursor.shouldRetry());\n+      checkForDecodingErrors(cursor, id, mode);\n+      verifyAfterReading(record, mode);\n+    } else\n+    {\n+      verifyAfterNotRead(record, mode);\n+    }\n+  }\n+\n+  @Override\n+  public void updateRecord(RECORD record)\n+  {\n+    long id = record.getId();\n+    IdValidator.assertValidId(getIdType(), id, recordFormat.getMaxId());\n+\n+    long pageId = pageIdForRecord(id);\n+    int offset = offsetForId(id);\n+    try (PageCursor cursor = storeFile.io(pageId, PF_SHARED_WRITE_LOCK))\n+    {\n+      if (cursor.next())\n+      {\n+        cursor.setOffset(offset);\n+        recordFormat.write(record, cursor, recordSize);\n+        checkForDecodingErrors(cursor, id, NORMAL); // We don't free ids if something weird goes wrong\n+        if (!record.inUse())\n         {\n-            long highId = getHighId();\n-            cursor.acquire( getNumberOfReservedLowIds(), CHECK );\n-            for ( long id = getNumberOfReservedLowIds(); id < highId; id++ )\n-            {\n-                if ( cursor.next( id ) )\n-                {\n-                    visitor.visit( cursor.get() );\n-                }\n-            }\n+          freeId(id);\n         }\n-    }\n-\n-    @Override\n-    public Collection<RECORD> getRecords( long firstId, RecordLoad mode )\n-    {\n-        try ( RecordCursor<RECORD> cursor = newRecordCursor( newRecord() ) )\n+        if ((!record.inUse() || !record.requiresSecondaryUnit()) && record.hasSecondaryUnitId())\n         {\n-            cursor.acquire( firstId, mode );\n-            return cursor.getAll();\n+          // If record was just now deleted, or if the record used a secondary unit, but not anymore\n+          // then free the id of that secondary unit.\n+          freeId(record.getSecondaryUnitId());\n         }\n-    }\n-\n-    @Override\n-    public RecordCursor<RECORD> newRecordCursor( final RECORD record )\n-    {\n-        return new StoreRecordCursor<>( record, this );\n-    }\n-\n-    private void verifyAfterNotRead( RECORD record, RecordLoad mode )\n-    {\n-        record.clear();\n-        mode.verify( record );\n-\n-    }\n-\n-    final void checkForDecodingErrors( PageCursor cursor, long recordId, RecordLoad mode )\n+      }\n+    } catch (IOException e)\n     {\n-        if ( mode.checkForOutOfBounds( cursor ) )\n-        {\n-            throwOutOfBoundsException( recordId );\n-        }\n-        mode.clearOrThrowCursorError( cursor );\n+      throw new UnderlyingStorageException(e);\n     }\n+  }\n \n-    private void throwOutOfBoundsException( long recordId )\n-    {\n-        RECORD record = newRecord();\n-        record.setId( recordId );\n-        long pageId = pageIdForRecord( recordId );\n-        int offset = offsetForId( recordId );\n-        throw new UnderlyingStorageException( buildOutOfBoundsExceptionMessage(\n-                record, pageId, offset, recordSize, storeFile.pageSize(), storageFileName.getAbsolutePath() ) );\n-    }\n+  @Override\n+  public void prepareForCommit(RECORD record)\n+  {\n+    prepareForCommit(record, this);\n+  }\n \n-    static String buildOutOfBoundsExceptionMessage( AbstractBaseRecord record, long pageId, int offset, int recordSize,\n-            int pageSize, String filename )\n+  @Override\n+  public void prepareForCommit(RECORD record, IdSequence idSequence)\n+  {\n+    if (record.inUse())\n     {\n-        return \"Access to record \" + record + \" went out of bounds of the page. The record size is \" +\n-               recordSize + \" bytes, and the access was at offset \" + offset + \" bytes into page \" +\n-               pageId + \", and the pages have a capacity of \" + pageSize + \" bytes. \" +\n-               \"The mapped store file in question is \" + filename;\n+      recordFormat.prepare(record, recordSize, idSequence);\n     }\n+  }\n \n-    private void verifyAfterReading( RECORD record, RecordLoad mode )\n+  @Override\n+  public <EXCEPTION extends Exception> void scanAllRecords(Visitor<RECORD, EXCEPTION> visitor) throws EXCEPTION\n+  {\n+    try (RecordCursor<RECORD> cursor = newRecordCursor(newRecord()))\n     {\n-        if ( !mode.verify( record ) )\n+      long highId = getHighId();\n+      cursor.acquire(getNumberOfReservedLowIds(), CHECK);\n+      for (long id = getNumberOfReservedLowIds(); id < highId; id++)\n+      {\n+        if (cursor.next(id))\n         {\n-            record.clear();\n+          visitor.visit(cursor.get());\n         }\n-    }\n-\n-    private void prepareForReading( PageCursor cursor, int offset, RECORD record )\n-    {\n-        // Mark this record as unused. This to simplify implementations of readRecord.\n-        // readRecord can behave differently depending on RecordLoad argument and so it may be that\n-        // contents of a record may be loaded even if that record is unused, where the contents\n-        // can still be initialized data. Know that for many record stores, deleting a record means\n-        // just setting one byte or bit in that record.\n-        record.setInUse( false );\n-        cursor.setOffset( offset );\n-    }\n-\n-    @Override\n-    public void ensureHeavy( RECORD record )\n-    {\n-        // Do nothing by default. Some record stores have this.\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return getClass().getSimpleName();\n-    }\n-\n-    @Override\n-    public int getStoreHeaderInt()\n-    {\n-        return ((IntStoreHeader) storeHeader).value();\n-    }\n-\n-    public abstract static class Configuration\n-    {\n-        static final Setting<Boolean> rebuild_idgenerators_fast = GraphDatabaseSettings.rebuild_idgenerators_fast;\n-    }\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Collection<RECORD> getRecords(long firstId, RecordLoad mode)\n+  {\n+    try (RecordCursor<RECORD> cursor = newRecordCursor(newRecord()))\n+    {\n+      cursor.acquire(firstId, mode);\n+      return cursor.getAll();\n+    }\n+  }\n+\n+  @Override\n+  public RecordCursor<RECORD> newRecordCursor(final RECORD record)\n+  {\n+    return new StoreRecordCursor<>(record, this);\n+  }\n+\n+  private void verifyAfterNotRead(RECORD record, RecordLoad mode)\n+  {\n+    record.clear();\n+    mode.verify(record);\n+\n+  }\n+\n+  final void checkForDecodingErrors(PageCursor cursor, long recordId, RecordLoad mode)\n+  {\n+    if (mode.checkForOutOfBounds(cursor))\n+    {\n+      throwOutOfBoundsException(recordId);\n+    }\n+    mode.clearOrThrowCursorError(cursor);\n+  }\n+\n+  private void throwOutOfBoundsException(long recordId)\n+  {\n+    RECORD record = newRecord();\n+    record.setId(recordId);\n+    long pageId = pageIdForRecord(recordId);\n+    int offset = offsetForId(recordId);\n+    throw new UnderlyingStorageException(buildOutOfBoundsExceptionMessage(\n+        record, pageId, offset, recordSize, storeFile.pageSize(), storageFileName.getAbsolutePath()));\n+  }\n+\n+  static String buildOutOfBoundsExceptionMessage(AbstractBaseRecord record, long pageId, int offset, int recordSize,\n+                                                 int pageSize, String filename)\n+  {\n+    return \"Access to record \" + record + \" went out of bounds of the page. The record size is \" +\n+        recordSize + \" bytes, and the access was at offset \" + offset + \" bytes into page \" +\n+        pageId + \", and the pages have a capacity of \" + pageSize + \" bytes. \" +\n+        \"The mapped store file in question is \" + filename;\n+  }\n+\n+  private void verifyAfterReading(RECORD record, RecordLoad mode)\n+  {\n+    if (!mode.verify(record))\n+    {\n+      record.clear();\n+    }\n+  }\n+\n+  private void prepareForReading(PageCursor cursor, int offset, RECORD record)\n+  {\n+    // Mark this record as unused. This to simplify implementations of readRecord.\n+    // readRecord can behave differently depending on RecordLoad argument and so it may be that\n+    // contents of a record may be loaded even if that record is unused, where the contents\n+    // can still be initialized data. Know that for many record stores, deleting a record means\n+    // just setting one byte or bit in that record.\n+    record.setInUse(false);\n+    cursor.setOffset(offset);\n+  }\n+\n+  @Override\n+  public void ensureHeavy(RECORD record)\n+  {\n+    // Do nothing by default. Some record stores have this.\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return getClass().getSimpleName();\n+  }\n+\n+  @Override\n+  public int getStoreHeaderInt()\n+  {\n+    return ((IntStoreHeader) storeHeader).value();\n+  }\n+\n+  public abstract static class Configuration\n+  {\n+    static final Setting<Boolean> rebuild_idgenerators_fast = GraphDatabaseSettings.rebuild_idgenerators_fast;\n+  }\n }\n",
            "diff_size": 1778
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}