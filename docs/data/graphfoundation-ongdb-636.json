{
    "project_name": "graphfoundation-ongdb",
    "error_id": "636",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "80",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "139",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/636/BestFirstSelectorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/636/BestFirstSelectorFactory.java\nindex 202ce240cc8..69cecac7a67 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/636/BestFirstSelectorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/636/BestFirstSelectorFactory.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.graphalgo.impl.util;\n \n import java.util.HashMap;\n@@ -33,117 +34,116 @@ import org.neo4j.graphdb.traversal.TraversalBranch;\n import org.neo4j.graphdb.traversal.TraversalContext;\n \n public abstract class BestFirstSelectorFactory<P extends Comparable<P>, D>\n-        implements BranchOrderingPolicy\n+    implements BranchOrderingPolicy\n {\n-    private final PathInterest<P> interest;\n+  private final PathInterest<P> interest;\n+\n+  public BestFirstSelectorFactory(PathInterest<P> interest)\n+  {\n+    this.interest = interest;\n+  }\n+\n+  @Override\n+  public BranchSelector create(TraversalBranch startSource, PathExpander expander)\n+  {\n+    return new BestFirstSelector(startSource, getStartData(), expander);\n+  }\n+\n+  protected abstract P getStartData();\n \n-    public BestFirstSelectorFactory( PathInterest<P> interest )\n+  private static class Visit<P extends Comparable<P>> implements Comparable<P>\n+  {\n+    private P cost;\n+    private int visitCount;\n+\n+    Visit(P cost)\n     {\n-        this.interest = interest;\n+      this.cost = cost;\n     }\n \n     @Override\n-    public BranchSelector create( TraversalBranch startSource, PathExpander expander )\n+    public int compareTo(P o)\n     {\n-        return new BestFirstSelector( startSource, getStartData(), expander );\n+      return cost.compareTo(o);\n     }\n-\n-    protected abstract P getStartData();\n-\n-    private static class Visit<P extends Comparable<P>> implements Comparable<P>\n+  }\n+\n+  public final class BestFirstSelector implements BranchSelector\n+  {\n+    private final PriorityMap<TraversalBranch, Node, P> queue = new PriorityMap(CONVERTER, interest.comparator(),\n+        interest.stopAfterLowestCost());\n+    private TraversalBranch current;\n+    private P currentAggregatedValue;\n+    private final PathExpander expander;\n+    private final Map<Long, Visit<P>> visits = new HashMap<>();\n+\n+    public BestFirstSelector(TraversalBranch source, P startData, PathExpander expander)\n     {\n-        private P cost;\n-        private int visitCount;\n+      this.current = source;\n+      this.currentAggregatedValue = startData;\n+      this.expander = expander;\n+    }\n \n-        Visit( P cost )\n+    @Override\n+    public TraversalBranch next(TraversalContext metadata)\n+    {\n+      // Exhaust current if not already exhausted\n+      while (true)\n+      {\n+        TraversalBranch next = current.next(expander, metadata);\n+        if (next == null)\n         {\n-            this.cost = cost;\n+          break;\n         }\n \n-        @Override\n-        public int compareTo( P o )\n+        long endNodeId = next.endNode().getId();\n+        Visit<P> stay = visits.get(endNodeId);\n+\n+        D cost = calculateValue(next);\n+        P newPriority = addPriority(next, currentAggregatedValue, cost);\n+\n+        boolean newStay = stay == null;\n+        if (newStay)\n         {\n-            return cost.compareTo( o );\n+          stay = new Visit<>(newPriority);\n+          visits.put(endNodeId, stay);\n         }\n-    }\n-\n-    public final class BestFirstSelector implements BranchSelector\n-    {\n-        private final PriorityMap<TraversalBranch, Node, P> queue = new PriorityMap( CONVERTER, interest.comparator(),\n-                interest.stopAfterLowestCost() );\n-        private TraversalBranch current;\n-        private P currentAggregatedValue;\n-        private final PathExpander expander;\n-        private final Map<Long, Visit<P>> visits = new HashMap<>();\n-\n-        public BestFirstSelector( TraversalBranch source, P startData, PathExpander expander )\n+        if (newStay || !interest.canBeRuledOut(stay.visitCount, newPriority, stay.cost))\n         {\n-            this.current = source;\n-            this.currentAggregatedValue = startData;\n-            this.expander = expander;\n+          if (interest.comparator().compare(newPriority, stay.cost) < 0)\n+          {\n+            stay.cost = newPriority;\n+          }\n+          queue.put(next, newPriority);\n         }\n+      }\n \n-        @Override\n-        public TraversalBranch next( TraversalContext metadata )\n+      do\n+      {\n+        // Pop the top from priorityMap\n+        Entry<TraversalBranch, P> entry = queue.pop();\n+        if (entry != null)\n+        {\n+          current = entry.getEntity();\n+          Visit<P> stay = visits.get(current.endNode().getId());\n+          stay.visitCount++;\n+          if (interest.stillInteresting(stay.visitCount))\n+          {\n+            currentAggregatedValue = entry.getPriority();\n+            return current;\n+          }\n+        } else\n         {\n-            // Exhaust current if not already exhausted\n-            while ( true )\n-            {\n-                TraversalBranch next = current.next( expander, metadata );\n-                if ( next == null )\n-                {\n-                    break;\n-                }\n-\n-                long endNodeId = next.endNode().getId();\n-                Visit<P> stay = visits.get( endNodeId );\n-\n-                D cost = calculateValue( next );\n-                P newPriority = addPriority( next, currentAggregatedValue, cost );\n-\n-                boolean newStay = stay == null;\n-                if ( newStay )\n-                {\n-                    stay = new Visit<>( newPriority );\n-                    visits.put( endNodeId, stay );\n-                }\n-                if ( newStay || !interest.canBeRuledOut( stay.visitCount, newPriority, stay.cost ) )\n-                {\n-                    if ( interest.comparator().compare( newPriority, stay.cost ) < 0 )\n-                    {\n-                        stay.cost = newPriority;\n-                    }\n-                    queue.put( next, newPriority );\n-                }\n-            }\n-\n-            do\n-            {\n-                // Pop the top from priorityMap\n-                Entry<TraversalBranch, P> entry = queue.pop();\n-                if ( entry != null )\n-                {\n-                    current = entry.getEntity();\n-                    Visit<P> stay = visits.get( current.endNode().getId() );\n-                    stay.visitCount++;\n-                    if ( interest.stillInteresting( stay.visitCount ) )\n-                    {\n-                        currentAggregatedValue = entry.getPriority();\n-                        return current;\n-                    }\n-                }\n-                else\n-                {\n-                    return null;\n-                }\n-            } while ( true );\n+          return null;\n         }\n+      } while (true);\n     }\n+  }\n \n-    protected abstract P addPriority( TraversalBranch source,\n-            P currentAggregatedValue, D value );\n+  protected abstract P addPriority(TraversalBranch source,\n+                                   P currentAggregatedValue, D value);\n \n-    protected abstract D calculateValue( TraversalBranch next );\n+  protected abstract D calculateValue(TraversalBranch next);\n \n-    public static final Converter<Node, TraversalBranch> CONVERTER = Path::endNode;\n+  public static final Converter<Node, TraversalBranch> CONVERTER = Path::endNode;\n }\n",
            "diff_size": 150
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/636/BestFirstSelectorFactory.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/636/BestFirstSelectorFactory.java\nindex 202ce240cc8..38d062a07d5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/636/BestFirstSelectorFactory.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/636/BestFirstSelectorFactory.java\n@@ -32,8 +32,7 @@ import org.neo4j.graphdb.traversal.BranchSelector;\n import org.neo4j.graphdb.traversal.TraversalBranch;\n import org.neo4j.graphdb.traversal.TraversalContext;\n \n-public abstract class BestFirstSelectorFactory<P extends Comparable<P>, D>\n-        implements BranchOrderingPolicy\n+public abstract class BestFirstSelectorFactory<P extends Comparable<P>, D> implements BranchOrderingPolicy\n {\n     private final PathInterest<P> interest;\n \n@@ -69,9 +68,9 @@ public abstract class BestFirstSelectorFactory<P extends Comparable<P>, D>\n \n     public final class BestFirstSelector implements BranchSelector\n     {\n-        private final PriorityMap<TraversalBranch, Node, P> queue = new PriorityMap( CONVERTER, interest.comparator(),\n-                interest.stopAfterLowestCost() );\n-        private TraversalBranch current;\n+        private final PriorityMap<TraversalBranch, Node, P> queue = new PriorityMap( CONVERTER, interest.comparator(), interest.stopAfterLowestCost() );\n+\n+private TraversalBranch current;\n         private P currentAggregatedValue;\n         private final PathExpander expander;\n         private final Map<Long, Visit<P>> visits = new HashMap<>();\n@@ -97,8 +96,7 @@ public abstract class BestFirstSelectorFactory<P extends Comparable<P>, D>\n \n                 long endNodeId = next.endNode().getId();\n                 Visit<P> stay = visits.get( endNodeId );\n-\n-                D cost = calculateValue( next );\n+D cost = calculateValue( next );\n                 P newPriority = addPriority( next, currentAggregatedValue, cost );\n \n                 boolean newStay = stay == null;\n@@ -107,7 +105,8 @@ public abstract class BestFirstSelectorFactory<P extends Comparable<P>, D>\n                     stay = new Visit<>( newPriority );\n                     visits.put( endNodeId, stay );\n                 }\n-                if ( newStay || !interest.canBeRuledOut( stay.visitCount, newPriority, stay.cost ) )\n+\n+if ( newStay || !interest.canBeRuledOut( stay.visitCount, newPriority, stay.cost ) )\n                 {\n                     if ( interest.comparator().compare( newPriority, stay.cost ) < 0 )\n                     {\n@@ -120,7 +119,7 @@ public abstract class BestFirstSelectorFactory<P extends Comparable<P>, D>\n             do\n             {\n                 // Pop the top from priorityMap\n-                Entry<TraversalBranch, P> entry = queue.pop();\n+                Entry<TraversalBranch,P> entry = queue.pop();\n                 if ( entry != null )\n                 {\n                     current = entry.getEntity();\n@@ -142,8 +141,7 @@ public abstract class BestFirstSelectorFactory<P extends Comparable<P>, D>\n \n     protected abstract P addPriority( TraversalBranch source,\n             P currentAggregatedValue, D value );\n+protected abstract D calculateValue( TraversalBranch next );\n \n-    protected abstract D calculateValue( TraversalBranch next );\n-\n-    public static final Converter<Node, TraversalBranch> CONVERTER = Path::endNode;\n-}\n+    public static final Converter<Node,TraversalBranch> CONVERTER = Path::endNode;\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}