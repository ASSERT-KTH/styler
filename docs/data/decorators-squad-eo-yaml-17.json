{
    "project_name": "decorators-squad-eo-yaml",
    "error_id": "17",
    "information": {
        "errors": [
            {
                "line": "119",
                "severity": "error",
                "message": "Line is longer than 80 characters (found 93).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "\n    /**\n     * {@link FirstCommentFound} returns the first comment even if there's a line between it.\n     */\n    @Test\n    public void noFirstComment() {",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "120",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/17/FirstCommentFoundTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/17/FirstCommentFoundTest.java\nindex 874bc34c15b..b5efa3402cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/17/FirstCommentFoundTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/intellij/17/FirstCommentFoundTest.java\n@@ -1,17 +1,17 @@\n /**\n  * Copyright (c) 2016-2020, Mihai Emil Andronache\n  * All rights reserved.\n- *\n+ * <p>\n  * Redistribution and use in source and binary forms, with or without\n- *  modification, are permitted provided that the following conditions are met:\n+ * modification, are permitted provided that the following conditions are met:\n  * Redistributions of source code must retain the above copyright notice, this\n- *  list of conditions and the following disclaimer.\n- *  Redistributions in binary form must reproduce the above copyright notice,\n- *  this list of conditions and the following disclaimer in the documentation\n- *  and/or other materials provided with the distribution.\n+ * list of conditions and the following disclaimer.\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n  * Neither the name of the copyright holder nor the names of its\n- *  contributors may be used to endorse or promote products derived from\n- *  this software without specific prior written permission.\n+ * contributors may be used to endorse or promote products derived from\n+ * this software without specific prior written permission.\n  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n@@ -25,6 +25,7 @@\n  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n  * SUCH DAMAGE.\n  */\n+\n package com.amihaiemil.eoyaml;\n \n import org.hamcrest.MatcherAssert;\n@@ -128,7 +129,7 @@ public final class FirstCommentFoundTest {\n         lines.add(new RtYamlLine(\"  fifth: values\", 4));\n         lines.add(new RtYamlLine(\"third: something\", 5));\n         final YamlLines comment = new FirstCommentFound(\n-                new AllYamlLines(lines)\n+            new AllYamlLines(lines)\n         );\n         MatcherAssert.assertThat(comment, Matchers.iterableWithSize(1));\n     }\n",
            "diff_size": 10
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "131",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/17/FirstCommentFoundTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/17/FirstCommentFoundTest.java\nindex 874bc34c15b..53e1e9a22d6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/17/FirstCommentFoundTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/naturalize/17/FirstCommentFoundTest.java\n@@ -128,8 +128,8 @@ public final class FirstCommentFoundTest {\n         lines.add(new RtYamlLine(\"  fifth: values\", 4));\n         lines.add(new RtYamlLine(\"third: something\", 5));\n         final YamlLines comment = new FirstCommentFound(\n-                new AllYamlLines(lines)\n+    new AllYamlLines(lines)\n         );\n         MatcherAssert.assertThat(comment, Matchers.iterableWithSize(1));\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "65",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "66",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "67",
                    "severity": "error",
                    "message": "'lines' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "90",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "91",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "92",
                    "severity": "error",
                    "message": "'node' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "93",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "103",
                    "severity": "error",
                    "message": "'method call' child has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "'new' has incorrect indentation level 8, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "106",
                    "severity": "error",
                    "message": "')' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "107",
                    "severity": "error",
                    "message": "')' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "109",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "134",
                    "severity": "error",
                    "message": "'commIt' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "135",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "136",
                    "severity": "error",
                    "message": "'\"YAML document for\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "137",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "139",
                    "severity": "error",
                    "message": "'commIt' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "'Matchers' has incorrect indentation level 0, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "141",
                    "severity": "error",
                    "message": "'\"test purposes:\"' has incorrect indentation level 4, expected level should be 12.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "142",
                    "severity": "error",
                    "message": "'method call rparen' has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "146",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/17/FirstCommentFoundTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/17/FirstCommentFoundTest.java\nindex 874bc34c15b..20225c2899e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/errored/1/17/FirstCommentFoundTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/decorators-squad-eo-yaml/codebuff/17/FirstCommentFoundTest.java\n@@ -31,7 +31,6 @@ import org.hamcrest.MatcherAssert;\n import org.hamcrest.Matchers;\n import org.junit.Test;\n import org.mockito.Mockito;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -43,53 +42,78 @@ import java.util.List;\n  * @version $Id: 02079114bb6ba381711ec8695c34f4176d34722c $\n  * @since 4.2.0\n  */\n+\n+\n public final class FirstCommentFoundTest {\n     /**\n      * FirstCommentFound delegates the call to originals().\n      */\n+\n+\n     @Test\n     public void delegatesOriginals() {\n-        final YamlLines initial = Mockito.mock(YamlLines.class);\n-        final Collection<YamlLine> lines = Mockito.mock(Collection.class);\n-        Mockito.when(initial.original()).thenReturn(lines);\n+        final YamlLines initial = Mockito.mock(\n+                                      YamlLines.class\n+                                  );\n+        final Collection<YamlLine> lines = Mockito.mock(\n+                                               Collection.class\n+                                           );\n+        Mockito.when(\n+    initial.original()\n+).thenReturn(lines);\n         MatcherAssert.assertThat(\n-            new FirstCommentFound(initial).original(),\n-            Matchers.is(lines)\n-        );\n+new FirstCommentFound(initial).original(),\n+Matchers.is(\n+    lines)\n+);\n     }\n \n     /**\n      * FirstCommentFound delegates the call to toYamlNode().\n      */\n+\n     @Test\n     public void delegatesToYamlNode() {\n-        final YamlLines initial = Mockito.mock(YamlLines.class);\n-        final YamlLine prev = Mockito.mock(YamlLine.class);\n-        final YamlNode node = Mockito.mock(YamlNode.class);\n-        Mockito.when(initial.toYamlNode(prev, false)).thenReturn(node);\n+        final YamlLines initial = Mockito.mock(\n+                                      YamlLines.class\n+                                  );\n+        final YamlLine prev = Mockito.mock(\n+                                  YamlLine.class\n+                              );\n+        final YamlNode node = Mockito.mock(\n+                                  YamlNode.class\n+                              );\n+        Mockito.when(\n+    initial.toYamlNode(prev, false)\n+).thenReturn(node);\n         MatcherAssert.assertThat(\n-            new FirstCommentFound(initial).toYamlNode(prev, false),\n-            Matchers.is(node)\n-        );\n+new FirstCommentFound(initial).toYamlNode(prev, false),\n+Matchers.is(\n+    node)\n+);\n     }\n \n     /**\n      * {@link FirstCommentFound} can work with empty lines.\n      */\n+\n     @Test\n     public void worksWithEmptyLines() {\n         MatcherAssert.assertThat(\n-            new FirstCommentFound(\n-                new AllYamlLines(new ArrayList<>())\n-            ),\n-            Matchers.emptyIterable()\n-        );\n+new FirstCommentFound(\n+    new AllYamlLines(\n+        new ArrayList<>()\n+    )\n+),\n+Matchers.emptyIterable()\n+);\n     }\n \n     /**\n      * {@link FirstCommentFound} returns the lines of the first\n      * comment in the document.\n      */\n+\n     @Test\n     public void findsFirstComment() {\n         final List<YamlLine> lines = new ArrayList<>();\n@@ -101,23 +125,27 @@ public final class FirstCommentFoundTest {\n         lines.add(new RtYamlLine(\"  fifth: values\", 5));\n         lines.add(new RtYamlLine(\"third: something\", 6));\n         final YamlLines comment = new FirstCommentFound(\n-            new AllYamlLines(lines)\n-        );\n-        MatcherAssert.assertThat(comment, Matchers.iterableWithSize(2));\n+                                      new AllYamlLines(lines)\n+                                  );\n+        MatcherAssert.assertThat(comment, Matchers.iterableWithSize(\n+                                     2));\n         final Iterator<YamlLine> commIt = comment.iterator();\n         MatcherAssert.assertThat(\n-            commIt.next().comment(),\n-            Matchers.equalTo(\"YAML document for\")\n-        );\n+commIt.next().comment(),\n+Matchers.equalTo(\n+    \"YAML document for\")\n+);\n         MatcherAssert.assertThat(\n-            commIt.next().comment(),\n-            Matchers.equalTo(\"test purposes:\")\n-        );\n+commIt.next().comment(),\n+Matchers.equalTo(\n+    \"test purposes:\")\n+);\n     }\n \n     /**\n      * {@link FirstCommentFound} returns the first comment even if there's a line between it.\n      */\n+\n     @Test\n     public void noFirstComment() {\n         final List<YamlLine> lines = new ArrayList<>();\n@@ -128,8 +156,10 @@ public final class FirstCommentFoundTest {\n         lines.add(new RtYamlLine(\"  fifth: values\", 4));\n         lines.add(new RtYamlLine(\"third: something\", 5));\n         final YamlLines comment = new FirstCommentFound(\n-                new AllYamlLines(lines)\n-        );\n-        MatcherAssert.assertThat(comment, Matchers.iterableWithSize(1));\n+                                      new AllYamlLines(lines)\n+                                  );\n+        MatcherAssert.assertThat(comment, Matchers.iterableWithSize(\n+                                     1));\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 63
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "119",
                    "severity": "error",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}