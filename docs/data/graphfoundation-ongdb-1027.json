{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1027",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1027/TokenRead.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1027/TokenRead.java\nindex f42818cbfb3..62e1a3ea00a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1027/TokenRead.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1027/TokenRead.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api;\n \n import java.util.Iterator;\n@@ -27,94 +28,100 @@ import org.neo4j.internal.kernel.api.exceptions.PropertyKeyIdNotFoundKernelExcep\n \n public interface TokenRead\n {\n-    /**\n-     * Value indicating the a token does not exist in the graph.\n-     */\n-    int NO_TOKEN = -1;\n-\n-    /**\n-     * Return the id of the provided label, or NO_TOKEN if the label isn't known to the graph.\n-     *\n-     * @param name The label name.\n-     * @return the label id, or NO_TOKEN\n-     */\n-    int nodeLabel( String name );\n-\n-    /**\n-     * Returns the name of a label given its label id\n-     *\n-     * @param labelId The label id\n-     * @return The name of the label\n-     * @throws LabelNotFoundKernelException if no label is associates with this id\n-     */\n-    String nodeLabelName( int labelId ) throws LabelNotFoundKernelException;\n-\n-    /**\n-     * Return the id of the provided relationship type, or NO_TOKEN if the type isn't known to the graph.\n-     *\n-     * @param name The relationship type name.\n-     * @return the relationship type id, or NO_TOKEN\n-     */\n-    int relationshipType( String name );\n-\n-    /**\n-     * Returns the name of a relationship type given its id\n-     *\n-     * @param relationshipTypeId The id of the relationship type\n-     * @return The name of the relationship type\n-     */\n-    String relationshipTypeName( int relationshipTypeId ) throws KernelException;\n-\n-    /**\n-     * Return the id of the provided property key, or NO_TOKEN if the property isn't known to the graph.\n-     *\n-     * @param name The property key name.\n-     * @return the property key id, or NO_TOKEN\n-     */\n-    int propertyKey( String name );\n-\n-    /**\n-     * Returns the name of a property given its property key id\n-     *\n-     * @param propertyKeyId The id of the property\n-     * @return The name of the key\n-     * @throws PropertyKeyIdNotFoundKernelException if no key is associated with the id\n-     */\n-    String propertyKeyName( int propertyKeyId ) throws PropertyKeyIdNotFoundKernelException;\n-\n-    /**\n-     * Returns all label tokens\n-     * @return an iterator over all label tokens in the database\n-     */\n-    Iterator<NamedToken> labelsGetAllTokens();\n-\n-    /**\n-     * Returns all property tokens\n-     * @return an iterator over all property tokens in the database\n-     */\n-    Iterator<NamedToken> propertyKeyGetAllTokens();\n-\n-    /**\n-     * Returns all relationship type tokens\n-     * @return an iterator over all relationship type tokens in the database\n-     */\n-    Iterator<NamedToken> relationshipTypesGetAllTokens();\n-\n-    /**\n-     * Returns the number of labels in the database\n-     * @return the number of labels in the database\n-     */\n-    int labelCount( );\n-\n-    /**\n-     * Returns the number of properties in the database\n-     * @return the number of properties in the database\n-     */\n-    int propertyKeyCount( );\n-\n-    /**\n-     * Returns the number of relationship types in the database\n-     * @return the number of relationship types in the database\n-     */\n-    int relationshipTypeCount( );\n+  /**\n+   * Value indicating the a token does not exist in the graph.\n+   */\n+  int NO_TOKEN = -1;\n+\n+  /**\n+   * Return the id of the provided label, or NO_TOKEN if the label isn't known to the graph.\n+   *\n+   * @param name The label name.\n+   * @return the label id, or NO_TOKEN\n+   */\n+  int nodeLabel(String name);\n+\n+  /**\n+   * Returns the name of a label given its label id\n+   *\n+   * @param labelId The label id\n+   * @return The name of the label\n+   * @throws LabelNotFoundKernelException if no label is associates with this id\n+   */\n+  String nodeLabelName(int labelId) throws LabelNotFoundKernelException;\n+\n+  /**\n+   * Return the id of the provided relationship type, or NO_TOKEN if the type isn't known to the graph.\n+   *\n+   * @param name The relationship type name.\n+   * @return the relationship type id, or NO_TOKEN\n+   */\n+  int relationshipType(String name);\n+\n+  /**\n+   * Returns the name of a relationship type given its id\n+   *\n+   * @param relationshipTypeId The id of the relationship type\n+   * @return The name of the relationship type\n+   */\n+  String relationshipTypeName(int relationshipTypeId) throws KernelException;\n+\n+  /**\n+   * Return the id of the provided property key, or NO_TOKEN if the property isn't known to the graph.\n+   *\n+   * @param name The property key name.\n+   * @return the property key id, or NO_TOKEN\n+   */\n+  int propertyKey(String name);\n+\n+  /**\n+   * Returns the name of a property given its property key id\n+   *\n+   * @param propertyKeyId The id of the property\n+   * @return The name of the key\n+   * @throws PropertyKeyIdNotFoundKernelException if no key is associated with the id\n+   */\n+  String propertyKeyName(int propertyKeyId) throws PropertyKeyIdNotFoundKernelException;\n+\n+  /**\n+   * Returns all label tokens\n+   *\n+   * @return an iterator over all label tokens in the database\n+   */\n+  Iterator<NamedToken> labelsGetAllTokens();\n+\n+  /**\n+   * Returns all property tokens\n+   *\n+   * @return an iterator over all property tokens in the database\n+   */\n+  Iterator<NamedToken> propertyKeyGetAllTokens();\n+\n+  /**\n+   * Returns all relationship type tokens\n+   *\n+   * @return an iterator over all relationship type tokens in the database\n+   */\n+  Iterator<NamedToken> relationshipTypesGetAllTokens();\n+\n+  /**\n+   * Returns the number of labels in the database\n+   *\n+   * @return the number of labels in the database\n+   */\n+  int labelCount();\n+\n+  /**\n+   * Returns the number of properties in the database\n+   *\n+   * @return the number of properties in the database\n+   */\n+  int propertyKeyCount();\n+\n+  /**\n+   * Returns the number of relationship types in the database\n+   *\n+   * @return the number of relationship types in the database\n+   */\n+  int relationshipTypeCount();\n }\n",
            "diff_size": 97
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1027/TokenRead.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1027/TokenRead.java\nindex f42818cbfb3..5969c9312ed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1027/TokenRead.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1027/TokenRead.java\n@@ -104,17 +104,17 @@ public interface TokenRead\n      * Returns the number of labels in the database\n      * @return the number of labels in the database\n      */\n-    int labelCount( );\n+    int labelCount();\n \n     /**\n      * Returns the number of properties in the database\n      * @return the number of properties in the database\n      */\n-    int propertyKeyCount( );\n+    int propertyKeyCount();\n \n     /**\n      * Returns the number of relationship types in the database\n      * @return the number of relationship types in the database\n      */\n     int relationshipTypeCount( );\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}