{
    "project_name": "IQSS-dataverse",
    "error_id": "66",
    "information": {
        "errors": [
            {
                "line": "332",
                "column": "9",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": " \n        for(URL url: urls){\n        \tSystem.out.println(url.getFile());\n        }\n    }\n    ",
    "results": [
        {
            "tool": "styler",
            "errors": null,
            "diff": null
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/66/Pager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/66/Pager.java\nindex 4bf13e04284..250ee2a0232 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/errored/1/66/Pager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/IQSS-dataverse/intellij/66/Pager.java\n@@ -3,6 +3,7 @@\n  * To change this template file, choose Tools | Templates\n  * and open the template in the editor.\n  */\n+\n package edu.harvard.iq.dataverse.mydata;\n \n import edu.harvard.iq.dataverse.search.SearchConstants;\n@@ -20,466 +21,476 @@ import javax.json.JsonArrayBuilder;\n import javax.json.JsonObjectBuilder;\n \n /**\n- *\n  * @author rmp553\n  */\n public class Pager {\n-    \n-    public final int NUM_VISIBLE_PAGES_BUTTONS = 5;\n-    public int PAGE_BUTTONS_TO_SHOW = 5;\n-    \n-    /* inputs */\n-    public int numResults;\n-    public String numResultsString;\n-    public int docsPerPage = SearchConstants.NUM_SOLR_DOCS_TO_RETRIEVE;\n-    public int selectedPageNumber = 1;\n-\n-    /* calculated */\n-    public int pageCount = 0;\n-    public int[] pageNumberList = null;\n-\n-    public int previousPageNumber = 0;\n-    public int nextPageNumber = 0;\n-    \n-    public int startCardNumber = 0;\n-    public int endCardNumber = 0;\n-    \n-    public String startCardNumberString;\n-    public String endCardNumberString;\n-\n-    public int remainingCards = 0;\n-    public int numberNextResults =0;\n-    \n-    public Pager(int numResults, int docsPerPage, int selectedPageNumber) {\n-        \n-        if (numResults < 0){\n-            throw new IllegalArgumentException(\"numResults must be 0 or higher\");\n-        }\n-        if (docsPerPage < 1){\n-            throw new IllegalArgumentException(\"docsPerPage must be 1 or higher\");\n-        }\n-        if (selectedPageNumber < 1){\n-            throw new IllegalArgumentException(\"selectedPageNumber must be 1 or higher\");\n-        }      \n-        this.numResults = numResults;\n-        this.docsPerPage = docsPerPage;\n-        this.selectedPageNumber = selectedPageNumber;\n-        makePageStats();\n-    }\n \n-    private void makePageStats(){\n-        \n-        if (numResults == 0){\n-            this.selectedPageNumber = 0;\n-            return;\n-        }\n-        \n-       // page count\n-        this.pageCount = numResults / docsPerPage;\n-        if ((this.numResults % this.docsPerPage) > 0){\n-            this.pageCount++;\n-        }\n-    \n-        // Sanity check for the selected page\n-        if (this.selectedPageNumber > this.pageCount){\n-            this.selectedPageNumber = 1;\n-        }\n-    \n-        // page number list\n-        /*this.pageNumberList = new int[pageCount];\n-            for(int i=0; i<this.pageCount; i++){\n-               this.pageNumberList[i] = i + 1;\n-        }*/\n-        makePageNumberList();\n-\n-        // prev/next page numbers\n-        this.previousPageNumber =  max(this.selectedPageNumber-1, 1); // must be at least 1\n-        this.nextPageNumber =  min(this.selectedPageNumber+1, this.pageCount); // must be at least 1\n-        this.nextPageNumber = max(this.nextPageNumber, 1);\n-        \n-        // start/end card numbers\n-        this.startCardNumber =  (this.docsPerPage * (this.selectedPageNumber - 1)) + 1;\n-        if (this.numResults == 0){\n-            this.endCardNumber = 0;\n-        }else{\n-            this.endCardNumber = min(this.startCardNumber + (this.docsPerPage-1), this.numResults );\n-        }\n-        \n-        this.remainingCards = this.numResults - this.endCardNumber;\n-        this.remainingCards = max(this.remainingCards, 0);\n-        \n-        if (this.remainingCards > 0){\n-            if (this.remainingCards < this.docsPerPage){\n-                this.numberNextResults = this.remainingCards;\n-            }else{\n-                this.numberNextResults = this.docsPerPage;\n-            }\n-        }        \n-    }\n-    \n-    \n-    public boolean isPagerNecessary(){\n-        \n-        if (this.pageCount > 1){\n-            return true;\n-        }\n-        return false;\n-    }\n-    \n-    public boolean hasPreviousPageNumber(){\n-        \n-        return this.selectedPageNumber > 1;\n+  public final int NUM_VISIBLE_PAGES_BUTTONS = 5;\n+  public int PAGE_BUTTONS_TO_SHOW = 5;\n+\n+  /* inputs */\n+  public int numResults;\n+  public String numResultsString;\n+  public int docsPerPage = SearchConstants.NUM_SOLR_DOCS_TO_RETRIEVE;\n+  public int selectedPageNumber = 1;\n+\n+  /* calculated */\n+  public int pageCount = 0;\n+  public int[] pageNumberList = null;\n+\n+  public int previousPageNumber = 0;\n+  public int nextPageNumber = 0;\n+\n+  public int startCardNumber = 0;\n+  public int endCardNumber = 0;\n+\n+  public String startCardNumberString;\n+  public String endCardNumberString;\n+\n+  public int remainingCards = 0;\n+  public int numberNextResults = 0;\n+\n+  public Pager(int numResults, int docsPerPage, int selectedPageNumber) {\n+\n+    if (numResults < 0) {\n+      throw new IllegalArgumentException(\"numResults must be 0 or higher\");\n     }\n-    \n-    public boolean hasNextPageNumber(){\n-        if (this.pageCount > 1){\n-            if (selectedPageNumber < this.pageCount){\n-                return true;\n-            }\n-        }\n-        return false;\n+    if (docsPerPage < 1) {\n+      throw new IllegalArgumentException(\"docsPerPage must be 1 or higher\");\n     }\n-    \n-    \n-    /**\n-     * get numResults\n-     * @return \n-     */\n-    public int getNumResults(){\n-        return this.numResults;\n+    if (selectedPageNumber < 1) {\n+      throw new IllegalArgumentException(\"selectedPageNumber must be 1 or higher\");\n     }\n-    \n+    this.numResults = numResults;\n+    this.docsPerPage = docsPerPage;\n+    this.selectedPageNumber = selectedPageNumber;\n+    makePageStats();\n+  }\n \n-    /**\n-     * @param numResults\n-     */\n-    public void setNumResults(int numResults){\n-        this.numResults = numResults;\n-    }\n-    \n-\n-    /**\n-     * get docsPerPage\n-     * @return \n-     */\n-    public int getDocsPerPage(){\n-        return this.docsPerPage;\n-    }\n-    \n+  private void makePageStats() {\n \n-    /**\n-     * @param docsPerPage\n-     */\n-    public void setDocsPerPage(int docsPerPage){\n-        this.docsPerPage = docsPerPage;\n-    }\n-    \n-\n-    /**\n-     * get selectedPageNumber\n-     * @return \n-     */\n-    public int getSelectedPageNumber(){\n-        return this.selectedPageNumber;\n+    if (numResults == 0) {\n+      this.selectedPageNumber = 0;\n+      return;\n     }\n-    \n \n-    /**\n-     * @param selectedPageNumber\n-     */\n-    public void setSelectedPageNumber(int selectedPageNumber){\n-        this.selectedPageNumber = selectedPageNumber;\n-    }\n-    \n-\n-    /**\n-     * get pageCount\n-     * @return \n-     */\n-    public int getPageCount(){\n-        return this.pageCount;\n+    // page count\n+    this.pageCount = numResults / docsPerPage;\n+    if ((this.numResults % this.docsPerPage) > 0) {\n+      this.pageCount++;\n     }\n-    \n \n-    /**\n-     * @param pageCount\n-     */\n-    public void setPageCount(int pageCount){\n-        this.pageCount = pageCount;\n-    }\n-    \n-    /**\n-     * get getPageNumberListAsStringList\n-     * @return \n-     */\n-    public List<String> getPageNumberListAsStringList(){\n-        List<String> newList = new ArrayList<String>(pageNumberList.length);\n-        for (int pgNum : pageNumberList) { \n-          newList.add(String.valueOf(pgNum)); \n-        }\n-        return newList;\n+    // Sanity check for the selected page\n+    if (this.selectedPageNumber > this.pageCount) {\n+      this.selectedPageNumber = 1;\n     }\n \n-    /**\n-     * get pageNumberList\n-     * @return \n-     */\n-    public int[] getPageNumberList(){\n-        return this.pageNumberList;\n-    }\n-    \n-    public Integer[] getPageListAsIntegerList(){\n+    // page number list\n+        /*this.pageNumberList = new int[pageCount];\n+            for(int i=0; i<this.pageCount; i++){\n+               this.pageNumberList[i] = i + 1;\n+        }*/\n+    makePageNumberList();\n \n-        if (pageNumberList == null){\n-            return null;\n-        }\n-        \n-        // source: https://stackoverflow.com/questions/880581/how-to-convert-int-to-integer-in-java            \n-        return Arrays.stream(pageNumberList).boxed().toArray( Integer[]::new );\n-        \n+    // prev/next page numbers\n+    this.previousPageNumber = max(this.selectedPageNumber - 1, 1); // must be at least 1\n+    this.nextPageNumber = min(this.selectedPageNumber + 1, this.pageCount); // must be at least 1\n+    this.nextPageNumber = max(this.nextPageNumber, 1);\n \n+    // start/end card numbers\n+    this.startCardNumber = (this.docsPerPage * (this.selectedPageNumber - 1)) + 1;\n+    if (this.numResults == 0) {\n+      this.endCardNumber = 0;\n+    } else {\n+      this.endCardNumber = min(this.startCardNumber + (this.docsPerPage - 1), this.numResults);\n     }\n \n-    /**\n-     * @param pageNumberList\n-     */\n-    public void setPageNumberList(int[] pageNumberList){\n-        this.pageNumberList = pageNumberList;\n-    }\n-    \n-\n-    /**\n-     * get previousPageNumber\n-     * @return \n-     */\n-    public int getPreviousPageNumber(){\n-        return this.previousPageNumber;\n-    }\n-    \n+    this.remainingCards = this.numResults - this.endCardNumber;\n+    this.remainingCards = max(this.remainingCards, 0);\n \n-    /**\n-     * @param previousPageNumber\n-     */\n-    public void setPreviousPageNumber(int previousPageNumber){\n-        this.previousPageNumber = previousPageNumber;\n+    if (this.remainingCards > 0) {\n+      if (this.remainingCards < this.docsPerPage) {\n+        this.numberNextResults = this.remainingCards;\n+      } else {\n+        this.numberNextResults = this.docsPerPage;\n+      }\n     }\n-    \n-\n-    /**\n-     * get nextPageNumber\n-     * @return \n-     */\n-    public int getNextPageNumber(){\n-        return this.nextPageNumber;\n-    }\n-    \n+  }\n \n-    /**\n-     * @param nextPageNumber\n-     */\n-    public void setNextPageNumber(int nextPageNumber){\n-        this.nextPageNumber = nextPageNumber;\n-    }\n-    \n-\n-    /**\n-     * get startCardNumber\n-     * @return \n-     */\n-    public int getStartCardNumber(){\n-        return this.startCardNumber;\n-    }\n-    \n-    public String getStartCardNumberString(){\n-        \n-        return this.addCommasToNumber(startCardNumber);\n \n-    }\n-    /**\n-     * @param startCardNumber\n-     */\n-    public void setStartCardNumber(int startCardNumber){\n-        this.startCardNumber = startCardNumber;\n-    }\n-    \n-\n-    /**\n-     * get endCardNumber\n-     * @return \n-     */\n-    public int getEndCardNumber(){\n-        return this.endCardNumber;\n-    }\n-    \n-    public String getEndCardNumberString(){\n-        \n-        return this.addCommasToNumber(endCardNumber);\n+  public boolean isPagerNecessary() {\n+\n+    if (this.pageCount > 1) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  public boolean hasPreviousPageNumber() {\n+\n+    return this.selectedPageNumber > 1;\n+  }\n+\n+  public boolean hasNextPageNumber() {\n+    if (this.pageCount > 1) {\n+      if (selectedPageNumber < this.pageCount) {\n+        return true;\n+      }\n+    }\n+    return false;\n+  }\n+\n \n-    }\n-    /**\n-     * @param endCardNumber\n-     */\n-    public void setEndCardNumber(int endCardNumber){\n-        this.endCardNumber = endCardNumber;\n-    }\n+  /**\n+   * get numResults\n+   *\n+   * @return\n+   */\n+  public int getNumResults() {\n+    return this.numResults;\n+  }\n \n-    public void showClasspaths(){\n-        ClassLoader cl = ClassLoader.getSystemClassLoader();\n- \n-        URL[] urls = ((URLClassLoader)cl).getURLs();\n- \n-        for(URL url: urls){\n-        \tSystem.out.println(url.getFile());\n-        }\n-    }\n-    \n-    public String asJSONString(){\n-        return this.asJsonObjectBuilder().build().toString();\n-    }\n-    \n-    \n-    public String addCommasToNumber(int count){\n-        \n-        return NumberFormat.getInstance().format(count);\n-    }\n-    \n-    \n-    /** \n-     * Originally used for mydata. \n-     * \n-     * Variables are named using the idea of cards--as in Dataverse cards,\n-     * Dataset cards, etc. on the homepage\n-     * \n-     * @return \n-     */\n-    public JsonObjectBuilder asJsonObjectBuilderUsingCardTerms(){\n-    \n-        return asJsonObjectBuilderCore(true);\n+\n+  /**\n+   * @param numResults\n+   */\n+  public void setNumResults(int numResults) {\n+    this.numResults = numResults;\n+  }\n+\n+\n+  /**\n+   * get docsPerPage\n+   *\n+   * @return\n+   */\n+  public int getDocsPerPage() {\n+    return this.docsPerPage;\n+  }\n+\n+\n+  /**\n+   * @param docsPerPage\n+   */\n+  public void setDocsPerPage(int docsPerPage) {\n+    this.docsPerPage = docsPerPage;\n+  }\n+\n+\n+  /**\n+   * get selectedPageNumber\n+   *\n+   * @return\n+   */\n+  public int getSelectedPageNumber() {\n+    return this.selectedPageNumber;\n+  }\n+\n+\n+  /**\n+   * @param selectedPageNumber\n+   */\n+  public void setSelectedPageNumber(int selectedPageNumber) {\n+    this.selectedPageNumber = selectedPageNumber;\n+  }\n+\n+\n+  /**\n+   * get pageCount\n+   *\n+   * @return\n+   */\n+  public int getPageCount() {\n+    return this.pageCount;\n+  }\n+\n+\n+  /**\n+   * @param pageCount\n+   */\n+  public void setPageCount(int pageCount) {\n+    this.pageCount = pageCount;\n+  }\n+\n+  /**\n+   * get getPageNumberListAsStringList\n+   *\n+   * @return\n+   */\n+  public List<String> getPageNumberListAsStringList() {\n+    List<String> newList = new ArrayList<String>(pageNumberList.length);\n+    for (int pgNum : pageNumberList) {\n+      newList.add(String.valueOf(pgNum));\n+    }\n+    return newList;\n+  }\n+\n+  /**\n+   * get pageNumberList\n+   *\n+   * @return\n+   */\n+  public int[] getPageNumberList() {\n+    return this.pageNumberList;\n+  }\n+\n+  public Integer[] getPageListAsIntegerList() {\n+\n+    if (pageNumberList == null) {\n+      return null;\n+    }\n+\n+    // source: https://stackoverflow.com/questions/880581/how-to-convert-int-to-integer-in-java\n+    return Arrays.stream(pageNumberList).boxed().toArray(Integer[]::new);\n+\n+\n+  }\n+\n+  /**\n+   * @param pageNumberList\n+   */\n+  public void setPageNumberList(int[] pageNumberList) {\n+    this.pageNumberList = pageNumberList;\n+  }\n+\n+\n+  /**\n+   * get previousPageNumber\n+   *\n+   * @return\n+   */\n+  public int getPreviousPageNumber() {\n+    return this.previousPageNumber;\n+  }\n+\n+\n+  /**\n+   * @param previousPageNumber\n+   */\n+  public void setPreviousPageNumber(int previousPageNumber) {\n+    this.previousPageNumber = previousPageNumber;\n+  }\n+\n+\n+  /**\n+   * get nextPageNumber\n+   *\n+   * @return\n+   */\n+  public int getNextPageNumber() {\n+    return this.nextPageNumber;\n+  }\n+\n+\n+  /**\n+   * @param nextPageNumber\n+   */\n+  public void setNextPageNumber(int nextPageNumber) {\n+    this.nextPageNumber = nextPageNumber;\n+  }\n+\n+\n+  /**\n+   * get startCardNumber\n+   *\n+   * @return\n+   */\n+  public int getStartCardNumber() {\n+    return this.startCardNumber;\n+  }\n+\n+  public String getStartCardNumberString() {\n+\n+    return this.addCommasToNumber(startCardNumber);\n+\n+  }\n+\n+  /**\n+   * @param startCardNumber\n+   */\n+  public void setStartCardNumber(int startCardNumber) {\n+    this.startCardNumber = startCardNumber;\n+  }\n+\n+\n+  /**\n+   * get endCardNumber\n+   *\n+   * @return\n+   */\n+  public int getEndCardNumber() {\n+    return this.endCardNumber;\n+  }\n+\n+  public String getEndCardNumberString() {\n+\n+    return this.addCommasToNumber(endCardNumber);\n+\n+  }\n+\n+  /**\n+   * @param endCardNumber\n+   */\n+  public void setEndCardNumber(int endCardNumber) {\n+    this.endCardNumber = endCardNumber;\n+  }\n+\n+  public void showClasspaths() {\n+    ClassLoader cl = ClassLoader.getSystemClassLoader();\n+\n+    URL[] urls = ((URLClassLoader) cl).getURLs();\n+\n+    for (URL url : urls) {\n+      System.out.println(url.getFile());\n     }\n+  }\n+\n+  public String asJSONString() {\n+    return this.asJsonObjectBuilder().build().toString();\n+  }\n+\n+\n+  public String addCommasToNumber(int count) {\n+\n+    return NumberFormat.getInstance().format(count);\n+  }\n+\n+\n+  /**\n+   * Originally used for mydata.\n+   * <p>\n+   * Variables are named using the idea of cards--as in Dataverse cards,\n+   * Dataset cards, etc. on the homepage\n+   *\n+   * @return\n+   */\n+  public JsonObjectBuilder asJsonObjectBuilderUsingCardTerms() {\n+\n+    return asJsonObjectBuilderCore(true);\n+  }\n+\n+  /**\n+   * Variables are named using the idea of number of results\n+   *\n+   * @return\n+   */\n+  public JsonObjectBuilder asJsonObjectBuilder() {\n+\n+    return asJsonObjectBuilderCore(false);\n+  }\n+\n+\n+  private JsonObjectBuilder asJsonObjectBuilderCore(boolean useCardTerms) {\n+\n+    JsonObjectBuilder jsonPageInfo = Json.createObjectBuilder();\n+\n+\n+    jsonPageInfo.add(\"isNecessary\", this.isPagerNecessary())\n+      .add(\"numResults\", this.numResults)\n+      .add(\"numResultsString\", this.addCommasToNumber(numResults))\n+      .add(\"docsPerPage\", this.docsPerPage)\n+      .add(\"selectedPageNumber\", this.selectedPageNumber)\n+      .add(\"pageCount\", this.pageCount)\n+      .add(\"hasPreviousPageNumber\", this.hasPreviousPageNumber())\n+      .add(\"previousPageNumber\", this.previousPageNumber)\n+      .add(\"hasNextPageNumber\", this.hasNextPageNumber())\n+      .add(\"nextPageNumber\", this.nextPageNumber);\n+\n+    if (useCardTerms) {\n+      jsonPageInfo.add(\"startCardNumber\", this.startCardNumber)\n+        .add(\"endCardNumber\", this.endCardNumber)\n+        .add(\"startCardNumberString\", this.addCommasToNumber(this.startCardNumber))\n+        .add(\"endCardNumberString\", this.addCommasToNumber(this.endCardNumber))\n+        .add(\"remainingCards\", this.remainingCards);\n+    } else {\n+      jsonPageInfo.add(\"startResultNumber\", this.startCardNumber)\n+        .add(\"endResultNumber\", this.endCardNumber)\n+        .add(\"startResultNumberString\", this.addCommasToNumber(this.startCardNumber))\n+        .add(\"endResultNumberString\", this.addCommasToNumber(this.endCardNumber))\n+        .add(\"remainingResults\", this.remainingCards);\n \n-    /** \n-     * \n-     * Variables are named using the idea of number of results\n-     * \n-     * @return \n-     */\n-    public JsonObjectBuilder asJsonObjectBuilder(){\n-    \n-        return asJsonObjectBuilderCore(false);\n     }\n \n-    \n-    private JsonObjectBuilder asJsonObjectBuilderCore(boolean useCardTerms){\n-        \n-        JsonObjectBuilder jsonPageInfo = Json.createObjectBuilder();\n-                \n-       \n-        jsonPageInfo.add(\"isNecessary\", this.isPagerNecessary())\n-                    .add(\"numResults\", this.numResults)\n-                    .add(\"numResultsString\", this.addCommasToNumber(numResults))\n-                    .add(\"docsPerPage\", this.docsPerPage)\n-                    .add(\"selectedPageNumber\", this.selectedPageNumber)\n-                    .add(\"pageCount\", this.pageCount)\n-                    .add(\"hasPreviousPageNumber\", this.hasPreviousPageNumber())\n-                    .add(\"previousPageNumber\", this.previousPageNumber)\n-                    .add(\"hasNextPageNumber\", this.hasNextPageNumber())\n-                    .add(\"nextPageNumber\", this.nextPageNumber);\n-        \n-        if (useCardTerms){\n-            jsonPageInfo.add(\"startCardNumber\", this.startCardNumber)\n-                    .add(\"endCardNumber\", this.endCardNumber)\n-                    .add(\"startCardNumberString\", this.addCommasToNumber(this.startCardNumber))\n-                    .add(\"endCardNumberString\", this.addCommasToNumber(this.endCardNumber))\n-                    .add(\"remainingCards\", this.remainingCards);\n-        }else{\n-            jsonPageInfo.add(\"startResultNumber\", this.startCardNumber)\n-                    .add(\"endResultNumber\", this.endCardNumber)\n-                    .add(\"startResultNumberString\", this.addCommasToNumber(this.startCardNumber))\n-                    .add(\"endResultNumberString\", this.addCommasToNumber(this.endCardNumber))\n-                    .add(\"remainingResults\", this.remainingCards);\n-            \n-        }\n-        \n-        jsonPageInfo.add(\"numberNextResults\", this.numberNextResults);\n-        \n-        // --------------------\n-        // pageNumberList\n-        // --------------------\n-        JsonArrayBuilder jsonPageNumberArrayBuilder = Json.createArrayBuilder();\n-        if (this.pageNumberList != null) {\n-            for (int pg : this.pageNumberList) {\n-                jsonPageNumberArrayBuilder.add(pg);\n-            }\n-            jsonPageInfo.add(\"pageNumberList\", jsonPageNumberArrayBuilder);\n-        }\n-\n-        // --------------------\n-   \n-        return jsonPageInfo;\n-             \n+    jsonPageInfo.add(\"numberNextResults\", this.numberNextResults);\n+\n+    // --------------------\n+    // pageNumberList\n+    // --------------------\n+    JsonArrayBuilder jsonPageNumberArrayBuilder = Json.createArrayBuilder();\n+    if (this.pageNumberList != null) {\n+      for (int pg : this.pageNumberList) {\n+        jsonPageNumberArrayBuilder.add(pg);\n+      }\n+      jsonPageInfo.add(\"pageNumberList\", jsonPageNumberArrayBuilder);\n     }\n-    \n-    private void makePageNumberList(){\n-        if (this.numResults <  1){\n-            return;\n-        }\n-                        \n-        // In this case, there are 1 to 5 pages\n-        //\n-        if ((this.pageCount <= NUM_VISIBLE_PAGES_BUTTONS)||(this.selectedPageNumber <= 3)){\n-            \n-            int numButtons = min(this.pageCount, NUM_VISIBLE_PAGES_BUTTONS);\n-            this.pageNumberList = new int[numButtons];\n-        \n-            for(int i=0; i < numButtons; i++){\n-                this.pageNumberList[i] = i + 1;\n-            }\n-            return;\n-        }\n-        \n-        // In this case, there are more than 5 pages\n-        //        \n-        // Example:  page 7 of 8\n-        //\n-        int defaultButtonsToRight = 2;\n-        this.pageNumberList = new int[NUM_VISIBLE_PAGES_BUTTONS];\n-\n-        // 8 - 7 = 1\n-        int buttonsToRight = this.pageCount - this.selectedPageNumber;\n-        if (buttonsToRight < 0){\n-            throw new IllegalStateException(\"Page count cannot be less than the selected page\");\n-        }\n-        int startPage;\n-        if (buttonsToRight >= defaultButtonsToRight){\n-            startPage = this.selectedPageNumber - defaultButtonsToRight;\n-        }else{\n-            // 7 -2 -1 = 4 - start on page 4\n-            startPage = this.selectedPageNumber - (defaultButtonsToRight-buttonsToRight) - defaultButtonsToRight;           \n-        }\n-        for(int i=0; i< NUM_VISIBLE_PAGES_BUTTONS; i++){\n-            this.pageNumberList[i] = i + startPage;\n-        }        \n+\n+    // --------------------\n+\n+    return jsonPageInfo;\n+\n+  }\n+\n+  private void makePageNumberList() {\n+    if (this.numResults < 1) {\n+      return;\n     }\n-    \n-    public String getNumResultsString(){\n-        \n-        return this.addCommasToNumber(numResults);\n \n+    // In this case, there are 1 to 5 pages\n+    //\n+    if ((this.pageCount <= NUM_VISIBLE_PAGES_BUTTONS) || (this.selectedPageNumber <= 3)) {\n+\n+      int numButtons = min(this.pageCount, NUM_VISIBLE_PAGES_BUTTONS);\n+      this.pageNumberList = new int[numButtons];\n+\n+      for (int i = 0; i < numButtons; i++) {\n+        this.pageNumberList[i] = i + 1;\n+      }\n+      return;\n     }\n-    \n-    public static void main(String[] args) throws IOException {\n-       \n-        Pager pager = new Pager(100, 10, 1);\n-               \n+\n+    // In this case, there are more than 5 pages\n+    //\n+    // Example:  page 7 of 8\n+    //\n+    int defaultButtonsToRight = 2;\n+    this.pageNumberList = new int[NUM_VISIBLE_PAGES_BUTTONS];\n+\n+    // 8 - 7 = 1\n+    int buttonsToRight = this.pageCount - this.selectedPageNumber;\n+    if (buttonsToRight < 0) {\n+      throw new IllegalStateException(\"Page count cannot be less than the selected page\");\n     }\n-    \n-    private void msg(String s){\n-        //System.out.println(s);\n+    int startPage;\n+    if (buttonsToRight >= defaultButtonsToRight) {\n+      startPage = this.selectedPageNumber - defaultButtonsToRight;\n+    } else {\n+      // 7 -2 -1 = 4 - start on page 4\n+      startPage = this.selectedPageNumber - (defaultButtonsToRight - buttonsToRight) - defaultButtonsToRight;\n     }\n-    \n-    private void msgt(String s){\n-        msg(\"-------------------------------\");\n-        msg(s);\n-        msg(\"-------------------------------\");\n+    for (int i = 0; i < NUM_VISIBLE_PAGES_BUTTONS; i++) {\n+      this.pageNumberList[i] = i + startPage;\n     }\n+  }\n+\n+  public String getNumResultsString() {\n+\n+    return this.addCommasToNumber(numResults);\n+\n+  }\n+\n+  public static void main(String[] args) throws IOException {\n+\n+    Pager pager = new Pager(100, 10, 1);\n+\n+  }\n+\n+  private void msg(String s) {\n+    //System.out.println(s);\n+  }\n+\n+  private void msgt(String s) {\n+    msg(\"-------------------------------\");\n+    msg(s);\n+    msg(\"-------------------------------\");\n+  }\n } \n\\ No newline at end of file\n",
            "diff_size": 710
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}