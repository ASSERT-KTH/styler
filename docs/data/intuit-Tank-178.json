{
    "project_name": "intuit-Tank",
    "error_id": "178",
    "information": {
        "errors": [
            {
                "line": "27",
                "column": "1",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "public interface FoldManager {\n\n\t/**\n\t * Property fired when folds have been updated.\n\t */\n\tString PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/178/FoldManager.java\nindex 746f3e17e17..6f7138446f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/178/FoldManager.java\n@@ -24,10 +24,10 @@ import java.util.List;\n  */\n public interface FoldManager {\n \n-\t/**\n+    /**\n \t * Property fired when folds have been updated.\n \t */\n-\tString PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n+ String PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n \n \n \t/**\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/178/FoldManager.java\nindex 746f3e17e17..8e9b37b35b2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/178/FoldManager.java\n@@ -6,6 +6,7 @@\n  * This library is distributed under a modified BSD license.  See the included\n  * LICENSE file for details.\n  */\n+\n package org.fife.ui.rsyntaxtextarea.folding;\n \n import java.beans.PropertyChangeListener;\n@@ -14,7 +15,7 @@ import java.util.List;\n \n /**\n  * Manages code folding in an instance of RSyntaxTextArea.<p>\n- *\n+ * <p>\n  * By default, {@code RSyntaxTextArea} uses a {@link DefaultFoldManager}, which\n  * is sufficient for almost all applications.\n  *\n@@ -24,219 +25,219 @@ import java.util.List;\n  */\n public interface FoldManager {\n \n-\t/**\n-\t * Property fired when folds have been updated.\n-\t */\n-\tString PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n-\n-\n-\t/**\n-\t * Adds a property change listener to this fold manager.\n-\t *\n-\t * @param l The new listener.\n-\t * @see #removePropertyChangeListener(PropertyChangeListener)\n-\t */\n-\tvoid addPropertyChangeListener(PropertyChangeListener l);\n-\n-\n-\t/**\n-\t * Removes all folds.\n-\t */\n-\tvoid clear();\n-\n-\n-\t/**\n-\t * Ensures that the specified offset is not hidden in a collapsed fold.\n-\t * Any folds containing this offset that are collapsed will be expanded.\n-\t *\n-\t * @param offs The offset.\n-\t * @return Whether any folds had to be opened.\n-\t * @see #getDeepestFoldContaining(int)\n-\t */\n-\tboolean ensureOffsetNotInClosedFold(int offs);\n-\n-\n-\t/**\n-\t * Returns the \"deepest\" nested fold containing the specified offset.\n-\t *\n-\t * @param offs The offset.\n-\t * @return The deepest fold containing the offset, or <code>null</code> if\n-\t *         no fold contains the offset.\n-\t */\n-\tFold getDeepestFoldContaining(int offs);\n-\n-\n-\t/**\n-\t * Returns the \"deepest\" open fold containing the specified offset.\n-\t *\n-\t * @param offs The offset.\n-\t * @return The fold, or <code>null</code> if no open fold contains the\n-\t *         offset.\n-\t */\n-\tFold getDeepestOpenFoldContaining(int offs);\n-\n-\n-\t/**\n-\t * Returns a specific top-level fold, which may have child folds.\n-\t *\n-\t * @param index The index of the fold.\n-\t * @return The fold.\n-\t * @see #getFoldCount()\n-\t */\n-\tFold getFold(int index);\n-\n-\n-\t/**\n-\t * Returns the number of top-level folds.\n-\t *\n-\t * @return The number of top-level folds.\n-\t * @see #getFold(int)\n-\t */\n-\tint getFoldCount();\n-\n-\n-\t/**\n-\t * Returns the fold region that starts at the specified line.\n-\t *\n-\t * @param line The line number.\n-\t * @return The fold, or <code>null</code> if the line is not the start\n-\t *         of a fold region.\n-\t * @see #isFoldStartLine(int)\n-\t */\n-\tFold getFoldForLine(int line);\n-\n-\n-\t/**\n-\t * Returns the total number of hidden (folded) lines.\n-\t *\n-\t * @return The total number of hidden (folded) lines.\n-\t * @see #getHiddenLineCountAbove(int)\n-\t */\n-\tint getHiddenLineCount();\n-\n-\n-\t/**\n-\t * Returns the number of lines \"hidden\" by collapsed folds above the\n-\t * specified line.\n-\t *\n-\t * @param line The line.  This is the line number for a logical line.\n-\t *        For the line number of a physical line (i.e. visible, not folded),\n-\t *        use <code>getHiddenLineCountAbove(int, true)</code>.\n-\t * @return The number of lines hidden in folds above <code>line</code>.\n-\t * @see #getHiddenLineCountAbove(int, boolean)\n-\t */\n-\tint getHiddenLineCountAbove(int line);\n-\n-\n-\t/**\n-\t * Returns the number of lines \"hidden\" by collapsed folds above the\n-\t * specified line.\n-\t *\n-\t * @param line The line.\n-\t * @param physical Whether <code>line</code> is the number of a physical\n-\t *        line (i.e. visible, not code-folded), or a logical one (i.e. any\n-\t *        line from the model).  If <code>line</code> was determined by a\n-\t *        raw line calculation (i.e. <code>(visibleTopY / lineHeight)</code>),\n-\t *        this value should be <code>true</code>.  It should be\n-\t *        <code>false</code> when it was calculated from an offset in the\n-\t *        document (for example).\n-\t * @return The number of lines hidden in folds above <code>line</code>.\n-\t */\n-\tint getHiddenLineCountAbove(int line, boolean physical);\n-\n-\n-\t/**\n-\t * Returns the last visible line in the text area, taking into account\n-\t * folds.\n-\t *\n-\t * @return The last visible line.\n-\t */\n-\tint getLastVisibleLine();\n-\n-\n-\tint getVisibleLineAbove(int line);\n-\n-\n-\tint getVisibleLineBelow(int line);\n-\n-\n-    /**\n-\t * Returns whether code folding is enabled.  Note that only certain\n-\t * languages support code folding; those that do not will ignore this\n-\t * property.\n-\t *\n-\t * @return Whether code folding is enabled.\n-\t * @see #setCodeFoldingEnabled(boolean)\n-\t */\n-\tboolean isCodeFoldingEnabled();\n-\n-\n-\t/**\n-\t * Returns <code>true</code> if and only if code folding is enabled for\n-\t * this text area, AND folding is supported for the language it is editing.\n-\t * Whether or not folding is supported for a language depends on whether\n-\t * a fold parser is registered for that language with the\n-\t * <code>FoldParserManager</code>.\n-\t *\n-\t * @return Whether folding is supported and enabled for this text area.\n-\t * @see FoldParserManager\n-\t */\n-\tboolean isCodeFoldingSupportedAndEnabled();\n-\n-\n-\t/**\n-\t * Returns whether the specified line contains the start of a fold region.\n-\t *\n-\t * @param line The line.\n-\t * @return Whether the line contains the start of a fold region.\n-\t * @see #getFoldForLine(int)\n-\t */\n-\tboolean isFoldStartLine(int line);\n-\n-\n-\t/**\n-\t * Returns whether a line is hidden in a collapsed fold.\n-\t *\n-\t * @param line The line to check.\n-\t * @return Whether the line is hidden in a collapsed fold.\n-\t */\n-\tboolean isLineHidden(int line);\n-\n-\n-\t/**\n-\t * Removes a property change listener from this fold manager.\n-\t *\n-\t * @param l The listener to remove.\n-\t * @see #addPropertyChangeListener(PropertyChangeListener)\n-\t */\n-\tvoid removePropertyChangeListener(PropertyChangeListener l);\n-\n-\n-\t/**\n-\t * Forces an immediate reparsing for folds, if folding is enabled.  This\n-\t * usually does not need to be called by the programmer, since fold\n-\t * parsing is done automatically by RSTA.\n-\t */\n-\tvoid reparse();\n-\n-\n-\t/**\n-\t * Sets whether code folding is enabled.  Note that only certain\n-\t * languages will support code folding out of the box.  Those languages\n-\t * which do not support folding will ignore this property.\n-\t *\n-\t * @param enabled Whether code folding should be enabled.\n-\t * @see #isCodeFoldingEnabled()\n-\t */\n-\tvoid setCodeFoldingEnabled(boolean enabled);\n-\n-\n-\t/**\n-\t * Sets the folds for this fold manager.\n-\t *\n-\t * @param folds The new folds.  This should not be <code>null</code>.\n-\t */\n-\tvoid setFolds(List<Fold> folds);\n+  /**\n+   * Property fired when folds have been updated.\n+   */\n+  String PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n+\n+\n+  /**\n+   * Adds a property change listener to this fold manager.\n+   *\n+   * @param l The new listener.\n+   * @see #removePropertyChangeListener(PropertyChangeListener)\n+   */\n+  void addPropertyChangeListener(PropertyChangeListener l);\n+\n+\n+  /**\n+   * Removes all folds.\n+   */\n+  void clear();\n+\n+\n+  /**\n+   * Ensures that the specified offset is not hidden in a collapsed fold.\n+   * Any folds containing this offset that are collapsed will be expanded.\n+   *\n+   * @param offs The offset.\n+   * @return Whether any folds had to be opened.\n+   * @see #getDeepestFoldContaining(int)\n+   */\n+  boolean ensureOffsetNotInClosedFold(int offs);\n+\n+\n+  /**\n+   * Returns the \"deepest\" nested fold containing the specified offset.\n+   *\n+   * @param offs The offset.\n+   * @return The deepest fold containing the offset, or <code>null</code> if\n+   * no fold contains the offset.\n+   */\n+  Fold getDeepestFoldContaining(int offs);\n+\n+\n+  /**\n+   * Returns the \"deepest\" open fold containing the specified offset.\n+   *\n+   * @param offs The offset.\n+   * @return The fold, or <code>null</code> if no open fold contains the\n+   * offset.\n+   */\n+  Fold getDeepestOpenFoldContaining(int offs);\n+\n+\n+  /**\n+   * Returns a specific top-level fold, which may have child folds.\n+   *\n+   * @param index The index of the fold.\n+   * @return The fold.\n+   * @see #getFoldCount()\n+   */\n+  Fold getFold(int index);\n+\n+\n+  /**\n+   * Returns the number of top-level folds.\n+   *\n+   * @return The number of top-level folds.\n+   * @see #getFold(int)\n+   */\n+  int getFoldCount();\n+\n+\n+  /**\n+   * Returns the fold region that starts at the specified line.\n+   *\n+   * @param line The line number.\n+   * @return The fold, or <code>null</code> if the line is not the start\n+   * of a fold region.\n+   * @see #isFoldStartLine(int)\n+   */\n+  Fold getFoldForLine(int line);\n+\n+\n+  /**\n+   * Returns the total number of hidden (folded) lines.\n+   *\n+   * @return The total number of hidden (folded) lines.\n+   * @see #getHiddenLineCountAbove(int)\n+   */\n+  int getHiddenLineCount();\n+\n+\n+  /**\n+   * Returns the number of lines \"hidden\" by collapsed folds above the\n+   * specified line.\n+   *\n+   * @param line The line.  This is the line number for a logical line.\n+   *             For the line number of a physical line (i.e. visible, not folded),\n+   *             use <code>getHiddenLineCountAbove(int, true)</code>.\n+   * @return The number of lines hidden in folds above <code>line</code>.\n+   * @see #getHiddenLineCountAbove(int, boolean)\n+   */\n+  int getHiddenLineCountAbove(int line);\n+\n+\n+  /**\n+   * Returns the number of lines \"hidden\" by collapsed folds above the\n+   * specified line.\n+   *\n+   * @param line     The line.\n+   * @param physical Whether <code>line</code> is the number of a physical\n+   *                 line (i.e. visible, not code-folded), or a logical one (i.e. any\n+   *                 line from the model).  If <code>line</code> was determined by a\n+   *                 raw line calculation (i.e. <code>(visibleTopY / lineHeight)</code>),\n+   *                 this value should be <code>true</code>.  It should be\n+   *                 <code>false</code> when it was calculated from an offset in the\n+   *                 document (for example).\n+   * @return The number of lines hidden in folds above <code>line</code>.\n+   */\n+  int getHiddenLineCountAbove(int line, boolean physical);\n+\n+\n+  /**\n+   * Returns the last visible line in the text area, taking into account\n+   * folds.\n+   *\n+   * @return The last visible line.\n+   */\n+  int getLastVisibleLine();\n+\n+\n+  int getVisibleLineAbove(int line);\n+\n+\n+  int getVisibleLineBelow(int line);\n+\n+\n+  /**\n+   * Returns whether code folding is enabled.  Note that only certain\n+   * languages support code folding; those that do not will ignore this\n+   * property.\n+   *\n+   * @return Whether code folding is enabled.\n+   * @see #setCodeFoldingEnabled(boolean)\n+   */\n+  boolean isCodeFoldingEnabled();\n+\n+\n+  /**\n+   * Returns <code>true</code> if and only if code folding is enabled for\n+   * this text area, AND folding is supported for the language it is editing.\n+   * Whether or not folding is supported for a language depends on whether\n+   * a fold parser is registered for that language with the\n+   * <code>FoldParserManager</code>.\n+   *\n+   * @return Whether folding is supported and enabled for this text area.\n+   * @see FoldParserManager\n+   */\n+  boolean isCodeFoldingSupportedAndEnabled();\n+\n+\n+  /**\n+   * Returns whether the specified line contains the start of a fold region.\n+   *\n+   * @param line The line.\n+   * @return Whether the line contains the start of a fold region.\n+   * @see #getFoldForLine(int)\n+   */\n+  boolean isFoldStartLine(int line);\n+\n+\n+  /**\n+   * Returns whether a line is hidden in a collapsed fold.\n+   *\n+   * @param line The line to check.\n+   * @return Whether the line is hidden in a collapsed fold.\n+   */\n+  boolean isLineHidden(int line);\n+\n+\n+  /**\n+   * Removes a property change listener from this fold manager.\n+   *\n+   * @param l The listener to remove.\n+   * @see #addPropertyChangeListener(PropertyChangeListener)\n+   */\n+  void removePropertyChangeListener(PropertyChangeListener l);\n+\n+\n+  /**\n+   * Forces an immediate reparsing for folds, if folding is enabled.  This\n+   * usually does not need to be called by the programmer, since fold\n+   * parsing is done automatically by RSTA.\n+   */\n+  void reparse();\n+\n+\n+  /**\n+   * Sets whether code folding is enabled.  Note that only certain\n+   * languages will support code folding out of the box.  Those languages\n+   * which do not support folding will ignore this property.\n+   *\n+   * @param enabled Whether code folding should be enabled.\n+   * @see #isCodeFoldingEnabled()\n+   */\n+  void setCodeFoldingEnabled(boolean enabled);\n+\n+\n+  /**\n+   * Sets the folds for this fold manager.\n+   *\n+   * @param folds The new folds.  This should not be <code>null</code>.\n+   */\n+  void setFolds(List<Fold> folds);\n \n \n }\n",
            "diff_size": 215
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "27",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/178/FoldManager.java\nindex 746f3e17e17..bdc5e7acb24 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/naturalize/178/FoldManager.java\n@@ -11,7 +11,6 @@ package org.fife.ui.rsyntaxtextarea.folding;\n import java.beans.PropertyChangeListener;\n import java.util.List;\n \n-\n /**\n  * Manages code folding in an instance of RSyntaxTextArea.<p>\n  *\n@@ -24,13 +23,12 @@ import java.util.List;\n  */\n public interface FoldManager {\n \n-\t/**\n+    /**\n \t * Property fired when folds have been updated.\n \t */\n \tString PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n \n-\n-\t/**\n+/**\n \t * Adds a property change listener to this fold manager.\n \t *\n \t * @param l The new listener.\n@@ -38,14 +36,12 @@ public interface FoldManager {\n \t */\n \tvoid addPropertyChangeListener(PropertyChangeListener l);\n \n-\n-\t/**\n+/**\n \t * Removes all folds.\n \t */\n \tvoid clear();\n \n-\n-\t/**\n+/**\n \t * Ensures that the specified offset is not hidden in a collapsed fold.\n \t * Any folds containing this offset that are collapsed will be expanded.\n \t *\n@@ -55,8 +51,7 @@ public interface FoldManager {\n \t */\n \tboolean ensureOffsetNotInClosedFold(int offs);\n \n-\n-\t/**\n+/**\n \t * Returns the \"deepest\" nested fold containing the specified offset.\n \t *\n \t * @param offs The offset.\n@@ -65,8 +60,7 @@ public interface FoldManager {\n \t */\n \tFold getDeepestFoldContaining(int offs);\n \n-\n-\t/**\n+/**\n \t * Returns the \"deepest\" open fold containing the specified offset.\n \t *\n \t * @param offs The offset.\n@@ -75,8 +69,7 @@ public interface FoldManager {\n \t */\n \tFold getDeepestOpenFoldContaining(int offs);\n \n-\n-\t/**\n+/**\n \t * Returns a specific top-level fold, which may have child folds.\n \t *\n \t * @param index The index of the fold.\n@@ -85,8 +78,7 @@ public interface FoldManager {\n \t */\n \tFold getFold(int index);\n \n-\n-\t/**\n+/**\n \t * Returns the number of top-level folds.\n \t *\n \t * @return The number of top-level folds.\n@@ -94,8 +86,7 @@ public interface FoldManager {\n \t */\n \tint getFoldCount();\n \n-\n-\t/**\n+/**\n \t * Returns the fold region that starts at the specified line.\n \t *\n \t * @param line The line number.\n@@ -105,8 +96,7 @@ public interface FoldManager {\n \t */\n \tFold getFoldForLine(int line);\n \n-\n-\t/**\n+/**\n \t * Returns the total number of hidden (folded) lines.\n \t *\n \t * @return The total number of hidden (folded) lines.\n@@ -114,8 +104,7 @@ public interface FoldManager {\n \t */\n \tint getHiddenLineCount();\n \n-\n-\t/**\n+/**\n \t * Returns the number of lines \"hidden\" by collapsed folds above the\n \t * specified line.\n \t *\n@@ -127,8 +116,7 @@ public interface FoldManager {\n \t */\n \tint getHiddenLineCountAbove(int line);\n \n-\n-\t/**\n+/**\n \t * Returns the number of lines \"hidden\" by collapsed folds above the\n \t * specified line.\n \t *\n@@ -144,23 +132,17 @@ public interface FoldManager {\n \t */\n \tint getHiddenLineCountAbove(int line, boolean physical);\n \n-\n-\t/**\n+/**\n \t * Returns the last visible line in the text area, taking into account\n \t * folds.\n \t *\n \t * @return The last visible line.\n \t */\n \tint getLastVisibleLine();\n+int getVisibleLineAbove(int line);\n+int getVisibleLineBelow(int line);\n \n-\n-\tint getVisibleLineAbove(int line);\n-\n-\n-\tint getVisibleLineBelow(int line);\n-\n-\n-    /**\n+/**\n \t * Returns whether code folding is enabled.  Note that only certain\n \t * languages support code folding; those that do not will ignore this\n \t * property.\n@@ -168,10 +150,9 @@ public interface FoldManager {\n \t * @return Whether code folding is enabled.\n \t * @see #setCodeFoldingEnabled(boolean)\n \t */\n-\tboolean isCodeFoldingEnabled();\n+boolean isCodeFoldingEnabled();\n \n-\n-\t/**\n+/**\n \t * Returns <code>true</code> if and only if code folding is enabled for\n \t * this text area, AND folding is supported for the language it is editing.\n \t * Whether or not folding is supported for a language depends on whether\n@@ -183,8 +164,7 @@ public interface FoldManager {\n \t */\n \tboolean isCodeFoldingSupportedAndEnabled();\n \n-\n-\t/**\n+/**\n \t * Returns whether the specified line contains the start of a fold region.\n \t *\n \t * @param line The line.\n@@ -193,8 +173,7 @@ public interface FoldManager {\n \t */\n \tboolean isFoldStartLine(int line);\n \n-\n-\t/**\n+/**\n \t * Returns whether a line is hidden in a collapsed fold.\n \t *\n \t * @param line The line to check.\n@@ -202,8 +181,7 @@ public interface FoldManager {\n \t */\n \tboolean isLineHidden(int line);\n \n-\n-\t/**\n+/**\n \t * Removes a property change listener from this fold manager.\n \t *\n \t * @param l The listener to remove.\n@@ -211,16 +189,14 @@ public interface FoldManager {\n \t */\n \tvoid removePropertyChangeListener(PropertyChangeListener l);\n \n-\n-\t/**\n+/**\n \t * Forces an immediate reparsing for folds, if folding is enabled.  This\n \t * usually does not need to be called by the programmer, since fold\n \t * parsing is done automatically by RSTA.\n \t */\n \tvoid reparse();\n \n-\n-\t/**\n+/**\n \t * Sets whether code folding is enabled.  Note that only certain\n \t * languages will support code folding out of the box.  Those languages\n \t * which do not support folding will ignore this property.\n@@ -230,13 +206,11 @@ public interface FoldManager {\n \t */\n \tvoid setCodeFoldingEnabled(boolean enabled);\n \n-\n-\t/**\n+/**\n \t * Sets the folds for this fold manager.\n \t *\n \t * @param folds The new folds.  This should not be <code>null</code>.\n \t */\n \tvoid setFolds(List<Fold> folds);\n \n-\n-}\n+    }\n\\ No newline at end of file\n",
            "diff_size": 53
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/178/FoldManager.java\nindex 746f3e17e17..8c677945e72 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/178/FoldManager.java\n@@ -8,6 +8,8 @@\n  */\n package org.fife.ui.rsyntaxtextarea.folding;\n \n+\n+\n import java.beans.PropertyChangeListener;\n import java.util.List;\n \n@@ -22,221 +24,242 @@ import java.util.List;\n  * @version 1.0\n  * @see DefaultFoldManager\n  */\n+\n+\n public interface FoldManager {\n \n-\t/**\n-\t * Property fired when folds have been updated.\n-\t */\n-\tString PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n-\n-\n-\t/**\n-\t * Adds a property change listener to this fold manager.\n-\t *\n-\t * @param l The new listener.\n-\t * @see #removePropertyChangeListener(PropertyChangeListener)\n-\t */\n-\tvoid addPropertyChangeListener(PropertyChangeListener l);\n-\n-\n-\t/**\n-\t * Removes all folds.\n-\t */\n-\tvoid clear();\n-\n-\n-\t/**\n-\t * Ensures that the specified offset is not hidden in a collapsed fold.\n-\t * Any folds containing this offset that are collapsed will be expanded.\n-\t *\n-\t * @param offs The offset.\n-\t * @return Whether any folds had to be opened.\n-\t * @see #getDeepestFoldContaining(int)\n-\t */\n-\tboolean ensureOffsetNotInClosedFold(int offs);\n-\n-\n-\t/**\n-\t * Returns the \"deepest\" nested fold containing the specified offset.\n-\t *\n-\t * @param offs The offset.\n-\t * @return The deepest fold containing the offset, or <code>null</code> if\n-\t *         no fold contains the offset.\n-\t */\n-\tFold getDeepestFoldContaining(int offs);\n-\n-\n-\t/**\n-\t * Returns the \"deepest\" open fold containing the specified offset.\n-\t *\n-\t * @param offs The offset.\n-\t * @return The fold, or <code>null</code> if no open fold contains the\n-\t *         offset.\n-\t */\n-\tFold getDeepestOpenFoldContaining(int offs);\n-\n-\n-\t/**\n-\t * Returns a specific top-level fold, which may have child folds.\n-\t *\n-\t * @param index The index of the fold.\n-\t * @return The fold.\n-\t * @see #getFoldCount()\n-\t */\n-\tFold getFold(int index);\n-\n-\n-\t/**\n-\t * Returns the number of top-level folds.\n-\t *\n-\t * @return The number of top-level folds.\n-\t * @see #getFold(int)\n-\t */\n-\tint getFoldCount();\n-\n-\n-\t/**\n-\t * Returns the fold region that starts at the specified line.\n-\t *\n-\t * @param line The line number.\n-\t * @return The fold, or <code>null</code> if the line is not the start\n-\t *         of a fold region.\n-\t * @see #isFoldStartLine(int)\n-\t */\n-\tFold getFoldForLine(int line);\n-\n-\n-\t/**\n-\t * Returns the total number of hidden (folded) lines.\n-\t *\n-\t * @return The total number of hidden (folded) lines.\n-\t * @see #getHiddenLineCountAbove(int)\n-\t */\n-\tint getHiddenLineCount();\n-\n-\n-\t/**\n-\t * Returns the number of lines \"hidden\" by collapsed folds above the\n-\t * specified line.\n-\t *\n-\t * @param line The line.  This is the line number for a logical line.\n-\t *        For the line number of a physical line (i.e. visible, not folded),\n-\t *        use <code>getHiddenLineCountAbove(int, true)</code>.\n-\t * @return The number of lines hidden in folds above <code>line</code>.\n-\t * @see #getHiddenLineCountAbove(int, boolean)\n-\t */\n-\tint getHiddenLineCountAbove(int line);\n-\n-\n-\t/**\n-\t * Returns the number of lines \"hidden\" by collapsed folds above the\n-\t * specified line.\n-\t *\n-\t * @param line The line.\n-\t * @param physical Whether <code>line</code> is the number of a physical\n-\t *        line (i.e. visible, not code-folded), or a logical one (i.e. any\n-\t *        line from the model).  If <code>line</code> was determined by a\n-\t *        raw line calculation (i.e. <code>(visibleTopY / lineHeight)</code>),\n-\t *        this value should be <code>true</code>.  It should be\n-\t *        <code>false</code> when it was calculated from an offset in the\n-\t *        document (for example).\n-\t * @return The number of lines hidden in folds above <code>line</code>.\n-\t */\n-\tint getHiddenLineCountAbove(int line, boolean physical);\n-\n-\n-\t/**\n-\t * Returns the last visible line in the text area, taking into account\n-\t * folds.\n-\t *\n-\t * @return The last visible line.\n-\t */\n-\tint getLastVisibleLine();\n-\n-\n-\tint getVisibleLineAbove(int line);\n-\n-\n-\tint getVisibleLineBelow(int line);\n-\n-\n-    /**\n-\t * Returns whether code folding is enabled.  Note that only certain\n-\t * languages support code folding; those that do not will ignore this\n-\t * property.\n-\t *\n-\t * @return Whether code folding is enabled.\n-\t * @see #setCodeFoldingEnabled(boolean)\n-\t */\n-\tboolean isCodeFoldingEnabled();\n-\n-\n-\t/**\n-\t * Returns <code>true</code> if and only if code folding is enabled for\n-\t * this text area, AND folding is supported for the language it is editing.\n-\t * Whether or not folding is supported for a language depends on whether\n-\t * a fold parser is registered for that language with the\n-\t * <code>FoldParserManager</code>.\n-\t *\n-\t * @return Whether folding is supported and enabled for this text area.\n-\t * @see FoldParserManager\n-\t */\n-\tboolean isCodeFoldingSupportedAndEnabled();\n-\n-\n-\t/**\n-\t * Returns whether the specified line contains the start of a fold region.\n-\t *\n-\t * @param line The line.\n-\t * @return Whether the line contains the start of a fold region.\n-\t * @see #getFoldForLine(int)\n-\t */\n-\tboolean isFoldStartLine(int line);\n-\n-\n-\t/**\n-\t * Returns whether a line is hidden in a collapsed fold.\n-\t *\n-\t * @param line The line to check.\n-\t * @return Whether the line is hidden in a collapsed fold.\n-\t */\n-\tboolean isLineHidden(int line);\n-\n-\n-\t/**\n-\t * Removes a property change listener from this fold manager.\n-\t *\n-\t * @param l The listener to remove.\n-\t * @see #addPropertyChangeListener(PropertyChangeListener)\n-\t */\n-\tvoid removePropertyChangeListener(PropertyChangeListener l);\n-\n-\n-\t/**\n-\t * Forces an immediate reparsing for folds, if folding is enabled.  This\n-\t * usually does not need to be called by the programmer, since fold\n-\t * parsing is done automatically by RSTA.\n-\t */\n-\tvoid reparse();\n-\n-\n-\t/**\n-\t * Sets whether code folding is enabled.  Note that only certain\n-\t * languages will support code folding out of the box.  Those languages\n-\t * which do not support folding will ignore this property.\n-\t *\n-\t * @param enabled Whether code folding should be enabled.\n-\t * @see #isCodeFoldingEnabled()\n-\t */\n-\tvoid setCodeFoldingEnabled(boolean enabled);\n-\n-\n-\t/**\n-\t * Sets the folds for this fold manager.\n-\t *\n-\t * @param folds The new folds.  This should not be <code>null</code>.\n-\t */\n-\tvoid setFolds(List<Fold> folds);\n+    /**\n+     * Property fired when folds have been updated.\n+     */\n+\n+    String PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n+\n+\n+    /**\n+     * Adds a property change listener to this fold manager.\n+     *\n+     * @param l The new listener.\n+     * @see #removePropertyChangeListener(PropertyChangeListener)\n+     */\n+\n+\n+    void addPropertyChangeListener(PropertyChangeListener l);\n+\n+\n+    /**\n+     * Removes all folds.\n+     */\n+\n+    void clear();\n+\n+\n+    /**\n+     * Ensures that the specified offset is not hidden in a collapsed fold.\n+     * Any folds containing this offset that are collapsed will be expanded.\n+     *\n+     * @param offs The offset.\n+     * @return Whether any folds had to be opened.\n+     * @see #getDeepestFoldContaining(int)\n+     */\n+\n+    boolean ensureOffsetNotInClosedFold(int offs);\n+\n+\n+    /**\n+     * Returns the \"deepest\" nested fold containing the specified offset.\n+     *\n+     * @param offs The offset.\n+     * @return The deepest fold containing the offset, or <code>null</code> if\n+     *         no fold contains the offset.\n+     */\n+\n+    Fold getDeepestFoldContaining(int offs);\n+\n+\n+    /**\n+     * Returns the \"deepest\" open fold containing the specified offset.\n+     *\n+     * @param offs The offset.\n+     * @return The fold, or <code>null</code> if no open fold contains the\n+     *         offset.\n+     */\n+\n+    Fold getDeepestOpenFoldContaining(int offs);\n+\n+\n+    /**\n+     * Returns a specific top-level fold, which may have child folds.\n+     *\n+     * @param index The index of the fold.\n+     * @return The fold.\n+     * @see #getFoldCount()\n+     */\n+\n+    Fold getFold(int index);\n+\n+\n+    /**\n+     * Returns the number of top-level folds.\n+     *\n+     * @return The number of top-level folds.\n+     * @see #getFold(int)\n+     */\n+\n+    int getFoldCount();\n+\n+\n+    /**\n+     * Returns the fold region that starts at the specified line.\n+     *\n+     * @param line The line number.\n+     * @return The fold, or <code>null</code> if the line is not the start\n+     *         of a fold region.\n+     * @see #isFoldStartLine(int)\n+     */\n+\n+    Fold getFoldForLine(int line);\n+\n+\n+    /**\n+     * Returns the total number of hidden (folded) lines.\n+     *\n+     * @return The total number of hidden (folded) lines.\n+     * @see #getHiddenLineCountAbove(int)\n+     */\n+\n+    int getHiddenLineCount();\n+\n+\n+    /**\n+     * Returns the number of lines \"hidden\" by collapsed folds above the\n+     * specified line.\n+     *\n+     * @param line The line.  This is the line number for a logical line.\n+     *        For the line number of a physical line (i.e. visible, not folded),\n+     *        use <code>getHiddenLineCountAbove(int, true)</code>.\n+     * @return The number of lines hidden in folds above <code>line</code>.\n+     * @see #getHiddenLineCountAbove(int, boolean)\n+     */\n+\n+    int getHiddenLineCountAbove(int line);\n+\n+\n+    /**\n+     * Returns the number of lines \"hidden\" by collapsed folds above the\n+     * specified line.\n+     *\n+     * @param line The line.\n+     * @param physical Whether <code>line</code> is the number of a physical\n+     *        line (i.e. visible, not code-folded), or a logical one (i.e. any\n+     *        line from the model).  If <code>line</code> was determined by a\n+     *        raw line calculation (i.e. <code>(visibleTopY / lineHeight)</code>),\n+     *        this value should be <code>true</code>.  It should be\n+     *        <code>false</code> when it was calculated from an offset in the\n+     *        document (for example).\n+     * @return The number of lines hidden in folds above <code>line</code>.\n+     */\n+\n+    int getHiddenLineCountAbove(int line, boolean physical);\n+\n+\n+    /**\n+     * Returns the last visible line in the text area, taking into account\n+     * folds.\n+     *\n+     * @return The last visible line.\n+     */\n+\n+    int getLastVisibleLine();\n+\n+    int getVisibleLineAbove(int line);\n+\n+    int getVisibleLineBelow(int line);\n+\n+\n+    /**\n+     * Returns whether code folding is enabled.  Note that only certain\n+     * languages support code folding; those that do not will ignore this\n+     * property.\n+     *\n+     * @return Whether code folding is enabled.\n+     * @see #setCodeFoldingEnabled(boolean)\n+     */\n+\n+    boolean isCodeFoldingEnabled();\n+\n+\n+    /**\n+     * Returns <code>true</code> if and only if code folding is enabled for\n+     * this text area, AND folding is supported for the language it is editing.\n+     * Whether or not folding is supported for a language depends on whether\n+     * a fold parser is registered for that language with the\n+     * <code>FoldParserManager</code>.\n+     *\n+     * @return Whether folding is supported and enabled for this text area.\n+     * @see FoldParserManager\n+     */\n+\n+    boolean isCodeFoldingSupportedAndEnabled();\n+\n+\n+    /**\n+     * Returns whether the specified line contains the start of a fold region.\n+     *\n+     * @param line The line.\n+     * @return Whether the line contains the start of a fold region.\n+     * @see #getFoldForLine(int)\n+     */\n+\n+    boolean isFoldStartLine(int line);\n+\n+\n+    /**\n+     * Returns whether a line is hidden in a collapsed fold.\n+     *\n+     * @param line The line to check.\n+     * @return Whether the line is hidden in a collapsed fold.\n+     */\n+\n+    boolean isLineHidden(int line);\n+\n+\n+    /**\n+     * Removes a property change listener from this fold manager.\n+     *\n+     * @param l The listener to remove.\n+     * @see #addPropertyChangeListener(PropertyChangeListener)\n+     */\n+\n+    void removePropertyChangeListener(PropertyChangeListener l);\n+\n+\n+    /**\n+     * Forces an immediate reparsing for folds, if folding is enabled.  This\n+     * usually does not need to be called by the programmer, since fold\n+     * parsing is done automatically by RSTA.\n+     */\n+\n+    void reparse();\n+\n+\n+    /**\n+     * Sets whether code folding is enabled.  Note that only certain\n+     * languages will support code folding out of the box.  Those languages\n+     * which do not support folding will ignore this property.\n+     *\n+     * @param enabled Whether code folding should be enabled.\n+     * @see #isCodeFoldingEnabled()\n+     */\n+\n+    void setCodeFoldingEnabled(boolean enabled);\n+\n+\n+    /**\n+     * Sets the folds for this fold manager.\n+     *\n+     * @param folds The new folds.  This should not be <code>null</code>.\n+     */\n \n+    void setFolds(List<Fold> folds);\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 237
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/178/FoldManager.java\nindex 746f3e17e17..6f7138446f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/178/FoldManager.java\n@@ -24,10 +24,10 @@ import java.util.List;\n  */\n public interface FoldManager {\n \n-\t/**\n+    /**\n \t * Property fired when folds have been updated.\n \t */\n-\tString PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n+ String PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n \n \n \t/**\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "28",
                    "column": "1",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/178/FoldManager.java\nindex 746f3e17e17..6f7138446f5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/178/FoldManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/178/FoldManager.java\n@@ -24,10 +24,10 @@ import java.util.List;\n  */\n public interface FoldManager {\n \n-\t/**\n+    /**\n \t * Property fired when folds have been updated.\n \t */\n-\tString PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n+ String PROPERTY_FOLDS_UPDATED = \"FoldsUpdated\";\n \n \n \t/**\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}