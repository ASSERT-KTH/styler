{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "21",
    "information": {
        "errors": [
            {
                "line": "52",
                "column": "105",
                "severity": "warning",
                "message": "'+' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "            }\n        } else {\n            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n                \"JsonStringDocument id \" + id + \", could not decode.\");\n        }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/21/JsonStringTranscoder.java\nindex 038c079ec4f..0256f001ba5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler/21/JsonStringTranscoder.java\n@@ -49,8 +49,8 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \"\n+            + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n \n         return newDocument(id, expiry, decoded, cas);\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "53",
                    "column": "105",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/21/JsonStringTranscoder.java\nindex 038c079ec4f..eb03df58e46 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/21/JsonStringTranscoder.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java.transcoder;\n \n import com.couchbase.client.core.lang.Tuple;\n@@ -40,7 +41,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n \n     @Override\n     protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+                                          ResponseStatus status) throws Exception {\n         String decoded = content.toString(CharsetUtil.UTF_8);\n         if (TranscoderUtils.hasCommonFlags(flags) && flags == TranscoderUtils.JSON_COMMON_FLAGS) {\n             decoded = decoded.substring(1, decoded.length() - 1);\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "51",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/21/JsonStringTranscoder.java\nindex 038c079ec4f..167247909b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/21/JsonStringTranscoder.java\n@@ -39,8 +39,7 @@ import com.couchbase.client.java.error.TranscodingException;\n public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument, String> {\n \n     @Override\n-    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         String decoded = content.toString(CharsetUtil.UTF_8);\n         if (TranscoderUtils.hasCommonFlags(flags) && flags == TranscoderUtils.JSON_COMMON_FLAGS) {\n             decoded = decoded.substring(1, decoded.length() - 1);\n@@ -49,8 +48,7 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n \n         return newDocument(id, expiry, decoded, cas);\n@@ -71,4 +69,4 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     public Class<JsonStringDocument> documentType() {\n         return JsonStringDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 144).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "52",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/21/JsonStringTranscoder.java\nindex 038c079ec4f..cd55aeb8726 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/21/JsonStringTranscoder.java\n@@ -36,11 +36,11 @@ import com.couchbase.client.java.error.TranscodingException;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n-public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument, String> {\n \n+\n+public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument, String> {\n     @Override\n-    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags,\n-        ResponseStatus status) throws Exception {\n+    protected JsonStringDocument doDecode(String id, ByteBuf content, long cas, int expiry, int flags, ResponseStatus status) throws Exception {\n         String decoded = content.toString(CharsetUtil.UTF_8);\n         if (TranscoderUtils.hasCommonFlags(flags) && flags == TranscoderUtils.JSON_COMMON_FLAGS) {\n             decoded = decoded.substring(1, decoded.length() - 1);\n@@ -49,10 +49,8 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n-\n         return newDocument(id, expiry, decoded, cas);\n     }\n \n@@ -71,4 +69,4 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n     public Class<JsonStringDocument> documentType() {\n         return JsonStringDocument.class;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "52",
                    "column": "105",
                    "severity": "warning",
                    "message": "'+' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/21/JsonStringTranscoder.java\nindex 038c079ec4f..0256f001ba5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/21/JsonStringTranscoder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/styler_three_grams/21/JsonStringTranscoder.java\n@@ -49,8 +49,8 @@ public class JsonStringTranscoder extends AbstractTranscoder<JsonStringDocument,\n                 decoded = decoded.substring(1, decoded.length() - 1);\n             }\n         } else {\n-            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \" +\n-                \"JsonStringDocument id \" + id + \", could not decode.\");\n+            throw new TranscodingException(\"Flags (0x\" + Integer.toHexString(flags) + \") indicate non \"\n+            + \"JsonStringDocument id \" + id + \", could not decode.\");\n         }\n \n         return newDocument(id, expiry, decoded, cas);\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}