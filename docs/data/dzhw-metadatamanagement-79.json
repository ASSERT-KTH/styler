{
    "project_name": "dzhw-metadatamanagement",
    "error_id": "79",
    "information": {
        "errors": [
            {
                "line": "21",
                "column": "79",
                "severity": "error",
                "message": "'}' at column 79 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "   */\n  @Override\n  public void initialize(I18nStringMustNotContainComma constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "21",
                    "column": "79",
                    "severity": "error",
                    "message": "'}' at column 79 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/79/I18nStringMustNotContainCommaValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/79/I18nStringMustNotContainCommaValidator.java\nindex 56fba846cdd..f23f24c7f4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/79/I18nStringMustNotContainCommaValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/79/I18nStringMustNotContainCommaValidator.java\n@@ -7,22 +7,23 @@ import eu.dzhw.fdz.metadatamanagement.common.domain.I18nString;\n \n /**\n  * Annotation for i18n String (de/en Strings). It ensures that no string contains a \",\".\n- * \n+ *\n  * @author Ren\u00e9 Reitmann\n  */\n-public class I18nStringMustNotContainCommaValidator implements \n+public class I18nStringMustNotContainCommaValidator implements\n     ConstraintValidator<I18nStringMustNotContainComma, I18nString> {\n-  \n+\n   /*\n    * (non-Javadoc)\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n-  public void initialize(I18nStringMustNotContainComma constraintAnnotation) {}\n+  public void initialize(I18nStringMustNotContainComma constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * @see javax.validation.ConstraintValidator#isValid(java.lang.Object, \n+   * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n   @Override\n@@ -31,15 +32,15 @@ public class I18nStringMustNotContainCommaValidator implements\n     if (value == null) {\n       return true;\n     }\n-    \n+\n     if (!(value.getDe() == null) && value.getDe().contains(\",\")) {\n       return false;\n     }\n-    \n+\n     if (!(value.getDe() == null) && value.getEn().contains(\",\")) {\n       return false;\n     }\n-    \n+\n     return true;\n   }\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "21",
                    "column": "79",
                    "severity": "error",
                    "message": "'}' at column 79 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "34",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/79/I18nStringMustNotContainCommaValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/79/I18nStringMustNotContainCommaValidator.java\nindex 56fba846cdd..58d22e8505e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/79/I18nStringMustNotContainCommaValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/79/I18nStringMustNotContainCommaValidator.java\n@@ -12,7 +12,7 @@ import eu.dzhw.fdz.metadatamanagement.common.domain.I18nString;\n  */\n public class I18nStringMustNotContainCommaValidator implements \n     ConstraintValidator<I18nStringMustNotContainComma, I18nString> {\n-  \n+\n   /*\n    * (non-Javadoc)\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n@@ -31,16 +31,14 @@ public class I18nStringMustNotContainCommaValidator implements\n     if (value == null) {\n       return true;\n     }\n-    \n-    if (!(value.getDe() == null) && value.getDe().contains(\",\")) {\n+if (!(value.getDe() == null) && value.getDe().contains(\",\")) {\n       return false;\n     }\n-    \n-    if (!(value.getDe() == null) && value.getEn().contains(\",\")) {\n+if (!(value.getDe() == null) && value.getEn().contains(\",\")) {\n       return false;\n     }\n     \n     return true;\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "14",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'ConstraintValidatorContext' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/79/I18nStringMustNotContainCommaValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/79/I18nStringMustNotContainCommaValidator.java\nindex 56fba846cdd..69ff3289fcc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/79/I18nStringMustNotContainCommaValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/79/I18nStringMustNotContainCommaValidator.java\n@@ -2,7 +2,6 @@ package eu.dzhw.fdz.metadatamanagement.common.domain.validation;\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import eu.dzhw.fdz.metadatamanagement.common.domain.I18nString;\n \n /**\n@@ -10,37 +9,41 @@ import eu.dzhw.fdz.metadatamanagement.common.domain.I18nString;\n  * \n  * @author Ren\u00e9 Reitmann\n  */\n-public class I18nStringMustNotContainCommaValidator implements \n-    ConstraintValidator<I18nStringMustNotContainComma, I18nString> {\n+\n+\n+public class I18nStringMustNotContainCommaValidator implements ConstraintValidator<I18nStringMustNotContainComma, I18nString> {\n   \n   /*\n    * (non-Javadoc)\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n+\n   @Override\n-  public void initialize(I18nStringMustNotContainComma constraintAnnotation) {}\n+  public void initialize(I18nStringMustNotContainComma constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object, \n    * javax.validation.ConstraintValidatorContext)\n    */\n+\n+\n   @Override\n-  public boolean isValid(I18nString value, ConstraintValidatorContext context) {\n+  public boolean isValid(I18nString value,\n+    ConstraintValidatorContext context) {\n     //Empty check\n     if (value == null) {\n       return true;\n     }\n-    \n     if (!(value.getDe() == null) && value.getDe().contains(\",\")) {\n       return false;\n     }\n-    \n     if (!(value.getDe() == null) && value.getEn().contains(\",\")) {\n       return false;\n     }\n-    \n+\n     return true;\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "21",
                    "column": "79",
                    "severity": "error",
                    "message": "'}' at column 79 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "21",
                    "column": "79",
                    "severity": "error",
                    "message": "'}' at column 79 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/79/I18nStringMustNotContainCommaValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/79/I18nStringMustNotContainCommaValidator.java\nindex 56fba846cdd..5a191381a56 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/79/I18nStringMustNotContainCommaValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/79/I18nStringMustNotContainCommaValidator.java\n@@ -19,7 +19,6 @@ public class I18nStringMustNotContainCommaValidator implements\n    */\n   @Override\n   public void initialize(I18nStringMustNotContainComma constraintAnnotation) {}\n-\n   /*\n    * (non-Javadoc)\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object, \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}