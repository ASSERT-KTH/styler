{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4088",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "71",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "172",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "199",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "241",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "268",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "275",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "294",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "305",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "317",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "322",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "353",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "356",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "360",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "362",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "365",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "370",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "379",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4088/AbstractLuceneIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4088/AbstractLuceneIndex.java\nindex 4dc08cc9f5e..839943b9e1d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4088/AbstractLuceneIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4088/AbstractLuceneIndex.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.api.impl.index;\n \n import org.apache.lucene.index.CheckIndex;\n@@ -52,346 +53,339 @@ import static java.util.stream.Collectors.toList;\n  * {@link AbstractIndexPartition partitions}.\n  * Class and it's subclasses should not be directly used, instead please use corresponding writable or read only\n  * wrapper.\n+ *\n  * @see WritableAbstractDatabaseIndex\n  * @see ReadOnlyAbstractDatabaseIndex\n  */\n public abstract class AbstractLuceneIndex\n {\n-    protected final PartitionedIndexStorage indexStorage;\n-    private final IndexPartitionFactory partitionFactory;\n+  protected final PartitionedIndexStorage indexStorage;\n+  private final IndexPartitionFactory partitionFactory;\n \n-    // Note that we rely on the thread-safe internal snapshot feature of the CopyOnWriteArrayList\n-    // for the thread-safety of this and derived classes.\n-    private CopyOnWriteArrayList<AbstractIndexPartition> partitions = new CopyOnWriteArrayList<>();\n+  // Note that we rely on the thread-safe internal snapshot feature of the CopyOnWriteArrayList\n+  // for the thread-safety of this and derived classes.\n+  private CopyOnWriteArrayList<AbstractIndexPartition> partitions = new CopyOnWriteArrayList<>();\n \n-    private volatile boolean open;\n+  private volatile boolean open;\n \n-    public AbstractLuceneIndex( PartitionedIndexStorage indexStorage, IndexPartitionFactory partitionFactory )\n-    {\n-        this.indexStorage = indexStorage;\n-        this.partitionFactory = partitionFactory;\n-    }\n+  public AbstractLuceneIndex(PartitionedIndexStorage indexStorage, IndexPartitionFactory partitionFactory)\n+  {\n+    this.indexStorage = indexStorage;\n+    this.partitionFactory = partitionFactory;\n+  }\n \n-    /**\n-     * Creates new index.\n-     * As part of creation process index will allocate all required folders, index failure storage\n-     * and will create its first partition.\n-     * <p>\n-     * <b>Index creation do not automatically open it. To be able to use index please open it first.</b>\n-     *\n-     * @throws IOException\n-     */\n-    public void create() throws IOException\n-    {\n-        ensureNotOpen();\n-        indexStorage.prepareFolder( indexStorage.getIndexFolder() );\n-        indexStorage.reserveIndexFailureStorage();\n-        createNewPartitionFolder();\n-    }\n+  /**\n+   * Creates new index.\n+   * As part of creation process index will allocate all required folders, index failure storage\n+   * and will create its first partition.\n+   * <p>\n+   * <b>Index creation do not automatically open it. To be able to use index please open it first.</b>\n+   *\n+   * @throws IOException\n+   */\n+  public void create() throws IOException\n+  {\n+    ensureNotOpen();\n+    indexStorage.prepareFolder(indexStorage.getIndexFolder());\n+    indexStorage.reserveIndexFailureStorage();\n+    createNewPartitionFolder();\n+  }\n \n-    /**\n-     * Open index with all allocated partitions.\n-     *\n-     * @throws IOException\n-     */\n-    public void open() throws IOException\n+  /**\n+   * Open index with all allocated partitions.\n+   *\n+   * @throws IOException\n+   */\n+  public void open() throws IOException\n+  {\n+    Set<Map.Entry<File, Directory>> indexDirectories = indexStorage.openIndexDirectories().entrySet();\n+    List<AbstractIndexPartition> list = new ArrayList<>(indexDirectories.size());\n+    for (Map.Entry<File, Directory> entry : indexDirectories)\n     {\n-        Set<Map.Entry<File,Directory>> indexDirectories = indexStorage.openIndexDirectories().entrySet();\n-        List<AbstractIndexPartition> list = new ArrayList<>( indexDirectories.size() );\n-        for ( Map.Entry<File,Directory> entry : indexDirectories )\n-        {\n-            list.add( partitionFactory.createPartition( entry.getKey(), entry.getValue() ) );\n-        }\n-        partitions.addAll( list );\n-        open = true;\n+      list.add(partitionFactory.createPartition(entry.getKey(), entry.getValue()));\n     }\n+    partitions.addAll(list);\n+    open = true;\n+  }\n \n-    public boolean isOpen()\n-    {\n-        return open;\n-    }\n+  public boolean isOpen()\n+  {\n+    return open;\n+  }\n \n-    /**\n-     * Check lucene index existence within all allocated partitions.\n-     *\n-     * @return true if index exist in all partitions, false when index is empty or does not exist\n-     * @throws IOException\n-     */\n-    public boolean exists() throws IOException\n+  /**\n+   * Check lucene index existence within all allocated partitions.\n+   *\n+   * @return true if index exist in all partitions, false when index is empty or does not exist\n+   * @throws IOException\n+   */\n+  public boolean exists() throws IOException\n+  {\n+    List<File> folders = indexStorage.listFolders();\n+    if (folders.isEmpty())\n     {\n-        List<File> folders = indexStorage.listFolders();\n-        if ( folders.isEmpty() )\n-        {\n-            return false;\n-        }\n-        for ( File folder : folders )\n-        {\n-            if ( !luceneDirectoryExists( folder ) )\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      return false;\n     }\n-\n-    /**\n-     * Verify state of the index.\n-     * If index is already open and in use method assume that index is valid since lucene already operating with it,\n-     * otherwise necessary checks perform.\n-     *\n-     * @return true if lucene confirm that index is in valid clean state or index is already open.\n-     */\n-    public boolean isValid()\n+    for (File folder : folders)\n     {\n-        if ( open )\n-        {\n-            return true;\n-        }\n-        Collection<Directory> directories = null;\n-        try\n-        {\n-            directories = indexStorage.openIndexDirectories().values();\n-            for ( Directory directory : directories )\n-            {\n-                // it is ok for index directory to be empty\n-                // this can happen if it is opened and closed without any writes in between\n-                if ( !ArrayUtil.isEmpty( directory.listAll() ) )\n-                {\n-                    try ( CheckIndex checker = new CheckIndex( directory ) )\n-                    {\n-                        CheckIndex.Status status = checker.checkIndex();\n-                        if ( !status.clean )\n-                        {\n-                            return false;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            return false;\n-        }\n-        finally\n-        {\n-            IOUtils.closeAllSilently( directories );\n-        }\n-        return true;\n+      if (!luceneDirectoryExists(folder))\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    /**\n-     * Close index and deletes all it's partitions.\n-     *\n-     * @throws IOException\n-     */\n-    public void drop() throws IOException\n+  /**\n+   * Verify state of the index.\n+   * If index is already open and in use method assume that index is valid since lucene already operating with it,\n+   * otherwise necessary checks perform.\n+   *\n+   * @return true if lucene confirm that index is in valid clean state or index is already open.\n+   */\n+  public boolean isValid()\n+  {\n+    if (open)\n     {\n-        close();\n-        indexStorage.cleanupFolder( indexStorage.getIndexFolder() );\n+      return true;\n     }\n-\n-    /**\n-     * Commits all index partitions.\n-     *\n-     * @param merge also merge all segments together. This should be done before reading term frequencies.\n-     * @throws IOException on Lucene I/O error.\n-     */\n-    public void flush( boolean merge ) throws IOException\n+    Collection<Directory> directories = null;\n+    try\n     {\n-        List<AbstractIndexPartition> partitions = getPartitions();\n-        for ( AbstractIndexPartition partition : partitions )\n+      directories = indexStorage.openIndexDirectories().values();\n+      for (Directory directory : directories)\n+      {\n+        // it is ok for index directory to be empty\n+        // this can happen if it is opened and closed without any writes in between\n+        if (!ArrayUtil.isEmpty(directory.listAll()))\n         {\n-            IndexWriter writer = partition.getIndexWriter();\n-            writer.commit();\n-            if ( merge )\n+          try (CheckIndex checker = new CheckIndex(directory))\n+          {\n+            CheckIndex.Status status = checker.checkIndex();\n+            if (!status.clean)\n             {\n-                writer.forceMerge( 1 );\n+              return false;\n             }\n+          }\n         }\n+      }\n+    } catch (IOException e)\n+    {\n+      return false;\n+    } finally\n+    {\n+      IOUtils.closeAllSilently(directories);\n     }\n+    return true;\n+  }\n+\n+  /**\n+   * Close index and deletes all it's partitions.\n+   *\n+   * @throws IOException\n+   */\n+  public void drop() throws IOException\n+  {\n+    close();\n+    indexStorage.cleanupFolder(indexStorage.getIndexFolder());\n+  }\n \n-    public void close() throws IOException\n+  /**\n+   * Commits all index partitions.\n+   *\n+   * @param merge also merge all segments together. This should be done before reading term frequencies.\n+   * @throws IOException on Lucene I/O error.\n+   */\n+  public void flush(boolean merge) throws IOException\n+  {\n+    List<AbstractIndexPartition> partitions = getPartitions();\n+    for (AbstractIndexPartition partition : partitions)\n     {\n-        open = false;\n-        IOUtils.closeAll( partitions );\n-        partitions.clear();\n+      IndexWriter writer = partition.getIndexWriter();\n+      writer.commit();\n+      if (merge)\n+      {\n+        writer.forceMerge(1);\n+      }\n     }\n+  }\n \n-    /**\n-     * Creates an iterable over all {@link org.apache.lucene.document.Document document}s in all partitions.\n-     *\n-     * @return LuceneAllDocumentsReader over all documents\n-     */\n-    public LuceneAllDocumentsReader allDocumentsReader()\n-    {\n-        ensureOpen();\n-        List<PartitionSearcher> searchers = new ArrayList<>( partitions.size() );\n-        try\n-        {\n-            for ( AbstractIndexPartition partition : partitions )\n-            {\n-                searchers.add( partition.acquireSearcher() );\n-            }\n+  public void close() throws IOException\n+  {\n+    open = false;\n+    IOUtils.closeAll(partitions);\n+    partitions.clear();\n+  }\n \n-            List<LucenePartitionAllDocumentsReader> partitionReaders = searchers.stream()\n-                    .map( LucenePartitionAllDocumentsReader::new )\n-                    .collect( toList() );\n+  /**\n+   * Creates an iterable over all {@link org.apache.lucene.document.Document document}s in all partitions.\n+   *\n+   * @return LuceneAllDocumentsReader over all documents\n+   */\n+  public LuceneAllDocumentsReader allDocumentsReader()\n+  {\n+    ensureOpen();\n+    List<PartitionSearcher> searchers = new ArrayList<>(partitions.size());\n+    try\n+    {\n+      for (AbstractIndexPartition partition : partitions)\n+      {\n+        searchers.add(partition.acquireSearcher());\n+      }\n \n-            return new LuceneAllDocumentsReader( partitionReaders );\n-        }\n-        catch ( IOException e )\n-        {\n-            IOUtils.closeAllSilently( searchers );\n-            throw new UncheckedIOException( e );\n-        }\n-    }\n+      List<LucenePartitionAllDocumentsReader> partitionReaders = searchers.stream()\n+          .map(LucenePartitionAllDocumentsReader::new)\n+          .collect(toList());\n \n-    /**\n-     * Snapshot of all file in all index partitions.\n-     *\n-     * @return iterator over all index files.\n-     * @throws IOException\n-     * @see WritableIndexSnapshotFileIterator\n-     */\n-    public ResourceIterator<File> snapshot() throws IOException\n+      return new LuceneAllDocumentsReader(partitionReaders);\n+    } catch (IOException e)\n     {\n-        ensureOpen();\n-        List<ResourceIterator<File>> snapshotIterators = null;\n-        try\n-        {\n-            List<AbstractIndexPartition> partitions = getPartitions();\n-            snapshotIterators = new ArrayList<>( partitions.size() );\n-            for ( AbstractIndexPartition partition : partitions )\n-            {\n-                snapshotIterators.add( partition.snapshot() );\n-            }\n-            return Iterators.concatResourceIterators( snapshotIterators.iterator() );\n-        }\n-        catch ( Exception e )\n-        {\n-            if ( snapshotIterators != null )\n-            {\n-                try\n-                {\n-                    IOUtils.closeAll( snapshotIterators );\n-                }\n-                catch ( IOException ex )\n-                {\n-                    e.addSuppressed( ex );\n-                }\n-            }\n-            throw e;\n-        }\n+      IOUtils.closeAllSilently(searchers);\n+      throw new UncheckedIOException(e);\n     }\n+  }\n \n-    /**\n-     * Refresh all partitions to make newly inserted data visible for readers.\n-     *\n-     * @throws IOException\n-     */\n-    public void maybeRefreshBlocking() throws IOException\n+  /**\n+   * Snapshot of all file in all index partitions.\n+   *\n+   * @return iterator over all index files.\n+   * @throws IOException\n+   * @see WritableIndexSnapshotFileIterator\n+   */\n+  public ResourceIterator<File> snapshot() throws IOException\n+  {\n+    ensureOpen();\n+    List<ResourceIterator<File>> snapshotIterators = null;\n+    try\n     {\n-        try\n-        {\n-            getPartitions().parallelStream().forEach( this::maybeRefreshPartition );\n-        }\n-        catch ( UncheckedIOException e )\n-        {\n-            throw e.getCause();\n-        }\n-    }\n-\n-    private void maybeRefreshPartition( AbstractIndexPartition partition )\n+      List<AbstractIndexPartition> partitions = getPartitions();\n+      snapshotIterators = new ArrayList<>(partitions.size());\n+      for (AbstractIndexPartition partition : partitions)\n+      {\n+        snapshotIterators.add(partition.snapshot());\n+      }\n+      return Iterators.concatResourceIterators(snapshotIterators.iterator());\n+    } catch (Exception e)\n     {\n+      if (snapshotIterators != null)\n+      {\n         try\n         {\n-            partition.maybeRefreshBlocking();\n-        }\n-        catch ( IOException e )\n+          IOUtils.closeAll(snapshotIterators);\n+        } catch (IOException ex)\n         {\n-            throw new UncheckedIOException( e );\n+          e.addSuppressed(ex);\n         }\n+      }\n+      throw e;\n     }\n+  }\n \n-    public List<AbstractIndexPartition> getPartitions()\n+  /**\n+   * Refresh all partitions to make newly inserted data visible for readers.\n+   *\n+   * @throws IOException\n+   */\n+  public void maybeRefreshBlocking() throws IOException\n+  {\n+    try\n     {\n-        ensureOpen();\n-        return partitions;\n-    }\n-\n-    public boolean hasSinglePartition( List<AbstractIndexPartition> partitions )\n+      getPartitions().parallelStream().forEach(this::maybeRefreshPartition);\n+    } catch (UncheckedIOException e)\n     {\n-        return partitions.size() == 1;\n+      throw e.getCause();\n     }\n+  }\n \n-    public AbstractIndexPartition getFirstPartition( List<AbstractIndexPartition> partitions )\n+  private void maybeRefreshPartition(AbstractIndexPartition partition)\n+  {\n+    try\n     {\n-        return partitions.get( 0 );\n-    }\n-\n-    /**\n-     * Add new partition to the index.\n-     *\n-     * @return newly created partition\n-     * @throws IOException\n-     */\n-    AbstractIndexPartition addNewPartition() throws IOException\n+      partition.maybeRefreshBlocking();\n+    } catch (IOException e)\n     {\n-        ensureOpen();\n-        File partitionFolder = createNewPartitionFolder();\n-        Directory directory = indexStorage.openDirectory( partitionFolder );\n-        AbstractIndexPartition indexPartition = partitionFactory.createPartition( partitionFolder, directory );\n-        partitions.add( indexPartition );\n-        return indexPartition;\n+      throw new UncheckedIOException(e);\n     }\n+  }\n \n-    protected void ensureOpen()\n-    {\n-        if ( !open )\n-        {\n-            throw new IllegalStateException( \"Please open lucene index before working with it.\" );\n-        }\n-    }\n+  public List<AbstractIndexPartition> getPartitions()\n+  {\n+    ensureOpen();\n+    return partitions;\n+  }\n+\n+  public boolean hasSinglePartition(List<AbstractIndexPartition> partitions)\n+  {\n+    return partitions.size() == 1;\n+  }\n \n-    protected void ensureNotOpen()\n+  public AbstractIndexPartition getFirstPartition(List<AbstractIndexPartition> partitions)\n+  {\n+    return partitions.get(0);\n+  }\n+\n+  /**\n+   * Add new partition to the index.\n+   *\n+   * @return newly created partition\n+   * @throws IOException\n+   */\n+  AbstractIndexPartition addNewPartition() throws IOException\n+  {\n+    ensureOpen();\n+    File partitionFolder = createNewPartitionFolder();\n+    Directory directory = indexStorage.openDirectory(partitionFolder);\n+    AbstractIndexPartition indexPartition = partitionFactory.createPartition(partitionFolder, directory);\n+    partitions.add(indexPartition);\n+    return indexPartition;\n+  }\n+\n+  protected void ensureOpen()\n+  {\n+    if (!open)\n     {\n-        if ( open )\n-        {\n-            throw new IllegalStateException( \"Lucene index should not be open to be able to perform required \" +\n-                                             \"operation.\" );\n-        }\n+      throw new IllegalStateException(\"Please open lucene index before working with it.\");\n     }\n+  }\n \n-    protected static List<PartitionSearcher> acquireSearchers( List<AbstractIndexPartition> partitions ) throws IOException\n+  protected void ensureNotOpen()\n+  {\n+    if (open)\n     {\n-        List<PartitionSearcher> searchers = new ArrayList<>( partitions.size() );\n-        try\n-        {\n-            for ( AbstractIndexPartition partition : partitions )\n-            {\n-                searchers.add( partition.acquireSearcher() );\n-            }\n-            return searchers;\n-        }\n-        catch ( IOException e )\n-        {\n-            IOUtils.closeAllSilently( searchers );\n-            throw e;\n-        }\n+      throw new IllegalStateException(\"Lucene index should not be open to be able to perform required \" +\n+          \"operation.\");\n     }\n+  }\n \n-    private boolean luceneDirectoryExists( File folder ) throws IOException\n+  protected static List<PartitionSearcher> acquireSearchers(List<AbstractIndexPartition> partitions) throws IOException\n+  {\n+    List<PartitionSearcher> searchers = new ArrayList<>(partitions.size());\n+    try\n     {\n-        try ( Directory directory = indexStorage.openDirectory( folder ) )\n-        {\n-            return DirectoryReader.indexExists( directory );\n-        }\n+      for (AbstractIndexPartition partition : partitions)\n+      {\n+        searchers.add(partition.acquireSearcher());\n+      }\n+      return searchers;\n+    } catch (IOException e)\n+    {\n+      IOUtils.closeAllSilently(searchers);\n+      throw e;\n     }\n+  }\n \n-    private File createNewPartitionFolder() throws IOException\n+  private boolean luceneDirectoryExists(File folder) throws IOException\n+  {\n+    try (Directory directory = indexStorage.openDirectory(folder))\n     {\n-        File partitionFolder = indexStorage.getPartitionFolder( partitions.size() + 1 );\n-        indexStorage.prepareFolder( partitionFolder );\n-        return partitionFolder;\n+      return DirectoryReader.indexExists(directory);\n     }\n+  }\n+\n+  private File createNewPartitionFolder() throws IOException\n+  {\n+    File partitionFolder = indexStorage.getPartitionFolder(partitions.size() + 1);\n+    indexStorage.prepareFolder(partitionFolder);\n+    return partitionFolder;\n+  }\n }\n",
            "diff_size": 418
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4088/AbstractLuceneIndex.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4088/AbstractLuceneIndex.java\nindex 4dc08cc9f5e..ed61975c632 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4088/AbstractLuceneIndex.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4088/AbstractLuceneIndex.java\n@@ -233,11 +233,8 @@ public abstract class AbstractLuceneIndex\n                 searchers.add( partition.acquireSearcher() );\n             }\n \n-            List<LucenePartitionAllDocumentsReader> partitionReaders = searchers.stream()\n-                    .map( LucenePartitionAllDocumentsReader::new )\n-                    .collect( toList() );\n-\n-            return new LuceneAllDocumentsReader( partitionReaders );\n+            List<LucenePartitionAllDocumentsReader> partitionReaders = searchers.stream().map( LucenePartitionAllDocumentsReader::new ).collect( toList() );\n+return new LuceneAllDocumentsReader( partitionReaders );\n         }\n         catch ( IOException e )\n         {\n@@ -265,7 +262,8 @@ public abstract class AbstractLuceneIndex\n             {\n                 snapshotIterators.add( partition.snapshot() );\n             }\n-            return Iterators.concatResourceIterators( snapshotIterators.iterator() );\n+\n+return Iterators.concatResourceIterators( snapshotIterators.iterator() );\n         }\n         catch ( Exception e )\n         {\n@@ -357,9 +355,8 @@ public abstract class AbstractLuceneIndex\n     {\n         if ( open )\n         {\n-            throw new IllegalStateException( \"Lucene index should not be open to be able to perform required \" +\n-                                             \"operation.\" );\n-        }\n+            throw new IllegalStateException( \"Lucene index should not be open to be able to perform required \" + \"operation.\" );\n+    }\n     }\n \n     protected static List<PartitionSearcher> acquireSearchers( List<AbstractIndexPartition> partitions ) throws IOException\n@@ -371,7 +368,8 @@ public abstract class AbstractLuceneIndex\n             {\n                 searchers.add( partition.acquireSearcher() );\n             }\n-            return searchers;\n+\n+return searchers;\n         }\n         catch ( IOException e )\n         {\n@@ -394,4 +392,4 @@ public abstract class AbstractLuceneIndex\n         indexStorage.prepareFolder( partitionFolder );\n         return partitionFolder;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}