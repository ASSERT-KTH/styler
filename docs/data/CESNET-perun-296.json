{
    "project_name": "CESNET-perun",
    "error_id": "296",
    "information": {
        "errors": [
            {
                "line": "322",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t */\n\tvoid removeServiceFromAllServicesPackages(PerunSession sess, Service service);\n\t\n\t/**\n\t * List services stored in the packages\n\t *",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/296/ServicesManagerImplApi.java\nindex b345ddbeaac..8d5a31fe36c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/296/ServicesManagerImplApi.java\n@@ -319,7 +319,7 @@ public interface ServicesManagerImplApi {\n \t * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n \t */\n \tvoid removeServiceFromAllServicesPackages(PerunSession sess, Service service);\n-\t\n+\n \t/**\n \t * List services stored in the packages\n \t *\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/296/ServicesManagerImplApi.java\nindex b345ddbeaac..3e3a8652361 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/296/ServicesManagerImplApi.java\n@@ -27,588 +27,562 @@ import java.util.List;\n /**\n  * @author Michal Prochazka <michalp@ics.muni.cz>\n  * @author Slavek Licehammer <glory@ics.muni.cz>\n- *\n+ * <p>\n  * Note: ServicesManager is not to be used directly by any client.\n  * ServicesManager's functionality is going to be encapsulated in the Controller's\n  * GeneralServiceManager.\n- *\n  */\n public interface ServicesManagerImplApi {\n \n-\t/**\n-\t * Block Service on Facility. It won't be possible to propagate service on whole facility\n-\t * or any of its destinations.\n-\t *\n-\t * @param session\n-\t * @param serviceId The Service to be blocked on the Facility\n-\t * @param facilityId The Facility on which we want to block the Service\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockServiceOnFacility(PerunSession session, int serviceId, int facilityId) throws ServiceAlreadyBannedException;\n-\n-\t/**\n-\t * Block Service on specific Destination. Service still can be propagated to other facility Destinations.\n-\t *\n-\t * @param session\n-\t * @param serviceId The Service to be blocked on this particular destination\n-\t * @param destinationId The destination on which we want to block the Service\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockServiceOnDestination(PerunSession session, int serviceId, int destinationId) throws ServiceAlreadyBannedException;\n-\n-\t/**\n-\t * Unblock Service on whole Facility. If was not blocked, nothing happens.\n-\t *\n-\t * @param serviceId ID of Service to unblock on Facility.\n-\t * @param facilityId ID of Facility to unblock Service on.\n-\t */\n-\tvoid unblockServiceOnFacility(int serviceId, int facilityId);\n-\n-\t/**\n-\t * Unblock Service on specific Destination. If was not blocked, nothing happens.\n-\t *\n-\t * @param serviceId ID of Service to unblock on Destination.\n-\t * @param destinationId ID of Destination to unblock Service on.\n-\t */\n-\tvoid unblockServiceOnDestination(int serviceId, int destinationId);\n-\n-\t/**\n-\t * Unblock all blocked Services on Facility.\n-\t *\n-\t * @param facility ID of Facility we want to unblock all Services.\n-\t */\n-\tvoid unblockAllServicesOnFacility(int facility);\n-\n-\t/**\n-\t * Unblock all blocked Services on specified Destination.\n-\t *\n-\t * @param destination ID of Destination we want to unblock all Services.\n-\t */\n-\tvoid unblockAllServicesOnDestination(int destination);\n-\n-\t/**\n-\t * Unblock Service everywhere. If was not blocked, nothing happens.\n-\t *\n-\t * @param serviceId ID of Service to unblock.\n-\t */\n-\tvoid unblockService(int serviceId);\n-\n-\t/**\n-\t * Get Services blocked on Facility.\n-\t *\n-\t * @param facilityId ID of Facility to get blocked Services for.\n-\t * @return List of blocked Services.\n-\t */\n-\tList<Service> getServicesBlockedOnFacility(int facilityId);\n-\n-\t/**\n-\t * Get Services blocked on Destination.\n-\t *\n-\t * @param destinationId ID of Destination to get blocked Services for.\n-\t * @return List of blocked Services.\n-\t */\n-\tList<Service> getServicesBlockedOnDestination(int destinationId);\n-\n-\t/**\n-\t * Return TRUE if Service is blocked on Facility.\n-\t *\n-\t * @param serviceId ID of Service to check on.\n-\t * @param facilityId ID of Facility to check on.\n-\t * @return TRUE if Service is blocked on Facility / FALSE otherwise\n-\t */\n-\tboolean isServiceBlockedOnFacility(int serviceId, int facilityId);\n-\n-\t/**\n-\t * Return TRUE if Service is blocked on Destination.\n-\t *\n-\t * @param serviceId ID of Service to check on.\n-\t * @param destinationId ID of Destination to check on.\n-\t * @return TRUE if Service is blocked on Destination / FALSE otherwise\n-\t */\n-\tboolean isServiceBlockedOnDestination(int serviceId, int destinationId);\n-\n-\t/**\n-\t * Return list of services this destination points to.\n-\t *\n-\t * @param destinationId ID of destination\n-\t * @return Services associated with this destination.\n-\t */\n-\tList<Service> getServicesFromDestination(int destinationId);\n-\n-\t/**\n-\t * Creates new service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return new service\n-\t */\n-\tService createService(PerunSession perunSession, Service service);\n-\n-\t/** Deletes the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t *\n-\t * @throws ServiceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid deleteService(PerunSession perunSession, Service service) throws ServiceAlreadyRemovedException;\n-\n-\t/** Updates the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t */\n-\tvoid updateService(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Get service by id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return service with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t */\n-\tService getServiceById(PerunSession perunSession, int id) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * Get service by name.\n-\t *\n-\t * @param perunSession\n-\t * @param name name of the service\n-\t * @return service with specified name\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t */\n-\tService getServiceByName(PerunSession perunSession, String name) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * get all services in perun\n-\t *\n-\t * @param perunSession\n-\t * @return all services in perun\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServices(PerunSession perunSession);\n-\n-\t/**\n-\t * Get all services with given attribute.\n-\t *\n-\t * @param sess perun session\n-\t * @param attributeDefinition\n-\t * @return all services with given attribute\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition);\n-\n-\t/**\n-\t * Get all resources which use this service.\n-\t *\n-\t * @param sess\n-\t * @param service\n-\t * @return list of resources\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Service service);\n-\n-\t/**\n-\t * List packages\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return list of packages in the DB\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ServicesPackage> getServicesPackages(PerunSession perunSession);\n-\n-\t/**\n-\t * Get package by Id\n-\t *\n-\t * @param servicesPackageId id of the package we want to retrieve\n-\t * @param perunSession\n-\t *\n-\t * @return package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tServicesPackage getServicesPackageById(PerunSession perunSession, int servicesPackageId) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Get services package by name.\n-\t * @param sess\n-\t * @param name\n-\t * @return package\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tServicesPackage getServicesPackageByName(PerunSession sess, String name) throws ServicesPackageNotExistsException;\n-\t/**\n-\t * Insert a new package\n-\t *\n-\t * @param servicesPackage package to be inserted\n-\t * @param perunSession\n-\t *\n-\t * @return ServicesPackage object completely filled (including Id)\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tServicesPackage createServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Update package\n-\t *\n-\t * @param servicesPackage with which is the old one supposed to be updated :-)\n-\t * @param perunSession\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid updateServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Remove the package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package to be removed.\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid deleteServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Add the service to the package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package to which the service supposed to be added\n-\t * @param service service to be added to the services package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceAlreadyAssignedException\n-\t */\n-\tvoid addServiceToServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove Service from Services Package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package from which the service supposed to be removed\n-\t * @param service service that will be removed from the services package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n-\t */\n-\tvoid removeServiceFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyRemovedFromServicePackageException;\n-\n-\t/**\n-\t * Remove Service from all Services Packages\n-\t *\n-\t * @param perunSession\n-\t * @param service service that will be removed from the services package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n-\t */\n-\tvoid removeServiceFromAllServicesPackages(PerunSession sess, Service service);\n-\t\n-\t/**\n-\t * List services stored in the packages\n-\t *\n-\t * @param servicesPackage the package from which we want to list the services\n-\t *\n-\t * @return list consisting services\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tList<Service> getServicesFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+    /**\n+     * Block Service on Facility. It won't be possible to propagate service on whole facility\n+     * or any of its destinations.\n+     *\n+     * @param session\n+     * @param serviceId  The Service to be blocked on the Facility\n+     * @param facilityId The Facility on which we want to block the Service\n+     * @throws InternalErrorException\n+     */\n+    void blockServiceOnFacility(PerunSession session, int serviceId, int facilityId) throws ServiceAlreadyBannedException;\n+\n+    /**\n+     * Block Service on specific Destination. Service still can be propagated to other facility Destinations.\n+     *\n+     * @param session\n+     * @param serviceId     The Service to be blocked on this particular destination\n+     * @param destinationId The destination on which we want to block the Service\n+     * @throws InternalErrorException\n+     */\n+    void blockServiceOnDestination(PerunSession session, int serviceId, int destinationId) throws ServiceAlreadyBannedException;\n+\n+    /**\n+     * Unblock Service on whole Facility. If was not blocked, nothing happens.\n+     *\n+     * @param serviceId  ID of Service to unblock on Facility.\n+     * @param facilityId ID of Facility to unblock Service on.\n+     */\n+    void unblockServiceOnFacility(int serviceId, int facilityId);\n+\n+    /**\n+     * Unblock Service on specific Destination. If was not blocked, nothing happens.\n+     *\n+     * @param serviceId     ID of Service to unblock on Destination.\n+     * @param destinationId ID of Destination to unblock Service on.\n+     */\n+    void unblockServiceOnDestination(int serviceId, int destinationId);\n+\n+    /**\n+     * Unblock all blocked Services on Facility.\n+     *\n+     * @param facility ID of Facility we want to unblock all Services.\n+     */\n+    void unblockAllServicesOnFacility(int facility);\n+\n+    /**\n+     * Unblock all blocked Services on specified Destination.\n+     *\n+     * @param destination ID of Destination we want to unblock all Services.\n+     */\n+    void unblockAllServicesOnDestination(int destination);\n+\n+    /**\n+     * Unblock Service everywhere. If was not blocked, nothing happens.\n+     *\n+     * @param serviceId ID of Service to unblock.\n+     */\n+    void unblockService(int serviceId);\n+\n+    /**\n+     * Get Services blocked on Facility.\n+     *\n+     * @param facilityId ID of Facility to get blocked Services for.\n+     * @return List of blocked Services.\n+     */\n+    List<Service> getServicesBlockedOnFacility(int facilityId);\n+\n+    /**\n+     * Get Services blocked on Destination.\n+     *\n+     * @param destinationId ID of Destination to get blocked Services for.\n+     * @return List of blocked Services.\n+     */\n+    List<Service> getServicesBlockedOnDestination(int destinationId);\n+\n+    /**\n+     * Return TRUE if Service is blocked on Facility.\n+     *\n+     * @param serviceId  ID of Service to check on.\n+     * @param facilityId ID of Facility to check on.\n+     * @return TRUE if Service is blocked on Facility / FALSE otherwise\n+     */\n+    boolean isServiceBlockedOnFacility(int serviceId, int facilityId);\n+\n+    /**\n+     * Return TRUE if Service is blocked on Destination.\n+     *\n+     * @param serviceId     ID of Service to check on.\n+     * @param destinationId ID of Destination to check on.\n+     * @return TRUE if Service is blocked on Destination / FALSE otherwise\n+     */\n+    boolean isServiceBlockedOnDestination(int serviceId, int destinationId);\n+\n+    /**\n+     * Return list of services this destination points to.\n+     *\n+     * @param destinationId ID of destination\n+     * @return Services associated with this destination.\n+     */\n+    List<Service> getServicesFromDestination(int destinationId);\n+\n+    /**\n+     * Creates new service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @return new service\n+     */\n+    Service createService(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Deletes the service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @throws ServiceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+     */\n+    void deleteService(PerunSession perunSession, Service service) throws ServiceAlreadyRemovedException;\n+\n+    /**\n+     * Updates the service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     */\n+    void updateService(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Get service by id.\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return service with specified id\n+     * @throws InternalErrorException\n+     * @throws ServiceNotExistsException\n+     */\n+    Service getServiceById(PerunSession perunSession, int id) throws ServiceNotExistsException;\n+\n+    /**\n+     * Get service by name.\n+     *\n+     * @param perunSession\n+     * @param name         name of the service\n+     * @return service with specified name\n+     * @throws InternalErrorException\n+     * @throws ServiceNotExistsException\n+     */\n+    Service getServiceByName(PerunSession perunSession, String name) throws ServiceNotExistsException;\n+\n+    /**\n+     * get all services in perun\n+     *\n+     * @param perunSession\n+     * @return all services in perun\n+     * @throws InternalErrorException\n+     */\n+    List<Service> getServices(PerunSession perunSession);\n+\n+    /**\n+     * Get all services with given attribute.\n+     *\n+     * @param sess                perun session\n+     * @param attributeDefinition\n+     * @return all services with given attribute\n+     * @throws InternalErrorException\n+     */\n+    List<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition);\n+\n+    /**\n+     * Get all resources which use this service.\n+     *\n+     * @param sess\n+     * @param service\n+     * @return list of resources\n+     * @throws InternalErrorException\n+     */\n+    List<Resource> getAssignedResources(PerunSession sess, Service service);\n+\n+    /**\n+     * List packages\n+     *\n+     * @param perunSession\n+     * @return list of packages in the DB\n+     * @throws InternalErrorException\n+     */\n+    List<ServicesPackage> getServicesPackages(PerunSession perunSession);\n+\n+    /**\n+     * Get package by Id\n+     *\n+     * @param servicesPackageId id of the package we want to retrieve\n+     * @param perunSession\n+     * @return package\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    ServicesPackage getServicesPackageById(PerunSession perunSession, int servicesPackageId) throws ServicesPackageNotExistsException;\n+\n+    /**\n+     * Get services package by name.\n+     *\n+     * @param sess\n+     * @param name\n+     * @return package\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    ServicesPackage getServicesPackageByName(PerunSession sess, String name) throws ServicesPackageNotExistsException;\n+\n+    /**\n+     * Insert a new package\n+     *\n+     * @param servicesPackage package to be inserted\n+     * @param perunSession\n+     * @return ServicesPackage object completely filled (including Id)\n+     * @throws InternalErrorException\n+     */\n+    ServicesPackage createServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+    /**\n+     * Update package\n+     *\n+     * @param servicesPackage with which is the old one supposed to be updated :-)\n+     * @param perunSession\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    void updateServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+    /**\n+     * Remove the package\n+     *\n+     * @param perunSession\n+     * @param servicesPackage services package to be removed.\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    void deleteServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+    /**\n+     * Add the service to the package\n+     *\n+     * @param perunSession\n+     * @param servicesPackage services package to which the service supposed to be added\n+     * @param service         service to be added to the services package\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageNotExistsException\n+     * @throws ServiceNotExistsException\n+     * @throws ServiceAlreadyAssignedException\n+     */\n+    void addServiceToServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyAssignedException;\n+\n+    /**\n+     * Remove Service from Services Package\n+     *\n+     * @param perunSession\n+     * @param servicesPackage services package from which the service supposed to be removed\n+     * @param service         service that will be removed from the services package\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageNotExistsException\n+     * @throws ServiceNotExistsException\n+     * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n+     */\n+    void removeServiceFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyRemovedFromServicePackageException;\n+\n+    /**\n+     * Remove Service from all Services Packages\n+     *\n+     * @param perunSession\n+     * @param service      service that will be removed from the services package\n+     * @throws InternalErrorException\n+     * @throws ServiceNotExistsException\n+     * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n+     */\n+    void removeServiceFromAllServicesPackages(PerunSession sess, Service service);\n+\n+    /**\n+     * List services stored in the packages\n+     *\n+     * @param servicesPackage the package from which we want to list the services\n+     * @return list consisting services\n+     * @throws InternalErrorException\n+     * @throws ServicesPackageNotExistsException\n+     */\n+    List<Service> getServicesFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n \n \t/*\n \t\t getRequiredAttributes(PerunSession perunSession, Service service);\n \t\t */\n \n-\t/**\n-\t * Mark the attribute as required for the service. Required attribues are requisite for Service to run.\n-\t * If you add attribute which has a default attribute then this default attribute will be automatically add too.\n-\t *\n-\t * @param perunSession perunSession\n-\t * @param service service to which the attribute will be added\n-\t * @param attribute attribute to add\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n-\t * @throws AttributeAlreadyAssignedException if the attribute is already added\n-\t */\n-\tvoid addRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeAlreadyAssignedException;\n-\n-\t/**\n-\t *  Batch version of addRequiredAttribute\n-\t *  @see cz.metacentrum.perun.core.api.ServicesManager#addRequiredAttribute(PerunSession,Service,AttributeDefinition)\n-\t */\n-\tvoid addRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove required attribute from service.\n-\t * TODO If you try to remove attribute which is default for other Required attribute ...\n-\t *\n-\t * @param perunSession perunSession\n-\t * @param service service from which the attribute will be removed\n-\t * @param attribute attribute to remove\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotAssignedException\n-\t * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n-\t */\n-\tvoid removeRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeNotAssignedException;\n-\n-\t/**\n-\t *  Batch version of removeRequiredAttribute\n-\t *  @see cz.metacentrum.perun.core.api.ServicesManager#removeRequiredAttribute(PerunSession,Service,AttributeDefinition)\n-\t */\n-\tvoid removeRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeNotAssignedException;\n-\n-\t/**\n-\t * Detate all required attributes from service\n-\t *\n-\t * @param perunSession perunSession\n-\t * @param service service from which the attributes will be removed\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n-\t */\n-\tvoid removeAllRequiredAttributes(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Check if service exists in underlaying data source.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param service service to check\n-\t * @return true if service exists in underlaying data source, false otherwise\n-\t *\n-\t * @throws InternalErrorException if unexpected error occured\n-\t */\n-\tboolean serviceExists(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Check if service exists in underlaying data source.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param service service to check\n-\t *\n-\t * @throws InternalErrorException if unexpected error occured\n-\t * @throws ServiceNotExistsException if service doesn't exists\n-\t */\n-\tvoid checkServiceExists(PerunSession perunSession, Service service) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * Check if services package exists in underlaying data source.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param servicesPackage services package to check\n-\t * @return true if services package exists in underlaying data source, false otherwise\n-\t *\n-\t * @throws InternalErrorException if unexpected error occur\n-\t */\n-\tboolean servicesPackageExists(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Check if services package exists in underlaying data source.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param servicesPackage services package to check\n-\t *\n-\t * @throws InternalErrorException if unexpected error occur\n-\t * @throws ServicesPackageNotExistsException if service doesn't exists\n-\t */\n-\tvoid checkServicesPackageExists(PerunSession perunSession, ServicesPackage servicesPackage) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Adds an destination for the facility and service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @param destination string contains destination address (mail, url, hostname, ...)\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyAssignedException\n-\t */\n-\tvoid addDestination(PerunSession perunSession, Service service, Facility facility, Destination destination);\n-\n-\t/**\n-\t * Removes an destination from the facility and service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @param destination string contains destination address (mail, url, hostname, ...)\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyRemovedException\n-\t */\n-\tvoid removeDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyRemovedException;\n-\n-\t/**\n-\t * Get destination by id\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return Destination with the id\n-\t * @throws InternalErrorException\n-\t * @throws DestinationNotExistsException\n-\t */\n-\tDestination getDestinationById(PerunSession perunSession, int id) throws DestinationNotExistsException;\n-\n-\n-\t/**\n-\t * Get list of all destinations defined for the service and facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @return list list of destinations defined for the service and facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Get list of all destinations.\n-\t *\n-\t * @param perunSession\n-\t * @return list of all destinations for session\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession);\n-\n-\t/**\n-\t * Get lists of all destinations for specific Facility\n-\t *\n-\t * @param perunSession\n-\t * @param facility the facility\n-\t * @return lists of all destinations for specific Facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of rich destinations defined for the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return list of rich destinations defined for the service\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the service and the facility\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @param service\n-\t * @return list of rich destinations defined for the service and the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service);\n-\n-\t/**\n-\t * Removes all defined destinations for the service and facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllDestinations(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Removes all defined destinations for the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get destination by String destination and type\n-\t *\n-\t * @param sess\n-\t * @param destination Destination string representation\n-\t * @param type type of destination\n-\t * @return Destination\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws DestinationNotExistsException\n-\t */\n-\tDestination getDestination(PerunSession sess, String destination, String type) throws DestinationNotExistsException;\n-\n-\t/**\n-\t *  Determine if destination exists for specified facility and service.\n-\t *\n-\t * @param sess\n-\t * @param service\n-\t * @param facility\n-\t * @param destination\n-\t * @return true if the destination exists for the facility and the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean destinationExists(PerunSession sess, Service service, Facility facility, Destination destination);\n-\n-\tDestination createDestination(PerunSession sess, Destination destination);\n-\n-\tboolean destinationExists(PerunSession sess, Destination destination);\n-\n-\t/**\n-\t * List all services associated with the facility (via resource).\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t *\n-\t * @throws InternalErrorException\n-\t *\n-\t * @return list of services assigned  to facility\n-\t */\n-\tList<Service> getAssignedServices(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * List all destinations for all facilities which are joined by resources to the VO.\n-\t *\n-\t * @param sess\n-\t * @param vo vo for which we are searching destinations\n-\t * @return list of destinations\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get count of all destinations.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all destinations\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getDestinationsCount(PerunSession perunSession);\n+    /**\n+     * Mark the attribute as required for the service. Required attribues are requisite for Service to run.\n+     * If you add attribute which has a default attribute then this default attribute will be automatically add too.\n+     *\n+     * @param perunSession perunSession\n+     * @param service      service to which the attribute will be added\n+     * @param attribute    attribute to add\n+     * @throws InternalErrorException            if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ServiceNotExistsException         if the service doesn't exists in underlaying data source\n+     * @throws AttributeAlreadyAssignedException if the attribute is already added\n+     */\n+    void addRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeAlreadyAssignedException;\n+\n+    /**\n+     * Batch version of addRequiredAttribute\n+     *\n+     * @see cz.metacentrum.perun.core.api.ServicesManager#addRequiredAttribute(PerunSession, Service, AttributeDefinition)\n+     */\n+    void addRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeAlreadyAssignedException;\n+\n+    /**\n+     * Remove required attribute from service.\n+     * TODO If you try to remove attribute which is default for other Required attribute ...\n+     *\n+     * @param perunSession perunSession\n+     * @param service      service from which the attribute will be removed\n+     * @param attribute    attribute to remove\n+     * @throws InternalErrorException        if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws AttributeNotAssignedException\n+     * @throws ServiceNotExistsException     if the service doesn't exists in underlaying data source\n+     */\n+    void removeRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeNotAssignedException;\n+\n+    /**\n+     * Batch version of removeRequiredAttribute\n+     *\n+     * @see cz.metacentrum.perun.core.api.ServicesManager#removeRequiredAttribute(PerunSession, Service, AttributeDefinition)\n+     */\n+    void removeRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeNotAssignedException;\n+\n+    /**\n+     * Detate all required attributes from service\n+     *\n+     * @param perunSession perunSession\n+     * @param service      service from which the attributes will be removed\n+     * @throws InternalErrorException    if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+     * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n+     */\n+    void removeAllRequiredAttributes(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Check if service exists in underlaying data source.\n+     *\n+     * @param perunSession perun session\n+     * @param service      service to check\n+     * @return true if service exists in underlaying data source, false otherwise\n+     * @throws InternalErrorException if unexpected error occured\n+     */\n+    boolean serviceExists(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Check if service exists in underlaying data source.\n+     *\n+     * @param perunSession perun session\n+     * @param service      service to check\n+     * @throws InternalErrorException    if unexpected error occured\n+     * @throws ServiceNotExistsException if service doesn't exists\n+     */\n+    void checkServiceExists(PerunSession perunSession, Service service) throws ServiceNotExistsException;\n+\n+    /**\n+     * Check if services package exists in underlaying data source.\n+     *\n+     * @param perunSession    perun session\n+     * @param servicesPackage services package to check\n+     * @return true if services package exists in underlaying data source, false otherwise\n+     * @throws InternalErrorException if unexpected error occur\n+     */\n+    boolean servicesPackageExists(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+    /**\n+     * Check if services package exists in underlaying data source.\n+     *\n+     * @param perunSession    perun session\n+     * @param servicesPackage services package to check\n+     * @throws InternalErrorException            if unexpected error occur\n+     * @throws ServicesPackageNotExistsException if service doesn't exists\n+     */\n+    void checkServicesPackageExists(PerunSession perunSession, ServicesPackage servicesPackage) throws ServicesPackageNotExistsException;\n+\n+    /**\n+     * Adds an destination for the facility and service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @param destination  string contains destination address (mail, url, hostname, ...)\n+     * @throws InternalErrorException\n+     * @throws DestinationAlreadyAssignedException\n+     */\n+    void addDestination(PerunSession perunSession, Service service, Facility facility, Destination destination);\n+\n+    /**\n+     * Removes an destination from the facility and service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @param destination  string contains destination address (mail, url, hostname, ...)\n+     * @throws InternalErrorException\n+     * @throws DestinationAlreadyRemovedException\n+     */\n+    void removeDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyRemovedException;\n+\n+    /**\n+     * Get destination by id\n+     *\n+     * @param perunSession\n+     * @param id\n+     * @return Destination with the id\n+     * @throws InternalErrorException\n+     * @throws DestinationNotExistsException\n+     */\n+    Destination getDestinationById(PerunSession perunSession, int id) throws DestinationNotExistsException;\n+\n+\n+    /**\n+     * Get list of all destinations defined for the service and facility.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @return list list of destinations defined for the service and facility\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> getDestinations(PerunSession perunSession, Service service, Facility facility);\n+\n+    /**\n+     * Get list of all destinations.\n+     *\n+     * @param perunSession\n+     * @return list of all destinations for session\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> getDestinations(PerunSession perunSession);\n+\n+    /**\n+     * Get lists of all destinations for specific Facility\n+     *\n+     * @param perunSession\n+     * @param facility     the facility\n+     * @return lists of all destinations for specific Facility\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> getDestinations(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * Get list of all rich destinations defined for the facility.\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @return list of rich destinations defined for the facility\n+     * @throws InternalErrorException\n+     */\n+    List<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * Get list of all rich destinations defined for the service.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @return list of rich destinations defined for the service\n+     * @throws InternalErrorException\n+     */\n+    List<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service);\n+\n+    /**\n+     * Get list of all rich destinations defined for the service and the facility\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @param service\n+     * @return list of rich destinations defined for the service and the facility\n+     * @throws InternalErrorException\n+     */\n+    List<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service);\n+\n+    /**\n+     * Removes all defined destinations for the service and facility.\n+     *\n+     * @param perunSession\n+     * @param service\n+     * @param facility\n+     * @throws InternalErrorException\n+     */\n+    void removeAllDestinations(PerunSession perunSession, Service service, Facility facility);\n+\n+    /**\n+     * Removes all defined destinations for the facility.\n+     *\n+     * @param perunSession\n+     * @param facility     the facility\n+     * @throws InternalErrorException\n+     */\n+    void removeAllDestinations(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * Get destination by String destination and type\n+     *\n+     * @param sess\n+     * @param destination Destination string representation\n+     * @param type        type of destination\n+     * @return Destination\n+     * @throws InternalErrorException\n+     * @throws DestinationNotExistsException\n+     */\n+    Destination getDestination(PerunSession sess, String destination, String type) throws DestinationNotExistsException;\n+\n+    /**\n+     * Determine if destination exists for specified facility and service.\n+     *\n+     * @param sess\n+     * @param service\n+     * @param facility\n+     * @param destination\n+     * @return true if the destination exists for the facility and the resource\n+     * @throws InternalErrorException\n+     */\n+    boolean destinationExists(PerunSession sess, Service service, Facility facility, Destination destination);\n+\n+    Destination createDestination(PerunSession sess, Destination destination);\n+\n+    boolean destinationExists(PerunSession sess, Destination destination);\n+\n+    /**\n+     * List all services associated with the facility (via resource).\n+     *\n+     * @param perunSession\n+     * @param facility\n+     * @return list of services assigned  to facility\n+     * @throws InternalErrorException\n+     */\n+    List<Service> getAssignedServices(PerunSession perunSession, Facility facility);\n+\n+    /**\n+     * List all destinations for all facilities which are joined by resources to the VO.\n+     *\n+     * @param sess\n+     * @param vo   vo for which we are searching destinations\n+     * @return list of destinations\n+     * @throws InternalErrorException\n+     */\n+    List<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo);\n+\n+    /**\n+     * Get count of all destinations.\n+     *\n+     * @param perunSession\n+     * @return count of all destinations\n+     * @throws InternalErrorException\n+     */\n+    int getDestinationsCount(PerunSession perunSession);\n \n }\n",
            "diff_size": 572
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "381",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/296/ServicesManagerImplApi.java\nindex b345ddbeaac..ae3b150fba0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/296/ServicesManagerImplApi.java\n@@ -21,7 +21,6 @@ import cz.metacentrum.perun.core.api.exceptions.ServiceAlreadyRemovedException;\n import cz.metacentrum.perun.core.api.exceptions.ServiceAlreadyRemovedFromServicePackageException;\n import cz.metacentrum.perun.core.api.exceptions.ServiceNotExistsException;\n import cz.metacentrum.perun.core.api.exceptions.ServicesPackageNotExistsException;\n-\n import java.util.List;\n \n /**\n@@ -33,582 +32,695 @@ import java.util.List;\n  * GeneralServiceManager.\n  *\n  */\n+\n+\n public interface ServicesManagerImplApi {\n \n-\t/**\n-\t * Block Service on Facility. It won't be possible to propagate service on whole facility\n-\t * or any of its destinations.\n-\t *\n-\t * @param session\n-\t * @param serviceId The Service to be blocked on the Facility\n-\t * @param facilityId The Facility on which we want to block the Service\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockServiceOnFacility(PerunSession session, int serviceId, int facilityId) throws ServiceAlreadyBannedException;\n-\n-\t/**\n-\t * Block Service on specific Destination. Service still can be propagated to other facility Destinations.\n-\t *\n-\t * @param session\n-\t * @param serviceId The Service to be blocked on this particular destination\n-\t * @param destinationId The destination on which we want to block the Service\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid blockServiceOnDestination(PerunSession session, int serviceId, int destinationId) throws ServiceAlreadyBannedException;\n-\n-\t/**\n-\t * Unblock Service on whole Facility. If was not blocked, nothing happens.\n-\t *\n-\t * @param serviceId ID of Service to unblock on Facility.\n-\t * @param facilityId ID of Facility to unblock Service on.\n-\t */\n-\tvoid unblockServiceOnFacility(int serviceId, int facilityId);\n-\n-\t/**\n-\t * Unblock Service on specific Destination. If was not blocked, nothing happens.\n-\t *\n-\t * @param serviceId ID of Service to unblock on Destination.\n-\t * @param destinationId ID of Destination to unblock Service on.\n-\t */\n-\tvoid unblockServiceOnDestination(int serviceId, int destinationId);\n-\n-\t/**\n-\t * Unblock all blocked Services on Facility.\n-\t *\n-\t * @param facility ID of Facility we want to unblock all Services.\n-\t */\n-\tvoid unblockAllServicesOnFacility(int facility);\n-\n-\t/**\n-\t * Unblock all blocked Services on specified Destination.\n-\t *\n-\t * @param destination ID of Destination we want to unblock all Services.\n-\t */\n-\tvoid unblockAllServicesOnDestination(int destination);\n-\n-\t/**\n-\t * Unblock Service everywhere. If was not blocked, nothing happens.\n-\t *\n-\t * @param serviceId ID of Service to unblock.\n-\t */\n-\tvoid unblockService(int serviceId);\n-\n-\t/**\n-\t * Get Services blocked on Facility.\n-\t *\n-\t * @param facilityId ID of Facility to get blocked Services for.\n-\t * @return List of blocked Services.\n-\t */\n-\tList<Service> getServicesBlockedOnFacility(int facilityId);\n-\n-\t/**\n-\t * Get Services blocked on Destination.\n-\t *\n-\t * @param destinationId ID of Destination to get blocked Services for.\n-\t * @return List of blocked Services.\n-\t */\n-\tList<Service> getServicesBlockedOnDestination(int destinationId);\n-\n-\t/**\n-\t * Return TRUE if Service is blocked on Facility.\n-\t *\n-\t * @param serviceId ID of Service to check on.\n-\t * @param facilityId ID of Facility to check on.\n-\t * @return TRUE if Service is blocked on Facility / FALSE otherwise\n-\t */\n-\tboolean isServiceBlockedOnFacility(int serviceId, int facilityId);\n-\n-\t/**\n-\t * Return TRUE if Service is blocked on Destination.\n-\t *\n-\t * @param serviceId ID of Service to check on.\n-\t * @param destinationId ID of Destination to check on.\n-\t * @return TRUE if Service is blocked on Destination / FALSE otherwise\n-\t */\n-\tboolean isServiceBlockedOnDestination(int serviceId, int destinationId);\n-\n-\t/**\n-\t * Return list of services this destination points to.\n-\t *\n-\t * @param destinationId ID of destination\n-\t * @return Services associated with this destination.\n-\t */\n-\tList<Service> getServicesFromDestination(int destinationId);\n-\n-\t/**\n-\t * Creates new service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return new service\n-\t */\n-\tService createService(PerunSession perunSession, Service service);\n-\n-\t/** Deletes the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t *\n-\t * @throws ServiceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n-\t */\n-\tvoid deleteService(PerunSession perunSession, Service service) throws ServiceAlreadyRemovedException;\n-\n-\t/** Updates the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t */\n-\tvoid updateService(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Get service by id.\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return service with specified id\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t */\n-\tService getServiceById(PerunSession perunSession, int id) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * Get service by name.\n-\t *\n-\t * @param perunSession\n-\t * @param name name of the service\n-\t * @return service with specified name\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t */\n-\tService getServiceByName(PerunSession perunSession, String name) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * get all services in perun\n-\t *\n-\t * @param perunSession\n-\t * @return all services in perun\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServices(PerunSession perunSession);\n-\n-\t/**\n-\t * Get all services with given attribute.\n-\t *\n-\t * @param sess perun session\n-\t * @param attributeDefinition\n-\t * @return all services with given attribute\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition);\n-\n-\t/**\n-\t * Get all resources which use this service.\n-\t *\n-\t * @param sess\n-\t * @param service\n-\t * @return list of resources\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Resource> getAssignedResources(PerunSession sess, Service service);\n-\n-\t/**\n-\t * List packages\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return list of packages in the DB\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<ServicesPackage> getServicesPackages(PerunSession perunSession);\n-\n-\t/**\n-\t * Get package by Id\n-\t *\n-\t * @param servicesPackageId id of the package we want to retrieve\n-\t * @param perunSession\n-\t *\n-\t * @return package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tServicesPackage getServicesPackageById(PerunSession perunSession, int servicesPackageId) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Get services package by name.\n-\t * @param sess\n-\t * @param name\n-\t * @return package\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tServicesPackage getServicesPackageByName(PerunSession sess, String name) throws ServicesPackageNotExistsException;\n-\t/**\n-\t * Insert a new package\n-\t *\n-\t * @param servicesPackage package to be inserted\n-\t * @param perunSession\n-\t *\n-\t * @return ServicesPackage object completely filled (including Id)\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tServicesPackage createServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Update package\n-\t *\n-\t * @param servicesPackage with which is the old one supposed to be updated :-)\n-\t * @param perunSession\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid updateServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Remove the package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package to be removed.\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tvoid deleteServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Add the service to the package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package to which the service supposed to be added\n-\t * @param service service to be added to the services package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceAlreadyAssignedException\n-\t */\n-\tvoid addServiceToServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove Service from Services Package\n-\t *\n-\t * @param perunSession\n-\t * @param servicesPackage services package from which the service supposed to be removed\n-\t * @param service service that will be removed from the services package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n-\t */\n-\tvoid removeServiceFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyRemovedFromServicePackageException;\n-\n-\t/**\n-\t * Remove Service from all Services Packages\n-\t *\n-\t * @param perunSession\n-\t * @param service service that will be removed from the services package\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServiceNotExistsException\n-\t * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n-\t */\n-\tvoid removeServiceFromAllServicesPackages(PerunSession sess, Service service);\n-\t\n-\t/**\n-\t * List services stored in the packages\n-\t *\n-\t * @param servicesPackage the package from which we want to list the services\n-\t *\n-\t * @return list consisting services\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws ServicesPackageNotExistsException\n-\t */\n-\tList<Service> getServicesFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/*\n-\t\t getRequiredAttributes(PerunSession perunSession, Service service);\n-\t\t */\n-\n-\t/**\n-\t * Mark the attribute as required for the service. Required attribues are requisite for Service to run.\n-\t * If you add attribute which has a default attribute then this default attribute will be automatically add too.\n-\t *\n-\t * @param perunSession perunSession\n-\t * @param service service to which the attribute will be added\n-\t * @param attribute attribute to add\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n-\t * @throws AttributeAlreadyAssignedException if the attribute is already added\n-\t */\n-\tvoid addRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeAlreadyAssignedException;\n-\n-\t/**\n-\t *  Batch version of addRequiredAttribute\n-\t *  @see cz.metacentrum.perun.core.api.ServicesManager#addRequiredAttribute(PerunSession,Service,AttributeDefinition)\n-\t */\n-\tvoid addRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeAlreadyAssignedException;\n-\n-\t/**\n-\t * Remove required attribute from service.\n-\t * TODO If you try to remove attribute which is default for other Required attribute ...\n-\t *\n-\t * @param perunSession perunSession\n-\t * @param service service from which the attribute will be removed\n-\t * @param attribute attribute to remove\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws AttributeNotAssignedException\n-\t * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n-\t */\n-\tvoid removeRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeNotAssignedException;\n-\n-\t/**\n-\t *  Batch version of removeRequiredAttribute\n-\t *  @see cz.metacentrum.perun.core.api.ServicesManager#removeRequiredAttribute(PerunSession,Service,AttributeDefinition)\n-\t */\n-\tvoid removeRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeNotAssignedException;\n-\n-\t/**\n-\t * Detate all required attributes from service\n-\t *\n-\t * @param perunSession perunSession\n-\t * @param service service from which the attributes will be removed\n-\t *\n-\t * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n-\t * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n-\t */\n-\tvoid removeAllRequiredAttributes(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Check if service exists in underlaying data source.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param service service to check\n-\t * @return true if service exists in underlaying data source, false otherwise\n-\t *\n-\t * @throws InternalErrorException if unexpected error occured\n-\t */\n-\tboolean serviceExists(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Check if service exists in underlaying data source.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param service service to check\n-\t *\n-\t * @throws InternalErrorException if unexpected error occured\n-\t * @throws ServiceNotExistsException if service doesn't exists\n-\t */\n-\tvoid checkServiceExists(PerunSession perunSession, Service service) throws ServiceNotExistsException;\n-\n-\t/**\n-\t * Check if services package exists in underlaying data source.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param servicesPackage services package to check\n-\t * @return true if services package exists in underlaying data source, false otherwise\n-\t *\n-\t * @throws InternalErrorException if unexpected error occur\n-\t */\n-\tboolean servicesPackageExists(PerunSession perunSession, ServicesPackage servicesPackage);\n-\n-\t/**\n-\t * Check if services package exists in underlaying data source.\n-\t *\n-\t * @param perunSession perun session\n-\t * @param servicesPackage services package to check\n-\t *\n-\t * @throws InternalErrorException if unexpected error occur\n-\t * @throws ServicesPackageNotExistsException if service doesn't exists\n-\t */\n-\tvoid checkServicesPackageExists(PerunSession perunSession, ServicesPackage servicesPackage) throws ServicesPackageNotExistsException;\n-\n-\t/**\n-\t * Adds an destination for the facility and service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @param destination string contains destination address (mail, url, hostname, ...)\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyAssignedException\n-\t */\n-\tvoid addDestination(PerunSession perunSession, Service service, Facility facility, Destination destination);\n-\n-\t/**\n-\t * Removes an destination from the facility and service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @param destination string contains destination address (mail, url, hostname, ...)\n-\t * @throws InternalErrorException\n-\t * @throws DestinationAlreadyRemovedException\n-\t */\n-\tvoid removeDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyRemovedException;\n-\n-\t/**\n-\t * Get destination by id\n-\t *\n-\t * @param perunSession\n-\t * @param id\n-\t * @return Destination with the id\n-\t * @throws InternalErrorException\n-\t * @throws DestinationNotExistsException\n-\t */\n-\tDestination getDestinationById(PerunSession perunSession, int id) throws DestinationNotExistsException;\n-\n-\n-\t/**\n-\t * Get list of all destinations defined for the service and facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @return list list of destinations defined for the service and facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Get list of all destinations.\n-\t *\n-\t * @param perunSession\n-\t * @return list of all destinations for session\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession);\n-\n-\t/**\n-\t * Get lists of all destinations for specific Facility\n-\t *\n-\t * @param perunSession\n-\t * @param facility the facility\n-\t * @return lists of all destinations for specific Facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @return list of rich destinations defined for the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the service.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @return list of rich destinations defined for the service\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service);\n-\n-\t/**\n-\t * Get list of all rich destinations defined for the service and the facility\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t * @param service\n-\t * @return list of rich destinations defined for the service and the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tList<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service);\n-\n-\t/**\n-\t * Removes all defined destinations for the service and facility.\n-\t *\n-\t * @param perunSession\n-\t * @param service\n-\t * @param facility\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllDestinations(PerunSession perunSession, Service service, Facility facility);\n-\n-\t/**\n-\t * Removes all defined destinations for the facility.\n-\t *\n-\t * @param perunSession\n-\t * @param facility the facility\n-\t * @throws InternalErrorException\n-\t */\n-\tvoid removeAllDestinations(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * Get destination by String destination and type\n-\t *\n-\t * @param sess\n-\t * @param destination Destination string representation\n-\t * @param type type of destination\n-\t * @return Destination\n-\t *\n-\t * @throws InternalErrorException\n-\t * @throws DestinationNotExistsException\n-\t */\n-\tDestination getDestination(PerunSession sess, String destination, String type) throws DestinationNotExistsException;\n-\n-\t/**\n-\t *  Determine if destination exists for specified facility and service.\n-\t *\n-\t * @param sess\n-\t * @param service\n-\t * @param facility\n-\t * @param destination\n-\t * @return true if the destination exists for the facility and the resource\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tboolean destinationExists(PerunSession sess, Service service, Facility facility, Destination destination);\n-\n-\tDestination createDestination(PerunSession sess, Destination destination);\n-\n-\tboolean destinationExists(PerunSession sess, Destination destination);\n-\n-\t/**\n-\t * List all services associated with the facility (via resource).\n-\t *\n-\t * @param perunSession\n-\t * @param facility\n-\t *\n-\t * @throws InternalErrorException\n-\t *\n-\t * @return list of services assigned  to facility\n-\t */\n-\tList<Service> getAssignedServices(PerunSession perunSession, Facility facility);\n-\n-\t/**\n-\t * List all destinations for all facilities which are joined by resources to the VO.\n-\t *\n-\t * @param sess\n-\t * @param vo vo for which we are searching destinations\n-\t * @return list of destinations\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tList<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo);\n-\n-\t/**\n-\t * Get count of all destinations.\n-\t *\n-\t * @param perunSession\n-\t *\n-\t * @return count of all destinations\n-\t *\n-\t * @throws InternalErrorException\n-\t */\n-\tint getDestinationsCount(PerunSession perunSession);\n-\n-}\n+ /**\n+  * Block Service on Facility. It won't be possible to propagate service on whole facility\n+  * or any of its destinations.\n+  *\n+  * @param session\n+  * @param serviceId The Service to be blocked on the Facility\n+  * @param facilityId The Facility on which we want to block the Service\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void blockServiceOnFacility(PerunSession session, int serviceId, int facilityId) throws ServiceAlreadyBannedException;\n+\n+ /**\n+  * Block Service on specific Destination. Service still can be propagated to other facility Destinations.\n+  *\n+  * @param session\n+  * @param serviceId The Service to be blocked on this particular destination\n+  * @param destinationId The destination on which we want to block the Service\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void blockServiceOnDestination(PerunSession session, int serviceId, int destinationId) throws ServiceAlreadyBannedException;\n+\n+ /**\n+  * Unblock Service on whole Facility. If was not blocked, nothing happens.\n+  *\n+  * @param serviceId ID of Service to unblock on Facility.\n+  * @param facilityId ID of Facility to unblock Service on.\n+  */\n+\n+\n+ void unblockServiceOnFacility(int serviceId, int facilityId);\n+\n+ /**\n+  * Unblock Service on specific Destination. If was not blocked, nothing happens.\n+  *\n+  * @param serviceId ID of Service to unblock on Destination.\n+  * @param destinationId ID of Destination to unblock Service on.\n+  */\n+\n+\n+ void unblockServiceOnDestination(int serviceId, int destinationId);\n+\n+ /**\n+  * Unblock all blocked Services on Facility.\n+  *\n+  * @param facility ID of Facility we want to unblock all Services.\n+  */\n+\n+\n+ void unblockAllServicesOnFacility(int facility);\n+\n+ /**\n+  * Unblock all blocked Services on specified Destination.\n+  *\n+  * @param destination ID of Destination we want to unblock all Services.\n+  */\n+\n+\n+ void unblockAllServicesOnDestination(int destination);\n+\n+ /**\n+  * Unblock Service everywhere. If was not blocked, nothing happens.\n+  *\n+  * @param serviceId ID of Service to unblock.\n+  */\n+\n+\n+ void unblockService(int serviceId);\n+\n+ /**\n+  * Get Services blocked on Facility.\n+  *\n+  * @param facilityId ID of Facility to get blocked Services for.\n+  * @return List of blocked Services.\n+  */\n+\n+\n+ List<Service> getServicesBlockedOnFacility(int facilityId);\n+\n+ /**\n+  * Get Services blocked on Destination.\n+  *\n+  * @param destinationId ID of Destination to get blocked Services for.\n+  * @return List of blocked Services.\n+  */\n+\n+\n+ List<Service> getServicesBlockedOnDestination(int destinationId);\n+\n+ /**\n+  * Return TRUE if Service is blocked on Facility.\n+  *\n+  * @param serviceId ID of Service to check on.\n+  * @param facilityId ID of Facility to check on.\n+  * @return TRUE if Service is blocked on Facility / FALSE otherwise\n+  */\n+\n+\n+ boolean isServiceBlockedOnFacility(int serviceId, int facilityId);\n+\n+ /**\n+  * Return TRUE if Service is blocked on Destination.\n+  *\n+  * @param serviceId ID of Service to check on.\n+  * @param destinationId ID of Destination to check on.\n+  * @return TRUE if Service is blocked on Destination / FALSE otherwise\n+  */\n+\n+\n+ boolean isServiceBlockedOnDestination(int serviceId, int destinationId);\n+\n+ /**\n+  * Return list of services this destination points to.\n+  *\n+  * @param destinationId ID of destination\n+  * @return Services associated with this destination.\n+  */\n+\n+\n+ List<Service> getServicesFromDestination(int destinationId);\n+\n+ /**\n+  * Creates new service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @return new service\n+  */\n+\n+\n+ Service createService(PerunSession perunSession, Service service);\n+\n+ /** Deletes the service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  *\n+  * @throws ServiceAlreadyRemovedException if there are 0 rows affected by deleting from DB\n+  */\n+\n+\n+ void deleteService(PerunSession perunSession, Service service) throws ServiceAlreadyRemovedException;\n+\n+ /** Updates the service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  */\n+\n+\n+ void updateService(PerunSession perunSession, Service service);\n+\n+ /**\n+  * Get service by id.\n+  *\n+  * @param perunSession\n+  * @param id\n+  * @return service with specified id\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServiceNotExistsException\n+  */\n+\n+\n+ Service getServiceById(PerunSession perunSession, int id) throws ServiceNotExistsException;\n+\n+ /**\n+  * Get service by name.\n+  *\n+  * @param perunSession\n+  * @param name name of the service\n+  * @return service with specified name\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServiceNotExistsException\n+  */\n+\n+\n+ Service getServiceByName(PerunSession perunSession, String name) throws ServiceNotExistsException;\n+\n+ /**\n+  * get all services in perun\n+  *\n+  * @param perunSession\n+  * @return all services in perun\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Service> getServices(PerunSession perunSession);\n+\n+ /**\n+  * Get all services with given attribute.\n+  *\n+  * @param sess perun session\n+  * @param attributeDefinition\n+  * @return all services with given attribute\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Service> getServicesByAttributeDefinition(PerunSession sess, AttributeDefinition attributeDefinition);\n+\n+ /**\n+  * Get all resources which use this service.\n+  *\n+  * @param sess\n+  * @param service\n+  * @return list of resources\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Resource> getAssignedResources(PerunSession sess, Service service);\n+\n+ /**\n+  * List packages\n+  *\n+  * @param perunSession\n+  *\n+  * @return list of packages in the DB\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<ServicesPackage> getServicesPackages(PerunSession perunSession);\n+\n+ /**\n+  * Get package by Id\n+  *\n+  * @param servicesPackageId id of the package we want to retrieve\n+  * @param perunSession\n+  *\n+  * @return package\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ ServicesPackage getServicesPackageById(PerunSession perunSession, int servicesPackageId) throws ServicesPackageNotExistsException;\n+\n+ /**\n+  * Get services package by name.\n+  * @param sess\n+  * @param name\n+  * @return package\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ ServicesPackage getServicesPackageByName(PerunSession sess, String name) throws ServicesPackageNotExistsException;\n+ /**\n+  * Insert a new package\n+  *\n+  * @param servicesPackage package to be inserted\n+  * @param perunSession\n+  *\n+  * @return ServicesPackage object completely filled (including Id)\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ ServicesPackage createServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+ /**\n+  * Update package\n+  *\n+  * @param servicesPackage with which is the old one supposed to be updated :-)\n+  * @param perunSession\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ void updateServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+ /**\n+  * Remove the package\n+  *\n+  * @param perunSession\n+  * @param servicesPackage services package to be removed.\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ void deleteServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+ /**\n+  * Add the service to the package\n+  *\n+  * @param perunSession\n+  * @param servicesPackage services package to which the service supposed to be added\n+  * @param service service to be added to the services package\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageNotExistsException\n+  * @throws ServiceNotExistsException\n+  * @throws ServiceAlreadyAssignedException\n+  */\n+\n+\n+ void addServiceToServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyAssignedException;\n+\n+ /**\n+  * Remove Service from Services Package\n+  *\n+  * @param perunSession\n+  * @param servicesPackage services package from which the service supposed to be removed\n+  * @param service service that will be removed from the services package\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageNotExistsException\n+  * @throws ServiceNotExistsException\n+  * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n+  */\n+\n+\n+ void removeServiceFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage, Service service) throws ServiceAlreadyRemovedFromServicePackageException;\n+\n+ /**\n+  * Remove Service from all Services Packages\n+  *\n+  * @param perunSession\n+  * @param service service that will be removed from the services package\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServiceNotExistsException\n+  * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n+  */\n+\n+\n+ void removeServiceFromAllServicesPackages(PerunSession sess, Service service);\n+ \n+ /**\n+  * List services stored in the packages\n+  *\n+  * @param servicesPackage the package from which we want to list the services\n+  *\n+  * @return list consisting services\n+  *\n+  * @throws InternalErrorException\n+  * @throws ServicesPackageNotExistsException\n+  */\n+\n+\n+ List<Service> getServicesFromServicesPackage(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+ /*\n+   getRequiredAttributes(PerunSession perunSession, Service service);\n+   */\n+\n+ /**\n+  * Mark the attribute as required for the service. Required attribues are requisite for Service to run.\n+  * If you add attribute which has a default attribute then this default attribute will be automatically add too.\n+  *\n+  * @param perunSession perunSession\n+  * @param service service to which the attribute will be added\n+  * @param attribute attribute to add\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n+  * @throws AttributeAlreadyAssignedException if the attribute is already added\n+  */\n+\n+\n+ void addRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeAlreadyAssignedException;\n+\n+ /**\n+  *  Batch version of addRequiredAttribute\n+  *  @see cz.metacentrum.perun.core.api.ServicesManager#addRequiredAttribute(PerunSession,Service,AttributeDefinition)\n+  */\n+\n+\n+ void addRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeAlreadyAssignedException;\n+\n+ /**\n+  * Remove required attribute from service.\n+  * TODO If you try to remove attribute which is default for other Required attribute ...\n+  *\n+  * @param perunSession perunSession\n+  * @param service service from which the attribute will be removed\n+  * @param attribute attribute to remove\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws AttributeNotAssignedException\n+  * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n+  */\n+\n+\n+ void removeRequiredAttribute(PerunSession perunSession, Service service, AttributeDefinition attribute) throws AttributeNotAssignedException;\n+\n+ /**\n+  *  Batch version of removeRequiredAttribute\n+  *  @see cz.metacentrum.perun.core.api.ServicesManager#removeRequiredAttribute(PerunSession,Service,AttributeDefinition)\n+  */\n+\n+\n+ void removeRequiredAttributes(PerunSession perunSession, Service service, List<? extends AttributeDefinition> attributes) throws AttributeNotAssignedException;\n+\n+ /**\n+  * Detate all required attributes from service\n+  *\n+  * @param perunSession perunSession\n+  * @param service service from which the attributes will be removed\n+  *\n+  * @throws InternalErrorException if an exception raise in concrete implementation, the exception is wrapped in InternalErrorException\n+  * @throws ServiceNotExistsException if the service doesn't exists in underlaying data source\n+  */\n+\n+\n+ void removeAllRequiredAttributes(PerunSession perunSession, Service service);\n+\n+ /**\n+  * Check if service exists in underlaying data source.\n+  *\n+  * @param perunSession perun session\n+  * @param service service to check\n+  * @return true if service exists in underlaying data source, false otherwise\n+  *\n+  * @throws InternalErrorException if unexpected error occured\n+  */\n+\n+\n+ boolean serviceExists(PerunSession perunSession, Service service);\n+\n+ /**\n+  * Check if service exists in underlaying data source.\n+  *\n+  * @param perunSession perun session\n+  * @param service service to check\n+  *\n+  * @throws InternalErrorException if unexpected error occured\n+  * @throws ServiceNotExistsException if service doesn't exists\n+  */\n+\n+\n+ void checkServiceExists(PerunSession perunSession, Service service) throws ServiceNotExistsException;\n+\n+ /**\n+  * Check if services package exists in underlaying data source.\n+  *\n+  * @param perunSession perun session\n+  * @param servicesPackage services package to check\n+  * @return true if services package exists in underlaying data source, false otherwise\n+  *\n+  * @throws InternalErrorException if unexpected error occur\n+  */\n+\n+\n+ boolean servicesPackageExists(PerunSession perunSession, ServicesPackage servicesPackage);\n+\n+ /**\n+  * Check if services package exists in underlaying data source.\n+  *\n+  * @param perunSession perun session\n+  * @param servicesPackage services package to check\n+  *\n+  * @throws InternalErrorException if unexpected error occur\n+  * @throws ServicesPackageNotExistsException if service doesn't exists\n+  */\n+\n+\n+ void checkServicesPackageExists(PerunSession perunSession, ServicesPackage servicesPackage) throws ServicesPackageNotExistsException;\n+\n+ /**\n+  * Adds an destination for the facility and service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @param destination string contains destination address (mail, url, hostname, ...)\n+  * @throws InternalErrorException\n+  * @throws DestinationAlreadyAssignedException\n+  */\n+\n+\n+ void addDestination(PerunSession perunSession, Service service, Facility facility, Destination destination);\n+\n+ /**\n+  * Removes an destination from the facility and service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @param destination string contains destination address (mail, url, hostname, ...)\n+  * @throws InternalErrorException\n+  * @throws DestinationAlreadyRemovedException\n+  */\n+\n+\n+ void removeDestination(PerunSession perunSession, Service service, Facility facility, Destination destination) throws DestinationAlreadyRemovedException;\n+\n+ /**\n+  * Get destination by id\n+  *\n+  * @param perunSession\n+  * @param id\n+  * @return Destination with the id\n+  * @throws InternalErrorException\n+  * @throws DestinationNotExistsException\n+  */\n+\n+\n+ Destination getDestinationById(PerunSession perunSession, int id) throws DestinationNotExistsException;\n+\n+\n+ /**\n+  * Get list of all destinations defined for the service and facility.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @return list list of destinations defined for the service and facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> getDestinations(PerunSession perunSession, Service service, Facility facility);\n+\n+ /**\n+  * Get list of all destinations.\n+  *\n+  * @param perunSession\n+  * @return list of all destinations for session\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> getDestinations(PerunSession perunSession);\n+\n+ /**\n+  * Get lists of all destinations for specific Facility\n+  *\n+  * @param perunSession\n+  * @param facility the facility\n+  * @return lists of all destinations for specific Facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> getDestinations(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * Get list of all rich destinations defined for the facility.\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @return list of rich destinations defined for the facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichDestination> getAllRichDestinations(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * Get list of all rich destinations defined for the service.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @return list of rich destinations defined for the service\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichDestination> getAllRichDestinations(PerunSession perunSession, Service service);\n+\n+ /**\n+  * Get list of all rich destinations defined for the service and the facility\n+  *\n+  * @param perunSession\n+  * @param facility\n+  * @param service\n+  * @return list of rich destinations defined for the service and the facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<RichDestination> getRichDestinations(PerunSession perunSession, Facility facility, Service service);\n+\n+ /**\n+  * Removes all defined destinations for the service and facility.\n+  *\n+  * @param perunSession\n+  * @param service\n+  * @param facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllDestinations(PerunSession perunSession, Service service, Facility facility);\n+\n+ /**\n+  * Removes all defined destinations for the facility.\n+  *\n+  * @param perunSession\n+  * @param facility the facility\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ void removeAllDestinations(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * Get destination by String destination and type\n+  *\n+  * @param sess\n+  * @param destination Destination string representation\n+  * @param type type of destination\n+  * @return Destination\n+  *\n+  * @throws InternalErrorException\n+  * @throws DestinationNotExistsException\n+  */\n+\n+\n+ Destination getDestination(PerunSession sess, String destination, String type) throws DestinationNotExistsException;\n+\n+ /**\n+  *  Determine if destination exists for specified facility and service.\n+  *\n+  * @param sess\n+  * @param service\n+  * @param facility\n+  * @param destination\n+  * @return true if the destination exists for the facility and the resource\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ boolean destinationExists(PerunSession sess, Service service, Facility facility, Destination destination);\n+\n+\n+ Destination createDestination(PerunSession sess, Destination destination);\n+\n+\n+ boolean destinationExists(PerunSession sess, Destination destination);\n+\n+ /**\n+  * List all services associated with the facility (via resource).\n+  *\n+  * @param perunSession\n+  * @param facility\n+  *\n+  * @throws InternalErrorException\n+  *\n+  * @return list of services assigned  to facility\n+  */\n+\n+\n+ List<Service> getAssignedServices(PerunSession perunSession, Facility facility);\n+\n+ /**\n+  * List all destinations for all facilities which are joined by resources to the VO.\n+  *\n+  * @param sess\n+  * @param vo vo for which we are searching destinations\n+  * @return list of destinations\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ List<Destination> getFacilitiesDestinations(PerunSession sess, Vo vo);\n+\n+ /**\n+  * Get count of all destinations.\n+  *\n+  * @param perunSession\n+  *\n+  * @return count of all destinations\n+  *\n+  * @throws InternalErrorException\n+  */\n+\n+\n+ int getDestinationsCount(PerunSession perunSession);\n+}\n\\ No newline at end of file\n",
            "diff_size": 691
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/296/ServicesManagerImplApi.java\nindex b345ddbeaac..8d5a31fe36c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/296/ServicesManagerImplApi.java\n@@ -319,7 +319,7 @@ public interface ServicesManagerImplApi {\n \t * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n \t */\n \tvoid removeServiceFromAllServicesPackages(PerunSession sess, Service service);\n-\t\n+\n \t/**\n \t * List services stored in the packages\n \t *\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/296/ServicesManagerImplApi.java\nindex b345ddbeaac..f668add9565 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/296/ServicesManagerImplApi.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/296/ServicesManagerImplApi.java\n@@ -318,8 +318,9 @@ public interface ServicesManagerImplApi {\n \t * @throws ServiceNotExistsException\n \t * @throws ServiceAlreadyRemovedFromServicePackageException there are 0 rows affected by removing service from service package in DB\n \t */\n-\tvoid removeServiceFromAllServicesPackages(PerunSession sess, Service service);\n-\t\n+\tvoid removeServiceFromAllServicesPackages(PerunSession sess, Service service)\n+\n+\t;\n \t/**\n \t * List services stored in the packages\n \t *\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}