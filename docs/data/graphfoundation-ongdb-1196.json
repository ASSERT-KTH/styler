{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1196",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "113",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "204",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1196/UserFunctionSignature.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1196/UserFunctionSignature.java\nindex f0ebaf7ce45..48691b673ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1196/UserFunctionSignature.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1196/UserFunctionSignature.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.procs;\n \n import java.util.Arrays;\n@@ -34,173 +35,177 @@ import static java.util.Collections.unmodifiableList;\n  */\n public final class UserFunctionSignature\n {\n+  private final QualifiedName name;\n+  private final List<FieldSignature> inputSignature;\n+  private final Neo4jTypes.AnyType type;\n+  private final String[] allowed;\n+  private final String deprecated;\n+  private final String description;\n+  private final boolean caseInsensitive;\n+\n+  public UserFunctionSignature(QualifiedName name,\n+                               List<FieldSignature> inputSignature,\n+                               Neo4jTypes.AnyType type,\n+                               String deprecated,\n+                               String[] allowed,\n+                               String description,\n+                               boolean caseInsensitive)\n+  {\n+    this.name = name;\n+    this.inputSignature = unmodifiableList(inputSignature);\n+    this.type = type;\n+    this.deprecated = deprecated;\n+    this.description = description;\n+    this.allowed = allowed;\n+    this.caseInsensitive = caseInsensitive;\n+  }\n+\n+  public QualifiedName name()\n+  {\n+    return name;\n+  }\n+\n+  public Optional<String> deprecated()\n+  {\n+    return Optional.ofNullable(deprecated);\n+  }\n+\n+  public List<FieldSignature> inputSignature()\n+  {\n+    return inputSignature;\n+  }\n+\n+  public Neo4jTypes.AnyType outputType()\n+  {\n+    return type;\n+  }\n+\n+  public Optional<String> description()\n+  {\n+    return Optional.ofNullable(description);\n+  }\n+\n+  public String[] allowed()\n+  {\n+    return allowed;\n+  }\n+\n+  public boolean caseInsensitive()\n+  {\n+    return caseInsensitive;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n+    {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass())\n+    {\n+      return false;\n+    }\n+\n+    UserFunctionSignature that = (UserFunctionSignature) o;\n+    return name.equals(that.name) && inputSignature.equals(that.inputSignature) && type.equals(that.type);\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    return name.hashCode();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    String strInSig = inputSignature == null ? \"...\" : Iterables.toString(inputSignature, \", \");\n+    String strOutSig = type == null ? \"...\" : type.toString();\n+    return String.format(\"%s(%s) :: (%s)\", name, strInSig, strOutSig);\n+  }\n+\n+  public static class Builder\n+  {\n     private final QualifiedName name;\n-    private final List<FieldSignature> inputSignature;\n-    private final Neo4jTypes.AnyType type;\n-    private final String[] allowed;\n-    private final String deprecated;\n-    private final String description;\n-    private final boolean caseInsensitive;\n-\n-    public UserFunctionSignature( QualifiedName name,\n-            List<FieldSignature> inputSignature,\n-            Neo4jTypes.AnyType type,\n-            String deprecated,\n-            String[] allowed,\n-            String description,\n-            boolean caseInsensitive )\n-    {\n-        this.name = name;\n-        this.inputSignature = unmodifiableList( inputSignature );\n-        this.type = type;\n-        this.deprecated = deprecated;\n-        this.description = description;\n-        this.allowed = allowed;\n-        this.caseInsensitive = caseInsensitive;\n-    }\n-\n-    public QualifiedName name()\n-    {\n-        return name;\n-    }\n+    private final List<FieldSignature> inputSignature = new LinkedList<>();\n+    private Neo4jTypes.AnyType outputType;\n+    private String[] allowed = new String[0];\n+    private String deprecated;\n+    private String description;\n \n-    public Optional<String> deprecated()\n+    public Builder(String[] namespace, String name)\n     {\n-        return Optional.ofNullable( deprecated );\n+      this.name = new QualifiedName(namespace, name);\n     }\n \n-    public List<FieldSignature> inputSignature()\n+    public Builder description(String description)\n     {\n-        return inputSignature;\n+      this.description = description;\n+      return this;\n     }\n \n-    public Neo4jTypes.AnyType outputType()\n+    public Builder deprecatedBy(String deprecated)\n     {\n-        return type;\n+      this.deprecated = deprecated;\n+      return this;\n     }\n \n-    public Optional<String> description()\n+    /**\n+     * Define an input field\n+     */\n+    public Builder in(String name, Neo4jTypes.AnyType type)\n     {\n-        return Optional.ofNullable( description );\n+      inputSignature.add(FieldSignature.inputField(name, type));\n+      return this;\n     }\n \n-    public String[] allowed()\n+    /**\n+     * Define an output field\n+     */\n+    public Builder out(Neo4jTypes.AnyType type)\n     {\n-        return allowed;\n+      outputType = type;\n+      return this;\n     }\n \n-    public boolean caseInsensitive()\n+    public Builder allowed(String[] allowed)\n     {\n-        return caseInsensitive;\n+      this.allowed = allowed;\n+      return this;\n     }\n \n-    @Override\n-    public boolean equals( Object o )\n+    public UserFunctionSignature build()\n     {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        UserFunctionSignature that = (UserFunctionSignature) o;\n-        return name.equals( that.name ) && inputSignature.equals( that.inputSignature ) && type.equals( that.type );\n+      if (outputType == null)\n+      {\n+        throw new IllegalStateException(\"output type must be set\");\n+      }\n+      return new UserFunctionSignature(name, inputSignature, outputType, deprecated, allowed, description, false);\n     }\n+  }\n \n-    @Override\n-    public int hashCode()\n-    {\n-        return name.hashCode();\n-    }\n+  public static Builder functionSignature(String... namespaceAndName)\n+  {\n+    String[] namespace = namespaceAndName.length > 1 ?\n+        Arrays.copyOf(namespaceAndName, namespaceAndName.length - 1) :\n+        new String[0];\n+    String name = namespaceAndName[namespaceAndName.length - 1];\n+    return functionSignature(namespace, name);\n+  }\n \n-    @Override\n-    public String toString()\n-    {\n-        String strInSig = inputSignature == null ? \"...\" : Iterables.toString( inputSignature, \", \" );\n-            String strOutSig = type == null ? \"...\" : type.toString();\n-            return String.format( \"%s(%s) :: (%s)\", name, strInSig, strOutSig );\n-    }\n+  public static Builder functionSignature(QualifiedName name)\n+  {\n+    return new Builder(name.namespace(), name.name());\n+  }\n \n-    public static class Builder\n-    {\n-        private final QualifiedName name;\n-        private final List<FieldSignature> inputSignature = new LinkedList<>();\n-        private Neo4jTypes.AnyType outputType;\n-        private String[] allowed = new String[0];\n-        private String deprecated;\n-        private String description;\n-\n-        public Builder( String[] namespace, String name )\n-        {\n-            this.name = new QualifiedName( namespace, name );\n-        }\n-\n-        public Builder description( String description )\n-        {\n-            this.description = description;\n-            return this;\n-        }\n-\n-        public Builder deprecatedBy( String deprecated )\n-        {\n-            this.deprecated = deprecated;\n-            return this;\n-        }\n-\n-        /** Define an input field */\n-        public Builder in( String name, Neo4jTypes.AnyType type )\n-        {\n-            inputSignature.add( FieldSignature.inputField( name, type ) );\n-            return this;\n-        }\n-\n-        /** Define an output field */\n-        public Builder out( Neo4jTypes.AnyType type )\n-        {\n-            outputType = type;\n-            return this;\n-        }\n-\n-        public Builder allowed( String[] allowed )\n-        {\n-            this.allowed = allowed;\n-            return this;\n-        }\n-\n-        public UserFunctionSignature build()\n-        {\n-            if ( outputType == null )\n-            {\n-                throw new IllegalStateException( \"output type must be set\" );\n-            }\n-            return new UserFunctionSignature( name, inputSignature, outputType, deprecated, allowed, description, false  );\n-        }\n-    }\n+  public static Builder functionSignature(String[] namespace, String name)\n+  {\n+    return new Builder(namespace, name);\n+  }\n \n-    public static Builder functionSignature( String... namespaceAndName )\n-    {\n-        String[] namespace = namespaceAndName.length > 1 ?\n-                             Arrays.copyOf( namespaceAndName, namespaceAndName.length - 1 ) :\n-                             new String[0];\n-        String name = namespaceAndName[namespaceAndName.length - 1];\n-        return functionSignature( namespace, name );\n-    }\n-\n-    public static Builder functionSignature( QualifiedName name )\n-    {\n-        return new Builder( name.namespace(), name.name() );\n-    }\n-\n-    public static Builder functionSignature( String[] namespace, String name )\n-    {\n-        return new Builder( namespace, name );\n-    }\n-\n-    public static QualifiedName procedureName( String... namespaceAndName )\n-    {\n-        return functionSignature( namespaceAndName ).build().name();\n-    }\n+  public static QualifiedName procedureName(String... namespaceAndName)\n+  {\n+    return functionSignature(namespaceAndName).build().name();\n+  }\n }\n",
            "diff_size": 251
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "185",
                    "column": "53",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1196/UserFunctionSignature.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1196/UserFunctionSignature.java\nindex f0ebaf7ce45..95211ef01bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1196/UserFunctionSignature.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1196/UserFunctionSignature.java\n@@ -42,8 +42,7 @@ public final class UserFunctionSignature\n     private final String description;\n     private final boolean caseInsensitive;\n \n-    public UserFunctionSignature( QualifiedName name,\n-            List<FieldSignature> inputSignature,\n+    public UserFunctionSignature( QualifiedName name, List<FieldSignature> inputSignature,\n             Neo4jTypes.AnyType type,\n             String deprecated,\n             String[] allowed,\n@@ -101,7 +100,8 @@ public final class UserFunctionSignature\n         {\n             return true;\n         }\n-        if ( o == null || getClass() != o.getClass() )\n+\n+if ( o == null || getClass() != o.getClass() )\n         {\n             return false;\n         }\n@@ -120,7 +120,7 @@ public final class UserFunctionSignature\n     public String toString()\n     {\n         String strInSig = inputSignature == null ? \"...\" : Iterables.toString( inputSignature, \", \" );\n-            String strOutSig = type == null ? \"...\" : type.toString();\n+String strOutSig = type == null ? \"...\" : type.toString();\n             return String.format( \"%s(%s) :: (%s)\", name, strInSig, strOutSig );\n     }\n \n@@ -176,16 +176,14 @@ public final class UserFunctionSignature\n             {\n                 throw new IllegalStateException( \"output type must be set\" );\n             }\n-            return new UserFunctionSignature( name, inputSignature, outputType, deprecated, allowed, description, false  );\n+            return new UserFunctionSignature( name, inputSignature, outputType, deprecated, allowed, description, false );\n         }\n     }\n \n     public static Builder functionSignature( String... namespaceAndName )\n     {\n-        String[] namespace = namespaceAndName.length > 1 ?\n-                             Arrays.copyOf( namespaceAndName, namespaceAndName.length - 1 ) :\n-                             new String[0];\n-        String name = namespaceAndName[namespaceAndName.length - 1];\n+        String[] namespace = namespaceAndName.length> 1 ? Arrays.copyOf( namespaceAndName, namespaceAndName.length - 1 ) : new String[0];\n+String name = namespaceAndName[namespaceAndName.length - 1];\n         return functionSignature( namespace, name );\n     }\n \n@@ -203,4 +201,4 @@ public final class UserFunctionSignature\n     {\n         return functionSignature( namespaceAndName ).build().name();\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}