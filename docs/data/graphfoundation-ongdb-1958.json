{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1958",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "71",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "57",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "68",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "156",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "188",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "202",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "206",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "242",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "262",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "275",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "284",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "289",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "307",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "307",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "318",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "338",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "345",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "355",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "363",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "367",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "370",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1958/RotatingFileOutputStreamSupplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1958/RotatingFileOutputStreamSupplier.java\nindex 2303bbd58b3..41bd989b89e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1958/RotatingFileOutputStreamSupplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1958/RotatingFileOutputStreamSupplier.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.logging;\n \n import java.io.ByteArrayOutputStream;\n@@ -48,344 +49,331 @@ import static org.neo4j.io.file.Files.createOrOpenAsOutputStream;\n  */\n public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>, Closeable\n {\n-    /**\n-     * A listener for the rotation process\n-     */\n-    public static class RotationListener\n+  /**\n+   * A listener for the rotation process\n+   */\n+  public static class RotationListener\n+  {\n+    public void outputFileCreated(OutputStream out)\n     {\n-        public void outputFileCreated( OutputStream out )\n-        {\n-        }\n-\n-        public void rotationCompleted( OutputStream out )\n-        {\n-        }\n-\n-        public void rotationError( Exception e, OutputStream out )\n-        {\n-        }\n     }\n \n-    private static final LongSupplier DEFAULT_CURRENT_TIME_SUPPLIER = System::currentTimeMillis;\n-\n-    // Used only in case no new output file can be created during rotation\n-    private static final OutputStream nullStream = NullOutputStream.NULL_OUTPUT_STREAM;\n-\n-    private final LongSupplier currentTimeSupplier;\n-    private final FileSystemAbstraction fileSystem;\n-    private final File outputFile;\n-    private final long rotationThresholdBytes;\n-    private final long rotationDelay;\n-    private final int maxArchives;\n-    private final RotationListener rotationListener;\n-    private final Executor rotationExecutor;\n-    private final ReadWriteLock logFileLock = new ReentrantReadWriteLock( true );\n-    private final OutputStream streamWrapper;\n-    private final AtomicBoolean closed = new AtomicBoolean( false );\n-    private final AtomicBoolean rotating = new AtomicBoolean( false );\n-    private final AtomicLong earliestRotationTimeRef = new AtomicLong( 0 );\n-    private OutputStream outRef = nullStream;\n-\n-    /**\n-     * @param fileSystem The filesystem to use\n-     * @param outputFile The file that the latest {@link OutputStream} should output to\n-     * @param rotationThresholdBytes The size above which the file should be rotated\n-     * @param rotationDelay The minimum time (ms) after last rotation before the file may be rotated again\n-     * @param maxArchives The maximum number of archived output files to keep\n-     * @param rotationExecutor An {@link Executor} for performing the rotation\n-     * @throws IOException If the output file cannot be created\n-     */\n-    public RotatingFileOutputStreamSupplier( FileSystemAbstraction fileSystem, File outputFile,\n-            long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor )\n-            throws IOException\n+    public void rotationCompleted(OutputStream out)\n     {\n-        this( fileSystem, outputFile, rotationThresholdBytes, rotationDelay, maxArchives, rotationExecutor,\n-                new RotationListener() );\n     }\n \n-    /**\n-     * @param fileSystem The filesystem to use\n-     * @param outputFile The file that the latest {@link OutputStream} should output to\n-     * @param rotationThresholdBytes The size above which the file should be rotated\n-     * @param rotationDelay The minimum time (ms) after last rotation before the file may be rotated again\n-     * @param maxArchives The maximum number of archived output files to keep\n-     * @param rotationExecutor An {@link Executor} for performing the rotation\n-     * @param rotationListener A {@link org.neo4j.logging.RotatingFileOutputStreamSupplier.RotationListener} that can\n-     * observe the rotation process and be notified of errors\n-     * @throws IOException If the output file cannot be created\n-     */\n-    public RotatingFileOutputStreamSupplier( FileSystemAbstraction fileSystem, File outputFile,\n-            long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor,\n-            RotationListener rotationListener ) throws IOException\n+    public void rotationError(Exception e, OutputStream out)\n     {\n-        this( DEFAULT_CURRENT_TIME_SUPPLIER, fileSystem, outputFile, rotationThresholdBytes, rotationDelay,\n-                maxArchives, rotationExecutor, rotationListener );\n     }\n+  }\n \n-    RotatingFileOutputStreamSupplier( LongSupplier currentTimeSupplier, FileSystemAbstraction fileSystem,\n-            File outputFile, long rotationThresholdBytes, long rotationDelay, int maxArchives,\n-            Executor rotationExecutor, RotationListener rotationListener ) throws IOException\n-    {\n-        this.currentTimeSupplier = currentTimeSupplier;\n-        this.fileSystem = fileSystem;\n-        this.outputFile = outputFile;\n-        this.rotationThresholdBytes = rotationThresholdBytes;\n-        this.rotationDelay = rotationDelay;\n-        this.maxArchives = maxArchives;\n-        this.rotationListener = rotationListener;\n-        this.rotationExecutor = rotationExecutor;\n-        this.outRef = openOutputFile();\n-        // Wrap the actual reference to prevent race conditions during log rotation\n-        this.streamWrapper = new OutputStream()\n-        {\n-            @Override\n-            public void write( int i ) throws IOException\n-            {\n-                logFileLock.readLock().lock();\n-                try\n-                {\n-                    outRef.write( i );\n-                }\n-                finally\n-                {\n-                    logFileLock.readLock().unlock();\n-                }\n-            }\n+  private static final LongSupplier DEFAULT_CURRENT_TIME_SUPPLIER = System::currentTimeMillis;\n \n-            @Override\n-            public void write( byte[] bytes ) throws IOException\n-            {\n-                logFileLock.readLock().lock();\n-                try\n-                {\n-                    outRef.write( bytes );\n-                }\n-                finally\n-                {\n-                    logFileLock.readLock().unlock();\n-                }\n-            }\n+  // Used only in case no new output file can be created during rotation\n+  private static final OutputStream nullStream = NullOutputStream.NULL_OUTPUT_STREAM;\n \n-            @Override\n-            public void write( byte[] bytes, int off, int len ) throws IOException\n-            {\n-                logFileLock.readLock().lock();\n-                try\n-                {\n-                    outRef.write( bytes, off, len );\n-                }\n-                finally\n-                {\n-                    logFileLock.readLock().unlock();\n-                }\n-            }\n+  private final LongSupplier currentTimeSupplier;\n+  private final FileSystemAbstraction fileSystem;\n+  private final File outputFile;\n+  private final long rotationThresholdBytes;\n+  private final long rotationDelay;\n+  private final int maxArchives;\n+  private final RotationListener rotationListener;\n+  private final Executor rotationExecutor;\n+  private final ReadWriteLock logFileLock = new ReentrantReadWriteLock(true);\n+  private final OutputStream streamWrapper;\n+  private final AtomicBoolean closed = new AtomicBoolean(false);\n+  private final AtomicBoolean rotating = new AtomicBoolean(false);\n+  private final AtomicLong earliestRotationTimeRef = new AtomicLong(0);\n+  private OutputStream outRef = nullStream;\n \n-            @Override\n-            public void flush() throws IOException\n-            {\n-                logFileLock.readLock().lock();\n-                try\n-                {\n-                    outRef.flush();\n-                }\n-                finally\n-                {\n-                    logFileLock.readLock().unlock();\n-                }\n-            }\n-        };\n-    }\n+  /**\n+   * @param fileSystem             The filesystem to use\n+   * @param outputFile             The file that the latest {@link OutputStream} should output to\n+   * @param rotationThresholdBytes The size above which the file should be rotated\n+   * @param rotationDelay          The minimum time (ms) after last rotation before the file may be rotated again\n+   * @param maxArchives            The maximum number of archived output files to keep\n+   * @param rotationExecutor       An {@link Executor} for performing the rotation\n+   * @throws IOException If the output file cannot be created\n+   */\n+  public RotatingFileOutputStreamSupplier(FileSystemAbstraction fileSystem, File outputFile,\n+                                          long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor)\n+      throws IOException\n+  {\n+    this(fileSystem, outputFile, rotationThresholdBytes, rotationDelay, maxArchives, rotationExecutor,\n+        new RotationListener());\n+  }\n+\n+  /**\n+   * @param fileSystem             The filesystem to use\n+   * @param outputFile             The file that the latest {@link OutputStream} should output to\n+   * @param rotationThresholdBytes The size above which the file should be rotated\n+   * @param rotationDelay          The minimum time (ms) after last rotation before the file may be rotated again\n+   * @param maxArchives            The maximum number of archived output files to keep\n+   * @param rotationExecutor       An {@link Executor} for performing the rotation\n+   * @param rotationListener       A {@link org.neo4j.logging.RotatingFileOutputStreamSupplier.RotationListener} that can\n+   *                               observe the rotation process and be notified of errors\n+   * @throws IOException If the output file cannot be created\n+   */\n+  public RotatingFileOutputStreamSupplier(FileSystemAbstraction fileSystem, File outputFile,\n+                                          long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor,\n+                                          RotationListener rotationListener) throws IOException\n+  {\n+    this(DEFAULT_CURRENT_TIME_SUPPLIER, fileSystem, outputFile, rotationThresholdBytes, rotationDelay,\n+        maxArchives, rotationExecutor, rotationListener);\n+  }\n \n-    /**\n-     * @return A stream outputting to the latest output file\n-     */\n-    @Override\n-    public OutputStream get()\n+  RotatingFileOutputStreamSupplier(LongSupplier currentTimeSupplier, FileSystemAbstraction fileSystem,\n+                                   File outputFile, long rotationThresholdBytes, long rotationDelay, int maxArchives,\n+                                   Executor rotationExecutor, RotationListener rotationListener) throws IOException\n+  {\n+    this.currentTimeSupplier = currentTimeSupplier;\n+    this.fileSystem = fileSystem;\n+    this.outputFile = outputFile;\n+    this.rotationThresholdBytes = rotationThresholdBytes;\n+    this.rotationDelay = rotationDelay;\n+    this.maxArchives = maxArchives;\n+    this.rotationListener = rotationListener;\n+    this.rotationExecutor = rotationExecutor;\n+    this.outRef = openOutputFile();\n+    // Wrap the actual reference to prevent race conditions during log rotation\n+    this.streamWrapper = new OutputStream()\n     {\n-        if ( !closed.get() && !rotating.get() )\n+      @Override\n+      public void write(int i) throws IOException\n+      {\n+        logFileLock.readLock().lock();\n+        try\n         {\n-            // In case output file doesn't exist, call rotate so that it gets created\n-            if ( rotationDelayExceeded() && rotationThresholdExceeded() ||\n-                    !fileSystem.fileExists( outputFile ) )\n-            {\n-                rotate();\n-            }\n+          outRef.write(i);\n+        } finally\n+        {\n+          logFileLock.readLock().unlock();\n         }\n-        return this.streamWrapper;\n-    }\n+      }\n \n-    @Override\n-    public void close() throws IOException\n-    {\n-        logFileLock.writeLock().lock();\n+      @Override\n+      public void write(byte[] bytes) throws IOException\n+      {\n+        logFileLock.readLock().lock();\n         try\n         {\n-            closed.set( true );\n-            outRef.close();\n+          outRef.write(bytes);\n+        } finally\n+        {\n+          logFileLock.readLock().unlock();\n         }\n-        finally\n+      }\n+\n+      @Override\n+      public void write(byte[] bytes, int off, int len) throws IOException\n+      {\n+        logFileLock.readLock().lock();\n+        try\n         {\n-            outRef = nullStream;\n-            logFileLock.writeLock().unlock();\n+          outRef.write(bytes, off, len);\n+        } finally\n+        {\n+          logFileLock.readLock().unlock();\n+        }\n+      }\n+\n+      @Override\n+      public void flush() throws IOException\n+      {\n+        logFileLock.readLock().lock();\n+        try\n+        {\n+          outRef.flush();\n+        } finally\n+        {\n+          logFileLock.readLock().unlock();\n         }\n+      }\n+    };\n+  }\n+\n+  /**\n+   * @return A stream outputting to the latest output file\n+   */\n+  @Override\n+  public OutputStream get()\n+  {\n+    if (!closed.get() && !rotating.get())\n+    {\n+      // In case output file doesn't exist, call rotate so that it gets created\n+      if (rotationDelayExceeded() && rotationThresholdExceeded() ||\n+          !fileSystem.fileExists(outputFile))\n+      {\n+        rotate();\n+      }\n     }\n+    return this.streamWrapper;\n+  }\n \n-    private boolean rotationThresholdExceeded()\n+  @Override\n+  public void close() throws IOException\n+  {\n+    logFileLock.writeLock().lock();\n+    try\n     {\n-        return fileSystem.fileExists( outputFile ) && rotationThresholdBytes > 0 &&\n-                fileSystem.getFileSize( outputFile ) >= rotationThresholdBytes;\n+      closed.set(true);\n+      outRef.close();\n+    } finally\n+    {\n+      outRef = nullStream;\n+      logFileLock.writeLock().unlock();\n     }\n+  }\n+\n+  private boolean rotationThresholdExceeded()\n+  {\n+    return fileSystem.fileExists(outputFile) && rotationThresholdBytes > 0 &&\n+        fileSystem.getFileSize(outputFile) >= rotationThresholdBytes;\n+  }\n+\n+  private boolean rotationDelayExceeded()\n+  {\n+    return earliestRotationTimeRef.get() <= currentTimeSupplier.getAsLong();\n+  }\n \n-    private boolean rotationDelayExceeded()\n+  void rotate()\n+  {\n+    if (rotating.getAndSet(true))\n     {\n-        return earliestRotationTimeRef.get() <= currentTimeSupplier.getAsLong();\n+      // Already rotating\n+      return;\n     }\n \n-    void rotate()\n+    ByteArrayOutputStream bufferingOutputStream = new ByteArrayOutputStream();\n+    Runnable runnable = () ->\n     {\n-        if ( rotating.getAndSet( true ) )\n+      logFileLock.writeLock().lock();\n+      try\n+      {\n+        try\n         {\n-            // Already rotating\n+          // Must close file prior to doing any operations on it or else it won't work on Windows\n+          try\n+          {\n+            outRef.flush();\n+            outRef.close();\n+            outRef = nullStream;\n+          } catch (Exception e)\n+          {\n+            rotationListener.rotationError(e, bufferingOutputStream);\n             return;\n-        }\n+          }\n \n-        ByteArrayOutputStream bufferingOutputStream = new ByteArrayOutputStream();\n-        Runnable runnable = () ->\n-        {\n-            logFileLock.writeLock().lock();\n-            try\n+          try\n+          {\n+            if (fileSystem.fileExists(outputFile))\n             {\n-                try\n-                {\n-                    // Must close file prior to doing any operations on it or else it won't work on Windows\n-                    try\n-                    {\n-                        outRef.flush();\n-                        outRef.close();\n-                        outRef = nullStream;\n-                    }\n-                    catch ( Exception e )\n-                    {\n-                        rotationListener.rotationError( e, bufferingOutputStream );\n-                        return;\n-                    }\n-\n-                    try\n-                    {\n-                        if ( fileSystem.fileExists( outputFile ) )\n-                        {\n-                            shiftArchivedOutputFiles();\n-                            fileSystem.renameFile( outputFile, archivedOutputFile( outputFile, 1 ) );\n-                        }\n-                    }\n-                    catch ( Exception e )\n-                    {\n-                        rotationListener.rotationError( e, bufferingOutputStream );\n-                        return;\n-                    }\n-                }\n-                finally\n-                {\n-                    try\n-                    {\n-                        if ( !closed.get() && outRef.equals( nullStream ) )\n-                        {\n-                            outRef = openOutputFile();\n-                            rotationListener.outputFileCreated( bufferingOutputStream );\n-                        }\n-                    }\n-                    catch ( IOException e )\n-                    {\n-                        System.err.println( \"Failed to open log file after log rotation: \" + e.getMessage() );\n-                        rotationListener.rotationError( e, bufferingOutputStream );\n-                    }\n-                }\n-\n-                if ( rotationDelay > 0 )\n-                {\n-                    earliestRotationTimeRef.set( currentTimeSupplier.getAsLong() + rotationDelay );\n-                }\n-                rotationListener.rotationCompleted( bufferingOutputStream );\n+              shiftArchivedOutputFiles();\n+              fileSystem.renameFile(outputFile, archivedOutputFile(outputFile, 1));\n             }\n-            finally\n+          } catch (Exception e)\n+          {\n+            rotationListener.rotationError(e, bufferingOutputStream);\n+            return;\n+          }\n+        } finally\n+        {\n+          try\n+          {\n+            if (!closed.get() && outRef.equals(nullStream))\n             {\n-                rotating.set( false );\n-                try\n-                {\n-                    bufferingOutputStream.writeTo( streamWrapper );\n-                }\n-                catch ( IOException e )\n-                {\n-                    rotationListener.rotationError( e, streamWrapper );\n-                }\n-                logFileLock.writeLock().unlock();\n+              outRef = openOutputFile();\n+              rotationListener.outputFileCreated(bufferingOutputStream);\n             }\n-        };\n+          } catch (IOException e)\n+          {\n+            System.err.println(\"Failed to open log file after log rotation: \" + e.getMessage());\n+            rotationListener.rotationError(e, bufferingOutputStream);\n+          }\n+        }\n \n-        try\n+        if (rotationDelay > 0)\n         {\n-            rotationExecutor.execute( runnable );\n+          earliestRotationTimeRef.set(currentTimeSupplier.getAsLong() + rotationDelay);\n         }\n-        catch ( Exception e )\n+        rotationListener.rotationCompleted(bufferingOutputStream);\n+      } finally\n+      {\n+        rotating.set(false);\n+        try\n+        {\n+          bufferingOutputStream.writeTo(streamWrapper);\n+        } catch (IOException e)\n         {\n-            rotationListener.rotationError( e, streamWrapper );\n-            rotating.set( false );\n+          rotationListener.rotationError(e, streamWrapper);\n         }\n-    }\n+        logFileLock.writeLock().unlock();\n+      }\n+    };\n \n-    private OutputStream openOutputFile() throws IOException\n+    try\n     {\n-        return createOrOpenAsOutputStream( fileSystem, outputFile, true );\n-    }\n-\n-    private void shiftArchivedOutputFiles() throws IOException\n+      rotationExecutor.execute(runnable);\n+    } catch (Exception e)\n     {\n-        for ( int i = lastArchivedOutputFileNumber( fileSystem, outputFile ); i > 0; --i )\n-        {\n-            File archive = archivedOutputFile( outputFile, i );\n-            if ( i >= maxArchives )\n-            {\n-                fileSystem.deleteFile( archive );\n-            }\n-            else\n-            {\n-                fileSystem.renameFile( archive, archivedOutputFile( outputFile, i + 1 ) );\n-            }\n-        }\n+      rotationListener.rotationError(e, streamWrapper);\n+      rotating.set(false);\n     }\n+  }\n+\n+  private OutputStream openOutputFile() throws IOException\n+  {\n+    return createOrOpenAsOutputStream(fileSystem, outputFile, true);\n+  }\n \n-    private static int lastArchivedOutputFileNumber( FileSystemAbstraction fileSystem, File outputFile )\n+  private void shiftArchivedOutputFiles() throws IOException\n+  {\n+    for (int i = lastArchivedOutputFileNumber(fileSystem, outputFile); i > 0; --i)\n     {\n-        int i = 1;\n-        while ( fileSystem.fileExists( archivedOutputFile( outputFile, i ) ) )\n-        {\n-            i++;\n-        }\n-        return i - 1;\n+      File archive = archivedOutputFile(outputFile, i);\n+      if (i >= maxArchives)\n+      {\n+        fileSystem.deleteFile(archive);\n+      } else\n+      {\n+        fileSystem.renameFile(archive, archivedOutputFile(outputFile, i + 1));\n+      }\n     }\n+  }\n \n-    private static File archivedOutputFile( File outputFile, int archiveNumber )\n+  private static int lastArchivedOutputFileNumber(FileSystemAbstraction fileSystem, File outputFile)\n+  {\n+    int i = 1;\n+    while (fileSystem.fileExists(archivedOutputFile(outputFile, i)))\n     {\n-        return new File( String.format( \"%s.%d\", outputFile.getPath(), archiveNumber ) );\n+      i++;\n     }\n+    return i - 1;\n+  }\n+\n+  private static File archivedOutputFile(File outputFile, int archiveNumber)\n+  {\n+    return new File(String.format(\"%s.%d\", outputFile.getPath(), archiveNumber));\n+  }\n \n-    /**\n-     * Exposes the algorithm for collecting existing rotated log files.\n-     */\n-    public static List<File> getAllArchives( FileSystemAbstraction fileSystem,  File outputFile )\n+  /**\n+   * Exposes the algorithm for collecting existing rotated log files.\n+   */\n+  public static List<File> getAllArchives(FileSystemAbstraction fileSystem, File outputFile)\n+  {\n+    ArrayList<File> ret = new ArrayList<>();\n+    int i = 1;\n+    while (true)\n     {\n-        ArrayList<File> ret = new ArrayList<>();\n-        int i = 1;\n-        while ( true )\n-        {\n-            File file = archivedOutputFile( outputFile, i );\n-            if ( !fileSystem.fileExists( file ) )\n-            {\n-                break;\n-            }\n-            ret.add( file );\n-            i++;\n-        }\n-        return ret;\n+      File file = archivedOutputFile(outputFile, i);\n+      if (!fileSystem.fileExists(file))\n+      {\n+        break;\n+      }\n+      ret.add(file);\n+      i++;\n     }\n+    return ret;\n+  }\n }\n",
            "diff_size": 451
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "233",
                    "column": "82",
                    "severity": "error",
                    "message": "'&&' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1958/RotatingFileOutputStreamSupplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1958/RotatingFileOutputStreamSupplier.java\nindex 2303bbd58b3..20ccc58fad1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1958/RotatingFileOutputStreamSupplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1958/RotatingFileOutputStreamSupplier.java\n@@ -96,11 +96,9 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n      * @throws IOException If the output file cannot be created\n      */\n     public RotatingFileOutputStreamSupplier( FileSystemAbstraction fileSystem, File outputFile,\n-            long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor )\n-            throws IOException\n-    {\n-        this( fileSystem, outputFile, rotationThresholdBytes, rotationDelay, maxArchives, rotationExecutor,\n-                new RotationListener() );\n+            long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor ) throws IOException\n+{\n+        this( fileSystem, outputFile, rotationThresholdBytes, rotationDelay, maxArchives, rotationExecutor, new RotationListener() );\n     }\n \n     /**\n@@ -117,7 +115,7 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n     public RotatingFileOutputStreamSupplier( FileSystemAbstraction fileSystem, File outputFile,\n             long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor,\n             RotationListener rotationListener ) throws IOException\n-    {\n+{\n         this( DEFAULT_CURRENT_TIME_SUPPLIER, fileSystem, outputFile, rotationThresholdBytes, rotationDelay,\n                 maxArchives, rotationExecutor, rotationListener );\n     }\n@@ -125,7 +123,7 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n     RotatingFileOutputStreamSupplier( LongSupplier currentTimeSupplier, FileSystemAbstraction fileSystem,\n             File outputFile, long rotationThresholdBytes, long rotationDelay, int maxArchives,\n             Executor rotationExecutor, RotationListener rotationListener ) throws IOException\n-    {\n+{\n         this.currentTimeSupplier = currentTimeSupplier;\n         this.fileSystem = fileSystem;\n         this.outputFile = outputFile;\n@@ -232,8 +230,7 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n \n     private boolean rotationThresholdExceeded()\n     {\n-        return fileSystem.fileExists( outputFile ) && rotationThresholdBytes > 0 &&\n-                fileSystem.getFileSize( outputFile ) >= rotationThresholdBytes;\n+        return fileSystem.fileExists( outputFile ) && rotationThresholdBytes > 0 &&fileSystem.getFileSize( outputFile ) >= rotationThresholdBytes;\n     }\n \n     private boolean rotationDelayExceeded()\n@@ -361,7 +358,8 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n         {\n             i++;\n         }\n-        return i - 1;\n+\n+return i - 1;\n     }\n \n     private static File archivedOutputFile( File outputFile, int archiveNumber )\n@@ -372,7 +370,7 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n     /**\n      * Exposes the algorithm for collecting existing rotated log files.\n      */\n-    public static List<File> getAllArchives( FileSystemAbstraction fileSystem,  File outputFile )\n+    public static List<File> getAllArchives( FileSystemAbstraction fileSystem, File outputFile )\n     {\n         ArrayList<File> ret = new ArrayList<>();\n         int i = 1;\n@@ -386,6 +384,7 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n             ret.add( file );\n             i++;\n         }\n-        return ret;\n+\n+return ret;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 15
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "97",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 189).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "115",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 224).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "121",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 251).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "201",
                    "column": "28",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "204",
                    "column": "41",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "204",
                    "column": "71",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "231",
                    "column": "51",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "231",
                    "column": "80",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "286",
                    "column": "44",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "356",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "356",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "377",
                    "column": "9",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1958/RotatingFileOutputStreamSupplier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1958/RotatingFileOutputStreamSupplier.java\nindex 2303bbd58b3..b55ea99c220 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1958/RotatingFileOutputStreamSupplier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/1958/RotatingFileOutputStreamSupplier.java\n@@ -33,10 +33,8 @@ import java.util.concurrent.locks.ReadWriteLock;\n import java.util.concurrent.locks.ReentrantReadWriteLock;\n import java.util.function.LongSupplier;\n import java.util.function.Supplier;\n-\n import org.neo4j.io.NullOutputStream;\n import org.neo4j.io.fs.FileSystemAbstraction;\n-\n import static org.neo4j.io.file.Files.createOrOpenAsOutputStream;\n \n /**\n@@ -46,6 +44,7 @@ import static org.neo4j.io.file.Files.createOrOpenAsOutputStream;\n  * any IO or blocking, and, when necessary, will trigger rotation via the {@link Executor}\n  * supplied during construction.\n  */\n+\n public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>, Closeable\n {\n     /**\n@@ -70,7 +69,6 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n \n     // Used only in case no new output file can be created during rotation\n     private static final OutputStream nullStream = NullOutputStream.NULL_OUTPUT_STREAM;\n-\n     private final LongSupplier currentTimeSupplier;\n     private final FileSystemAbstraction fileSystem;\n     private final File outputFile;\n@@ -95,12 +93,11 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n      * @param rotationExecutor An {@link Executor} for performing the rotation\n      * @throws IOException If the output file cannot be created\n      */\n-    public RotatingFileOutputStreamSupplier( FileSystemAbstraction fileSystem, File outputFile,\n-            long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor )\n-            throws IOException\n+\n+    public RotatingFileOutputStreamSupplier( FileSystemAbstraction fileSystem, File outputFile, long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor )\n+    throws IOException\n     {\n-        this( fileSystem, outputFile, rotationThresholdBytes, rotationDelay, maxArchives, rotationExecutor,\n-                new RotationListener() );\n+        this( fileSystem, outputFile, rotationThresholdBytes, rotationDelay, maxArchives, rotationExecutor, new RotationListener() );\n     }\n \n     /**\n@@ -114,17 +111,15 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n      * observe the rotation process and be notified of errors\n      * @throws IOException If the output file cannot be created\n      */\n-    public RotatingFileOutputStreamSupplier( FileSystemAbstraction fileSystem, File outputFile,\n-            long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor,\n-            RotationListener rotationListener ) throws IOException\n+\n+    public RotatingFileOutputStreamSupplier( FileSystemAbstraction fileSystem, File outputFile, long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor, RotationListener rotationListener )\n+    throws IOException\n     {\n-        this( DEFAULT_CURRENT_TIME_SUPPLIER, fileSystem, outputFile, rotationThresholdBytes, rotationDelay,\n-                maxArchives, rotationExecutor, rotationListener );\n+        this( DEFAULT_CURRENT_TIME_SUPPLIER, fileSystem, outputFile, rotationThresholdBytes, rotationDelay, maxArchives, rotationExecutor, rotationListener );\n     }\n \n-    RotatingFileOutputStreamSupplier( LongSupplier currentTimeSupplier, FileSystemAbstraction fileSystem,\n-            File outputFile, long rotationThresholdBytes, long rotationDelay, int maxArchives,\n-            Executor rotationExecutor, RotationListener rotationListener ) throws IOException\n+    RotatingFileOutputStreamSupplier( LongSupplier currentTimeSupplier, FileSystemAbstraction fileSystem, File outputFile, long rotationThresholdBytes, long rotationDelay, int maxArchives, Executor rotationExecutor, RotationListener rotationListener )\n+    throws IOException\n     {\n         this.currentTimeSupplier = currentTimeSupplier;\n         this.fileSystem = fileSystem;\n@@ -137,80 +132,81 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n         this.outRef = openOutputFile();\n         // Wrap the actual reference to prevent race conditions during log rotation\n         this.streamWrapper = new OutputStream()\n+{\n+    @Override\n+    public void write( int i ) throws IOException\n+    {\n+        logFileLock.readLock().lock();\n+        try\n         {\n-            @Override\n-            public void write( int i ) throws IOException\n-            {\n-                logFileLock.readLock().lock();\n-                try\n-                {\n-                    outRef.write( i );\n-                }\n-                finally\n-                {\n-                    logFileLock.readLock().unlock();\n-                }\n-            }\n+            outRef.write( i );\n+        }\n+        finally\n+        {\n+            logFileLock.readLock().unlock();\n+        }\n+    }\n \n-            @Override\n-            public void write( byte[] bytes ) throws IOException\n-            {\n-                logFileLock.readLock().lock();\n-                try\n-                {\n-                    outRef.write( bytes );\n-                }\n-                finally\n-                {\n-                    logFileLock.readLock().unlock();\n-                }\n-            }\n+    @Override\n+    public void write( byte[] bytes ) throws IOException\n+    {\n+        logFileLock.readLock().lock();\n+        try\n+        {\n+            outRef.write( bytes );\n+        }\n+        finally\n+        {\n+            logFileLock.readLock().unlock();\n+        }\n+    }\n \n-            @Override\n-            public void write( byte[] bytes, int off, int len ) throws IOException\n-            {\n-                logFileLock.readLock().lock();\n-                try\n-                {\n-                    outRef.write( bytes, off, len );\n-                }\n-                finally\n-                {\n-                    logFileLock.readLock().unlock();\n-                }\n-            }\n+    @Override\n+    public void write( byte[] bytes, int off, int len ) throws IOException\n+    {\n+        logFileLock.readLock().lock();\n+        try\n+        {\n+            outRef.write( bytes, off, len );\n+        }\n+        finally\n+        {\n+            logFileLock.readLock().unlock();\n+        }\n+    }\n \n-            @Override\n-            public void flush() throws IOException\n-            {\n-                logFileLock.readLock().lock();\n-                try\n-                {\n-                    outRef.flush();\n-                }\n-                finally\n-                {\n-                    logFileLock.readLock().unlock();\n-                }\n-            }\n-        };\n+    @Override\n+    public void flush() throws IOException\n+    {\n+        logFileLock.readLock().lock();\n+        try\n+        {\n+            outRef.flush();\n+        }\n+        finally\n+        {\n+            logFileLock.readLock().unlock();\n+        }\n+    }\n+};\n     }\n \n     /**\n      * @return A stream outputting to the latest output file\n      */\n+\n     @Override\n     public OutputStream get()\n     {\n-        if ( !closed.get() && !rotating.get() )\n+        if ( ! closed.get()&& ! rotating.get() )\n         {\n             // In case output file doesn't exist, call rotate so that it gets created\n-            if ( rotationDelayExceeded() && rotationThresholdExceeded() ||\n-                    !fileSystem.fileExists( outputFile ) )\n+            if ( rotationDelayExceeded()&& rotationThresholdExceeded()|| ! fileSystem.fileExists( outputFile ) )\n             {\n                 rotate();\n             }\n         }\n+\n         return this.streamWrapper;\n     }\n \n@@ -232,8 +228,7 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n \n     private boolean rotationThresholdExceeded()\n     {\n-        return fileSystem.fileExists( outputFile ) && rotationThresholdBytes > 0 &&\n-                fileSystem.getFileSize( outputFile ) >= rotationThresholdBytes;\n+        return fileSystem.fileExists( outputFile )&& rotationThresholdBytes > 0&& fileSystem.getFileSize( outputFile ) >= rotationThresholdBytes;\n     }\n \n     private boolean rotationDelayExceeded()\n@@ -288,7 +283,7 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n                 {\n                     try\n                     {\n-                        if ( !closed.get() && outRef.equals( nullStream ) )\n+                        if ( ! closed.get()&& outRef.equals( nullStream ) )\n                         {\n                             outRef = openOutputFile();\n                             rotationListener.outputFileCreated( bufferingOutputStream );\n@@ -305,6 +300,7 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n                 {\n                     earliestRotationTimeRef.set( currentTimeSupplier.getAsLong() + rotationDelay );\n                 }\n+\n                 rotationListener.rotationCompleted( bufferingOutputStream );\n             }\n             finally\n@@ -318,10 +314,10 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n                 {\n                     rotationListener.rotationError( e, streamWrapper );\n                 }\n+\n                 logFileLock.writeLock().unlock();\n             }\n         };\n-\n         try\n         {\n             rotationExecutor.execute( runnable );\n@@ -340,7 +336,7 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n \n     private void shiftArchivedOutputFiles() throws IOException\n     {\n-        for ( int i = lastArchivedOutputFileNumber( fileSystem, outputFile ); i > 0; --i )\n+        for ( int i = lastArchivedOutputFileNumber( fileSystem, outputFile ); i > 0; -- i )\n         {\n             File archive = archivedOutputFile( outputFile, i );\n             if ( i >= maxArchives )\n@@ -357,10 +353,11 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n     private static int lastArchivedOutputFileNumber( FileSystemAbstraction fileSystem, File outputFile )\n     {\n         int i = 1;\n-        while ( fileSystem.fileExists( archivedOutputFile( outputFile, i ) ) )\n+        while( fileSystem.fileExists( archivedOutputFile( outputFile, i ) ))\n         {\n             i++;\n         }\n+\n         return i - 1;\n     }\n \n@@ -372,20 +369,23 @@ public class RotatingFileOutputStreamSupplier implements Supplier<OutputStream>,\n     /**\n      * Exposes the algorithm for collecting existing rotated log files.\n      */\n-    public static List<File> getAllArchives( FileSystemAbstraction fileSystem,  File outputFile )\n+\n+    public static List<File> getAllArchives( FileSystemAbstraction fileSystem, File outputFile )\n     {\n         ArrayList<File> ret = new ArrayList<>();\n         int i = 1;\n-        while ( true )\n+        while( true )\n         {\n             File file = archivedOutputFile( outputFile, i );\n-            if ( !fileSystem.fileExists( file ) )\n+            if ( ! fileSystem.fileExists( file ) )\n             {\n                 break;\n             }\n+\n             ret.add( file );\n             i++;\n         }\n+\n         return ret;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 97
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}