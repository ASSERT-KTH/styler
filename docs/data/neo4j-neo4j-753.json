{
    "project_name": "neo4j-neo4j",
    "error_id": "753",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "55",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/753/CommandLineArgs.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/753/CommandLineArgs.java\nindex c89bcb079f0..53c0829f6b6 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/753/CommandLineArgs.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/753/CommandLineArgs.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server;\n \n import java.nio.file.Path;\n@@ -51,16 +52,16 @@ public class CommandLineArgs\n     private final Args args;\n     private final Map<String, String> configOverrides;\n \n-    private CommandLineArgs( Args args, Map<String, String> configOverrides )\n+    private CommandLineArgs(Args args, Map<String, String> configOverrides)\n     {\n         this.args = args;\n         this.configOverrides = configOverrides;\n     }\n \n-    public static CommandLineArgs parse( String[] argv )\n+    public static CommandLineArgs parse(String[] argv)\n     {\n-        Args args = Args.withFlags( VERSION_ARG ).parse( argv );\n-        return new CommandLineArgs( args, parseConfigOverrides( args ) );\n+        Args args = Args.withFlags(VERSION_ARG).parse(argv);\n+        return new CommandLineArgs(args, parseConfigOverrides(args));\n     }\n \n     public Map<String, String> configOverrides()\n@@ -70,47 +71,47 @@ public class CommandLineArgs\n \n     public Path configFile()\n     {\n-        String configDirectory = args.get( CONFIG_DIR_ARG );\n-        return configDirectory == null ? null : Path.of( configDirectory, Config.DEFAULT_CONFIG_FILE_NAME );\n+        String configDirectory = args.get(CONFIG_DIR_ARG);\n+        return configDirectory == null ? null : Path.of(configDirectory, Config.DEFAULT_CONFIG_FILE_NAME);\n     }\n \n-    private static Map<String, String> parseConfigOverrides( Args arguments )\n+    private static Map<String, String> parseConfigOverrides(Args arguments)\n     {\n-        Collection<Pair<String, String>> options = arguments.interpretOptions( \"c\",\n-                Converters.optional(), s ->\n-                {\n-                    if ( s.contains( \"=\" ) )\n-                    {\n-                        String[] keyVal = s.split( \"=\", 2 );\n-                        return pair( keyVal[0], keyVal[1] );\n-                    }\n-                    // Shortcut to specify boolean flags (\"-c dbms.enableTheFeature\")\n-                    return pair( s, \"true\" );\n-                } );\n-\n-        Map<String,String> ret = stringMap();\n-        options.forEach( pair -> ret.put( pair.first(), pair.other() ) );\n+        Collection<Pair<String, String>> options = arguments.interpretOptions(\"c\",\n+          Converters.optional(), s ->\n+          {\n+              if (s.contains(\"=\"))\n+              {\n+                  String[] keyVal = s.split(\"=\", 2);\n+                  return pair(keyVal[0], keyVal[1]);\n+              }\n+              // Shortcut to specify boolean flags (\"-c dbms.enableTheFeature\")\n+              return pair(s, \"true\");\n+          });\n+\n+        Map<String, String> ret = stringMap();\n+        options.forEach(pair -> ret.put(pair.first(), pair.other()));\n \n         return ret;\n     }\n \n     public Path homeDir()\n     {\n-        if ( args.get( HOME_DIR_ARG ) == null )\n+        if (args.get(HOME_DIR_ARG) == null)\n         {\n             return null;\n         }\n \n-        return Path.of( args.get( HOME_DIR_ARG ) );\n+        return Path.of(args.get(HOME_DIR_ARG));\n     }\n \n     public boolean version()\n     {\n-        return args.getBoolean( VERSION_ARG, FALSE );\n+        return args.getBoolean(VERSION_ARG, FALSE);\n     }\n \n     public boolean expandCommands()\n     {\n-        return args.getBoolean( EXPAND_COMMAND_ARG, FALSE );\n+        return args.getBoolean(EXPAND_COMMAND_ARG, FALSE);\n     }\n }\n",
            "diff_size": 26
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/753/CommandLineArgs.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/753/CommandLineArgs.java\nindex c89bcb079f0..1407348ca80 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/753/CommandLineArgs.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/753/CommandLineArgs.java\n@@ -113,4 +113,4 @@ public class CommandLineArgs\n     {\n         return args.getBoolean( EXPAND_COMMAND_ARG, FALSE );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}