{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1047",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "70",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "153",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "198",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "203",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "262",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "268",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1047/MethodByteCodeEmitter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1047/MethodByteCodeEmitter.java\nindex 34e4b684426..6be07a44e29 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1047/MethodByteCodeEmitter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1047/MethodByteCodeEmitter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.codegen.bytecode;\n \n import org.objectweb.asm.ClassVisitor;\n@@ -60,214 +61,213 @@ import static org.objectweb.asm.Opcodes.RETURN;\n \n class MethodByteCodeEmitter implements MethodEmitter\n {\n-    private final MethodVisitor methodVisitor;\n-    private final MethodDeclaration declaration;\n-    private final ExpressionVisitor expressionVisitor;\n-    private final TypeReference base;\n-    private Deque<Block> stateStack = new LinkedList<>();\n+  private final MethodVisitor methodVisitor;\n+  private final MethodDeclaration declaration;\n+  private final ExpressionVisitor expressionVisitor;\n+  private final TypeReference base;\n+  private Deque<Block> stateStack = new LinkedList<>();\n \n-    MethodByteCodeEmitter( ClassVisitor classVisitor, MethodDeclaration declaration, TypeReference base )\n+  MethodByteCodeEmitter(ClassVisitor classVisitor, MethodDeclaration declaration, TypeReference base)\n+  {\n+    this.declaration = declaration;\n+    this.base = base;\n+    for (Parameter parameter : declaration.parameters())\n     {\n-        this.declaration = declaration;\n-        this.base = base;\n-        for ( Parameter parameter : declaration.parameters() )\n-        {\n-            TypeReference type = parameter.type();\n-            if ( type.isInnerClass() && !type.isArray() )\n-            {\n-                classVisitor.visitInnerClass( byteCodeName( type ), outerName( type ),\n-                        type.simpleName(), type.modifiers() );\n-            }\n-        }\n-        this.methodVisitor = classVisitor.visitMethod( ACC_PUBLIC, declaration.name(), desc( declaration ),\n-                signature( declaration ), exceptions( declaration ) );\n-        this.methodVisitor.visitCode();\n-        this.expressionVisitor = new ByteCodeExpressionVisitor( this.methodVisitor );\n-        stateStack.push( new Method( methodVisitor, declaration.returnType().isVoid() ) );\n+      TypeReference type = parameter.type();\n+      if (type.isInnerClass() && !type.isArray())\n+      {\n+        classVisitor.visitInnerClass(byteCodeName(type), outerName(type),\n+            type.simpleName(), type.modifiers());\n+      }\n     }\n+    this.methodVisitor = classVisitor.visitMethod(ACC_PUBLIC, declaration.name(), desc(declaration),\n+        signature(declaration), exceptions(declaration));\n+    this.methodVisitor.visitCode();\n+    this.expressionVisitor = new ByteCodeExpressionVisitor(this.methodVisitor);\n+    stateStack.push(new Method(methodVisitor, declaration.returnType().isVoid()));\n+  }\n \n-    @Override\n-    public void done()\n-    {\n-        methodVisitor.visitEnd();\n-    }\n+  @Override\n+  public void done()\n+  {\n+    methodVisitor.visitEnd();\n+  }\n \n-    @Override\n-    public void expression( Expression expression )\n-    {\n-        expression.accept( expressionVisitor );\n-    }\n+  @Override\n+  public void expression(Expression expression)\n+  {\n+    expression.accept(expressionVisitor);\n+  }\n \n-    @Override\n-    public void put( Expression target, FieldReference field, Expression value )\n-    {\n-        target.accept( expressionVisitor );\n-        value.accept( expressionVisitor );\n-        methodVisitor\n-                .visitFieldInsn( PUTFIELD, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n-    }\n+  @Override\n+  public void put(Expression target, FieldReference field, Expression value)\n+  {\n+    target.accept(expressionVisitor);\n+    value.accept(expressionVisitor);\n+    methodVisitor\n+        .visitFieldInsn(PUTFIELD, byteCodeName(field.owner()), field.name(), typeName(field.type()));\n+  }\n \n-    @Override\n-    public void returns()\n-    {\n-        methodVisitor.visitInsn( RETURN );\n-    }\n+  @Override\n+  public void returns()\n+  {\n+    methodVisitor.visitInsn(RETURN);\n+  }\n \n-    @Override\n-    public void returns( Expression value )\n+  @Override\n+  public void returns(Expression value)\n+  {\n+    value.accept(expressionVisitor);\n+    if (declaration.returnType().isPrimitive())\n+    {\n+      switch (declaration.returnType().name())\n+      {\n+        case \"int\":\n+        case \"byte\":\n+        case \"short\":\n+        case \"char\":\n+        case \"boolean\":\n+          methodVisitor.visitInsn(IRETURN);\n+          break;\n+        case \"long\":\n+          methodVisitor.visitInsn(LRETURN);\n+          break;\n+        case \"float\":\n+          methodVisitor.visitInsn(FRETURN);\n+          break;\n+        case \"double\":\n+          methodVisitor.visitInsn(DRETURN);\n+          break;\n+        default:\n+          methodVisitor.visitInsn(ARETURN);\n+      }\n+    } else\n     {\n-        value.accept( expressionVisitor );\n-        if ( declaration.returnType().isPrimitive() )\n-        {\n-            switch ( declaration.returnType().name() )\n-            {\n-            case \"int\":\n-            case \"byte\":\n-            case \"short\":\n-            case \"char\":\n-            case \"boolean\":\n-                methodVisitor.visitInsn( IRETURN );\n-                break;\n-            case \"long\":\n-                methodVisitor.visitInsn( LRETURN );\n-                break;\n-            case \"float\":\n-                methodVisitor.visitInsn( FRETURN );\n-                break;\n-            case \"double\":\n-                methodVisitor.visitInsn( DRETURN );\n-                break;\n-            default:\n-                methodVisitor.visitInsn( ARETURN );\n-            }\n-        }\n-        else\n-        {\n-            methodVisitor.visitInsn( ARETURN );\n-        }\n+      methodVisitor.visitInsn(ARETURN);\n     }\n+  }\n \n-    @Override\n-    public void continues()\n+  @Override\n+  public void continues()\n+  {\n+    for (Block block : stateStack)\n     {\n-        for ( Block block : stateStack )\n-        {\n-            if ( block instanceof While )\n-            {\n-                ((While)block).continueBlock();\n-                return;\n-            }\n-        }\n-        throw new IllegalStateException( \"Found no block to continue\" );\n+      if (block instanceof While)\n+      {\n+        ((While) block).continueBlock();\n+        return;\n+      }\n     }\n+    throw new IllegalStateException(\"Found no block to continue\");\n+  }\n \n-    @Override\n-    public void assign( LocalVariable variable, Expression value )\n+  @Override\n+  public void assign(LocalVariable variable, Expression value)\n+  {\n+    value.accept(expressionVisitor);\n+    if (variable.type().isPrimitive())\n     {\n-        value.accept( expressionVisitor );\n-        if ( variable.type().isPrimitive() )\n-        {\n-            switch ( variable.type().name() )\n-            {\n-            case \"int\":\n-            case \"byte\":\n-            case \"short\":\n-            case \"char\":\n-            case \"boolean\":\n-                methodVisitor.visitVarInsn( ISTORE, variable.index() );\n-                break;\n-            case \"long\":\n-                methodVisitor.visitVarInsn( LSTORE, variable.index() );\n-                break;\n-            case \"float\":\n-                methodVisitor.visitVarInsn( FSTORE, variable.index() );\n-                break;\n-            case \"double\":\n-                methodVisitor.visitVarInsn( DSTORE, variable.index() );\n-                break;\n-            default:\n-                methodVisitor.visitVarInsn( ASTORE, variable.index() );\n-            }\n-        }\n-        else\n-        {\n-            methodVisitor.visitVarInsn( ASTORE, variable.index() );\n-        }\n+      switch (variable.type().name())\n+      {\n+        case \"int\":\n+        case \"byte\":\n+        case \"short\":\n+        case \"char\":\n+        case \"boolean\":\n+          methodVisitor.visitVarInsn(ISTORE, variable.index());\n+          break;\n+        case \"long\":\n+          methodVisitor.visitVarInsn(LSTORE, variable.index());\n+          break;\n+        case \"float\":\n+          methodVisitor.visitVarInsn(FSTORE, variable.index());\n+          break;\n+        case \"double\":\n+          methodVisitor.visitVarInsn(DSTORE, variable.index());\n+          break;\n+        default:\n+          methodVisitor.visitVarInsn(ASTORE, variable.index());\n+      }\n+    } else\n+    {\n+      methodVisitor.visitVarInsn(ASTORE, variable.index());\n     }\n+  }\n \n-    @Override\n-    public void beginWhile( Expression test )\n-    {\n-        Label repeat = new Label();\n-        Label done = new Label();\n-        methodVisitor.visitLabel( repeat );\n-        test.accept( new JumpVisitor( expressionVisitor, methodVisitor, done ) );\n+  @Override\n+  public void beginWhile(Expression test)\n+  {\n+    Label repeat = new Label();\n+    Label done = new Label();\n+    methodVisitor.visitLabel(repeat);\n+    test.accept(new JumpVisitor(expressionVisitor, methodVisitor, done));\n \n-        stateStack.push( new While( methodVisitor, repeat, done  ) );\n-    }\n+    stateStack.push(new While(methodVisitor, repeat, done));\n+  }\n \n-    @Override\n-    public void beginIf( Expression test )\n-    {\n-        Label after = new Label();\n-        test.accept( new JumpVisitor( expressionVisitor, methodVisitor, after ) );\n-        stateStack.push( new If( methodVisitor, after ) );\n-    }\n+  @Override\n+  public void beginIf(Expression test)\n+  {\n+    Label after = new Label();\n+    test.accept(new JumpVisitor(expressionVisitor, methodVisitor, after));\n+    stateStack.push(new If(methodVisitor, after));\n+  }\n \n-    @Override\n-    public void beginBlock()\n-    {\n-        stateStack.push( () -> {} );\n-    }\n+  @Override\n+  public void beginBlock()\n+  {\n+    stateStack.push(() -> {\n+    });\n+  }\n \n-    @Override\n-    public void endBlock()\n+  @Override\n+  public void endBlock()\n+  {\n+    if (stateStack.isEmpty())\n     {\n-        if ( stateStack.isEmpty() )\n-        {\n-            throw new IllegalStateException( \"Unbalanced blocks\" );\n-        }\n-        stateStack.pop().endBlock();\n+      throw new IllegalStateException(\"Unbalanced blocks\");\n     }\n+    stateStack.pop().endBlock();\n+  }\n \n-    @Override\n-    public <T> void tryCatchBlock( Consumer<T> body, Consumer<T> handler, LocalVariable exception, T block )\n-    {\n-        Label start = new Label();\n-        Label end = new Label();\n-        Label handle = new Label();\n-        Label after = new Label();\n-        methodVisitor.visitTryCatchBlock( start, end, handle,\n-                byteCodeName( exception.type() ) );\n-        methodVisitor.visitLabel( start );\n-        body.accept( block );\n-        methodVisitor.visitLabel( end );\n-        methodVisitor.visitJumpInsn( GOTO, after );\n-        //handle catch\n-        methodVisitor.visitLabel( handle );\n-        methodVisitor.visitVarInsn( ASTORE, exception.index() );\n+  @Override\n+  public <T> void tryCatchBlock(Consumer<T> body, Consumer<T> handler, LocalVariable exception, T block)\n+  {\n+    Label start = new Label();\n+    Label end = new Label();\n+    Label handle = new Label();\n+    Label after = new Label();\n+    methodVisitor.visitTryCatchBlock(start, end, handle,\n+        byteCodeName(exception.type()));\n+    methodVisitor.visitLabel(start);\n+    body.accept(block);\n+    methodVisitor.visitLabel(end);\n+    methodVisitor.visitJumpInsn(GOTO, after);\n+    //handle catch\n+    methodVisitor.visitLabel(handle);\n+    methodVisitor.visitVarInsn(ASTORE, exception.index());\n \n-        handler.accept( block );\n-        methodVisitor.visitLabel( after );\n-    }\n+    handler.accept(block);\n+    methodVisitor.visitLabel(after);\n+  }\n \n-    @Override\n-    public void throwException( Expression exception )\n-    {\n-        exception.accept( expressionVisitor );\n-        methodVisitor.visitInsn( ATHROW );\n-    }\n+  @Override\n+  public void throwException(Expression exception)\n+  {\n+    exception.accept(expressionVisitor);\n+    methodVisitor.visitInsn(ATHROW);\n+  }\n \n-    @Override\n-    public void declare( LocalVariable local )\n-    {\n-        //declare is a noop bytecode wise\n-    }\n+  @Override\n+  public void declare(LocalVariable local)\n+  {\n+    //declare is a noop bytecode wise\n+  }\n \n-    @Override\n-    public void assignVariableInScope( LocalVariable local, Expression value )\n-    {\n-        //these are equivalent when it comes to bytecode\n-        assign( local, value );\n-    }\n+  @Override\n+  public void assignVariableInScope(LocalVariable local, Expression value)\n+  {\n+    //these are equivalent when it comes to bytecode\n+    assign(local, value);\n+  }\n }\n",
            "diff_size": 233
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "81",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1047/MethodByteCodeEmitter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1047/MethodByteCodeEmitter.java\nindex 34e4b684426..8379651a2cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1047/MethodByteCodeEmitter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1047/MethodByteCodeEmitter.java\n@@ -75,13 +75,11 @@ class MethodByteCodeEmitter implements MethodEmitter\n             TypeReference type = parameter.type();\n             if ( type.isInnerClass() && !type.isArray() )\n             {\n-                classVisitor.visitInnerClass( byteCodeName( type ), outerName( type ),\n-                        type.simpleName(), type.modifiers() );\n-            }\n+                classVisitor.visitInnerClass( byteCodeName( type ), outerName( type ), type.simpleName(), type.modifiers() );\n+    }\n         }\n-        this.methodVisitor = classVisitor.visitMethod( ACC_PUBLIC, declaration.name(), desc( declaration ),\n-                signature( declaration ), exceptions( declaration ) );\n-        this.methodVisitor.visitCode();\n+        this.methodVisitor = classVisitor.visitMethod( ACC_PUBLIC, declaration.name(), desc( declaration ), signature( declaration ), exceptions( declaration ) );\n+this.methodVisitor.visitCode();\n         this.expressionVisitor = new ByteCodeExpressionVisitor( this.methodVisitor );\n         stateStack.push( new Method( methodVisitor, declaration.returnType().isVoid() ) );\n     }\n@@ -103,8 +101,7 @@ class MethodByteCodeEmitter implements MethodEmitter\n     {\n         target.accept( expressionVisitor );\n         value.accept( expressionVisitor );\n-        methodVisitor\n-                .visitFieldInsn( PUTFIELD, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n+        methodVisitor.visitFieldInsn( PUTFIELD, byteCodeName( field.owner() ), field.name(), typeName( field.type() ) );\n     }\n \n     @Override\n@@ -154,7 +151,7 @@ class MethodByteCodeEmitter implements MethodEmitter\n         {\n             if ( block instanceof While )\n             {\n-                ((While)block).continueBlock();\n+                ((While) block).continueBlock();\n                 return;\n             }\n         }\n@@ -202,8 +199,7 @@ class MethodByteCodeEmitter implements MethodEmitter\n         Label done = new Label();\n         methodVisitor.visitLabel( repeat );\n         test.accept( new JumpVisitor( expressionVisitor, methodVisitor, done ) );\n-\n-        stateStack.push( new While( methodVisitor, repeat, done  ) );\n+stateStack.push( new While( methodVisitor, repeat, done ) );\n     }\n \n     @Override\n@@ -217,7 +213,8 @@ class MethodByteCodeEmitter implements MethodEmitter\n     @Override\n     public void beginBlock()\n     {\n-        stateStack.push( () -> {} );\n+        stateStack.push( () ->\n+{} );\n     }\n \n     @Override\n@@ -239,15 +236,14 @@ class MethodByteCodeEmitter implements MethodEmitter\n         Label after = new Label();\n         methodVisitor.visitTryCatchBlock( start, end, handle,\n                 byteCodeName( exception.type() ) );\n-        methodVisitor.visitLabel( start );\n+methodVisitor.visitLabel( start );\n         body.accept( block );\n         methodVisitor.visitLabel( end );\n         methodVisitor.visitJumpInsn( GOTO, after );\n         //handle catch\n         methodVisitor.visitLabel( handle );\n         methodVisitor.visitVarInsn( ASTORE, exception.index() );\n-\n-        handler.accept( block );\n+handler.accept( block );\n         methodVisitor.visitLabel( after );\n     }\n \n@@ -270,4 +266,4 @@ class MethodByteCodeEmitter implements MethodEmitter\n         //these are equivalent when it comes to bytecode\n         assign( local, value );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}