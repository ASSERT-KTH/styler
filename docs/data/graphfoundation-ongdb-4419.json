{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4419",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "46",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "59",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "73",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "76",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "112",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4419/DiagnosticsReportSources.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4419/DiagnosticsReportSources.java\nindex 043deea99e5..48dc2500781 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4419/DiagnosticsReportSources.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4419/DiagnosticsReportSources.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.diagnostics;\n \n import java.io.File;\n@@ -40,135 +41,135 @@ import static org.neo4j.logging.RotatingFileOutputStreamSupplier.getAllArchives;\n  */\n public class DiagnosticsReportSources\n {\n-    private DiagnosticsReportSources()\n+  private DiagnosticsReportSources()\n+  {\n+    throw new AssertionError(\"No instances\");\n+  }\n+\n+  /**\n+   * Create a diagnostics source the will copy a file into the archive.\n+   *\n+   * @param destination final destination in archive.\n+   * @param fs          filesystem abstraction to use.\n+   * @param source      source file to archive\n+   * @return a diagnostics source consuming a file.\n+   */\n+  public static DiagnosticsReportSource newDiagnosticsFile(String destination, FileSystemAbstraction fs,\n+                                                           File source)\n+  {\n+    return new DiagnosticsFileReportSource(destination, fs, source);\n+  }\n+\n+  /**\n+   * This is to be used by loggers that uses {@link RotatingFileOutputStreamSupplier}.\n+   *\n+   * @param destination final destination in archive.\n+   * @param fs          filesystem abstraction to use.\n+   * @param file        input log file, should be without rotation numbers.\n+   * @return a list diagnostics sources consisting of the log file including all rotated away files.\n+   */\n+  public static List<DiagnosticsReportSource> newDiagnosticsRotatingFile(String destination,\n+                                                                         FileSystemAbstraction fs, File file)\n+  {\n+    ArrayList<DiagnosticsReportSource> files = new ArrayList<>();\n+\n+    files.add(newDiagnosticsFile(destination, fs, file));\n+\n+    List<File> allArchives = getAllArchives(fs, file);\n+    for (File archive : allArchives)\n+    {\n+      String name = archive.getName();\n+      String n = name.substring(name.lastIndexOf('.'));\n+      files.add(newDiagnosticsFile(destination + \".\" + n, fs, archive));\n+    }\n+    return files;\n+  }\n+\n+  /**\n+   * Create a diagnostics source from a string. Can be used to dump simple messages to a file in the archive. Files\n+   * are opened with append option so this method can be used to accumulate messages from multiple source to a single\n+   * file in the archive.\n+   *\n+   * @param destination     final destination in archive.\n+   * @param messageSupplier a string supplier with the final message.\n+   * @return a diagnostics source consuming a string.\n+   */\n+  public static DiagnosticsReportSource newDiagnosticsString(String destination,\n+                                                             Supplier<String> messageSupplier)\n+  {\n+    return new DiagnosticsStringReportSource(destination, messageSupplier);\n+  }\n+\n+  private static class DiagnosticsFileReportSource implements DiagnosticsReportSource\n+  {\n+    private final String destination;\n+    private final FileSystemAbstraction fs;\n+    private final File source;\n+\n+    DiagnosticsFileReportSource(String destination, FileSystemAbstraction fs, File source)\n+    {\n+      this.destination = destination;\n+      this.fs = fs;\n+      this.source = source;\n+    }\n+\n+    @Override\n+    public String destinationPath()\n     {\n-        throw new AssertionError( \"No instances\" );\n+      return destination;\n     }\n \n-    /**\n-     * Create a diagnostics source the will copy a file into the archive.\n-     *\n-     * @param destination final destination in archive.\n-     * @param fs filesystem abstraction to use.\n-     * @param source source file to archive\n-     * @return a diagnostics source consuming a file.\n-     */\n-    public static DiagnosticsReportSource newDiagnosticsFile( String destination, FileSystemAbstraction fs,\n-            File source )\n+    @Override\n+    public void addToArchive(Path archiveDestination, DiagnosticsReporterProgress progress)\n+        throws IOException\n     {\n-        return new DiagnosticsFileReportSource( destination, fs, source );\n+      long size = fs.getFileSize(source);\n+      InputStream in = fs.openAsInputStream(source);\n+\n+      // Track progress of the file reading, source might be a very large file\n+      try (ProgressAwareInputStream inStream = new ProgressAwareInputStream(in, size, progress::percentChanged))\n+      {\n+        Files.copy(inStream, archiveDestination);\n+      }\n     }\n \n-    /**\n-     * This is to be used by loggers that uses {@link RotatingFileOutputStreamSupplier}.\n-     *\n-     * @param destination final destination in archive.\n-     * @param fs filesystem abstraction to use.\n-     * @param file input log file, should be without rotation numbers.\n-     * @return a list diagnostics sources consisting of the log file including all rotated away files.\n-     */\n-    public static List<DiagnosticsReportSource> newDiagnosticsRotatingFile( String destination,\n-            FileSystemAbstraction fs, File file )\n+    @Override\n+    public long estimatedSize(DiagnosticsReporterProgress progress)\n+    {\n+      return fs.getFileSize(source);\n+    }\n+  }\n+\n+  private static class DiagnosticsStringReportSource implements DiagnosticsReportSource\n+  {\n+    private final String destination;\n+    private final Supplier<String> messageSupplier;\n+\n+    private DiagnosticsStringReportSource(String destination, Supplier<String> messageSupplier)\n     {\n-        ArrayList<DiagnosticsReportSource> files = new ArrayList<>();\n-\n-        files.add( newDiagnosticsFile( destination, fs, file ) );\n-\n-        List<File> allArchives = getAllArchives( fs, file );\n-        for ( File archive : allArchives )\n-        {\n-            String name = archive.getName();\n-            String n = name.substring( name.lastIndexOf( '.' ) );\n-            files.add( newDiagnosticsFile( destination + \".\" + n, fs, archive ) );\n-        }\n-        return files;\n+      this.destination = destination;\n+      this.messageSupplier = messageSupplier;\n     }\n \n-    /**\n-     * Create a diagnostics source from a string. Can be used to dump simple messages to a file in the archive. Files\n-     * are opened with append option so this method can be used to accumulate messages from multiple source to a single\n-     * file in the archive.\n-     *\n-     * @param destination final destination in archive.\n-     * @param messageSupplier a string supplier with the final message.\n-     * @return a diagnostics source consuming a string.\n-     */\n-    public static DiagnosticsReportSource newDiagnosticsString( String destination,\n-            Supplier<String> messageSupplier )\n+    @Override\n+    public String destinationPath()\n     {\n-        return new DiagnosticsStringReportSource( destination, messageSupplier );\n+      return destination;\n     }\n \n-    private static class DiagnosticsFileReportSource implements DiagnosticsReportSource\n+    @Override\n+    public void addToArchive(Path archiveDestination, DiagnosticsReporterProgress progress)\n+        throws IOException\n     {\n-        private final String destination;\n-        private final FileSystemAbstraction fs;\n-        private final File source;\n-\n-        DiagnosticsFileReportSource( String destination, FileSystemAbstraction fs, File source )\n-        {\n-            this.destination = destination;\n-            this.fs = fs;\n-            this.source = source;\n-        }\n-\n-        @Override\n-        public String destinationPath()\n-        {\n-            return destination;\n-        }\n-\n-        @Override\n-        public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress )\n-                throws IOException\n-        {\n-            long size = fs.getFileSize( source );\n-            InputStream in = fs.openAsInputStream( source );\n-\n-            // Track progress of the file reading, source might be a very large file\n-            try ( ProgressAwareInputStream inStream = new ProgressAwareInputStream( in, size, progress::percentChanged ) )\n-            {\n-                Files.copy( inStream, archiveDestination );\n-            }\n-        }\n-\n-        @Override\n-        public long estimatedSize( DiagnosticsReporterProgress progress )\n-        {\n-            return fs.getFileSize( source );\n-        }\n+      String message = messageSupplier.get();\n+      Files.write(archiveDestination, message.getBytes(StandardCharsets.UTF_8), StandardOpenOption.CREATE,\n+          StandardOpenOption.APPEND);\n     }\n \n-    private static class DiagnosticsStringReportSource implements DiagnosticsReportSource\n+    @Override\n+    public long estimatedSize(DiagnosticsReporterProgress progress)\n     {\n-        private final String destination;\n-        private final Supplier<String> messageSupplier;\n-\n-        private DiagnosticsStringReportSource( String destination, Supplier<String> messageSupplier )\n-        {\n-            this.destination = destination;\n-            this.messageSupplier = messageSupplier;\n-        }\n-\n-        @Override\n-        public String destinationPath()\n-        {\n-            return destination;\n-        }\n-\n-        @Override\n-        public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress )\n-                throws IOException\n-        {\n-            String message = messageSupplier.get();\n-            Files.write( archiveDestination, message.getBytes( StandardCharsets.UTF_8 ), StandardOpenOption.CREATE,\n-                    StandardOpenOption.APPEND );\n-        }\n-\n-        @Override\n-        public long estimatedSize( DiagnosticsReporterProgress progress )\n-        {\n-            return 0; // Size of strings should be negligible\n-        }\n+      return 0; // Size of strings should be negligible\n     }\n+  }\n }\n",
            "diff_size": 202
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4419/DiagnosticsReportSources.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4419/DiagnosticsReportSources.java\nindex 043deea99e5..c32da5892dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4419/DiagnosticsReportSources.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4419/DiagnosticsReportSources.java\n@@ -71,8 +71,7 @@ public class DiagnosticsReportSources\n             FileSystemAbstraction fs, File file )\n     {\n         ArrayList<DiagnosticsReportSource> files = new ArrayList<>();\n-\n-        files.add( newDiagnosticsFile( destination, fs, file ) );\n+files.add( newDiagnosticsFile( destination, fs, file ) );\n \n         List<File> allArchives = getAllArchives( fs, file );\n         for ( File archive : allArchives )\n@@ -81,7 +80,8 @@ public class DiagnosticsReportSources\n             String n = name.substring( name.lastIndexOf( '.' ) );\n             files.add( newDiagnosticsFile( destination + \".\" + n, fs, archive ) );\n         }\n-        return files;\n+\n+return files;\n     }\n \n     /**\n@@ -93,8 +93,7 @@ public class DiagnosticsReportSources\n      * @param messageSupplier a string supplier with the final message.\n      * @return a diagnostics source consuming a string.\n      */\n-    public static DiagnosticsReportSource newDiagnosticsString( String destination,\n-            Supplier<String> messageSupplier )\n+    public static DiagnosticsReportSource newDiagnosticsString( String destination, Supplier<String> messageSupplier )\n     {\n         return new DiagnosticsStringReportSource( destination, messageSupplier );\n     }\n@@ -119,9 +118,8 @@ public class DiagnosticsReportSources\n         }\n \n         @Override\n-        public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress )\n-                throws IOException\n-        {\n+        public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress ) throws IOException\n+{\n             long size = fs.getFileSize( source );\n             InputStream in = fs.openAsInputStream( source );\n \n@@ -157,9 +155,8 @@ public class DiagnosticsReportSources\n         }\n \n         @Override\n-        public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress )\n-                throws IOException\n-        {\n+        public void addToArchive( Path archiveDestination, DiagnosticsReporterProgress progress ) throws IOException\n+{\n             String message = messageSupplier.get();\n             Files.write( archiveDestination, message.getBytes( StandardCharsets.UTF_8 ), StandardOpenOption.CREATE,\n                     StandardOpenOption.APPEND );\n@@ -171,4 +168,4 @@ public class DiagnosticsReportSources\n             return 0; // Size of strings should be negligible\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}