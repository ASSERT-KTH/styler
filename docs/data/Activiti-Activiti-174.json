{
    "project_name": "Activiti-Activiti",
    "error_id": "174",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.validation.validator.impl;\n\nimport java.util.List;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/174/EventValidator.java\nindex 62e87e94d8f..edd760b31f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/174/EventValidator.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/174/EventValidator.java\nindex 62e87e94d8f..95ce40aa9d3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/174/EventValidator.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n@@ -29,78 +30,76 @@ import org.apache.commons.lang3.StringUtils;\n \n /**\n  * Validates rules that apply to all events (start event, boundary event, etc.)\n- * \n-\n  */\n public class EventValidator extends ProcessLevelValidator {\n \n-  @Override\n-  protected void executeValidation(BpmnModel bpmnModel, Process process, List<ValidationError> errors) {\n-    List<Event> events = process.findFlowElementsOfType(Event.class);\n-    for (Event event : events) {\n-      if (event.getEventDefinitions() != null) {\n-        for (EventDefinition eventDefinition : event.getEventDefinitions()) {\n-\n-          if (eventDefinition instanceof MessageEventDefinition) {\n-            handleMessageEventDefinition(bpmnModel, process, event, eventDefinition, errors);\n-          } else if (eventDefinition instanceof SignalEventDefinition) {\n-            handleSignalEventDefinition(bpmnModel, process, event, eventDefinition, errors);\n-          } else if (eventDefinition instanceof TimerEventDefinition) {\n-            handleTimerEventDefinition(process, event, eventDefinition, errors);\n-          } else if (eventDefinition instanceof CompensateEventDefinition) {\n-            handleCompensationEventDefinition(bpmnModel, process, event, eventDefinition, errors);\n-          }\n+    @Override\n+    protected void executeValidation(BpmnModel bpmnModel, Process process, List<ValidationError> errors) {\n+        List<Event> events = process.findFlowElementsOfType(Event.class);\n+        for (Event event : events) {\n+            if (event.getEventDefinitions() != null) {\n+                for (EventDefinition eventDefinition : event.getEventDefinitions()) {\n \n+                    if (eventDefinition instanceof MessageEventDefinition) {\n+                        handleMessageEventDefinition(bpmnModel, process, event, eventDefinition, errors);\n+                    } else if (eventDefinition instanceof SignalEventDefinition) {\n+                        handleSignalEventDefinition(bpmnModel, process, event, eventDefinition, errors);\n+                    } else if (eventDefinition instanceof TimerEventDefinition) {\n+                        handleTimerEventDefinition(process, event, eventDefinition, errors);\n+                    } else if (eventDefinition instanceof CompensateEventDefinition) {\n+                        handleCompensationEventDefinition(bpmnModel, process, event, eventDefinition, errors);\n+                    }\n+\n+                }\n+            }\n         }\n-      }\n     }\n-  }\n-\n-  protected void handleMessageEventDefinition(BpmnModel bpmnModel, Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n-    MessageEventDefinition messageEventDefinition = (MessageEventDefinition) eventDefinition;\n-\n-    if (StringUtils.isEmpty(messageEventDefinition.getMessageRef())) {\n-      \n-      if (StringUtils.isEmpty(messageEventDefinition.getMessageExpression())) {\n-        // message ref should be filled in\n-        addError(errors, Problems.MESSAGE_EVENT_MISSING_MESSAGE_REF, process, event, \"attribute 'messageRef' is required\");\n-      }\n-      \n-    } else if (!bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) {\n-      // message ref should exist\n-      addError(errors, Problems.MESSAGE_EVENT_INVALID_MESSAGE_REF, process, event, \"Invalid 'messageRef': no message with that id can be found in the model\");\n+\n+    protected void handleMessageEventDefinition(BpmnModel bpmnModel, Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n+        MessageEventDefinition messageEventDefinition = (MessageEventDefinition) eventDefinition;\n+\n+        if (StringUtils.isEmpty(messageEventDefinition.getMessageRef())) {\n+\n+            if (StringUtils.isEmpty(messageEventDefinition.getMessageExpression())) {\n+                // message ref should be filled in\n+                addError(errors, Problems.MESSAGE_EVENT_MISSING_MESSAGE_REF, process, event, \"attribute 'messageRef' is required\");\n+            }\n+\n+        } else if (!bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) {\n+            // message ref should exist\n+            addError(errors, Problems.MESSAGE_EVENT_INVALID_MESSAGE_REF, process, event, \"Invalid 'messageRef': no message with that id can be found in the model\");\n+        }\n     }\n-  }\n-\n-  protected void handleSignalEventDefinition(BpmnModel bpmnModel, Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n-    SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n-\n-    if (StringUtils.isEmpty(signalEventDefinition.getSignalRef())) {\n-      \n-      if (StringUtils.isEmpty(signalEventDefinition.getSignalExpression())) {\n-        addError(errors, Problems.SIGNAL_EVENT_MISSING_SIGNAL_REF, process, event, \"signalEventDefinition does not have mandatory property 'signalRef'\");\n-      }\n-      \n-    } else if (!bpmnModel.containsSignalId(signalEventDefinition.getSignalRef())) {\n-      addError(errors, Problems.SIGNAL_EVENT_INVALID_SIGNAL_REF, process, event, \"Invalid 'signalRef': no signal with that id can be found in the model\");\n+\n+    protected void handleSignalEventDefinition(BpmnModel bpmnModel, Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n+        SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n+\n+        if (StringUtils.isEmpty(signalEventDefinition.getSignalRef())) {\n+\n+            if (StringUtils.isEmpty(signalEventDefinition.getSignalExpression())) {\n+                addError(errors, Problems.SIGNAL_EVENT_MISSING_SIGNAL_REF, process, event, \"signalEventDefinition does not have mandatory property 'signalRef'\");\n+            }\n+\n+        } else if (!bpmnModel.containsSignalId(signalEventDefinition.getSignalRef())) {\n+            addError(errors, Problems.SIGNAL_EVENT_INVALID_SIGNAL_REF, process, event, \"Invalid 'signalRef': no signal with that id can be found in the model\");\n+        }\n     }\n-  }\n \n-  protected void handleTimerEventDefinition(Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n-    TimerEventDefinition timerEventDefinition = (TimerEventDefinition) eventDefinition;\n-    if (StringUtils.isEmpty(timerEventDefinition.getTimeDate()) && StringUtils.isEmpty(timerEventDefinition.getTimeCycle()) && StringUtils.isEmpty(timerEventDefinition.getTimeDuration())) {\n-      // neither date, cycle or duration configured\n-      addError(errors, Problems.EVENT_TIMER_MISSING_CONFIGURATION, process, event, \"Timer needs configuration (either timeDate, timeCycle or timeDuration is needed)\");\n+    protected void handleTimerEventDefinition(Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n+        TimerEventDefinition timerEventDefinition = (TimerEventDefinition) eventDefinition;\n+        if (StringUtils.isEmpty(timerEventDefinition.getTimeDate()) && StringUtils.isEmpty(timerEventDefinition.getTimeCycle()) && StringUtils.isEmpty(timerEventDefinition.getTimeDuration())) {\n+            // neither date, cycle or duration configured\n+            addError(errors, Problems.EVENT_TIMER_MISSING_CONFIGURATION, process, event, \"Timer needs configuration (either timeDate, timeCycle or timeDuration is needed)\");\n+        }\n     }\n-  }\n \n-  protected void handleCompensationEventDefinition(BpmnModel bpmnModel, Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n-    CompensateEventDefinition compensateEventDefinition = (CompensateEventDefinition) eventDefinition;\n+    protected void handleCompensationEventDefinition(BpmnModel bpmnModel, Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n+        CompensateEventDefinition compensateEventDefinition = (CompensateEventDefinition) eventDefinition;\n \n-    // Check activityRef\n-    if ((StringUtils.isNotEmpty(compensateEventDefinition.getActivityRef()) && process.getFlowElement(compensateEventDefinition.getActivityRef(), true) == null)) {\n-      addError(errors, Problems.COMPENSATE_EVENT_INVALID_ACTIVITY_REF, process, event, \"Invalid attribute value for 'activityRef': no activity with the given id\");\n+        // Check activityRef\n+        if ((StringUtils.isNotEmpty(compensateEventDefinition.getActivityRef()) && process.getFlowElement(compensateEventDefinition.getActivityRef(), true) == null)) {\n+            addError(errors, Problems.COMPENSATE_EVENT_INVALID_ACTIVITY_REF, process, event, \"Invalid attribute value for 'activityRef': no activity with the given id\");\n+        }\n     }\n-  }\n \n }\n",
            "diff_size": 77
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "65",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 4, expected is 8, indentation should be the same level as line 66.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "69",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 4, expected is 6, indentation should be the same level as line 70.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/174/EventValidator.java\nindex 62e87e94d8f..5465386adf4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/naturalize/174/EventValidator.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n@@ -60,14 +61,12 @@ public class EventValidator extends ProcessLevelValidator {\n     MessageEventDefinition messageEventDefinition = (MessageEventDefinition) eventDefinition;\n \n     if (StringUtils.isEmpty(messageEventDefinition.getMessageRef())) {\n-      \n-      if (StringUtils.isEmpty(messageEventDefinition.getMessageExpression())) {\n-        // message ref should be filled in\n+  if (StringUtils.isEmpty(messageEventDefinition.getMessageExpression())) {\n+    // message ref should be filled in\n         addError(errors, Problems.MESSAGE_EVENT_MISSING_MESSAGE_REF, process, event, \"attribute 'messageRef' is required\");\n       }\n-      \n-    } else if (!bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) {\n-      // message ref should exist\n+  } else if (!bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) {\n+    // message ref should exist\n       addError(errors, Problems.MESSAGE_EVENT_INVALID_MESSAGE_REF, process, event, \"Invalid 'messageRef': no message with that id can be found in the model\");\n     }\n   }\n@@ -76,12 +75,10 @@ public class EventValidator extends ProcessLevelValidator {\n     SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n \n     if (StringUtils.isEmpty(signalEventDefinition.getSignalRef())) {\n-      \n-      if (StringUtils.isEmpty(signalEventDefinition.getSignalExpression())) {\n+  if (StringUtils.isEmpty(signalEventDefinition.getSignalExpression())) {\n         addError(errors, Problems.SIGNAL_EVENT_MISSING_SIGNAL_REF, process, event, \"signalEventDefinition does not have mandatory property 'signalRef'\");\n       }\n-      \n-    } else if (!bpmnModel.containsSignalId(signalEventDefinition.getSignalRef())) {\n+  } else if (!bpmnModel.containsSignalId(signalEventDefinition.getSignalRef())) {\n       addError(errors, Problems.SIGNAL_EVENT_INVALID_SIGNAL_REF, process, event, \"Invalid 'signalRef': no signal with that id can be found in the model\");\n     }\n   }\n@@ -103,4 +100,4 @@ public class EventValidator extends ProcessLevelValidator {\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 12
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "36",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/174/EventValidator.java\nindex 62e87e94d8f..ea815a4276a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/174/EventValidator.java\n@@ -13,7 +13,6 @@\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n-\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.bpmn.model.CompensateEventDefinition;\n import org.activiti.bpmn.model.Event;\n@@ -32,6 +31,8 @@ import org.apache.commons.lang3.StringUtils;\n  * \n \n  */\n+\n+\n public class EventValidator extends ProcessLevelValidator {\n \n   @Override\n@@ -39,48 +40,58 @@ public class EventValidator extends ProcessLevelValidator {\n     List<Event> events = process.findFlowElementsOfType(Event.class);\n     for (Event event : events) {\n       if (event.getEventDefinitions() != null) {\n-        for (EventDefinition eventDefinition : event.getEventDefinitions()) {\n-\n-          if (eventDefinition instanceof MessageEventDefinition) {\n-            handleMessageEventDefinition(bpmnModel, process, event, eventDefinition, errors);\n-          } else if (eventDefinition instanceof SignalEventDefinition) {\n-            handleSignalEventDefinition(bpmnModel, process, event, eventDefinition, errors);\n-          } else if (eventDefinition instanceof TimerEventDefinition) {\n-            handleTimerEventDefinition(process, event, eventDefinition, errors);\n-          } else if (eventDefinition instanceof CompensateEventDefinition) {\n-            handleCompensationEventDefinition(bpmnModel, process, event, eventDefinition, errors);\n+          for (EventDefinition eventDefinition : event.getEventDefinitions()) {\n+            if (eventDefinition instanceof MessageEventDefinition) {\n+              handleMessageEventDefinition(bpmnModel,\n+                                           process,\n+                                           event,\n+                                           eventDefinition,\n+                                           errors);\n+            } else if (eventDefinition instanceof SignalEventDefinition) {\n+              handleSignalEventDefinition(bpmnModel,\n+                                          process,\n+                                          event,\n+                                          eventDefinition,\n+                                          errors);\n+            } else if (eventDefinition instanceof TimerEventDefinition) {\n+              handleTimerEventDefinition(process, event, eventDefinition, errors);\n+                   } else if (eventDefinition instanceof CompensateEventDefinition) {\n+                     handleCompensationEventDefinition(bpmnModel,\n+                                                       process,\n+                                                       event,\n+                                                       eventDefinition,\n+                                                       errors);\n+                   }\n           }\n-\n-        }\n       }\n     }\n   }\n \n-  protected void handleMessageEventDefinition(BpmnModel bpmnModel, Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n+  protected void handleMessageEventDefinition(BpmnModel bpmnModel,\n+                                              Process process,\n+                                              Event event,\n+                                              EventDefinition eventDefinition, List<ValidationError> errors) {\n     MessageEventDefinition messageEventDefinition = (MessageEventDefinition) eventDefinition;\n-\n     if (StringUtils.isEmpty(messageEventDefinition.getMessageRef())) {\n-      \n       if (StringUtils.isEmpty(messageEventDefinition.getMessageExpression())) {\n         // message ref should be filled in\n         addError(errors, Problems.MESSAGE_EVENT_MISSING_MESSAGE_REF, process, event, \"attribute 'messageRef' is required\");\n       }\n-      \n     } else if (!bpmnModel.containsMessageId(messageEventDefinition.getMessageRef())) {\n       // message ref should exist\n       addError(errors, Problems.MESSAGE_EVENT_INVALID_MESSAGE_REF, process, event, \"Invalid 'messageRef': no message with that id can be found in the model\");\n     }\n   }\n \n-  protected void handleSignalEventDefinition(BpmnModel bpmnModel, Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n+  protected void handleSignalEventDefinition(BpmnModel bpmnModel,\n+                                             Process process,\n+                                             Event event,\n+                                             EventDefinition eventDefinition, List<ValidationError> errors) {\n     SignalEventDefinition signalEventDefinition = (SignalEventDefinition) eventDefinition;\n-\n     if (StringUtils.isEmpty(signalEventDefinition.getSignalRef())) {\n-      \n       if (StringUtils.isEmpty(signalEventDefinition.getSignalExpression())) {\n         addError(errors, Problems.SIGNAL_EVENT_MISSING_SIGNAL_REF, process, event, \"signalEventDefinition does not have mandatory property 'signalRef'\");\n       }\n-      \n     } else if (!bpmnModel.containsSignalId(signalEventDefinition.getSignalRef())) {\n       addError(errors, Problems.SIGNAL_EVENT_INVALID_SIGNAL_REF, process, event, \"Invalid 'signalRef': no signal with that id can be found in the model\");\n     }\n@@ -94,13 +105,16 @@ public class EventValidator extends ProcessLevelValidator {\n     }\n   }\n \n-  protected void handleCompensationEventDefinition(BpmnModel bpmnModel, Process process, Event event, EventDefinition eventDefinition, List<ValidationError> errors) {\n+  protected void handleCompensationEventDefinition(BpmnModel bpmnModel,\n+                                                   Process process,\n+                                                   Event event,\n+                                                   EventDefinition eventDefinition, List<ValidationError> errors) {\n     CompensateEventDefinition compensateEventDefinition = (CompensateEventDefinition) eventDefinition;\n \n     // Check activityRef\n-    if ((StringUtils.isNotEmpty(compensateEventDefinition.getActivityRef()) && process.getFlowElement(compensateEventDefinition.getActivityRef(), true) == null)) {\n+    if ((StringUtils.isNotEmpty(compensateEventDefinition.getActivityRef()) && process.getFlowElement(compensateEventDefinition.getActivityRef(),\n+                                                                                                      true) == null)) {\n       addError(errors, Problems.COMPENSATE_EVENT_INVALID_ACTIVITY_REF, process, event, \"Invalid attribute value for 'activityRef': no activity with the given id\");\n     }\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 49
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/174/EventValidator.java\nindex 62e87e94d8f..edd760b31f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/174/EventValidator.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/174/EventValidator.java\nindex 62e87e94d8f..edd760b31f4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/174/EventValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/174/EventValidator.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.validation.validator.impl;\n \n import java.util.List;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}