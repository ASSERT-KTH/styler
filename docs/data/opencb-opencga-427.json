{
    "project_name": "opencb-opencga",
    "error_id": "427",
    "information": {
        "errors": [
            {
                "line": "218",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 142).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "//\n//        // Append other params\n//        Set<String> skipParams =  new HashSet<>(Arrays.asList(\"I\", \"INPUT\", \"O\", \"OUTPUT\", \"BAIT_INTERVALS\", \"BI\", \"TARGET_INTERVALS\", \"TI\",\n//                \"REFERENCE_SEQUENCE\",\"R\"));\n//        appendOtherParams(skipParams, sb);\n//",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/427/PicardWrapperAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/427/PicardWrapperAnalysisExecutor.java\nindex 03fd30800fa..2e3db97bee1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/427/PicardWrapperAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/427/PicardWrapperAnalysisExecutor.java\n@@ -215,9 +215,9 @@ public class PicardWrapperAnalysisExecutor extends OpenCgaWrapperAnalysisExecuto\n //        appendOutputFiles(outputFilenames, sb);\n //\n //        // Append other params\n-//        Set<String> skipParams =  new HashSet<>(Arrays.asList(\"I\", \"INPUT\", \"O\", \"OUTPUT\", \"BAIT_INTERVALS\", \"BI\", \"TARGET_INTERVALS\", \"TI\",\n //                \"REFERENCE_SEQUENCE\",\"R\"));\n //        appendOtherParams(skipParams, sb);\n+//        appendOtherParams(skipParams, sb);\n //\n //        // Execute command and redirect stdout and stderr to the files: stdout.txt and stderr.txt\n //        runCommandLine(sb.toString());\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/427/PicardWrapperAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/427/PicardWrapperAnalysisExecutor.java\nindex 03fd30800fa..35a05d64bb2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/427/PicardWrapperAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/427/PicardWrapperAnalysisExecutor.java\n@@ -10,49 +10,49 @@ import java.nio.file.Path;\n \n public class PicardWrapperAnalysisExecutor extends OpenCgaWrapperAnalysisExecutor {\n \n-    private String command;\n+  private String command;\n \n-    public PicardWrapperAnalysisExecutor(String studyId, ObjectMap params, Path outDir, Path scratchDir, CatalogManager catalogManager,\n-                                         String token) {\n+  public PicardWrapperAnalysisExecutor(String studyId, ObjectMap params, Path outDir, Path scratchDir, CatalogManager catalogManager,\n+                                       String token) {\n //        super(studyId, params, outDir, scratchDir, catalogManager, token);\n-        this.sep = \"=\";\n-        this.shortPrefix = \"\";\n-        this.longPrefix = \"\";\n-    }\n+    this.sep = \"=\";\n+    this.shortPrefix = \"\";\n+    this.longPrefix = \"\";\n+  }\n \n-    @Override\n-    public void run() throws ToolException {\n-        try {\n-            switch (command) {\n-                case \"CollectHsMetrics\":\n-                    runCollectHsMetrics();\n-                    break;\n-                case \"CollectWgsMetrics\":\n-                    runCollectWgsMetrics();\n-                    break;\n-                case \"BedToIntervalList\":\n-                    runBedToIntervalList();\n-                    break;\n-                default:\n-                    throw new ToolException(\"Picard tool name '\" + command + \"' is not available. Supported tools: CollectHsMetrics,\"\n-                            + \" CollectWgsMetrics, BedToIntervalList\");\n-            }\n-        } catch (FileNotFoundException e) {\n-            throw new ToolException(e);\n-        }\n+  @Override\n+  public void run() throws ToolException {\n+    try {\n+      switch (command) {\n+        case \"CollectHsMetrics\":\n+          runCollectHsMetrics();\n+          break;\n+        case \"CollectWgsMetrics\":\n+          runCollectWgsMetrics();\n+          break;\n+        case \"BedToIntervalList\":\n+          runBedToIntervalList();\n+          break;\n+        default:\n+          throw new ToolException(\"Picard tool name '\" + command + \"' is not available. Supported tools: CollectHsMetrics,\"\n+              + \" CollectWgsMetrics, BedToIntervalList\");\n+      }\n+    } catch (FileNotFoundException e) {\n+      throw new ToolException(e);\n     }\n+  }\n \n //    @Override\n //    protected String getId() {\n //        return PicardWrapperAnalysis.ID;\n //    }\n \n-    @Override\n-    protected String getDockerImageName() {\n-        return PicardWrapperAnalysis.PICARD_DOCKER_IMAGE;\n-    }\n+  @Override\n+  protected String getDockerImageName() {\n+    return PicardWrapperAnalysis.PICARD_DOCKER_IMAGE;\n+  }\n \n-    private void runBedToIntervalList() throws ToolException {\n+  private void runBedToIntervalList() throws ToolException {\n //        String bedFilename = \"\";\n //        if (StringUtils.isNotEmpty(params.getString(\"INPUT\"))) {\n //            bedFilename = params.getString(\"INPUT\");\n@@ -98,9 +98,9 @@ public class PicardWrapperAnalysisExecutor extends OpenCgaWrapperAnalysisExecuto\n //\n //        // Execute command and redirect stdout and stderr to the files: stdout.txt and stderr.txt\n //        runCommandLine(sb.toString());\n-    }\n+  }\n \n-    private void runCollectWgsMetrics() throws ToolException, FileNotFoundException {\n+  private void runCollectWgsMetrics() throws ToolException, FileNotFoundException {\n //        String bamFilename = \"\";\n //        if (StringUtils.isNotEmpty(params.getString(\"INPUT\"))) {\n //            bamFilename = params.getString(\"INPUT\");\n@@ -146,9 +146,9 @@ public class PicardWrapperAnalysisExecutor extends OpenCgaWrapperAnalysisExecuto\n //\n //        // Execute command and redirect stdout and stderr to the files: stdout.txt and stderr.txt\n //        runCommandLine(sb.toString());\n-    }\n+  }\n \n-    private void runCollectHsMetrics() throws ToolException, FileNotFoundException {\n+  private void runCollectHsMetrics() throws ToolException, FileNotFoundException {\n //        List<Pair<String, String>> inputFilenames = new ArrayList<>();\n //\n //        String bamFilename = \"\";\n@@ -221,14 +221,14 @@ public class PicardWrapperAnalysisExecutor extends OpenCgaWrapperAnalysisExecuto\n //\n //        // Execute command and redirect stdout and stderr to the files: stdout.txt and stderr.txt\n //        runCommandLine(sb.toString());\n-    }\n+  }\n \n-    public String getCommand() {\n-        return command;\n-    }\n+  public String getCommand() {\n+    return command;\n+  }\n \n-    public PicardWrapperAnalysisExecutor setCommand(String command) {\n-        this.command = command;\n-        return this;\n-    }\n+  public PicardWrapperAnalysisExecutor setCommand(String command) {\n+    this.command = command;\n+    return this;\n+  }\n }\n",
            "diff_size": 45
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/427/PicardWrapperAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/427/PicardWrapperAnalysisExecutor.java\nindex 03fd30800fa..ae05b3b55bf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/427/PicardWrapperAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/427/PicardWrapperAnalysisExecutor.java\n@@ -14,7 +14,7 @@ public class PicardWrapperAnalysisExecutor extends OpenCgaWrapperAnalysisExecuto\n \n     public PicardWrapperAnalysisExecutor(String studyId, ObjectMap params, Path outDir, Path scratchDir, CatalogManager catalogManager,\n                                          String token) {\n-//        super(studyId, params, outDir, scratchDir, catalogManager, token);\n+    //        super(studyId, params, outDir, scratchDir, catalogManager, token);\n         this.sep = \"=\";\n         this.shortPrefix = \"\";\n         this.longPrefix = \"\";\n@@ -231,4 +231,4 @@ public class PicardWrapperAnalysisExecutor extends OpenCgaWrapperAnalysisExecuto\n         this.command = command;\n         return this;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 142).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/427/PicardWrapperAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/427/PicardWrapperAnalysisExecutor.java\nindex 03fd30800fa..2e3db97bee1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/427/PicardWrapperAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/427/PicardWrapperAnalysisExecutor.java\n@@ -215,9 +215,9 @@ public class PicardWrapperAnalysisExecutor extends OpenCgaWrapperAnalysisExecuto\n //        appendOutputFiles(outputFilenames, sb);\n //\n //        // Append other params\n-//        Set<String> skipParams =  new HashSet<>(Arrays.asList(\"I\", \"INPUT\", \"O\", \"OUTPUT\", \"BAIT_INTERVALS\", \"BI\", \"TARGET_INTERVALS\", \"TI\",\n //                \"REFERENCE_SEQUENCE\",\"R\"));\n //        appendOtherParams(skipParams, sb);\n+//        appendOtherParams(skipParams, sb);\n //\n //        // Execute command and redirect stdout and stderr to the files: stdout.txt and stderr.txt\n //        runCommandLine(sb.toString());\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}