{
    "project_name": "fangjinuo-easyjson",
    "error_id": "44",
    "information": {
        "errors": [
            {
                "line": "183",
                "column": "40",
                "severity": "warning",
                "message": "'?' should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "  @Override\n  public BigInteger getAsBigInteger() {\n    return value instanceof BigInteger ?\n        (BigInteger) value : new BigInteger(value.toString());\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/44/JsonPrimitive.java\nindex 5e95d5a82b0..e9b5afcb80a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler/44/JsonPrimitive.java\n@@ -180,8 +180,7 @@ public final class JsonPrimitive extends JsonElement {\n    */\n   @Override\n   public BigInteger getAsBigInteger() {\n-    return value instanceof BigInteger ?\n-        (BigInteger) value : new BigInteger(value.toString());\n+    return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n   }\n \n   /**\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "184",
                    "column": "44",
                    "severity": "warning",
                    "message": "'?' should be on a new line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/44/JsonPrimitive.java\nindex 5e95d5a82b0..93077e8e6f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/intellij/44/JsonPrimitive.java\n@@ -32,264 +32,265 @@ import com.google.gson.internal.LazilyParsedNumber;\n  */\n public final class JsonPrimitive extends JsonElement {\n \n-  private final Object value;\n+    private final Object value;\n \n-  /**\n-   * Create a primitive containing a boolean value.\n-   *\n-   * @param bool the value to create the primitive with.\n-   */\n-  public JsonPrimitive(Boolean bool) {\n-    value = $Gson$Preconditions.checkNotNull(bool);\n-  }\n-\n-  /**\n-   * Create a primitive containing a {@link Number}.\n-   *\n-   * @param number the value to create the primitive with.\n-   */\n-  public JsonPrimitive(Number number) {\n-    value = $Gson$Preconditions.checkNotNull(number);\n-  }\n-\n-  /**\n-   * Create a primitive containing a String value.\n-   *\n-   * @param string the value to create the primitive with.\n-   */\n-  public JsonPrimitive(String string) {\n-    value = $Gson$Preconditions.checkNotNull(string);\n-  }\n-\n-  /**\n-   * Create a primitive containing a character. The character is turned into a one character String\n-   * since Json only supports String.\n-   *\n-   * @param c the value to create the primitive with.\n-   */\n-  public JsonPrimitive(Character c) {\n-    // convert characters to strings since in JSON, characters are represented as a single\n-    // character string\n-    value = $Gson$Preconditions.checkNotNull(c).toString();\n-  }\n-\n-  /**\n-   * Returns the same value as primitives are immutable.\n-   * @since 2.8.2\n-   */\n-  @Override\n-  public JsonPrimitive deepCopy() {\n-    return this;\n-  }\n-\n-  /**\n-   * Check whether this primitive contains a boolean value.\n-   *\n-   * @return true if this primitive contains a boolean value, false otherwise.\n-   */\n-  public boolean isBoolean() {\n-    return value instanceof Boolean;\n-  }\n-\n-  /**\n-   * convenience method to get this element as a boolean value.\n-   *\n-   * @return get this element as a primitive boolean value.\n-   */\n-  @Override\n-  public boolean getAsBoolean() {\n-    if (isBoolean()) {\n-      return ((Boolean) value).booleanValue();\n+    /**\n+     * Create a primitive containing a boolean value.\n+     *\n+     * @param bool the value to create the primitive with.\n+     */\n+    public JsonPrimitive(Boolean bool) {\n+        value = $Gson$Preconditions.checkNotNull(bool);\n     }\n-\t// Check to see if the value as a String is \"true\" in any case.\n-    return Boolean.parseBoolean(getAsString());\n-  }\n \n-  /**\n-   * Check whether this primitive contains a Number.\n-   *\n-   * @return true if this primitive contains a Number, false otherwise.\n-   */\n-  public boolean isNumber() {\n-    return value instanceof Number;\n-  }\n+    /**\n+     * Create a primitive containing a {@link Number}.\n+     *\n+     * @param number the value to create the primitive with.\n+     */\n+    public JsonPrimitive(Number number) {\n+        value = $Gson$Preconditions.checkNotNull(number);\n+    }\n \n-  /**\n-   * convenience method to get this element as a Number.\n-   *\n-   * @return get this element as a Number.\n-   * @throws NumberFormatException if the value contained is not a valid Number.\n-   */\n-  @Override\n-  public Number getAsNumber() {\n-    return value instanceof String ? new LazilyParsedNumber((String) value) : (Number) value;\n-  }\n+    /**\n+     * Create a primitive containing a String value.\n+     *\n+     * @param string the value to create the primitive with.\n+     */\n+    public JsonPrimitive(String string) {\n+        value = $Gson$Preconditions.checkNotNull(string);\n+    }\n \n-  /**\n-   * Check whether this primitive contains a String value.\n-   *\n-   * @return true if this primitive contains a String value, false otherwise.\n-   */\n-  public boolean isString() {\n-    return value instanceof String;\n-  }\n+    /**\n+     * Create a primitive containing a character. The character is turned into a one character String\n+     * since Json only supports String.\n+     *\n+     * @param c the value to create the primitive with.\n+     */\n+    public JsonPrimitive(Character c) {\n+        // convert characters to strings since in JSON, characters are represented as a single\n+        // character string\n+        value = $Gson$Preconditions.checkNotNull(c).toString();\n+    }\n \n-  /**\n-   * convenience method to get this element as a String.\n-   *\n-   * @return get this element as a String.\n-   */\n-  @Override\n-  public String getAsString() {\n-    if (isNumber()) {\n-      return getAsNumber().toString();\n-    } else if (isBoolean()) {\n-      return ((Boolean) value).toString();\n-    } else {\n-      return (String) value;\n+    /**\n+     * Returns the same value as primitives are immutable.\n+     *\n+     * @since 2.8.2\n+     */\n+    @Override\n+    public JsonPrimitive deepCopy() {\n+        return this;\n     }\n-  }\n \n-  /**\n-   * convenience method to get this element as a primitive double.\n-   *\n-   * @return get this element as a primitive double.\n-   * @throws NumberFormatException if the value contained is not a valid double.\n-   */\n-  @Override\n-  public double getAsDouble() {\n-    return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());\n-  }\n+    /**\n+     * Check whether this primitive contains a boolean value.\n+     *\n+     * @return true if this primitive contains a boolean value, false otherwise.\n+     */\n+    public boolean isBoolean() {\n+        return value instanceof Boolean;\n+    }\n \n-  /**\n-   * convenience method to get this element as a {@link BigDecimal}.\n-   *\n-   * @return get this element as a {@link BigDecimal}.\n-   * @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.\n-   */\n-  @Override\n-  public BigDecimal getAsBigDecimal() {\n-    return value instanceof BigDecimal ? (BigDecimal) value : new BigDecimal(value.toString());\n-  }\n+    /**\n+     * convenience method to get this element as a boolean value.\n+     *\n+     * @return get this element as a primitive boolean value.\n+     */\n+    @Override\n+    public boolean getAsBoolean() {\n+        if (isBoolean()) {\n+            return ((Boolean) value).booleanValue();\n+        }\n+        // Check to see if the value as a String is \"true\" in any case.\n+        return Boolean.parseBoolean(getAsString());\n+    }\n \n-  /**\n-   * convenience method to get this element as a {@link BigInteger}.\n-   *\n-   * @return get this element as a {@link BigInteger}.\n-   * @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.\n-   */\n-  @Override\n-  public BigInteger getAsBigInteger() {\n-    return value instanceof BigInteger ?\n-        (BigInteger) value : new BigInteger(value.toString());\n-  }\n+    /**\n+     * Check whether this primitive contains a Number.\n+     *\n+     * @return true if this primitive contains a Number, false otherwise.\n+     */\n+    public boolean isNumber() {\n+        return value instanceof Number;\n+    }\n \n-  /**\n-   * convenience method to get this element as a float.\n-   *\n-   * @return get this element as a float.\n-   * @throws NumberFormatException if the value contained is not a valid float.\n-   */\n-  @Override\n-  public float getAsFloat() {\n-    return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n-  }\n+    /**\n+     * convenience method to get this element as a Number.\n+     *\n+     * @return get this element as a Number.\n+     * @throws NumberFormatException if the value contained is not a valid Number.\n+     */\n+    @Override\n+    public Number getAsNumber() {\n+        return value instanceof String ? new LazilyParsedNumber((String) value) : (Number) value;\n+    }\n \n-  /**\n-   * convenience method to get this element as a primitive long.\n-   *\n-   * @return get this element as a primitive long.\n-   * @throws NumberFormatException if the value contained is not a valid long.\n-   */\n-  @Override\n-  public long getAsLong() {\n-    return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n-  }\n+    /**\n+     * Check whether this primitive contains a String value.\n+     *\n+     * @return true if this primitive contains a String value, false otherwise.\n+     */\n+    public boolean isString() {\n+        return value instanceof String;\n+    }\n \n-  /**\n-   * convenience method to get this element as a primitive short.\n-   *\n-   * @return get this element as a primitive short.\n-   * @throws NumberFormatException if the value contained is not a valid short value.\n-   */\n-  @Override\n-  public short getAsShort() {\n-    return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n-  }\n+    /**\n+     * convenience method to get this element as a String.\n+     *\n+     * @return get this element as a String.\n+     */\n+    @Override\n+    public String getAsString() {\n+        if (isNumber()) {\n+            return getAsNumber().toString();\n+        } else if (isBoolean()) {\n+            return ((Boolean) value).toString();\n+        } else {\n+            return (String) value;\n+        }\n+    }\n \n- /**\n-  * convenience method to get this element as a primitive integer.\n-  *\n-  * @return get this element as a primitive integer.\n-  * @throws NumberFormatException if the value contained is not a valid integer.\n-  */\n-  @Override\n-  public int getAsInt() {\n-    return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n-  }\n+    /**\n+     * convenience method to get this element as a primitive double.\n+     *\n+     * @return get this element as a primitive double.\n+     * @throws NumberFormatException if the value contained is not a valid double.\n+     */\n+    @Override\n+    public double getAsDouble() {\n+        return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());\n+    }\n \n-  @Override\n-  public byte getAsByte() {\n-    return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n-  }\n+    /**\n+     * convenience method to get this element as a {@link BigDecimal}.\n+     *\n+     * @return get this element as a {@link BigDecimal}.\n+     * @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.\n+     */\n+    @Override\n+    public BigDecimal getAsBigDecimal() {\n+        return value instanceof BigDecimal ? (BigDecimal) value : new BigDecimal(value.toString());\n+    }\n \n-  @Override\n-  public char getAsCharacter() {\n-    return getAsString().charAt(0);\n-  }\n+    /**\n+     * convenience method to get this element as a {@link BigInteger}.\n+     *\n+     * @return get this element as a {@link BigInteger}.\n+     * @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.\n+     */\n+    @Override\n+    public BigInteger getAsBigInteger() {\n+        return value instanceof BigInteger ?\n+            (BigInteger) value : new BigInteger(value.toString());\n+    }\n \n-  @Override\n-  public int hashCode() {\n-    if (value == null) {\n-      return 31;\n+    /**\n+     * convenience method to get this element as a float.\n+     *\n+     * @return get this element as a float.\n+     * @throws NumberFormatException if the value contained is not a valid float.\n+     */\n+    @Override\n+    public float getAsFloat() {\n+        return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n     }\n-    // Using recommended hashing algorithm from Effective Java for longs and doubles\n-    if (isIntegral(this)) {\n-      long value = getAsNumber().longValue();\n-      return (int) (value ^ (value >>> 32));\n+\n+    /**\n+     * convenience method to get this element as a primitive long.\n+     *\n+     * @return get this element as a primitive long.\n+     * @throws NumberFormatException if the value contained is not a valid long.\n+     */\n+    @Override\n+    public long getAsLong() {\n+        return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n     }\n-    if (value instanceof Number) {\n-      long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n-      return (int) (value ^ (value >>> 32));\n+\n+    /**\n+     * convenience method to get this element as a primitive short.\n+     *\n+     * @return get this element as a primitive short.\n+     * @throws NumberFormatException if the value contained is not a valid short value.\n+     */\n+    @Override\n+    public short getAsShort() {\n+        return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n     }\n-    return value.hashCode();\n-  }\n \n-  @Override\n-  public boolean equals(Object obj) {\n-    if (this == obj) {\n-      return true;\n+    /**\n+     * convenience method to get this element as a primitive integer.\n+     *\n+     * @return get this element as a primitive integer.\n+     * @throws NumberFormatException if the value contained is not a valid integer.\n+     */\n+    @Override\n+    public int getAsInt() {\n+        return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n     }\n-    if (obj == null || getClass() != obj.getClass()) {\n-      return false;\n+\n+    @Override\n+    public byte getAsByte() {\n+        return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n     }\n-    JsonPrimitive other = (JsonPrimitive)obj;\n-    if (value == null) {\n-      return other.value == null;\n+\n+    @Override\n+    public char getAsCharacter() {\n+        return getAsString().charAt(0);\n     }\n-    if (isIntegral(this) && isIntegral(other)) {\n-      return getAsNumber().longValue() == other.getAsNumber().longValue();\n+\n+    @Override\n+    public int hashCode() {\n+        if (value == null) {\n+            return 31;\n+        }\n+        // Using recommended hashing algorithm from Effective Java for longs and doubles\n+        if (isIntegral(this)) {\n+            long value = getAsNumber().longValue();\n+            return (int) (value ^ (value >>> 32));\n+        }\n+        if (value instanceof Number) {\n+            long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n+            return (int) (value ^ (value >>> 32));\n+        }\n+        return value.hashCode();\n     }\n-    if (value instanceof Number && other.value instanceof Number) {\n-      double a = getAsNumber().doubleValue();\n-      // Java standard types other than double return true for two NaN. So, need\n-      // special handling for double.\n-      double b = other.getAsNumber().doubleValue();\n-      return a == b || (Double.isNaN(a) && Double.isNaN(b));\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        JsonPrimitive other = (JsonPrimitive) obj;\n+        if (value == null) {\n+            return other.value == null;\n+        }\n+        if (isIntegral(this) && isIntegral(other)) {\n+            return getAsNumber().longValue() == other.getAsNumber().longValue();\n+        }\n+        if (value instanceof Number && other.value instanceof Number) {\n+            double a = getAsNumber().doubleValue();\n+            // Java standard types other than double return true for two NaN. So, need\n+            // special handling for double.\n+            double b = other.getAsNumber().doubleValue();\n+            return a == b || (Double.isNaN(a) && Double.isNaN(b));\n+        }\n+        return value.equals(other.value);\n     }\n-    return value.equals(other.value);\n-  }\n \n-  /**\n-   * Returns true if the specified number is an integral type\n-   * (Long, Integer, Short, Byte, BigInteger)\n-   */\n-  private static boolean isIntegral(JsonPrimitive primitive) {\n-    if (primitive.value instanceof Number) {\n-      Number number = (Number) primitive.value;\n-      return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-          || number instanceof Short || number instanceof Byte;\n+    /**\n+     * Returns true if the specified number is an integral type\n+     * (Long, Integer, Short, Byte, BigInteger)\n+     */\n+    private static boolean isIntegral(JsonPrimitive primitive) {\n+        if (primitive.value instanceof Number) {\n+            Number number = (Number) primitive.value;\n+            return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n+                || number instanceof Short || number instanceof Byte;\n+        }\n+        return false;\n     }\n-    return false;\n-  }\n }\n",
            "diff_size": 316
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/44/JsonPrimitive.java\nindex 5e95d5a82b0..f86b4163671 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/codebuff/44/JsonPrimitive.java\n@@ -19,7 +19,6 @@ package com.google.gson;\n import com.google.gson.internal.$Gson$Preconditions;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n-\n import com.google.gson.internal.LazilyParsedNumber;\n \n /**\n@@ -30,36 +29,39 @@ import com.google.gson.internal.LazilyParsedNumber;\n  * @author Inderjeet Singh\n  * @author Joel Leitch\n  */\n-public final class JsonPrimitive extends JsonElement {\n \n-  private final Object value;\n+public final class JsonPrimitive extends JsonElement {\n+    private final Object value;\n \n   /**\n    * Create a primitive containing a boolean value.\n    *\n    * @param bool the value to create the primitive with.\n    */\n-  public JsonPrimitive(Boolean bool) {\n-    value = $Gson$Preconditions.checkNotNull(bool);\n-  }\n+\n+    public JsonPrimitive(Boolean bool) {\n+        value = $Gson$Preconditions.checkNotNull(bool);\n+    }\n \n   /**\n    * Create a primitive containing a {@link Number}.\n    *\n    * @param number the value to create the primitive with.\n    */\n-  public JsonPrimitive(Number number) {\n-    value = $Gson$Preconditions.checkNotNull(number);\n-  }\n+\n+    public JsonPrimitive(Number number) {\n+        value = $Gson$Preconditions.checkNotNull(number);\n+    }\n \n   /**\n    * Create a primitive containing a String value.\n    *\n    * @param string the value to create the primitive with.\n    */\n-  public JsonPrimitive(String string) {\n-    value = $Gson$Preconditions.checkNotNull(string);\n-  }\n+\n+    public JsonPrimitive(String string) {\n+        value = $Gson$Preconditions.checkNotNull(string);\n+    }\n \n   /**\n    * Create a primitive containing a character. The character is turned into a one character String\n@@ -67,52 +69,57 @@ public final class JsonPrimitive extends JsonElement {\n    *\n    * @param c the value to create the primitive with.\n    */\n-  public JsonPrimitive(Character c) {\n+\n+    public JsonPrimitive(Character c) {\n     // convert characters to strings since in JSON, characters are represented as a single\n     // character string\n-    value = $Gson$Preconditions.checkNotNull(c).toString();\n-  }\n+        value = $Gson$Preconditions.checkNotNull(c).toString();\n+    }\n \n   /**\n    * Returns the same value as primitives are immutable.\n    * @since 2.8.2\n    */\n-  @Override\n-  public JsonPrimitive deepCopy() {\n-    return this;\n-  }\n+\n+    @Override\n+    public JsonPrimitive deepCopy() {\n+        return this;\n+    }\n \n   /**\n    * Check whether this primitive contains a boolean value.\n    *\n    * @return true if this primitive contains a boolean value, false otherwise.\n    */\n-  public boolean isBoolean() {\n-    return value instanceof Boolean;\n-  }\n+\n+    public boolean isBoolean() {\n+        return value instanceof Boolean;\n+    }\n \n   /**\n    * convenience method to get this element as a boolean value.\n    *\n    * @return get this element as a primitive boolean value.\n    */\n-  @Override\n-  public boolean getAsBoolean() {\n-    if (isBoolean()) {\n-      return ((Boolean) value).booleanValue();\n+\n+    @Override\n+    public boolean getAsBoolean() {\n+        if (isBoolean()) {\n+            return ((Boolean) value).booleanValue();\n+        }\n+    // Check to see if the value as a String is \"true\" in any case.\n+        return Boolean.parseBoolean(getAsString());\n     }\n-\t// Check to see if the value as a String is \"true\" in any case.\n-    return Boolean.parseBoolean(getAsString());\n-  }\n \n   /**\n    * Check whether this primitive contains a Number.\n    *\n    * @return true if this primitive contains a Number, false otherwise.\n    */\n-  public boolean isNumber() {\n-    return value instanceof Number;\n-  }\n+\n+    public boolean isNumber() {\n+        return value instanceof Number;\n+    }\n \n   /**\n    * convenience method to get this element as a Number.\n@@ -120,35 +127,38 @@ public final class JsonPrimitive extends JsonElement {\n    * @return get this element as a Number.\n    * @throws NumberFormatException if the value contained is not a valid Number.\n    */\n-  @Override\n-  public Number getAsNumber() {\n-    return value instanceof String ? new LazilyParsedNumber((String) value) : (Number) value;\n-  }\n+\n+    @Override\n+    public Number getAsNumber() {\n+        return value instanceof String ? new LazilyParsedNumber((String) value) : (Number) value;\n+    }\n \n   /**\n    * Check whether this primitive contains a String value.\n    *\n    * @return true if this primitive contains a String value, false otherwise.\n    */\n-  public boolean isString() {\n-    return value instanceof String;\n-  }\n+\n+    public boolean isString() {\n+        return value instanceof String;\n+    }\n \n   /**\n    * convenience method to get this element as a String.\n    *\n    * @return get this element as a String.\n    */\n-  @Override\n-  public String getAsString() {\n-    if (isNumber()) {\n-      return getAsNumber().toString();\n-    } else if (isBoolean()) {\n-      return ((Boolean) value).toString();\n-    } else {\n-      return (String) value;\n+\n+    @Override\n+    public String getAsString() {\n+        if (isNumber()) {\n+            return getAsNumber().toString();\n+        } else if (isBoolean()) {\n+            return ((Boolean) value).toString();\n+        } else {\n+            return (String) value;\n+        }\n     }\n-  }\n \n   /**\n    * convenience method to get this element as a primitive double.\n@@ -156,10 +166,11 @@ public final class JsonPrimitive extends JsonElement {\n    * @return get this element as a primitive double.\n    * @throws NumberFormatException if the value contained is not a valid double.\n    */\n-  @Override\n-  public double getAsDouble() {\n-    return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());\n-  }\n+\n+    @Override\n+    public double getAsDouble() {\n+        return isNumber() ? getAsNumber().doubleValue() : Double.parseDouble(getAsString());\n+    }\n \n   /**\n    * convenience method to get this element as a {@link BigDecimal}.\n@@ -167,10 +178,11 @@ public final class JsonPrimitive extends JsonElement {\n    * @return get this element as a {@link BigDecimal}.\n    * @throws NumberFormatException if the value contained is not a valid {@link BigDecimal}.\n    */\n-  @Override\n-  public BigDecimal getAsBigDecimal() {\n-    return value instanceof BigDecimal ? (BigDecimal) value : new BigDecimal(value.toString());\n-  }\n+\n+    @Override\n+    public BigDecimal getAsBigDecimal() {\n+        return value instanceof BigDecimal ? (BigDecimal) value : new BigDecimal(value.toString());\n+    }\n \n   /**\n    * convenience method to get this element as a {@link BigInteger}.\n@@ -178,11 +190,11 @@ public final class JsonPrimitive extends JsonElement {\n    * @return get this element as a {@link BigInteger}.\n    * @throws NumberFormatException if the value contained is not a valid {@link BigInteger}.\n    */\n-  @Override\n-  public BigInteger getAsBigInteger() {\n-    return value instanceof BigInteger ?\n-        (BigInteger) value : new BigInteger(value.toString());\n-  }\n+\n+    @Override\n+    public BigInteger getAsBigInteger() {\n+        return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n+    }\n \n   /**\n    * convenience method to get this element as a float.\n@@ -190,10 +202,11 @@ public final class JsonPrimitive extends JsonElement {\n    * @return get this element as a float.\n    * @throws NumberFormatException if the value contained is not a valid float.\n    */\n-  @Override\n-  public float getAsFloat() {\n-    return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n-  }\n+\n+    @Override\n+    public float getAsFloat() {\n+        return isNumber() ? getAsNumber().floatValue() : Float.parseFloat(getAsString());\n+    }\n \n   /**\n    * convenience method to get this element as a primitive long.\n@@ -201,10 +214,11 @@ public final class JsonPrimitive extends JsonElement {\n    * @return get this element as a primitive long.\n    * @throws NumberFormatException if the value contained is not a valid long.\n    */\n-  @Override\n-  public long getAsLong() {\n-    return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n-  }\n+\n+    @Override\n+    public long getAsLong() {\n+        return isNumber() ? getAsNumber().longValue() : Long.parseLong(getAsString());\n+    }\n \n   /**\n    * convenience method to get this element as a primitive short.\n@@ -212,10 +226,11 @@ public final class JsonPrimitive extends JsonElement {\n    * @return get this element as a primitive short.\n    * @throws NumberFormatException if the value contained is not a valid short value.\n    */\n-  @Override\n-  public short getAsShort() {\n-    return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n-  }\n+\n+    @Override\n+    public short getAsShort() {\n+        return isNumber() ? getAsNumber().shortValue() : Short.parseShort(getAsString());\n+    }\n \n  /**\n   * convenience method to get this element as a primitive integer.\n@@ -223,73 +238,76 @@ public final class JsonPrimitive extends JsonElement {\n   * @return get this element as a primitive integer.\n   * @throws NumberFormatException if the value contained is not a valid integer.\n   */\n-  @Override\n-  public int getAsInt() {\n-    return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n-  }\n-\n-  @Override\n-  public byte getAsByte() {\n-    return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n-  }\n-\n-  @Override\n-  public char getAsCharacter() {\n-    return getAsString().charAt(0);\n-  }\n-\n-  @Override\n-  public int hashCode() {\n-    if (value == null) {\n-      return 31;\n-    }\n-    // Using recommended hashing algorithm from Effective Java for longs and doubles\n-    if (isIntegral(this)) {\n-      long value = getAsNumber().longValue();\n-      return (int) (value ^ (value >>> 32));\n-    }\n-    if (value instanceof Number) {\n-      long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n-      return (int) (value ^ (value >>> 32));\n-    }\n-    return value.hashCode();\n-  }\n \n-  @Override\n-  public boolean equals(Object obj) {\n-    if (this == obj) {\n-      return true;\n+    @Override\n+    public int getAsInt() {\n+        return isNumber() ? getAsNumber().intValue() : Integer.parseInt(getAsString());\n     }\n-    if (obj == null || getClass() != obj.getClass()) {\n-      return false;\n+\n+    @Override\n+    public byte getAsByte() {\n+        return isNumber() ? getAsNumber().byteValue() : Byte.parseByte(getAsString());\n     }\n-    JsonPrimitive other = (JsonPrimitive)obj;\n-    if (value == null) {\n-      return other.value == null;\n+\n+    @Override\n+    public char getAsCharacter() {\n+        return getAsString().charAt(0);\n     }\n-    if (isIntegral(this) && isIntegral(other)) {\n-      return getAsNumber().longValue() == other.getAsNumber().longValue();\n+\n+    @Override\n+    public int hashCode() {\n+        if (value == null) {\n+            return 31;\n+        }\n+    // Using recommended hashing algorithm from Effective Java for longs and doubles\n+        if (isIntegral(this)) {\n+            long value = getAsNumber().longValue();\n+            return (int) (value\n+                ^ (value > > > 32));\n+        }\n+        if (value instanceof Number) {\n+            long value = Double.doubleToLongBits(getAsNumber().doubleValue());\n+            return (int) (value\n+                ^ (value > > > 32));\n+        }\n+        return value.hashCode();\n     }\n-    if (value instanceof Number && other.value instanceof Number) {\n-      double a = getAsNumber().doubleValue();\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null || getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        JsonPrimitive other = (JsonPrimitive) obj;\n+        if (value == null) {\n+            return other.value == null;\n+        }\n+        if (isIntegral(this) && isIntegral(other)) {\n+            return getAsNumber().longValue() == other.getAsNumber().longValue();\n+        }\n+        if (value instanceof Number && other.value instanceof Number) {\n+            double a = getAsNumber().doubleValue();\n       // Java standard types other than double return true for two NaN. So, need\n       // special handling for double.\n-      double b = other.getAsNumber().doubleValue();\n-      return a == b || (Double.isNaN(a) && Double.isNaN(b));\n+            double b = other.getAsNumber().doubleValue();\n+            return a == b || (Double.isNaN(a) && Double.isNaN(b));\n+        }\n+        return value.equals(other.value);\n     }\n-    return value.equals(other.value);\n-  }\n \n   /**\n    * Returns true if the specified number is an integral type\n    * (Long, Integer, Short, Byte, BigInteger)\n    */\n-  private static boolean isIntegral(JsonPrimitive primitive) {\n-    if (primitive.value instanceof Number) {\n-      Number number = (Number) primitive.value;\n-      return number instanceof BigInteger || number instanceof Long || number instanceof Integer\n-          || number instanceof Short || number instanceof Byte;\n+\n+    private static boolean isIntegral(JsonPrimitive primitive) {\n+        if (primitive.value instanceof Number) {\n+            Number number = (Number) primitive.value;\n+            return number instanceof BigInteger || number instanceof Long || number instanceof Integer || number instanceof Short || number instanceof Byte;\n+        }\n+        return false;\n     }\n-    return false;\n-  }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 189
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/44/JsonPrimitive.java\nindex 5e95d5a82b0..e9b5afcb80a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_random/44/JsonPrimitive.java\n@@ -180,8 +180,7 @@ public final class JsonPrimitive extends JsonElement {\n    */\n   @Override\n   public BigInteger getAsBigInteger() {\n-    return value instanceof BigInteger ?\n-        (BigInteger) value : new BigInteger(value.toString());\n+    return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n   }\n \n   /**\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/44/JsonPrimitive.java\nindex 5e95d5a82b0..e9b5afcb80a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/errored/1/44/JsonPrimitive.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/fangjinuo-easyjson/styler_three_grams/44/JsonPrimitive.java\n@@ -180,8 +180,7 @@ public final class JsonPrimitive extends JsonElement {\n    */\n   @Override\n   public BigInteger getAsBigInteger() {\n-    return value instanceof BigInteger ?\n-        (BigInteger) value : new BigInteger(value.toString());\n+    return value instanceof BigInteger ? (BigInteger) value : new BigInteger(value.toString());\n   }\n \n   /**\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize"
    ]
}