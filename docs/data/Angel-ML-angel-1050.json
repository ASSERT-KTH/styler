{
    "project_name": "Angel-ML-angel",
    "error_id": "1050",
    "information": {
        "errors": [
            {
                "line": "11",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * https://opensource.org/licenses/BSD-3-Clause\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,\n * either express or implied. See the License for the specific language governing permissions and\n * limitations under the License.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "46",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 114).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1050/NativeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1050/NativeUtils.java\nindex d647f060dc9..413662752b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1050/NativeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/1050/NativeUtils.java\n@@ -13,6 +13,7 @@\n  * either express or implied. See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.tencent.angel.utils;\n \n import java.io.*;\n@@ -21,29 +22,29 @@ import java.io.*;\n  * A simple library class which helps with loading dynamic libraries stored in the JAR archive.\n  * These libraries usualy contain implementation of some methods in native code (using JNI - Java\n  * Native Interface).\n- *\n  */\n public class NativeUtils {\n \n   /**\n    * Private constructor - this class will never be instanced\n    */\n-  private NativeUtils() {}\n+  private NativeUtils() {\n+  }\n \n   /**\n    * Loads library from current JAR archive\n-   *\n+   * <p>\n    * The file from JAR is copied into system temporary directory and then loaded. The temporary file\n    * is deleted after exiting. Method uses String as filename because the pathname is \"abstract\",\n    * not system-dependent.\n    *\n    * @param path The path of file inside JAR as absolute path (beginning with '/'), e.g.\n-   *        /package/File.ext\n-   * @throws IOException If temporary file creation or read/write operation fails\n+   *             /package/File.ext\n+   * @throws IOException              If temporary file creation or read/write operation fails\n    * @throws IllegalArgumentException If source file (param path) does not exist\n    * @throws IllegalArgumentException If the path is not absolute or if the filename is shorter than\n-   *         three characters (restriction of {@see File#createTempFile(java.lang.String,\n-   *         java.lang.String)}).\n+   *                                  three characters (restriction of {@see File#createTempFile(java.lang.String,\n+   *java.lang.String)}).\n    */\n   public static void loadLibraryFromJar(String path) throws IOException {\n \n",
            "diff_size": 9
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1050/NativeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1050/NativeUtils.java\nindex d647f060dc9..4dfcf00ff53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1050/NativeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/1050/NativeUtils.java\n@@ -46,8 +46,7 @@ public class NativeUtils {\n    *         java.lang.String)}).\n    */\n   public static void loadLibraryFromJar(String path) throws IOException {\n-\n-    if (!path.startsWith(\"/\")) {\n+  if(!path.startsWith(\"/\")) {\n       throw new IllegalArgumentException(\"The path has to be absolute (start with '/').\");\n     }\n \n@@ -103,4 +102,4 @@ public class NativeUtils {\n     // Finally, load the library\n     System.load(temp.getAbsolutePath());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1050/NativeUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1050/NativeUtils.java\nindex d647f060dc9..061f2f11c2e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/1050/NativeUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/1050/NativeUtils.java\n@@ -23,11 +23,13 @@ import java.io.*;\n  * Native Interface).\n  *\n  */\n+\n public class NativeUtils {\n \n   /**\n    * Private constructor - this class will never be instanced\n    */\n+\n   private NativeUtils() {}\n \n   /**\n@@ -45,13 +47,14 @@ public class NativeUtils {\n    *         three characters (restriction of {@see File#createTempFile(java.lang.String,\n    *         java.lang.String)}).\n    */\n-  public static void loadLibraryFromJar(String path) throws IOException {\n \n+  public static void loadLibraryFromJar(String path) throws IOException {\n     if (!path.startsWith(\"/\")) {\n       throw new IllegalArgumentException(\"The path has to be absolute (start with '/').\");\n     }\n \n     // Obtain filename from path\n+\n     String[] parts = path.split(\"/\");\n     String filename = (parts.length > 1) ? parts[parts.length - 1] : null;\n \n@@ -65,20 +68,22 @@ public class NativeUtils {\n     }\n \n     // Check if the filename is okay\n+\n     if (filename == null || prefix.length() < 3) {\n       throw new IllegalArgumentException(\"The filename has to be at least 3 characters long.\");\n     }\n \n     // Prepare temporary file\n+\n     File temp = File.createTempFile(prefix, suffix);\n     temp.deleteOnExit();\n     System.out.println(\"Temp file for native so file is \" + temp.getAbsolutePath());\n-\n     if (!temp.exists()) {\n       throw new FileNotFoundException(\"File \" + temp.getAbsolutePath() + \" does not exist.\");\n     }\n \n     // Prepare buffer for data copying\n+\n     byte[] buffer = new byte[1024];\n     int readBytes;\n \n@@ -89,6 +94,7 @@ public class NativeUtils {\n     }\n \n     // Open output stream and copy data between source file in JAR and the temporary file\n+\n     OutputStream os = new FileOutputStream(temp);\n     try {\n       while ((readBytes = is.read(buffer)) != -1) {\n@@ -103,4 +109,4 @@ public class NativeUtils {\n     // Finally, load the library\n     System.load(temp.getAbsolutePath());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "11",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}