{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3353",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "98",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "145",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "211",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "231",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "256",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "274",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "297",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "301",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "307",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "321",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "321",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "327",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "378",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "408",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "412",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "413",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "413",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "439",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "445",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "447",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "449",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "463",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "465",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "51",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "480",
                    "column": "99",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "487",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "496",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "499",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "506",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "506",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "514",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "525",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "531",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "58",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "532",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "535",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "539",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "541",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "545",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "552",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "553",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "557",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "562",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "563",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "567",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "568",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "572",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "573",
                    "column": "13",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3353/ClusterContextImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3353/ClusterContextImpl.java\nindex 34866c483fc..feb8eb6a7c7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3353/ClusterContextImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3353/ClusterContextImpl.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.cluster.protocol.atomicbroadcast.multipaxos.context;\n \n import java.net.URI;\n@@ -57,538 +58,536 @@ import static org.neo4j.helpers.collection.Iterables.asList;\n  * Context for {@link ClusterState} state machine.\n  */\n class ClusterContextImpl\n-        extends AbstractContextImpl\n-        implements ClusterContext\n+    extends AbstractContextImpl\n+    implements ClusterContext\n {\n-    private static final String DISCOVERY_HEADER_SEPARATOR = \",\";\n-\n-    // ClusterContext\n-    private final Listeners<ClusterListener> clusterListeners = new Listeners<>();\n-    /*\n-     * Holds instances that we have contacted and which have contacted us. This is achieved by filtering on\n-     * receipt via contactingInstances and the DISCOVERED header.\n-     * Cleared at the end of each discovery round.\n-     */\n-    private final List<ClusterMessage.ConfigurationRequestState> discoveredInstances = new LinkedList<>();\n-\n-    /*\n-     * Holds instances that have contacted us, along with a set of the instances they have in turn been contacted\n-     * from. This is used to determine which instances that have contacted us have received messages from us and thus\n-     * are in our initial_hosts. This is used to filter who goes in discoveredInstances.\n-     * This map is also used to create the DISCOVERED header, which is basically the keyset in string form.\n-     */\n-    private final Map<InstanceId, Set<InstanceId>> contactingInstances = new HashMap<>();\n-\n-    private Iterable<URI> joiningInstances;\n-    private ClusterMessage.ConfigurationResponseState joinDeniedConfigurationResponseState;\n-    private final Map<InstanceId, URI> currentlyJoiningInstances = new HashMap<>();\n-\n-    private final Executor executor;\n-    private final ObjectOutputStreamFactory objectOutputStreamFactory;\n-    private final ObjectInputStreamFactory objectInputStreamFactory;\n-\n-    private final LearnerContext learnerContext;\n-    private final HeartbeatContext heartbeatContext;\n-    private final Config config;\n-\n-    private long electorVersion;\n-    private InstanceId lastElector;\n-\n-    ClusterContextImpl( InstanceId me, CommonContextState commonState, LogProvider logging,\n-                        Timeouts timeouts, Executor executor,\n-                        ObjectOutputStreamFactory objectOutputStreamFactory,\n-                        ObjectInputStreamFactory objectInputStreamFactory,\n-                        LearnerContext learnerContext, HeartbeatContext heartbeatContext,\n-                        Config config )\n-    {\n-        super( me, commonState, logging, timeouts );\n-        this.executor = executor;\n-        this.objectOutputStreamFactory = objectOutputStreamFactory;\n-        this.objectInputStreamFactory = objectInputStreamFactory;\n-        this.learnerContext = learnerContext;\n-        this.heartbeatContext = heartbeatContext;\n-        this.config = config;\n-        heartbeatContext.addHeartbeatListener(\n-\n-                /*\n-                 * Here for invalidating the elector if it fails, so when it comes back, if no elections\n-                 * happened in the meantime it can resume sending election results\n-                 */\n-                new HeartbeatListener.Adapter()\n-                {\n-                    @Override\n-                    public void failed( InstanceId server )\n-                    {\n-                        invalidateElectorIfNecessary( server );\n-                    }\n-                }\n-        );\n-    }\n-\n-    private void invalidateElectorIfNecessary( InstanceId server )\n-    {\n-        if ( server.equals( lastElector ) )\n-        {\n-            lastElector = InstanceId.NONE;\n-            electorVersion = NO_ELECTOR_VERSION;\n-        }\n-    }\n-\n-    private ClusterContextImpl( InstanceId me, CommonContextState commonState, LogProvider logging, Timeouts timeouts,\n-                        Iterable<URI> joiningInstances, ClusterMessage.ConfigurationResponseState\n-            joinDeniedConfigurationResponseState, Executor executor,\n-                        ObjectOutputStreamFactory objectOutputStreamFactory,\n-                        ObjectInputStreamFactory objectInputStreamFactory, LearnerContext learnerContext,\n-                        HeartbeatContext heartbeatContext, Config config )\n-    {\n-        super( me, commonState, logging, timeouts );\n-        this.joiningInstances = joiningInstances;\n-        this.joinDeniedConfigurationResponseState = joinDeniedConfigurationResponseState;\n-        this.executor = executor;\n-        this.objectOutputStreamFactory = objectOutputStreamFactory;\n-        this.objectInputStreamFactory = objectInputStreamFactory;\n-        this.learnerContext = learnerContext;\n-        this.heartbeatContext = heartbeatContext;\n-        this.config = config;\n-    }\n-\n-    // Cluster API\n-    @Override\n-    public long getLastElectorVersion()\n-    {\n-        return electorVersion;\n-    }\n-\n-    @Override\n-    public void setLastElectorVersion( long lastElectorVersion )\n-    {\n-        this.electorVersion = lastElectorVersion;\n-    }\n-\n-    @Override\n-    public boolean shouldFilterContactingInstances()\n-    {\n-        return config.get( ClusterSettings.strict_initial_hosts );\n-    }\n-\n-    @Override\n-    public Set<InstanceId> getFailedInstances()\n-    {\n-        return heartbeatContext.getFailed();\n-    }\n-\n-    @Override\n-    public InstanceId getLastElector()\n-    {\n-        return lastElector;\n-    }\n-\n-    @Override\n-    public void setLastElector( InstanceId lastElector )\n-    {\n-        this.lastElector = lastElector;\n-    }\n-\n-    // Cluster API\n-    @Override\n-    public void addClusterListener( ClusterListener listener )\n-    {\n-        clusterListeners.add( listener );\n-    }\n-\n-    @Override\n-    public void removeClusterListener( ClusterListener listener )\n-    {\n-        clusterListeners.remove( listener );\n-    }\n-\n-    // Implementation\n-    @Override\n-    public void created( String name )\n-    {\n-        commonState.setConfiguration( new  ClusterConfiguration( name, logProvider,\n-                Collections.singleton( commonState.boundAt() ) ) );\n-        joined();\n-    }\n-\n-    @Override\n-    public void joining( String name, Iterable<URI> instanceList )\n-    {\n-        joiningInstances = instanceList;\n-        discoveredInstances.clear();\n-        joinDeniedConfigurationResponseState = null;\n-    }\n-\n-    @Override\n-    public void acquiredConfiguration( final Map<InstanceId, URI> memberList, final Map<String, InstanceId> roles,\n-                                       final Set<InstanceId> failedInstances )\n-    {\n-        commonState.configuration().setMembers( memberList );\n-        commonState.configuration().setRoles( roles );\n-        for ( InstanceId failedInstance : failedInstances )\n-        {\n-            if ( !failedInstance.equals( me  ) )\n-            {\n-                logProvider.getLog( ClusterContextImpl.class ).debug( \"Adding instance \" + failedInstance + \" as failed from the start\" );\n-                heartbeatContext.failed( failedInstance );\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void joined()\n-    {\n-        commonState.configuration().joined( me, commonState.boundAt() );\n-        clusterListeners.notify( executor,\n-                listener -> listener.enteredCluster( commonState.configuration() ) );\n-    }\n-\n-    @Override\n-    public void left()\n-    {\n-        timeouts.cancelAllTimeouts();\n-        commonState.configuration().left();\n-        clusterListeners.notify( executor, ClusterListener::leftCluster );\n-    }\n-\n-    @Override\n-    public void joined( InstanceId instanceId, URI atURI )\n-    {\n-        commonState.configuration().joined( instanceId, atURI );\n-\n-        if ( commonState.configuration().getMembers().containsKey( me ) )\n-        {\n-            // Make sure this node is in cluster before notifying of others joining and leaving\n-            clusterListeners.notify( executor, listener -> listener.joinedCluster( instanceId, atURI ) );\n-        }\n-        // else:\n-        //   This typically happens in situations when several nodes join at once, and the ordering\n-        //   of join messages is a little out of whack.\n-\n-        currentlyJoiningInstances.remove( instanceId );\n-        invalidateElectorIfNecessary( instanceId );\n-    }\n-\n-    @Override\n-    public void left( InstanceId node )\n-    {\n-        final URI member = commonState.configuration().getUriForId( node );\n-        commonState.configuration().left( node );\n-        invalidateElectorIfNecessary( node );\n-        clusterListeners.notify( executor, listener -> listener.leftCluster( node, member ) );\n-    }\n-\n-    @Override\n-    public void elected( final String roleName, final InstanceId instanceId )\n-    {\n-        elected( roleName, instanceId, InstanceId.NONE, NO_ELECTOR_VERSION );\n-    }\n-\n-    @Override\n-    public void elected( String roleName, InstanceId instanceId, InstanceId electorId, long version )\n-    {\n-        if ( electorId != null )\n-        {\n-            if ( electorId.equals( getMyId() ) )\n-            {\n-                getLog( getClass() ).debug( \"I elected instance \" + instanceId + \" for role \"\n-                        + roleName + \" at version \" + version );\n-                if ( version < electorVersion )\n-                {\n-                    return;\n-                }\n-            }\n-            else if ( electorId.equals( lastElector ) && ( version < electorVersion && version > 1 ) )\n-            {\n-                getLog( getClass() ).warn( \"Election result for role \" + roleName +\n-                        \" received from elector instance \" + electorId + \" with version \" + version +\n-                        \". I had version \" + electorVersion + \" for elector \" + lastElector );\n-                return;\n-            }\n-            else\n-            {\n-                getLog( getClass() ).debug( \"Setting elector to \" + electorId + \" and its version to \" + version );\n-            }\n-\n-            this.electorVersion = version;\n-            this.lastElector = electorId;\n-        }\n-        commonState.configuration().elected( roleName, instanceId );\n-        clusterListeners.notify( executor, listener ->\n-                listener.elected( roleName, instanceId, commonState.configuration().getUriForId( instanceId ) ) );\n-    }\n-\n-    @Override\n-    public void unelected( final String roleName, final org.neo4j.cluster.InstanceId instanceId )\n-    {\n-        unelected( roleName, instanceId, InstanceId.NONE, NO_ELECTOR_VERSION );\n-    }\n-\n-    @Override\n-    public void unelected( String roleName, org.neo4j.cluster.InstanceId instanceId,\n-                           org.neo4j.cluster.InstanceId electorId, long version )\n-    {\n-        commonState.configuration().unelected( roleName );\n-        clusterListeners.notify( executor, listener ->\n-                listener.unelected( roleName, instanceId, commonState.configuration().getUriForId( instanceId ) ) );\n-    }\n-\n-    @Override\n-    public ClusterConfiguration getConfiguration()\n-    {\n-        return commonState.configuration();\n-    }\n-\n-    @Override\n-    public boolean isElectedAs( String roleName )\n-    {\n-        return me.equals( commonState.configuration().getElected( roleName ) );\n-    }\n-\n-    @Override\n-    public boolean isInCluster()\n-    {\n-        return Iterables.count( commonState.configuration().getMemberURIs() ) != 0;\n-    }\n-\n-    @Override\n-    public Iterable<URI> getJoiningInstances()\n-    {\n-        return joiningInstances;\n-    }\n-\n-    @Override\n-    public ObjectOutputStreamFactory getObjectOutputStreamFactory()\n-    {\n-        return objectOutputStreamFactory;\n-    }\n-\n-    @Override\n-    public ObjectInputStreamFactory getObjectInputStreamFactory()\n-    {\n-        return objectInputStreamFactory;\n-    }\n-\n-    @Override\n-    public List<ClusterMessage.ConfigurationRequestState> getDiscoveredInstances()\n-    {\n-        return discoveredInstances;\n-    }\n-\n-    @Override\n-    public boolean haveWeContactedInstance( ClusterMessage.ConfigurationRequestState configurationRequested )\n-    {\n-        return contactingInstances.containsKey( configurationRequested.getJoiningId() ) && contactingInstances.get(\n-                configurationRequested.getJoiningId() ).contains( getMyId() );\n-    }\n-\n-    @Override\n-    public void addContactingInstance( ClusterMessage.ConfigurationRequestState instance, String discoveryHeader )\n-    {\n-        Set<InstanceId> contactsOfRemote = contactingInstances.computeIfAbsent( instance.getJoiningId(), k -> new\n-                HashSet<>() );\n-        // Duplicates of previous calls will be ignored by virtue of this being a set\n-        contactsOfRemote.addAll( parseDiscoveryHeader( discoveryHeader ) );\n-    }\n+  private static final String DISCOVERY_HEADER_SEPARATOR = \",\";\n+\n+  // ClusterContext\n+  private final Listeners<ClusterListener> clusterListeners = new Listeners<>();\n+  /*\n+   * Holds instances that we have contacted and which have contacted us. This is achieved by filtering on\n+   * receipt via contactingInstances and the DISCOVERED header.\n+   * Cleared at the end of each discovery round.\n+   */\n+  private final List<ClusterMessage.ConfigurationRequestState> discoveredInstances = new LinkedList<>();\n+\n+  /*\n+   * Holds instances that have contacted us, along with a set of the instances they have in turn been contacted\n+   * from. This is used to determine which instances that have contacted us have received messages from us and thus\n+   * are in our initial_hosts. This is used to filter who goes in discoveredInstances.\n+   * This map is also used to create the DISCOVERED header, which is basically the keyset in string form.\n+   */\n+  private final Map<InstanceId, Set<InstanceId>> contactingInstances = new HashMap<>();\n+\n+  private Iterable<URI> joiningInstances;\n+  private ClusterMessage.ConfigurationResponseState joinDeniedConfigurationResponseState;\n+  private final Map<InstanceId, URI> currentlyJoiningInstances = new HashMap<>();\n+\n+  private final Executor executor;\n+  private final ObjectOutputStreamFactory objectOutputStreamFactory;\n+  private final ObjectInputStreamFactory objectInputStreamFactory;\n+\n+  private final LearnerContext learnerContext;\n+  private final HeartbeatContext heartbeatContext;\n+  private final Config config;\n+\n+  private long electorVersion;\n+  private InstanceId lastElector;\n+\n+  ClusterContextImpl(InstanceId me, CommonContextState commonState, LogProvider logging,\n+                     Timeouts timeouts, Executor executor,\n+                     ObjectOutputStreamFactory objectOutputStreamFactory,\n+                     ObjectInputStreamFactory objectInputStreamFactory,\n+                     LearnerContext learnerContext, HeartbeatContext heartbeatContext,\n+                     Config config)\n+  {\n+    super(me, commonState, logging, timeouts);\n+    this.executor = executor;\n+    this.objectOutputStreamFactory = objectOutputStreamFactory;\n+    this.objectInputStreamFactory = objectInputStreamFactory;\n+    this.learnerContext = learnerContext;\n+    this.heartbeatContext = heartbeatContext;\n+    this.config = config;\n+    heartbeatContext.addHeartbeatListener(\n \n-    @Override\n-    public String generateDiscoveryHeader()\n-    {\n         /*\n-         * Maps the keyset of contacting instances from InstanceId to strings, collects them in a Set and joins them\n-         * in a string with the appropriate separator\n+         * Here for invalidating the elector if it fails, so when it comes back, if no elections\n+         * happened in the meantime it can resume sending election results\n          */\n-        return String.join( DISCOVERY_HEADER_SEPARATOR,\n-                contactingInstances.keySet().stream().map( InstanceId::toString ).collect( Collectors.toSet() ) );\n-    }\n-\n-    private Set<InstanceId> parseDiscoveryHeader( String discoveryHeader )\n-    {\n-        String[] instanceIds = discoveryHeader.split( DISCOVERY_HEADER_SEPARATOR );\n-        Set<InstanceId> result = new HashSet<>();\n-        for ( String instanceId : instanceIds )\n-        {\n-            try\n-            {\n-                result.add( new InstanceId( Integer.parseInt( instanceId.trim() ) ) );\n-            }\n-            catch ( NumberFormatException e )\n-            {\n-                /*\n-                 * This will happen if the message did not contain a DISCOVERY header. There are two reasons for this.\n-                 * One, the first configurationRequest going out from every instance does have the header but\n-                 * it is empty, since it's sent before any configurationRequests are processed.\n-                 * The other is practically the backwards compatibility code for versions which do not carry this header.\n-                 *\n-                 * Since the header will be empty (default value for it is empty string), the split above will create\n-                 * an array with a single empty string. This fails the integer parse.\n-                 */\n-                getLog( getClass() ).debug( \"Could not parse discovery header for contacted instances, its value was \" +\n-                        discoveryHeader );\n-            }\n-        }\n-        return result;\n-    }\n-\n-    @Override\n-    public String toString()\n-    {\n-        return \"Me: \" + me + \" Bound at: \" + commonState.boundAt() + \" Config:\" + commonState.configuration() +\n-                \" Current state: \" + commonState;\n-    }\n-\n-    @Override\n-    public void setBoundAt( URI boundAt )\n-    {\n-        commonState.setBoundAt( me, boundAt );\n-    }\n-\n-    @Override\n-    public void joinDenied( ClusterMessage.ConfigurationResponseState configurationResponseState )\n-    {\n-        if ( configurationResponseState == null )\n+        new HeartbeatListener.Adapter()\n         {\n-            throw new IllegalArgumentException( \"Join denied configuration response state was null\" );\n+          @Override\n+          public void failed(InstanceId server)\n+          {\n+            invalidateElectorIfNecessary(server);\n+          }\n         }\n-        this.joinDeniedConfigurationResponseState = configurationResponseState;\n-    }\n-\n-    @Override\n-    public boolean hasJoinBeenDenied()\n-    {\n-        return joinDeniedConfigurationResponseState != null;\n-    }\n-\n-    @Override\n-    public ClusterMessage.ConfigurationResponseState getJoinDeniedConfigurationResponseState()\n-    {\n-        if ( !hasJoinBeenDenied() )\n+    );\n+  }\n+\n+  private void invalidateElectorIfNecessary(InstanceId server)\n+  {\n+    if (server.equals(lastElector))\n+    {\n+      lastElector = InstanceId.NONE;\n+      electorVersion = NO_ELECTOR_VERSION;\n+    }\n+  }\n+\n+  private ClusterContextImpl(InstanceId me, CommonContextState commonState, LogProvider logging, Timeouts timeouts,\n+                             Iterable<URI> joiningInstances, ClusterMessage.ConfigurationResponseState\n+                                 joinDeniedConfigurationResponseState, Executor executor,\n+                             ObjectOutputStreamFactory objectOutputStreamFactory,\n+                             ObjectInputStreamFactory objectInputStreamFactory, LearnerContext learnerContext,\n+                             HeartbeatContext heartbeatContext, Config config)\n+  {\n+    super(me, commonState, logging, timeouts);\n+    this.joiningInstances = joiningInstances;\n+    this.joinDeniedConfigurationResponseState = joinDeniedConfigurationResponseState;\n+    this.executor = executor;\n+    this.objectOutputStreamFactory = objectOutputStreamFactory;\n+    this.objectInputStreamFactory = objectInputStreamFactory;\n+    this.learnerContext = learnerContext;\n+    this.heartbeatContext = heartbeatContext;\n+    this.config = config;\n+  }\n+\n+  // Cluster API\n+  @Override\n+  public long getLastElectorVersion()\n+  {\n+    return electorVersion;\n+  }\n+\n+  @Override\n+  public void setLastElectorVersion(long lastElectorVersion)\n+  {\n+    this.electorVersion = lastElectorVersion;\n+  }\n+\n+  @Override\n+  public boolean shouldFilterContactingInstances()\n+  {\n+    return config.get(ClusterSettings.strict_initial_hosts);\n+  }\n+\n+  @Override\n+  public Set<InstanceId> getFailedInstances()\n+  {\n+    return heartbeatContext.getFailed();\n+  }\n+\n+  @Override\n+  public InstanceId getLastElector()\n+  {\n+    return lastElector;\n+  }\n+\n+  @Override\n+  public void setLastElector(InstanceId lastElector)\n+  {\n+    this.lastElector = lastElector;\n+  }\n+\n+  // Cluster API\n+  @Override\n+  public void addClusterListener(ClusterListener listener)\n+  {\n+    clusterListeners.add(listener);\n+  }\n+\n+  @Override\n+  public void removeClusterListener(ClusterListener listener)\n+  {\n+    clusterListeners.remove(listener);\n+  }\n+\n+  // Implementation\n+  @Override\n+  public void created(String name)\n+  {\n+    commonState.setConfiguration(new ClusterConfiguration(name, logProvider,\n+        Collections.singleton(commonState.boundAt())));\n+    joined();\n+  }\n+\n+  @Override\n+  public void joining(String name, Iterable<URI> instanceList)\n+  {\n+    joiningInstances = instanceList;\n+    discoveredInstances.clear();\n+    joinDeniedConfigurationResponseState = null;\n+  }\n+\n+  @Override\n+  public void acquiredConfiguration(final Map<InstanceId, URI> memberList, final Map<String, InstanceId> roles,\n+                                    final Set<InstanceId> failedInstances)\n+  {\n+    commonState.configuration().setMembers(memberList);\n+    commonState.configuration().setRoles(roles);\n+    for (InstanceId failedInstance : failedInstances)\n+    {\n+      if (!failedInstance.equals(me))\n+      {\n+        logProvider.getLog(ClusterContextImpl.class).debug(\"Adding instance \" + failedInstance + \" as failed from the start\");\n+        heartbeatContext.failed(failedInstance);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public void joined()\n+  {\n+    commonState.configuration().joined(me, commonState.boundAt());\n+    clusterListeners.notify(executor,\n+        listener -> listener.enteredCluster(commonState.configuration()));\n+  }\n+\n+  @Override\n+  public void left()\n+  {\n+    timeouts.cancelAllTimeouts();\n+    commonState.configuration().left();\n+    clusterListeners.notify(executor, ClusterListener::leftCluster);\n+  }\n+\n+  @Override\n+  public void joined(InstanceId instanceId, URI atURI)\n+  {\n+    commonState.configuration().joined(instanceId, atURI);\n+\n+    if (commonState.configuration().getMembers().containsKey(me))\n+    {\n+      // Make sure this node is in cluster before notifying of others joining and leaving\n+      clusterListeners.notify(executor, listener -> listener.joinedCluster(instanceId, atURI));\n+    }\n+    // else:\n+    //   This typically happens in situations when several nodes join at once, and the ordering\n+    //   of join messages is a little out of whack.\n+\n+    currentlyJoiningInstances.remove(instanceId);\n+    invalidateElectorIfNecessary(instanceId);\n+  }\n+\n+  @Override\n+  public void left(InstanceId node)\n+  {\n+    final URI member = commonState.configuration().getUriForId(node);\n+    commonState.configuration().left(node);\n+    invalidateElectorIfNecessary(node);\n+    clusterListeners.notify(executor, listener -> listener.leftCluster(node, member));\n+  }\n+\n+  @Override\n+  public void elected(final String roleName, final InstanceId instanceId)\n+  {\n+    elected(roleName, instanceId, InstanceId.NONE, NO_ELECTOR_VERSION);\n+  }\n+\n+  @Override\n+  public void elected(String roleName, InstanceId instanceId, InstanceId electorId, long version)\n+  {\n+    if (electorId != null)\n+    {\n+      if (electorId.equals(getMyId()))\n+      {\n+        getLog(getClass()).debug(\"I elected instance \" + instanceId + \" for role \"\n+            + roleName + \" at version \" + version);\n+        if (version < electorVersion)\n         {\n-            throw new IllegalStateException( \"Join has not been denied\" );\n+          return;\n         }\n-        return joinDeniedConfigurationResponseState;\n-    }\n-\n-    @Override\n-    public Iterable<org.neo4j.cluster.InstanceId> getOtherInstances()\n-    {\n-        return Iterables.filter( in( me ).negate(), commonState.configuration().getMemberIds() );\n-    }\n-\n-    /** Used to ensure that no other instance is trying to join with the same id from a different machine */\n-    @Override\n-    public boolean isInstanceJoiningFromDifferentUri( org.neo4j.cluster.InstanceId joiningId, URI uri )\n-    {\n-        return currentlyJoiningInstances.containsKey( joiningId )\n-                && !currentlyJoiningInstances.get( joiningId ).equals( uri );\n-    }\n-\n-    @Override\n-    public void instanceIsJoining( org.neo4j.cluster.InstanceId joiningId, URI uri )\n-    {\n-        currentlyJoiningInstances.put( joiningId, uri );\n-    }\n-\n-    @Override\n-    public String myName()\n-    {\n-        String name = parameter( \"name\" ).apply( commonState.boundAt() );\n-        if ( name != null )\n-        {\n-            return name;\n-        }\n-        else\n-        {\n-            return me.toString();\n-        }\n-    }\n-\n-    @Override\n-    public void discoveredLastReceivedInstanceId( long id )\n-    {\n-        learnerContext.setLastDeliveredInstanceId( id );\n-        learnerContext.learnedInstanceId( id );\n-        learnerContext.setNextInstanceId( id + 1 );\n-    }\n-\n-    @Override\n-    public boolean isCurrentlyAlive( InstanceId joiningId )\n-    {\n-        return !heartbeatContext.getFailed().contains( joiningId );\n-    }\n-\n-    @Override\n-    public long getLastDeliveredInstanceId()\n-    {\n-        return learnerContext.getLastDeliveredInstanceId();\n-    }\n-\n-    public ClusterContextImpl snapshot( CommonContextState commonStateSnapshot, LogProvider logging, Timeouts timeouts,\n-                                        Executor executor, ObjectOutputStreamFactory objectOutputStreamFactory,\n-                                        ObjectInputStreamFactory objectInputStreamFactory,\n-                                        LearnerContextImpl snapshotLearnerContext,\n-                                        HeartbeatContextImpl snapshotHeartbeatContext )\n-    {\n-        return new ClusterContextImpl( me, commonStateSnapshot, logging, timeouts,\n-                joiningInstances == null ? null : new ArrayList<>( asList( joiningInstances ) ),\n-                joinDeniedConfigurationResponseState == null ? null : joinDeniedConfigurationResponseState.snapshot(),\n-                executor, objectOutputStreamFactory, objectInputStreamFactory, snapshotLearnerContext,\n-                snapshotHeartbeatContext, config );\n-    }\n-\n-    @Override\n-    public boolean equals( Object o )\n-    {\n-        if ( this == o )\n-        {\n-            return true;\n-        }\n-        if ( o == null || getClass() != o.getClass() )\n-        {\n-            return false;\n-        }\n-\n-        ClusterContextImpl that = (ClusterContextImpl) o;\n-\n-        if ( currentlyJoiningInstances != null ? !currentlyJoiningInstances.equals( that.currentlyJoiningInstances )\n-                : that.currentlyJoiningInstances != null )\n-        {\n-            return false;\n-        }\n-        if ( discoveredInstances != null ? !discoveredInstances.equals( that.discoveredInstances ) :\n-                that.discoveredInstances != null )\n-        {\n-            return false;\n-        }\n-        if ( heartbeatContext != null ? !heartbeatContext.equals( that.heartbeatContext ) : that.heartbeatContext !=\n-                null )\n-        {\n-            return false;\n-        }\n-        if ( joinDeniedConfigurationResponseState != null ? !joinDeniedConfigurationResponseState.equals(\n-                that.joinDeniedConfigurationResponseState ) : that.joinDeniedConfigurationResponseState != null )\n-        {\n-            return false;\n-        }\n-        if ( joiningInstances != null ? !joiningInstances.equals( that.joiningInstances ) : that.joiningInstances !=\n-                null )\n-        {\n-            return false;\n-        }\n-        return learnerContext != null ? learnerContext.equals( that.learnerContext ) : that.learnerContext == null;\n-    }\n-\n-    @Override\n-    public int hashCode()\n-    {\n-        int result = 0;\n-        result = 31 * result + (discoveredInstances != null ? discoveredInstances.hashCode() : 0);\n-        result = 31 * result + (joiningInstances != null ? joiningInstances.hashCode() : 0);\n-        result = 31 * result + (joinDeniedConfigurationResponseState != null ? joinDeniedConfigurationResponseState\n-                .hashCode() : 0);\n-        result = 31 * result + (currentlyJoiningInstances != null ? currentlyJoiningInstances.hashCode() : 0);\n-        result = 31 * result + (learnerContext != null ? learnerContext.hashCode() : 0);\n-        result = 31 * result + (heartbeatContext != null ? heartbeatContext.hashCode() : 0);\n-        return result;\n-    }\n+      } else if (electorId.equals(lastElector) && (version < electorVersion && version > 1))\n+      {\n+        getLog(getClass()).warn(\"Election result for role \" + roleName +\n+            \" received from elector instance \" + electorId + \" with version \" + version +\n+            \". I had version \" + electorVersion + \" for elector \" + lastElector);\n+        return;\n+      } else\n+      {\n+        getLog(getClass()).debug(\"Setting elector to \" + electorId + \" and its version to \" + version);\n+      }\n+\n+      this.electorVersion = version;\n+      this.lastElector = electorId;\n+    }\n+    commonState.configuration().elected(roleName, instanceId);\n+    clusterListeners.notify(executor, listener ->\n+        listener.elected(roleName, instanceId, commonState.configuration().getUriForId(instanceId)));\n+  }\n+\n+  @Override\n+  public void unelected(final String roleName, final org.neo4j.cluster.InstanceId instanceId)\n+  {\n+    unelected(roleName, instanceId, InstanceId.NONE, NO_ELECTOR_VERSION);\n+  }\n+\n+  @Override\n+  public void unelected(String roleName, org.neo4j.cluster.InstanceId instanceId,\n+                        org.neo4j.cluster.InstanceId electorId, long version)\n+  {\n+    commonState.configuration().unelected(roleName);\n+    clusterListeners.notify(executor, listener ->\n+        listener.unelected(roleName, instanceId, commonState.configuration().getUriForId(instanceId)));\n+  }\n+\n+  @Override\n+  public ClusterConfiguration getConfiguration()\n+  {\n+    return commonState.configuration();\n+  }\n+\n+  @Override\n+  public boolean isElectedAs(String roleName)\n+  {\n+    return me.equals(commonState.configuration().getElected(roleName));\n+  }\n+\n+  @Override\n+  public boolean isInCluster()\n+  {\n+    return Iterables.count(commonState.configuration().getMemberURIs()) != 0;\n+  }\n+\n+  @Override\n+  public Iterable<URI> getJoiningInstances()\n+  {\n+    return joiningInstances;\n+  }\n+\n+  @Override\n+  public ObjectOutputStreamFactory getObjectOutputStreamFactory()\n+  {\n+    return objectOutputStreamFactory;\n+  }\n+\n+  @Override\n+  public ObjectInputStreamFactory getObjectInputStreamFactory()\n+  {\n+    return objectInputStreamFactory;\n+  }\n+\n+  @Override\n+  public List<ClusterMessage.ConfigurationRequestState> getDiscoveredInstances()\n+  {\n+    return discoveredInstances;\n+  }\n+\n+  @Override\n+  public boolean haveWeContactedInstance(ClusterMessage.ConfigurationRequestState configurationRequested)\n+  {\n+    return contactingInstances.containsKey(configurationRequested.getJoiningId()) && contactingInstances.get(\n+        configurationRequested.getJoiningId()).contains(getMyId());\n+  }\n+\n+  @Override\n+  public void addContactingInstance(ClusterMessage.ConfigurationRequestState instance, String discoveryHeader)\n+  {\n+    Set<InstanceId> contactsOfRemote = contactingInstances.computeIfAbsent(instance.getJoiningId(), k -> new\n+        HashSet<>());\n+    // Duplicates of previous calls will be ignored by virtue of this being a set\n+    contactsOfRemote.addAll(parseDiscoveryHeader(discoveryHeader));\n+  }\n+\n+  @Override\n+  public String generateDiscoveryHeader()\n+  {\n+    /*\n+     * Maps the keyset of contacting instances from InstanceId to strings, collects them in a Set and joins them\n+     * in a string with the appropriate separator\n+     */\n+    return String.join(DISCOVERY_HEADER_SEPARATOR,\n+        contactingInstances.keySet().stream().map(InstanceId::toString).collect(Collectors.toSet()));\n+  }\n+\n+  private Set<InstanceId> parseDiscoveryHeader(String discoveryHeader)\n+  {\n+    String[] instanceIds = discoveryHeader.split(DISCOVERY_HEADER_SEPARATOR);\n+    Set<InstanceId> result = new HashSet<>();\n+    for (String instanceId : instanceIds)\n+    {\n+      try\n+      {\n+        result.add(new InstanceId(Integer.parseInt(instanceId.trim())));\n+      } catch (NumberFormatException e)\n+      {\n+        /*\n+         * This will happen if the message did not contain a DISCOVERY header. There are two reasons for this.\n+         * One, the first configurationRequest going out from every instance does have the header but\n+         * it is empty, since it's sent before any configurationRequests are processed.\n+         * The other is practically the backwards compatibility code for versions which do not carry this header.\n+         *\n+         * Since the header will be empty (default value for it is empty string), the split above will create\n+         * an array with a single empty string. This fails the integer parse.\n+         */\n+        getLog(getClass()).debug(\"Could not parse discovery header for contacted instances, its value was \" +\n+            discoveryHeader);\n+      }\n+    }\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return \"Me: \" + me + \" Bound at: \" + commonState.boundAt() + \" Config:\" + commonState.configuration() +\n+        \" Current state: \" + commonState;\n+  }\n+\n+  @Override\n+  public void setBoundAt(URI boundAt)\n+  {\n+    commonState.setBoundAt(me, boundAt);\n+  }\n+\n+  @Override\n+  public void joinDenied(ClusterMessage.ConfigurationResponseState configurationResponseState)\n+  {\n+    if (configurationResponseState == null)\n+    {\n+      throw new IllegalArgumentException(\"Join denied configuration response state was null\");\n+    }\n+    this.joinDeniedConfigurationResponseState = configurationResponseState;\n+  }\n+\n+  @Override\n+  public boolean hasJoinBeenDenied()\n+  {\n+    return joinDeniedConfigurationResponseState != null;\n+  }\n+\n+  @Override\n+  public ClusterMessage.ConfigurationResponseState getJoinDeniedConfigurationResponseState()\n+  {\n+    if (!hasJoinBeenDenied())\n+    {\n+      throw new IllegalStateException(\"Join has not been denied\");\n+    }\n+    return joinDeniedConfigurationResponseState;\n+  }\n+\n+  @Override\n+  public Iterable<org.neo4j.cluster.InstanceId> getOtherInstances()\n+  {\n+    return Iterables.filter(in(me).negate(), commonState.configuration().getMemberIds());\n+  }\n+\n+  /**\n+   * Used to ensure that no other instance is trying to join with the same id from a different machine\n+   */\n+  @Override\n+  public boolean isInstanceJoiningFromDifferentUri(org.neo4j.cluster.InstanceId joiningId, URI uri)\n+  {\n+    return currentlyJoiningInstances.containsKey(joiningId)\n+        && !currentlyJoiningInstances.get(joiningId).equals(uri);\n+  }\n+\n+  @Override\n+  public void instanceIsJoining(org.neo4j.cluster.InstanceId joiningId, URI uri)\n+  {\n+    currentlyJoiningInstances.put(joiningId, uri);\n+  }\n+\n+  @Override\n+  public String myName()\n+  {\n+    String name = parameter(\"name\").apply(commonState.boundAt());\n+    if (name != null)\n+    {\n+      return name;\n+    } else\n+    {\n+      return me.toString();\n+    }\n+  }\n+\n+  @Override\n+  public void discoveredLastReceivedInstanceId(long id)\n+  {\n+    learnerContext.setLastDeliveredInstanceId(id);\n+    learnerContext.learnedInstanceId(id);\n+    learnerContext.setNextInstanceId(id + 1);\n+  }\n+\n+  @Override\n+  public boolean isCurrentlyAlive(InstanceId joiningId)\n+  {\n+    return !heartbeatContext.getFailed().contains(joiningId);\n+  }\n+\n+  @Override\n+  public long getLastDeliveredInstanceId()\n+  {\n+    return learnerContext.getLastDeliveredInstanceId();\n+  }\n+\n+  public ClusterContextImpl snapshot(CommonContextState commonStateSnapshot, LogProvider logging, Timeouts timeouts,\n+                                     Executor executor, ObjectOutputStreamFactory objectOutputStreamFactory,\n+                                     ObjectInputStreamFactory objectInputStreamFactory,\n+                                     LearnerContextImpl snapshotLearnerContext,\n+                                     HeartbeatContextImpl snapshotHeartbeatContext)\n+  {\n+    return new ClusterContextImpl(me, commonStateSnapshot, logging, timeouts,\n+        joiningInstances == null ? null : new ArrayList<>(asList(joiningInstances)),\n+        joinDeniedConfigurationResponseState == null ? null : joinDeniedConfigurationResponseState.snapshot(),\n+        executor, objectOutputStreamFactory, objectInputStreamFactory, snapshotLearnerContext,\n+        snapshotHeartbeatContext, config);\n+  }\n+\n+  @Override\n+  public boolean equals(Object o)\n+  {\n+    if (this == o)\n+    {\n+      return true;\n+    }\n+    if (o == null || getClass() != o.getClass())\n+    {\n+      return false;\n+    }\n+\n+    ClusterContextImpl that = (ClusterContextImpl) o;\n+\n+    if (currentlyJoiningInstances != null ? !currentlyJoiningInstances.equals(that.currentlyJoiningInstances)\n+        : that.currentlyJoiningInstances != null)\n+    {\n+      return false;\n+    }\n+    if (discoveredInstances != null ? !discoveredInstances.equals(that.discoveredInstances) :\n+        that.discoveredInstances != null)\n+    {\n+      return false;\n+    }\n+    if (heartbeatContext != null ? !heartbeatContext.equals(that.heartbeatContext) : that.heartbeatContext !=\n+        null)\n+    {\n+      return false;\n+    }\n+    if (joinDeniedConfigurationResponseState != null ? !joinDeniedConfigurationResponseState.equals(\n+        that.joinDeniedConfigurationResponseState) : that.joinDeniedConfigurationResponseState != null)\n+    {\n+      return false;\n+    }\n+    if (joiningInstances != null ? !joiningInstances.equals(that.joiningInstances) : that.joiningInstances !=\n+        null)\n+    {\n+      return false;\n+    }\n+    return learnerContext != null ? learnerContext.equals(that.learnerContext) : that.learnerContext == null;\n+  }\n+\n+  @Override\n+  public int hashCode()\n+  {\n+    int result = 0;\n+    result = 31 * result + (discoveredInstances != null ? discoveredInstances.hashCode() : 0);\n+    result = 31 * result + (joiningInstances != null ? joiningInstances.hashCode() : 0);\n+    result = 31 * result + (joinDeniedConfigurationResponseState != null ? joinDeniedConfigurationResponseState\n+        .hashCode() : 0);\n+    result = 31 * result + (currentlyJoiningInstances != null ? currentlyJoiningInstances.hashCode() : 0);\n+    result = 31 * result + (learnerContext != null ? learnerContext.hashCode() : 0);\n+    result = 31 * result + (heartbeatContext != null ? heartbeatContext.hashCode() : 0);\n+    return result;\n+  }\n }\n",
            "diff_size": 857
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}