{
    "project_name": "neo4j-neo4j",
    "error_id": "1078",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "132",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1078/DeleteDuplicateNodesStep.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1078/DeleteDuplicateNodesStep.java\nindex 850c6020f5e..cc7f14c9df4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1078/DeleteDuplicateNodesStep.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1078/DeleteDuplicateNodesStep.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.batchimport;\n \n import org.eclipse.collections.api.iterator.LongIterator;\n@@ -47,10 +48,10 @@ public class DeleteDuplicateNodesStep extends LonelyProcessingStep\n     private long nodesRemoved;\n     private long propertiesRemoved;\n \n-    public DeleteDuplicateNodesStep( StageControl control, Configuration config, LongIterator nodeIds, NodeStore nodeStore,\n-            PropertyStore propertyStore, DataImporter.Monitor storeMonitor, PageCacheTracer pageCacheTracer )\n+    public DeleteDuplicateNodesStep(StageControl control, Configuration config, LongIterator nodeIds, NodeStore nodeStore,\n+                                    PropertyStore propertyStore, DataImporter.Monitor storeMonitor, PageCacheTracer pageCacheTracer)\n     {\n-        super( control, \"DEDUP\", config );\n+        super(control, \"DEDUP\", config);\n         this.nodeStore = nodeStore;\n         this.propertyStore = propertyStore;\n         this.nodeIds = nodeIds;\n@@ -63,63 +64,63 @@ public class DeleteDuplicateNodesStep extends LonelyProcessingStep\n     {\n         NodeRecord nodeRecord = nodeStore.newRecord();\n         PropertyRecord propertyRecord = propertyStore.newRecord();\n-        try ( var cursorTracer = pageCacheTracer.createPageCursorTracer( DELETE_DUPLICATE_IMPORT_STEP_TAG );\n-              PageCursor cursor = nodeStore.openPageCursorForReading( 0, cursorTracer );\n-              PageCursor propertyCursor = propertyStore.openPageCursorForReading( 0, cursorTracer ) )\n+        try (var cursorTracer = pageCacheTracer.createPageCursorTracer(DELETE_DUPLICATE_IMPORT_STEP_TAG);\n+             PageCursor cursor = nodeStore.openPageCursorForReading(0, cursorTracer);\n+             PageCursor propertyCursor = propertyStore.openPageCursorForReading(0, cursorTracer))\n         {\n-            while ( nodeIds.hasNext() )\n+            while (nodeIds.hasNext())\n             {\n                 long duplicateNodeId = nodeIds.next();\n-                nodeStore.getRecordByCursor( duplicateNodeId, nodeRecord, NORMAL, cursor );\n+                nodeStore.getRecordByCursor(duplicateNodeId, nodeRecord, NORMAL, cursor);\n                 assert nodeRecord.inUse() : nodeRecord;\n                 // Ensure heavy so that the dynamic label records gets loaded (and then deleted) too\n-                nodeStore.ensureHeavy( nodeRecord, cursorTracer );\n+                nodeStore.ensureHeavy(nodeRecord, cursorTracer);\n \n                 // Delete property records\n                 long nextProp = nodeRecord.getNextProp();\n-                while ( !Record.NULL_REFERENCE.is( nextProp ) )\n+                while (!Record.NULL_REFERENCE.is(nextProp))\n                 {\n-                    propertyStore.getRecordByCursor( nextProp, propertyRecord, NORMAL, propertyCursor );\n+                    propertyStore.getRecordByCursor(nextProp, propertyRecord, NORMAL, propertyCursor);\n                     assert propertyRecord.inUse() : propertyRecord + \" for \" + nodeRecord;\n-                    propertyStore.ensureHeavy( propertyRecord, cursorTracer );\n+                    propertyStore.ensureHeavy(propertyRecord, cursorTracer);\n                     propertiesRemoved += propertyRecord.numberOfProperties();\n                     nextProp = propertyRecord.getNextProp();\n-                    deletePropertyRecordIncludingValueRecords( propertyRecord );\n-                    propertyStore.updateRecord( propertyRecord, cursorTracer );\n+                    deletePropertyRecordIncludingValueRecords(propertyRecord);\n+                    propertyStore.updateRecord(propertyRecord, cursorTracer);\n                 }\n \n                 // Delete node (and dynamic label records, if any)\n-                nodeRecord.setInUse( false );\n-                for ( DynamicRecord labelRecord : nodeRecord.getDynamicLabelRecords() )\n+                nodeRecord.setInUse(false);\n+                for (DynamicRecord labelRecord : nodeRecord.getDynamicLabelRecords())\n                 {\n-                    labelRecord.setInUse( false );\n+                    labelRecord.setInUse(false);\n                 }\n-                nodeStore.updateRecord( nodeRecord, cursorTracer );\n+                nodeStore.updateRecord(nodeRecord, cursorTracer);\n                 nodesRemoved++;\n             }\n         }\n     }\n \n-    private static void deletePropertyRecordIncludingValueRecords( PropertyRecord record )\n+    private static void deletePropertyRecordIncludingValueRecords(PropertyRecord record)\n     {\n-        for ( PropertyBlock block : record )\n+        for (PropertyBlock block : record)\n         {\n-            for ( DynamicRecord valueRecord : block.getValueRecords() )\n+            for (DynamicRecord valueRecord : block.getValueRecords())\n             {\n                 assert valueRecord.inUse();\n-                valueRecord.setInUse( false );\n-                record.addDeletedRecord( valueRecord );\n+                valueRecord.setInUse(false);\n+                record.addDeletedRecord(valueRecord);\n             }\n         }\n         record.clearPropertyBlocks();\n-        record.setInUse( false );\n+        record.setInUse(false);\n     }\n \n     @Override\n     public void close() throws Exception\n     {\n         super.close();\n-        storeMonitor.nodesRemoved( nodesRemoved );\n-        storeMonitor.propertiesRemoved( propertiesRemoved );\n+        storeMonitor.nodesRemoved(nodesRemoved);\n+        storeMonitor.propertiesRemoved(propertiesRemoved);\n     }\n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}