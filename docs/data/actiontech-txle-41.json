{
    "project_name": "actiontech-txle",
    "error_id": "41",
    "information": {
        "errors": [
            {
                "line": "79",
                "column": "3",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n            // 5.construct compensate sql\n//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n            String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n\n            // start to mark duration for business sql By Gannalyo.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "152",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/41/MySqlInsertHandler.java\nindex d55f4aed6b2..b82cf962929 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/41/MySqlInsertHandler.java\n@@ -76,7 +76,8 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n             List<Map<String, Object>> newDataList = selectNewData(delegate, tableName, primaryKeyName, primaryKeyValues);\n \n             // 5.construct compensate sql\n-//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n+\n+            // start to mark duration for business sql By Gannalyo.\n             String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n \n             // start to mark duration for business sql By Gannalyo.\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "79",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/41/MySqlInsertHandler.java\nindex d55f4aed6b2..fc84cca5d53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/41/MySqlInsertHandler.java\n@@ -47,7 +47,7 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n \n     @Override\n     public boolean prepareCompensationAfterInserting(PreparedStatement delegate, SQLStatement sqlStatement,\n-                                            String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n+                                                     String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n         ResultSet rs = null;\n         try {\n             MySqlInsertStatement insertStatement = (MySqlInsertStatement) sqlStatement;\n",
            "diff_size": 1
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "77",
                    "severity": "error",
                    "message": "Line has trailing spaces.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "149",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/naturalize/41/MySqlInsertHandler.java\nindex d55f4aed6b2..10960b8fda4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/naturalize/41/MySqlInsertHandler.java\n@@ -46,9 +46,8 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n     }\n \n     @Override\n-    public boolean prepareCompensationAfterInserting(PreparedStatement delegate, SQLStatement sqlStatement,\n-                                            String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n-        ResultSet rs = null;\n+    public boolean prepareCompensationAfterInserting(PreparedStatement delegate, SQLStatement sqlStatement, String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n+    ResultSet rs = null;\n         try {\n             MySqlInsertStatement insertStatement = (MySqlInsertStatement) sqlStatement;\n             // 1.take table's name out\n@@ -75,9 +74,8 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n             // 4.take the new data out\n             List<Map<String, Object>> newDataList = selectNewData(delegate, tableName, primaryKeyName, primaryKeyValues);\n \n-            // 5.construct compensate sql\n-//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n-            String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n+            // \n+String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n \n             // start to mark duration for business sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(compensateSql, false);\n@@ -209,4 +207,4 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n         return \"\";\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/41/MySqlInsertHandler.java\nindex d55f4aed6b2..cfd8962827e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/41/MySqlInsertHandler.java\n@@ -12,7 +12,6 @@ import org.apache.servicecomb.saga.omega.context.ApplicationContextUtil;\n import org.apache.servicecomb.saga.omega.transaction.monitor.AutoCompensableSqlMetrics;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.ResultSetMetaData;\n@@ -29,8 +28,8 @@ import java.util.concurrent.atomic.AtomicInteger;\n  * 6.perform the compensation sql immediately in case of error, the compensation sql likes [ DELETE FROM txle_sample_user WHERE createtime = '2020-01-09 13:47:15.0' and balance = 2.00000 and name = 'xiongjiujiu' and id = 1006 and version = 2 ]\n  * ps: do not support complex sql, e.g. [ INSERT INTO table SELECT ... ]\n  */\n-public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n \n+public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n     private static volatile MySqlInsertHandler mySqlInsertHandler = null;\n     private static final Logger LOG = LoggerFactory.getLogger(MySqlInsertHandler.class);\n \n@@ -46,8 +45,7 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n     }\n \n     @Override\n-    public boolean prepareCompensationAfterInserting(PreparedStatement delegate, SQLStatement sqlStatement,\n-                                            String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n+    public boolean prepareCompensationAfterInserting(PreparedStatement delegate, SQLStatement sqlStatement, String executeSql, String globalTxId, String localTxId, String server, Map<String, Object> standbyParams) throws SQLException {\n         ResultSet rs = null;\n         try {\n             MySqlInsertStatement insertStatement = (MySqlInsertStatement) sqlStatement;\n@@ -76,7 +74,7 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n             List<Map<String, Object>> newDataList = selectNewData(delegate, tableName, primaryKeyName, primaryKeyValues);\n \n             // 5.construct compensate sql\n-//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n+//          String compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n             String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n \n             // start to mark duration for business sql By Gannalyo.\n@@ -87,7 +85,6 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n \n             // end mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n-\n             return result;\n         } catch (SQLException e) {\n             LOG.error(TxleConstants.logErrorPrefixWithTime() + \"Fail to save auto-compensation info for insert SQL.\", e);\n@@ -107,13 +104,11 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n         if (newDataList == null || newDataList.isEmpty()) {\n             throw new SQLException(TxleConstants.LOG_ERROR_PREFIX + \"Could not get the new data when constructed the 'compensateSql' for executing insert SQL.\");\n         }\n-\n         Map<String, String> columnNameType = this.selectColumnNameType(delegate, tableName);\n         StringBuffer compensateSqls = new StringBuffer();\n         for (Map<String, Object> dataMap : newDataList) {\n             this.resetColumnValueByDBType(columnNameType, dataMap);\n             String whereSqlForCompensation = this.constructWhereSqlForCompensation(dataMap);\n-\n             String compensateSql = String.format(\"DELETE FROM %s WHERE %s\" + TxleConstants.ACTION_SQL + \";\", tableName, whereSqlForCompensation);\n             if (compensateSqls.length() == 0) {\n                 compensateSqls.append(compensateSql);\n@@ -121,7 +116,6 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n                 compensateSqls.append(\"\\n\" + compensateSql);\n             }\n         }\n-\n         return compensateSqls.toString();\n     }\n \n@@ -148,11 +142,10 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n         ResultSet dataResultSet = null;\n         try {\n             String sql = constructNewDataSql(primaryKeyValues);\n-//\t\t\tdataResultSet = delegate.getResultSet();// it's result is null.\n+//          dataResultSet = delegate.getResultSet();// it's result is null.\n \n             // start to mark duration for business sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).startMarkSQLDurationAndCount(sql, false);\n-\n             String[] params = new String[2 + primaryKeyValues.size()];\n             params[0] = tableName;\n             params[1] = primaryKeyName;\n@@ -160,13 +153,11 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n             primaryKeyValues.forEach(value -> {\n                 params[index.getAndIncrement()] = String.valueOf(value);\n             });\n-\n             preparedStatement = delegate.getConnection().prepareStatement(String.format(sql, params));\n             dataResultSet = preparedStatement.executeQuery();\n \n             // end mark duration for maintaining sql By Gannalyo.\n             ApplicationContextUtil.getApplicationContext().getBean(AutoCompensableSqlMetrics.class).endMarkSQLDuration();\n-\n             List<Map<String, Object>> newDataList = new ArrayList<>();\n             while (dataResultSet.next()) {\n                 Map<String, Object> dataMap = new HashMap<String, Object>();\n@@ -175,7 +166,6 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n                     String column = metaData.getColumnName(i);\n                     dataMap.put(column, dataResultSet.getObject(column));\n                 }\n-\n                 newDataList.add(dataMap);\n             }\n             return newDataList;\n@@ -208,5 +198,4 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n         }\n         return \"\";\n     }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 17
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "152",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/41/MySqlInsertHandler.java\nindex d55f4aed6b2..b82cf962929 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/41/MySqlInsertHandler.java\n@@ -76,7 +76,8 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n             List<Map<String, Object>> newDataList = selectNewData(delegate, tableName, primaryKeyName, primaryKeyValues);\n \n             // 5.construct compensate sql\n-//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n+\n+            // start to mark duration for business sql By Gannalyo.\n             String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n \n             // start to mark duration for business sql By Gannalyo.\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "152",
                    "column": "3",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/41/MySqlInsertHandler.java\nindex d55f4aed6b2..b82cf962929 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/41/MySqlInsertHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/41/MySqlInsertHandler.java\n@@ -76,7 +76,8 @@ public class MySqlInsertHandler extends AutoCompensateInsertHandler {\n             List<Map<String, Object>> newDataList = selectNewData(delegate, tableName, primaryKeyName, primaryKeyValues);\n \n             // 5.construct compensate sql\n-//\t\t\tString compensateSql = String.format(\"DELETE FROM %s WHERE %s = %s\" + TxleConstants.ACTION_SQL, tableName, primaryKeyColumnName, primaryKeyColumnValue);\n+\n+            // start to mark duration for business sql By Gannalyo.\n             String compensateSql = constructCompensateSql(delegate, tableName, newDataList);\n \n             // start to mark duration for business sql By Gannalyo.\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}