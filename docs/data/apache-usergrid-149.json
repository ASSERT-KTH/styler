{
    "project_name": "apache-usergrid",
    "error_id": "149",
    "information": {
        "errors": [
            {
                "line": "34",
                "severity": "warning",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "public class Identifier implements Serializable {\n\n    public static final String UUID_REX = \n            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n    public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler/149/Identifier.java\nindex 9313c03ad60..66dcd3bc211 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler/149/Identifier.java\n@@ -31,8 +31,7 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+    public static final String UUID_REX = \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n     public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n     public enum Type {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "70",
                    "column": "47",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "53",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "45",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "51",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "53",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "59",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "36",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "42",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "52",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "58",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "17",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "21",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "17",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "23",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "17",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "23",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "29",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "39",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "9",
                    "severity": "warning",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "234",
                    "column": "38",
                    "severity": "warning",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                },
                {
                    "line": "234",
                    "column": "44",
                    "severity": "warning",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.TypecastParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/149/Identifier.java\nindex 9313c03ad60..843ba914383 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/intellij/149/Identifier.java\n@@ -14,6 +14,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.usergrid.persistence.index.query;\n \n \n@@ -31,9 +32,10 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n-    public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n+    public static final String UUID_REX =\n+        \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+\n+    public static final String EMAIL_REX = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n     public enum Type {\n         UUID, NAME, EMAIL\n@@ -41,75 +43,77 @@ public class Identifier implements Serializable {\n \n \n     Type type;\n+\n     Object value;\n \n-    static Pattern emailRegEx = Pattern.compile( EMAIL_REX );\n+    static Pattern emailRegEx = Pattern.compile(EMAIL_REX);\n+\n     // \"Pattern nameRegEx\" below used to be [a-zA-Z0-9_\\\\-./], changed it to contain a 'space' to a\n     // ddress https://issues.apache.org/jira/browse/USERGRID-94\n-    static Pattern nameRegEx = Pattern.compile( \"[a-zA-Z0-9_\\\\-./ ]*\" );\n+    static Pattern nameRegEx = Pattern.compile(\"[a-zA-Z0-9_\\\\-./ ]*\");\n \n \n-    private Identifier( Type type, Object value ) {\n+    private Identifier(Type type, Object value) {\n         this.type = type;\n         this.value = value;\n     }\n \n \n-    public static Identifier from( Object obj ) {\n-        if ( obj == null ) {\n+    public static Identifier from(Object obj) {\n+        if (obj == null) {\n             return null;\n         }\n-        if ( obj instanceof UUID ) {\n-            return new Identifier( Type.UUID, obj );\n+        if (obj instanceof UUID) {\n+            return new Identifier(Type.UUID, obj);\n         }\n-        if ( obj instanceof String ) {\n-            UUID uuid = UUIDUtils.tryGetUUID( ( String ) obj );\n-            if ( uuid != null ) {\n-                return new Identifier( Type.UUID, uuid );\n+        if (obj instanceof String) {\n+            UUID uuid = UUIDUtils.tryGetUUID((String) obj);\n+            if (uuid != null) {\n+                return new Identifier(Type.UUID, uuid);\n             }\n-            Matcher m = emailRegEx.matcher( ( String ) obj );\n-            if ( m.matches() ) {\n-                return new Identifier( Type.EMAIL, ( ( String ) obj ).toLowerCase() );\n+            Matcher m = emailRegEx.matcher((String) obj);\n+            if (m.matches()) {\n+                return new Identifier(Type.EMAIL, ((String) obj).toLowerCase());\n             }\n-            m = nameRegEx.matcher( ( String ) obj );\n-            if ( m.matches() ) {\n-                return new Identifier( Type.NAME, ( ( String ) obj ).toLowerCase() );\n+            m = nameRegEx.matcher((String) obj);\n+            if (m.matches()) {\n+                return new Identifier(Type.NAME, ((String) obj).toLowerCase());\n             }\n         }\n         return null;\n     }\n \n \n-    public static Identifier fromUUID( UUID uuid ) {\n-        if ( uuid == null ) {\n+    public static Identifier fromUUID(UUID uuid) {\n+        if (uuid == null) {\n             return null;\n         }\n-        return new Identifier( Type.UUID, uuid );\n+        return new Identifier(Type.UUID, uuid);\n     }\n \n \n-    public static Identifier fromName( String name ) {\n-        if ( name == null ) {\n+    public static Identifier fromName(String name) {\n+        if (name == null) {\n             return null;\n         }\n-        return new Identifier( Type.NAME, name );\n+        return new Identifier(Type.NAME, name);\n     }\n \n \n-    public static Identifier fromEmail( String email ) {\n-        if ( email == null ) {\n+    public static Identifier fromEmail(String email) {\n+        if (email == null) {\n             return null;\n         }\n-        return new Identifier( Type.EMAIL, email );\n+        return new Identifier(Type.EMAIL, email);\n     }\n \n \n     @JsonIgnore\n     public UUID getUUID() {\n-        if ( type != Type.UUID ) {\n+        if (type != Type.UUID) {\n             return null;\n         }\n-        return ( UUID ) value;\n+        return (UUID) value;\n     }\n \n \n@@ -121,10 +125,10 @@ public class Identifier implements Serializable {\n \n     @JsonIgnore\n     public String getEmail() {\n-        if ( type != Type.EMAIL ) {\n+        if (type != Type.EMAIL) {\n             return null;\n         }\n-        return ( String ) value;\n+        return (String) value;\n     }\n \n \n@@ -136,10 +140,10 @@ public class Identifier implements Serializable {\n \n     @JsonIgnore\n     public String getName() {\n-        if ( type != Type.NAME ) {\n+        if (type != Type.NAME) {\n             return null;\n         }\n-        return ( String ) value;\n+        return (String) value;\n     }\n \n \n@@ -164,49 +168,48 @@ public class Identifier implements Serializable {\n     public int hashCode() {\n         final int prime = 31;\n         int result = 1;\n-        result = prime * result + ( ( type == null ) ? 0 : type.hashCode() );\n-        result = prime * result + ( ( value == null ) ? 0 : value.hashCode() );\n+        result = prime * result + ((type == null) ? 0 : type.hashCode());\n+        result = prime * result + ((value == null) ? 0 : value.hashCode());\n         return result;\n     }\n \n \n     @Override\n-    public boolean equals( Object obj ) {\n-        if ( this == obj ) {\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n             return true;\n         }\n-        if ( obj == null ) {\n+        if (obj == null) {\n             return false;\n         }\n-        if ( getClass() != obj.getClass() ) {\n+        if (getClass() != obj.getClass()) {\n             return false;\n         }\n-        Identifier other = ( Identifier ) obj;\n-        if ( type != other.type ) {\n+        Identifier other = (Identifier) obj;\n+        if (type != other.type) {\n             return false;\n         }\n-        if ( value == null ) {\n-            if ( other.value != null ) {\n+        if (value == null) {\n+            if (other.value != null) {\n                 return false;\n             }\n-        }\n-        else if ( !value.equals( other.value ) ) {\n+        } else if (!value.equals(other.value)) {\n             return false;\n         }\n         return true;\n     }\n \n \n-    public static List<Identifier> fromList( List<String> l ) {\n+    public static List<Identifier> fromList(List<String> l) {\n         List<Identifier> identifiers = null;\n-        if ( ( l != null ) && ( l.size() > 0 ) ) {\n-            for ( String s : l ) {\n-                Identifier identifier = Identifier.from( s );\n-                if ( identifier != null ) {\n-                    if ( identifiers == null ) {\n+        if ((l != null) && (l.size() > 0)) {\n+            for (String s : l) {\n+                Identifier identifier = Identifier.from(s);\n+                if (identifier != null) {\n+                    if (identifiers == null) {\n                         identifiers = new ArrayList<Identifier>();\n                     }\n-                    identifiers.add( identifier );\n+                    identifiers.add(identifier);\n                 }\n             }\n         }\n@@ -215,7 +218,8 @@ public class Identifier implements Serializable {\n \n \n     // for serialization\n-    public Identifier() { }\n+    public Identifier() {\n+    }\n \n \n     // for serialization\n@@ -225,9 +229,9 @@ public class Identifier implements Serializable {\n \n \n     // for serialization\n-    public void setValue( Object value ) {\n-        if ( isUUID() && value instanceof String ) {\n-            value = UUID.fromString( ( String ) value );\n+    public void setValue(Object value) {\n+        if (isUUID() && value instanceof String) {\n+            value = UUID.fromString((String) value);\n         }\n         this.value = value;\n     }\n",
            "diff_size": 63
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/149/Identifier.java\nindex 9313c03ad60..c8e25bdb91d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/naturalize/149/Identifier.java\n@@ -31,9 +31,8 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n-    public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n+    public static final String UUID_REX = \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+public static final String EMAIL_REX = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n     public enum Type {\n         UUID, NAME, EMAIL\n@@ -231,4 +230,4 @@ public class Identifier implements Serializable {\n         }\n         this.value = value;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/149/Identifier.java\nindex 9313c03ad60..af0d0795e27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/codebuff/149/Identifier.java\n@@ -23,29 +23,27 @@ import java.util.List;\n import java.util.UUID;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n-\n import org.apache.usergrid.persistence.index.utils.UUIDUtils;\n-\n import com.fasterxml.jackson.annotation.JsonIgnore;\n \n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n-    public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n-\n+    public static final String UUID_REX = \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+    public static final String EMAIL_REX = \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n     public enum Type {\n         UUID, NAME, EMAIL\n     }\n \n \n     Type type;\n+\n     Object value;\n \n     static Pattern emailRegEx = Pattern.compile( EMAIL_REX );\n     // \"Pattern nameRegEx\" below used to be [a-zA-Z0-9_\\\\-./], changed it to contain a 'space' to a\n     // ddress https://issues.apache.org/jira/browse/USERGRID-94\n+\n     static Pattern nameRegEx = Pattern.compile( \"[a-zA-Z0-9_\\\\-./ ]*\" );\n \n \n@@ -67,6 +65,7 @@ public class Identifier implements Serializable {\n             if ( uuid != null ) {\n                 return new Identifier( Type.UUID, uuid );\n             }\n+\n             Matcher m = emailRegEx.matcher( ( String ) obj );\n             if ( m.matches() ) {\n                 return new Identifier( Type.EMAIL, ( ( String ) obj ).toLowerCase() );\n@@ -181,6 +180,7 @@ public class Identifier implements Serializable {\n         if ( getClass() != obj.getClass() ) {\n             return false;\n         }\n+\n         Identifier other = ( Identifier ) obj;\n         if ( type != other.type ) {\n             return false;\n@@ -215,20 +215,27 @@ public class Identifier implements Serializable {\n \n \n     // for serialization\n-    public Identifier() { }\n+\n+\n+    public Identifier() {\n+    }\n \n \n     // for serialization\n+\n+\n     public Object getValue() {\n         return value;\n     }\n \n \n     // for serialization\n+\n+\n     public void setValue( Object value ) {\n         if ( isUUID() && value instanceof String ) {\n             value = UUID.fromString( ( String ) value );\n         }\n         this.value = value;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 19
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_random/149/Identifier.java\nindex 9313c03ad60..66dcd3bc211 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_random/149/Identifier.java\n@@ -31,8 +31,7 @@ import com.fasterxml.jackson.annotation.JsonIgnore;\n \n public class Identifier implements Serializable {\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+    public static final String UUID_REX = \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n     public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n     public enum Type {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/149/Identifier.java\nindex 9313c03ad60..b7d073c979e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/errored/1/149/Identifier.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-usergrid/styler_three_grams/149/Identifier.java\n@@ -29,10 +29,10 @@ import org.apache.usergrid.persistence.index.utils.UUIDUtils;\n import com.fasterxml.jackson.annotation.JsonIgnore;\n \n \n-public class Identifier implements Serializable {\n+public class Identifier implements Serializable { public\n \n-    public static final String UUID_REX = \n-            \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n+static final String UUID_REX =\n+         \"[A-Fa-f0-9]{8}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{4}-[A-Fa-f0-9]{12}\";\n     public static final String EMAIL_REX =  \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,4}\";\n \n     public enum Type {\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij"
    ]
}