{
    "project_name": "graphfoundation-ongdb",
    "error_id": "522",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "121",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/522/Radix.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/522/Radix.java\nindex 7f9e0658f48..cddbb46b898 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/522/Radix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/522/Radix.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.cache.idmapping.string;\n \n import org.apache.commons.lang3.mutable.MutableInt;\n@@ -31,96 +32,96 @@ import static java.lang.Math.pow;\n  */\n public abstract class Radix\n {\n-    public static final Factory<Radix> LONG = Long::new;\n+  public static final Factory<Radix> LONG = Long::new;\n+\n+  public static final Factory<Radix> STRING = String::new;\n+\n+  final int[] radixIndexCount = new int[(int) pow(2, RadixCalculator.RADIX_BITS - 1)];\n+\n+  public int registerRadixOf(long value)\n+  {\n+    int radix = calculator().radixOf(value);\n+    radixIndexCount[radix]++;\n+    return radix;\n+  }\n \n-    public static final Factory<Radix> STRING = String::new;\n+  public int[] getRadixIndexCounts()\n+  {\n+    return radixIndexCount;\n+  }\n \n-    final int[] radixIndexCount = new int[(int) pow( 2, RadixCalculator.RADIX_BITS - 1 )];\n+  public abstract RadixCalculator calculator();\n \n-    public int registerRadixOf( long value )\n+  @Override\n+  public java.lang.String toString()\n+  {\n+    return Radix.class.getSimpleName() + \".\" + getClass().getSimpleName();\n+  }\n+\n+  public static class String extends Radix\n+  {\n+    private final RadixCalculator calculator;\n+\n+    public String()\n     {\n-        int radix = calculator().radixOf( value );\n-        radixIndexCount[radix]++;\n-        return radix;\n+      this.calculator = new RadixCalculator.String();\n     }\n \n-    public int[] getRadixIndexCounts()\n+    @Override\n+    public RadixCalculator calculator()\n     {\n-        return radixIndexCount;\n+      return calculator;\n     }\n+  }\n \n-    public abstract RadixCalculator calculator();\n+  public static class Long extends Radix\n+  {\n+    private final MutableInt radixShift;\n+    private final RadixCalculator calculator;\n \n-    @Override\n-    public java.lang.String toString()\n+    public Long()\n     {\n-        return Radix.class.getSimpleName() + \".\" + getClass().getSimpleName();\n+      this.radixShift = new MutableInt();\n+      this.calculator = new RadixCalculator.Long(radixShift);\n     }\n \n-    public static class String extends Radix\n+    @Override\n+    public RadixCalculator calculator()\n     {\n-        private final RadixCalculator calculator;\n-\n-        public String()\n-        {\n-            this.calculator = new RadixCalculator.String();\n-        }\n-\n-        @Override\n-        public RadixCalculator calculator()\n-        {\n-            return calculator;\n-        }\n+      return calculator;\n     }\n \n-    public static class Long extends Radix\n+    @Override\n+    public int registerRadixOf(long value)\n     {\n-        private final MutableInt radixShift;\n-        private final RadixCalculator calculator;\n-\n-        public Long()\n-        {\n-            this.radixShift = new MutableInt();\n-            this.calculator = new RadixCalculator.Long( radixShift );\n-        }\n-\n-        @Override\n-        public RadixCalculator calculator()\n-        {\n-            return calculator;\n-        }\n-\n-        @Override\n-        public int registerRadixOf( long value )\n-        {\n-            radixOverflow( value );\n-            return super.registerRadixOf( value );\n-        }\n+      radixOverflow(value);\n+      return super.registerRadixOf(value);\n+    }\n \n-        private void radixOverflow( long val )\n+    private void radixOverflow(long val)\n+    {\n+      long shiftVal = (val & ~RadixCalculator.LENGTH_BITS) >> (RadixCalculator.RADIX_BITS - 1 + radixShift.intValue());\n+      if (shiftVal > 0)\n+      {\n+        while (shiftVal > 0)\n         {\n-            long shiftVal = (val & ~RadixCalculator.LENGTH_BITS) >> (RadixCalculator.RADIX_BITS - 1 + radixShift.intValue());\n-            if ( shiftVal > 0 )\n-            {\n-                while ( shiftVal > 0 )\n-                {\n-                    radixShift.increment();\n-                    compressRadixIndex();\n-                    shiftVal = shiftVal >> 1;\n-                }\n-            }\n+          radixShift.increment();\n+          compressRadixIndex();\n+          shiftVal = shiftVal >> 1;\n         }\n+      }\n+    }\n \n-        private void compressRadixIndex()\n-        {\n-            for ( int i = 0; i < radixIndexCount.length / 2; i++ )\n-            {\n-                radixIndexCount[i] = radixIndexCount[2 * i] + radixIndexCount[2 * i + 1];\n-            }\n-            for ( int i = radixIndexCount.length / 2; i < radixIndexCount.length; i++ )\n-            {\n-                radixIndexCount[i] = 0;\n-            }\n-        }\n+    private void compressRadixIndex()\n+    {\n+      for (int i = 0; i < radixIndexCount.length / 2; i++)\n+      {\n+        radixIndexCount[i] = radixIndexCount[2 * i] + radixIndexCount[2 * i + 1];\n+      }\n+      for (int i = radixIndexCount.length / 2; i < radixIndexCount.length; i++)\n+      {\n+        radixIndexCount[i] = 0;\n+      }\n     }\n+  }\n }\n",
            "diff_size": 111
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/522/Radix.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/522/Radix.java\nindex 7f9e0658f48..f75cda04401 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/522/Radix.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/522/Radix.java\n@@ -99,7 +99,7 @@ public abstract class Radix\n \n         private void radixOverflow( long val )\n         {\n-            long shiftVal = (val & ~RadixCalculator.LENGTH_BITS) >> (RadixCalculator.RADIX_BITS - 1 + radixShift.intValue());\n+            long shiftVal = (val & ~RadixCalculator.LENGTH_BITS) >> (RadixCalculator.RADIX_BITS - 1 + radixShift.intValue() );\n             if ( shiftVal > 0 )\n             {\n                 while ( shiftVal > 0 )\n@@ -123,4 +123,4 @@ public abstract class Radix\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}