{
    "project_name": "apache-servicecomb-java-chassis",
    "error_id": "337",
    "information": {
        "errors": [
            {
                "line": "62",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n    serviceRegistry =\n        ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n    serviceRegistry.init();\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/337/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/337/RegistryUtils.java\nindex 598e7ef2882..6f80849dd4f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/337/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/intellij/337/RegistryUtils.java\n@@ -59,7 +59,8 @@ public final class RegistryUtils {\n     MicroserviceConfigLoader loader = ConfigUtil.getMicroserviceConfigLoader();\n     MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n     serviceRegistry =\n-        ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n+        ServiceRegistryFactory\n+            .getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n     serviceRegistry.init();\n   }\n \n@@ -203,7 +204,7 @@ public final class RegistryUtils {\n   }\n \n   public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n-      String versionRule) {\n+                                                               String versionRule) {\n     return serviceRegistry.findServiceInstance(appId, serviceName, versionRule);\n   }\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/337/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/337/RegistryUtils.java\nindex 598e7ef2882..1d4bd9d4646 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/337/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/naturalize/337/RegistryUtils.java\n@@ -198,7 +198,7 @@ public final class RegistryUtils {\n     int publishPortSetting = DynamicPropertyFactory.getInstance()\n         .getIntProperty(publishPortKey, 0)\n         .get();\n-    int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n+int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n     return new IpPort(publicAddressSetting, publishPort);\n   }\n \n@@ -215,4 +215,4 @@ public final class RegistryUtils {\n   public static Microservice getMicroservice(String microserviceId) {\n     return serviceRegistry.getRemoteMicroservice(microserviceId);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 136).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "119",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "133",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 132).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "184",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/337/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/337/RegistryUtils.java\nindex 598e7ef2882..9dab06f7f04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/337/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/codebuff/337/RegistryUtils.java\n@@ -22,13 +22,10 @@ import java.net.URI;\n import java.net.URISyntaxException;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.http.client.utils.URIBuilder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import com.netflix.config.DynamicPropertyFactory;\n-\n import io.servicecomb.config.ConfigUtil;\n import io.servicecomb.config.archaius.sources.MicroserviceConfigLoader;\n import io.servicecomb.foundation.common.event.EventManager;\n@@ -48,6 +45,7 @@ public final class RegistryUtils {\n   private static ServiceRegistry serviceRegistry;\n \n   // value is ip or {interface name}\n+\n   public static final String PUBLISH_ADDRESS = \"cse.service.publishAddress\";\n \n   private static final String PUBLISH_PORT = \"cse.{transport_name}.publishPort\";\n@@ -58,8 +56,7 @@ public final class RegistryUtils {\n   public static void init() {\n     MicroserviceConfigLoader loader = ConfigUtil.getMicroserviceConfigLoader();\n     MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n-    serviceRegistry =\n-        ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n+    serviceRegistry = ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n     serviceRegistry.init();\n   }\n \n@@ -74,6 +71,7 @@ public final class RegistryUtils {\n   /**\n    * @deprecated Replace by {@link #destroy()}\n    */\n+\n   @Deprecated\n   public static void destory() {\n     destroy();\n@@ -108,43 +106,39 @@ public final class RegistryUtils {\n   }\n \n   public static String getPublishAddress() {\n-    String publicAddressSetting =\n-        DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\").get();\n+    String publicAddressSetting = DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\")\n+                                                                      .get();\n     publicAddressSetting = publicAddressSetting.trim();\n     if (publicAddressSetting.isEmpty()) {\n       return NetUtils.getHostAddress();\n     }\n \n     // placeholder is network interface name\n+\n     if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n-      return NetUtils\n-          .ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n-          .getHostAddress();\n+      return NetUtils.ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1)).getHostAddress();\n     }\n-\n     return publicAddressSetting;\n   }\n \n   public static String getPublishHostName() {\n-    String publicAddressSetting =\n-        DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\").get();\n+    String publicAddressSetting = DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\")\n+                                                                      .get();\n     publicAddressSetting = publicAddressSetting.trim();\n     if (publicAddressSetting.isEmpty()) {\n       return NetUtils.getHostName();\n     }\n \n     if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n-      return NetUtils\n-          .ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n-          .getHostName();\n+      return NetUtils.ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1)).getHostName();\n     }\n-\n     return publicAddressSetting;\n   }\n \n   /**\n    * \u5bf9\u4e8e\u914d\u7f6e\u4e3a0.0.0.0\u7684\u5730\u5740\uff0c\u901a\u8fc7\u67e5\u8be2\u7f51\u5361\u5730\u5740\uff0c\u8f6c\u6362\u4e3a\u5b9e\u9645\u76d1\u542c\u7684\u5730\u5740\u3002\n    */\n+\n   public static String getPublishAddress(String schema, String address) {\n     if (address == null) {\n       return address;\n@@ -160,7 +154,9 @@ public final class RegistryUtils {\n \n       IpPort publishIpPort = genPublishIpPort(schema, ipPort);\n       URIBuilder builder = new URIBuilder(originalURI);\n-      return builder.setHost(publishIpPort.getHostOrIp()).setPort(publishIpPort.getPort()).build().toString();\n+      return builder.setHost(publishIpPort.getHostOrIp()).setPort(publishIpPort.getPort())\n+                                                         .build()\n+                                                         .toString();\n     } catch (URISyntaxException e) {\n       LOGGER.warn(\"address {} not valid.\", address);\n       return null;\n@@ -168,46 +164,39 @@ public final class RegistryUtils {\n   }\n \n   private static IpPort genPublishIpPort(String schema, IpPort ipPort) {\n-    String publicAddressSetting = DynamicPropertyFactory.getInstance()\n-        .getStringProperty(PUBLISH_ADDRESS, \"\")\n-        .get();\n+    String publicAddressSetting = DynamicPropertyFactory.getInstance().getStringProperty(PUBLISH_ADDRESS, \"\")\n+                                                                      .get();\n     publicAddressSetting = publicAddressSetting.trim();\n-\n     if (publicAddressSetting.isEmpty()) {\n       InetSocketAddress socketAddress = ipPort.getSocketAddress();\n       if (socketAddress.getAddress().isAnyLocalAddress()) {\n         String host = NetUtils.getHostAddress();\n         LOGGER.warn(\"address {}, auto select a host address to publish {}:{}, maybe not the correct one\",\n-            socketAddress,\n-            host,\n-            socketAddress.getPort());\n+socketAddress,\n+host,\n+socketAddress.getPort());\n         return new IpPort(host, ipPort.getPort());\n       }\n-\n       return ipPort;\n     }\n \n     if (publicAddressSetting.startsWith(\"{\") && publicAddressSetting.endsWith(\"}\")) {\n-      publicAddressSetting = NetUtils\n-          .ensureGetInterfaceAddress(\n-              publicAddressSetting.substring(1, publicAddressSetting.length() - 1))\n-          .getHostAddress();\n+      publicAddressSetting = NetUtils.ensureGetInterfaceAddress(publicAddressSetting.substring(1, publicAddressSetting.length() - 1)).getHostAddress();\n     }\n \n     String publishPortKey = PUBLISH_PORT.replace(\"{transport_name}\", schema);\n-    int publishPortSetting = DynamicPropertyFactory.getInstance()\n-        .getIntProperty(publishPortKey, 0)\n-        .get();\n+    int publishPortSetting = DynamicPropertyFactory.getInstance().getIntProperty(publishPortKey, 0)\n+                                                                 .get();\n     int publishPort = publishPortSetting == 0 ? ipPort.getPort() : publishPortSetting;\n     return new IpPort(publicAddressSetting, publishPort);\n   }\n \n-  public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName,\n-      String versionRule) {\n+  public static List<MicroserviceInstance> findServiceInstance(String appId, String serviceName, String versionRule) {\n     return serviceRegistry.findServiceInstance(appId, serviceName, versionRule);\n   }\n \n   // update microservice instance properties\n+\n   public static boolean updateInstanceProperties(Map<String, String> instanceProperties) {\n     return serviceRegistry.updateInstanceProperties(instanceProperties);\n   }\n@@ -215,4 +204,4 @@ public final class RegistryUtils {\n   public static Microservice getMicroservice(String microserviceId) {\n     return serviceRegistry.getRemoteMicroservice(microserviceId);\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "62",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "62",
                    "column": "53",
                    "severity": "warning",
                    "message": "'.' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceAfterCheck"
                },
                {
                    "line": "62",
                    "column": "63",
                    "severity": "warning",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/337/RegistryUtils.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/337/RegistryUtils.java\nindex 598e7ef2882..be5e3ff0913 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/errored/1/337/RegistryUtils.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-servicecomb-java-chassis/styler_three_grams/337/RegistryUtils.java\n@@ -59,7 +59,7 @@ public final class RegistryUtils {\n     MicroserviceConfigLoader loader = ConfigUtil.getMicroserviceConfigLoader();\n     MicroserviceDefinition microserviceDefinition = new MicroserviceDefinition(loader.getConfigModels());\n     serviceRegistry =\n-        ServiceRegistryFactory.getOrCreate(EventManager.eventBus, ServiceRegistryConfig.INSTANCE, microserviceDefinition);\n+    ServiceRegistryFactory.getOrCreate(EventManager. eventBus,ServiceRegistryConfig .INSTANCE, microserviceDefinition);\n     serviceRegistry.init();\n   }\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}