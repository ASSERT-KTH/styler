{
    "project_name": "neo4j-neo4j",
    "error_id": "582",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "44",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "50",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "17",
                    "severity": "error",
                    "message": "'}' at column 17 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "115",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "88",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "172",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "209",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/582/LogAssert.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/582/LogAssert.java\nindex 68002b1445b..8622ab36612 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/582/LogAssert.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/582/LogAssert.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.logging;\n \n import org.assertj.core.api.AbstractAssert;\n@@ -35,53 +36,52 @@ public class LogAssert extends AbstractAssert<LogAssert, AssertableLogProvider>\n     private Class<?> loggerClazz;\n     private AssertableLogProvider.Level logLevel;\n \n-    public LogAssert( AssertableLogProvider logProvider )\n+    public LogAssert(AssertableLogProvider logProvider)\n     {\n-        super( logProvider, LogAssert.class );\n+        super(logProvider, LogAssert.class);\n     }\n \n-    public LogAssert forClass( Class<?> clazz )\n+    public LogAssert forClass(Class<?> clazz)\n     {\n         loggerClazz = clazz;\n         return this;\n     }\n \n-    public LogAssert forLevel( AssertableLogProvider.Level level )\n+    public LogAssert forLevel(AssertableLogProvider.Level level)\n     {\n         this.logLevel = level;\n         return this;\n     }\n \n-    public LogAssert containsMessages( String... messages )\n+    public LogAssert containsMessages(String... messages)\n     {\n         isNotNull();\n-        for ( String message : messages )\n+        for (String message : messages)\n         {\n-            if ( !haveMessage( message ) )\n+            if (!haveMessage(message))\n             {\n-                failWithMessage( \"Expected log to contain messages: `%s` but no matches found in:%n%s\", Arrays.toString( messages ), actual.serialize() );\n+                failWithMessage(\"Expected log to contain messages: `%s` but no matches found in:%n%s\", Arrays.toString(messages), actual.serialize());\n             }\n         }\n         return this;\n     }\n \n-    public LogAssert containsMessagesOnce( String... messages )\n+    public LogAssert containsMessagesOnce(String... messages)\n     {\n         isNotNull();\n-        for ( String message : messages )\n+        for (String message : messages)\n         {\n-            long messageMatchCount = messageMatchCount( message );\n-            if ( messageMatchCount != 1 )\n+            long messageMatchCount = messageMatchCount(message);\n+            if (messageMatchCount != 1)\n             {\n-                if ( messageMatchCount == 0 )\n+                if (messageMatchCount == 0)\n                 {\n-                    failWithMessage( \"Expected log to contain messages: `%s` exactly once but no matches found in:%n%s\",\n-                            Arrays.toString( messages ), actual.serialize() );\n-                }\n-                else\n+                    failWithMessage(\"Expected log to contain messages: `%s` exactly once but no matches found in:%n%s\",\n+                      Arrays.toString(messages), actual.serialize());\n+                } else\n                 {\n-                    failWithMessage( \"Expected log to contain messages: `%s` exactly once but %d matches found in:%n%s\",\n-                            Arrays.toString( messages ), messageMatchCount, actual.serialize() );\n+                    failWithMessage(\"Expected log to contain messages: `%s` exactly once but %d matches found in:%n%s\",\n+                      Arrays.toString(messages), messageMatchCount, actual.serialize());\n                 }\n             }\n         }\n@@ -91,140 +91,140 @@ public class LogAssert extends AbstractAssert<LogAssert, AssertableLogProvider>\n     public LogAssert doesNotHaveAnyLogs()\n     {\n         isNotNull();\n-        if ( actual.getLogCalls().stream()\n-                   .anyMatch(call -> matchedLogger( call ) && matchedLevel( call ) ) )\n+        if (actual.getLogCalls().stream()\n+          .anyMatch(call -> matchedLogger(call) && matchedLevel(call)))\n         {\n-            failWithMessage( \"Expected log to be empty but following log calls were recorded:%n%s\", actual.serialize() );\n+            failWithMessage(\"Expected log to be empty but following log calls were recorded:%n%s\", actual.serialize());\n         }\n         return this;\n     }\n \n-    public LogAssert doesNotContainMessage( String message )\n+    public LogAssert doesNotContainMessage(String message)\n     {\n         isNotNull();\n-        if ( haveMessage( message ) )\n+        if (haveMessage(message))\n         {\n-            failWithMessage( \"Unexpected log message: `%s` in:%n%s\", message, actual.serialize() );\n+            failWithMessage(\"Unexpected log message: `%s` in:%n%s\", message, actual.serialize());\n         }\n         return this;\n     }\n \n-    public LogAssert containsMessageWithArguments( String message, Object... arguments )\n+    public LogAssert containsMessageWithArguments(String message, Object... arguments)\n     {\n         isNotNull();\n-        if ( !haveMessageWithArguments( message, arguments ) )\n+        if (!haveMessageWithArguments(message, arguments))\n         {\n-            failWithMessage( \"Expected log to contain messages: `%s` with arguments: `%s`. \" +\n-                            \"But no matches found in:%n%s\", message, Arrays.toString( arguments ), actual.serialize() );\n+            failWithMessage(\"Expected log to contain messages: `%s` with arguments: `%s`. \" +\n+              \"But no matches found in:%n%s\", message, Arrays.toString(arguments), actual.serialize());\n         }\n         return this;\n     }\n \n-    public LogAssert doesNotContainMessageWithArguments( String message, Object... arguments )\n+    public LogAssert doesNotContainMessageWithArguments(String message, Object... arguments)\n     {\n         isNotNull();\n-        if ( haveMessageWithArguments( message, arguments ) )\n+        if (haveMessageWithArguments(message, arguments))\n         {\n-            failWithMessage( \"Unexpected log message: `%s` with arguments: `%s` \" +\n-                    \" in:%n%s\", message, Arrays.toString( arguments ), actual.serialize() );\n+            failWithMessage(\"Unexpected log message: `%s` with arguments: `%s` \" +\n+              \" in:%n%s\", message, Arrays.toString(arguments), actual.serialize());\n         }\n         return this;\n     }\n \n-    public LogAssert eachMessageContains( String message )\n+    public LogAssert eachMessageContains(String message)\n     {\n         isNotNull();\n-        for ( LogCall logCall : actual.getLogCalls() )\n+        for (LogCall logCall : actual.getLogCalls())\n         {\n-            if ( !matchedMessage( message, logCall ) )\n+            if (!matchedMessage(message, logCall))\n             {\n-                failWithMessage( \"Expected each log message to contain '%s', but message '%s' doesn't\", message, logCall.toLogLikeString() );\n+                failWithMessage(\"Expected each log message to contain '%s', but message '%s' doesn't\", message, logCall.toLogLikeString());\n             }\n         }\n         return this;\n     }\n \n-    public AbstractThrowableAssert<?,? extends Throwable> assertExceptionForLogMessage( String message )\n+    public AbstractThrowableAssert<?, ? extends Throwable> assertExceptionForLogMessage(String message)\n     {\n         isNotNull();\n-        haveMessage( message );\n+        haveMessage(message);\n         var logCall = actual.getLogCalls().stream()\n-                .filter( call -> matchedLogger( call ) && matchedLevel( call ) && matchedMessage( message, call ) ).findFirst();\n-        if ( logCall.isEmpty() )\n+          .filter(call -> matchedLogger(call) && matchedLevel(call) && matchedMessage(message, call)).findFirst();\n+        if (logCall.isEmpty())\n         {\n-            failWithMessage( \"Expected log call with message `%s` not found in:%n%s.\", message, actual.serialize() );\n+            failWithMessage(\"Expected log call with message `%s` not found in:%n%s.\", message, actual.serialize());\n         }\n-        return assertThat( logCall.get().getThrowable() );\n+        return assertThat(logCall.get().getThrowable());\n     }\n \n-    public LogAssert containsMessageWithException( String message, Throwable t )\n+    public LogAssert containsMessageWithException(String message, Throwable t)\n     {\n         isNotNull();\n-        requireNonNull( t );\n-        if ( !haveMessageWithException( message, t ) )\n+        requireNonNull(t);\n+        if (!haveMessageWithException(message, t))\n         {\n-            failWithMessage( \"Expected log to contain message `%s` with exception: `%s`. But no matches found in:%n%s\",\n-                    message, stringify( t ), actual.serialize() );\n+            failWithMessage(\"Expected log to contain message `%s` with exception: `%s`. But no matches found in:%n%s\",\n+              message, stringify(t), actual.serialize());\n         }\n         return this;\n     }\n \n-    public LogAssert containsException( Throwable t )\n+    public LogAssert containsException(Throwable t)\n     {\n-        requireNonNull( t );\n+        requireNonNull(t);\n         isNotNull();\n-        if ( actual.getLogCalls().stream().noneMatch( call -> matchedLogger( call ) &&\n-                                                    matchedLevel( call ) &&\n-                                                    t.equals( call.getThrowable() ) ) )\n+        if (actual.getLogCalls().stream().noneMatch(call -> matchedLogger(call) &&\n+          matchedLevel(call) &&\n+          t.equals(call.getThrowable())))\n         {\n-            failWithMessage( \"Expected log to contain exception: `%s`. But no matches found in:%n%s\",\n-                    stringify( t ), actual.serialize() );\n+            failWithMessage(\"Expected log to contain exception: `%s`. But no matches found in:%n%s\",\n+              stringify(t), actual.serialize());\n         }\n         return this;\n     }\n \n-    private boolean haveMessageWithException( String message, Throwable t )\n+    private boolean haveMessageWithException(String message, Throwable t)\n     {\n         return actual.getLogCalls().stream().anyMatch(\n-                call -> matchedLogger( call ) && matchedLevel( call ) &&\n-                        t.equals( call.getThrowable() ) && matchedMessage( message, call ) );\n+          call -> matchedLogger(call) && matchedLevel(call) &&\n+            t.equals(call.getThrowable()) && matchedMessage(message, call));\n     }\n \n-    private boolean haveMessageWithArguments( String message, Object... arguments )\n+    private boolean haveMessageWithArguments(String message, Object... arguments)\n     {\n         var logCalls = actual.getLogCalls();\n-        return logCalls.stream().anyMatch( call -> matchedLogger( call )\n-                && matchedLevel( call ) && Arrays.equals( call.getArguments(), arguments ) &&\n-                matchedMessage( message, call ) );\n+        return logCalls.stream().anyMatch(call -> matchedLogger(call)\n+          && matchedLevel(call) && Arrays.equals(call.getArguments(), arguments) &&\n+          matchedMessage(message, call));\n     }\n \n-    private boolean haveMessage( String message )\n+    private boolean haveMessage(String message)\n     {\n         var logCalls = actual.getLogCalls();\n-        return logCalls.stream().anyMatch( call -> matchedLogger( call ) &&\n-                matchedLevel( call ) &&\n-                matchedMessage( message, call ) );\n+        return logCalls.stream().anyMatch(call -> matchedLogger(call) &&\n+          matchedLevel(call) &&\n+          matchedMessage(message, call));\n     }\n \n-    private long messageMatchCount( String message )\n+    private long messageMatchCount(String message)\n     {\n         var logCalls = actual.getLogCalls();\n-        return logCalls.stream().filter( call -> matchedLogger( call ) &&\n-                matchedLevel( call ) &&\n-                matchedMessage( message, call ) ).count();\n+        return logCalls.stream().filter(call -> matchedLogger(call) &&\n+          matchedLevel(call) &&\n+          matchedMessage(message, call)).count();\n     }\n \n-    private static boolean matchedMessage( String message, LogCall call )\n+    private static boolean matchedMessage(String message, LogCall call)\n     {\n-        return call.getMessage().contains( message ) || call.toLogLikeString().contains( message );\n+        return call.getMessage().contains(message) || call.toLogLikeString().contains(message);\n     }\n \n-    private boolean matchedLogger( LogCall call )\n+    private boolean matchedLogger(LogCall call)\n     {\n-        return loggerClazz == null || loggerClazz.getName().equals( call.getContext() );\n+        return loggerClazz == null || loggerClazz.getName().equals(call.getContext());\n     }\n \n-    private boolean matchedLevel( LogCall call )\n+    private boolean matchedLevel(LogCall call)\n     {\n         return logLevel == null || logLevel == call.getLevel();\n     }\n",
            "diff_size": 76
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}