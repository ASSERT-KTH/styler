{
    "project_name": "wso2-attic-commons",
    "error_id": "105",
    "information": {
        "errors": [
            {
                "line": "118",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 123).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "        // resulting cursor, or for the lifetime of the transaction. So really, an UPDATE of the row\n        // is a much safer alternative.\n        String processType = new QName(_hobj.getProcess().getTypeNamespace(), _hobj.getProcess().getTypeName()).toString();\n        Query lockQry = getSession().createQuery(LOCK_SELECTORS);\n        lockQry.setString(0, key == null ? null : key.toCanonicalString());\n        lockQry.setString(1, processType);",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/105/CorrelatorDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/105/CorrelatorDaoImpl.java\nindex 19ef67c8afa..5a9b08564c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/105/CorrelatorDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/105/CorrelatorDaoImpl.java\n@@ -115,8 +115,8 @@ class CorrelatorDaoImpl extends HibernateDao implements CorrelatorDAO {\n         // In particular it is not clear how long the lock should be held, for the lifetime of the \n         // resulting cursor, or for the lifetime of the transaction. So really, an UPDATE of the row\n         // is a much safer alternative.\n-        String processType = new QName(_hobj.getProcess().getTypeNamespace(), _hobj.getProcess().getTypeName()).toString();\n-        Query lockQry = getSession().createQuery(LOCK_SELECTORS);\n+        String processType = new QName ( _hobj .getProcess().getTypeNamespace(),_hobj.getProcess\n+        ().getTypeName()).toString();QuerylockQry lockQry = getSession().createQuery(LOCK_SELECTORS);\n         lockQry.setString(0, key == null ? null : key.toCanonicalString());\n         lockQry.setString(1, processType);\n         if (lockQry.executeUpdate() > 0) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/105/CorrelatorDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/105/CorrelatorDaoImpl.java\nindex 19ef67c8afa..504ab285750 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/105/CorrelatorDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/105/CorrelatorDaoImpl.java\n@@ -16,6 +16,7 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n+\n package org.apache.ode.daohib.bpel;\n \n import java.util.ArrayList;\n@@ -47,191 +48,202 @@ import javax.xml.namespace.QName;\n  */\n class CorrelatorDaoImpl extends HibernateDao implements CorrelatorDAO {\n \n-    /** \n-     * Note: the hk.messageExchange=null is a hack to get around a Hibernate bug where the query\n-     * does not properly discriminate for the proper subclass.\n-     */\n-    private static final String QRY_MESSAGE = \" where this.correlationKey = ?\".intern();\n-\n-    /** filter for finding a matching selector. */\n-    private static final String FLTR_SELECTORS = (\"from \" + HCorrelatorSelector.class.getName()\n-            + \" hs where hs.correlationKey = ? and hs.processType = ? and hs.correlator.correlatorId = ?\").intern();\n-\n-    private static final String LOCK_SELECTORS = \"update from \" + HCorrelatorSelector.class.getName() +\n-        \" set lock = lock+1 where correlationKey = ? and processType = ?\".intern();\n-    \n-    /** Query for removing routes. */\n-    private static final String QRY_DELSELECTORS = \"delete from \" + HCorrelatorSelector.class.getName()\n-            + \" where groupId = ? and instance = ?\".intern();\n-\n-    private static final String QRY_DELMESSAGES = \"delete from \" + HCorrelatorMessage.class.getName()\n-            + \" where messageExchange = ?\".intern();\n-\n-    static Log __log = LogFactory.getLog(CorrelatorDaoImpl.class);\n-\n-    private HCorrelator _hobj;\n-\n-    public CorrelatorDaoImpl(SessionManager sm, HCorrelator hobj) {\n-        super(sm, hobj);\n-        entering(\"CorrelatorDaoImpl.CorrelatorDaoImpl\");\n-        _hobj = hobj;\n-    }\n-\n-    public MessageExchangeDAO dequeueMessage(CorrelationKey key) {\n-        entering(\"CorrelatorDaoImpl.dequeueMessage\");\n-        String hdr = \"dequeueMessage(\" + key + \"): \";\n-        __log.debug(hdr);\n-\n-        Query qry = getSession().createFilter(_hobj.getMessageCorrelations(), QRY_MESSAGE);\n-        qry.setString(0, key.toCanonicalString());\n-        \n-        // We really should consider the possibility of multiple messages matching a criteria.\n-        // When the message is handled, its not too convenient to attempt to determine if the\n-        // received message conflicts with one already received.\n-        Iterator mcors = qry.iterate();\n-        try {\n-            if (!mcors.hasNext()) {\n-                __log.debug(hdr + \"did not find a MESSAGE entry.\");\n-                return null;\n-            }\n-    \n-            HCorrelatorMessage mcor = (HCorrelatorMessage) mcors.next();\n-            __log.debug(hdr + \"found MESSAGE entry \" + mcor.getMessageExchange());\n-            removeEntries(mcor.getMessageExchange());\n-            return new MessageExchangeDaoImpl(_sm, mcor.getMessageExchange());\n-        } finally {\n-            Hibernate.close(mcors);\n-        }\n-    }\n-\n-    public MessageRouteDAO findRoute(CorrelationKey key) {\n-        entering(\"CorrelatorDaoImpl.findRoute\");\n-        String hdr = \"findRoute(key=\" + key + \"): \";\n-        if (__log.isDebugEnabled())\n-            __log.debug(hdr);\n-\n-        // Make sure we obtain a lock for the selector we want to find. Note that a SELECT FOR UPDATE\n-        // will not necessarily work, as different DB vendors attach a different meaning to this syntax.\n-        // In particular it is not clear how long the lock should be held, for the lifetime of the \n-        // resulting cursor, or for the lifetime of the transaction. So really, an UPDATE of the row\n-        // is a much safer alternative.\n-        String processType = new QName(_hobj.getProcess().getTypeNamespace(), _hobj.getProcess().getTypeName()).toString();\n-        Query lockQry = getSession().createQuery(LOCK_SELECTORS);\n-        lockQry.setString(0, key == null ? null : key.toCanonicalString());\n-        lockQry.setString(1, processType);\n-        if (lockQry.executeUpdate() > 0) {\n-            \n-            Query q = getSession().createQuery(FLTR_SELECTORS);\n-            q.setString(0, key == null ? null : key.toCanonicalString());\n-            q.setString(1, processType);\n-            q.setString(2, _hobj.getCorrelatorId());\n-            q.setLockMode(\"hs\", LockMode.UPGRADE);\n-\n-            HCorrelatorSelector selector;\n-            try {\n-                selector = (HCorrelatorSelector) q.uniqueResult();\n-            } catch (Exception ex) {\n-                __log.debug(\"Strange, could not get a unique result for findRoute, trying to iterate instead.\");\n-\n-                Iterator i = q.iterate();\n-                if (i.hasNext()) selector = (HCorrelatorSelector) i.next();\n-                else selector = null;\n-                Hibernate.close(i);\n-            }\n-    \n-            __log.debug(hdr + \"found \" + selector);\n-            return selector == null ? null : new MessageRouteDaoImpl(_sm, selector);\n-        } \n-        \n+  /**\n+   * Note: the hk.messageExchange=null is a hack to get around a Hibernate bug where the query\n+   * does not properly discriminate for the proper subclass.\n+   */\n+  private static final String QRY_MESSAGE = \" where this.correlationKey = ?\".intern();\n+\n+  /**\n+   * filter for finding a matching selector.\n+   */\n+  private static final String FLTR_SELECTORS = (\"from \" + HCorrelatorSelector.class.getName()\n+    + \" hs where hs.correlationKey = ? and hs.processType = ? and hs.correlator.correlatorId = ?\").intern();\n+\n+  private static final String LOCK_SELECTORS = \"update from \" + HCorrelatorSelector.class.getName() +\n+    \" set lock = lock+1 where correlationKey = ? and processType = ?\".intern();\n+\n+  /**\n+   * Query for removing routes.\n+   */\n+  private static final String QRY_DELSELECTORS = \"delete from \" + HCorrelatorSelector.class.getName()\n+    + \" where groupId = ? and instance = ?\".intern();\n+\n+  private static final String QRY_DELMESSAGES = \"delete from \" + HCorrelatorMessage.class.getName()\n+    + \" where messageExchange = ?\".intern();\n+\n+  static Log __log = LogFactory.getLog(CorrelatorDaoImpl.class);\n+\n+  private HCorrelator _hobj;\n+\n+  public CorrelatorDaoImpl(SessionManager sm, HCorrelator hobj) {\n+    super(sm, hobj);\n+    entering(\"CorrelatorDaoImpl.CorrelatorDaoImpl\");\n+    _hobj = hobj;\n+  }\n+\n+  public MessageExchangeDAO dequeueMessage(CorrelationKey key) {\n+    entering(\"CorrelatorDaoImpl.dequeueMessage\");\n+    String hdr = \"dequeueMessage(\" + key + \"): \";\n+    __log.debug(hdr);\n+\n+    Query qry = getSession().createFilter(_hobj.getMessageCorrelations(), QRY_MESSAGE);\n+    qry.setString(0, key.toCanonicalString());\n+\n+    // We really should consider the possibility of multiple messages matching a criteria.\n+    // When the message is handled, its not too convenient to attempt to determine if the\n+    // received message conflicts with one already received.\n+    Iterator mcors = qry.iterate();\n+    try {\n+      if (!mcors.hasNext()) {\n+        __log.debug(hdr + \"did not find a MESSAGE entry.\");\n         return null;\n+      }\n+\n+      HCorrelatorMessage mcor = (HCorrelatorMessage) mcors.next();\n+      __log.debug(hdr + \"found MESSAGE entry \" + mcor.getMessageExchange());\n+      removeEntries(mcor.getMessageExchange());\n+      return new MessageExchangeDaoImpl(_sm, mcor.getMessageExchange());\n+    } finally {\n+      Hibernate.close(mcors);\n     }\n+  }\n \n-    public void enqueueMessage(MessageExchangeDAO mex, CorrelationKey[] correlationKeys) {\n-        entering(\"CorrelatorDaoImpl.enqueueMessage\");\n-        String[] keys = canonifyKeys(correlationKeys);\n-        String hdr = \"enqueueMessage(mex=\" + ((MessageExchangeDaoImpl) mex)._hobj.getId() + \" keys=\"\n-                + CollectionUtils.makeCollection(ArrayList.class, keys) + \"): \";\n-\n-        if (__log.isDebugEnabled())\n-            __log.debug(hdr);\n-\n-        for (String key : keys) {\n-            HCorrelatorMessage mcor = new HCorrelatorMessage();\n-            mcor.setCorrelator(_hobj);\n-            mcor.setCreated(new Date());\n-            mcor.setCorrelationKey(key);\n-            mcor.setMessageExchange((HMessageExchange) ((MessageExchangeDaoImpl) mex)._hobj);\n-            getSession().save(mcor);\n-\n-            if (__log.isDebugEnabled())\n-                __log.debug(hdr + \"saved \" + mcor);\n-        }\n-\n+  public MessageRouteDAO findRoute(CorrelationKey key) {\n+    entering(\"CorrelatorDaoImpl.findRoute\");\n+    String hdr = \"findRoute(key=\" + key + \"): \";\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(hdr);\n     }\n \n-    private String[] canonifyKeys(CorrelationKey[] keys) {\n-        String[] ret = new String[keys.length];\n-        for (int i = 0; i < ret.length; ++i) {\n-            ret[i] = keys[i].toCanonicalString();\n+    // Make sure we obtain a lock for the selector we want to find. Note that a SELECT FOR UPDATE\n+    // will not necessarily work, as different DB vendors attach a different meaning to this syntax.\n+    // In particular it is not clear how long the lock should be held, for the lifetime of the\n+    // resulting cursor, or for the lifetime of the transaction. So really, an UPDATE of the row\n+    // is a much safer alternative.\n+    String processType = new QName(_hobj.getProcess().getTypeNamespace(), _hobj.getProcess().getTypeName()).toString();\n+    Query lockQry = getSession().createQuery(LOCK_SELECTORS);\n+    lockQry.setString(0, key == null ? null : key.toCanonicalString());\n+    lockQry.setString(1, processType);\n+    if (lockQry.executeUpdate() > 0) {\n+\n+      Query q = getSession().createQuery(FLTR_SELECTORS);\n+      q.setString(0, key == null ? null : key.toCanonicalString());\n+      q.setString(1, processType);\n+      q.setString(2, _hobj.getCorrelatorId());\n+      q.setLockMode(\"hs\", LockMode.UPGRADE);\n+\n+      HCorrelatorSelector selector;\n+      try {\n+        selector = (HCorrelatorSelector) q.uniqueResult();\n+      } catch (Exception ex) {\n+        __log.debug(\"Strange, could not get a unique result for findRoute, trying to iterate instead.\");\n+\n+        Iterator i = q.iterate();\n+        if (i.hasNext()) {\n+          selector = (HCorrelatorSelector) i.next();\n+        } else {\n+          selector = null;\n         }\n-        return ret;\n+        Hibernate.close(i);\n+      }\n+\n+      __log.debug(hdr + \"found \" + selector);\n+      return selector == null ? null : new MessageRouteDaoImpl(_sm, selector);\n     }\n \n-    public void addRoute(String routeGroupId, ProcessInstanceDAO target, int idx, CorrelationKey correlationKey) {\n-        entering(\"CorrelatorDaoImpl.addRoute\");\n-        String hdr = \"addRoute(\" + routeGroupId + \", iid=\" + target.getInstanceId() + \", idx=\" + idx + \", ckey=\"\n-                + correlationKey + \"): \";\n-\n-        __log.debug(hdr);\n-        HCorrelatorSelector hsel = new HCorrelatorSelector();\n-        hsel.setGroupId(routeGroupId);\n-        hsel.setIndex(idx);\n-        hsel.setLock(0);\n-        hsel.setCorrelationKey(correlationKey.toCanonicalString());\n-        hsel.setInstance((HProcessInstance) ((ProcessInstanceDaoImpl) target).getHibernateObj());\n-        hsel.setProcessType(target.getProcess().getType().toString());\n-        hsel.setCorrelator(_hobj);\n-        hsel.setCreated(new Date());\n-//        _hobj.addSelector(hsel);\n-        getSession().save(hsel);\n+    return null;\n+  }\n \n-        __log.debug(hdr + \"saved \" + hsel);\n-    }\n+  public void enqueueMessage(MessageExchangeDAO mex, CorrelationKey[] correlationKeys) {\n+    entering(\"CorrelatorDaoImpl.enqueueMessage\");\n+    String[] keys = canonifyKeys(correlationKeys);\n+    String hdr = \"enqueueMessage(mex=\" + ((MessageExchangeDaoImpl) mex)._hobj.getId() + \" keys=\"\n+      + CollectionUtils.makeCollection(ArrayList.class, keys) + \"): \";\n \n-    public boolean checkRoute(CorrelationKey ckey) {\n-        entering(\"CorrelatorDaoImpl.checkRoute\");\n-        Query lockQry = getSession().createQuery(LOCK_SELECTORS);\n-        lockQry.setString(\"ckey\", ckey == null ? null : ckey.toCanonicalString());\n-        lockQry.setEntity(\"corr\",_hobj);\n-        lockQry.setReadOnly(true);\n-        return lockQry.list().isEmpty();\n-        \n-    }\n-    public String getCorrelatorId() {\n-        return _hobj.getCorrelatorId();\n+    if (__log.isDebugEnabled()) {\n+      __log.debug(hdr);\n     }\n \n-    public void removeRoutes(String routeGroupId, ProcessInstanceDAO target) {\n-        entering(\"CorrelatorDaoImpl.removeRoutes\");\n-        String hdr = \"removeRoutes(\" + routeGroupId + \", iid=\" + target.getInstanceId() + \"): \";\n-        __log.debug(hdr);\n-        Query q = getSession().createQuery(QRY_DELSELECTORS);\n-        q.setString(0, routeGroupId); // groupId\n-        q.setEntity(1, ((ProcessInstanceDaoImpl) target).getHibernateObj()); // instance\n-        int updates = q.executeUpdate();\n-        __log.debug(hdr + \"deleted \" + updates + \" rows\");\n-\n+    for (String key : keys) {\n+      HCorrelatorMessage mcor = new HCorrelatorMessage();\n+      mcor.setCorrelator(_hobj);\n+      mcor.setCreated(new Date());\n+      mcor.setCorrelationKey(key);\n+      mcor.setMessageExchange((HMessageExchange) ((MessageExchangeDaoImpl) mex)._hobj);\n+      getSession().save(mcor);\n+\n+      if (__log.isDebugEnabled()) {\n+        __log.debug(hdr + \"saved \" + mcor);\n+      }\n     }\n \n-    public void removeEntries(HMessageExchange mex) {\n-        entering(\"CorrelatorDaoImpl.removeEntries\");\n-        String hdr = \"removeEntries(\" + mex + \"): \";\n-        __log.debug(hdr);\n+  }\n \n-        Query q = getSession().createQuery(QRY_DELMESSAGES);\n-        q.setEntity(0, mex); // messageExchange\n-        int numMods = q.executeUpdate();\n-        __log.debug(hdr + \" deleted \" + numMods + \" rows\");\n+  private String[] canonifyKeys(CorrelationKey[] keys) {\n+    String[] ret = new String[keys.length];\n+    for (int i = 0; i < ret.length; ++i) {\n+      ret[i] = keys[i].toCanonicalString();\n     }\n+    return ret;\n+  }\n+\n+  public void addRoute(String routeGroupId, ProcessInstanceDAO target, int idx, CorrelationKey correlationKey) {\n+    entering(\"CorrelatorDaoImpl.addRoute\");\n+    String hdr = \"addRoute(\" + routeGroupId + \", iid=\" + target.getInstanceId() + \", idx=\" + idx + \", ckey=\"\n+      + correlationKey + \"): \";\n+\n+    __log.debug(hdr);\n+    HCorrelatorSelector hsel = new HCorrelatorSelector();\n+    hsel.setGroupId(routeGroupId);\n+    hsel.setIndex(idx);\n+    hsel.setLock(0);\n+    hsel.setCorrelationKey(correlationKey.toCanonicalString());\n+    hsel.setInstance((HProcessInstance) ((ProcessInstanceDaoImpl) target).getHibernateObj());\n+    hsel.setProcessType(target.getProcess().getType().toString());\n+    hsel.setCorrelator(_hobj);\n+    hsel.setCreated(new Date());\n+//        _hobj.addSelector(hsel);\n+    getSession().save(hsel);\n+\n+    __log.debug(hdr + \"saved \" + hsel);\n+  }\n+\n+  public boolean checkRoute(CorrelationKey ckey) {\n+    entering(\"CorrelatorDaoImpl.checkRoute\");\n+    Query lockQry = getSession().createQuery(LOCK_SELECTORS);\n+    lockQry.setString(\"ckey\", ckey == null ? null : ckey.toCanonicalString());\n+    lockQry.setEntity(\"corr\", _hobj);\n+    lockQry.setReadOnly(true);\n+    return lockQry.list().isEmpty();\n+\n+  }\n+\n+  public String getCorrelatorId() {\n+    return _hobj.getCorrelatorId();\n+  }\n+\n+  public void removeRoutes(String routeGroupId, ProcessInstanceDAO target) {\n+    entering(\"CorrelatorDaoImpl.removeRoutes\");\n+    String hdr = \"removeRoutes(\" + routeGroupId + \", iid=\" + target.getInstanceId() + \"): \";\n+    __log.debug(hdr);\n+    Query q = getSession().createQuery(QRY_DELSELECTORS);\n+    q.setString(0, routeGroupId); // groupId\n+    q.setEntity(1, ((ProcessInstanceDaoImpl) target).getHibernateObj()); // instance\n+    int updates = q.executeUpdate();\n+    __log.debug(hdr + \"deleted \" + updates + \" rows\");\n+\n+  }\n+\n+  public void removeEntries(HMessageExchange mex) {\n+    entering(\"CorrelatorDaoImpl.removeEntries\");\n+    String hdr = \"removeEntries(\" + mex + \"): \";\n+    __log.debug(hdr);\n+\n+    Query q = getSession().createQuery(QRY_DELMESSAGES);\n+    q.setEntity(0, mex); // messageExchange\n+    int numMods = q.executeUpdate();\n+    __log.debug(hdr + \" deleted \" + numMods + \" rows\");\n+  }\n \n }\n",
            "diff_size": 272
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/105/CorrelatorDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/105/CorrelatorDaoImpl.java\nindex 19ef67c8afa..237d1bc8aa3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/105/CorrelatorDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/105/CorrelatorDaoImpl.java\n@@ -61,7 +61,7 @@ class CorrelatorDaoImpl extends HibernateDao implements CorrelatorDAO {\n         \" set lock = lock+1 where correlationKey = ? and processType = ?\".intern();\n     \n     /** Query for removing routes. */\n-    private static final String QRY_DELSELECTORS = \"delete from \" + HCorrelatorSelector.class.getName()\n+private static final String QRY_DELSELECTORS = \"delete from \" + HCorrelatorSelector.class.getName()\n             + \" where groupId = ? and instance = ?\".intern();\n \n     private static final String QRY_DELMESSAGES = \"delete from \" + HCorrelatorMessage.class.getName()\n@@ -120,8 +120,7 @@ class CorrelatorDaoImpl extends HibernateDao implements CorrelatorDAO {\n         lockQry.setString(0, key == null ? null : key.toCanonicalString());\n         lockQry.setString(1, processType);\n         if (lockQry.executeUpdate() > 0) {\n-            \n-            Query q = getSession().createQuery(FLTR_SELECTORS);\n+    Query q = getSession().createQuery(FLTR_SELECTORS);\n             q.setString(0, key == null ? null : key.toCanonicalString());\n             q.setString(1, processType);\n             q.setString(2, _hobj.getCorrelatorId());\n@@ -134,16 +133,16 @@ class CorrelatorDaoImpl extends HibernateDao implements CorrelatorDAO {\n                 __log.debug(\"Strange, could not get a unique result for findRoute, trying to iterate instead.\");\n \n                 Iterator i = q.iterate();\n-                if (i.hasNext()) selector = (HCorrelatorSelector) i.next();\n+                if (i.hasNext())\n+    selector = (HCorrelatorSelector) i.next();\n                 else selector = null;\n                 Hibernate.close(i);\n             }\n     \n             __log.debug(hdr + \"found \" + selector);\n             return selector == null ? null : new MessageRouteDaoImpl(_sm, selector);\n-        } \n-        \n-        return null;\n+        }\n+return null;\n     }\n \n     public void enqueueMessage(MessageExchangeDAO mex, CorrelationKey[] correlationKeys) {\n@@ -181,8 +180,7 @@ class CorrelatorDaoImpl extends HibernateDao implements CorrelatorDAO {\n         entering(\"CorrelatorDaoImpl.addRoute\");\n         String hdr = \"addRoute(\" + routeGroupId + \", iid=\" + target.getInstanceId() + \", idx=\" + idx + \", ckey=\"\n                 + correlationKey + \"): \";\n-\n-        __log.debug(hdr);\n+__log.debug(hdr);\n         HCorrelatorSelector hsel = new HCorrelatorSelector();\n         hsel.setGroupId(routeGroupId);\n         hsel.setIndex(idx);\n@@ -234,4 +232,4 @@ class CorrelatorDaoImpl extends HibernateDao implements CorrelatorDAO {\n         __log.debug(hdr + \" deleted \" + numMods + \" rows\");\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "118",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 123).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/105/CorrelatorDaoImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/105/CorrelatorDaoImpl.java\nindex 19ef67c8afa..5a9b08564c8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/105/CorrelatorDaoImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/105/CorrelatorDaoImpl.java\n@@ -115,8 +115,8 @@ class CorrelatorDaoImpl extends HibernateDao implements CorrelatorDAO {\n         // In particular it is not clear how long the lock should be held, for the lifetime of the \n         // resulting cursor, or for the lifetime of the transaction. So really, an UPDATE of the row\n         // is a much safer alternative.\n-        String processType = new QName(_hobj.getProcess().getTypeNamespace(), _hobj.getProcess().getTypeName()).toString();\n-        Query lockQry = getSession().createQuery(LOCK_SELECTORS);\n+        String processType = new QName ( _hobj .getProcess().getTypeNamespace(),_hobj.getProcess\n+        ().getTypeName()).toString();QuerylockQry lockQry = getSession().createQuery(LOCK_SELECTORS);\n         lockQry.setString(0, key == null ? null : key.toCanonicalString());\n         lockQry.setString(1, processType);\n         if (lockQry.executeUpdate() > 0) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}