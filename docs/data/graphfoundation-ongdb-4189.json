{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4189",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "385",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "385",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "386",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "131",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "417",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "446",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "458",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "464",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "474",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "476",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "481",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "494",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "498",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "512",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "524",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "527",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "529",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "536",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "538",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "538",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "542",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "550",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "558",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "560",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "564",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "564",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "566",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "578",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "578",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "594",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "599",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "605",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "610",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "616",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "625",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "631",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "631",
                    "column": "121",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "634",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "642",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "642",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "646",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "653",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "653",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "658",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "664",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "664",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "666",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "671",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "674",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "679",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "695",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "695",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "699",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "701",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "711",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "713",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "713",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "717",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "740",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "740",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "764",
                    "column": "96",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "766",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "766",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "770",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "770",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "791",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "793",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "807",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "807",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "841",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "846",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "846",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "851",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "865",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "875",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "875",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "898",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "900",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "919",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "919",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "926",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "926",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "926",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "928",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "934",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "934",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "940",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "947",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "950",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "950",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "955",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "984",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "984",
                    "column": "103",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "988",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "988",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "991",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "991",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "998",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "998",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1019",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1019",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1024",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1024",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1024",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1032",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1032",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1052",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1052",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1078",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1078",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1094",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1094",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1096",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1096",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1106",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "1106",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1106",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1124",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1124",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1126",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1126",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1131",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1131",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1152",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "1152",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4189/SeekCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4189/SeekCursor.java\nindex 3beba2bfb4e..e08bbd182f0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4189/SeekCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4189/SeekCursor.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.io.IOException;\n@@ -139,1056 +140,1040 @@ import static org.neo4j.index.internal.gbptree.TreeNode.Type.LEAF;\n  * suddenly another key when he goes there he knows that he could have missed some keys and he needs to go back until\n  * he find the place where he left off, K4.\n  */\n-class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hit<KEY,VALUE>\n+class SeekCursor<KEY, VALUE> implements RawCursor<Hit<KEY, VALUE>, IOException>, Hit<KEY, VALUE>\n {\n-    static final int DEFAULT_MAX_READ_AHEAD = 20;\n-\n-    /**\n-     * Cursor for reading from tree nodes and also will be moved around when following pointers.\n-     */\n-    private final PageCursor cursor;\n-\n-    /**\n-     * Key instances to use for reading keys from current node.\n-     */\n-    private final KEY[] mutableKeys;\n-\n-    /**\n-     * Value instances to use for reading values from current node.\n-     */\n-    private final VALUE[] mutableValues;\n-\n-    /**\n-     * Index into {@link #mutableKeys}/{@link #mutableValues}, i.e. which key/value to consider as result next.\n-     */\n-    private int cachedIndex;\n-\n-    /**\n-     * Number of keys/values read into {@link #mutableKeys} and {@link #mutableValues} from the most recently read batch.\n-     */\n-    private int cachedLength;\n-\n-    /**\n-     * Initially set to {@code false} after a {@link #readAndValidateNextKeyValueBatch()} and will become {@code true}\n-     * as soon as coming across a key which is a result key. From that point on and until the next batch read,\n-     * having this a {@code true} will allow fewer comparisons to figure out whether or not a key is a result key.\n-     */\n-    private boolean resultOnTrack;\n-\n-    /**\n-     * Provided when constructing the {@link SeekCursor}, marks the start (inclusive) of the key range to seek.\n-     * Comparison with {@link #toExclusive} decide if seeking forwards or backwards.\n-     */\n-    private final KEY fromInclusive;\n-\n-    /**\n-     * Provided when constructing the {@link SeekCursor}, marks the end (exclusive) of the key range to seek.\n-     * Comparison with {@link #fromInclusive} decide if seeking forwards or backwards.\n-     */\n-    private final KEY toExclusive;\n-\n-    /**\n-     * True if seeker is performing an exact match lookup, {@link #toExclusive} will then be treated as inclusive.\n-     */\n-    private final boolean exactMatch;\n-\n-    /**\n-     * {@link Layout} instance used to perform some functions around keys, like copying and comparing.\n-     */\n-    private final Layout<KEY,VALUE> layout;\n-\n-    /**\n-     * Logic for reading data from tree nodes.\n-     */\n-    private final TreeNode<KEY,VALUE> bTreeNode;\n-\n-    /**\n-     * Contains the highest returned key, i.e. from the last call to {@link #next()} returning {@code true}.\n-     */\n-    private final KEY prevKey;\n-\n-    /**\n-     * Retrieves latest generation, only used when noticing that reading given a stale generation.\n-     */\n-    private final LongSupplier generationSupplier;\n-\n-    /**\n-     * Retrieves latest root id and generation, moving the {@link PageCursor} to the root id and returning\n-     * the root generation. This is used when a query is re-traversing from the root, due to e.g. ending up\n-     * on a reused tree node and not knowing how to proceed from there.\n-     */\n-    private final RootCatchup rootCatchup;\n-\n-    /**\n-     * Whether or not some result has been found, i.e. if {@code true} if there have been no call to\n-     * {@link #next()} returning {@code true}, otherwise {@code false}. If {@code false} then value in\n-     * {@link #prevKey} can be used and trusted.\n-     */\n-    private boolean first = true;\n-\n-    /**\n-     * Current stable generation from this seek cursor's POV. Can be refreshed using {@link #generationSupplier}.\n-     */\n-    private long stableGeneration;\n-\n-    /**\n-     * Current stable generation from this seek cursor's POV. Can be refreshed using {@link #generationSupplier}.\n-     */\n-    private long unstableGeneration;\n-\n-    // *** Data structures for the current b-tree node ***\n-\n-    /**\n-     * Position in current node, this is used when scanning the values of a leaf, each call to {@link #next()}\n-     * incrementing this position and reading the next key/value.\n-     */\n-    private int pos;\n-\n-    /**\n-    * Number of keys in the current leaf, this value is cached and only re-read every time there's\n-    * a {@link PageCursor#shouldRetry() retry due to concurrent write}.\n-    */\n-    private int keyCount;\n-\n-    /**\n-     * Set if the position of the last returned key need to be found again.\n-     */\n-    private boolean concurrentWriteHappened;\n-\n-    /**\n-     * {@link TreeNode#generation(PageCursor) generation} of the current leaf node, read every call to {@link #next()}.\n-     */\n-    private long currentNodeGeneration;\n-\n-    /**\n-     * Generation of the pointer which was last followed, either a\n-     * {@link TreeNode#rightSibling(PageCursor, long, long) sibling} during scan or otherwise following\n-     * {@link TreeNode#successor(PageCursor, long, long) successor} or\n-     * {@link TreeNode#childAt(PageCursor, int, long, long) child}.\n-     */\n-    private long lastFollowedPointerGeneration;\n-\n-    /**\n-     * Cached {@link TreeNode#generation(PageCursor) generation} of the current leaf node, read every time a pointer\n-     * is followed to a new node. Used to ensure that a node hasn't been reused between two calls to {@link #next()}.\n-     */\n-    private long expectedCurrentNodeGeneration;\n-\n-    /**\n-     * Decide if seeker is configured to seek forwards or backwards.\n-     * <p>\n-     * {@code true} if {@code layout.compare(fromInclusive, toExclusive) <= 0}, otherwise false.\n-     */\n-    private final boolean seekForward;\n-\n-    /**\n-     * Add to {@link #pos} to move this {@code SeekCursor} forward in the seek direction.\n-     */\n-    private final int stride;\n-\n-    /**\n-     * Set within should retry loop.\n-     * <p>\n-     * Is node a {@link TreeNode#NODE_TYPE_TREE_NODE} or something else?\n-     */\n-\n-    private byte nodeType;\n-    /**\n-     * Set within should retry loop.\n-     * <p>\n-     * Pointer to successor of node.\n-     */\n-    private long successor;\n-\n-    /**\n-     * Set within should retry loop.\n-     * <p>\n-     * Generation of successor pointer\n-     */\n-    private long successorGeneration;\n-\n-    /**\n-     * Set within should retry loop.\n-     * <p>\n-     * Is node internal or leaf?\n-     */\n-    private boolean isInternal;\n-\n-    /**\n-     * Set within should retry loop.\n-     * <p>\n-     * Used to store next child pointer to follow while traversing down the tree\n-     * or next sibling pointer to follow if traversing along the leaves.\n-     */\n-    private long pointerId;\n-\n-    /**\n-     * Set within should retry loop.\n-     * <p>\n-     * Generation of {@link #pointerId}.\n-     */\n-    private long pointerGeneration;\n-\n-    /**\n-     * Result from {@link KeySearch#search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n-     */\n-    private int searchResult;\n-\n-    // \u250c\u2500\u2500 Special variables for backwards seek \u2500\u2500\u2510\n-    // v                                          v\n-\n-    /**\n-     * Set within should retry loop.\n-     * <p>\n-     * Pointer to sibling opposite to seek direction. Only used when seeking backwards.\n-     */\n-    private long prevSiblingId;\n-\n-    /**\n-     * Set within should retry loop.\n-     * <p>\n-     * Generation of {@link #prevSiblingId}.\n-     */\n-    private long prevSiblingGeneration;\n-\n-    /**\n-     * Set by linked cursor scouting next sibling to go to when seeking backwards.\n-     * If first key when reading from next sibling node is not equal to this we\n-     * may have missed some keys that was moved passed us and we need to start\n-     * over from previous node.\n-     */\n-    private final KEY expectedFirstAfterGoToNext;\n-\n-    /**\n-     * Key on pos 0 if traversing forward, pos {@code keyCount - 1} if traversing backwards.\n-     * To be compared with {@link #expectedFirstAfterGoToNext}.\n-     */\n-    private final KEY firstKeyInNode;\n-\n-    /**\n-     * {@code true} to indicate that first key in node needs to be verified to ensure no keys\n-     * was moved passed us while we where changing nodes.\n-     */\n-    private boolean verifyExpectedFirstAfterGoToNext;\n-\n-    /**\n-     * Whether or not this seeker have been closed.\n-     */\n-    private boolean closed;\n-\n-    /**\n-     * Decorator for caught exceptions, adding information about which tree the exception relates to.\n-     */\n-    private final Consumer<Throwable> exceptionDecorator;\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    SeekCursor( PageCursor cursor, TreeNode<KEY,VALUE> bTreeNode, KEY fromInclusive, KEY toExclusive,\n-            Layout<KEY,VALUE> layout, long stableGeneration, long unstableGeneration, LongSupplier generationSupplier,\n-            RootCatchup rootCatchup, long lastFollowedPointerGeneration, Consumer<Throwable> exceptionDecorator, int maxReadAhead )\n-                    throws IOException\n+  static final int DEFAULT_MAX_READ_AHEAD = 20;\n+\n+  /**\n+   * Cursor for reading from tree nodes and also will be moved around when following pointers.\n+   */\n+  private final PageCursor cursor;\n+\n+  /**\n+   * Key instances to use for reading keys from current node.\n+   */\n+  private final KEY[] mutableKeys;\n+\n+  /**\n+   * Value instances to use for reading values from current node.\n+   */\n+  private final VALUE[] mutableValues;\n+\n+  /**\n+   * Index into {@link #mutableKeys}/{@link #mutableValues}, i.e. which key/value to consider as result next.\n+   */\n+  private int cachedIndex;\n+\n+  /**\n+   * Number of keys/values read into {@link #mutableKeys} and {@link #mutableValues} from the most recently read batch.\n+   */\n+  private int cachedLength;\n+\n+  /**\n+   * Initially set to {@code false} after a {@link #readAndValidateNextKeyValueBatch()} and will become {@code true}\n+   * as soon as coming across a key which is a result key. From that point on and until the next batch read,\n+   * having this a {@code true} will allow fewer comparisons to figure out whether or not a key is a result key.\n+   */\n+  private boolean resultOnTrack;\n+\n+  /**\n+   * Provided when constructing the {@link SeekCursor}, marks the start (inclusive) of the key range to seek.\n+   * Comparison with {@link #toExclusive} decide if seeking forwards or backwards.\n+   */\n+  private final KEY fromInclusive;\n+\n+  /**\n+   * Provided when constructing the {@link SeekCursor}, marks the end (exclusive) of the key range to seek.\n+   * Comparison with {@link #fromInclusive} decide if seeking forwards or backwards.\n+   */\n+  private final KEY toExclusive;\n+\n+  /**\n+   * True if seeker is performing an exact match lookup, {@link #toExclusive} will then be treated as inclusive.\n+   */\n+  private final boolean exactMatch;\n+\n+  /**\n+   * {@link Layout} instance used to perform some functions around keys, like copying and comparing.\n+   */\n+  private final Layout<KEY, VALUE> layout;\n+\n+  /**\n+   * Logic for reading data from tree nodes.\n+   */\n+  private final TreeNode<KEY, VALUE> bTreeNode;\n+\n+  /**\n+   * Contains the highest returned key, i.e. from the last call to {@link #next()} returning {@code true}.\n+   */\n+  private final KEY prevKey;\n+\n+  /**\n+   * Retrieves latest generation, only used when noticing that reading given a stale generation.\n+   */\n+  private final LongSupplier generationSupplier;\n+\n+  /**\n+   * Retrieves latest root id and generation, moving the {@link PageCursor} to the root id and returning\n+   * the root generation. This is used when a query is re-traversing from the root, due to e.g. ending up\n+   * on a reused tree node and not knowing how to proceed from there.\n+   */\n+  private final RootCatchup rootCatchup;\n+\n+  /**\n+   * Whether or not some result has been found, i.e. if {@code true} if there have been no call to\n+   * {@link #next()} returning {@code true}, otherwise {@code false}. If {@code false} then value in\n+   * {@link #prevKey} can be used and trusted.\n+   */\n+  private boolean first = true;\n+\n+  /**\n+   * Current stable generation from this seek cursor's POV. Can be refreshed using {@link #generationSupplier}.\n+   */\n+  private long stableGeneration;\n+\n+  /**\n+   * Current stable generation from this seek cursor's POV. Can be refreshed using {@link #generationSupplier}.\n+   */\n+  private long unstableGeneration;\n+\n+  // *** Data structures for the current b-tree node ***\n+\n+  /**\n+   * Position in current node, this is used when scanning the values of a leaf, each call to {@link #next()}\n+   * incrementing this position and reading the next key/value.\n+   */\n+  private int pos;\n+\n+  /**\n+   * Number of keys in the current leaf, this value is cached and only re-read every time there's\n+   * a {@link PageCursor#shouldRetry() retry due to concurrent write}.\n+   */\n+  private int keyCount;\n+\n+  /**\n+   * Set if the position of the last returned key need to be found again.\n+   */\n+  private boolean concurrentWriteHappened;\n+\n+  /**\n+   * {@link TreeNode#generation(PageCursor) generation} of the current leaf node, read every call to {@link #next()}.\n+   */\n+  private long currentNodeGeneration;\n+\n+  /**\n+   * Generation of the pointer which was last followed, either a\n+   * {@link TreeNode#rightSibling(PageCursor, long, long) sibling} during scan or otherwise following\n+   * {@link TreeNode#successor(PageCursor, long, long) successor} or\n+   * {@link TreeNode#childAt(PageCursor, int, long, long) child}.\n+   */\n+  private long lastFollowedPointerGeneration;\n+\n+  /**\n+   * Cached {@link TreeNode#generation(PageCursor) generation} of the current leaf node, read every time a pointer\n+   * is followed to a new node. Used to ensure that a node hasn't been reused between two calls to {@link #next()}.\n+   */\n+  private long expectedCurrentNodeGeneration;\n+\n+  /**\n+   * Decide if seeker is configured to seek forwards or backwards.\n+   * <p>\n+   * {@code true} if {@code layout.compare(fromInclusive, toExclusive) <= 0}, otherwise false.\n+   */\n+  private final boolean seekForward;\n+\n+  /**\n+   * Add to {@link #pos} to move this {@code SeekCursor} forward in the seek direction.\n+   */\n+  private final int stride;\n+\n+  /**\n+   * Set within should retry loop.\n+   * <p>\n+   * Is node a {@link TreeNode#NODE_TYPE_TREE_NODE} or something else?\n+   */\n+\n+  private byte nodeType;\n+  /**\n+   * Set within should retry loop.\n+   * <p>\n+   * Pointer to successor of node.\n+   */\n+  private long successor;\n+\n+  /**\n+   * Set within should retry loop.\n+   * <p>\n+   * Generation of successor pointer\n+   */\n+  private long successorGeneration;\n+\n+  /**\n+   * Set within should retry loop.\n+   * <p>\n+   * Is node internal or leaf?\n+   */\n+  private boolean isInternal;\n+\n+  /**\n+   * Set within should retry loop.\n+   * <p>\n+   * Used to store next child pointer to follow while traversing down the tree\n+   * or next sibling pointer to follow if traversing along the leaves.\n+   */\n+  private long pointerId;\n+\n+  /**\n+   * Set within should retry loop.\n+   * <p>\n+   * Generation of {@link #pointerId}.\n+   */\n+  private long pointerGeneration;\n+\n+  /**\n+   * Result from {@link KeySearch#search(PageCursor, TreeNode, TreeNode.Type, Object, Object, int)}.\n+   */\n+  private int searchResult;\n+\n+  // \u250c\u2500\u2500 Special variables for backwards seek \u2500\u2500\u2510\n+  // v                                          v\n+\n+  /**\n+   * Set within should retry loop.\n+   * <p>\n+   * Pointer to sibling opposite to seek direction. Only used when seeking backwards.\n+   */\n+  private long prevSiblingId;\n+\n+  /**\n+   * Set within should retry loop.\n+   * <p>\n+   * Generation of {@link #prevSiblingId}.\n+   */\n+  private long prevSiblingGeneration;\n+\n+  /**\n+   * Set by linked cursor scouting next sibling to go to when seeking backwards.\n+   * If first key when reading from next sibling node is not equal to this we\n+   * may have missed some keys that was moved passed us and we need to start\n+   * over from previous node.\n+   */\n+  private final KEY expectedFirstAfterGoToNext;\n+\n+  /**\n+   * Key on pos 0 if traversing forward, pos {@code keyCount - 1} if traversing backwards.\n+   * To be compared with {@link #expectedFirstAfterGoToNext}.\n+   */\n+  private final KEY firstKeyInNode;\n+\n+  /**\n+   * {@code true} to indicate that first key in node needs to be verified to ensure no keys\n+   * was moved passed us while we where changing nodes.\n+   */\n+  private boolean verifyExpectedFirstAfterGoToNext;\n+\n+  /**\n+   * Whether or not this seeker have been closed.\n+   */\n+  private boolean closed;\n+\n+  /**\n+   * Decorator for caught exceptions, adding information about which tree the exception relates to.\n+   */\n+  private final Consumer<Throwable> exceptionDecorator;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  SeekCursor(PageCursor cursor, TreeNode<KEY, VALUE> bTreeNode, KEY fromInclusive, KEY toExclusive,\n+             Layout<KEY, VALUE> layout, long stableGeneration, long unstableGeneration, LongSupplier generationSupplier,\n+             RootCatchup rootCatchup, long lastFollowedPointerGeneration, Consumer<Throwable> exceptionDecorator, int maxReadAhead)\n+      throws IOException\n+  {\n+    this.cursor = cursor;\n+    this.fromInclusive = fromInclusive;\n+    this.toExclusive = toExclusive;\n+    this.layout = layout;\n+    this.exceptionDecorator = exceptionDecorator;\n+    this.exactMatch = layout.compare(fromInclusive, toExclusive) == 0;\n+    this.stableGeneration = stableGeneration;\n+    this.unstableGeneration = unstableGeneration;\n+    this.generationSupplier = generationSupplier;\n+    this.bTreeNode = bTreeNode;\n+    this.rootCatchup = rootCatchup;\n+    this.lastFollowedPointerGeneration = lastFollowedPointerGeneration;\n+    int batchSize = exactMatch ? 1 : maxReadAhead;\n+    this.mutableKeys = (KEY[]) new Object[batchSize];\n+    this.mutableValues = (VALUE[]) new Object[batchSize];\n+    this.mutableKeys[0] = layout.newKey();\n+    this.mutableValues[0] = layout.newValue();\n+    this.prevKey = layout.newKey();\n+    this.seekForward = layout.compare(fromInclusive, toExclusive) <= 0;\n+    this.stride = seekForward ? 1 : -1;\n+    this.expectedFirstAfterGoToNext = layout.newKey();\n+    this.firstKeyInNode = layout.newKey();\n+\n+    try\n     {\n-        this.cursor = cursor;\n-        this.fromInclusive = fromInclusive;\n-        this.toExclusive = toExclusive;\n-        this.layout = layout;\n-        this.exceptionDecorator = exceptionDecorator;\n-        this.exactMatch = layout.compare( fromInclusive, toExclusive ) == 0;\n-        this.stableGeneration = stableGeneration;\n-        this.unstableGeneration = unstableGeneration;\n-        this.generationSupplier = generationSupplier;\n-        this.bTreeNode = bTreeNode;\n-        this.rootCatchup = rootCatchup;\n-        this.lastFollowedPointerGeneration = lastFollowedPointerGeneration;\n-        int batchSize = exactMatch ? 1 : maxReadAhead;\n-        this.mutableKeys = (KEY[]) new Object[batchSize];\n-        this.mutableValues = (VALUE[]) new Object[batchSize];\n-        this.mutableKeys[0] = layout.newKey();\n-        this.mutableValues[0] = layout.newValue();\n-        this.prevKey = layout.newKey();\n-        this.seekForward = layout.compare( fromInclusive, toExclusive ) <= 0;\n-        this.stride = seekForward ? 1 : -1;\n-        this.expectedFirstAfterGoToNext = layout.newKey();\n-        this.firstKeyInNode = layout.newKey();\n-\n-        try\n-        {\n-            traverseDownToFirstLeaf();\n-        }\n-        catch ( Throwable e )\n-        {\n-            exceptionDecorator.accept( e );\n-            throw e;\n-        }\n+      traverseDownToFirstLeaf();\n+    } catch (Throwable e)\n+    {\n+      exceptionDecorator.accept(e);\n+      throw e;\n     }\n-\n-    /**\n-     * Traverses from the root down to the leaf containing the next key that we're looking for, or the first\n-     * one provided in the constructor if this no result have yet been returned.\n-     * <p>\n-     * This method is called when constructing the cursor, but also if this traversal itself or leaf scan\n-     * later on ends up on an unexpected tree node (typically due to concurrent changes,\n-     * checkpoint and tree node reuse).\n-     * <p>\n-     * Before calling this method the caller is expected to place the {@link PageCursor} at the root, by using\n-     * {@link #rootCatchup}. After this method returns the {@link PageCursor} is placed on the leaf containing\n-     * the next result and {@link #pos} is also initialized correctly.\n-     *\n-     * @throws IOException on {@link PageCursor} error.\n-     */\n-    private void traverseDownToFirstLeaf() throws IOException\n+  }\n+\n+  /**\n+   * Traverses from the root down to the leaf containing the next key that we're looking for, or the first\n+   * one provided in the constructor if this no result have yet been returned.\n+   * <p>\n+   * This method is called when constructing the cursor, but also if this traversal itself or leaf scan\n+   * later on ends up on an unexpected tree node (typically due to concurrent changes,\n+   * checkpoint and tree node reuse).\n+   * <p>\n+   * Before calling this method the caller is expected to place the {@link PageCursor} at the root, by using\n+   * {@link #rootCatchup}. After this method returns the {@link PageCursor} is placed on the leaf containing\n+   * the next result and {@link #pos} is also initialized correctly.\n+   *\n+   * @throws IOException on {@link PageCursor} error.\n+   */\n+  private void traverseDownToFirstLeaf() throws IOException\n+  {\n+    do\n     {\n-        do\n+      // Read\n+      do\n+      {\n+        // Where we are\n+        if (!readHeader())\n         {\n-            // Read\n-            do\n-            {\n-                // Where we are\n-                if ( !readHeader() )\n-                {\n-                    continue;\n-                }\n-\n-                searchResult = searchKey( fromInclusive, isInternal ? INTERNAL : LEAF );\n-                if ( !KeySearch.isSuccess( searchResult ) )\n-                {\n-                    continue;\n-                }\n-                pos = positionOf( searchResult );\n-\n-                if ( isInternal )\n-                {\n-                    pointerId = bTreeNode.childAt( cursor, pos, stableGeneration, unstableGeneration );\n-                    pointerGeneration = readPointerGenerationOnSuccess( pointerId );\n-                }\n-            }\n-            while ( cursor.shouldRetry() );\n-            checkOutOfBounds( cursor );\n-            cursor.checkAndClearCursorException();\n-\n-            // Act\n-            if ( !endedUpOnExpectedNode() )\n-            {\n-                prepareToStartFromRoot();\n-                isInternal = true;\n-                continue;\n-            }\n-            else if ( !saneRead() )\n-            {\n-                throw new TreeInconsistencyException( \"Read inconsistent tree node %d%n\" +\n-                        \"  nodeType:%d%n  currentNodeGeneration:%d%n  successor:%d%n  successorGeneration:%d%n\" +\n-                        \"  isInternal:%b%n  keyCount:%d%n  searchResult:%d%n  pos:%d%n\" +\n-                        \"  childId:%d%n  childIdGeneration:%d\",\n-                        cursor.getCurrentPageId(), nodeType, currentNodeGeneration, successor, successorGeneration,\n-                        isInternal, keyCount, searchResult, pos, pointerId, pointerGeneration );\n-            }\n-\n-            if ( goToSuccessor() )\n-            {\n-                continue;\n-            }\n-\n-            if ( isInternal )\n-            {\n-                goTo( pointerId, pointerGeneration, \"child\", false );\n-            }\n+          continue;\n         }\n-        while ( isInternal );\n \n-        // We've now come to the first relevant leaf, initialize the state for the coming leaf scan\n-        pos -= stride;\n-        if ( !seekForward )\n+        searchResult = searchKey(fromInclusive, isInternal ? INTERNAL : LEAF);\n+        if (!KeySearch.isSuccess(searchResult))\n         {\n-            // The tree traversal is best effort when seeking backwards\n-            // need to trigger search for key in next\n-            concurrentWriteHappened = true;\n+          continue;\n         }\n-        cachedLength = 0;\n-    }\n+        pos = positionOf(searchResult);\n \n-    @Override\n-    public boolean next() throws IOException\n-    {\n-        try\n-        {\n-            while ( true )\n-            {\n-                pos += stride;\n-\n-                // There are two main tracks in this loop:\n-                // - (SLOW) no keys/values have been read and will therefore need to be read from the cursor.\n-                //   Reading from the cursor means there are a lot of things around the actual keys and values\n-                //   that need to be check to validate the read. This is expensive to do since there's so much\n-                //   to validate. This is why keys/values are read in batches of N entries. The validations\n-                //   are made only once per batch instead of once per key/value.\n-                // - (FAST) there are keys/values read and validated and ready to simply be returned to the user.\n-\n-                if ( cachedIndex + 1 < cachedLength && !closed && !(concurrentWriteHappened = cursor.shouldRetry()) )\n-                {   // FAST, key/value is readily available\n-                    cachedIndex++;\n-                    if ( 0 <= pos && pos < keyCount )\n-                    {\n-                        if ( resultOnTrack || isResultKey() )\n-                        {\n-                            resultOnTrack = true;\n-                            return true; // which marks this read a hit that user can see\n-                        }\n-                        continue;\n-                    }\n-                }\n-                else\n-                {   // SLOW, next batch of keys/values needs to be read\n-                    if ( resultOnTrack )\n-                    {\n-                        layout.copyKey( mutableKeys[cachedIndex], prevKey );\n-                    }\n-                    if ( !readAndValidateNextKeyValueBatch() )\n-                    {\n-                        // Concurrent changes\n-                        cachedLength = 0;\n-                        continue;\n-                    }\n-\n-                    // Below, the cached key/value at slot [0] will be used\n-                    if ( !seekForward && pos >= keyCount )\n-                    {\n-                        goTo( prevSiblingId, prevSiblingGeneration, \"prev sibling\", true );\n-                        // Continue in the read loop above so that we can continue reading from previous sibling\n-                        // or on next position\n-                        continue;\n-                    }\n-\n-                    if ( (seekForward && pos >= keyCount) || (!seekForward && pos <= 0 && !insidePrevKey()) )\n-                    {\n-                        if ( goToNextSibling() )\n-                        {\n-                            continue; // in the read loop above so that we can continue reading from next sibling\n-                        }\n-                    }\n-                    else if ( 0 <= pos && pos < keyCount && insideEndRange( exactMatch, 0 ) )\n-                    {\n-                        if ( isResultKey() )\n-                        {\n-                            resultOnTrack = true;\n-                            return true; // which marks this read a hit that user can see\n-                        }\n-                        continue;\n-                    }\n-                }\n-\n-                // We've come too far and so this means the end of the result set\n-                return false;\n-            }\n-        }\n-        catch ( Throwable e )\n+        if (isInternal)\n         {\n-            exceptionDecorator.accept( e );\n-            throw e;\n+          pointerId = bTreeNode.childAt(cursor, pos, stableGeneration, unstableGeneration);\n+          pointerGeneration = readPointerGenerationOnSuccess(pointerId);\n         }\n+      }\n+      while (cursor.shouldRetry());\n+      checkOutOfBounds(cursor);\n+      cursor.checkAndClearCursorException();\n+\n+      // Act\n+      if (!endedUpOnExpectedNode())\n+      {\n+        prepareToStartFromRoot();\n+        isInternal = true;\n+        continue;\n+      } else if (!saneRead())\n+      {\n+        throw new TreeInconsistencyException(\"Read inconsistent tree node %d%n\" +\n+            \"  nodeType:%d%n  currentNodeGeneration:%d%n  successor:%d%n  successorGeneration:%d%n\" +\n+            \"  isInternal:%b%n  keyCount:%d%n  searchResult:%d%n  pos:%d%n\" +\n+            \"  childId:%d%n  childIdGeneration:%d\",\n+            cursor.getCurrentPageId(), nodeType, currentNodeGeneration, successor, successorGeneration,\n+            isInternal, keyCount, searchResult, pos, pointerId, pointerGeneration);\n+      }\n+\n+      if (goToSuccessor())\n+      {\n+        continue;\n+      }\n+\n+      if (isInternal)\n+      {\n+        goTo(pointerId, pointerGeneration, \"child\", false);\n+      }\n     }\n+    while (isInternal);\n \n-    private boolean readAndValidateNextKeyValueBatch() throws IOException\n+    // We've now come to the first relevant leaf, initialize the state for the coming leaf scan\n+    pos -= stride;\n+    if (!seekForward)\n     {\n-        do\n-        {\n-            cachedIndex = 0;\n-            cachedLength = 0;\n-            resultOnTrack = false;\n-\n-            // Where we are\n-            if ( !readHeader() || isInternal )\n-            {\n-                continue;\n-            }\n-\n-            if ( verifyExpectedFirstAfterGoToNext )\n-            {\n-                pos = seekForward ? 0 : keyCount - 1;\n-                bTreeNode.keyAt( cursor, firstKeyInNode, pos, LEAF );\n-            }\n+      // The tree traversal is best effort when seeking backwards\n+      // need to trigger search for key in next\n+      concurrentWriteHappened = true;\n+    }\n+    cachedLength = 0;\n+  }\n \n-            if ( concurrentWriteHappened )\n+  @Override\n+  public boolean next() throws IOException\n+  {\n+    try\n+    {\n+      while (true)\n+      {\n+        pos += stride;\n+\n+        // There are two main tracks in this loop:\n+        // - (SLOW) no keys/values have been read and will therefore need to be read from the cursor.\n+        //   Reading from the cursor means there are a lot of things around the actual keys and values\n+        //   that need to be check to validate the read. This is expensive to do since there's so much\n+        //   to validate. This is why keys/values are read in batches of N entries. The validations\n+        //   are made only once per batch instead of once per key/value.\n+        // - (FAST) there are keys/values read and validated and ready to simply be returned to the user.\n+\n+        if (cachedIndex + 1 < cachedLength && !closed && !(concurrentWriteHappened = cursor.shouldRetry()))\n+        {   // FAST, key/value is readily available\n+          cachedIndex++;\n+          if (0 <= pos && pos < keyCount)\n+          {\n+            if (resultOnTrack || isResultKey())\n             {\n-                // Keys could have been moved so we need to make sure we are not missing any keys by\n-                // moving position back until we find previously returned key\n-                searchResult = searchKey( first ? fromInclusive : prevKey, LEAF );\n-                if ( !KeySearch.isSuccess( searchResult ) )\n-                {\n-                    continue;\n-                }\n-                pos = positionOf( searchResult );\n-\n-                if ( !seekForward && pos >= keyCount )\n-                {\n-                    // We may need to go to previous sibling to find correct place to start seeking from\n-                    prevSiblingId = readPrevSibling();\n-                    prevSiblingGeneration = readPointerGenerationOnSuccess( prevSiblingId );\n-                }\n+              resultOnTrack = true;\n+              return true; // which marks this read a hit that user can see\n             }\n-\n-            // Next result\n-            if ( (seekForward && pos >= keyCount) || (!seekForward && pos <= 0) )\n+            continue;\n+          }\n+        } else\n+        {   // SLOW, next batch of keys/values needs to be read\n+          if (resultOnTrack)\n+          {\n+            layout.copyKey(mutableKeys[cachedIndex], prevKey);\n+          }\n+          if (!readAndValidateNextKeyValueBatch())\n+          {\n+            // Concurrent changes\n+            cachedLength = 0;\n+            continue;\n+          }\n+\n+          // Below, the cached key/value at slot [0] will be used\n+          if (!seekForward && pos >= keyCount)\n+          {\n+            goTo(prevSiblingId, prevSiblingGeneration, \"prev sibling\", true);\n+            // Continue in the read loop above so that we can continue reading from previous sibling\n+            // or on next position\n+            continue;\n+          }\n+\n+          if ((seekForward && pos >= keyCount) || (!seekForward && pos <= 0 && !insidePrevKey()))\n+          {\n+            if (goToNextSibling())\n             {\n-                // Read right sibling\n-                pointerId = readNextSibling();\n-                pointerGeneration = readPointerGenerationOnSuccess( pointerId );\n+              continue; // in the read loop above so that we can continue reading from next sibling\n             }\n-            for ( int readPos = pos; cachedLength < mutableKeys.length && 0 <= readPos && readPos < keyCount; readPos += stride )\n+          } else if (0 <= pos && pos < keyCount && insideEndRange(exactMatch, 0))\n+          {\n+            if (isResultKey())\n             {\n-                // Read the next value in this leaf\n-                if ( mutableKeys[cachedLength] == null )\n-                {\n-                    // Lazy instantiation of key/value\n-                    mutableKeys[cachedLength] = layout.newKey();\n-                    mutableValues[cachedLength] = layout.newValue();\n-                }\n-                bTreeNode.keyValueAt( cursor, mutableKeys[cachedLength], mutableValues[cachedLength], readPos );\n-\n-                if ( insideEndRange( exactMatch, cachedLength ) )\n-                {\n-                    // This seems to be a result that should be part of our result set\n-                    cachedLength++;\n-                }\n-                else\n-                {\n-                    // OK so we read too far, abort this ahead-reading\n-                    break;\n-                }\n+              resultOnTrack = true;\n+              return true; // which marks this read a hit that user can see\n             }\n+            continue;\n+          }\n         }\n-        while ( concurrentWriteHappened = cursor.shouldRetry() );\n-        checkOutOfBoundsAndClosed();\n-        cursor.checkAndClearCursorException();\n \n-        // Act\n-        if ( !endedUpOnExpectedNode() || isInternal )\n-        {\n-            // This node has been reused for something else than a tree node. Restart seek from root.\n-            prepareToStartFromRoot();\n-            traverseDownToFirstLeaf();\n-            return false;\n-        }\n-        else if ( !saneRead() )\n-        {\n-            throw new TreeInconsistencyException( \"Read inconsistent tree node %d%n\" +\n-                    \"  nodeType:%d%n  currentNodeGeneration:%d%n  successor:%d%n  successorGeneration:%d%n\" +\n-                    \"  keyCount:%d%n  searchResult:%d%n  pos:%d%n\" +\n-                    \"  rightSibling:%d%n  rightSiblingGeneration:%d\",\n-                    cursor.getCurrentPageId(), nodeType, currentNodeGeneration, successor, successorGeneration,\n-                    keyCount, searchResult, pos, pointerId, pointerGeneration );\n-        }\n-\n-        if ( !verifyFirstKeyInNodeIsExpectedAfterGoTo() )\n-        {\n-            return false;\n-        }\n+        // We've come too far and so this means the end of the result set\n+        return false;\n+      }\n+    } catch (Throwable e)\n+    {\n+      exceptionDecorator.accept(e);\n+      throw e;\n+    }\n+  }\n \n-        if ( goToSuccessor() )\n+  private boolean readAndValidateNextKeyValueBatch() throws IOException\n+  {\n+    do\n+    {\n+      cachedIndex = 0;\n+      cachedLength = 0;\n+      resultOnTrack = false;\n+\n+      // Where we are\n+      if (!readHeader() || isInternal)\n+      {\n+        continue;\n+      }\n+\n+      if (verifyExpectedFirstAfterGoToNext)\n+      {\n+        pos = seekForward ? 0 : keyCount - 1;\n+        bTreeNode.keyAt(cursor, firstKeyInNode, pos, LEAF);\n+      }\n+\n+      if (concurrentWriteHappened)\n+      {\n+        // Keys could have been moved so we need to make sure we are not missing any keys by\n+        // moving position back until we find previously returned key\n+        searchResult = searchKey(first ? fromInclusive : prevKey, LEAF);\n+        if (!KeySearch.isSuccess(searchResult))\n         {\n-            return false;\n+          continue;\n         }\n+        pos = positionOf(searchResult);\n \n-        return true;\n-    }\n-\n-    /**\n-     * Check out of bounds for cursor. If out of bounds, check if seeker has been closed and throw exception accordingly\n-     */\n-    private void checkOutOfBoundsAndClosed()\n-    {\n-        try\n+        if (!seekForward && pos >= keyCount)\n         {\n-            checkOutOfBounds( cursor );\n+          // We may need to go to previous sibling to find correct place to start seeking from\n+          prevSiblingId = readPrevSibling();\n+          prevSiblingGeneration = readPointerGenerationOnSuccess(prevSiblingId);\n         }\n-        catch ( TreeInconsistencyException e )\n+      }\n+\n+      // Next result\n+      if ((seekForward && pos >= keyCount) || (!seekForward && pos <= 0))\n+      {\n+        // Read right sibling\n+        pointerId = readNextSibling();\n+        pointerGeneration = readPointerGenerationOnSuccess(pointerId);\n+      }\n+      for (int readPos = pos; cachedLength < mutableKeys.length && 0 <= readPos && readPos < keyCount; readPos += stride)\n+      {\n+        // Read the next value in this leaf\n+        if (mutableKeys[cachedLength] == null)\n         {\n-            // Only check the closed status here when we get an out of bounds to avoid making\n-            // this check for every call to next.\n-            if ( closed )\n-            {\n-                throw new IllegalStateException( \"Tried to use seeker after it was closed\" );\n-            }\n-            throw e;\n+          // Lazy instantiation of key/value\n+          mutableKeys[cachedLength] = layout.newKey();\n+          mutableValues[cachedLength] = layout.newValue();\n         }\n-    }\n+        bTreeNode.keyValueAt(cursor, mutableKeys[cachedLength], mutableValues[cachedLength], readPos);\n \n-    /**\n-     * @return whether or not the read key ({@link #mutableKeys}) is \"before\" the end of the key range\n-     * ({@link #toExclusive}) of this seek.\n-     */\n-    private boolean insideEndRange( boolean exactMatch, int cachedIndex )\n-    {\n-        if ( exactMatch )\n+        if (insideEndRange(exactMatch, cachedLength))\n         {\n-            return seekForward ? layout.compare( mutableKeys[cachedIndex], toExclusive ) <= 0\n-                               : layout.compare( mutableKeys[cachedIndex], toExclusive ) >= 0;\n-        }\n-        else\n+          // This seems to be a result that should be part of our result set\n+          cachedLength++;\n+        } else\n         {\n-            return seekForward ? layout.compare( mutableKeys[cachedIndex], toExclusive ) < 0\n-                               : layout.compare( mutableKeys[cachedIndex], toExclusive ) > 0;\n+          // OK so we read too far, abort this ahead-reading\n+          break;\n         }\n+      }\n     }\n+    while (concurrentWriteHappened = cursor.shouldRetry());\n+    checkOutOfBoundsAndClosed();\n+    cursor.checkAndClearCursorException();\n \n-    /**\n-     * @return whether or not the read key ({@link #mutableKeys}) is \"after\" the start of the key range\n-     * ({@link #fromInclusive}) of this seek.\n-     */\n-    private boolean insideStartRange()\n+    // Act\n+    if (!endedUpOnExpectedNode() || isInternal)\n     {\n-        return seekForward ? layout.compare( mutableKeys[cachedIndex], fromInclusive ) >= 0\n-                           : layout.compare( mutableKeys[cachedIndex], fromInclusive ) <= 0;\n-    }\n-\n-    /**\n-     * @return whether or not the read key ({@link #mutableKeys}) is \"after\" the last returned key of this seek\n-     * ({@link #prevKey}), or if no result has been returned the start of the key range ({@link #fromInclusive}).\n-     */\n-    private boolean insidePrevKey()\n+      // This node has been reused for something else than a tree node. Restart seek from root.\n+      prepareToStartFromRoot();\n+      traverseDownToFirstLeaf();\n+      return false;\n+    } else if (!saneRead())\n     {\n-        if ( first )\n-        {\n-            return insideStartRange();\n-        }\n-        return seekForward ? layout.compare( mutableKeys[cachedIndex], prevKey ) > 0\n-                           : layout.compare( mutableKeys[cachedIndex], prevKey ) < 0;\n+      throw new TreeInconsistencyException(\"Read inconsistent tree node %d%n\" +\n+          \"  nodeType:%d%n  currentNodeGeneration:%d%n  successor:%d%n  successorGeneration:%d%n\" +\n+          \"  keyCount:%d%n  searchResult:%d%n  pos:%d%n\" +\n+          \"  rightSibling:%d%n  rightSiblingGeneration:%d\",\n+          cursor.getCurrentPageId(), nodeType, currentNodeGeneration, successor, successorGeneration,\n+          keyCount, searchResult, pos, pointerId, pointerGeneration);\n     }\n \n-    /**\n-     * Tries to move the {@link PageCursor} to the tree node specified inside {@code pointerId},\n-     * also setting the pointer generation expectation on the next read on that new tree node.\n-     * <p>\n-     * As with all pointers, the generation is checked for sanity and if generation looks to be in the future,\n-     * there's a generation catch-up made and the read will have to be re-attempted.\n-     *\n-     * @param pointerId read result containing pointer id to go to.\n-     * @param pointerGeneration generation of {@code pointerId}.\n-     * @param type type of pointer, e.g. \"child\" or \"sibling\" or so.\n-     * @return {@code true} if context was updated or {@link PageCursor} was moved, both cases meaning that\n-     * caller should retry its most recent read, otherwise {@code false} meaning that nothing happened.\n-     * @throws IOException on {@link PageCursor} error.\n-     * @throws TreeInconsistencyException if {@code allowNoNode} is {@code true} and {@code pointerId}\n-     * contains a \"null\" tree node id.\n-     */\n-    private boolean goTo( long pointerId, long pointerGeneration, String type, boolean allowNoNode ) throws IOException\n+    if (!verifyFirstKeyInNodeIsExpectedAfterGoTo())\n     {\n-        if ( pointerCheckingWithGenerationCatchup( pointerId, allowNoNode ) )\n-        {\n-            concurrentWriteHappened = true;\n-            return true;\n-        }\n-        else if ( !allowNoNode || TreeNode.isNode( pointerId ) )\n-        {\n-            TreeNode.goTo( cursor, type, pointerId );\n-            lastFollowedPointerGeneration = pointerGeneration;\n-            concurrentWriteHappened = true;\n-            return true;\n-        }\n-        return false;\n+      return false;\n     }\n \n-    /**\n-     * Calls {@link #goTo(long, long, String, boolean)} with successor fields.\n-     */\n-    private boolean goToSuccessor() throws IOException\n+    if (goToSuccessor())\n     {\n-        return goTo( successor, successorGeneration, \"successor\", true );\n+      return false;\n     }\n \n-    /**\n-     * @return generation of {@code pointerId}, if the pointer id was successfully read.\n-     */\n-    private long readPointerGenerationOnSuccess( long pointerId )\n-    {\n-        if ( GenerationSafePointerPair.isSuccess( pointerId ) )\n-        {\n-            return bTreeNode.pointerGeneration( cursor, pointerId );\n-        }\n-        return -1; // this value doesn't matter\n-    }\n+    return true;\n+  }\n \n-    /**\n-     * @return {@code false} if there was a set expectancy on first key in tree node which weren't met,\n-     * otherwise {@code true}. Caller should\n-     */\n-    private boolean verifyFirstKeyInNodeIsExpectedAfterGoTo()\n+  /**\n+   * Check out of bounds for cursor. If out of bounds, check if seeker has been closed and throw exception accordingly\n+   */\n+  private void checkOutOfBoundsAndClosed()\n+  {\n+    try\n     {\n-        boolean result = true;\n-        if ( verifyExpectedFirstAfterGoToNext && layout.compare( firstKeyInNode, expectedFirstAfterGoToNext ) != 0 )\n-        {\n-            concurrentWriteHappened = true;\n-            result = false;\n-        }\n-        verifyExpectedFirstAfterGoToNext = false;\n-        return result;\n+      checkOutOfBounds(cursor);\n+    } catch (TreeInconsistencyException e)\n+    {\n+      // Only check the closed status here when we get an out of bounds to avoid making\n+      // this check for every call to next.\n+      if (closed)\n+      {\n+        throw new IllegalStateException(\"Tried to use seeker after it was closed\");\n+      }\n+      throw e;\n     }\n-\n-    /**\n-     * @return the read previous sibling, depending on the direction this seek is going.\n-     */\n-    private long readPrevSibling()\n+  }\n+\n+  /**\n+   * @return whether or not the read key ({@link #mutableKeys}) is \"before\" the end of the key range\n+   * ({@link #toExclusive}) of this seek.\n+   */\n+  private boolean insideEndRange(boolean exactMatch, int cachedIndex)\n+  {\n+    if (exactMatch)\n     {\n-        return seekForward ?\n-               TreeNode.leftSibling( cursor, stableGeneration, unstableGeneration ) :\n-               TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration );\n+      return seekForward ? layout.compare(mutableKeys[cachedIndex], toExclusive) <= 0\n+          : layout.compare(mutableKeys[cachedIndex], toExclusive) >= 0;\n+    } else\n+    {\n+      return seekForward ? layout.compare(mutableKeys[cachedIndex], toExclusive) < 0\n+          : layout.compare(mutableKeys[cachedIndex], toExclusive) > 0;\n     }\n-\n-    /**\n-     * @return the read next sibling, depending on the direction this seek is going.\n-     */\n-    private long readNextSibling()\n+  }\n+\n+  /**\n+   * @return whether or not the read key ({@link #mutableKeys}) is \"after\" the start of the key range\n+   * ({@link #fromInclusive}) of this seek.\n+   */\n+  private boolean insideStartRange()\n+  {\n+    return seekForward ? layout.compare(mutableKeys[cachedIndex], fromInclusive) >= 0\n+        : layout.compare(mutableKeys[cachedIndex], fromInclusive) <= 0;\n+  }\n+\n+  /**\n+   * @return whether or not the read key ({@link #mutableKeys}) is \"after\" the last returned key of this seek\n+   * ({@link #prevKey}), or if no result has been returned the start of the key range ({@link #fromInclusive}).\n+   */\n+  private boolean insidePrevKey()\n+  {\n+    if (first)\n     {\n-        return seekForward ?\n-               TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration ) :\n-               TreeNode.leftSibling( cursor, stableGeneration, unstableGeneration );\n+      return insideStartRange();\n     }\n-\n-    /**\n-     * Does a binary search for the given {@code key} in the current tree node and returns its position.\n-     *\n-     * @return position of the {@code key} in the current tree node, or position of the closest key.\n-     */\n-    private int searchKey( KEY key, TreeNode.Type type )\n+    return seekForward ? layout.compare(mutableKeys[cachedIndex], prevKey) > 0\n+        : layout.compare(mutableKeys[cachedIndex], prevKey) < 0;\n+  }\n+\n+  /**\n+   * Tries to move the {@link PageCursor} to the tree node specified inside {@code pointerId},\n+   * also setting the pointer generation expectation on the next read on that new tree node.\n+   * <p>\n+   * As with all pointers, the generation is checked for sanity and if generation looks to be in the future,\n+   * there's a generation catch-up made and the read will have to be re-attempted.\n+   *\n+   * @param pointerId         read result containing pointer id to go to.\n+   * @param pointerGeneration generation of {@code pointerId}.\n+   * @param type              type of pointer, e.g. \"child\" or \"sibling\" or so.\n+   * @return {@code true} if context was updated or {@link PageCursor} was moved, both cases meaning that\n+   * caller should retry its most recent read, otherwise {@code false} meaning that nothing happened.\n+   * @throws IOException                on {@link PageCursor} error.\n+   * @throws TreeInconsistencyException if {@code allowNoNode} is {@code true} and {@code pointerId}\n+   *                                    contains a \"null\" tree node id.\n+   */\n+  private boolean goTo(long pointerId, long pointerGeneration, String type, boolean allowNoNode) throws IOException\n+  {\n+    if (pointerCheckingWithGenerationCatchup(pointerId, allowNoNode))\n     {\n-        return KeySearch.search( cursor, bTreeNode, type, key, mutableKeys[0], keyCount );\n+      concurrentWriteHappened = true;\n+      return true;\n+    } else if (!allowNoNode || TreeNode.isNode(pointerId))\n+    {\n+      TreeNode.goTo(cursor, type, pointerId);\n+      lastFollowedPointerGeneration = pointerGeneration;\n+      concurrentWriteHappened = true;\n+      return true;\n     }\n-\n-    private int positionOf( int searchResult )\n+    return false;\n+  }\n+\n+  /**\n+   * Calls {@link #goTo(long, long, String, boolean)} with successor fields.\n+   */\n+  private boolean goToSuccessor() throws IOException\n+  {\n+    return goTo(successor, successorGeneration, \"successor\", true);\n+  }\n+\n+  /**\n+   * @return generation of {@code pointerId}, if the pointer id was successfully read.\n+   */\n+  private long readPointerGenerationOnSuccess(long pointerId)\n+  {\n+    if (GenerationSafePointerPair.isSuccess(pointerId))\n     {\n-        int pos = KeySearch.positionOf( searchResult );\n-\n-        // Assuming unique keys\n-        if ( isInternal && KeySearch.isHit( searchResult ) )\n-        {\n-            pos++;\n-        }\n-        return pos;\n+      return bTreeNode.pointerGeneration(cursor, pointerId);\n     }\n-\n-    /**\n-     * @return {@code true} if header was read and looks sane, otherwise {@code false} meaning that node doesn't look\n-     * like a tree node or we can expect a shouldRetry to take place.\n-     */\n-    private boolean readHeader()\n+    return -1; // this value doesn't matter\n+  }\n+\n+  /**\n+   * @return {@code false} if there was a set expectancy on first key in tree node which weren't met,\n+   * otherwise {@code true}. Caller should\n+   */\n+  private boolean verifyFirstKeyInNodeIsExpectedAfterGoTo()\n+  {\n+    boolean result = true;\n+    if (verifyExpectedFirstAfterGoToNext && layout.compare(firstKeyInNode, expectedFirstAfterGoToNext) != 0)\n     {\n-        nodeType = TreeNode.nodeType( cursor );\n-        if ( nodeType != TreeNode.NODE_TYPE_TREE_NODE )\n-        {\n-            // If this node doesn't even look like a tree node then anything we read from it\n-            // will be just random data when looking at it as if it were a tree node.\n-            return false;\n-        }\n-\n-        currentNodeGeneration = TreeNode.generation( cursor );\n-\n-        successor = TreeNode.successor( cursor, stableGeneration, unstableGeneration );\n-        if ( GenerationSafePointerPair.isSuccess( successor ) )\n-        {\n-            successorGeneration = bTreeNode.pointerGeneration( cursor, successor );\n-        }\n-        isInternal = TreeNode.isInternal( cursor );\n-        // Find the left-most key within from-range\n-        keyCount = TreeNode.keyCount( cursor );\n-\n-        return keyCountIsSane( keyCount );\n+      concurrentWriteHappened = true;\n+      result = false;\n     }\n-\n-    private boolean endedUpOnExpectedNode()\n+    verifyExpectedFirstAfterGoToNext = false;\n+    return result;\n+  }\n+\n+  /**\n+   * @return the read previous sibling, depending on the direction this seek is going.\n+   */\n+  private long readPrevSibling()\n+  {\n+    return seekForward ?\n+        TreeNode.leftSibling(cursor, stableGeneration, unstableGeneration) :\n+        TreeNode.rightSibling(cursor, stableGeneration, unstableGeneration);\n+  }\n+\n+  /**\n+   * @return the read next sibling, depending on the direction this seek is going.\n+   */\n+  private long readNextSibling()\n+  {\n+    return seekForward ?\n+        TreeNode.rightSibling(cursor, stableGeneration, unstableGeneration) :\n+        TreeNode.leftSibling(cursor, stableGeneration, unstableGeneration);\n+  }\n+\n+  /**\n+   * Does a binary search for the given {@code key} in the current tree node and returns its position.\n+   *\n+   * @return position of the {@code key} in the current tree node, or position of the closest key.\n+   */\n+  private int searchKey(KEY key, TreeNode.Type type)\n+  {\n+    return KeySearch.search(cursor, bTreeNode, type, key, mutableKeys[0], keyCount);\n+  }\n+\n+  private int positionOf(int searchResult)\n+  {\n+    int pos = KeySearch.positionOf(searchResult);\n+\n+    // Assuming unique keys\n+    if (isInternal && KeySearch.isHit(searchResult))\n     {\n-        return nodeType == TreeNode.NODE_TYPE_TREE_NODE && verifyNodeGenerationInvariants();\n+      pos++;\n     }\n-\n-    /**\n-     * @return the key/value found from the most recent call to {@link #next()} returning {@code true}.\n-     * @throws IllegalStateException if no {@link #next()} call which returned {@code true} has been made yet.\n-     */\n-    @Override\n-    public Hit<KEY,VALUE> get()\n+    return pos;\n+  }\n+\n+  /**\n+   * @return {@code true} if header was read and looks sane, otherwise {@code false} meaning that node doesn't look\n+   * like a tree node or we can expect a shouldRetry to take place.\n+   */\n+  private boolean readHeader()\n+  {\n+    nodeType = TreeNode.nodeType(cursor);\n+    if (nodeType != TreeNode.NODE_TYPE_TREE_NODE)\n     {\n-        if ( first )\n-        {\n-            throw new IllegalStateException( \"There has been no successful call to next() yet\" );\n-        }\n-\n-        return this;\n+      // If this node doesn't even look like a tree node then anything we read from it\n+      // will be just random data when looking at it as if it were a tree node.\n+      return false;\n     }\n \n-    /**\n-     * Moves {@link PageCursor} to next sibling (read before this call into {@link #pointerId}).\n-     * Also, on backwards seek, calls {@link #scoutNextSibling()} to be able to verify consistent read on\n-     * new sibling even on concurrent writes.\n-     * <p>\n-     * As with all pointers, the generation is checked for sanity and if generation looks to be in the future,\n-     * there's a generation catch-up made and the read will have to be re-attempted.\n-     *\n-     * @return {@code true} if we should read more after this call, otherwise {@code false} to mark the end.\n-     * @throws IOException on {@link PageCursor} error.\n-     */\n-    private boolean goToNextSibling() throws IOException\n-    {\n-        if ( pointerCheckingWithGenerationCatchup( pointerId, true ) )\n-        {\n-            // Reading sibling pointer resulted in a bad read, but generation had changed\n-            // (a checkpoint has occurred since we started this cursor) so the generation fields in this\n-            // cursor are now updated with the latest, so let's try that read again.\n-            concurrentWriteHappened = true;\n-            return true;\n-        }\n-        else if ( TreeNode.isNode( pointerId ) )\n-        {\n-            if ( seekForward )\n-            {\n-                // TODO: Check if rightSibling is within expected range before calling next.\n-                // TODO: Possibly by getting highest expected from IdProvider\n-                TreeNode.goTo( cursor, \"sibling\", pointerId );\n-                lastFollowedPointerGeneration = pointerGeneration;\n-                if ( first )\n-                {\n-                    // Have not yet found first hit among leaves.\n-                    // First hit can be several leaves to the right.\n-                    // Continue to use binary search in right leaf\n-                    concurrentWriteHappened = true;\n-                }\n-                else\n-                {\n-                    // It is likely that first key in right sibling is a next hit.\n-                    // Continue using scan\n-                    pos = -1;\n-                }\n-                return true;\n-            }\n-            else\n-            {\n-                // Need to scout next sibling because we are seeking backwards\n-                if ( scoutNextSibling() )\n-                {\n-                    TreeNode.goTo( cursor, \"sibling\", pointerId );\n-                    verifyExpectedFirstAfterGoToNext = true;\n-                    lastFollowedPointerGeneration = pointerGeneration;\n-                }\n-                else\n-                {\n-                    concurrentWriteHappened = true;\n-                }\n-                return true;\n-            }\n-        }\n+    currentNodeGeneration = TreeNode.generation(cursor);\n \n-        // The current node is exhausted and it had no sibling to read more from.\n-        return false;\n+    successor = TreeNode.successor(cursor, stableGeneration, unstableGeneration);\n+    if (GenerationSafePointerPair.isSuccess(successor))\n+    {\n+      successorGeneration = bTreeNode.pointerGeneration(cursor, successor);\n     }\n-\n-    /**\n-     * Reads first key on next sibling, without moving the main {@link PageCursor} to that sibling.\n-     * This to be able to guard for, and retry read if, concurrent writes moving keys in the \"wrong\" direction.\n-     * The first key read here will be matched after actually moving the main {@link PageCursor} to\n-     * the next sibling.\n-     * <p>\n-     * May only be called if {@link #pointerId} points to next sibling.\n-     *\n-     * @return {@code true} if first key in next sibling was read successfully, otherwise {@code false},\n-     * which means that caller should retry most recent read.\n-     * @throws IOException on {@link PageCursor} error.\n-     */\n-    private boolean scoutNextSibling() throws IOException\n+    isInternal = TreeNode.isInternal(cursor);\n+    // Find the left-most key within from-range\n+    keyCount = TreeNode.keyCount(cursor);\n+\n+    return keyCountIsSane(keyCount);\n+  }\n+\n+  private boolean endedUpOnExpectedNode()\n+  {\n+    return nodeType == TreeNode.NODE_TYPE_TREE_NODE && verifyNodeGenerationInvariants();\n+  }\n+\n+  /**\n+   * @return the key/value found from the most recent call to {@link #next()} returning {@code true}.\n+   * @throws IllegalStateException if no {@link #next()} call which returned {@code true} has been made yet.\n+   */\n+  @Override\n+  public Hit<KEY, VALUE> get()\n+  {\n+    if (first)\n     {\n-        // Read header but to local variables and not global once\n-        byte nodeType;\n-        int keyCount = -1;\n-        try ( PageCursor scout = this.cursor.openLinkedCursor( GenerationSafePointerPair.pointer( pointerId ) ) )\n-        {\n-            scout.next();\n-            nodeType = TreeNode.nodeType( scout );\n-            if ( nodeType == TreeNode.NODE_TYPE_TREE_NODE )\n-            {\n-                keyCount = TreeNode.keyCount( scout );\n-                if ( keyCountIsSane( keyCount ) )\n-                {\n-                    int firstPos = seekForward ? 0 : keyCount - 1;\n-                    bTreeNode.keyAt( scout, expectedFirstAfterGoToNext, firstPos, LEAF );\n-                }\n-            }\n-\n-            if ( this.cursor.shouldRetry() )\n-            {\n-                // We scouted next sibling but either next sibling or current node has been changed\n-                // since we left shouldRetry loop, this means keys could have been moved passed us\n-                // and we need to start over.\n-                // Because we also need to restart read on current node there is no use to loop\n-                // on shouldRetry here.\n-                return false;\n-            }\n-            checkOutOfBounds( this.cursor );\n-        }\n-        return !(nodeType != TreeNode.NODE_TYPE_TREE_NODE || !keyCountIsSane( keyCount ));\n+      throw new IllegalStateException(\"There has been no successful call to next() yet\");\n     }\n \n-    /**\n-     * @return whether or not the read {@link #mutableKeys} is one that should be included in the result.\n-     * If this method returns {@code true} then {@link #next()} will return {@code true}.\n-     * Returns {@code false} if this happened to be a bad read in the middle of a split or merge or so.\n-     */\n-    private boolean isResultKey()\n+    return this;\n+  }\n+\n+  /**\n+   * Moves {@link PageCursor} to next sibling (read before this call into {@link #pointerId}).\n+   * Also, on backwards seek, calls {@link #scoutNextSibling()} to be able to verify consistent read on\n+   * new sibling even on concurrent writes.\n+   * <p>\n+   * As with all pointers, the generation is checked for sanity and if generation looks to be in the future,\n+   * there's a generation catch-up made and the read will have to be re-attempted.\n+   *\n+   * @return {@code true} if we should read more after this call, otherwise {@code false} to mark the end.\n+   * @throws IOException on {@link PageCursor} error.\n+   */\n+  private boolean goToNextSibling() throws IOException\n+  {\n+    if (pointerCheckingWithGenerationCatchup(pointerId, true))\n     {\n-        if ( !insideStartRange() )\n+      // Reading sibling pointer resulted in a bad read, but generation had changed\n+      // (a checkpoint has occurred since we started this cursor) so the generation fields in this\n+      // cursor are now updated with the latest, so let's try that read again.\n+      concurrentWriteHappened = true;\n+      return true;\n+    } else if (TreeNode.isNode(pointerId))\n+    {\n+      if (seekForward)\n+      {\n+        // TODO: Check if rightSibling is within expected range before calling next.\n+        // TODO: Possibly by getting highest expected from IdProvider\n+        TreeNode.goTo(cursor, \"sibling\", pointerId);\n+        lastFollowedPointerGeneration = pointerGeneration;\n+        if (first)\n         {\n-            // Key is outside start range, possibly because page reuse\n-            concurrentWriteHappened = true;\n-            return false;\n-        }\n-        else if ( !first && !insidePrevKey() )\n+          // Have not yet found first hit among leaves.\n+          // First hit can be several leaves to the right.\n+          // Continue to use binary search in right leaf\n+          concurrentWriteHappened = true;\n+        } else\n         {\n-            // We've come across a bad read in the middle of a split\n-            // This is outlined in InternalTreeLogic, skip this value (it's fine)\n-            return false;\n+          // It is likely that first key in right sibling is a next hit.\n+          // Continue using scan\n+          pos = -1;\n         }\n-\n-        // A hit, it's within the range we search for\n-        if ( first )\n+        return true;\n+      } else\n+      {\n+        // Need to scout next sibling because we are seeking backwards\n+        if (scoutNextSibling())\n+        {\n+          TreeNode.goTo(cursor, \"sibling\", pointerId);\n+          verifyExpectedFirstAfterGoToNext = true;\n+          lastFollowedPointerGeneration = pointerGeneration;\n+        } else\n         {\n-            // Setting first to false include an additional check for coming potential\n-            // hits so that we cannot go backwards in our result. Going backwards can\n-            // happen when reading through concurrent splits or similar and is a benign\n-            // temporary observed state.\n-            first = false;\n+          concurrentWriteHappened = true;\n         }\n         return true;\n+      }\n     }\n \n-    /**\n-     * {@link TreeNode#keyCount(PageCursor) keyCount} is the only value read inside a do-shouldRetry loop\n-     * which is used as data fed into another read. Because of that extra assertions are made around\n-     * keyCount, both inside do-shouldRetry (requesting one more round in the loop) and outside\n-     * (calling this method, which may throw exception).\n-     *\n-     * @param keyCount key count of a tree node.\n-     * @return {@code true} if key count is sane, i.e. positive and within max expected key count on a tree node.\n-     */\n-    private boolean keyCountIsSane( int keyCount )\n+    // The current node is exhausted and it had no sibling to read more from.\n+    return false;\n+  }\n+\n+  /**\n+   * Reads first key on next sibling, without moving the main {@link PageCursor} to that sibling.\n+   * This to be able to guard for, and retry read if, concurrent writes moving keys in the \"wrong\" direction.\n+   * The first key read here will be matched after actually moving the main {@link PageCursor} to\n+   * the next sibling.\n+   * <p>\n+   * May only be called if {@link #pointerId} points to next sibling.\n+   *\n+   * @return {@code true} if first key in next sibling was read successfully, otherwise {@code false},\n+   * which means that caller should retry most recent read.\n+   * @throws IOException on {@link PageCursor} error.\n+   */\n+  private boolean scoutNextSibling() throws IOException\n+  {\n+    // Read header but to local variables and not global once\n+    byte nodeType;\n+    int keyCount = -1;\n+    try (PageCursor scout = this.cursor.openLinkedCursor(GenerationSafePointerPair.pointer(pointerId)))\n     {\n-        // if keyCount is out of bounds of what a tree node can hold, it must be that we're\n-        // reading from an evicted page that just happened to look like a tree node.\n-        return bTreeNode.reasonableKeyCount( keyCount );\n+      scout.next();\n+      nodeType = TreeNode.nodeType(scout);\n+      if (nodeType == TreeNode.NODE_TYPE_TREE_NODE)\n+      {\n+        keyCount = TreeNode.keyCount(scout);\n+        if (keyCountIsSane(keyCount))\n+        {\n+          int firstPos = seekForward ? 0 : keyCount - 1;\n+          bTreeNode.keyAt(scout, expectedFirstAfterGoToNext, firstPos, LEAF);\n+        }\n+      }\n+\n+      if (this.cursor.shouldRetry())\n+      {\n+        // We scouted next sibling but either next sibling or current node has been changed\n+        // since we left shouldRetry loop, this means keys could have been moved passed us\n+        // and we need to start over.\n+        // Because we also need to restart read on current node there is no use to loop\n+        // on shouldRetry here.\n+        return false;\n+      }\n+      checkOutOfBounds(this.cursor);\n     }\n-\n-    private boolean saneRead()\n+    return !(nodeType != TreeNode.NODE_TYPE_TREE_NODE || !keyCountIsSane(keyCount));\n+  }\n+\n+  /**\n+   * @return whether or not the read {@link #mutableKeys} is one that should be included in the result.\n+   * If this method returns {@code true} then {@link #next()} will return {@code true}.\n+   * Returns {@code false} if this happened to be a bad read in the middle of a split or merge or so.\n+   */\n+  private boolean isResultKey()\n+  {\n+    if (!insideStartRange())\n     {\n-        return keyCountIsSane( keyCount ) && KeySearch.isSuccess( searchResult );\n-    }\n-\n-    /**\n-     * Perform a generation catchup, updates current root and update range to start from\n-     * previously returned key. Should be followed by a call to {@link #traverseDownToFirstLeaf()}\n-     * or if already in that method just loop again.\n-     * <p>\n-     * Caller should retry most recent read after calling this method.\n-     *\n-     * @throws IOException on {@link PageCursor}.\n-     */\n-    private void prepareToStartFromRoot() throws IOException\n+      // Key is outside start range, possibly because page reuse\n+      concurrentWriteHappened = true;\n+      return false;\n+    } else if (!first && !insidePrevKey())\n     {\n-        generationCatchup();\n-        Root root = rootCatchup.catchupFrom( cursor.getCurrentPageId() );\n-        lastFollowedPointerGeneration = root.goTo( cursor );\n-        if ( !first )\n-        {\n-            layout.copyKey( prevKey, fromInclusive );\n-        }\n+      // We've come across a bad read in the middle of a split\n+      // This is outlined in InternalTreeLogic, skip this value (it's fine)\n+      return false;\n     }\n \n-    /**\n-     * Verifies that the generation of the tree node arrived at matches the generation of the pointer\n-     * pointing to the tree node. Generation of the node cannot be higher than the generation of the pointer -\n-     * if it is then it means that the tree node has been removed (or made obsolete) and reused since we read the\n-     * pointer pointing to it and that the seek is now in an invalid location and needs to be restarted from the root.\n-     *\n-     * @return {@code true} if generation matches, otherwise {@code false} if seek needs to be restarted from root.\n-     */\n-    private boolean verifyNodeGenerationInvariants()\n+    // A hit, it's within the range we search for\n+    if (first)\n     {\n-        if ( lastFollowedPointerGeneration != 0 )\n-        {\n-            if ( currentNodeGeneration > lastFollowedPointerGeneration )\n-            {\n-                // We've just followed a pointer to a new node, we have arrived there and made\n-                // the first read on it. It looks like the node we arrived at have a higher generation\n-                // than the pointer generation, this means that this node node have been reused between\n-                // following the pointer and reading the node after getting there.\n-                return false;\n-            }\n-            lastFollowedPointerGeneration = 0;\n-            expectedCurrentNodeGeneration = currentNodeGeneration;\n-        }\n-        else if ( currentNodeGeneration != expectedCurrentNodeGeneration )\n-        {\n-            // We've read more than once from this node and between reads the node generation has changed.\n-            // This means the node has been reused.\n-            return false;\n-        }\n-        return true;\n+      // Setting first to false include an additional check for coming potential\n+      // hits so that we cannot go backwards in our result. Going backwards can\n+      // happen when reading through concurrent splits or similar and is a benign\n+      // temporary observed state.\n+      first = false;\n     }\n-\n-    /**\n-     * Checks the provided pointer read and if not successful performs a generation catch-up with\n-     * {@link #generationSupplier} to allow reading that same pointer again given the updated generation context.\n-     *\n-     * @param pointer read result to check for success.\n-     * @param allowNoNode whether or not pointer is allowed to be \"null\".\n-     * @return {@code true} if there was a generation catch-up called and generation was actually updated,\n-     * this means that caller should retry its most recent read.\n-     */\n-    private boolean pointerCheckingWithGenerationCatchup( long pointer, boolean allowNoNode )\n+    return true;\n+  }\n+\n+  /**\n+   * {@link TreeNode#keyCount(PageCursor) keyCount} is the only value read inside a do-shouldRetry loop\n+   * which is used as data fed into another read. Because of that extra assertions are made around\n+   * keyCount, both inside do-shouldRetry (requesting one more round in the loop) and outside\n+   * (calling this method, which may throw exception).\n+   *\n+   * @param keyCount key count of a tree node.\n+   * @return {@code true} if key count is sane, i.e. positive and within max expected key count on a tree node.\n+   */\n+  private boolean keyCountIsSane(int keyCount)\n+  {\n+    // if keyCount is out of bounds of what a tree node can hold, it must be that we're\n+    // reading from an evicted page that just happened to look like a tree node.\n+    return bTreeNode.reasonableKeyCount(keyCount);\n+  }\n+\n+  private boolean saneRead()\n+  {\n+    return keyCountIsSane(keyCount) && KeySearch.isSuccess(searchResult);\n+  }\n+\n+  /**\n+   * Perform a generation catchup, updates current root and update range to start from\n+   * previously returned key. Should be followed by a call to {@link #traverseDownToFirstLeaf()}\n+   * or if already in that method just loop again.\n+   * <p>\n+   * Caller should retry most recent read after calling this method.\n+   *\n+   * @throws IOException on {@link PageCursor}.\n+   */\n+  private void prepareToStartFromRoot() throws IOException\n+  {\n+    generationCatchup();\n+    Root root = rootCatchup.catchupFrom(cursor.getCurrentPageId());\n+    lastFollowedPointerGeneration = root.goTo(cursor);\n+    if (!first)\n     {\n-        if ( !GenerationSafePointerPair.isSuccess( pointer ) )\n-        {\n-            // An unexpected sibling read, this could have been caused by a concurrent checkpoint\n-            // where generation has been incremented. Re-read generation and, if changed since this\n-            // seek started then update generation locally\n-            if ( generationCatchup() )\n-            {\n-                return true;\n-            }\n-            PointerChecking.checkPointer( pointer, allowNoNode );\n-        }\n-        return false;\n+      layout.copyKey(prevKey, fromInclusive);\n     }\n-\n-    /**\n-     * Updates generation using the {@link #generationSupplier}. If there has been a generation change\n-     * since construction of this seeker or since last calling this method the generation context in this\n-     * seeker is updated.\n-     *\n-     * @return {@code true} if generation was updated, which means that caller should retry its most recent read.\n-     */\n-    private boolean generationCatchup()\n+  }\n+\n+  /**\n+   * Verifies that the generation of the tree node arrived at matches the generation of the pointer\n+   * pointing to the tree node. Generation of the node cannot be higher than the generation of the pointer -\n+   * if it is then it means that the tree node has been removed (or made obsolete) and reused since we read the\n+   * pointer pointing to it and that the seek is now in an invalid location and needs to be restarted from the root.\n+   *\n+   * @return {@code true} if generation matches, otherwise {@code false} if seek needs to be restarted from root.\n+   */\n+  private boolean verifyNodeGenerationInvariants()\n+  {\n+    if (lastFollowedPointerGeneration != 0)\n     {\n-        long newGeneration = generationSupplier.getAsLong();\n-        long newStableGeneration = Generation.stableGeneration( newGeneration );\n-        long newUnstableGeneration = Generation.unstableGeneration( newGeneration );\n-        if ( newStableGeneration != stableGeneration || newUnstableGeneration != unstableGeneration )\n-        {\n-            stableGeneration = newStableGeneration;\n-            unstableGeneration = newUnstableGeneration;\n-            return true;\n-        }\n+      if (currentNodeGeneration > lastFollowedPointerGeneration)\n+      {\n+        // We've just followed a pointer to a new node, we have arrived there and made\n+        // the first read on it. It looks like the node we arrived at have a higher generation\n+        // than the pointer generation, this means that this node node have been reused between\n+        // following the pointer and reading the node after getting there.\n         return false;\n-    }\n-\n-    @Override\n-    public KEY key()\n+      }\n+      lastFollowedPointerGeneration = 0;\n+      expectedCurrentNodeGeneration = currentNodeGeneration;\n+    } else if (currentNodeGeneration != expectedCurrentNodeGeneration)\n     {\n-        return mutableKeys[cachedIndex];\n+      // We've read more than once from this node and between reads the node generation has changed.\n+      // This means the node has been reused.\n+      return false;\n     }\n-\n-    @Override\n-    public VALUE value()\n+    return true;\n+  }\n+\n+  /**\n+   * Checks the provided pointer read and if not successful performs a generation catch-up with\n+   * {@link #generationSupplier} to allow reading that same pointer again given the updated generation context.\n+   *\n+   * @param pointer     read result to check for success.\n+   * @param allowNoNode whether or not pointer is allowed to be \"null\".\n+   * @return {@code true} if there was a generation catch-up called and generation was actually updated,\n+   * this means that caller should retry its most recent read.\n+   */\n+  private boolean pointerCheckingWithGenerationCatchup(long pointer, boolean allowNoNode)\n+  {\n+    if (!GenerationSafePointerPair.isSuccess(pointer))\n     {\n-        return mutableValues[cachedIndex];\n+      // An unexpected sibling read, this could have been caused by a concurrent checkpoint\n+      // where generation has been incremented. Re-read generation and, if changed since this\n+      // seek started then update generation locally\n+      if (generationCatchup())\n+      {\n+        return true;\n+      }\n+      PointerChecking.checkPointer(pointer, allowNoNode);\n     }\n-\n-    @Override\n-    public void close()\n+    return false;\n+  }\n+\n+  /**\n+   * Updates generation using the {@link #generationSupplier}. If there has been a generation change\n+   * since construction of this seeker or since last calling this method the generation context in this\n+   * seeker is updated.\n+   *\n+   * @return {@code true} if generation was updated, which means that caller should retry its most recent read.\n+   */\n+  private boolean generationCatchup()\n+  {\n+    long newGeneration = generationSupplier.getAsLong();\n+    long newStableGeneration = Generation.stableGeneration(newGeneration);\n+    long newUnstableGeneration = Generation.unstableGeneration(newGeneration);\n+    if (newStableGeneration != stableGeneration || newUnstableGeneration != unstableGeneration)\n     {\n-        cursor.close();\n-        closed = true;\n+      stableGeneration = newStableGeneration;\n+      unstableGeneration = newUnstableGeneration;\n+      return true;\n     }\n+    return false;\n+  }\n+\n+  @Override\n+  public KEY key()\n+  {\n+    return mutableKeys[cachedIndex];\n+  }\n+\n+  @Override\n+  public VALUE value()\n+  {\n+    return mutableValues[cachedIndex];\n+  }\n+\n+  @Override\n+  public void close()\n+  {\n+    cursor.close();\n+    closed = true;\n+  }\n }\n",
            "diff_size": 1391
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "386",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 208).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "476",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 286).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "477",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "670",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 275).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "671",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 172).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "822",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "830",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 170).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "1099",
                    "column": "39",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4189/SeekCursor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4189/SeekCursor.java\nindex 3beba2bfb4e..3fddc1f98b7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4189/SeekCursor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4189/SeekCursor.java\n@@ -293,7 +293,8 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n      */\n \n     private byte nodeType;\n-    /**\n+\n+/**\n      * Set within should retry loop.\n      * <p>\n      * Pointer to successor of node.\n@@ -382,11 +383,9 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n     private final Consumer<Throwable> exceptionDecorator;\n \n     @SuppressWarnings( \"unchecked\" )\n-    SeekCursor( PageCursor cursor, TreeNode<KEY,VALUE> bTreeNode, KEY fromInclusive, KEY toExclusive,\n-            Layout<KEY,VALUE> layout, long stableGeneration, long unstableGeneration, LongSupplier generationSupplier,\n-            RootCatchup rootCatchup, long lastFollowedPointerGeneration, Consumer<Throwable> exceptionDecorator, int maxReadAhead )\n-                    throws IOException\n-    {\n+    SeekCursor( PageCursor cursor, TreeNode<KEY,VALUE> bTreeNode, KEY fromInclusive, KEY toExclusive, Layout<KEY,VALUE> layout, long stableGeneration, long unstableGeneration, LongSupplier generationSupplier,\n+            RootCatchup rootCatchup, long lastFollowedPointerGeneration, Consumer<Throwable> exceptionDecorator, int maxReadAhead ) throws IOException\n+{\n         this.cursor = cursor;\n         this.fromInclusive = fromInclusive;\n         this.toExclusive = toExclusive;\n@@ -453,9 +452,9 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n                 {\n                     continue;\n                 }\n-                pos = positionOf( searchResult );\n \n-                if ( isInternal )\n+pos = positionOf( searchResult );\n+if ( isInternal )\n                 {\n                     pointerId = bTreeNode.childAt( cursor, pos, stableGeneration, unstableGeneration );\n                     pointerGeneration = readPointerGenerationOnSuccess( pointerId );\n@@ -474,12 +473,8 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n             }\n             else if ( !saneRead() )\n             {\n-                throw new TreeInconsistencyException( \"Read inconsistent tree node %d%n\" +\n-                        \"  nodeType:%d%n  currentNodeGeneration:%d%n  successor:%d%n  successorGeneration:%d%n\" +\n-                        \"  isInternal:%b%n  keyCount:%d%n  searchResult:%d%n  pos:%d%n\" +\n-                        \"  childId:%d%n  childIdGeneration:%d\",\n-                        cursor.getCurrentPageId(), nodeType, currentNodeGeneration, successor, successorGeneration,\n-                        isInternal, keyCount, searchResult, pos, pointerId, pointerGeneration );\n+                throw new TreeInconsistencyException( \"Read inconsistent tree node %d%n\" + \"  nodeType:%d%n  currentNodeGeneration:%d%n  successor:%d%n  successorGeneration:%d%n\" + \"  isInternal:%b%n  keyCount:%d%n  searchResult:%d%n  pos:%d%n\" + \"  childId:%d%n  childIdGeneration:%d\",\n+                        cursor.getCurrentPageId(), nodeType, currentNodeGeneration, successor, successorGeneration, isInternal, keyCount, searchResult, pos, pointerId, pointerGeneration );\n             }\n \n             if ( goToSuccessor() )\n@@ -502,7 +497,8 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n             // need to trigger search for key in next\n             concurrentWriteHappened = true;\n         }\n-        cachedLength = 0;\n+\n+cachedLength = 0;\n     }\n \n     @Override\n@@ -522,8 +518,9 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n                 //   are made only once per batch instead of once per key/value.\n                 // - (FAST) there are keys/values read and validated and ready to simply be returned to the user.\n \n-                if ( cachedIndex + 1 < cachedLength && !closed && !(concurrentWriteHappened = cursor.shouldRetry()) )\n-                {   // FAST, key/value is readily available\n+                if ( cachedIndex + 1 < cachedLength && !closed && !( concurrentWriteHappened = cursor.shouldRetry()) )\n+                {\n+    // FAST, key/value is readily available\n                     cachedIndex++;\n                     if ( 0 <= pos && pos < keyCount )\n                     {\n@@ -536,12 +533,14 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n                     }\n                 }\n                 else\n-                {   // SLOW, next batch of keys/values needs to be read\n+                {\n+    // SLOW, next batch of keys/values needs to be read\n                     if ( resultOnTrack )\n                     {\n                         layout.copyKey( mutableKeys[cachedIndex], prevKey );\n                     }\n-                    if ( !readAndValidateNextKeyValueBatch() )\n+\n+if ( !readAndValidateNextKeyValueBatch() )\n                     {\n                         // Concurrent changes\n                         cachedLength = 0;\n@@ -557,7 +556,7 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n                         continue;\n                     }\n \n-                    if ( (seekForward && pos >= keyCount) || (!seekForward && pos <= 0 && !insidePrevKey()) )\n+                    if ( ( seekForward && pos >= keyCount) || (!seekForward && pos <= 0 && !insidePrevKey()) )\n                     {\n                         if ( goToNextSibling() )\n                         {\n@@ -615,9 +614,9 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n                 {\n                     continue;\n                 }\n-                pos = positionOf( searchResult );\n \n-                if ( !seekForward && pos >= keyCount )\n+pos = positionOf( searchResult );\n+if ( !seekForward && pos >= keyCount )\n                 {\n                     // We may need to go to previous sibling to find correct place to start seeking from\n                     prevSiblingId = readPrevSibling();\n@@ -626,7 +625,7 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n             }\n \n             // Next result\n-            if ( (seekForward && pos >= keyCount) || (!seekForward && pos <= 0) )\n+            if ( ( seekForward && pos >= keyCount) || (!seekForward && pos <= 0) )\n             {\n                 // Read right sibling\n                 pointerId = readNextSibling();\n@@ -642,8 +641,7 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n                     mutableValues[cachedLength] = layout.newValue();\n                 }\n                 bTreeNode.keyValueAt( cursor, mutableKeys[cachedLength], mutableValues[cachedLength], readPos );\n-\n-                if ( insideEndRange( exactMatch, cachedLength ) )\n+if ( insideEndRange( exactMatch, cachedLength ) )\n                 {\n                     // This seems to be a result that should be part of our result set\n                     cachedLength++;\n@@ -669,12 +667,8 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n         }\n         else if ( !saneRead() )\n         {\n-            throw new TreeInconsistencyException( \"Read inconsistent tree node %d%n\" +\n-                    \"  nodeType:%d%n  currentNodeGeneration:%d%n  successor:%d%n  successorGeneration:%d%n\" +\n-                    \"  keyCount:%d%n  searchResult:%d%n  pos:%d%n\" +\n-                    \"  rightSibling:%d%n  rightSiblingGeneration:%d\",\n-                    cursor.getCurrentPageId(), nodeType, currentNodeGeneration, successor, successorGeneration,\n-                    keyCount, searchResult, pos, pointerId, pointerGeneration );\n+            throw new TreeInconsistencyException( \"Read inconsistent tree node %d%n\" + \"  nodeType:%d%n  currentNodeGeneration:%d%n  successor:%d%n  successorGeneration:%d%n\" + \"  keyCount:%d%n  searchResult:%d%n  pos:%d%n\" + \"  rightSibling:%d%n  rightSiblingGeneration:%d\",\n+                    cursor.getCurrentPageId(), nodeType, currentNodeGeneration, successor, successorGeneration, keyCount, searchResult, pos, pointerId, pointerGeneration );\n         }\n \n         if ( !verifyFirstKeyInNodeIsExpectedAfterGoTo() )\n@@ -719,14 +713,12 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n     {\n         if ( exactMatch )\n         {\n-            return seekForward ? layout.compare( mutableKeys[cachedIndex], toExclusive ) <= 0\n-                               : layout.compare( mutableKeys[cachedIndex], toExclusive ) >= 0;\n-        }\n+            return seekForward ? layout.compare( mutableKeys[cachedIndex], toExclusive ) <= 0 : layout.compare( mutableKeys[cachedIndex], toExclusive ) >= 0;\n+    }\n         else\n         {\n-            return seekForward ? layout.compare( mutableKeys[cachedIndex], toExclusive ) < 0\n-                               : layout.compare( mutableKeys[cachedIndex], toExclusive ) > 0;\n-        }\n+            return seekForward ? layout.compare( mutableKeys[cachedIndex], toExclusive ) < 0 : layout.compare( mutableKeys[cachedIndex], toExclusive ) > 0;\n+    }\n     }\n \n     /**\n@@ -735,8 +727,7 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n      */\n     private boolean insideStartRange()\n     {\n-        return seekForward ? layout.compare( mutableKeys[cachedIndex], fromInclusive ) >= 0\n-                           : layout.compare( mutableKeys[cachedIndex], fromInclusive ) <= 0;\n+        return seekForward ? layout.compare( mutableKeys[cachedIndex], fromInclusive ) >= 0 : layout.compare( mutableKeys[cachedIndex], fromInclusive ) <= 0;\n     }\n \n     /**\n@@ -749,8 +740,8 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n         {\n             return insideStartRange();\n         }\n-        return seekForward ? layout.compare( mutableKeys[cachedIndex], prevKey ) > 0\n-                           : layout.compare( mutableKeys[cachedIndex], prevKey ) < 0;\n+\n+return seekForward ? layout.compare( mutableKeys[cachedIndex], prevKey ) > 0 : layout.compare( mutableKeys[cachedIndex], prevKey ) < 0;\n     }\n \n     /**\n@@ -818,7 +809,8 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n             concurrentWriteHappened = true;\n             result = false;\n         }\n-        verifyExpectedFirstAfterGoToNext = false;\n+\n+verifyExpectedFirstAfterGoToNext = false;\n         return result;\n     }\n \n@@ -827,20 +819,16 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n      */\n     private long readPrevSibling()\n     {\n-        return seekForward ?\n-               TreeNode.leftSibling( cursor, stableGeneration, unstableGeneration ) :\n-               TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration );\n-    }\n+        return seekForward ? TreeNode.leftSibling( cursor, stableGeneration, unstableGeneration ) : TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration );\n+            }\n \n     /**\n      * @return the read next sibling, depending on the direction this seek is going.\n      */\n     private long readNextSibling()\n     {\n-        return seekForward ?\n-               TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration ) :\n-               TreeNode.leftSibling( cursor, stableGeneration, unstableGeneration );\n-    }\n+        return seekForward ? TreeNode.rightSibling( cursor, stableGeneration, unstableGeneration ) : TreeNode.leftSibling( cursor, stableGeneration, unstableGeneration );\n+            }\n \n     /**\n      * Does a binary search for the given {@code key} in the current tree node and returns its position.\n@@ -861,7 +849,8 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n         {\n             pos++;\n         }\n-        return pos;\n+\n+return pos;\n     }\n \n     /**\n@@ -879,17 +868,16 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n         }\n \n         currentNodeGeneration = TreeNode.generation( cursor );\n-\n-        successor = TreeNode.successor( cursor, stableGeneration, unstableGeneration );\n+successor = TreeNode.successor( cursor, stableGeneration, unstableGeneration );\n         if ( GenerationSafePointerPair.isSuccess( successor ) )\n         {\n             successorGeneration = bTreeNode.pointerGeneration( cursor, successor );\n         }\n-        isInternal = TreeNode.isInternal( cursor );\n+\n+isInternal = TreeNode.isInternal( cursor );\n         // Find the left-most key within from-range\n         keyCount = TreeNode.keyCount( cursor );\n-\n-        return keyCountIsSane( keyCount );\n+return keyCountIsSane( keyCount );\n     }\n \n     private boolean endedUpOnExpectedNode()\n@@ -1017,9 +1005,10 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n                 // on shouldRetry here.\n                 return false;\n             }\n-            checkOutOfBounds( this.cursor );\n+\n+checkOutOfBounds( this.cursor );\n         }\n-        return !(nodeType != TreeNode.NODE_TYPE_TREE_NODE || !keyCountIsSane( keyCount ));\n+        return !( nodeType != TreeNode.NODE_TYPE_TREE_NODE || !keyCountIsSane( keyCount ));\n     }\n \n     /**\n@@ -1107,7 +1096,7 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n     {\n         if ( lastFollowedPointerGeneration != 0 )\n         {\n-            if ( currentNodeGeneration > lastFollowedPointerGeneration )\n+            if ( currentNodeGeneration> lastFollowedPointerGeneration )\n             {\n                 // We've just followed a pointer to a new node, we have arrived there and made\n                 // the first read on it. It looks like the node we arrived at have a higher generation\n@@ -1115,7 +1104,8 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n                 // following the pointer and reading the node after getting there.\n                 return false;\n             }\n-            lastFollowedPointerGeneration = 0;\n+\n+lastFollowedPointerGeneration = 0;\n             expectedCurrentNodeGeneration = currentNodeGeneration;\n         }\n         else if ( currentNodeGeneration != expectedCurrentNodeGeneration )\n@@ -1191,4 +1181,4 @@ class SeekCursor<KEY,VALUE> implements RawCursor<Hit<KEY,VALUE>,IOException>, Hi\n         cursor.close();\n         closed = true;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 73
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}