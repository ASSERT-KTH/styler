{
    "project_name": "twilio-twilio-java",
    "error_id": "1014",
    "information": {
        "errors": [
            {
                "line": "283",
                "severity": "error",
                "message": "'if' child has incorrect indentation level 11, expected level should be 12.",
                "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
            }
        ]
    },
    "source_code": "                throw new ApiException(\"Server Error, no content\");\n            }\n           throw new ApiException(restException);\n        }\n\n        return Page.fromJson(",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler/1014/EventReader.java\nindex c99afd30a9a..446cfd740b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler/1014/EventReader.java\n@@ -280,7 +280,7 @@ public class EventReader extends Reader<Event> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/intellij/1014/EventReader.java\nindex c99afd30a9a..e7b5af64991 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/intellij/1014/EventReader.java\n@@ -1,8 +1,8 @@\n /**\n  * This code was generated by\n  * \\ / _    _  _|   _  _\n- *  | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n- *       /       /\n+ * | (_)\\/(_)(_|\\/| |(/_  v1.0.0\n+ * /       /\n  */\n \n package com.twilio.rest.taskrouter.v1.workspace;\n@@ -280,7 +280,7 @@ public class EventReader extends Reader<Event> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/codebuff/1014/EventReader.java\nindex c99afd30a9a..0008bff2e7c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/codebuff/1014/EventReader.java\n@@ -40,6 +40,8 @@ public class EventReader extends Reader<Event> {\n      *\n      * @param pathWorkspaceSid The SID of the Workspace with the Events to read\n      */\n+\n+\n     public EventReader(final String pathWorkspaceSid) {\n         this.pathWorkspaceSid = pathWorkspaceSid;\n     }\n@@ -51,6 +53,8 @@ public class EventReader extends Reader<Event> {\n      * @param endDate Only include usage that occurred on or before this date\n      * @return this\n      */\n+\n+\n     public EventReader setEndDate(final DateTime endDate) {\n         this.endDate = endDate;\n         return this;\n@@ -62,6 +66,8 @@ public class EventReader extends Reader<Event> {\n      * @param eventType The type of Events to read\n      * @return this\n      */\n+\n+\n     public EventReader setEventType(final String eventType) {\n         this.eventType = eventType;\n         return this;\n@@ -74,6 +80,8 @@ public class EventReader extends Reader<Event> {\n      * @param minutes The period of events to read in minutes\n      * @return this\n      */\n+\n+\n     public EventReader setMinutes(final Integer minutes) {\n         this.minutes = minutes;\n         return this;\n@@ -86,6 +94,8 @@ public class EventReader extends Reader<Event> {\n      * @param reservationSid The SID of the Reservation with the Events to read\n      * @return this\n      */\n+\n+\n     public EventReader setReservationSid(final String reservationSid) {\n         this.reservationSid = reservationSid;\n         return this;\n@@ -98,6 +108,8 @@ public class EventReader extends Reader<Event> {\n      * @param startDate Only include Events from on or after this date\n      * @return this\n      */\n+\n+\n     public EventReader setStartDate(final DateTime startDate) {\n         this.startDate = startDate;\n         return this;\n@@ -110,6 +122,8 @@ public class EventReader extends Reader<Event> {\n      * @param taskQueueSid The SID of the TaskQueue with the Events to read\n      * @return this\n      */\n+\n+\n     public EventReader setTaskQueueSid(final String taskQueueSid) {\n         this.taskQueueSid = taskQueueSid;\n         return this;\n@@ -122,6 +136,8 @@ public class EventReader extends Reader<Event> {\n      * @param taskSid The SID of the Task with the Events to read\n      * @return this\n      */\n+\n+\n     public EventReader setTaskSid(final String taskSid) {\n         this.taskSid = taskSid;\n         return this;\n@@ -134,6 +150,8 @@ public class EventReader extends Reader<Event> {\n      * @param workerSid The SID of the Worker with the Events to read\n      * @return this\n      */\n+\n+\n     public EventReader setWorkerSid(final String workerSid) {\n         this.workerSid = workerSid;\n         return this;\n@@ -146,6 +164,8 @@ public class EventReader extends Reader<Event> {\n      * @param workflowSid The SID of the Worker with the Events to read\n      * @return this\n      */\n+\n+\n     public EventReader setWorkflowSid(final String workflowSid) {\n         this.workflowSid = workflowSid;\n         return this;\n@@ -158,6 +178,8 @@ public class EventReader extends Reader<Event> {\n      * @param taskChannel The TaskChannel with the Events to read\n      * @return this\n      */\n+\n+\n     public EventReader setTaskChannel(final String taskChannel) {\n         this.taskChannel = taskChannel;\n         return this;\n@@ -169,6 +191,8 @@ public class EventReader extends Reader<Event> {\n      * @param sid The unique string that identifies the resource\n      * @return this\n      */\n+\n+\n     public EventReader setSid(final String sid) {\n         this.sid = sid;\n         return this;\n@@ -180,6 +204,7 @@ public class EventReader extends Reader<Event> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Event ResourceSet\n      */\n+\n     @Override\n     public ResourceSet<Event> read(final TwilioRestClient client) {\n         return new ResourceSet<>(this, client, firstPage(client));\n@@ -191,14 +216,15 @@ public class EventReader extends Reader<Event> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Event ResourceSet\n      */\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n     public Page<Event> firstPage(final TwilioRestClient client) {\n         Request request = new Request(\n-            HttpMethod.GET,\n-            Domains.TASKROUTER.toString(),\n-            \"/v1/Workspaces/\" + this.pathWorkspaceSid + \"/Events\",\n-            client.getRegion()\n+                              HttpMethod.GET,\n+                              Domains.TASKROUTER.toString(),\n+                              \"/v1/Workspaces/\" + this.pathWorkspaceSid + \"/Events\",\n+                              client.getRegion()\n         );\n \n         addQueryParams(request);\n@@ -212,14 +238,12 @@ public class EventReader extends Reader<Event> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Event ResourceSet\n      */\n+\n     @Override\n     @SuppressWarnings(\"checkstyle:linelength\")\n-    public Page<Event> getPage(final String targetUrl, final TwilioRestClient client) {\n-        Request request = new Request(\n-            HttpMethod.GET,\n-            targetUrl\n-        );\n-\n+    public Page<Event> getPage(final String targetUrl,\n+                               final TwilioRestClient client) {\n+        Request request = new Request(HttpMethod.GET, targetUrl);\n         return pageForRequest(client, request);\n     }\n \n@@ -230,15 +254,13 @@ public class EventReader extends Reader<Event> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Next Page\n      */\n+\n     @Override\n     public Page<Event> nextPage(final Page<Event> page,\n                                 final TwilioRestClient client) {\n         Request request = new Request(\n-            HttpMethod.GET,\n-            page.getNextPageUrl(\n-                Domains.TASKROUTER.toString(),\n-                client.getRegion()\n-            )\n+                              HttpMethod.GET,\n+                              page.getNextPageUrl(Domains.TASKROUTER.toString(), client.getRegion())\n         );\n         return pageForRequest(client, request);\n     }\n@@ -250,15 +272,13 @@ public class EventReader extends Reader<Event> {\n      * @param client TwilioRestClient with which to make the request\n      * @return Previous Page\n      */\n+\n     @Override\n     public Page<Event> previousPage(final Page<Event> page,\n                                     final TwilioRestClient client) {\n         Request request = new Request(\n-            HttpMethod.GET,\n-            page.getPreviousPageUrl(\n-                Domains.TASKROUTER.toString(),\n-                client.getRegion()\n-            )\n+                              HttpMethod.GET,\n+                              page.getPreviousPageUrl(Domains.TASKROUTER.toString(), client.getRegion())\n         );\n         return pageForRequest(client, request);\n     }\n@@ -270,9 +290,11 @@ public class EventReader extends Reader<Event> {\n      * @param request Request to generate a page for\n      * @return Page for the Request\n      */\n-    private Page<Event> pageForRequest(final TwilioRestClient client, final Request request) {\n-        Response response = client.request(request);\n \n+\n+    private Page<Event> pageForRequest(final TwilioRestClient client,\n+                                       final Request request) {\n+        Response response = client.request(request);\n         if (response == null) {\n             throw new ApiConnectionException(\"Event read failed: Unable to connect to server\");\n         } else if (!TwilioRestClient.SUCCESS.apply(response.getStatusCode())) {\n@@ -280,15 +302,11 @@ public class EventReader extends Reader<Event> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n-        return Page.fromJson(\n-            \"events\",\n-            response.getContent(),\n-            Event.class,\n-            client.getObjectMapper()\n-        );\n+        return Page.fromJson(\"events\", response.getContent(), Event.class, client.getObjectMapper());\n     }\n \n     /**\n@@ -296,6 +314,8 @@ public class EventReader extends Reader<Event> {\n      *\n      * @param request Request to add query string arguments to\n      */\n+\n+\n     private void addQueryParams(final Request request) {\n         if (endDate != null) {\n             request.addQueryParam(\"EndDate\", endDate.toString());\n",
            "diff_size": 65
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_random/1014/EventReader.java\nindex c99afd30a9a..446cfd740b4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_random/1014/EventReader.java\n@@ -280,7 +280,7 @@ public class EventReader extends Reader<Event> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_three_grams/1014/EventReader.java\nindex c99afd30a9a..0aa0b43845a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/errored/1/1014/EventReader.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/twilio-twilio-java/styler_three_grams/1014/EventReader.java\n@@ -280,7 +280,8 @@ public class EventReader extends Reader<Event> {\n             if (restException == null) {\n                 throw new ApiException(\"Server Error, no content\");\n             }\n-           throw new ApiException(restException);\n+\n+            throw new ApiException(restException);\n         }\n \n         return Page.fromJson(\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}