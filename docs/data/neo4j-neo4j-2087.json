{
    "project_name": "neo4j-neo4j",
    "error_id": "2087",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "134",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "83",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2087/GBPTreeCleanupJob.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2087/GBPTreeCleanupJob.java\nindex 2a13c164c6b..dc7478f593b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2087/GBPTreeCleanupJob.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2087/GBPTreeCleanupJob.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import java.nio.file.Path;\n@@ -33,11 +34,11 @@ class GBPTreeCleanupJob implements CleanupJob\n \n     /**\n      * @param crashGenerationCleaner {@link CrashGenerationCleaner} to use for cleaning.\n-     * @param gbpTreeLock {@link GBPTreeLock} to be released when job has either successfully finished or failed.\n-     * @param monitor {@link GBPTree.Monitor} to report to\n-     * @param indexFile Target file\n+     * @param gbpTreeLock            {@link GBPTreeLock} to be released when job has either successfully finished or failed.\n+     * @param monitor                {@link GBPTree.Monitor} to report to\n+     * @param indexFile              Target file\n      */\n-    GBPTreeCleanupJob( CrashGenerationCleaner crashGenerationCleaner, GBPTreeLock gbpTreeLock, GBPTree.Monitor monitor, Path indexFile )\n+    GBPTreeCleanupJob(CrashGenerationCleaner crashGenerationCleaner, GBPTreeLock gbpTreeLock, GBPTree.Monitor monitor, Path indexFile)\n     {\n         this.crashGenerationCleaner = crashGenerationCleaner;\n         this.gbpTreeLock = gbpTreeLock;\n@@ -73,16 +74,15 @@ class GBPTreeCleanupJob implements CleanupJob\n     }\n \n     @Override\n-    public void run( Executor executor )\n+    public void run(Executor executor)\n     {\n         try\n         {\n-            crashGenerationCleaner.clean( executor );\n+            crashGenerationCleaner.clean(executor);\n             needed = false;\n-        }\n-        catch ( Throwable e )\n+        } catch (Throwable e)\n         {\n-            monitor.cleanupFailed( e );\n+            monitor.cleanupFailed(e);\n             failure = e;\n         }\n     }\n@@ -90,10 +90,10 @@ class GBPTreeCleanupJob implements CleanupJob\n     @Override\n     public String toString()\n     {\n-        StringJoiner joiner = new StringJoiner( \", \", \"CleanupJob(\", \")\" );\n-        joiner.add( \"file=\" + indexFile.toAbsolutePath() );\n-        joiner.add( \"needed=\" + needed );\n-        joiner.add( \"failure=\" + failure );\n+        StringJoiner joiner = new StringJoiner(\", \", \"CleanupJob(\", \")\");\n+        joiner.add(\"file=\" + indexFile.toAbsolutePath());\n+        joiner.add(\"needed=\" + needed);\n+        joiner.add(\"failure=\" + failure);\n         return joiner.toString();\n     }\n }\n",
            "diff_size": 14
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}