{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4373",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "20",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "63",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "66",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "73",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "78",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "81",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4373/MathUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4373/MathUtil.java\nindex f5fec2b4902..2dd21931b27 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4373/MathUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4373/MathUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.helpers;\n \n import java.math.BigDecimal;\n@@ -24,111 +25,107 @@ import java.util.Arrays;\n \n public class MathUtil\n {\n-    private static final long NON_DOUBLE_LONG = 0xFFE0_0000_0000_0000L; // doubles are exact integers up to 53 bits\n+  private static final long NON_DOUBLE_LONG = 0xFFE0_0000_0000_0000L; // doubles are exact integers up to 53 bits\n \n-    private MathUtil()\n-    {\n-        throw new AssertionError();\n-    }\n+  private MathUtil()\n+  {\n+    throw new AssertionError();\n+  }\n \n-    /**\n-     * Calculates the portion of the first value to all values passed\n-     * @param n The values in the set\n-     * @return the ratio of n[0] to the sum all n, 0 if result is {@link Double#NaN}\n-     */\n-    public static double portion( double... n )\n-    {\n-        assert n.length > 0;\n+  /**\n+   * Calculates the portion of the first value to all values passed\n+   *\n+   * @param n The values in the set\n+   * @return the ratio of n[0] to the sum all n, 0 if result is {@link Double#NaN}\n+   */\n+  public static double portion(double... n)\n+  {\n+    assert n.length > 0;\n \n-        double first = n[0];\n-        if ( numbersEqual( first, 0 ) )\n-        {\n-            return 0d;\n-        }\n-        double total = Arrays.stream(n).sum();\n-        return first / total;\n+    double first = n[0];\n+    if (numbersEqual(first, 0))\n+    {\n+      return 0d;\n     }\n+    double total = Arrays.stream(n).sum();\n+    return first / total;\n+  }\n \n-    public static boolean numbersEqual( double fpn, long in )\n+  public static boolean numbersEqual(double fpn, long in)\n+  {\n+    if (in < 0)\n     {\n-        if ( in < 0 )\n-        {\n-            if ( fpn < 0.0 )\n-            {\n-                if ( (NON_DOUBLE_LONG & in) == NON_DOUBLE_LONG ) // the high order bits are only sign bits\n-                { // no loss of precision if converting the long to a double, so it's safe to compare as double\n-                    return fpn == in;\n-                }\n-                else if ( fpn < Long.MIN_VALUE )\n-                { // the double is too big to fit in a long, they cannot be equal\n-                    return false;\n-                }\n-                else if ( (fpn == Math.floor( fpn )) && !Double.isInfinite( fpn ) ) // no decimals\n-                { // safe to compare as long\n-                    return in == (long) fpn;\n-                }\n-            }\n+      if (fpn < 0.0)\n+      {\n+        if ((NON_DOUBLE_LONG & in) == NON_DOUBLE_LONG) // the high order bits are only sign bits\n+        { // no loss of precision if converting the long to a double, so it's safe to compare as double\n+          return fpn == in;\n+        } else if (fpn < Long.MIN_VALUE)\n+        { // the double is too big to fit in a long, they cannot be equal\n+          return false;\n+        } else if ((fpn == Math.floor(fpn)) && !Double.isInfinite(fpn)) // no decimals\n+        { // safe to compare as long\n+          return in == (long) fpn;\n         }\n-        else\n-        {\n-            if ( !(fpn < 0.0) )\n-            {\n-                if ( (NON_DOUBLE_LONG & in) == 0 ) // the high order bits are only sign bits\n-                { // no loss of precision if converting the long to a double, so it's safe to compare as double\n-                    return fpn == in;\n-                }\n-                else if ( fpn > Long.MAX_VALUE )\n-                { // the double is too big to fit in a long, they cannot be equal\n-                    return false;\n-                }\n-                else if ( (fpn == Math.floor( fpn )) && !Double.isInfinite( fpn ) )  // no decimals\n-                { // safe to compare as long\n-                    return in == (long) fpn;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-\n-    // Tested by PropertyValueComparisonTest\n-    public static int compareDoubleAgainstLong( double lhs, long rhs )\n+      }\n+    } else\n     {\n-        if  ( (NON_DOUBLE_LONG & rhs ) != NON_DOUBLE_LONG )\n-        {\n-            if ( Double.isNaN( lhs ) )\n-            {\n-                return +1;\n-            }\n-            if ( Double.isInfinite( lhs ) )\n-            {\n-                return lhs < 0 ? -1 : +1;\n-            }\n-            return BigDecimal.valueOf( lhs ).compareTo( BigDecimal.valueOf( rhs ) );\n+      if (!(fpn < 0.0))\n+      {\n+        if ((NON_DOUBLE_LONG & in) == 0) // the high order bits are only sign bits\n+        { // no loss of precision if converting the long to a double, so it's safe to compare as double\n+          return fpn == in;\n+        } else if (fpn > Long.MAX_VALUE)\n+        { // the double is too big to fit in a long, they cannot be equal\n+          return false;\n+        } else if ((fpn == Math.floor(fpn)) && !Double.isInfinite(fpn))  // no decimals\n+        { // safe to compare as long\n+          return in == (long) fpn;\n         }\n-        return Double.compare( lhs, rhs );\n+      }\n     }\n+    return false;\n+  }\n \n-    // Tested by PropertyValueComparisonTest\n-    public static int compareLongAgainstDouble( long lhs, double rhs )\n+  // Tested by PropertyValueComparisonTest\n+  public static int compareDoubleAgainstLong(double lhs, long rhs)\n+  {\n+    if ((NON_DOUBLE_LONG & rhs) != NON_DOUBLE_LONG)\n     {\n-        return - compareDoubleAgainstLong( rhs, lhs );\n+      if (Double.isNaN(lhs))\n+      {\n+        return +1;\n+      }\n+      if (Double.isInfinite(lhs))\n+      {\n+        return lhs < 0 ? -1 : +1;\n+      }\n+      return BigDecimal.valueOf(lhs).compareTo(BigDecimal.valueOf(rhs));\n     }\n+    return Double.compare(lhs, rhs);\n+  }\n \n-    /**\n-     * Return an integer one less than the given integer, or throw {@link ArithmeticException} if the given integer is\n-     * zero.\n-     *\n-     * @param value integer to decrement\n-     * @return the provided integer minus one\n-     * @throws ArithmeticException if the resulting integer would be less than zero\n-     */\n-    public static int decrementExactNotPastZero( int value )\n+  // Tested by PropertyValueComparisonTest\n+  public static int compareLongAgainstDouble(long lhs, double rhs)\n+  {\n+    return -compareDoubleAgainstLong(rhs, lhs);\n+  }\n+\n+  /**\n+   * Return an integer one less than the given integer, or throw {@link ArithmeticException} if the given integer is\n+   * zero.\n+   *\n+   * @param value integer to decrement\n+   * @return the provided integer minus one\n+   * @throws ArithmeticException if the resulting integer would be less than zero\n+   */\n+  public static int decrementExactNotPastZero(int value)\n+  {\n+    if (value == 0)\n     {\n-        if ( value == 0 )\n-        {\n-            throw new ArithmeticException( \"integer underflow past zero\" );\n-        }\n-        return value - 1;\n+      throw new ArithmeticException(\"integer underflow past zero\");\n     }\n+    return value - 1;\n+  }\n }\n \n",
            "diff_size": 121
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "80",
                    "column": "30",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4373/MathUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4373/MathUtil.java\nindex f5fec2b4902..3f273eeaa7f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4373/MathUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4373/MathUtil.java\n@@ -38,7 +38,7 @@ public class MathUtil\n      */\n     public static double portion( double... n )\n     {\n-        assert n.length > 0;\n+        assert n.length> 0;\n \n         double first = n[0];\n         if ( numbersEqual( first, 0 ) )\n@@ -55,7 +55,7 @@ public class MathUtil\n         {\n             if ( fpn < 0.0 )\n             {\n-                if ( (NON_DOUBLE_LONG & in) == NON_DOUBLE_LONG ) // the high order bits are only sign bits\n+                if ( ( NON_DOUBLE_LONG & in) == NON_DOUBLE_LONG ) // the high order bits are only sign bits\n                 { // no loss of precision if converting the long to a double, so it's safe to compare as double\n                     return fpn == in;\n                 }\n@@ -63,7 +63,7 @@ public class MathUtil\n                 { // the double is too big to fit in a long, they cannot be equal\n                     return false;\n                 }\n-                else if ( (fpn == Math.floor( fpn )) && !Double.isInfinite( fpn ) ) // no decimals\n+                else if ( ( fpn == Math.floor( fpn )) && !Double.isInfinite( fpn ) ) // no decimals\n                 { // safe to compare as long\n                     return in == (long) fpn;\n                 }\n@@ -71,17 +71,17 @@ public class MathUtil\n         }\n         else\n         {\n-            if ( !(fpn < 0.0) )\n+            if ( !( fpn < 0.0) )\n             {\n-                if ( (NON_DOUBLE_LONG & in) == 0 ) // the high order bits are only sign bits\n+                if ( ( NON_DOUBLE_LONG & in) == 0 ) // the high order bits are only sign bits\n                 { // no loss of precision if converting the long to a double, so it's safe to compare as double\n                     return fpn == in;\n                 }\n-                else if ( fpn > Long.MAX_VALUE )\n+                else if ( fpn> Long.MAX_VALUE )\n                 { // the double is too big to fit in a long, they cannot be equal\n                     return false;\n                 }\n-                else if ( (fpn == Math.floor( fpn )) && !Double.isInfinite( fpn ) )  // no decimals\n+                else if ( ( fpn == Math.floor( fpn )) && !Double.isInfinite( fpn ) )// no decimals\n                 { // safe to compare as long\n                     return in == (long) fpn;\n                 }\n@@ -93,19 +93,22 @@ public class MathUtil\n     // Tested by PropertyValueComparisonTest\n     public static int compareDoubleAgainstLong( double lhs, long rhs )\n     {\n-        if  ( (NON_DOUBLE_LONG & rhs ) != NON_DOUBLE_LONG )\n+        if ( ( NON_DOUBLE_LONG & rhs ) != NON_DOUBLE_LONG )\n         {\n             if ( Double.isNaN( lhs ) )\n             {\n-                return +1;\n+                return + 1;\n             }\n-            if ( Double.isInfinite( lhs ) )\n+\n+if ( Double.isInfinite( lhs ) )\n             {\n-                return lhs < 0 ? -1 : +1;\n+                return lhs < 0 ? -1 : + 1;\n             }\n-            return BigDecimal.valueOf( lhs ).compareTo( BigDecimal.valueOf( rhs ) );\n+\n+return BigDecimal.valueOf( lhs ).compareTo( BigDecimal.valueOf( rhs ) );\n         }\n-        return Double.compare( lhs, rhs );\n+\n+return Double.compare( lhs, rhs );\n     }\n \n     // Tested by PropertyValueComparisonTest\n@@ -128,7 +131,7 @@ public class MathUtil\n         {\n             throw new ArithmeticException( \"integer underflow past zero\" );\n         }\n-        return value - 1;\n-    }\n-}\n \n+return value - 1;\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}