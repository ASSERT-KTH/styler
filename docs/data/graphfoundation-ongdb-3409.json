{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3409",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "60",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "78",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "78",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "137",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3409/RecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3409/RecordFormat.java\nindex 53dd05478ec..9fb798ed374 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3409/RecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3409/RecordFormat.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store.format;\n \n import java.io.IOException;\n@@ -37,113 +38,114 @@ import org.neo4j.kernel.impl.store.record.RecordLoad;\n  */\n public interface RecordFormat<RECORD extends AbstractBaseRecord>\n {\n-    int NO_RECORD_SIZE = 1;\n+  int NO_RECORD_SIZE = 1;\n \n-    /**\n-     * Instantiates a new record to use in {@link #read(AbstractBaseRecord, PageCursor, RecordLoad, int)}\n-     * and {@link #write(AbstractBaseRecord, PageCursor, int)}. Records may be reused, which is why the instantiation\n-     * is separated from reading and writing.\n-     *\n-     * @return a new record instance, usable in {@link #read(AbstractBaseRecord, PageCursor, RecordLoad, int)}\n-     * and {@link #write(AbstractBaseRecord, PageCursor, int)}.\n-     */\n-    RECORD newRecord();\n+  /**\n+   * Instantiates a new record to use in {@link #read(AbstractBaseRecord, PageCursor, RecordLoad, int)}\n+   * and {@link #write(AbstractBaseRecord, PageCursor, int)}. Records may be reused, which is why the instantiation\n+   * is separated from reading and writing.\n+   *\n+   * @return a new record instance, usable in {@link #read(AbstractBaseRecord, PageCursor, RecordLoad, int)}\n+   * and {@link #write(AbstractBaseRecord, PageCursor, int)}.\n+   */\n+  RECORD newRecord();\n \n-    /**\n-     * Returns the record size for this format. Supplied here is the {@link StoreHeader store header} of the\n-     * owning store, which may contain data affecting the record size.\n-     *\n-     * @param storeHeader {@link StoreHeader} with header information from the store.\n-     * @return record size of records of this format and store.\n-     */\n-    int getRecordSize( StoreHeader storeHeader );\n+  /**\n+   * Returns the record size for this format. Supplied here is the {@link StoreHeader store header} of the\n+   * owning store, which may contain data affecting the record size.\n+   *\n+   * @param storeHeader {@link StoreHeader} with header information from the store.\n+   * @return record size of records of this format and store.\n+   */\n+  int getRecordSize(StoreHeader storeHeader);\n \n-    /**\n-     * @deprecated since only being applicable to {@link DynamicRecord} formats.\n-     * @return header size of records of this format. This is only applicable to {@link DynamicRecord}\n-     * format and may not need to be in this interface.\n-     */\n-    @Deprecated\n-    int getRecordHeaderSize();\n+  /**\n+   * @return header size of records of this format. This is only applicable to {@link DynamicRecord}\n+   * format and may not need to be in this interface.\n+   * @deprecated since only being applicable to {@link DynamicRecord} formats.\n+   */\n+  @Deprecated\n+  int getRecordHeaderSize();\n \n-    /**\n-     * Quickly determines whether or not record starting right at where the {@code cursor} is placed\n-     * is in use or not.\n-     *\n-     * @param cursor {@link PageCursor} to read data from, placed at the start of record to determine\n-     * in use status of.\n-     * @return whether or not the record at where the {@code cursor} is placed is in use.\n-     */\n-    boolean isInUse( PageCursor cursor );\n+  /**\n+   * Quickly determines whether or not record starting right at where the {@code cursor} is placed\n+   * is in use or not.\n+   *\n+   * @param cursor {@link PageCursor} to read data from, placed at the start of record to determine\n+   *               in use status of.\n+   * @return whether or not the record at where the {@code cursor} is placed is in use.\n+   */\n+  boolean isInUse(PageCursor cursor);\n \n-    /**\n-     * Reads data from {@code cursor} of the format specified by this implementation into {@code record}.\n-     * The cursor is placed at the beginning of the record id, which also {@code record}\n-     * {@link AbstractBaseRecord#getId() refers to}.\n-     *\n-     * @param record to put read data into, replacing any existing data in that record object.\n-     * @param cursor {@link PageCursor} to read data from.\n-     * @param mode {@link RecordLoad} mode of reading.\n-     * See {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad)} for more information.\n-     * @param recordSize size of records of this format. This is passed in like this since not all formats\n-     * know the record size in advance, but may be read from store header when opening the store.\n-     * @throws IOException on error reading.\n-     */\n-    void read( RECORD record, PageCursor cursor, RecordLoad mode, int recordSize ) throws IOException;\n+  /**\n+   * Reads data from {@code cursor} of the format specified by this implementation into {@code record}.\n+   * The cursor is placed at the beginning of the record id, which also {@code record}\n+   * {@link AbstractBaseRecord#getId() refers to}.\n+   *\n+   * @param record     to put read data into, replacing any existing data in that record object.\n+   * @param cursor     {@link PageCursor} to read data from.\n+   * @param mode       {@link RecordLoad} mode of reading.\n+   *                   See {@link RecordStore#getRecord(long, AbstractBaseRecord, RecordLoad)} for more information.\n+   * @param recordSize size of records of this format. This is passed in like this since not all formats\n+   *                   know the record size in advance, but may be read from store header when opening the store.\n+   * @throws IOException on error reading.\n+   */\n+  void read(RECORD record, PageCursor cursor, RecordLoad mode, int recordSize) throws IOException;\n \n-    /**\n-     * Called when all changes about a record has been gathered\n-     * and before it's time to convert into a command. The original reason for introducing this is the\n-     * thing with record units, where we need to know whether or not a record will span two units\n-     * before even writing to the log as a command. The format is the pluggable entity which knows\n-     * about the format and therefore the potential length of it and can update the given record with\n-     * additional information which needs to be written to the command, carried back inside the record\n-     * itself.\n-     *\n-     * @param record record to prepare, potentially updating it with more information before converting\n-     * into a command.\n-     * @param recordSize size of each record.\n-     * @param idSequence source of new ids if such are required be generated.\n-     */\n-    void prepare( RECORD record, int recordSize, IdSequence idSequence );\n+  /**\n+   * Called when all changes about a record has been gathered\n+   * and before it's time to convert into a command. The original reason for introducing this is the\n+   * thing with record units, where we need to know whether or not a record will span two units\n+   * before even writing to the log as a command. The format is the pluggable entity which knows\n+   * about the format and therefore the potential length of it and can update the given record with\n+   * additional information which needs to be written to the command, carried back inside the record\n+   * itself.\n+   *\n+   * @param record     record to prepare, potentially updating it with more information before converting\n+   *                   into a command.\n+   * @param recordSize size of each record.\n+   * @param idSequence source of new ids if such are required be generated.\n+   */\n+  void prepare(RECORD record, int recordSize, IdSequence idSequence);\n \n-    /**\n-     * Writes record contents to the {@code cursor} in the format specified by this implementation.\n-     *\n-     * @param record containing data to write.\n-     * @param cursor {@link PageCursor} to write the record data into.\n-     * @param recordSize size of records of this format. This is passed in like this since not all formats\n-     * know the record size in advance, but may be read from store header when opening the store.\n-     * @throws IOException on error writing.\n-     */\n-    void write( RECORD record, PageCursor cursor, int recordSize ) throws IOException;\n+  /**\n+   * Writes record contents to the {@code cursor} in the format specified by this implementation.\n+   *\n+   * @param record     containing data to write.\n+   * @param cursor     {@link PageCursor} to write the record data into.\n+   * @param recordSize size of records of this format. This is passed in like this since not all formats\n+   *                   know the record size in advance, but may be read from store header when opening the store.\n+   * @throws IOException on error writing.\n+   */\n+  void write(RECORD record, PageCursor cursor, int recordSize) throws IOException;\n \n-    /**\n-     * @param record to obtain \"next\" reference from.\n-     * @return \"next\" reference of records of this type.\n-     * @see RecordStore#getNextRecordReference(AbstractBaseRecord)\n-     */\n-    long getNextRecordReference( RECORD record );\n+  /**\n+   * @param record to obtain \"next\" reference from.\n+   * @return \"next\" reference of records of this type.\n+   * @see RecordStore#getNextRecordReference(AbstractBaseRecord)\n+   */\n+  long getNextRecordReference(RECORD record);\n \n-    /**\n-     * Can be used to compare against another {@link RecordFormat}, returns {@code true} the format\n-     * represented by {@code obj} is the exact same as this format.\n-     *\n-     * @param otherFormat other format to compare with.\n-     * @return whether or not the other format is the same as this one.\n-     */\n-    @Override\n-    boolean equals( Object otherFormat );\n+  /**\n+   * Can be used to compare against another {@link RecordFormat}, returns {@code true} the format\n+   * represented by {@code obj} is the exact same as this format.\n+   *\n+   * @param otherFormat other format to compare with.\n+   * @return whether or not the other format is the same as this one.\n+   */\n+  @Override\n+  boolean equals(Object otherFormat);\n \n-    /**\n-     * To match {@link #equals(Object)}.\n-     */\n-    @Override\n-    int hashCode();\n+  /**\n+   * To match {@link #equals(Object)}.\n+   */\n+  @Override\n+  int hashCode();\n \n-    /**\n-     * Maximum number that can be used to as id in specified format\n-     * @return maximum possible id\n-     */\n-    long getMaxId();\n+  /**\n+   * Maximum number that can be used to as id in specified format\n+   *\n+   * @return maximum possible id\n+   */\n+  long getMaxId();\n }\n",
            "diff_size": 100
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3409/RecordFormat.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3409/RecordFormat.java\nindex 53dd05478ec..878dba8954b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3409/RecordFormat.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3409/RecordFormat.java\n@@ -146,4 +146,4 @@ public interface RecordFormat<RECORD extends AbstractBaseRecord>\n      * @return maximum possible id\n      */\n     long getMaxId();\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}