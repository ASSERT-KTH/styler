{
    "project_name": "intuit-Tank",
    "error_id": "19",
    "information": {
        "errors": [
            {
                "line": "228",
                "column": "9",
                "severity": "warning",
                "message": "'}' at column 9 should be on the same line as the next part of a multi-block statement (one that directly contains multiple blocks: if/else-if/else, do/while or try/catch/finally).",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "        if (level > INFO) {\n            level = INFO;\n        }\n        else if (level < ERROR) {\n            level = ERROR;\n        }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/19/DefaultParserNotice.java\nindex e8ad153fabd..3c31f01220f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler/19/DefaultParserNotice.java\n@@ -225,8 +225,7 @@ public class DefaultParserNotice implements ParserNotice {\n     public void setLevel(int level) {\n         if (level > INFO) {\n             level = INFO;\n-        }\n-        else if (level < ERROR) {\n+        } else if (level < ERROR) {\n             level = ERROR;\n         }\n         this.level = level;\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/19/DefaultParserNotice.java\nindex e8ad153fabd..cb26b228673 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/intellij/19/DefaultParserNotice.java\n@@ -20,248 +20,234 @@\n  * License along with this library; if not, write to the Free Software\n  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA.\n  */\n+\n package org.fife.ui.rsyntaxtextarea.parser;\n \n import java.awt.Color;\n \n /**\n  * Base implementation of a parser notice.\n- * \n+ *\n  * @author Robert Futrell\n  * @version 0.1\n  */\n public class DefaultParserNotice implements ParserNotice {\n \n-    private Parser parser;\n-    private int level;\n-    private int line;\n-    private int offset;\n-    private int length;\n-    private boolean showInEditor;\n-    private Color color;\n-    private String message;\n-    private String toolTipText;\n-\n-    private static final Color[] DEFAULT_COLORS = {\n-            new Color(255, 0, 128), // Error\n-            new Color(244, 200, 45), // Warning\n-            Color.gray, // Info\n-    };\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @param parser\n-     *            The parser that created this notice.\n-     * @param msg\n-     *            The text of the message.\n-     * @param line\n-     *            The line number for the message.\n-     */\n-    public DefaultParserNotice(Parser parser, String msg, int line) {\n-        this(parser, msg, line, -1, -1);\n-    }\n-\n-    /**\n-     * Constructor.\n-     * \n-     * @param parser\n-     *            The parser that created this notice.\n-     * @param message\n-     *            The message.\n-     * @param line\n-     *            The line number corresponding to the message.\n-     * @param offset\n-     *            The offset in the input stream of the code the message is concerned with, or <code>-1</code> if\n-     *            unknown.\n-     * @param length\n-     *            The length of the code the message is concerned with, or <code>-1</code> if unknown.\n-     */\n-    public DefaultParserNotice(Parser parser, String message, int line,\n-            int offset, int length) {\n-        this.parser = parser;\n-        this.message = message;\n-        this.line = line;\n-        this.offset = offset;\n-        this.length = length;\n-        setLevel(ERROR);\n-        setShowInEditor(true);\n-    }\n-\n-    /**\n-     * Compares this parser notice to another.\n-     * \n-     * @param obj\n-     *            Another parser notice.\n-     * @return How the two parser notices should be sorted relative to one another.\n-     */\n-    public int compareTo(Object obj) {\n-        int diff = -1;\n-        if (obj instanceof ParserNotice) {\n-            ParserNotice p2 = (ParserNotice) obj;\n-            diff = level - p2.getLevel();\n-            if (diff == 0) {\n-                diff = line - p2.getLine();\n-                if (diff == 0) {\n-                    diff = message.compareTo(p2.getMessage());\n-                }\n-            }\n-        }\n-        return diff;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public boolean containsPosition(int pos) {\n-        return offset <= pos && pos < (offset + length);\n-    }\n-\n-    /**\n-     * Returns whether this parser notice is equal to another one.\n-     * \n-     * @param obj\n-     *            Another parser notice.\n-     * @return Whether the two notices are equal.\n-     */\n-    public boolean equals(Object obj) {\n-        return compareTo(obj) == 0;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public Color getColor() {\n-        Color c = color; // User-defined\n-        if (c == null) {\n-            c = DEFAULT_COLORS[getLevel()];\n-        }\n-        return c;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public int getLength() {\n-        return length;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public int getLevel() {\n-        return level;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public int getLine() {\n-        return line;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public int getOffset() {\n-        return offset;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public Parser getParser() {\n-        return parser;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public boolean getShowInEditor() {\n-        return showInEditor;\n-    }\n-\n-    /**\n-     * {@inheritDoc}\n-     */\n-    public String getToolTipText() {\n-        return toolTipText != null ? toolTipText : getMessage();\n-    }\n-\n-    /**\n-     * Returns the hash code for this notice.\n-     * \n-     * @return The hash code.\n-     */\n-    public int hashCode() {\n-        return (line << 16) | offset;\n-    }\n-\n-    /**\n-     * Sets the color to use when painting this notice.\n-     * \n-     * @param color\n-     *            The color to use.\n-     * @see #getColor()\n-     */\n-    public void setColor(Color color) {\n-        this.color = color;\n-    }\n-\n-    /**\n-     * Sets the level of this notice.\n-     * \n-     * @param level\n-     *            The new level.\n-     * @see #getLevel()\n-     */\n-    public void setLevel(int level) {\n-        if (level > INFO) {\n-            level = INFO;\n+  private Parser parser;\n+  private int level;\n+  private int line;\n+  private int offset;\n+  private int length;\n+  private boolean showInEditor;\n+  private Color color;\n+  private String message;\n+  private String toolTipText;\n+\n+  private static final Color[] DEFAULT_COLORS = {\n+    new Color(255, 0, 128), // Error\n+    new Color(244, 200, 45), // Warning\n+    Color.gray, // Info\n+  };\n+\n+  /**\n+   * Constructor.\n+   *\n+   * @param parser The parser that created this notice.\n+   * @param msg    The text of the message.\n+   * @param line   The line number for the message.\n+   */\n+  public DefaultParserNotice(Parser parser, String msg, int line) {\n+    this(parser, msg, line, -1, -1);\n+  }\n+\n+  /**\n+   * Constructor.\n+   *\n+   * @param parser  The parser that created this notice.\n+   * @param message The message.\n+   * @param line    The line number corresponding to the message.\n+   * @param offset  The offset in the input stream of the code the message is concerned with, or <code>-1</code> if\n+   *                unknown.\n+   * @param length  The length of the code the message is concerned with, or <code>-1</code> if unknown.\n+   */\n+  public DefaultParserNotice(Parser parser, String message, int line,\n+                             int offset, int length) {\n+    this.parser = parser;\n+    this.message = message;\n+    this.line = line;\n+    this.offset = offset;\n+    this.length = length;\n+    setLevel(ERROR);\n+    setShowInEditor(true);\n+  }\n+\n+  /**\n+   * Compares this parser notice to another.\n+   *\n+   * @param obj Another parser notice.\n+   * @return How the two parser notices should be sorted relative to one another.\n+   */\n+  public int compareTo(Object obj) {\n+    int diff = -1;\n+    if (obj instanceof ParserNotice) {\n+      ParserNotice p2 = (ParserNotice) obj;\n+      diff = level - p2.getLevel();\n+      if (diff == 0) {\n+        diff = line - p2.getLine();\n+        if (diff == 0) {\n+          diff = message.compareTo(p2.getMessage());\n         }\n-        else if (level < ERROR) {\n-            level = ERROR;\n-        }\n-        this.level = level;\n-    }\n-\n-    /**\n-     * Sets whether a squiggle underline should be drawn in the editor for this notice.\n-     * \n-     * @param show\n-     *            Whether to draw a squiggle underline.\n-     * @see #getShowInEditor()\n-     */\n-    public void setShowInEditor(boolean show) {\n-        showInEditor = show;\n-    }\n-\n-    /**\n-     * Sets the tooltip text to display for this notice.\n-     * \n-     * @param text\n-     *            The new tooltip text. This can be HTML. If this is <code>null</code>, then tooltips will return the\n-     *            same text as {@link #getMessage()}.\n-     * @see #getToolTipText()\n-     */\n-    public void setToolTipText(String text) {\n-        this.toolTipText = text;\n-    }\n-\n-    /**\n-     * Returns a string representation of this parser notice.\n-     * \n-     * @return This parser notice as a string.\n-     */\n-    public String toString() {\n-        return \"Line \" + getLine() + \": \" + getMessage();\n-    }\n+      }\n+    }\n+    return diff;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public boolean containsPosition(int pos) {\n+    return offset <= pos && pos < (offset + length);\n+  }\n+\n+  /**\n+   * Returns whether this parser notice is equal to another one.\n+   *\n+   * @param obj Another parser notice.\n+   * @return Whether the two notices are equal.\n+   */\n+  public boolean equals(Object obj) {\n+    return compareTo(obj) == 0;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public Color getColor() {\n+    Color c = color; // User-defined\n+    if (c == null) {\n+      c = DEFAULT_COLORS[getLevel()];\n+    }\n+    return c;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public int getLength() {\n+    return length;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public int getLevel() {\n+    return level;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public int getLine() {\n+    return line;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public String getMessage() {\n+    return message;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public int getOffset() {\n+    return offset;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public Parser getParser() {\n+    return parser;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public boolean getShowInEditor() {\n+    return showInEditor;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  public String getToolTipText() {\n+    return toolTipText != null ? toolTipText : getMessage();\n+  }\n+\n+  /**\n+   * Returns the hash code for this notice.\n+   *\n+   * @return The hash code.\n+   */\n+  public int hashCode() {\n+    return (line << 16) | offset;\n+  }\n+\n+  /**\n+   * Sets the color to use when painting this notice.\n+   *\n+   * @param color The color to use.\n+   * @see #getColor()\n+   */\n+  public void setColor(Color color) {\n+    this.color = color;\n+  }\n+\n+  /**\n+   * Sets the level of this notice.\n+   *\n+   * @param level The new level.\n+   * @see #getLevel()\n+   */\n+  public void setLevel(int level) {\n+    if (level > INFO) {\n+      level = INFO;\n+    } else if (level < ERROR) {\n+      level = ERROR;\n+    }\n+    this.level = level;\n+  }\n+\n+  /**\n+   * Sets whether a squiggle underline should be drawn in the editor for this notice.\n+   *\n+   * @param show Whether to draw a squiggle underline.\n+   * @see #getShowInEditor()\n+   */\n+  public void setShowInEditor(boolean show) {\n+    showInEditor = show;\n+  }\n+\n+  /**\n+   * Sets the tooltip text to display for this notice.\n+   *\n+   * @param text The new tooltip text. This can be HTML. If this is <code>null</code>, then tooltips will return the\n+   *             same text as {@link #getMessage()}.\n+   * @see #getToolTipText()\n+   */\n+  public void setToolTipText(String text) {\n+    this.toolTipText = text;\n+  }\n+\n+  /**\n+   * Returns a string representation of this parser notice.\n+   *\n+   * @return This parser notice as a string.\n+   */\n+  public String toString() {\n+    return \"Line \" + getLine() + \": \" + getMessage();\n+  }\n \n }\n\\ No newline at end of file\n",
            "diff_size": 347
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/19/DefaultParserNotice.java\nindex e8ad153fabd..477923481a4 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/codebuff/19/DefaultParserNotice.java\n@@ -22,6 +22,8 @@\n  */\n package org.fife.ui.rsyntaxtextarea.parser;\n \n+\n+\n import java.awt.Color;\n \n /**\n@@ -30,6 +32,8 @@ import java.awt.Color;\n  * @author Robert Futrell\n  * @version 0.1\n  */\n+\n+\n public class DefaultParserNotice implements ParserNotice {\n \n     private Parser parser;\n@@ -41,12 +45,11 @@ public class DefaultParserNotice implements ParserNotice {\n     private Color color;\n     private String message;\n     private String toolTipText;\n-\n     private static final Color[] DEFAULT_COLORS = {\n-            new Color(255, 0, 128), // Error\n-            new Color(244, 200, 45), // Warning\n-            Color.gray, // Info\n-    };\n+        new Color(255, 0, 128), // Error\n+        new Color(244, 200, 45), // Warning\n+        Color.gray, // Info\n+                                                  };\n \n     /**\n      * Constructor.\n@@ -58,6 +61,7 @@ public class DefaultParserNotice implements ParserNotice {\n      * @param line\n      *            The line number for the message.\n      */\n+\n     public DefaultParserNotice(Parser parser, String msg, int line) {\n         this(parser, msg, line, -1, -1);\n     }\n@@ -77,8 +81,9 @@ public class DefaultParserNotice implements ParserNotice {\n      * @param length\n      *            The length of the code the message is concerned with, or <code>-1</code> if unknown.\n      */\n-    public DefaultParserNotice(Parser parser, String message, int line,\n-            int offset, int length) {\n+\n+\n+    public DefaultParserNotice(Parser parser, String message, int line, int offset, int length) {\n         this.parser = parser;\n         this.message = message;\n         this.line = line;\n@@ -95,6 +100,8 @@ public class DefaultParserNotice implements ParserNotice {\n      *            Another parser notice.\n      * @return How the two parser notices should be sorted relative to one another.\n      */\n+\n+\n     public int compareTo(Object obj) {\n         int diff = -1;\n         if (obj instanceof ParserNotice) {\n@@ -113,6 +120,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public boolean containsPosition(int pos) {\n         return offset <= pos && pos < (offset + length);\n     }\n@@ -124,6 +133,8 @@ public class DefaultParserNotice implements ParserNotice {\n      *            Another parser notice.\n      * @return Whether the two notices are equal.\n      */\n+\n+\n     public boolean equals(Object obj) {\n         return compareTo(obj) == 0;\n     }\n@@ -131,6 +142,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public Color getColor() {\n         Color c = color; // User-defined\n         if (c == null) {\n@@ -142,6 +155,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public int getLength() {\n         return length;\n     }\n@@ -149,6 +164,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public int getLevel() {\n         return level;\n     }\n@@ -156,6 +173,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public int getLine() {\n         return line;\n     }\n@@ -163,6 +182,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public String getMessage() {\n         return message;\n     }\n@@ -170,6 +191,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public int getOffset() {\n         return offset;\n     }\n@@ -177,6 +200,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public Parser getParser() {\n         return parser;\n     }\n@@ -184,6 +209,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public boolean getShowInEditor() {\n         return showInEditor;\n     }\n@@ -191,6 +218,8 @@ public class DefaultParserNotice implements ParserNotice {\n     /**\n      * {@inheritDoc}\n      */\n+\n+\n     public String getToolTipText() {\n         return toolTipText != null ? toolTipText : getMessage();\n     }\n@@ -200,8 +229,11 @@ public class DefaultParserNotice implements ParserNotice {\n      * \n      * @return The hash code.\n      */\n+\n+\n     public int hashCode() {\n-        return (line << 16) | offset;\n+        return (line << 16)\n+            | offset;\n     }\n \n     /**\n@@ -211,6 +243,8 @@ public class DefaultParserNotice implements ParserNotice {\n      *            The color to use.\n      * @see #getColor()\n      */\n+\n+\n     public void setColor(Color color) {\n         this.color = color;\n     }\n@@ -222,11 +256,12 @@ public class DefaultParserNotice implements ParserNotice {\n      *            The new level.\n      * @see #getLevel()\n      */\n+\n+\n     public void setLevel(int level) {\n         if (level > INFO) {\n             level = INFO;\n-        }\n-        else if (level < ERROR) {\n+        } else if (level < ERROR) {\n             level = ERROR;\n         }\n         this.level = level;\n@@ -239,6 +274,8 @@ public class DefaultParserNotice implements ParserNotice {\n      *            Whether to draw a squiggle underline.\n      * @see #getShowInEditor()\n      */\n+\n+\n     public void setShowInEditor(boolean show) {\n         showInEditor = show;\n     }\n@@ -251,6 +288,8 @@ public class DefaultParserNotice implements ParserNotice {\n      *            same text as {@link #getMessage()}.\n      * @see #getToolTipText()\n      */\n+\n+\n     public void setToolTipText(String text) {\n         this.toolTipText = text;\n     }\n@@ -260,6 +299,8 @@ public class DefaultParserNotice implements ParserNotice {\n      * \n      * @return This parser notice as a string.\n      */\n+\n+\n     public String toString() {\n         return \"Line \" + getLine() + \": \" + getMessage();\n     }\n",
            "diff_size": 53
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/19/DefaultParserNotice.java\nindex e8ad153fabd..3c31f01220f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_random/19/DefaultParserNotice.java\n@@ -225,8 +225,7 @@ public class DefaultParserNotice implements ParserNotice {\n     public void setLevel(int level) {\n         if (level > INFO) {\n             level = INFO;\n-        }\n-        else if (level < ERROR) {\n+        } else if (level < ERROR) {\n             level = ERROR;\n         }\n         this.level = level;\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/19/DefaultParserNotice.java\nindex e8ad153fabd..3c31f01220f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/errored/1/19/DefaultParserNotice.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/intuit-Tank/styler_three_grams/19/DefaultParserNotice.java\n@@ -225,8 +225,7 @@ public class DefaultParserNotice implements ParserNotice {\n     public void setLevel(int level) {\n         if (level > INFO) {\n             level = INFO;\n-        }\n-        else if (level < ERROR) {\n+        } else if (level < ERROR) {\n             level = ERROR;\n         }\n         this.level = level;\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize"
    ]
}