{
    "project_name": "neo4j-neo4j",
    "error_id": "1366",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "36",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "57",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1366/SpatialIndexSettings.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1366/SpatialIndexSettings.java\nindex 9d07a3093a4..885ea5d84a2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1366/SpatialIndexSettings.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1366/SpatialIndexSettings.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema.config;\n \n import org.neo4j.annotations.service.ServiceProvider;\n@@ -32,45 +33,45 @@ import static org.neo4j.configuration.SettingValueParsers.INT;\n @ServiceProvider\n public class SpatialIndexSettings implements SettingsDeclaration\n {\n-    @Description( \"When searching the spatial index we need to convert a 2D range in the quad tree into a set of 1D ranges on the \" +\n-            \"underlying 1D space filling curve index. There is a balance to be made between many small 1D ranges that have few false \" +\n-            \"positives, and fewer, larger 1D ranges that have more false positives. The former has a more efficient filtering of false \" +\n-            \"positives, while the latter will have a more efficient search of the numerical index. The maximum depth to which the quad tree is \" +\n-            \"processed when mapping 2D to 1D is based on the size of the search area compared to the size of the 2D tiles at that depth. \" +\n-            \"This setting will cause the algorithm to search deeper, reducing false positives.\" )\n+    @Description(\"When searching the spatial index we need to convert a 2D range in the quad tree into a set of 1D ranges on the \" +\n+      \"underlying 1D space filling curve index. There is a balance to be made between many small 1D ranges that have few false \" +\n+      \"positives, and fewer, larger 1D ranges that have more false positives. The former has a more efficient filtering of false \" +\n+      \"positives, while the latter will have a more efficient search of the numerical index. The maximum depth to which the quad tree is \" +\n+      \"processed when mapping 2D to 1D is based on the size of the search area compared to the size of the 2D tiles at that depth. \" +\n+      \"This setting will cause the algorithm to search deeper, reducing false positives.\")\n     @Internal\n     public static final Setting<Integer> space_filling_curve_extra_levels =\n-            newBuilder( \"unsupported.dbms.index.spatial.curve.extra_levels\", INT, 1 ).build();\n+      newBuilder(\"unsupported.dbms.index.spatial.curve.extra_levels\", INT, 1).build();\n \n-    @Description( \"When searching the spatial index we need to convert a 2D range in the quad tree into a set of 1D ranges on the \" +\n-            \"underlying 1D space filling curve index. There is a balance to be made between many small 1D ranges that have few false \" +\n-            \"positives, and fewer, larger 1D ranges that have more false positives. The former has a more efficient filtering of false \" +\n-            \"positives, while the latter will have a more efficient search of the numerical index. The maximum depth to which the quad tree is \" +\n-            \"processed when mapping 2D to 1D is based on the size of the search area compared to the size of the 2D tiles at that depth. \" +\n-            \"When traversing the tree to this depth, we can stop early based on when the search envelope overlaps the current tile by \" +\n-            \"more than a certain threshold. The threshold is calculated based on depth, from the `top_threshold` at the top of the tree \" +\n-            \"to the `bottom_threshold` at the depth calculated by the area comparison. Setting the top to 0.99 and the bottom to 0.5, \" +\n-            \"for example would mean that if we reached the maximum depth, and the search area overlapped the current tile by more than \" +\n-            \"50%, we would stop traversing the tree, and return the 1D range for that entire tile to the search set. If the overlap is even \" +\n-            \"higher, we would stop higher in the tree. This technique reduces the number of 1D ranges passed to the underlying space filling \" +\n-            \"curve index. Setting this value to zero turns off this feature.\" )\n+    @Description(\"When searching the spatial index we need to convert a 2D range in the quad tree into a set of 1D ranges on the \" +\n+      \"underlying 1D space filling curve index. There is a balance to be made between many small 1D ranges that have few false \" +\n+      \"positives, and fewer, larger 1D ranges that have more false positives. The former has a more efficient filtering of false \" +\n+      \"positives, while the latter will have a more efficient search of the numerical index. The maximum depth to which the quad tree is \" +\n+      \"processed when mapping 2D to 1D is based on the size of the search area compared to the size of the 2D tiles at that depth. \" +\n+      \"When traversing the tree to this depth, we can stop early based on when the search envelope overlaps the current tile by \" +\n+      \"more than a certain threshold. The threshold is calculated based on depth, from the `top_threshold` at the top of the tree \" +\n+      \"to the `bottom_threshold` at the depth calculated by the area comparison. Setting the top to 0.99 and the bottom to 0.5, \" +\n+      \"for example would mean that if we reached the maximum depth, and the search area overlapped the current tile by more than \" +\n+      \"50%, we would stop traversing the tree, and return the 1D range for that entire tile to the search set. If the overlap is even \" +\n+      \"higher, we would stop higher in the tree. This technique reduces the number of 1D ranges passed to the underlying space filling \" +\n+      \"curve index. Setting this value to zero turns off this feature.\")\n     @Internal\n     public static final Setting<Double> space_filling_curve_top_threshold =\n-            newBuilder( \"unsupported.dbms.index.spatial.curve.top_threshold\", DOUBLE, 0.0 ).build();\n+      newBuilder(\"unsupported.dbms.index.spatial.curve.top_threshold\", DOUBLE, 0.0).build();\n \n-    @Description( \"When searching the spatial index we need to convert a 2D range in the quad tree into a set of 1D ranges on the \" +\n-            \"underlying 1D space filling curve index. There is a balance to be made between many small 1D ranges that have few false \" +\n-            \"positives, and fewer, larger 1D ranges that have more false positives. The former has a more efficient filtering of false \" +\n-            \"positives, while the latter will have a more efficient search of the numerical index. The maximum depth to which the quad tree is \" +\n-            \"processed when mapping 2D to 1D is based on the size of the search area compared to the size of the 2D tiles at that depth. \" +\n-            \"When traversing the tree to this depth, we can stop early based on when the search envelope overlaps the current tile by \" +\n-            \"more than a certain threshold. The threshold is calculated based on depth, from the `top_threshold` at the top of the tree \" +\n-            \"to the `bottom_threshold` at the depth calculated by the area comparison. Setting the top to 0.99 and the bottom to 0.5, \" +\n-            \"for example would mean that if we reached the maximum depth, and the search area overlapped the current tile by more than \" +\n-            \"50%, we would stop traversing the tree, and return the 1D range for that entire tile to the search set. If the overlap is even \" +\n-            \"higher, we would stop higher in the tree. This technique reduces the number of 1D ranges passed to the underlying space filling \" +\n-            \"curve index. Setting this value to zero turns off this feature.\" )\n+    @Description(\"When searching the spatial index we need to convert a 2D range in the quad tree into a set of 1D ranges on the \" +\n+      \"underlying 1D space filling curve index. There is a balance to be made between many small 1D ranges that have few false \" +\n+      \"positives, and fewer, larger 1D ranges that have more false positives. The former has a more efficient filtering of false \" +\n+      \"positives, while the latter will have a more efficient search of the numerical index. The maximum depth to which the quad tree is \" +\n+      \"processed when mapping 2D to 1D is based on the size of the search area compared to the size of the 2D tiles at that depth. \" +\n+      \"When traversing the tree to this depth, we can stop early based on when the search envelope overlaps the current tile by \" +\n+      \"more than a certain threshold. The threshold is calculated based on depth, from the `top_threshold` at the top of the tree \" +\n+      \"to the `bottom_threshold` at the depth calculated by the area comparison. Setting the top to 0.99 and the bottom to 0.5, \" +\n+      \"for example would mean that if we reached the maximum depth, and the search area overlapped the current tile by more than \" +\n+      \"50%, we would stop traversing the tree, and return the 1D range for that entire tile to the search set. If the overlap is even \" +\n+      \"higher, we would stop higher in the tree. This technique reduces the number of 1D ranges passed to the underlying space filling \" +\n+      \"curve index. Setting this value to zero turns off this feature.\")\n     @Internal\n     public static final Setting<Double> space_filling_curve_bottom_threshold =\n-            newBuilder( \"unsupported.dbms.index.spatial.curve.bottom_threshold\", DOUBLE, 0.0 ).build();\n+      newBuilder(\"unsupported.dbms.index.spatial.curve.bottom_threshold\", DOUBLE, 0.0).build();\n }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}