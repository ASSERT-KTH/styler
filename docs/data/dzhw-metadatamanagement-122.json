{
    "project_name": "dzhw-metadatamanagement",
    "error_id": "122",
    "information": {
        "errors": [
            {
                "line": "28",
                "column": "78",
                "severity": "error",
                "message": "'}' at column 78 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "  @Override\n  public void initialize(\n      StatisticsMinimumMustBeANumberOnNumericDataType constraintAnnotation) {}\n\n  /*\n   * (non-Javadoc)",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "28",
                    "column": "78",
                    "severity": "error",
                    "message": "'}' at column 78 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\nindex b99d475cd44..2d151eb9a11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n@@ -27,7 +27,7 @@ public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n   public void initialize(\n       StatisticsMinimumMustBeANumberOnNumericDataType constraintAnnotation) {}\n \n-  /*\n+      /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\nindex b99d475cd44..a2475cbea04 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/intellij/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n@@ -11,25 +11,25 @@ import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.Variable;\n /**\n  * Validates the statistics of a variable. It checks the minimum has a numeric string, if the\n  * variable has a numeric data type.\n- * \n- * @author Daniel Katzberg\n  *\n+ * @author Daniel Katzberg\n  */\n public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n     ConstraintValidator<StatisticsMinimumMustBeANumberOnNumericDataType, Variable> {\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n   @Override\n   public void initialize(\n-      StatisticsMinimumMustBeANumberOnNumericDataType constraintAnnotation) {}\n+      StatisticsMinimumMustBeANumberOnNumericDataType constraintAnnotation) {\n+  }\n \n   /*\n    * (non-Javadoc)\n-   * \n+   *\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "27",
                    "column": "78",
                    "severity": "error",
                    "message": "'}' at column 78 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'if' has incorrect indentation level 2, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 256).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\nindex b99d475cd44..3f57ebbea57 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/naturalize/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n@@ -15,8 +15,7 @@ import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.Variable;\n  * @author Daniel Katzberg\n  *\n  */\n-public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n-    ConstraintValidator<StatisticsMinimumMustBeANumberOnNumericDataType, Variable> {\n+public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements ConstraintValidator<StatisticsMinimumMustBeANumberOnNumericDataType, Variable> {\n \n   /*\n    * (non-Javadoc)\n@@ -27,7 +26,7 @@ public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n   public void initialize(\n       StatisticsMinimumMustBeANumberOnNumericDataType constraintAnnotation) {}\n \n-  /*\n+/*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n@@ -35,13 +34,8 @@ public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n    */\n   @Override\n   public boolean isValid(Variable variable, ConstraintValidatorContext context) {\n-\n-    if (variable == null\n-        || variable.getDataType() == null\n-        || variable.getDistribution() == null\n-        || variable.getDistribution().getStatistics() == null\n-        || variable.getDistribution().getStatistics().getMinimum() == null\n-        || !variable.getDataType().equals(DataTypes.NUMERIC)) {\n+  if (variable == null\n+        || variable.getDataType() == null || variable.getDistribution() == null || variable.getDistribution().getStatistics() == null || variable.getDistribution().getStatistics().getMinimum() == null || !variable.getDataType().equals(DataTypes.NUMERIC)) {\n       return true;\n     }\n \n@@ -54,4 +48,4 @@ public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n     }\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "18",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 149).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "19",
                    "severity": "error",
                    "message": "'Variable' has incorrect indentation level 0, expected level should be 4.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "42",
                    "severity": "error",
                    "message": "'ConstraintValidatorContext' has incorrect indentation level 4, expected level should be 6.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\nindex b99d475cd44..4e923195e17 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/codebuff/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n@@ -2,9 +2,7 @@ package eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.validation;\n \n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n-\n import org.apache.commons.lang3.math.NumberUtils;\n-\n import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.DataTypes;\n import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.Variable;\n \n@@ -15,17 +13,21 @@ import eu.dzhw.fdz.metadatamanagement.variablemanagement.domain.Variable;\n  * @author Daniel Katzberg\n  *\n  */\n-public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n-    ConstraintValidator<StatisticsMinimumMustBeANumberOnNumericDataType, Variable> {\n+\n+\n+public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements ConstraintValidator<StatisticsMinimumMustBeANumberOnNumericDataType,\n+Variable> {\n \n   /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#initialize(java.lang.annotation.Annotation)\n    */\n+\n   @Override\n-  public void initialize(\n-      StatisticsMinimumMustBeANumberOnNumericDataType constraintAnnotation) {}\n+  public void initialize(StatisticsMinimumMustBeANumberOnNumericDataType constraintAnnotation) {\n+\n+  }\n \n   /*\n    * (non-Javadoc)\n@@ -33,19 +35,22 @@ public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n    * javax.validation.ConstraintValidatorContext)\n    */\n-  @Override\n-  public boolean isValid(Variable variable, ConstraintValidatorContext context) {\n \n+\n+  @Override\n+  public boolean isValid(Variable variable,\n+    ConstraintValidatorContext context) {\n     if (variable == null\n         || variable.getDataType() == null\n         || variable.getDistribution() == null\n         || variable.getDistribution().getStatistics() == null\n-        || variable.getDistribution().getStatistics().getMinimum() == null\n+        || variable.getDistribution().getStatistics()\n+                                     .getMinimum() == null\n         || !variable.getDataType().equals(DataTypes.NUMERIC)) {\n       return true;\n     }\n-\n-    String minimum = variable.getDistribution().getStatistics().getMinimum();\n+    String minimum = variable.getDistribution().getStatistics()\n+                                               .getMinimum();\n     try {\n       NumberUtils.createNumber(minimum);\n       return true;\n@@ -53,5 +58,4 @@ public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n       return false;\n     }\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 22
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "28",
                    "column": "78",
                    "severity": "error",
                    "message": "'}' at column 78 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_random/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\nindex b99d475cd44..2d151eb9a11 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_random/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n@@ -27,7 +27,7 @@ public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n   public void initialize(\n       StatisticsMinimumMustBeANumberOnNumericDataType constraintAnnotation) {}\n \n-  /*\n+      /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "28",
                    "column": "78",
                    "severity": "error",
                    "message": "'}' at column 78 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "35",
                    "severity": "error",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\nindex b99d475cd44..d73ef6b2b5f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/errored/1/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/dzhw-metadatamanagement/styler_three_grams/122/StatisticsMinimumMustBeANumberOnNumericDataTypeValidator.java\n@@ -26,8 +26,7 @@ public class StatisticsMinimumMustBeANumberOnNumericDataTypeValidator implements\n   @Override\n   public void initialize(\n       StatisticsMinimumMustBeANumberOnNumericDataType constraintAnnotation) {}\n-\n-  /*\n+      /*\n    * (non-Javadoc)\n    * \n    * @see javax.validation.ConstraintValidator#isValid(java.lang.Object,\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}