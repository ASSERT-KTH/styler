{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "420",
    "information": {
        "errors": [
            {
                "line": "113",
                "column": "45",
                "severity": "warning",
                "message": "'}' at column 45 should be on a new line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "    assertEquals(SOURCE_BLOB_ID, copyRequest6.source());\n    assertEquals(TARGET_BLOB_ID, copyRequest6.targetId());\n    assertNull(copyRequest6.targetInfo());  }\n}",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/420/CopyRequestTest.java\nindex 5700ea804cd..04a40504036 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/420/CopyRequestTest.java\n@@ -110,5 +110,6 @@ public class CopyRequestTest {\n         Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_ID);\n     assertEquals(SOURCE_BLOB_ID, copyRequest6.source());\n     assertEquals(TARGET_BLOB_ID, copyRequest6.targetId());\n-    assertNull(copyRequest6.targetInfo());  }\n+    assertNull(copyRequest6.targetInfo());\n+  }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/420/CopyRequestTest.java\nindex 5700ea804cd..04a40504036 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/420/CopyRequestTest.java\n@@ -110,5 +110,6 @@ public class CopyRequestTest {\n         Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_ID);\n     assertEquals(SOURCE_BLOB_ID, copyRequest6.source());\n     assertEquals(TARGET_BLOB_ID, copyRequest6.targetId());\n-    assertNull(copyRequest6.targetInfo());  }\n+    assertNull(copyRequest6.targetInfo());\n+  }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "43",
                    "severity": "warning",
                    "message": "'member def modifier' has incorrect indentation level 0, expected level should be 2.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 2, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/420/CopyRequestTest.java\nindex 5700ea804cd..e349747f803 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/420/CopyRequestTest.java\n@@ -40,7 +40,7 @@ public class CopyRequestTest {\n   private static final BlobInfo TARGET_BLOB_INFO = BlobInfo.builder(TARGET_BLOB_ID)\n       .contentType(TARGET_BLOB_CONTENT_TYPE).build();\n \n-  @Rule\n+@Rule\n   public ExpectedException thrown = ExpectedException.none();\n \n   @Test\n@@ -110,5 +110,6 @@ public class CopyRequestTest {\n         Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_ID);\n     assertEquals(SOURCE_BLOB_ID, copyRequest6.source());\n     assertEquals(TARGET_BLOB_ID, copyRequest6.targetId());\n-    assertNull(copyRequest6.targetInfo());  }\n-}\n+    assertNull(copyRequest6.targetInfo());\n+  }\n+  }\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "40",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 130).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "47",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 221).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "55",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 145).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "59",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "63",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "76",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "80",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 118).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "88",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 116).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/420/CopyRequestTest.java\nindex 5700ea804cd..4f7c852fde3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/420/CopyRequestTest.java\n@@ -23,11 +23,11 @@ import static org.junit.Assert.assertNull;\n import com.google.common.collect.ImmutableList;\n import com.google.gcloud.storage.Storage.BlobSourceOption;\n import com.google.gcloud.storage.Storage.BlobTargetOption;\n-\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n \n+\n public class CopyRequestTest {\n \n   private static final String SOURCE_BUCKET_NAME = \"b0\";\n@@ -37,19 +37,14 @@ public class CopyRequestTest {\n   private static final String TARGET_BLOB_CONTENT_TYPE = \"contentType\";\n   private static final BlobId SOURCE_BLOB_ID = BlobId.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME);\n   private static final BlobId TARGET_BLOB_ID = BlobId.of(TARGET_BUCKET_NAME, TARGET_BLOB_NAME);\n-  private static final BlobInfo TARGET_BLOB_INFO = BlobInfo.builder(TARGET_BLOB_ID)\n-      .contentType(TARGET_BLOB_CONTENT_TYPE).build();\n+  private static final BlobInfo TARGET_BLOB_INFO = BlobInfo.builder(TARGET_BLOB_ID).contentType(TARGET_BLOB_CONTENT_TYPE).build();\n \n   @Rule\n   public ExpectedException thrown = ExpectedException.none();\n \n   @Test\n   public void testCopyRequest() {\n-    Storage.CopyRequest copyRequest1 = Storage.CopyRequest.builder()\n-        .source(SOURCE_BLOB_ID)\n-        .sourceOptions(BlobSourceOption.generationMatch(1))\n-        .target(TARGET_BLOB_INFO, BlobTargetOption.predefinedAcl(PUBLIC_READ))\n-        .build();\n+    Storage.CopyRequest copyRequest1 = Storage.CopyRequest.builder().source(SOURCE_BLOB_ID).sourceOptions(BlobSourceOption.generationMatch(1)).target(TARGET_BLOB_INFO, BlobTargetOption.predefinedAcl(PUBLIC_READ)).build();\n     assertEquals(SOURCE_BLOB_ID, copyRequest1.source());\n     assertEquals(1, copyRequest1.sourceOptions().size());\n     assertEquals(BlobSourceOption.generationMatch(1), copyRequest1.sourceOptions().get(0));\n@@ -57,24 +52,15 @@ public class CopyRequestTest {\n     assertEquals(TARGET_BLOB_INFO, copyRequest1.targetInfo());\n     assertEquals(1, copyRequest1.targetOptions().size());\n     assertEquals(BlobTargetOption.predefinedAcl(PUBLIC_READ), copyRequest1.targetOptions().get(0));\n-\n-    Storage.CopyRequest copyRequest2 = Storage.CopyRequest.builder()\n-        .source(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME)\n-        .target(TARGET_BLOB_ID)\n-        .build();\n+    Storage.CopyRequest copyRequest2 = Storage.CopyRequest.builder().source(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME).target(TARGET_BLOB_ID).build();\n     assertEquals(SOURCE_BLOB_ID, copyRequest2.source());\n     assertEquals(TARGET_BLOB_ID, copyRequest2.targetId());\n     assertNull(copyRequest2.targetInfo());\n-\n-    Storage.CopyRequest copyRequest3 = Storage.CopyRequest.builder()\n-        .source(SOURCE_BLOB_ID)\n-        .target(TARGET_BLOB_INFO, ImmutableList.of(BlobTargetOption.predefinedAcl(PUBLIC_READ)))\n-        .build();\n+    Storage.CopyRequest copyRequest3 = Storage.CopyRequest.builder().source(SOURCE_BLOB_ID).target(TARGET_BLOB_INFO, ImmutableList.of(BlobTargetOption.predefinedAcl(PUBLIC_READ))).build();\n     assertEquals(SOURCE_BLOB_ID, copyRequest3.source());\n     assertEquals(TARGET_BLOB_INFO.blobId(), copyRequest3.targetId());\n     assertEquals(TARGET_BLOB_INFO, copyRequest3.targetInfo());\n-    assertEquals(ImmutableList.of(BlobTargetOption.predefinedAcl(PUBLIC_READ)),\n-        copyRequest3.targetOptions());\n+    assertEquals(ImmutableList.of(BlobTargetOption.predefinedAcl(PUBLIC_READ)), copyRequest3.targetOptions());\n   }\n \n   @Test\n@@ -83,32 +69,25 @@ public class CopyRequestTest {\n     assertEquals(SOURCE_BLOB_ID, copyRequest1.source());\n     assertEquals(TARGET_BLOB_INFO.blobId(), copyRequest1.targetId());\n     assertEquals(TARGET_BLOB_INFO, copyRequest1.targetInfo());\n-\n     Storage.CopyRequest copyRequest2 = Storage.CopyRequest.of(SOURCE_BLOB_ID, TARGET_BLOB_NAME);\n     assertEquals(SOURCE_BLOB_ID, copyRequest2.source());\n     assertEquals(BlobId.of(SOURCE_BUCKET_NAME, TARGET_BLOB_NAME), copyRequest2.targetId());\n     assertNull(copyRequest2.targetInfo());\n-\n-    Storage.CopyRequest copyRequest3 =\n-        Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_INFO);\n+    Storage.CopyRequest copyRequest3 = Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_INFO);\n     assertEquals(SOURCE_BLOB_ID, copyRequest3.source());\n     assertEquals(TARGET_BLOB_INFO.blobId(), copyRequest3.targetId());\n     assertEquals(TARGET_BLOB_INFO, copyRequest3.targetInfo());\n-\n-    Storage.CopyRequest copyRequest4 =\n-        Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_NAME);\n+    Storage.CopyRequest copyRequest4 = Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_NAME);\n     assertEquals(SOURCE_BLOB_ID, copyRequest4.source());\n     assertEquals(BlobId.of(SOURCE_BUCKET_NAME, TARGET_BLOB_NAME), copyRequest4.targetId());\n     assertNull(copyRequest4.targetInfo());\n-\n     Storage.CopyRequest copyRequest5 = Storage.CopyRequest.of(SOURCE_BLOB_ID, TARGET_BLOB_ID);\n     assertEquals(SOURCE_BLOB_ID, copyRequest5.source());\n     assertEquals(TARGET_BLOB_ID, copyRequest5.targetId());\n     assertNull(copyRequest5.targetInfo());\n-\n-    Storage.CopyRequest copyRequest6 =\n-        Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_ID);\n+    Storage.CopyRequest copyRequest6 = Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_ID);\n     assertEquals(SOURCE_BLOB_ID, copyRequest6.source());\n     assertEquals(TARGET_BLOB_ID, copyRequest6.targetId());\n-    assertNull(copyRequest6.targetInfo());  }\n-}\n+    assertNull(copyRequest6.targetInfo());\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/420/CopyRequestTest.java\nindex 5700ea804cd..04a40504036 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/420/CopyRequestTest.java\n@@ -110,5 +110,6 @@ public class CopyRequestTest {\n         Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_ID);\n     assertEquals(SOURCE_BLOB_ID, copyRequest6.source());\n     assertEquals(TARGET_BLOB_ID, copyRequest6.targetId());\n-    assertNull(copyRequest6.targetInfo());  }\n+    assertNull(copyRequest6.targetInfo());\n+  }\n }\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "115",
                    "severity": "warning",
                    "message": "'class def rcurly' has incorrect indentation level 2, expected level should be 0.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/420/CopyRequestTest.java\nindex 5700ea804cd..213017fe142 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/420/CopyRequestTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/420/CopyRequestTest.java\n@@ -110,5 +110,6 @@ public class CopyRequestTest {\n         Storage.CopyRequest.of(SOURCE_BUCKET_NAME, SOURCE_BLOB_NAME, TARGET_BLOB_ID);\n     assertEquals(SOURCE_BLOB_ID, copyRequest6.source());\n     assertEquals(TARGET_BLOB_ID, copyRequest6.targetId());\n-    assertNull(copyRequest6.targetInfo());  }\n-}\n+    assertNull(copyRequest6.targetInfo());\n+  }\n+  }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}