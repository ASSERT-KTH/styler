{
    "project_name": "Stratio-bdt",
    "error_id": "92",
    "information": {
        "errors": [
            {
                "line": "49",
                "severity": "error",
                "message": "'CTOR_DEF' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "     * @param spec object\n     */\n    public DcosSpec(CommonG spec) {\n        this.commonspec = spec;\n        this.restSpec = new RestSpec(spec);\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/92/DcosSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/92/DcosSpec.java\nindex 77d48d660b8..da1eba65030 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/92/DcosSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler/92/DcosSpec.java\n@@ -46,6 +46,7 @@ public class DcosSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n     public DcosSpec(CommonG spec) {\n         this.commonspec = spec;\n         this.restSpec = new RestSpec(spec);\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/92/DcosSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/92/DcosSpec.java\nindex 77d48d660b8..5732c0319c5 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/92/DcosSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/intellij/92/DcosSpec.java\n@@ -41,6 +41,7 @@ import static com.stratio.qa.assertions.Assertions.assertThat;\n public class DcosSpec extends BaseGSpec {\n \n     RestSpec restSpec;\n+\n     /**\n      * Generic constructor.\n      *\n@@ -62,14 +63,18 @@ public class DcosSpec extends BaseGSpec {\n      * @throws Exception exception\n      */\n     @Given(\"^I authenticate to DCOS cluster '(.+?)' using email '(.+?)'( with user '(.+?)'( and password '(.+?)'| and pem file '(.+?)'))?$\")\n-    public void authenticateDCOSpem(String remoteHost, String email, String foo, String user, String bar, String password, String pemFile) throws Exception {\n+    public void authenticateDCOSpem(String remoteHost, String email, String foo, String user,\n+                                    String bar, String password, String pemFile) throws Exception {\n         String DCOSsecret;\n         if (foo == null) {\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(\"root\", \"stratio\", remoteHost, null));\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(\"root\", \"stratio\", remoteHost, null));\n         } else {\n-            commonspec.setRemoteSSHConnection(new RemoteSSHConnection(user, password, remoteHost, pemFile));\n+            commonspec.setRemoteSSHConnection(\n+                new RemoteSSHConnection(user, password, remoteHost, pemFile));\n         }\n-        commonspec.getRemoteSSHConnection().runCommand(\"sudo cat /var/lib/dcos/dcos-oauth/auth-token-secret\");\n+        commonspec.getRemoteSSHConnection()\n+            .runCommand(\"sudo cat /var/lib/dcos/dcos-oauth/auth-token-secret\");\n         DCOSsecret = commonspec.getRemoteSSHConnection().getResult().trim();\n         setDCOSCookie(DCOSsecret, email);\n     }\n@@ -79,8 +84,11 @@ public class DcosSpec extends BaseGSpec {\n         final HashMap<String, Object> claims = new HashMap();\n         claims.put(\"uid\", email);\n         final String jwt = signer.sign(claims);\n-        com.ning.http.client.cookie.Cookie cookie = new com.ning.http.client.cookie.Cookie(\"dcos-acs-auth-cookie\", jwt, false, \"\", \"\", 99999, false, false);\n-        List<com.ning.http.client.cookie.Cookie> cookieList = new ArrayList<com.ning.http.client.cookie.Cookie>();\n+        com.ning.http.client.cookie.Cookie cookie =\n+            new com.ning.http.client.cookie.Cookie(\"dcos-acs-auth-cookie\", jwt, false, \"\", \"\",\n+                99999, false, false);\n+        List<com.ning.http.client.cookie.Cookie> cookieList =\n+            new ArrayList<com.ning.http.client.cookie.Cookie>();\n         cookieList.add(cookie);\n         commonspec.setCookies(cookieList);\n         ThreadProperty.set(\"dcosAuthCookie\", jwt);\n@@ -95,21 +103,26 @@ public class DcosSpec extends BaseGSpec {\n      * @throws Exception exception\n      */\n     @Given(\"^I( do not)? set sso token using host '(.+?)' with user '(.+?)' and password '(.+?)'( and tenant '(.+?)')?$\")\n-    public void setGoSecSSOCookie(String set, String ssoHost, String userName, String passWord, String foo, String tenant) throws Exception {\n+    public void setGoSecSSOCookie(String set, String ssoHost, String userName, String passWord,\n+                                  String foo, String tenant) throws Exception {\n         if (set == null) {\n-            HashMap<String, String> ssoCookies = new GosecSSOUtils(ssoHost, userName, passWord, tenant).ssoTokenGenerator();\n+            HashMap<String, String> ssoCookies =\n+                new GosecSSOUtils(ssoHost, userName, passWord, tenant).ssoTokenGenerator();\n             String[] tokenList = {\"user\", \"dcos-acs-auth-cookie\"};\n-            List<com.ning.http.client.cookie.Cookie> cookiesAtributes = addSsoToken(ssoCookies, tokenList);\n+            List<com.ning.http.client.cookie.Cookie> cookiesAtributes =\n+                addSsoToken(ssoCookies, tokenList);\n \n             commonspec.setCookies(cookiesAtributes);\n         }\n     }\n \n-    public List<com.ning.http.client.cookie.Cookie> addSsoToken(HashMap<String, String> ssoCookies, String[] tokenList) {\n+    public List<com.ning.http.client.cookie.Cookie> addSsoToken(HashMap<String, String> ssoCookies,\n+                                                                String[] tokenList) {\n         List<com.ning.http.client.cookie.Cookie> cookiesAttributes = new ArrayList<>();\n \n         for (String tokenKey : tokenList) {\n-            cookiesAttributes.add(new com.ning.http.client.cookie.Cookie(tokenKey, ssoCookies.get(tokenKey),\n+            cookiesAttributes\n+                .add(new com.ning.http.client.cookie.Cookie(tokenKey, ssoCookies.get(tokenKey),\n                     false, null,\n                     null, 999999, false, false));\n         }\n@@ -131,7 +144,8 @@ public class DcosSpec extends BaseGSpec {\n         //Get the list of currently used hosts\n         commonspec.executeCommand(\"dcos task | awk '{print $2}'\", 0, null);\n         String results = commonspec.getRemoteSSHConnection().getResult();\n-        Set<String> usedHosts = new HashSet(Arrays.asList(results.replaceAll(\"\\r\", \"\").split(\"\\n\")));\n+        Set<String> usedHosts =\n+            new HashSet(Arrays.asList(results.replaceAll(\"\\r\", \"\").split(\"\\n\")));\n \n         //We get the nodes not being used\n         hostList.removeAll(usedHosts);\n@@ -155,7 +169,8 @@ public class DcosSpec extends BaseGSpec {\n     public void checkServicesDistributionMultiDataCenter(String serviceList) throws Exception {\n         commonspec.executeCommand(\"dcos node --json >> aux.txt\", 0, null);\n         commonspec.executeCommand(\"cat aux.txt\", 0, null);\n-        checkDataCentersDistribution(serviceList.split(\",\"), obtainsDataCenters(commonspec.getRemoteSSHConnection().getResult()).split(\";\"));\n+        checkDataCentersDistribution(serviceList.split(\",\"),\n+            obtainsDataCenters(commonspec.getRemoteSSHConnection().getResult()).split(\";\"));\n         commonspec.executeCommand(\"rm -rf aux.txt\", 0, null);\n \n     }\n@@ -169,11 +184,14 @@ public class DcosSpec extends BaseGSpec {\n      * @throws Exception\n      */\n     @Given(\"^services '(.+?)' are splitted correctly in datacenters '(.+?)'$\")\n-    public void checkServicesDistributionMultiDataCenterPram(String serviceList, String dataCentersIps) throws Exception {\n+    public void checkServicesDistributionMultiDataCenterPram(String serviceList,\n+                                                             String dataCentersIps)\n+        throws Exception {\n         checkDataCentersDistribution(serviceList.split(\",\"), dataCentersIps.split(\";\"));\n     }\n \n-    public void checkDataCentersDistribution(String[] serviceListArray, String[] dataCentersIpsArray) throws Exception {\n+    public void checkDataCentersDistribution(String[] serviceListArray,\n+                                             String[] dataCentersIpsArray) throws Exception {\n         int[] expectedDistribution = new int[dataCentersIpsArray.length];\n         int[] results = new int[dataCentersIpsArray.length];\n         //Calculamos distribucion\n@@ -187,7 +205,9 @@ public class DcosSpec extends BaseGSpec {\n         }\n         ///Fin calculo distribucion\n         for (int i = 0; i < serviceListArray.length; i++) {\n-            commonspec.executeCommand(\"dcos task | grep \" + serviceListArray[i] + \" | awk '{print $2}'\", 0, null);\n+            commonspec\n+                .executeCommand(\"dcos task | grep \" + serviceListArray[i] + \" | awk '{print $2}'\",\n+                    0, null);\n             String service_ip = commonspec.getRemoteSSHConnection().getResult();\n             for (int x = 0; x < dataCentersIpsArray.length; x++) {\n                 if (dataCentersIpsArray[x].toLowerCase().contains(service_ip.toLowerCase())) {\n@@ -214,7 +234,8 @@ public class DcosSpec extends BaseGSpec {\n             if (existValue == null) {\n                 datacentersDistribution.put(datacenter, ip);\n             } else {\n-                datacentersDistribution.put(datacenter, datacentersDistribution.get(datacenter) + \",\" + ip);\n+                datacentersDistribution\n+                    .put(datacenter, datacentersDistribution.get(datacenter) + \",\" + ip);\n             }\n         }\n         String result = \"\";\n@@ -241,7 +262,9 @@ public class DcosSpec extends BaseGSpec {\n      * @throws Exception exception     *\n      */\n     @Given(\"^I get '(.+?)' from path '(.+?)' for value '(.+?)' with token '(.+?)',( unsecure)? vault host '(.+?)'( with exit status '(.+?)')? and save the value in environment variable '(.+?)'$\")\n-    public void getSecretInfo(String type, String path, String value, String token, String isUnsecure, String host, String contains, Integer exitStatus, String envVar) throws Exception {\n+    public void getSecretInfo(String type, String path, String value, String token,\n+                              String isUnsecure, String host, String contains, Integer exitStatus,\n+                              String envVar) throws Exception {\n \n         if (exitStatus == null) {\n             exitStatus = 0;\n@@ -257,7 +280,11 @@ public class DcosSpec extends BaseGSpec {\n         String command;\n         switch (type) {\n             case \"crt\":\n-                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" + httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value + \"_\" + type + \"\\\"' | sed 's/-----BEGIN CERTIFICATE-----/-----BEGIN CERTIFICATE-----#####/g' | sed 's/-----END CERTIFICATE-----/#####-----END CERTIFICATE-----/g' | sed 's/-----END CERTIFICATE----------BEGIN CERTIFICATE-----/-----END CERTIFICATE-----#####-----BEGIN CERTIFICATE-----/g' > \" + value + \".pem\";\n+                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" +\n+                    httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value + \"_\" +\n+                    type +\n+                    \"\\\"' | sed 's/-----BEGIN CERTIFICATE-----/-----BEGIN CERTIFICATE-----#####/g' | sed 's/-----END CERTIFICATE-----/#####-----END CERTIFICATE-----/g' | sed 's/-----END CERTIFICATE----------BEGIN CERTIFICATE-----/-----END CERTIFICATE-----#####-----BEGIN CERTIFICATE-----/g' > \" +\n+                    value + \".pem\";\n                 commonspec.runLocalCommand(command);\n                 commonspec.setCommandResult(commonspec.getCommandResult().replace(\"#####\", \"\\n\"));\n                 command = \"ls $PWD/\" + value + \".pem\";\n@@ -265,7 +292,11 @@ public class DcosSpec extends BaseGSpec {\n                 commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.TRUE);\n                 break;\n             case \"key\":\n-                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" + httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value + \"_\" + type + \"\\\"' | sed 's/-----BEGIN RSA PRIVATE KEY-----/-----BEGIN RSA PRIVATE KEY-----#####/g' | sed 's/-----END RSA PRIVATE KEY-----/#####-----END RSA PRIVATE KEY-----/g' > \" + value + \".key\";\n+                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" +\n+                    httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value + \"_\" +\n+                    type +\n+                    \"\\\"' | sed 's/-----BEGIN RSA PRIVATE KEY-----/-----BEGIN RSA PRIVATE KEY-----#####/g' | sed 's/-----END RSA PRIVATE KEY-----/#####-----END RSA PRIVATE KEY-----/g' > \" +\n+                    value + \".key\";\n                 commonspec.runLocalCommand(command);\n                 commonspec.setCommandResult(commonspec.getCommandResult().replace(\"#####\", \"\\n\"));\n                 command = \"ls $PWD/\" + value + \".key\";\n@@ -273,7 +304,10 @@ public class DcosSpec extends BaseGSpec {\n                 commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.TRUE);\n                 break;\n             case \"ca\":\n-                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" + httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value + \"_crt\\\"' | sed 's/-----BEGIN CERTIFICATE-----/-----BEGIN CERTIFICATE-----#####/g' | sed 's/-----END CERTIFICATE-----/#####-----END CERTIFICATE-----/g' > \" + value + \".crt\";\n+                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" +\n+                    httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value +\n+                    \"_crt\\\"' | sed 's/-----BEGIN CERTIFICATE-----/-----BEGIN CERTIFICATE-----#####/g' | sed 's/-----END CERTIFICATE-----/#####-----END CERTIFICATE-----/g' > \" +\n+                    value + \".crt\";\n                 commonspec.runLocalCommand(command);\n                 commonspec.setCommandResult(commonspec.getCommandResult().replace(\"#####\", \"\\n\"));\n                 command = \"ls $PWD/\" + value + \".crt\";\n@@ -281,14 +315,18 @@ public class DcosSpec extends BaseGSpec {\n                 commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.TRUE);\n                 break;\n             case \"keytab\":\n-                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" + httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value + \"_\" + type + \"\\\"' | base64 -d > \" + value + \".keytab\";\n+                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" +\n+                    httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value + \"_\" +\n+                    type + \"\\\"' | base64 -d > \" + value + \".keytab\";\n                 commonspec.runLocalCommand(command);\n                 command = \"ls $PWD/\" + value + \".keytab\";\n                 commonspec.runLocalCommand(command);\n                 commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.TRUE);\n                 break;\n             case \"principal\":\n-                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" + httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value + \"_\" + type + \"\\\"'\";\n+                command = \"curl -X GET -fskL --tlsv1.2 -H \\\"X-Vault-Token:\" + token + \"\\\" \\\"\" +\n+                    httpProtocol + host + \":8200/v1\" + path + \"\\\" | jq -r '.data.\\\"\" + value + \"_\" +\n+                    type + \"\\\"'\";\n                 commonspec.runLocalCommand(command);\n                 commonspec.runCommandLoggerAndEnvVar(exitStatus, envVar, Boolean.TRUE);\n                 break;\n@@ -314,8 +352,8 @@ public class DcosSpec extends BaseGSpec {\n     /**\n      * Check if json is validated against a schema\n      *\n-     * @param json    json to be validated against schema\n-     * @param schema  schema to be validated against\n+     * @param json   json to be validated against schema\n+     * @param schema schema to be validated against\n      * @throws Exception exception     *\n      */\n     @Given(\"^json (.+?) matches schema (.+?)$\")\n@@ -329,9 +367,9 @@ public class DcosSpec extends BaseGSpec {\n     /**\n      * Get service status\n      *\n-     * @param service   name of the service to be checked\n-     * @param cluster   URI of the cluster\n-     * @param envVar    environment variable where to store result\n+     * @param service name of the service to be checked\n+     * @param cluster URI of the cluster\n+     * @param envVar  environment variable where to store result\n      * @throws Exception exception     *\n      */\n     @Given(\"^I get service '(.+?)' status in cluster '(.+?)' and save it in variable '(.+?)'\")\n@@ -344,13 +382,14 @@ public class DcosSpec extends BaseGSpec {\n     /**\n      * Get service health status\n      *\n-     * @param service   name of the service to be checked\n-     * @param cluster   URI of the cluster\n-     * @param envVar    environment variable where to store result\n+     * @param service name of the service to be checked\n+     * @param cluster URI of the cluster\n+     * @param envVar  environment variable where to store result\n      * @throws Exception exception     *\n      */\n     @Given(\"^I get service '(.+?)' health status in cluster '(.+?)' and save it in variable '(.+?)'\")\n-    public void getServiceHealthStatus(String service, String cluster, String envVar) throws Exception {\n+    public void getServiceHealthStatus(String service, String cluster, String envVar)\n+        throws Exception {\n         String health = commonspec.retrieveHealthServiceStatus(service, cluster);\n \n         ThreadProperty.set(envVar, health);\n@@ -359,8 +398,8 @@ public class DcosSpec extends BaseGSpec {\n     /**\n      * Destroy specified service\n      *\n-     * @param service   name of the service to be destroyed\n-     * @param cluster   URI of the cluster\n+     * @param service name of the service to be destroyed\n+     * @param cluster URI of the cluster\n      * @throws Exception exception     *\n      */\n     @Given(\"^I destroy service '(.+?)' in cluster '(.+?)'\")\n@@ -372,10 +411,13 @@ public class DcosSpec extends BaseGSpec {\n         this.commonspec.setRestHost(cluster);\n         this.commonspec.setRestPort(\":443\");\n \n-        response = this.commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, null, \"json\");\n+        response =\n+            this.commonspec.generateRequest(\"DELETE\", true, null, null, endPoint, null, \"json\");\n \n         this.commonspec.setResponse(\"DELETE\", (Response) response.get());\n-        assertThat(this.commonspec.getResponse().getStatusCode()).as(\"It hasn't been possible to destroy service: \" + service).isIn(Arrays.asList(200, 202));\n+        assertThat(this.commonspec.getResponse().getStatusCode())\n+            .as(\"It hasn't been possible to destroy service: \" + service)\n+            .isIn(Arrays.asList(200, 202));\n     }\n \n     /**\n@@ -386,7 +428,8 @@ public class DcosSpec extends BaseGSpec {\n      */\n     @When(\"^All resources from service '(.+?)' have been freed$\")\n     public void checkResources(String service) throws Exception {\n-        restSpec.sendRequestNoDataTable(\"GET\", \"/mesos/state-summary\", null, null, null, null, null, \"json\");\n+        restSpec.sendRequestNoDataTable(\"GET\", \"/mesos/state-summary\", null, null, null, null, null,\n+            \"json\");\n \n         String json = \"[\" + commonspec.getResponse().getResponse() + \"]\";\n         String parsedElement = \"$..frameworks[?(@.active==false)].name\";\n@@ -405,23 +448,30 @@ public class DcosSpec extends BaseGSpec {\n      */\n     @Then(\"^I add a new DCOS label with key '(.+?)' and value '(.+?)' to the service '(.+?)'?$\")\n     public void sendAppendRequest(String key, String value, String service) throws Exception {\n-        commonspec.runCommandAndGetResult(\"touch \" + service + \".json && dcos marathon app show \" + service + \" > /dcos/\" + service + \".json\");\n+        commonspec.runCommandAndGetResult(\n+            \"touch \" + service + \".json && dcos marathon app show \" + service + \" > /dcos/\" +\n+                service + \".json\");\n         commonspec.runCommandAndGetResult(\"cat /dcos/\" + service + \".json\");\n \n         String configFile = commonspec.getRemoteSSHConnection().getResult();\n         String myValue = commonspec.getJSONPathString(configFile, \".labels\", \"0\");\n-        String myJson = commonspec.updateMarathonJson(commonspec.removeJSONPathElement(configFile, \"$.labels\"));\n+        String myJson =\n+            commonspec.updateMarathonJson(commonspec.removeJSONPathElement(configFile, \"$.labels\"));\n \n         String newValue = myValue.replaceFirst(\"\\\\{\", \"{\\\"\" + key + \"\\\": \\\"\" + value + \"\\\", \");\n         newValue = \"\\\"labels\\\":\" + newValue;\n-        String myFinalJson = myJson.replaceFirst(\"\\\\{\", \"{\" + newValue.replace(\"\\\\n\", \"\\\\\\\\n\") + \",\");\n+        String myFinalJson =\n+            myJson.replaceFirst(\"\\\\{\", \"{\" + newValue.replace(\"\\\\n\", \"\\\\\\\\n\") + \",\");\n         if (myFinalJson.contains(\"uris\")) {\n             String test = myFinalJson.replaceAll(\"\\\"uris\\\"\", \"\\\"none\\\"\");\n-            commonspec.runCommandAndGetResult(\"echo '\" + test + \"' > /dcos/final\" + service + \".json\");\n+            commonspec\n+                .runCommandAndGetResult(\"echo '\" + test + \"' > /dcos/final\" + service + \".json\");\n         } else {\n-            commonspec.runCommandAndGetResult(\"echo '\" + myFinalJson + \"' > /dcos/final\" + service + \".json\");\n+            commonspec.runCommandAndGetResult(\n+                \"echo '\" + myFinalJson + \"' > /dcos/final\" + service + \".json\");\n         }\n-        commonspec.runCommandAndGetResult(\"dcos marathon app update \" + service + \" < /dcos/final\" + service + \".json\");\n+        commonspec.runCommandAndGetResult(\n+            \"dcos marathon app update \" + service + \" < /dcos/final\" + service + \".json\");\n \n         commonspec.setCommandExitStatus(commonspec.getRemoteSSHConnection().getExitStatus());\n     }\n@@ -436,7 +486,9 @@ public class DcosSpec extends BaseGSpec {\n      */\n     @Then(\"^I modify marathon environment variable '(.+?)' with value '(.+?)' for service '(.+?)'?$\")\n     public void setMarathonProperty(String key, String value, String service) throws Exception {\n-        commonspec.runCommandAndGetResult(\"touch \" + service + \"-env.json && dcos marathon app show \" + service + \" > /dcos/\" + service + \"-env.json\");\n+        commonspec.runCommandAndGetResult(\n+            \"touch \" + service + \"-env.json && dcos marathon app show \" + service + \" > /dcos/\" +\n+                service + \"-env.json\");\n         commonspec.runCommandAndGetResult(\"cat /dcos/\" + service + \"-env.json\");\n \n         String configFile = commonspec.getRemoteSSHConnection().getResult();\n@@ -444,21 +496,24 @@ public class DcosSpec extends BaseGSpec {\n         String myJson4 = commonspec.updateMarathonJson(myJson1);\n         String myJson = myJson4.replaceAll(\"\\\"uris\\\"\", \"\\\"none\\\"\");\n \n-        commonspec.runCommandAndGetResult(\"echo '\" + myJson + \"' > /dcos/final\" + service + \"-env.json\");\n-        commonspec.runCommandAndGetResult(\"dcos marathon app update \" + service + \" < /dcos/final\" + service + \"-env.json\");\n+        commonspec\n+            .runCommandAndGetResult(\"echo '\" + myJson + \"' > /dcos/final\" + service + \"-env.json\");\n+        commonspec.runCommandAndGetResult(\n+            \"dcos marathon app update \" + service + \" < /dcos/final\" + service + \"-env.json\");\n         commonspec.setCommandExitStatus(commonspec.getRemoteSSHConnection().getExitStatus());\n     }\n \n     /**\n      * Check service status has value specified\n      *\n-     * @param service   name of the service to be checked\n-     * @param cluster   URI of the cluster\n-     * @param status    status expected\n+     * @param service name of the service to be checked\n+     * @param cluster URI of the cluster\n+     * @param status  status expected\n      * @throws Exception exception     *\n      */\n     @Then(\"^service '(.+?)' status in cluster '(.+?)' is '(suspended|running|deploying)'( in less than '(\\\\d+?)' seconds checking every '(\\\\d+?)' seconds)?\")\n-    public void serviceStatusCheck(String service, String cluster, String status, String foo, Integer totalWait, Integer interval) throws Exception {\n+    public void serviceStatusCheck(String service, String cluster, String status, String foo,\n+                                   Integer totalWait, Integer interval) throws Exception {\n         String response;\n         Integer i = 0;\n         boolean matched;\n@@ -468,27 +523,31 @@ public class DcosSpec extends BaseGSpec {\n         if (foo != null) {\n             matched = status.matches(response);\n             while (!matched && i < totalWait) {\n-                this.commonspec.getLogger().info(\"Service status not found yet after \" + i + \" seconds\");\n+                this.commonspec.getLogger()\n+                    .info(\"Service status not found yet after \" + i + \" seconds\");\n                 i = i + interval;\n                 response = commonspec.retrieveServiceStatus(service, cluster);\n                 matched = status.matches(response);\n             }\n         }\n \n-        assertThat(status).as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response).matches(response);\n+        assertThat(status)\n+            .as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response)\n+            .matches(response);\n \n     }\n \n     /**\n      * Check service health status has value specified\n      *\n-     * @param service   name of the service to be checked\n-     * @param cluster   URI of the cluster\n-     * @param status    health status expected\n+     * @param service name of the service to be checked\n+     * @param cluster URI of the cluster\n+     * @param status  health status expected\n      * @throws Exception exception     *\n      */\n     @Then(\"^service '(.+?)' health status in cluster '(.+?)' is '(unhealthy|healthy|unknown)'( in less than '(\\\\d+?)' seconds checking every '(\\\\d+?)' seconds)?\")\n-    public void serviceHealthStatusCheck(String service, String cluster, String status, String foo, Integer totalWait, Integer interval) throws Exception {\n+    public void serviceHealthStatusCheck(String service, String cluster, String status, String foo,\n+                                         Integer totalWait, Integer interval) throws Exception {\n         String response;\n         Integer i = 0;\n         boolean matched;\n@@ -498,26 +557,33 @@ public class DcosSpec extends BaseGSpec {\n         if (foo != null) {\n             matched = status.matches(response);\n             while (!matched && i < totalWait) {\n-                this.commonspec.getLogger().info(\"Service health status not found yet after \" + i + \" seconds\");\n+                this.commonspec.getLogger()\n+                    .info(\"Service health status not found yet after \" + i + \" seconds\");\n                 i = i + interval;\n                 response = commonspec.retrieveHealthServiceStatus(service, cluster);\n                 matched = status.matches(response);\n             }\n         }\n \n-        assertThat(status).as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response).matches(response);\n+        assertThat(status)\n+            .as(\"Expected status: \" + status + \" doesn't match obtained one: \" + response)\n+            .matches(response);\n     }\n \n     @Then(\"^I obtain metabase id for user '(.+?)' and password '(.+?)' in endpoint '(.+?)' and save in context cookies$\")\n     public void saveMetabaseCookie(String user, String password, String url) throws Exception {\n-        String command = \"curl -X POST -k -H \\\"Content-Type: application/json\\\" -d '{\\\"username\\\": \\\"\" + user + \"\\\", \\\"password\\\": \\\"\" + password + \"\\\"}' \" + url;\n+        String command =\n+            \"curl -X POST -k -H \\\"Content-Type: application/json\\\" -d '{\\\"username\\\": \\\"\" + user +\n+                \"\\\", \\\"password\\\": \\\"\" + password + \"\\\"}' \" + url;\n         commonspec.runLocalCommand(command);\n         commonspec.runCommandLoggerAndEnvVar(0, null, Boolean.TRUE);\n \n         Assertions.assertThat(commonspec.getCommandExitStatus()).isEqualTo(0);\n         String result = JsonPath.parse(commonspec.getCommandResult().trim()).read(\"$.id\");\n \n-        com.ning.http.client.cookie.Cookie cookie = new com.ning.http.client.cookie.Cookie(\"metabase.SESSION_ID\", result, false, \"\", \"\", 99999L, false, false);\n+        com.ning.http.client.cookie.Cookie cookie =\n+            new com.ning.http.client.cookie.Cookie(\"metabase.SESSION_ID\", result, false, \"\", \"\",\n+                99999L, false, false);\n         ArrayList cookieList = new ArrayList();\n         cookieList.add(cookie);\n         this.commonspec.setCookies(cookieList);\n",
            "diff_size": 126
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "297",
                    "severity": "error",
                    "message": "'switch rcurly' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/92/DcosSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/92/DcosSpec.java\nindex 77d48d660b8..3f5c01ff388 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/92/DcosSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/naturalize/92/DcosSpec.java\n@@ -41,7 +41,8 @@ import static com.stratio.qa.assertions.Assertions.assertThat;\n public class DcosSpec extends BaseGSpec {\n \n     RestSpec restSpec;\n-    /**\n+\n+/**\n      * Generic constructor.\n      *\n      * @param spec object\n@@ -110,8 +111,7 @@ public class DcosSpec extends BaseGSpec {\n \n         for (String tokenKey : tokenList) {\n             cookiesAttributes.add(new com.ning.http.client.cookie.Cookie(tokenKey, ssoCookies.get(tokenKey),\n-                    false, null,\n-                    null, 999999, false, false));\n+                    false, null, null, 999999, false, false));\n         }\n         return cookiesAttributes;\n     }\n@@ -294,8 +294,7 @@ public class DcosSpec extends BaseGSpec {\n                 break;\n             default:\n                 break;\n-        }\n-\n+    }\n     }\n \n     /**\n@@ -522,4 +521,4 @@ public class DcosSpec extends BaseGSpec {\n         cookieList.add(cookie);\n         this.commonspec.setCookies(cookieList);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/92/DcosSpec.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/92/DcosSpec.java\nindex 77d48d660b8..da1eba65030 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/errored/1/92/DcosSpec.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Stratio-bdt/styler_random/92/DcosSpec.java\n@@ -46,6 +46,7 @@ public class DcosSpec extends BaseGSpec {\n      *\n      * @param spec object\n      */\n+\n     public DcosSpec(CommonG spec) {\n         this.commonspec = spec;\n         this.restSpec = new RestSpec(spec);\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "49",
                    "severity": "error",
                    "message": "'CTOR_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}