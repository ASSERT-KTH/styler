{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1852",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1852/NonTransactionalDbmsOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1852/NonTransactionalDbmsOperations.java\nindex 9ae9a29fd65..673facf009c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1852/NonTransactionalDbmsOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1852/NonTransactionalDbmsOperations.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.api.dbms;\n \n import org.neo4j.collection.RawIterator;\n@@ -33,48 +34,48 @@ import org.neo4j.values.AnyValue;\n public class NonTransactionalDbmsOperations implements DbmsOperations\n {\n \n-    private final Procedures procedures;\n+  private final Procedures procedures;\n \n-    public NonTransactionalDbmsOperations( Procedures procedures )\n-    {\n-        this.procedures = procedures;\n-    }\n+  public NonTransactionalDbmsOperations(Procedures procedures)\n+  {\n+    this.procedures = procedures;\n+  }\n \n-    @Override\n-    public RawIterator<Object[],ProcedureException> procedureCallDbms(\n-            QualifiedName name,\n-            Object[] input,\n-            SecurityContext securityContext,\n-            ResourceTracker resourceTracker\n-    ) throws ProcedureException\n-    {\n-        BasicContext ctx = new BasicContext();\n-        ctx.put( Context.SECURITY_CONTEXT, securityContext );\n-        return procedures.callProcedure( ctx, name, input, resourceTracker );\n-    }\n+  @Override\n+  public RawIterator<Object[], ProcedureException> procedureCallDbms(\n+      QualifiedName name,\n+      Object[] input,\n+      SecurityContext securityContext,\n+      ResourceTracker resourceTracker\n+  ) throws ProcedureException\n+  {\n+    BasicContext ctx = new BasicContext();\n+    ctx.put(Context.SECURITY_CONTEXT, securityContext);\n+    return procedures.callProcedure(ctx, name, input, resourceTracker);\n+  }\n \n-    @Override\n-    public RawIterator<Object[],ProcedureException> procedureCallDbms(\n-            int id,\n-            Object[] input,\n-            SecurityContext securityContext,\n-            ResourceTracker resourceTracker\n-    ) throws ProcedureException\n-    {\n-        BasicContext ctx = new BasicContext();\n-        ctx.put( Context.SECURITY_CONTEXT, securityContext );\n-        return procedures.callProcedure( ctx, id, input, resourceTracker );\n-    }\n+  @Override\n+  public RawIterator<Object[], ProcedureException> procedureCallDbms(\n+      int id,\n+      Object[] input,\n+      SecurityContext securityContext,\n+      ResourceTracker resourceTracker\n+  ) throws ProcedureException\n+  {\n+    BasicContext ctx = new BasicContext();\n+    ctx.put(Context.SECURITY_CONTEXT, securityContext);\n+    return procedures.callProcedure(ctx, id, input, resourceTracker);\n+  }\n \n-    @Override\n-    public AnyValue functionCallDbms(\n-            QualifiedName name,\n-            AnyValue[] input,\n-            SecurityContext securityContext\n-    ) throws ProcedureException\n-    {\n-        BasicContext ctx = new BasicContext();\n-        ctx.put( Context.SECURITY_CONTEXT, securityContext );\n-        return procedures.callFunction( ctx, name, input );\n-    }\n+  @Override\n+  public AnyValue functionCallDbms(\n+      QualifiedName name,\n+      AnyValue[] input,\n+      SecurityContext securityContext\n+  ) throws ProcedureException\n+  {\n+    BasicContext ctx = new BasicContext();\n+    ctx.put(Context.SECURITY_CONTEXT, securityContext);\n+    return procedures.callFunction(ctx, name, input);\n+  }\n }\n",
            "diff_size": 41
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1852/NonTransactionalDbmsOperations.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1852/NonTransactionalDbmsOperations.java\nindex 9ae9a29fd65..1bd54034be9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1852/NonTransactionalDbmsOperations.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1852/NonTransactionalDbmsOperations.java\n@@ -32,7 +32,6 @@ import org.neo4j.values.AnyValue;\n \n public class NonTransactionalDbmsOperations implements DbmsOperations\n {\n-\n     private final Procedures procedures;\n \n     public NonTransactionalDbmsOperations( Procedures procedures )\n@@ -41,12 +40,10 @@ public class NonTransactionalDbmsOperations implements DbmsOperations\n     }\n \n     @Override\n-    public RawIterator<Object[],ProcedureException> procedureCallDbms(\n-            QualifiedName name,\n+    public RawIterator<Object[],ProcedureException> procedureCallDbms( QualifiedName name,\n             Object[] input,\n             SecurityContext securityContext,\n-            ResourceTracker resourceTracker\n-    ) throws ProcedureException\n+            ResourceTracker resourceTracker ) throws ProcedureException\n     {\n         BasicContext ctx = new BasicContext();\n         ctx.put( Context.SECURITY_CONTEXT, securityContext );\n@@ -54,12 +51,10 @@ public class NonTransactionalDbmsOperations implements DbmsOperations\n     }\n \n     @Override\n-    public RawIterator<Object[],ProcedureException> procedureCallDbms(\n-            int id,\n+    public RawIterator<Object[],ProcedureException> procedureCallDbms( int id,\n             Object[] input,\n             SecurityContext securityContext,\n-            ResourceTracker resourceTracker\n-    ) throws ProcedureException\n+            ResourceTracker resourceTracker ) throws ProcedureException\n     {\n         BasicContext ctx = new BasicContext();\n         ctx.put( Context.SECURITY_CONTEXT, securityContext );\n@@ -67,14 +62,12 @@ public class NonTransactionalDbmsOperations implements DbmsOperations\n     }\n \n     @Override\n-    public AnyValue functionCallDbms(\n-            QualifiedName name,\n+    public AnyValue functionCallDbms( QualifiedName name,\n             AnyValue[] input,\n-            SecurityContext securityContext\n-    ) throws ProcedureException\n+            SecurityContext securityContext ) throws ProcedureException\n     {\n         BasicContext ctx = new BasicContext();\n         ctx.put( Context.SECURITY_CONTEXT, securityContext );\n         return procedures.callFunction( ctx, name, input );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}