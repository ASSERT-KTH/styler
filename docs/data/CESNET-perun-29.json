{
    "project_name": "CESNET-perun",
    "error_id": "29",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "error",
                "message": "Line has trailing spaces.",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "\t@Autowired\n\tprivate JMSQueueManager jmsQueueManager;\n\t\n\tprivate Map<Integer, TaskStatus> taskToStatusMap;\n\n\tpublic TaskStatusManagerImpl() {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/29/TaskStatusManagerImpl.java\nindex 29190a7f0c2..c54e7fa612b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler/29/TaskStatusManagerImpl.java\n@@ -32,7 +32,7 @@ public class TaskStatusManagerImpl implements TaskStatusManager,\n \tprivate SchedulingPool schedulingPool;\n \t@Autowired\n \tprivate JMSQueueManager jmsQueueManager;\n-\t\n+\n \tprivate Map<Integer, TaskStatus> taskToStatusMap;\n \n \tpublic TaskStatusManagerImpl() {\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/29/TaskStatusManagerImpl.java\nindex 29190a7f0c2..86159ee836f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/intellij/29/TaskStatusManagerImpl.java\n@@ -24,117 +24,117 @@ import cz.metacentrum.perun.taskslib.model.TaskResult;\n \n @org.springframework.stereotype.Service(value = \"taskStatusManager\")\n public class TaskStatusManagerImpl implements TaskStatusManager,\n-\t\tTaskResultListener {\n-\tprivate final static Logger log = LoggerFactory\n-\t\t\t.getLogger(TaskStatusManagerImpl.class);\n+        TaskResultListener {\n+    private final static Logger log = LoggerFactory\n+            .getLogger(TaskStatusManagerImpl.class);\n \n-\t@Autowired\n-\tprivate SchedulingPool schedulingPool;\n-\t@Autowired\n-\tprivate JMSQueueManager jmsQueueManager;\n-\t\n-\tprivate Map<Integer, TaskStatus> taskToStatusMap;\n+    @Autowired\n+    private SchedulingPool schedulingPool;\n+    @Autowired\n+    private JMSQueueManager jmsQueueManager;\n \n-\tpublic TaskStatusManagerImpl() {\n-\t\ttaskToStatusMap = new HashMap<Integer, TaskStatus>();\n-\t}\n+    private Map<Integer, TaskStatus> taskToStatusMap;\n \n-\t@Override\n-\tpublic TaskStatus getTaskStatus(Task task) {\n-\t\tTaskStatus taskStatus;\n-\t\tsynchronized (taskToStatusMap) {\n-\t\t\tif (taskToStatusMap.containsKey(task.getId())) {\n-\t\t\t\ttaskStatus = taskToStatusMap.get(task.getId());\n-\t\t\t} else {\n-\t\t\t\ttaskStatus = new TaskStatusImpl(task);\n-\t\t\t\ttaskToStatusMap.put(task.getId(), taskStatus);\n-\t\t\t}\n-\t\t}\n-\t\t// TODO: persist created taskStatus in storage\n-\t\treturn taskStatus;\n-\t}\n+    public TaskStatusManagerImpl() {\n+        taskToStatusMap = new HashMap<Integer, TaskStatus>();\n+    }\n \n-\t@Override\n-\tpublic void clearTaskStatus(Task task) {\n-\t\tsynchronized (taskToStatusMap) {\n-\t\t\ttaskToStatusMap.remove(task.getId());\n-\t\t}\n-\t}\n+    @Override\n+    public TaskStatus getTaskStatus(Task task) {\n+        TaskStatus taskStatus;\n+        synchronized (taskToStatusMap) {\n+            if (taskToStatusMap.containsKey(task.getId())) {\n+                taskStatus = taskToStatusMap.get(task.getId());\n+            } else {\n+                taskStatus = new TaskStatusImpl(task);\n+                taskToStatusMap.put(task.getId(), taskStatus);\n+            }\n+        }\n+        // TODO: persist created taskStatus in storage\n+        return taskStatus;\n+    }\n \n-\t@Override\n-\tpublic void onTaskDestinationDone(Task task, Destination destination,\n-\t\t\tTaskResult result) {\n-\t\tif(result != null) {\n-\t\t\ttry {\n-\t\t\t\tjmsQueueManager.reportFinishedDestination(task, destination, result);\n-\t\t\t} catch (JMSException e) {\n-\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t}\n-\t\tif(task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n-\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n-\t\t\tschedulingPool.setTaskStatus(task, cz.metacentrum.perun.taskslib.model.Task.TaskStatus.DONE);\n-\t\t} else {\n-\t\t\tTaskStatus taskStatus = this.getTaskStatus(task);\n-\t\t\ttry {\n-\t\t\t\ttaskStatus.setDestinationStatus(destination,\n-\t\t\t\t\t\tTaskDestinationStatus.DONE);\n-\t\t\t\ttaskStatus.setDestinationResult(destination, result);\n-\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\tlog.error(\"Error setting DONE status for task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t\tif (taskStatus.isTaskFinished()) {\n-\t\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n-\t\t\t\tschedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n-\t\t\t}\n-\t\t}\n-\t\t// report success on forced propagations immediately...\n-\t\tif(task.isPropagationForced() && task.getStatus().equals(cz.metacentrum.perun.taskslib.model.Task.TaskStatus.DONE)) {\n-\t\t\tlog.debug(\"TASK \" + task.toString() + \" finished\");\n-\t\t\ttry {\n-\t\t\t\tlog.debug(\"TASK reported as finished at \"\n-\t\t\t\t\t\t+ System.currentTimeMillis());\n-\t\t\t\tjmsQueueManager.reportFinishedTask(task, \"Destinations []\");\n-\t\t\t\tschedulingPool.removeTask(task);\n-\t\t\t\tlog.debug(\"TASK {} removed from database.\", task.getId());\n-\t\t\t} catch (JMSException e) {\n-\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t}\n-\t}\n+    @Override\n+    public void clearTaskStatus(Task task) {\n+        synchronized (taskToStatusMap) {\n+            taskToStatusMap.remove(task.getId());\n+        }\n+    }\n \n-\t@Override\n-\tpublic void onTaskDestinationError(Task task, Destination destination,\n-\t\t\tTaskResult result) {\n-\t\tif(result != null) {\n-\t\t\ttry {\n-\t\t\t\tjmsQueueManager.reportFinishedDestination(task, destination, result);\n-\t\t\t} catch (JMSException e) {\n-\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t}\n-\t\tif(task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n-\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n-\t\t\tschedulingPool.setTaskStatus(task, cz.metacentrum.perun.taskslib.model.Task.TaskStatus.ERROR);\n-\t\t} else {\n-\t\t\tTaskStatus taskStatus = this.getTaskStatus(task);\n-\t\t\ttry {\n-\t\t\t\ttaskStatus.setDestinationStatus(destination,\n-\t\t\t\t\t\tTaskDestinationStatus.ERROR);\n-\t\t\t\ttaskStatus.setDestinationResult(destination, result);\n-\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\tlog.error(\"Error setting ERROR status for task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t\tif (taskStatus.isTaskFinished()) {\n-\t\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n-\t\t\t\tschedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n-\t\t\t}\n-\t\t}\n-\t}\n+    @Override\n+    public void onTaskDestinationDone(Task task, Destination destination,\n+                                      TaskResult result) {\n+        if (result != null) {\n+            try {\n+                jmsQueueManager.reportFinishedDestination(task, destination, result);\n+            } catch (JMSException e) {\n+                log.error(\"Failed to report finished task \" + task.toString()\n+                        + \": \" + e.getMessage());\n+            }\n+        }\n+        if (task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n+            task.setEndTime(new Date(System.currentTimeMillis()));\n+            schedulingPool.setTaskStatus(task, cz.metacentrum.perun.taskslib.model.Task.TaskStatus.DONE);\n+        } else {\n+            TaskStatus taskStatus = this.getTaskStatus(task);\n+            try {\n+                taskStatus.setDestinationStatus(destination,\n+                        TaskDestinationStatus.DONE);\n+                taskStatus.setDestinationResult(destination, result);\n+            } catch (InternalErrorException e) {\n+                log.error(\"Error setting DONE status for task \" + task.toString()\n+                        + \": \" + e.getMessage());\n+            }\n+            if (taskStatus.isTaskFinished()) {\n+                task.setEndTime(new Date(System.currentTimeMillis()));\n+                schedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n+            }\n+        }\n+        // report success on forced propagations immediately...\n+        if (task.isPropagationForced() && task.getStatus().equals(cz.metacentrum.perun.taskslib.model.Task.TaskStatus.DONE)) {\n+            log.debug(\"TASK \" + task.toString() + \" finished\");\n+            try {\n+                log.debug(\"TASK reported as finished at \"\n+                        + System.currentTimeMillis());\n+                jmsQueueManager.reportFinishedTask(task, \"Destinations []\");\n+                schedulingPool.removeTask(task);\n+                log.debug(\"TASK {} removed from database.\", task.getId());\n+            } catch (JMSException e) {\n+                log.error(\"Failed to report finished task \" + task.toString()\n+                        + \": \" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void onTaskDestinationError(Task task, Destination destination,\n+                                       TaskResult result) {\n+        if (result != null) {\n+            try {\n+                jmsQueueManager.reportFinishedDestination(task, destination, result);\n+            } catch (JMSException e) {\n+                log.error(\"Failed to report finished task \" + task.toString()\n+                        + \": \" + e.getMessage());\n+            }\n+        }\n+        if (task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n+            task.setEndTime(new Date(System.currentTimeMillis()));\n+            schedulingPool.setTaskStatus(task, cz.metacentrum.perun.taskslib.model.Task.TaskStatus.ERROR);\n+        } else {\n+            TaskStatus taskStatus = this.getTaskStatus(task);\n+            try {\n+                taskStatus.setDestinationStatus(destination,\n+                        TaskDestinationStatus.ERROR);\n+                taskStatus.setDestinationResult(destination, result);\n+            } catch (InternalErrorException e) {\n+                log.error(\"Error setting ERROR status for task \" + task.toString()\n+                        + \": \" + e.getMessage());\n+            }\n+            if (taskStatus.isTaskFinished()) {\n+                task.setEndTime(new Date(System.currentTimeMillis()));\n+                schedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n+            }\n+        }\n+    }\n \n }\n",
            "diff_size": 159
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/naturalize/29/TaskStatusManagerImpl.java\nindex 29190a7f0c2..2c99c2ed3e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/naturalize/29/TaskStatusManagerImpl.java\n@@ -23,19 +23,17 @@ import cz.metacentrum.perun.taskslib.model.Task;\n import cz.metacentrum.perun.taskslib.model.TaskResult;\n \n @org.springframework.stereotype.Service(value = \"taskStatusManager\")\n-public class TaskStatusManagerImpl implements TaskStatusManager,\n-\t\tTaskResultListener {\n-\tprivate final static Logger log = LoggerFactory\n-\t\t\t.getLogger(TaskStatusManagerImpl.class);\n+public class TaskStatusManagerImpl implements TaskStatusManager, TaskResultListener {\n+\n+\tprivate final static Logger log = LoggerFactory.getLogger(TaskStatusManagerImpl.class);\n \n \t@Autowired\n \tprivate SchedulingPool schedulingPool;\n \t@Autowired\n \tprivate JMSQueueManager jmsQueueManager;\n-\t\n-\tprivate Map<Integer, TaskStatus> taskToStatusMap;\n+private Map<Integer, TaskStatus> taskToStatusMap;\n \n-\tpublic TaskStatusManagerImpl() {\n+public TaskStatusManagerImpl() {\n \t\ttaskToStatusMap = new HashMap<Integer, TaskStatus>();\n \t}\n \n@@ -64,12 +62,11 @@ public class TaskStatusManagerImpl implements TaskStatusManager,\n \t@Override\n \tpublic void onTaskDestinationDone(Task task, Destination destination,\n \t\t\tTaskResult result) {\n-\t\tif(result != null) {\n+\tif (result != null) {\n \t\t\ttry {\n \t\t\t\tjmsQueueManager.reportFinishedDestination(task, destination, result);\n \t\t\t} catch (JMSException e) {\n-\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n+\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString() + \": \" + e.getMessage());\n \t\t\t}\n \t\t}\n \t\tif(task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n@@ -82,9 +79,8 @@ public class TaskStatusManagerImpl implements TaskStatusManager,\n \t\t\t\t\t\tTaskDestinationStatus.DONE);\n \t\t\t\ttaskStatus.setDestinationResult(destination, result);\n \t\t\t} catch (InternalErrorException e) {\n-\t\t\t\tlog.error(\"Error setting DONE status for task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n+\t\t\t\tlog.error(\"Error setting DONE status for task \" + task.toString() + \": \" + e.getMessage());\n+\t}\n \t\t\tif (taskStatus.isTaskFinished()) {\n \t\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n \t\t\t\tschedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n@@ -94,14 +90,12 @@ public class TaskStatusManagerImpl implements TaskStatusManager,\n \t\tif(task.isPropagationForced() && task.getStatus().equals(cz.metacentrum.perun.taskslib.model.Task.TaskStatus.DONE)) {\n \t\t\tlog.debug(\"TASK \" + task.toString() + \" finished\");\n \t\t\ttry {\n-\t\t\t\tlog.debug(\"TASK reported as finished at \"\n-\t\t\t\t\t\t+ System.currentTimeMillis());\n+\t\t\t\tlog.debug(\"TASK reported as finished at \" + System.currentTimeMillis());\n \t\t\t\tjmsQueueManager.reportFinishedTask(task, \"Destinations []\");\n \t\t\t\tschedulingPool.removeTask(task);\n \t\t\t\tlog.debug(\"TASK {} removed from database.\", task.getId());\n \t\t\t} catch (JMSException e) {\n-\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n+\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString() + \": \" + e.getMessage());\n \t\t\t}\n \t\t}\n \t}\n@@ -109,12 +103,11 @@ public class TaskStatusManagerImpl implements TaskStatusManager,\n \t@Override\n \tpublic void onTaskDestinationError(Task task, Destination destination,\n \t\t\tTaskResult result) {\n-\t\tif(result != null) {\n+\tif (result != null) {\n \t\t\ttry {\n \t\t\t\tjmsQueueManager.reportFinishedDestination(task, destination, result);\n \t\t\t} catch (JMSException e) {\n-\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n+\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString() + \": \" + e.getMessage());\n \t\t\t}\n \t\t}\n \t\tif(task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n@@ -127,9 +120,8 @@ public class TaskStatusManagerImpl implements TaskStatusManager,\n \t\t\t\t\t\tTaskDestinationStatus.ERROR);\n \t\t\t\ttaskStatus.setDestinationResult(destination, result);\n \t\t\t} catch (InternalErrorException e) {\n-\t\t\t\tlog.error(\"Error setting ERROR status for task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n+\t\t\t\tlog.error(\"Error setting ERROR status for task \" + task.toString() + \": \" + e.getMessage());\n+\t}\n \t\t\tif (taskStatus.isTaskFinished()) {\n \t\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n \t\t\t\tschedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n@@ -137,4 +129,4 @@ public class TaskStatusManagerImpl implements TaskStatusManager,\n \t\t}\n \t}\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/29/TaskStatusManagerImpl.java\nindex 29190a7f0c2..a0df0f68310 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/codebuff/29/TaskStatusManagerImpl.java\n@@ -3,13 +3,10 @@ package cz.metacentrum.perun.engine.scheduling.impl;\n import java.util.Date;\n import java.util.Map;\n import java.util.HashMap;\n-\n import javax.jms.JMSException;\n-\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-\n import cz.metacentrum.perun.core.api.Destination;\n import cz.metacentrum.perun.core.api.exceptions.InternalErrorException;\n import cz.metacentrum.perun.engine.jms.JMSQueueManager;\n@@ -22,119 +19,112 @@ import cz.metacentrum.perun.taskslib.model.ExecService.ExecServiceType;\n import cz.metacentrum.perun.taskslib.model.Task;\n import cz.metacentrum.perun.taskslib.model.TaskResult;\n \n+\n @org.springframework.stereotype.Service(value = \"taskStatusManager\")\n-public class TaskStatusManagerImpl implements TaskStatusManager,\n-\t\tTaskResultListener {\n-\tprivate final static Logger log = LoggerFactory\n-\t\t\t.getLogger(TaskStatusManagerImpl.class);\n+public class TaskStatusManagerImpl implements TaskStatusManager, TaskResultListener {\n+\n+\n+ private final static Logger log = LoggerFactory.getLogger(TaskStatusManagerImpl.class);\n+\n+ @Autowired\n+ private SchedulingPool schedulingPool;\n+\n+ @Autowired\n+ private JMSQueueManager jmsQueueManager;\n+ private Map<Integer, TaskStatus> taskToStatusMap;\n+\n \n-\t@Autowired\n-\tprivate SchedulingPool schedulingPool;\n-\t@Autowired\n-\tprivate JMSQueueManager jmsQueueManager;\n-\t\n-\tprivate Map<Integer, TaskStatus> taskToStatusMap;\n+ public TaskStatusManagerImpl() {\n+  taskToStatusMap = new HashMap<Integer, TaskStatus>();\n+ }\n \n-\tpublic TaskStatusManagerImpl() {\n-\t\ttaskToStatusMap = new HashMap<Integer, TaskStatus>();\n-\t}\n+ @Override\n+ public TaskStatus getTaskStatus(Task task) {\n+  TaskStatus taskStatus;\n+  synchronized (taskToStatusMap) {\n+   if (taskToStatusMap.containsKey(task.getId())) {\n+    taskStatus = taskToStatusMap.get(task.getId());\n+   } else {\n+    taskStatus = new TaskStatusImpl(task);\n+    taskToStatusMap.put(task.getId(), taskStatus);\n+   }\n+  }\n+  // TODO: persist created taskStatus in storage\n \n-\t@Override\n-\tpublic TaskStatus getTaskStatus(Task task) {\n-\t\tTaskStatus taskStatus;\n-\t\tsynchronized (taskToStatusMap) {\n-\t\t\tif (taskToStatusMap.containsKey(task.getId())) {\n-\t\t\t\ttaskStatus = taskToStatusMap.get(task.getId());\n-\t\t\t} else {\n-\t\t\t\ttaskStatus = new TaskStatusImpl(task);\n-\t\t\t\ttaskToStatusMap.put(task.getId(), taskStatus);\n-\t\t\t}\n-\t\t}\n-\t\t// TODO: persist created taskStatus in storage\n-\t\treturn taskStatus;\n-\t}\n+  return taskStatus;\n+ }\n \n-\t@Override\n-\tpublic void clearTaskStatus(Task task) {\n-\t\tsynchronized (taskToStatusMap) {\n-\t\t\ttaskToStatusMap.remove(task.getId());\n-\t\t}\n-\t}\n+ @Override\n+ public void clearTaskStatus(Task task) {\n+  synchronized (taskToStatusMap) {\n+   taskToStatusMap.remove(task.getId());\n+  }\n+ }\n \n-\t@Override\n-\tpublic void onTaskDestinationDone(Task task, Destination destination,\n-\t\t\tTaskResult result) {\n-\t\tif(result != null) {\n-\t\t\ttry {\n-\t\t\t\tjmsQueueManager.reportFinishedDestination(task, destination, result);\n-\t\t\t} catch (JMSException e) {\n-\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t}\n-\t\tif(task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n-\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n-\t\t\tschedulingPool.setTaskStatus(task, cz.metacentrum.perun.taskslib.model.Task.TaskStatus.DONE);\n-\t\t} else {\n-\t\t\tTaskStatus taskStatus = this.getTaskStatus(task);\n-\t\t\ttry {\n-\t\t\t\ttaskStatus.setDestinationStatus(destination,\n-\t\t\t\t\t\tTaskDestinationStatus.DONE);\n-\t\t\t\ttaskStatus.setDestinationResult(destination, result);\n-\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\tlog.error(\"Error setting DONE status for task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t\tif (taskStatus.isTaskFinished()) {\n-\t\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n-\t\t\t\tschedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n-\t\t\t}\n-\t\t}\n-\t\t// report success on forced propagations immediately...\n-\t\tif(task.isPropagationForced() && task.getStatus().equals(cz.metacentrum.perun.taskslib.model.Task.TaskStatus.DONE)) {\n-\t\t\tlog.debug(\"TASK \" + task.toString() + \" finished\");\n-\t\t\ttry {\n-\t\t\t\tlog.debug(\"TASK reported as finished at \"\n-\t\t\t\t\t\t+ System.currentTimeMillis());\n-\t\t\t\tjmsQueueManager.reportFinishedTask(task, \"Destinations []\");\n-\t\t\t\tschedulingPool.removeTask(task);\n-\t\t\t\tlog.debug(\"TASK {} removed from database.\", task.getId());\n-\t\t\t} catch (JMSException e) {\n-\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t}\n-\t}\n+ @Override\n+ public void onTaskDestinationDone(Task task, Destination destination, TaskResult result) {\n+  if (result != null) {\n+   try {\n+    jmsQueueManager.reportFinishedDestination(task, destination, result);\n+   } catch (JMSException e) {\n+    log.error(\"Failed to report finished task \" + task.toString() + \": \" + e.getMessage());\n+   }\n+  }\n+  if (task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n+   task.setEndTime(new Date(System.currentTimeMillis()));\n+   schedulingPool.setTaskStatus(task, cz.metacentrum.perun.taskslib.model.Task.TaskStatus.DONE);\n+  } else {\n+   TaskStatus taskStatus = this.getTaskStatus(task);\n+   try {\n+    taskStatus.setDestinationStatus(destination, TaskDestinationStatus.DONE);\n+    taskStatus.setDestinationResult(destination, result);\n+   } catch (InternalErrorException e) {\n+    log.error(\"Error setting DONE status for task \" + task.toString() + \": \" + e.getMessage());\n+   }\n+   if (taskStatus.isTaskFinished()) {\n+    task.setEndTime(new Date(System.currentTimeMillis()));\n+    schedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n+   }\n+  }\n+  // report success on forced propagations immediately...\n+  if (task.isPropagationForced() && task.getStatus().equals(cz.metacentrum.perun.taskslib.model.Task.TaskStatus.DONE)) {\n+   log.debug(\"TASK \" + task.toString() + \" finished\");\n \n-\t@Override\n-\tpublic void onTaskDestinationError(Task task, Destination destination,\n-\t\t\tTaskResult result) {\n-\t\tif(result != null) {\n-\t\t\ttry {\n-\t\t\t\tjmsQueueManager.reportFinishedDestination(task, destination, result);\n-\t\t\t} catch (JMSException e) {\n-\t\t\t\tlog.error(\"Failed to report finished task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t}\n-\t\tif(task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n-\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n-\t\t\tschedulingPool.setTaskStatus(task, cz.metacentrum.perun.taskslib.model.Task.TaskStatus.ERROR);\n-\t\t} else {\n-\t\t\tTaskStatus taskStatus = this.getTaskStatus(task);\n-\t\t\ttry {\n-\t\t\t\ttaskStatus.setDestinationStatus(destination,\n-\t\t\t\t\t\tTaskDestinationStatus.ERROR);\n-\t\t\t\ttaskStatus.setDestinationResult(destination, result);\n-\t\t\t} catch (InternalErrorException e) {\n-\t\t\t\tlog.error(\"Error setting ERROR status for task \" + task.toString()\n-\t\t\t\t\t\t+ \": \" + e.getMessage());\n-\t\t\t}\n-\t\t\tif (taskStatus.isTaskFinished()) {\n-\t\t\t\ttask.setEndTime(new Date(System.currentTimeMillis()));\n-\t\t\t\tschedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n-\t\t\t}\n-\t\t}\n-\t}\n+   try {\n+    log.debug(\"TASK reported as finished at \" + System.currentTimeMillis());\n+    jmsQueueManager.reportFinishedTask(task, \"Destinations []\");\n+    schedulingPool.removeTask(task);\n+    log.debug(\"TASK {} removed from database.\", task.getId());\n+   } catch (JMSException e) {\n+    log.error(\"Failed to report finished task \" + task.toString() + \": \" + e.getMessage());\n+   }\n+  }\n+ }\n \n-}\n+ @Override\n+ public void onTaskDestinationError(Task task, Destination destination, TaskResult result) {\n+  if (result != null) {\n+   try {\n+    jmsQueueManager.reportFinishedDestination(task, destination, result);\n+   } catch (JMSException e) {\n+    log.error(\"Failed to report finished task \" + task.toString() + \": \" + e.getMessage());\n+   }\n+  }\n+  if (task.getExecService().getExecServiceType().equals(ExecServiceType.GENERATE)) {\n+   task.setEndTime(new Date(System.currentTimeMillis()));\n+   schedulingPool.setTaskStatus(task, cz.metacentrum.perun.taskslib.model.Task.TaskStatus.ERROR);\n+  } else {\n+   TaskStatus taskStatus = this.getTaskStatus(task);\n+   try {\n+    taskStatus.setDestinationStatus(destination, TaskDestinationStatus.ERROR);\n+    taskStatus.setDestinationResult(destination, result);\n+   } catch (InternalErrorException e) {\n+    log.error(\"Error setting ERROR status for task \" + task.toString() + \": \" + e.getMessage());\n+   }\n+   if (taskStatus.isTaskFinished()) {\n+    task.setEndTime(new Date(System.currentTimeMillis()));\n+    schedulingPool.setTaskStatus(task, taskStatus.getTaskStatus());\n+   }\n+  }\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 155
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/29/TaskStatusManagerImpl.java\nindex 29190a7f0c2..c54e7fa612b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_random/29/TaskStatusManagerImpl.java\n@@ -32,7 +32,7 @@ public class TaskStatusManagerImpl implements TaskStatusManager,\n \tprivate SchedulingPool schedulingPool;\n \t@Autowired\n \tprivate JMSQueueManager jmsQueueManager;\n-\t\n+\n \tprivate Map<Integer, TaskStatus> taskToStatusMap;\n \n \tpublic TaskStatusManagerImpl() {\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/29/TaskStatusManagerImpl.java\nindex 29190a7f0c2..e3d36bcf487 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/errored/1/29/TaskStatusManagerImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CESNET-perun/styler_three_grams/29/TaskStatusManagerImpl.java\n@@ -31,9 +31,9 @@ public class TaskStatusManagerImpl implements TaskStatusManager,\n \t@Autowired\n \tprivate SchedulingPool schedulingPool;\n \t@Autowired\n-\tprivate JMSQueueManager jmsQueueManager;\n-\t\n-\tprivate Map<Integer, TaskStatus> taskToStatusMap;\n+\tprivate JMSQueueManager jmsQueueManager\n+\n+\t; private Map<Integer, TaskStatus> taskToStatusMap;\n \n \tpublic TaskStatusManagerImpl() {\n \t\ttaskToStatusMap = new HashMap<Integer, TaskStatus>();\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}