{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2190",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "88",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "99",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "117",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "125",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "125",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "138",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "149",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "155",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "161",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "167",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "169",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "185",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "191",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "202",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "221",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "224",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "232",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "242",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "248",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "266",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "281",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "284",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "289",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "289",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "294",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "296",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "303",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "306",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "11",
                    "severity": "error",
                    "message": "'}' at column 11 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "314",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "326",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "328",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "328",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "335",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2190/Cd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2190/Cd.java\nindex e0aac0b1136..cb02e74de38 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2190/Cd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2190/Cd.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps;\n \n import java.util.ArrayList;\n@@ -47,309 +48,295 @@ import static org.neo4j.helpers.TextUtil.lastWordOrQuoteOf;\n /**\n  * Mimics the POSIX application with the same name, i.e. traverses to a node.\n  */\n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Cd extends TransactionProvidingApp\n {\n-    private static final String START_ALIAS = \"start\";\n-    private static final String END_ALIAS = \"end\";\n+  private static final String START_ALIAS = \"start\";\n+  private static final String END_ALIAS = \"end\";\n+\n+  /**\n+   * Constructs a new cd application.\n+   */\n+  public Cd()\n+  {\n+    this.addOptionDefinition(\"a\", new OptionDefinition(OptionValueType.NONE,\n+        \"Absolute id, new primitive doesn't need to be connected to the current one\"));\n+    this.addOptionDefinition(\"r\", new OptionDefinition(OptionValueType.NONE,\n+        \"Makes the supplied id represent a relationship instead of a node\"));\n+  }\n+\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Changes the current node or relationship, i.e. traverses \" +\n+        \"one step to another node or relationship. Usage: cd <id>\";\n+  }\n \n-    /**\n-     * Constructs a new cd application.\n-     */\n-    public Cd()\n+  @Override\n+  protected List<String> completionCandidatesInTx(String partOfLine, Session session) throws ShellException\n+  {\n+    String lastWord = lastWordOrQuoteOf(partOfLine, false);\n+    if (lastWord.startsWith(\"-\"))\n     {\n-        this.addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE,\n-            \"Absolute id, new primitive doesn't need to be connected to the current one\" ) );\n-        this.addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE,\n-            \"Makes the supplied id represent a relationship instead of a node\" ) );\n+      return super.completionCandidates(partOfLine, session);\n     }\n \n-    @Override\n-    public String getDescription()\n+    NodeOrRelationship current;\n+    try\n     {\n-        return \"Changes the current node or relationship, i.e. traverses \" +\n-               \"one step to another node or relationship. Usage: cd <id>\";\n+      current = getCurrent(session);\n+    } catch (ShellException e)\n+    {\n+      return Collections.emptyList();\n     }\n \n-    @Override\n-    protected List<String> completionCandidatesInTx( String partOfLine, Session session ) throws ShellException\n+    TreeSet<String> result = new TreeSet<>();\n+    if (current.isNode())\n     {\n-        String lastWord = lastWordOrQuoteOf( partOfLine, false );\n-        if ( lastWord.startsWith( \"-\" ) )\n-        {\n-            return super.completionCandidates( partOfLine, session );\n-        }\n-\n-        NodeOrRelationship current;\n-        try\n-        {\n-            current = getCurrent( session );\n-        }\n-        catch ( ShellException e )\n+      // TODO Check if -r is supplied\n+      Node node = current.asNode();\n+      try (MappingResourceIterator<Node, Relationship> mappingResourceIterator = RelationshipToNodeIterable\n+          .wrap(Iterables.asResourceIterable(node.getRelationships()), node))\n+      {\n+        while (mappingResourceIterator.hasNext())\n         {\n-            return Collections.emptyList();\n-        }\n-\n-        TreeSet<String> result = new TreeSet<>();\n-        if ( current.isNode() )\n-        {\n-            // TODO Check if -r is supplied\n-            Node node = current.asNode();\n-            try ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable\n-                    .wrap( Iterables.asResourceIterable( node.getRelationships() ), node ) )\n+          Node otherNode = mappingResourceIterator.next();\n+          long otherNodeId = otherNode.getId();\n+          String title = findTitle(session, otherNode);\n+          if (title != null)\n+          {\n+            if (!result.contains(title))\n             {\n-                while ( mappingResourceIterator.hasNext() )\n-                {\n-                    Node otherNode = mappingResourceIterator.next();\n-                    long otherNodeId = otherNode.getId();\n-                    String title = findTitle( session, otherNode );\n-                    if ( title != null )\n-                    {\n-                        if ( !result.contains( title ) )\n-                        {\n-                            maybeAddCompletionCandidate( result, title + \",\" + otherNodeId,\n-                                    lastWord );\n-                        }\n-                    }\n-                    maybeAddCompletionCandidate( result, \"\" + otherNodeId, lastWord );\n-                }\n+              maybeAddCompletionCandidate(result, title + \",\" + otherNodeId,\n+                  lastWord);\n             }\n+          }\n+          maybeAddCompletionCandidate(result, \"\" + otherNodeId, lastWord);\n         }\n-        else\n-        {\n-            maybeAddCompletionCandidate( result, START_ALIAS, lastWord );\n-            maybeAddCompletionCandidate( result, END_ALIAS, lastWord );\n-            Relationship rel = current.asRelationship();\n-            maybeAddCompletionCandidate( result, \"\" + rel.getStartNode().getId(), lastWord );\n-            maybeAddCompletionCandidate( result, \"\" + rel.getEndNode().getId(), lastWord );\n-        }\n-        return new ArrayList<>( result );\n+      }\n+    } else\n+    {\n+      maybeAddCompletionCandidate(result, START_ALIAS, lastWord);\n+      maybeAddCompletionCandidate(result, END_ALIAS, lastWord);\n+      Relationship rel = current.asRelationship();\n+      maybeAddCompletionCandidate(result, \"\" + rel.getStartNode().getId(), lastWord);\n+      maybeAddCompletionCandidate(result, \"\" + rel.getEndNode().getId(), lastWord);\n     }\n+    return new ArrayList<>(result);\n+  }\n \n-    private static void maybeAddCompletionCandidate( Collection<String> candidates,\n-            String candidate, String lastWord )\n+  private static void maybeAddCompletionCandidate(Collection<String> candidates,\n+                                                  String candidate, String lastWord)\n+  {\n+    if (lastWord.length() == 0 || candidate.startsWith(lastWord))\n     {\n-        if ( lastWord.length() == 0 || candidate.startsWith( lastWord ) )\n-        {\n-            candidates.add( candidate );\n-        }\n+      candidates.add(candidate);\n     }\n+  }\n+\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session,\n+                              Output out) throws ShellException\n+  {\n+    List<TypedId> paths = readCurrentWorkingDir(session);\n \n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws ShellException\n+    NodeOrRelationship newThing = null;\n+    if (parser.arguments().isEmpty())\n     {\n-        List<TypedId> paths = readCurrentWorkingDir( session );\n+      clearCurrent(session);\n+      writeCurrentWorkingDir(paths, session);\n+      return Continuation.INPUT_COMPLETE;\n+    } else\n+    {\n+      NodeOrRelationship current = null;\n+      try\n+      {\n+        current = getCurrent(session);\n+      } catch (ShellException e)\n+      { // Ok, didn't exist\n+      }\n \n-        NodeOrRelationship newThing = null;\n-        if ( parser.arguments().isEmpty() )\n+      String arg = parser.arguments().get(0);\n+      TypedId newId = null;\n+      if (arg.equals(\"..\"))\n+      {\n+        if (paths.size() > 0)\n         {\n-            clearCurrent( session );\n-            writeCurrentWorkingDir( paths, session );\n-            return Continuation.INPUT_COMPLETE;\n+          newId = paths.remove(paths.size() - 1);\n         }\n-        else\n+      } else if (arg.equals(\".\"))\n+      {   // Do nothing\n+      } else if (arg.equals(START_ALIAS) || arg.equals(END_ALIAS))\n+      {\n+        if (current == null)\n         {\n-            NodeOrRelationship current = null;\n-            try\n-            {\n-                current = getCurrent( session );\n-            }\n-            catch ( ShellException e )\n-            { // Ok, didn't exist\n-            }\n-\n-            String arg = parser.arguments().get( 0 );\n-            TypedId newId = null;\n-            if ( arg.equals( \"..\" ) )\n-            {\n-                if ( paths.size() > 0 )\n-                {\n-                    newId = paths.remove( paths.size() - 1 );\n-                }\n-            }\n-            else if ( arg.equals( \".\" ) )\n-            {   // Do nothing\n-            }\n-            else if ( arg.equals( START_ALIAS ) || arg.equals( END_ALIAS ) )\n-            {\n-                if ( current == null )\n-                {\n-                    throw new ShellException( \"Can't do \" + START_ALIAS + \" or \" +\n-                            END_ALIAS + \" on a non-existent relationship\" );\n-                }\n-\n-                newId = getStartOrEnd( current, arg );\n-                paths.add( current.getTypedId() );\n-            }\n-            else\n-            {\n-                long suppliedId = -1;\n-                try\n-                {\n-                    suppliedId = Long.parseLong( arg );\n-                }\n-                catch ( NumberFormatException e )\n-                {\n-                    if ( current != null )\n-                    {\n-                        suppliedId = findNodeWithTitle( current.asNode(), arg, session );\n-                    }\n-                    if ( suppliedId == -1 )\n-                    {\n-                        throw new ShellException( \"No connected node with title '\" + arg + \"'\" );\n-                    }\n-                }\n-\n-                newId = parser.options().containsKey( \"r\" ) ?\n-                    new TypedId( NodeOrRelationship.TYPE_RELATIONSHIP, suppliedId ) :\n-                    new TypedId( NodeOrRelationship.TYPE_NODE, suppliedId );\n-                if ( current != null && newId.equals( current.getTypedId() ) )\n-                {\n-                    throw new ShellException( \"Can't cd to where you stand\" );\n-                }\n-                boolean absolute = parser.options().containsKey( \"a\" );\n-                if ( !absolute && current != null && !isConnected( current, newId ) )\n-                {\n-                    throw new ShellException(\n-                        getDisplayName( getServer(), session, newId, false ) +\n-                        \" isn't connected to the current primitive,\" +\n-                        \" use -a to force it to go there anyway\" );\n-                }\n-\n-                if ( current != null )\n-                {\n-                    paths.add( current.getTypedId() );\n-                }\n-            }\n-            newThing = newId != null ? getThingById( newId ) : current;\n+          throw new ShellException(\"Can't do \" + START_ALIAS + \" or \" +\n+              END_ALIAS + \" on a non-existent relationship\");\n         }\n \n-        if ( newThing != null )\n+        newId = getStartOrEnd(current, arg);\n+        paths.add(current.getTypedId());\n+      } else\n+      {\n+        long suppliedId = -1;\n+        try\n         {\n-            setCurrent( session, newThing );\n-        }\n-        else\n+          suppliedId = Long.parseLong(arg);\n+        } catch (NumberFormatException e)\n         {\n-            clearCurrent( session );\n+          if (current != null)\n+          {\n+            suppliedId = findNodeWithTitle(current.asNode(), arg, session);\n+          }\n+          if (suppliedId == -1)\n+          {\n+            throw new ShellException(\"No connected node with title '\" + arg + \"'\");\n+          }\n         }\n-        writeCurrentWorkingDir( paths, session );\n-        return Continuation.INPUT_COMPLETE;\n-    }\n \n-    private long findNodeWithTitle( Node node, String match, Session session ) throws ShellException\n-    {\n-        Object[] matchParts = splitNodeTitleAndId( match );\n-        if ( matchParts[1] != null )\n+        newId = parser.options().containsKey(\"r\") ?\n+            new TypedId(NodeOrRelationship.TYPE_RELATIONSHIP, suppliedId) :\n+            new TypedId(NodeOrRelationship.TYPE_NODE, suppliedId);\n+        if (current != null && newId.equals(current.getTypedId()))\n         {\n-            return (Long) matchParts[1];\n+          throw new ShellException(\"Can't cd to where you stand\");\n+        }\n+        boolean absolute = parser.options().containsKey(\"a\");\n+        if (!absolute && current != null && !isConnected(current, newId))\n+        {\n+          throw new ShellException(\n+              getDisplayName(getServer(), session, newId, false) +\n+                  \" isn't connected to the current primitive,\" +\n+                  \" use -a to force it to go there anyway\");\n         }\n \n-        String titleMatch = (String) matchParts[0];\n-        try ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable\n-                .wrap( Iterables.asResourceIterable( node.getRelationships() ), node ) )\n+        if (current != null)\n         {\n-            while ( mappingResourceIterator.hasNext() )\n-            {\n-                Node otherNode = mappingResourceIterator.next();\n-                String title = findTitle( session, otherNode );\n-                if ( titleMatch.equals( title ) )\n-                {\n-                    return otherNode.getId();\n-                }\n-            }\n+          paths.add(current.getTypedId());\n         }\n-        return -1;\n+      }\n+      newThing = newId != null ? getThingById(newId) : current;\n     }\n \n-    private Object[] splitNodeTitleAndId( String string )\n+    if (newThing != null)\n     {\n-        int index = string.lastIndexOf( ',' );\n-        String title = null;\n-        Long id = null;\n-        try\n-        {\n-            id = Long.parseLong( string.substring( index + 1 ) );\n-            title = string.substring( 0, index );\n-        }\n-        catch ( NumberFormatException e )\n-        {\n-            title = string;\n-        }\n-        return new Object[] { title, id };\n+      setCurrent(session, newThing);\n+    } else\n+    {\n+      clearCurrent(session);\n     }\n+    writeCurrentWorkingDir(paths, session);\n+    return Continuation.INPUT_COMPLETE;\n+  }\n \n-    private TypedId getStartOrEnd( NodeOrRelationship current, String arg )\n-        throws ShellException\n+  private long findNodeWithTitle(Node node, String match, Session session) throws ShellException\n+  {\n+    Object[] matchParts = splitNodeTitleAndId(match);\n+    if (matchParts[1] != null)\n     {\n-        if ( !current.isRelationship() )\n-        {\n-            throw new ShellException( \"Only allowed on relationships\" );\n-        }\n-        Node newNode = null;\n-        if ( arg.equals( START_ALIAS ) )\n-        {\n-            newNode = current.asRelationship().getStartNode();\n-        }\n-        else if ( arg.equals( END_ALIAS ) )\n-        {\n-            newNode = current.asRelationship().getEndNode();\n-        }\n-        else\n-        {\n-            throw new ShellException( \"Unknown alias '\" + arg + \"'\" );\n-        }\n-        return NodeOrRelationship.wrap( newNode ).getTypedId();\n+      return (Long) matchParts[1];\n     }\n \n-    private boolean isConnected( NodeOrRelationship current, TypedId newId )\n+    String titleMatch = (String) matchParts[0];\n+    try (MappingResourceIterator<Node, Relationship> mappingResourceIterator = RelationshipToNodeIterable\n+        .wrap(Iterables.asResourceIterable(node.getRelationships()), node))\n     {\n-        if ( current.isNode() )\n+      while (mappingResourceIterator.hasNext())\n+      {\n+        Node otherNode = mappingResourceIterator.next();\n+        String title = findTitle(session, otherNode);\n+        if (titleMatch.equals(title))\n         {\n-            Node currentNode = current.asNode();\n-            long startTime = System.currentTimeMillis();\n-            ResourceIterable<Relationship> relationships = Iterables.asResourceIterable( currentNode.getRelationships() );\n-            try ( ResourceIterator<Relationship> resourceIterator = relationships.iterator() )\n-            {\n-                while ( resourceIterator.hasNext() )\n-                {\n-                    Relationship rel = resourceIterator.next();\n-                    if ( newId.isNode() )\n-                    {\n-                        if ( rel.getOtherNode( currentNode ).getId() == newId.getId() )\n-                        {\n-                            return true;\n-                        }\n-                    }\n-                    else\n-                    {\n-                        if ( rel.getId() == newId.getId() )\n-                        {\n-                            return true;\n-                        }\n-                    }\n-                    if ( System.currentTimeMillis() - startTime > 350 )\n-                    {\n-                        // DOn't spend too long time in here\n-                        return true;\n-                    }\n-                }\n-            }\n+          return otherNode.getId();\n         }\n-        else\n+      }\n+    }\n+    return -1;\n+  }\n+\n+  private Object[] splitNodeTitleAndId(String string)\n+  {\n+    int index = string.lastIndexOf(',');\n+    String title = null;\n+    Long id = null;\n+    try\n+    {\n+      id = Long.parseLong(string.substring(index + 1));\n+      title = string.substring(0, index);\n+    } catch (NumberFormatException e)\n+    {\n+      title = string;\n+    }\n+    return new Object[] {title, id};\n+  }\n+\n+  private TypedId getStartOrEnd(NodeOrRelationship current, String arg)\n+      throws ShellException\n+  {\n+    if (!current.isRelationship())\n+    {\n+      throw new ShellException(\"Only allowed on relationships\");\n+    }\n+    Node newNode = null;\n+    if (arg.equals(START_ALIAS))\n+    {\n+      newNode = current.asRelationship().getStartNode();\n+    } else if (arg.equals(END_ALIAS))\n+    {\n+      newNode = current.asRelationship().getEndNode();\n+    } else\n+    {\n+      throw new ShellException(\"Unknown alias '\" + arg + \"'\");\n+    }\n+    return NodeOrRelationship.wrap(newNode).getTypedId();\n+  }\n+\n+  private boolean isConnected(NodeOrRelationship current, TypedId newId)\n+  {\n+    if (current.isNode())\n+    {\n+      Node currentNode = current.asNode();\n+      long startTime = System.currentTimeMillis();\n+      ResourceIterable<Relationship> relationships = Iterables.asResourceIterable(currentNode.getRelationships());\n+      try (ResourceIterator<Relationship> resourceIterator = relationships.iterator())\n+      {\n+        while (resourceIterator.hasNext())\n         {\n-            if ( newId.isRelationship() )\n+          Relationship rel = resourceIterator.next();\n+          if (newId.isNode())\n+          {\n+            if (rel.getOtherNode(currentNode).getId() == newId.getId())\n             {\n-                return false;\n+              return true;\n             }\n-\n-            Relationship relationship = current.asRelationship();\n-            if ( relationship.getStartNode().getId() == newId.getId() ||\n-                relationship.getEndNode().getId() == newId.getId() )\n+          } else\n+          {\n+            if (rel.getId() == newId.getId())\n             {\n-                return true;\n+              return true;\n             }\n+          }\n+          if (System.currentTimeMillis() - startTime > 350)\n+          {\n+            // DOn't spend too long time in here\n+            return true;\n+          }\n         }\n+      }\n+    } else\n+    {\n+      if (newId.isRelationship())\n+      {\n         return false;\n+      }\n+\n+      Relationship relationship = current.asRelationship();\n+      if (relationship.getStartNode().getId() == newId.getId() ||\n+          relationship.getEndNode().getId() == newId.getId())\n+      {\n+        return true;\n+      }\n     }\n+    return false;\n+  }\n }\n",
            "diff_size": 411
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "95",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 185).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "200",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 184).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "208",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 191).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "241",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 181).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2190/Cd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2190/Cd.java\nindex e0aac0b1136..d320ebc1b15 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2190/Cd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2190/Cd.java\n@@ -58,17 +58,14 @@ public class Cd extends TransactionProvidingApp\n      */\n     public Cd()\n     {\n-        this.addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE,\n-            \"Absolute id, new primitive doesn't need to be connected to the current one\" ) );\n-        this.addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE,\n-            \"Makes the supplied id represent a relationship instead of a node\" ) );\n+        this.addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE, \"Absolute id, new primitive doesn't need to be connected to the current one\" ) );\n+this.addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE, \"Makes the supplied id represent a relationship instead of a node\" ) );\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Changes the current node or relationship, i.e. traverses \" +\n-               \"one step to another node or relationship. Usage: cd <id>\";\n+        return \"Changes the current node or relationship, i.e. traverses \" + \"one step to another node or relationship. Usage: cd <id>\";\n     }\n \n     @Override\n@@ -95,8 +92,7 @@ public class Cd extends TransactionProvidingApp\n         {\n             // TODO Check if -r is supplied\n             Node node = current.asNode();\n-            try ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable\n-                    .wrap( Iterables.asResourceIterable( node.getRelationships() ), node ) )\n+            try ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable.wrap( Iterables.asResourceIterable( node.getRelationships() ), node ) )\n             {\n                 while ( mappingResourceIterator.hasNext() )\n                 {\n@@ -109,9 +105,10 @@ public class Cd extends TransactionProvidingApp\n                         {\n                             maybeAddCompletionCandidate( result, title + \",\" + otherNodeId,\n                                     lastWord );\n-                        }\n+    }\n                     }\n-                    maybeAddCompletionCandidate( result, \"\" + otherNodeId, lastWord );\n+\n+maybeAddCompletionCandidate( result, \"\" + otherNodeId, lastWord );\n                 }\n             }\n         }\n@@ -136,12 +133,10 @@ public class Cd extends TransactionProvidingApp\n     }\n \n     @Override\n-    protected Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws ShellException\n-    {\n+    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws ShellException\n+{\n         List<TypedId> paths = readCurrentWorkingDir( session );\n-\n-        NodeOrRelationship newThing = null;\n+NodeOrRelationship newThing = null;\n         if ( parser.arguments().isEmpty() )\n         {\n             clearCurrent( session );\n@@ -169,14 +164,14 @@ public class Cd extends TransactionProvidingApp\n                 }\n             }\n             else if ( arg.equals( \".\" ) )\n-            {   // Do nothing\n+            {\n+    // Do nothing\n             }\n             else if ( arg.equals( START_ALIAS ) || arg.equals( END_ALIAS ) )\n             {\n                 if ( current == null )\n                 {\n-                    throw new ShellException( \"Can't do \" + START_ALIAS + \" or \" +\n-                            END_ALIAS + \" on a non-existent relationship\" );\n+                    throw new ShellException( \"Can't do \" + START_ALIAS + \" or \" + END_ALIAS + \" on a non-existent relationship\" );\n                 }\n \n                 newId = getStartOrEnd( current, arg );\n@@ -195,27 +190,23 @@ public class Cd extends TransactionProvidingApp\n                     {\n                         suppliedId = findNodeWithTitle( current.asNode(), arg, session );\n                     }\n-                    if ( suppliedId == -1 )\n+\n+if ( suppliedId == -1 )\n                     {\n                         throw new ShellException( \"No connected node with title '\" + arg + \"'\" );\n                     }\n                 }\n \n-                newId = parser.options().containsKey( \"r\" ) ?\n-                    new TypedId( NodeOrRelationship.TYPE_RELATIONSHIP, suppliedId ) :\n-                    new TypedId( NodeOrRelationship.TYPE_NODE, suppliedId );\n-                if ( current != null && newId.equals( current.getTypedId() ) )\n+                newId = parser.options().containsKey( \"r\" ) ? new TypedId( NodeOrRelationship.TYPE_RELATIONSHIP, suppliedId ) : new TypedId( NodeOrRelationship.TYPE_NODE, suppliedId );\n+if ( current != null && newId.equals( current.getTypedId() ) )\n                 {\n                     throw new ShellException( \"Can't cd to where you stand\" );\n                 }\n                 boolean absolute = parser.options().containsKey( \"a\" );\n                 if ( !absolute && current != null && !isConnected( current, newId ) )\n                 {\n-                    throw new ShellException(\n-                        getDisplayName( getServer(), session, newId, false ) +\n-                        \" isn't connected to the current primitive,\" +\n-                        \" use -a to force it to go there anyway\" );\n-                }\n+                    throw new ShellException( getDisplayName( getServer(), session, newId, false ) + \" isn't connected to the current primitive,\" + \" use -a to force it to go there anyway\" );\n+    }\n \n                 if ( current != null )\n                 {\n@@ -233,7 +224,8 @@ public class Cd extends TransactionProvidingApp\n         {\n             clearCurrent( session );\n         }\n-        writeCurrentWorkingDir( paths, session );\n+\n+writeCurrentWorkingDir( paths, session );\n         return Continuation.INPUT_COMPLETE;\n     }\n \n@@ -246,8 +238,7 @@ public class Cd extends TransactionProvidingApp\n         }\n \n         String titleMatch = (String) matchParts[0];\n-        try ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable\n-                .wrap( Iterables.asResourceIterable( node.getRelationships() ), node ) )\n+        try ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable.wrap( Iterables.asResourceIterable( node.getRelationships() ), node ) )\n         {\n             while ( mappingResourceIterator.hasNext() )\n             {\n@@ -279,14 +270,14 @@ public class Cd extends TransactionProvidingApp\n         return new Object[] { title, id };\n     }\n \n-    private TypedId getStartOrEnd( NodeOrRelationship current, String arg )\n-        throws ShellException\n-    {\n+    private TypedId getStartOrEnd( NodeOrRelationship current, String arg ) throws ShellException\n+{\n         if ( !current.isRelationship() )\n         {\n             throw new ShellException( \"Only allowed on relationships\" );\n         }\n-        Node newNode = null;\n+\n+Node newNode = null;\n         if ( arg.equals( START_ALIAS ) )\n         {\n             newNode = current.asRelationship().getStartNode();\n@@ -299,7 +290,8 @@ public class Cd extends TransactionProvidingApp\n         {\n             throw new ShellException( \"Unknown alias '\" + arg + \"'\" );\n         }\n-        return NodeOrRelationship.wrap( newNode ).getTypedId();\n+\n+return NodeOrRelationship.wrap( newNode ).getTypedId();\n     }\n \n     private boolean isConnected( NodeOrRelationship current, TypedId newId )\n@@ -346,10 +338,10 @@ public class Cd extends TransactionProvidingApp\n             Relationship relationship = current.asRelationship();\n             if ( relationship.getStartNode().getId() == newId.getId() ||\n                 relationship.getEndNode().getId() == newId.getId() )\n-            {\n+{\n                 return true;\n             }\n         }\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 44
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 180).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "96",
                    "column": "180",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "17",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "98",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "36",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "171",
                    "column": "47",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "175",
                    "column": "76",
                    "severity": "error",
                    "message": "'+' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "201",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 188).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "202",
                    "column": "41",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "208",
                    "column": "36",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "208",
                    "column": "54",
                    "severity": "error",
                    "message": "'&&' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "210",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "245",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 176).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "245",
                    "column": "176",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "247",
                    "column": "13",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "247",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "312",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "314",
                    "column": "17",
                    "severity": "error",
                    "message": "'while' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "314",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "348",
                    "column": "70",
                    "severity": "error",
                    "message": "'||' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2190/Cd.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2190/Cd.java\nindex e0aac0b1136..ac692436f3c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2190/Cd.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/codebuff/2190/Cd.java\n@@ -24,7 +24,6 @@ import java.util.Collection;\n import java.util.Collections;\n import java.util.List;\n import java.util.TreeSet;\n-\n import org.neo4j.graphdb.Node;\n import org.neo4j.graphdb.Relationship;\n import org.neo4j.graphdb.ResourceIterable;\n@@ -41,13 +40,13 @@ import org.neo4j.shell.Output;\n import org.neo4j.shell.Session;\n import org.neo4j.shell.ShellException;\n import org.neo4j.shell.impl.RelationshipToNodeIterable;\n-\n import static org.neo4j.helpers.TextUtil.lastWordOrQuoteOf;\n \n /**\n  * Mimics the POSIX application with the same name, i.e. traverses to a node.\n  */\n-@Service.Implementation( App.class )\n+\n+@ Service.Implementation( App.class )\n public class Cd extends TransactionProvidingApp\n {\n     private static final String START_ALIAS = \"start\";\n@@ -56,19 +55,17 @@ public class Cd extends TransactionProvidingApp\n     /**\n      * Constructs a new cd application.\n      */\n+\n     public Cd()\n     {\n-        this.addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE,\n-            \"Absolute id, new primitive doesn't need to be connected to the current one\" ) );\n-        this.addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE,\n-            \"Makes the supplied id represent a relationship instead of a node\" ) );\n+        this.addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE, \"Absolute id, new primitive doesn't need to be connected to the current one\" ) );\n+        this.addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE, \"Makes the supplied id represent a relationship instead of a node\" ) );\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Changes the current node or relationship, i.e. traverses \" +\n-               \"one step to another node or relationship. Usage: cd <id>\";\n+        return \"Changes the current node or relationship, i.e. traverses \" + \"one step to another node or relationship. Usage: cd <id>\";\n     }\n \n     @Override\n@@ -95,22 +92,22 @@ public class Cd extends TransactionProvidingApp\n         {\n             // TODO Check if -r is supplied\n             Node node = current.asNode();\n-            try ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable\n-                    .wrap( Iterables.asResourceIterable( node.getRelationships() ), node ) )\n+            try\n+            ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable.wrap( Iterables.asResourceIterable( node.getRelationships() ), node ))\n             {\n-                while ( mappingResourceIterator.hasNext() )\n+                while( mappingResourceIterator.hasNext())\n                 {\n                     Node otherNode = mappingResourceIterator.next();\n                     long otherNodeId = otherNode.getId();\n                     String title = findTitle( session, otherNode );\n                     if ( title != null )\n                     {\n-                        if ( !result.contains( title ) )\n+                        if ( ! result.contains( title ) )\n                         {\n-                            maybeAddCompletionCandidate( result, title + \",\" + otherNodeId,\n-                                    lastWord );\n+                            maybeAddCompletionCandidate( result, title + \",\" + otherNodeId, lastWord );\n                         }\n                     }\n+\n                     maybeAddCompletionCandidate( result, \"\" + otherNodeId, lastWord );\n                 }\n             }\n@@ -123,24 +120,22 @@ public class Cd extends TransactionProvidingApp\n             maybeAddCompletionCandidate( result, \"\" + rel.getStartNode().getId(), lastWord );\n             maybeAddCompletionCandidate( result, \"\" + rel.getEndNode().getId(), lastWord );\n         }\n+\n         return new ArrayList<>( result );\n     }\n \n-    private static void maybeAddCompletionCandidate( Collection<String> candidates,\n-            String candidate, String lastWord )\n+    private static void maybeAddCompletionCandidate( Collection<String> candidates, String candidate, String lastWord )\n     {\n-        if ( lastWord.length() == 0 || candidate.startsWith( lastWord ) )\n+        if ( lastWord.length() == 0|| candidate.startsWith( lastWord ) )\n         {\n             candidates.add( candidate );\n         }\n     }\n \n     @Override\n-    protected Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws ShellException\n+    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws ShellException\n     {\n         List<TypedId> paths = readCurrentWorkingDir( session );\n-\n         NodeOrRelationship newThing = null;\n         if ( parser.arguments().isEmpty() )\n         {\n@@ -168,60 +163,59 @@ public class Cd extends TransactionProvidingApp\n                     newId = paths.remove( paths.size() - 1 );\n                 }\n             }\n-            else if ( arg.equals( \".\" ) )\n+            else\n+            if ( arg.equals( \".\" ) )\n             {   // Do nothing\n             }\n-            else if ( arg.equals( START_ALIAS ) || arg.equals( END_ALIAS ) )\n-            {\n-                if ( current == null )\n-                {\n-                    throw new ShellException( \"Can't do \" + START_ALIAS + \" or \" +\n-                            END_ALIAS + \" on a non-existent relationship\" );\n-                }\n-\n-                newId = getStartOrEnd( current, arg );\n-                paths.add( current.getTypedId() );\n-            }\n             else\n-            {\n-                long suppliedId = -1;\n-                try\n+                if ( arg.equals( START_ALIAS )|| arg.equals( END_ALIAS ) )\n                 {\n-                    suppliedId = Long.parseLong( arg );\n+                    if ( current == null )\n+                    {\n+                        throw new ShellException( \"Can't do \" + START_ALIAS+ \" or \" + END_ALIAS + \" on a non-existent relationship\" );\n+                    }\n+\n+                    newId = getStartOrEnd( current, arg );\n+                    paths.add( current.getTypedId() );\n                 }\n-                catch ( NumberFormatException e )\n+                    else\n                 {\n-                    if ( current != null )\n+                    long suppliedId = - 1;\n+                    try\n                     {\n-                        suppliedId = findNodeWithTitle( current.asNode(), arg, session );\n+                        suppliedId = Long.parseLong( arg );\n                     }\n-                    if ( suppliedId == -1 )\n+                    catch ( NumberFormatException e )\n                     {\n-                        throw new ShellException( \"No connected node with title '\" + arg + \"'\" );\n+                        if ( current != null )\n+                        {\n+                            suppliedId = findNodeWithTitle( current.asNode(), arg, session );\n+                        }\n+\n+                        if ( suppliedId == - 1 )\n+                        {\n+                            throw new ShellException( \"No connected node with title '\" + arg + \"'\" );\n+                        }\n                     }\n-                }\n \n-                newId = parser.options().containsKey( \"r\" ) ?\n-                    new TypedId( NodeOrRelationship.TYPE_RELATIONSHIP, suppliedId ) :\n-                    new TypedId( NodeOrRelationship.TYPE_NODE, suppliedId );\n-                if ( current != null && newId.equals( current.getTypedId() ) )\n-                {\n-                    throw new ShellException( \"Can't cd to where you stand\" );\n-                }\n-                boolean absolute = parser.options().containsKey( \"a\" );\n-                if ( !absolute && current != null && !isConnected( current, newId ) )\n-                {\n-                    throw new ShellException(\n-                        getDisplayName( getServer(), session, newId, false ) +\n-                        \" isn't connected to the current primitive,\" +\n-                        \" use -a to force it to go there anyway\" );\n-                }\n+                    newId = parser.options().containsKey( \"r\" ) ? new TypedId( NodeOrRelationship.TYPE_RELATIONSHIP, suppliedId ) : new TypedId( NodeOrRelationship.TYPE_NODE, suppliedId );\n+                    if ( current != null&& newId.equals( current.getTypedId() ) )\n+                    {\n+                        throw new ShellException( \"Can't cd to where you stand\" );\n+                    }\n \n-                if ( current != null )\n-                {\n-                    paths.add( current.getTypedId() );\n+                    boolean absolute = parser.options().containsKey( \"a\" );\n+                    if ( ! absolute&& current != null&& ! isConnected( current, newId ) )\n+                    {\n+                        throw new ShellException( getDisplayName( getServer(), session, newId, false ) + \" isn't connected to the current primitive,\" + \" use -a to force it to go there anyway\" );\n+                    }\n+\n+                    if ( current != null )\n+                    {\n+                        paths.add( current.getTypedId() );\n+                    }\n                 }\n-            }\n+\n             newThing = newId != null ? getThingById( newId ) : current;\n         }\n \n@@ -233,6 +227,7 @@ public class Cd extends TransactionProvidingApp\n         {\n             clearCurrent( session );\n         }\n+\n         writeCurrentWorkingDir( paths, session );\n         return Continuation.INPUT_COMPLETE;\n     }\n@@ -240,16 +235,16 @@ public class Cd extends TransactionProvidingApp\n     private long findNodeWithTitle( Node node, String match, Session session ) throws ShellException\n     {\n         Object[] matchParts = splitNodeTitleAndId( match );\n-        if ( matchParts[1] != null )\n+        if ( matchParts[ 1] != null )\n         {\n-            return (Long) matchParts[1];\n+            return (Long) matchParts[ 1];\n         }\n \n-        String titleMatch = (String) matchParts[0];\n-        try ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable\n-                .wrap( Iterables.asResourceIterable( node.getRelationships() ), node ) )\n+        String titleMatch = (String) matchParts[ 0];\n+        try\n+        ( MappingResourceIterator<Node,Relationship> mappingResourceIterator = RelationshipToNodeIterable.wrap( Iterables.asResourceIterable( node.getRelationships() ), node ))\n         {\n-            while ( mappingResourceIterator.hasNext() )\n+            while( mappingResourceIterator.hasNext())\n             {\n                 Node otherNode = mappingResourceIterator.next();\n                 String title = findTitle( session, otherNode );\n@@ -259,7 +254,8 @@ public class Cd extends TransactionProvidingApp\n                 }\n             }\n         }\n-        return -1;\n+\n+        return - 1;\n     }\n \n     private Object[] splitNodeTitleAndId( String string )\n@@ -276,29 +272,32 @@ public class Cd extends TransactionProvidingApp\n         {\n             title = string;\n         }\n+\n         return new Object[] { title, id };\n     }\n \n-    private TypedId getStartOrEnd( NodeOrRelationship current, String arg )\n-        throws ShellException\n+    private TypedId getStartOrEnd( NodeOrRelationship current, String arg ) throws ShellException\n     {\n-        if ( !current.isRelationship() )\n+        if ( ! current.isRelationship() )\n         {\n             throw new ShellException( \"Only allowed on relationships\" );\n         }\n+\n         Node newNode = null;\n         if ( arg.equals( START_ALIAS ) )\n         {\n             newNode = current.asRelationship().getStartNode();\n         }\n-        else if ( arg.equals( END_ALIAS ) )\n+        else\n+        if ( arg.equals( END_ALIAS ) )\n         {\n             newNode = current.asRelationship().getEndNode();\n         }\n         else\n-        {\n-            throw new ShellException( \"Unknown alias '\" + arg + \"'\" );\n-        }\n+            {\n+                throw new ShellException( \"Unknown alias '\" + arg + \"'\" );\n+            }\n+\n         return NodeOrRelationship.wrap( newNode ).getTypedId();\n     }\n \n@@ -309,9 +308,10 @@ public class Cd extends TransactionProvidingApp\n             Node currentNode = current.asNode();\n             long startTime = System.currentTimeMillis();\n             ResourceIterable<Relationship> relationships = Iterables.asResourceIterable( currentNode.getRelationships() );\n-            try ( ResourceIterator<Relationship> resourceIterator = relationships.iterator() )\n+            try\n+            ( ResourceIterator<Relationship> resourceIterator = relationships.iterator())\n             {\n-                while ( resourceIterator.hasNext() )\n+                while( resourceIterator.hasNext())\n                 {\n                     Relationship rel = resourceIterator.next();\n                     if ( newId.isNode() )\n@@ -328,6 +328,7 @@ public class Cd extends TransactionProvidingApp\n                             return true;\n                         }\n                     }\n+\n                     if ( System.currentTimeMillis() - startTime > 350 )\n                     {\n                         // DOn't spend too long time in here\n@@ -344,12 +345,12 @@ public class Cd extends TransactionProvidingApp\n             }\n \n             Relationship relationship = current.asRelationship();\n-            if ( relationship.getStartNode().getId() == newId.getId() ||\n-                relationship.getEndNode().getId() == newId.getId() )\n+            if ( relationship.getStartNode().getId() == newId.getId()|| relationship.getEndNode().getId() == newId.getId() )\n             {\n                 return true;\n             }\n         }\n+\n         return false;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 117
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}