{
    "project_name": "neo4j-neo4j",
    "error_id": "1140",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "86",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1140/BulkAppendNativeTokenScanWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1140/BulkAppendNativeTokenScanWriter.java\nindex 5536209277b..8ae7afdc5fd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1140/BulkAppendNativeTokenScanWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1140/BulkAppendNativeTokenScanWriter.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.apache.commons.lang3.tuple.Pair;\n@@ -43,39 +44,39 @@ import static org.neo4j.util.Preconditions.checkArgument;\n  */\n class BulkAppendNativeTokenScanWriter implements TokenScanWriter\n {\n-    private final Writer<TokenScanKey,TokenScanValue> writer;\n-    private final ValueMerger<TokenScanKey,TokenScanValue> merger;\n-    private final MutableIntObjectMap<Pair<TokenScanKey,TokenScanValue>> ranges = IntObjectMaps.mutable.empty();\n+    private final Writer<TokenScanKey, TokenScanValue> writer;\n+    private final ValueMerger<TokenScanKey, TokenScanValue> merger;\n+    private final MutableIntObjectMap<Pair<TokenScanKey, TokenScanValue>> ranges = IntObjectMaps.mutable.empty();\n \n-    BulkAppendNativeTokenScanWriter( Writer<TokenScanKey,TokenScanValue> writer )\n+    BulkAppendNativeTokenScanWriter(Writer<TokenScanKey, TokenScanValue> writer)\n     {\n         this.writer = writer;\n-        this.merger = new AddMerger( NativeTokenScanWriter.EMPTY );\n+        this.merger = new AddMerger(NativeTokenScanWriter.EMPTY);\n     }\n \n     @Override\n-    public void write( EntityTokenUpdate update )\n+    public void write(EntityTokenUpdate update)\n     {\n-        checkArgument( update.getTokensBefore().length == 0, \"Was expecting no tokens before, was %s\", Arrays.toString( update.getTokensBefore() ) );\n-        long idRange = rangeOf( update.getEntityId() );\n+        checkArgument(update.getTokensBefore().length == 0, \"Was expecting no tokens before, was %s\", Arrays.toString(update.getTokensBefore()));\n+        long idRange = rangeOf(update.getEntityId());\n         int previousTokenId = -1;\n-        for ( long tokenId : update.getTokensAfter() )\n+        for (long tokenId : update.getTokensAfter())\n         {\n-            int intTokenId = toIntExact( tokenId );\n-            checkArgument( intTokenId > previousTokenId, \"Detected unsorted tokens in %s\", update );\n+            int intTokenId = toIntExact(tokenId);\n+            checkArgument(intTokenId > previousTokenId, \"Detected unsorted tokens in %s\", update);\n             previousTokenId = intTokenId;\n-            Pair<TokenScanKey,TokenScanValue> range =\n-                    ranges.getIfAbsentPutWithKey( intTokenId, id -> Pair.of( new TokenScanKey( id, idRange ), new TokenScanValue() ) );\n-            if ( range.getKey().idRange != idRange )\n+            Pair<TokenScanKey, TokenScanValue> range =\n+              ranges.getIfAbsentPutWithKey(intTokenId, id -> Pair.of(new TokenScanKey(id, idRange), new TokenScanValue()));\n+            if (range.getKey().idRange != idRange)\n             {\n-                if ( range.getKey().idRange != -1 )\n+                if (range.getKey().idRange != -1)\n                 {\n-                    writer.merge( range.getKey(), range.getValue(), merger );\n+                    writer.merge(range.getKey(), range.getValue(), merger);\n                 }\n                 range.getKey().idRange = idRange;\n                 range.getValue().clear();\n             }\n-            range.getValue().set( offsetOf( update.getEntityId() ) );\n+            range.getValue().set(offsetOf(update.getEntityId()));\n         }\n     }\n \n@@ -84,15 +85,14 @@ class BulkAppendNativeTokenScanWriter implements TokenScanWriter\n     {\n         try\n         {\n-            for ( Pair<TokenScanKey,TokenScanValue> range : ranges )\n+            for (Pair<TokenScanKey, TokenScanValue> range : ranges)\n             {\n-                if ( range != null )\n+                if (range != null)\n                 {\n-                    writer.merge( range.getKey(), range.getValue(), merger );\n+                    writer.merge(range.getKey(), range.getValue(), merger);\n                 }\n             }\n-        }\n-        finally\n+        } finally\n         {\n             writer.close();\n         }\n",
            "diff_size": 23
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1140/BulkAppendNativeTokenScanWriter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1140/BulkAppendNativeTokenScanWriter.java\nindex 5536209277b..90378876297 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1140/BulkAppendNativeTokenScanWriter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/1140/BulkAppendNativeTokenScanWriter.java\n@@ -97,4 +97,4 @@ class BulkAppendNativeTokenScanWriter implements TokenScanWriter\n             writer.close();\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}