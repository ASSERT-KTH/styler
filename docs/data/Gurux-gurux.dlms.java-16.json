{
    "project_name": "Gurux-gurux.dlms.java",
    "error_id": "16",
    "information": {
        "errors": [
            {
                "line": "236",
                "severity": "warning",
                "message": "Line is longer than 80 characters (found 92).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            buff.setUInt8(DataType.ARRAY.getValue());\n            GXCommon.setObjectCount(sendersAndActions.size(), buff);\n            for (Entry<String, Entry<Integer, GXDLMSScriptAction>> it : sendersAndActions) {\n                buff.setUInt8(DataType.STRUCTURE.getValue());\n                buff.setUInt8(2);\n                GXCommon.setData(buff, DataType.OCTET_STRING,",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "236",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "234",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/16/GXDLMSMessageHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/16/GXDLMSMessageHandler.java\nindex f5c7955e5a2..c4583d5e96b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/16/GXDLMSMessageHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/intellij/16/GXDLMSMessageHandler.java\n@@ -51,9 +51,11 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n     private List<Entry<GXDateTime, GXDateTime>> listeningWindow;\n     private String[] allowedSenders;\n     // CHECKSTYLE:OFF\n-    private final List<Entry<String, Entry<Integer, GXDLMSScriptAction>>> sendersAndActions;\n+    private final List<Entry<String, Entry<Integer, GXDLMSScriptAction>>>\n+            sendersAndActions;\n \n     // CHECKSTYLE:ON\n+\n     /**\n      * Constructor.\n      */\n@@ -68,9 +70,8 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n \n     /**\n      * Constructor.\n-     * \n-     * @param ln\n-     *            Logical Name of the object.\n+     *\n+     * @param ln Logical Name of the object.\n      */\n     public GXDLMSMessageHandler(final String ln) {\n         super(ObjectType.MESSAGE_HANDLER, ln, 0);\n@@ -83,11 +84,9 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n \n     /**\n      * Constructor.\n-     * \n-     * @param ln\n-     *            Logical Name of the object.\n-     * @param sn\n-     *            Short Name of the object.\n+     *\n+     * @param ln Logical Name of the object.\n+     * @param sn Short Name of the object.\n      */\n     public GXDLMSMessageHandler(final String ln, final int sn) {\n         super(ObjectType.MESSAGE_HANDLER, ln, sn);\n@@ -113,8 +112,7 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n     }\n \n     /**\n-     * @param value\n-     *            List of allowed Senders.\n+     * @param value List of allowed Senders.\n      */\n     public final void setAllowedSenders(final String[] value) {\n         allowedSenders = value;\n@@ -122,18 +120,18 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n \n     /**\n      * @return Contains the logical name of a \"Script table\" object and the\n-     *         script selector of the script to be executed if an empty message\n-     *         is received from a matching sender.\n+     * script selector of the script to be executed if an empty message\n+     * is received from a matching sender.\n      */\n     public final List<Entry<String, Entry<Integer, GXDLMSScriptAction>>>\n-            getSendersAndActions() {\n+    getSendersAndActions() {\n         return sendersAndActions;\n     }\n \n     @Override\n     public final Object[] getValues() {\n-        return new Object[] { getLogicalName(), listeningWindow, allowedSenders,\n-                sendersAndActions };\n+        return new Object[] {getLogicalName(), listeningWindow, allowedSenders,\n+                sendersAndActions};\n     }\n \n     /*\n@@ -204,7 +202,7 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n      */\n     @Override\n     public final Object getValue(final GXDLMSSettings settings, final int index,\n-            final int selector, final Object parameters) {\n+                                 final int selector, final Object parameters) {\n         if (index == 1) {\n             return getLogicalName();\n         }\n@@ -251,7 +249,7 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n      */\n     @Override\n     public final void setValue(final GXDLMSSettings settings, final int index,\n-            final Object value) {\n+                               final Object value) {\n         if (index == 1) {\n             super.setValue(settings, index, value);\n         } else if (index == 2) {\n",
            "diff_size": 20
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "138",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 97).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "145",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "255",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "275",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "283",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 112).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "284",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 110).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "285",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 93).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "314",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 100).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/16/GXDLMSMessageHandler.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/16/GXDLMSMessageHandler.java\nindex f5c7955e5a2..d9399bc5879 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/errored/1/16/GXDLMSMessageHandler.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Gurux-gurux.dlms.java/codebuff/16/GXDLMSMessageHandler.java\n@@ -38,7 +38,6 @@ import java.util.AbstractMap.SimpleEntry;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map.Entry;\n-\n import gurux.dlms.GXByteBuffer;\n import gurux.dlms.GXDLMSClient;\n import gurux.dlms.GXDLMSSettings;\n@@ -57,12 +56,13 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n     /**\n      * Constructor.\n      */\n+\n+\n     public GXDLMSMessageHandler() {\n         super(ObjectType.MESSAGE_HANDLER);\n         listeningWindow = new ArrayList<Entry<GXDateTime, GXDateTime>>();\n         // CHECKSTYLE:OFF\n-        sendersAndActions =\n-                new ArrayList<Entry<String, Entry<Integer, GXDLMSScriptAction>>>();\n+        sendersAndActions = new ArrayList<Entry<String, Entry<Integer, GXDLMSScriptAction>>>();\n         // CHECKSTYLE:ON\n     }\n \n@@ -72,12 +72,13 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n      * @param ln\n      *            Logical Name of the object.\n      */\n+\n+\n     public GXDLMSMessageHandler(final String ln) {\n         super(ObjectType.MESSAGE_HANDLER, ln, 0);\n         listeningWindow = new ArrayList<Entry<GXDateTime, GXDateTime>>();\n         // CHECKSTYLE:OFF\n-        sendersAndActions =\n-                new ArrayList<Entry<String, Entry<Integer, GXDLMSScriptAction>>>();\n+        sendersAndActions = new ArrayList<Entry<String, Entry<Integer, GXDLMSScriptAction>>>();\n         // CHECKSTYLE:ON\n     }\n \n@@ -89,18 +90,21 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n      * @param sn\n      *            Short Name of the object.\n      */\n+\n+\n     public GXDLMSMessageHandler(final String ln, final int sn) {\n         super(ObjectType.MESSAGE_HANDLER, ln, sn);\n         listeningWindow = new ArrayList<Entry<GXDateTime, GXDateTime>>();\n         // CHECKSTYLE:OFF\n-        sendersAndActions =\n-                new ArrayList<Entry<String, Entry<Integer, GXDLMSScriptAction>>>();\n+        sendersAndActions = new ArrayList<Entry<String, Entry<Integer, GXDLMSScriptAction>>>();\n         // CHECKSTYLE:ON\n     }\n \n     /**\n      * @return Listening Window.\n      */\n+\n+\n     public final List<Entry<GXDateTime, GXDateTime>> getListeningWindow() {\n         return listeningWindow;\n     }\n@@ -108,6 +112,8 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n     /**\n      * @return List of allowed Senders.\n      */\n+\n+\n     public final String[] getAllowedSenders() {\n         return allowedSenders;\n     }\n@@ -116,6 +122,8 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n      * @param value\n      *            List of allowed Senders.\n      */\n+\n+\n     public final void setAllowedSenders(final String[] value) {\n         allowedSenders = value;\n     }\n@@ -125,21 +133,24 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n      *         script selector of the script to be executed if an empty message\n      *         is received from a matching sender.\n      */\n-    public final List<Entry<String, Entry<Integer, GXDLMSScriptAction>>>\n-            getSendersAndActions() {\n+\n+\n+    public final List<Entry<String, Entry<Integer, GXDLMSScriptAction>>> getSendersAndActions() {\n         return sendersAndActions;\n     }\n \n+\n     @Override\n     public final Object[] getValues() {\n-        return new Object[] { getLogicalName(), listeningWindow, allowedSenders,\n-                sendersAndActions };\n+        return new Object[] { getLogicalName(), listeningWindow, allowedSenders, sendersAndActions };\n     }\n \n     /*\n      * Returns collection of attributes to read. If attribute is static and\n      * already read or device is returned HW error it is not returned.\n      */\n+\n+\n     @Override\n     public final int[] getAttributeIndexToRead() {\n         List<Integer> attributes = new ArrayList<Integer>();\n@@ -165,6 +176,8 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n     /*\n      * Returns amount of attributes.\n      */\n+\n+\n     @Override\n     public final int getAttributeCount() {\n         return 4;\n@@ -173,11 +186,14 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n     /*\n      * Returns amount of methods.\n      */\n+\n+\n     @Override\n     public final int getMethodCount() {\n         return 0;\n     }\n \n+\n     @Override\n     public final DataType getDataType(final int index) {\n         if (index == 1) {\n@@ -196,14 +212,17 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n             return DataType.ARRAY;\n         }\n         throw new IllegalArgumentException(\n-                \"getDataType failed. Invalid attribute index.\");\n+            \"getDataType failed. Invalid attribute index.\");\n     }\n \n     /*\n      * Returns value of given attribute.\n      */\n+\n+\n     @Override\n-    public final Object getValue(final GXDLMSSettings settings, final int index,\n+    public final Object getValue(final GXDLMSSettings settings,\n+        final int index,\n             final int selector, final Object parameters) {\n         if (index == 1) {\n             return getLogicalName();\n@@ -236,22 +255,24 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n             for (Entry<String, Entry<Integer, GXDLMSScriptAction>> it : sendersAndActions) {\n                 buff.setUInt8(DataType.STRUCTURE.getValue());\n                 buff.setUInt8(2);\n-                GXCommon.setData(buff, DataType.OCTET_STRING,\n+                GXCommon.setData(buff,\n+                        DataType.OCTET_STRING,\n                         it.getKey().getBytes());\n                 // TODO: GXCommon.SetData(buff, DataType.OCTET_STRING,\n             }\n             return buff.array();\n         }\n         throw new IllegalArgumentException(\n-                \"GetValue failed. Invalid attribute index.\");\n+            \"GetValue failed. Invalid attribute index.\");\n     }\n \n     /*\n      * Set value of given attribute.\n      */\n+\n+\n     @Override\n-    public final void setValue(final GXDLMSSettings settings, final int index,\n-            final Object value) {\n+    public final void setValue(final GXDLMSSettings settings, final int index, final Object value) {\n         if (index == 1) {\n             super.setValue(settings, index, value);\n         } else if (index == 2) {\n@@ -259,27 +280,23 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n             if (value instanceof Object[]) {\n                 for (Object it : (Object[]) value) {\n                     Object[] tmp = (Object[]) it;\n-                    GXDateTime start = (GXDateTime) GXDLMSClient\n-                            .changeType((byte[]) tmp[0], DataType.DATETIME);\n-                    GXDateTime end = (GXDateTime) GXDLMSClient\n-                            .changeType((byte[]) tmp[1], DataType.DATETIME);\n-                    listeningWindow.add(new SimpleEntry<GXDateTime, GXDateTime>(\n-                            start, end));\n+                    GXDateTime start = (GXDateTime) GXDLMSClient.changeType((byte[]) tmp[0], DataType.DATETIME);\n+                    GXDateTime end = (GXDateTime) GXDLMSClient.changeType((byte[]) tmp[1], DataType.DATETIME);\n+                    listeningWindow.add(new SimpleEntry<GXDateTime, GXDateTime>(start, end));\n                 }\n             }\n-\n         } else if (index == 3) {\n-            if (value instanceof Object[]) {\n-                List<String> tmp = new ArrayList<String>();\n-                for (Object it : (Object[]) value) {\n-                    tmp.add(new String((byte[]) it));\n-                }\n-                allowedSenders = tmp.toArray(new String[tmp.size()]);\n-            } else {\n-                allowedSenders = new String[0];\n+        if (value instanceof Object[]) {\n+            List<String> tmp = new ArrayList<String>();\n+            for (Object it : (Object[]) value) {\n+                tmp.add(new String((byte[]) it));\n             }\n-        } else if (index == 4) {\n-            sendersAndActions.clear();\n+            allowedSenders = tmp.toArray(new String[tmp.size()]);\n+        } else {\n+            allowedSenders = new String[0];\n+        }\n+               } else if (index == 4) {\n+                   sendersAndActions.clear();\n             // TODO:\n             /*\n              * if (value instanceof Object[]) { for (Object it : (Object[])\n@@ -291,9 +308,9 @@ public class GXDLMSMessageHandler extends GXDLMSObject implements IGXDLMSBase {\n              * KeyValuePair<int, GXDLMSScriptAction>>(id, tmp[1] as\n              * GXDateTime)); } }\n              */\n-        } else {\n+               } else {\n             throw new IllegalArgumentException(\n-                    \"GetValue failed. Invalid attribute index.\");\n-        }\n+                \"GetValue failed. Invalid attribute index.\");\n+                                                                                                   }\n     }\n }\n\\ No newline at end of file\n",
            "diff_size": 68
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "236",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "236",
                    "severity": "warning",
                    "message": "Line is longer than 80 characters (found 92).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}