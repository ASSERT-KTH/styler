{
    "project_name": "wso2-attic-commons",
    "error_id": "542",
    "information": {
        "errors": [
            {
                "line": "40",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 139).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "            groupByExecutors = new ExpressionExecutor[groupByList.size()];\n            for (int i = 0, expressionsSize = groupByList.size(); i < expressionsSize; i++) {\n                groupByExecutors[i] = ExecutorParser.parseExpression(groupByList.get(i), queryEventSourceList, null, false, siddhiContext);\n            }\n        }\n    }",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/542/OutputGroupByKeyGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/542/OutputGroupByKeyGenerator.java\nindex 85169b6e1d6..08acf37695d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/542/OutputGroupByKeyGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler/542/OutputGroupByKeyGenerator.java\n@@ -37,7 +37,8 @@ public class OutputGroupByKeyGenerator {\n         if (groupByList.size() > 0) {\n             groupByExecutors = new ExpressionExecutor[groupByList.size()];\n             for (int i = 0, expressionsSize = groupByList.size(); i < expressionsSize; i++) {\n-                groupByExecutors[i] = ExecutorParser.parseExpression(groupByList.get(i), queryEventSourceList, null, false, siddhiContext);\n+                groupByExecutors[i] = ExecutorParser.parseExpression(groupByList\n+                           .get(i), queryEventSourceList, null, false, siddhiContext);\n             }\n         }\n     }\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/542/OutputGroupByKeyGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/542/OutputGroupByKeyGenerator.java\nindex 85169b6e1d6..c3014f70300 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/542/OutputGroupByKeyGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/intellij/542/OutputGroupByKeyGenerator.java\n@@ -1,20 +1,21 @@\n /*\n-*  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n-*\n-*  WSO2 Inc. licenses this file to you under the Apache License,\n-*  Version 2.0 (the \"License\"); you may not use this file except\n-*  in compliance with the License.\n-*  You may obtain a copy of the License at\n-*\n-*    http://www.apache.org/licenses/LICENSE-2.0\n-*\n-* Unless required by applicable law or agreed to in writing,\n-* software distributed under the License is distributed on an\n-* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-* KIND, either express or implied.  See the License for the\n-* specific language governing permissions and limitations\n-* under the License.\n-*/\n+ *  Copyright (c) 2005-2012, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.wso2.siddhi.core.query.selector;\n \n import org.wso2.siddhi.core.config.SiddhiContext;\n@@ -28,29 +29,30 @@ import java.util.List;\n \n public class OutputGroupByKeyGenerator {\n \n-    private ExpressionExecutor[] groupByExecutors = null;\n+  private ExpressionExecutor[] groupByExecutors = null;\n \n-    public OutputGroupByKeyGenerator(List<Variable> groupByList,\n-                                     List<QueryEventSource> queryEventSourceList,\n-                                     SiddhiContext siddhiContext) {\n+  public OutputGroupByKeyGenerator(List<Variable> groupByList,\n+                                   List<QueryEventSource> queryEventSourceList,\n+                                   SiddhiContext siddhiContext) {\n \n-        if (groupByList.size() > 0) {\n-            groupByExecutors = new ExpressionExecutor[groupByList.size()];\n-            for (int i = 0, expressionsSize = groupByList.size(); i < expressionsSize; i++) {\n-                groupByExecutors[i] = ExecutorParser.parseExpression(groupByList.get(i), queryEventSourceList, null, false, siddhiContext);\n-            }\n-        }\n+    if (groupByList.size() > 0) {\n+      groupByExecutors = new ExpressionExecutor[groupByList.size()];\n+      for (int i = 0, expressionsSize = groupByList.size(); i < expressionsSize; i++) {\n+        groupByExecutors[i] =\n+          ExecutorParser.parseExpression(groupByList.get(i), queryEventSourceList, null, false, siddhiContext);\n+      }\n     }\n+  }\n \n-    protected String constructEventKey(AtomicEvent event) {\n-        if (groupByExecutors != null) {\n-            StringBuilder sb = new StringBuilder();\n-            for (ExpressionExecutor executor : groupByExecutors) {\n-                sb.append(executor.execute(event)).append(\"::\");\n-            }\n-            return sb.toString();\n-        } else {\n-            return null;\n-        }\n+  protected String constructEventKey(AtomicEvent event) {\n+    if (groupByExecutors != null) {\n+      StringBuilder sb = new StringBuilder();\n+      for (ExpressionExecutor executor : groupByExecutors) {\n+        sb.append(executor.execute(event)).append(\"::\");\n+      }\n+      return sb.toString();\n+    } else {\n+      return null;\n     }\n+  }\n }\n",
            "diff_size": 39
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "38",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/542/OutputGroupByKeyGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/542/OutputGroupByKeyGenerator.java\nindex 85169b6e1d6..31a0bbfb702 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/542/OutputGroupByKeyGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/naturalize/542/OutputGroupByKeyGenerator.java\n@@ -30,11 +30,9 @@ public class OutputGroupByKeyGenerator {\n \n     private ExpressionExecutor[] groupByExecutors = null;\n \n-    public OutputGroupByKeyGenerator(List<Variable> groupByList,\n-                                     List<QueryEventSource> queryEventSourceList,\n+    public OutputGroupByKeyGenerator(List<Variable> groupByList, List<QueryEventSource> queryEventSourceList,\n                                      SiddhiContext siddhiContext) {\n-\n-        if (groupByList.size() > 0) {\n+    if (groupByList.size() > 0) {\n             groupByExecutors = new ExpressionExecutor[groupByList.size()];\n             for (int i = 0, expressionsSize = groupByList.size(); i < expressionsSize; i++) {\n                 groupByExecutors[i] = ExecutorParser.parseExpression(groupByList.get(i), queryEventSourceList, null, false, siddhiContext);\n@@ -53,4 +51,4 @@ public class OutputGroupByKeyGenerator {\n             return null;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "40",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 139).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/542/OutputGroupByKeyGenerator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/542/OutputGroupByKeyGenerator.java\nindex 85169b6e1d6..08acf37695d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/errored/1/542/OutputGroupByKeyGenerator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/wso2-attic-commons/styler_three_grams/542/OutputGroupByKeyGenerator.java\n@@ -37,7 +37,8 @@ public class OutputGroupByKeyGenerator {\n         if (groupByList.size() > 0) {\n             groupByExecutors = new ExpressionExecutor[groupByList.size()];\n             for (int i = 0, expressionsSize = groupByList.size(); i < expressionsSize; i++) {\n-                groupByExecutors[i] = ExecutorParser.parseExpression(groupByList.get(i), queryEventSourceList, null, false, siddhiContext);\n+                groupByExecutors[i] = ExecutorParser.parseExpression(groupByList\n+                           .get(i), queryEventSourceList, null, false, siddhiContext);\n             }\n         }\n     }\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}