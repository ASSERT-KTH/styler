{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3529",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "81",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3529/GenerationSafePointer.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3529/GenerationSafePointer.java\nindex cf3d7c6f9f1..e50f61fb9ab 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3529/GenerationSafePointer.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3529/GenerationSafePointer.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -47,116 +48,116 @@ import static org.neo4j.index.internal.gbptree.PageCursorUtil.put6BLong;\n  */\n class GenerationSafePointer\n {\n-    private static final int EMPTY_POINTER = 0;\n-    private static final int EMPTY_GENERATION = 0;\n-\n-    static final long MIN_GENERATION = 1L;\n-    // unsigned int\n-    static final long MAX_GENERATION = 0xFFFFFFFFL;\n-    static final long GENERATION_MASK = 0xFFFFFFFFL;\n-    static final long MIN_POINTER = IdSpace.MIN_TREE_NODE_ID;\n-    static final long MAX_POINTER = 0xFFFF_FFFFFFFFL;\n-    static final int UNSIGNED_SHORT_MASK = 0xFFFF;\n-\n-    static final int GENERATION_SIZE = 4;\n-    static final int POINTER_SIZE = 6;\n-    static final int CHECKSUM_SIZE = 2;\n-    static final int SIZE =\n-            GENERATION_SIZE +\n-            POINTER_SIZE +\n-            CHECKSUM_SIZE;\n-\n-    private GenerationSafePointer()\n-    {\n-    }\n-\n-    /**\n-     * Writes GSP at the given {@code offset}, the two fields (generation, pointer) + a checksum will be written.\n-     *\n-     * @param cursor {@link PageCursor} to write into.\n-     * @param generation generation to write.\n-     * @param pointer pointer to write.\n-     */\n-    static void write( PageCursor cursor, long generation, long pointer )\n-    {\n-        assertGenerationOnWrite( generation );\n-        assertPointerOnWrite( pointer );\n-        writeGSP( cursor, generation, pointer );\n-    }\n-\n-    private static void writeGSP( PageCursor cursor, long generation, long pointer )\n-    {\n-        cursor.putInt( (int) generation );\n-        put6BLong( cursor, pointer );\n-        cursor.putShort( checksumOf( generation, pointer ) );\n-    }\n-\n-    static void clean( PageCursor cursor )\n-    {\n-        writeGSP( cursor, EMPTY_GENERATION, EMPTY_POINTER );\n-    }\n-\n-    static void assertGenerationOnWrite( long generation )\n-    {\n-        if ( generation < MIN_GENERATION || generation > MAX_GENERATION )\n-        {\n-            throw new IllegalArgumentException( \"Can not write pointer with generation \" + generation +\n-                    \" because outside boundary for valid generation.\" );\n-        }\n-    }\n-\n-    private static void assertPointerOnWrite( long pointer )\n-    {\n-        if ( (pointer > MAX_POINTER || pointer < MIN_POINTER) && TreeNode.isNode( pointer ) )\n-        {\n-            throw new IllegalArgumentException( \"Can not write pointer \" + pointer +\n-                    \" because outside boundary for valid pointer\" );\n-        }\n-    }\n-\n-    static long readGeneration( PageCursor cursor )\n-    {\n-        return getUnsignedInt( cursor );\n-    }\n-\n-    static long readPointer( PageCursor cursor )\n-    {\n-        return get6BLong( cursor );\n-    }\n-\n-    static short readChecksum( PageCursor cursor )\n-    {\n-        return cursor.getShort();\n-    }\n-\n-    static boolean verifyChecksum( PageCursor cursor, long generation, long pointer )\n-    {\n-        short checksum = cursor.getShort();\n-        return checksum == checksumOf( generation, pointer );\n-    }\n-\n-    // package visible for test purposes\n-    /**\n-     * Calculates a 2-byte checksum from GSP data.\n-     *\n-     * @param generation generation of the pointer.\n-     * @param pointer pointer itself.\n-     *\n-     * @return a {@code short} which is the checksum of the generation-pointer.\n-     */\n-    public static short checksumOf( long generation, long pointer )\n+  private static final int EMPTY_POINTER = 0;\n+  private static final int EMPTY_GENERATION = 0;\n+\n+  static final long MIN_GENERATION = 1L;\n+  // unsigned int\n+  static final long MAX_GENERATION = 0xFFFFFFFFL;\n+  static final long GENERATION_MASK = 0xFFFFFFFFL;\n+  static final long MIN_POINTER = IdSpace.MIN_TREE_NODE_ID;\n+  static final long MAX_POINTER = 0xFFFF_FFFFFFFFL;\n+  static final int UNSIGNED_SHORT_MASK = 0xFFFF;\n+\n+  static final int GENERATION_SIZE = 4;\n+  static final int POINTER_SIZE = 6;\n+  static final int CHECKSUM_SIZE = 2;\n+  static final int SIZE =\n+      GENERATION_SIZE +\n+          POINTER_SIZE +\n+          CHECKSUM_SIZE;\n+\n+  private GenerationSafePointer()\n+  {\n+  }\n+\n+  /**\n+   * Writes GSP at the given {@code offset}, the two fields (generation, pointer) + a checksum will be written.\n+   *\n+   * @param cursor     {@link PageCursor} to write into.\n+   * @param generation generation to write.\n+   * @param pointer    pointer to write.\n+   */\n+  static void write(PageCursor cursor, long generation, long pointer)\n+  {\n+    assertGenerationOnWrite(generation);\n+    assertPointerOnWrite(pointer);\n+    writeGSP(cursor, generation, pointer);\n+  }\n+\n+  private static void writeGSP(PageCursor cursor, long generation, long pointer)\n+  {\n+    cursor.putInt((int) generation);\n+    put6BLong(cursor, pointer);\n+    cursor.putShort(checksumOf(generation, pointer));\n+  }\n+\n+  static void clean(PageCursor cursor)\n+  {\n+    writeGSP(cursor, EMPTY_GENERATION, EMPTY_POINTER);\n+  }\n+\n+  static void assertGenerationOnWrite(long generation)\n+  {\n+    if (generation < MIN_GENERATION || generation > MAX_GENERATION)\n     {\n-        short result = 0;\n-        result ^= ((short) generation) & UNSIGNED_SHORT_MASK;\n-        result ^= ((short) (generation >>> Short.SIZE)) & UNSIGNED_SHORT_MASK;\n-        result ^= ((short) pointer) & UNSIGNED_SHORT_MASK;\n-        result ^= ((short) (pointer >>> Short.SIZE)) & UNSIGNED_SHORT_MASK;\n-        result ^= ((short) (pointer >>> Integer.SIZE)) & UNSIGNED_SHORT_MASK;\n-        return result;\n+      throw new IllegalArgumentException(\"Can not write pointer with generation \" + generation +\n+          \" because outside boundary for valid generation.\");\n     }\n+  }\n \n-    public static boolean isEmpty( long generation, long pointer )\n+  private static void assertPointerOnWrite(long pointer)\n+  {\n+    if ((pointer > MAX_POINTER || pointer < MIN_POINTER) && TreeNode.isNode(pointer))\n     {\n-        return generation == EMPTY_GENERATION && pointer == EMPTY_POINTER;\n+      throw new IllegalArgumentException(\"Can not write pointer \" + pointer +\n+          \" because outside boundary for valid pointer\");\n     }\n+  }\n+\n+  static long readGeneration(PageCursor cursor)\n+  {\n+    return getUnsignedInt(cursor);\n+  }\n+\n+  static long readPointer(PageCursor cursor)\n+  {\n+    return get6BLong(cursor);\n+  }\n+\n+  static short readChecksum(PageCursor cursor)\n+  {\n+    return cursor.getShort();\n+  }\n+\n+  static boolean verifyChecksum(PageCursor cursor, long generation, long pointer)\n+  {\n+    short checksum = cursor.getShort();\n+    return checksum == checksumOf(generation, pointer);\n+  }\n+\n+  // package visible for test purposes\n+\n+  /**\n+   * Calculates a 2-byte checksum from GSP data.\n+   *\n+   * @param generation generation of the pointer.\n+   * @param pointer    pointer itself.\n+   * @return a {@code short} which is the checksum of the generation-pointer.\n+   */\n+  public static short checksumOf(long generation, long pointer)\n+  {\n+    short result = 0;\n+    result ^= ((short) generation) & UNSIGNED_SHORT_MASK;\n+    result ^= ((short) (generation >>> Short.SIZE)) & UNSIGNED_SHORT_MASK;\n+    result ^= ((short) pointer) & UNSIGNED_SHORT_MASK;\n+    result ^= ((short) (pointer >>> Short.SIZE)) & UNSIGNED_SHORT_MASK;\n+    result ^= ((short) (pointer >>> Integer.SIZE)) & UNSIGNED_SHORT_MASK;\n+    return result;\n+  }\n+\n+  public static boolean isEmpty(long generation, long pointer)\n+  {\n+    return generation == EMPTY_GENERATION && pointer == EMPTY_POINTER;\n+  }\n }\n",
            "diff_size": 159
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}