{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3622",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "51",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "101",
                    "column": "61",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "101",
                    "column": "82",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "94",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "126",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "134",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "157",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "159",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "169",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "179",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "194",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "219",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "250",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "287",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "290",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "299",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "299",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "308",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "310",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "313",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "318",
                    "column": "21",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "332",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "337",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "345",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "347",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "357",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "366",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "371",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "388",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "389",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "401",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "404",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "410",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3622/ParallelSort.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3622/ParallelSort.java\nindex 8a4fc1be26d..9b27b0c50b3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3622/ParallelSort.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3622/ParallelSort.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.unsafe.impl.batchimport.cache.idmapping.string;\n \n import java.util.Arrays;\n@@ -37,387 +38,382 @@ import static org.neo4j.unsafe.impl.batchimport.cache.idmapping.string.EncodingI\n  */\n public class ParallelSort\n {\n-    private final int[] radixIndexCount;\n-    private final RadixCalculator radixCalculator;\n-    private final LongArray dataCache;\n-    private final long highestSetIndex;\n-    private final Tracker tracker;\n-    private final int threads;\n-    private long[][] sortBuckets;\n-    private final ProgressListener progress;\n-    private final Comparator comparator;\n-\n-    public ParallelSort( Radix radix, LongArray dataCache, long highestSetIndex,\n-            Tracker tracker, int threads, ProgressListener progress, Comparator comparator )\n+  private final int[] radixIndexCount;\n+  private final RadixCalculator radixCalculator;\n+  private final LongArray dataCache;\n+  private final long highestSetIndex;\n+  private final Tracker tracker;\n+  private final int threads;\n+  private long[][] sortBuckets;\n+  private final ProgressListener progress;\n+  private final Comparator comparator;\n+\n+  public ParallelSort(Radix radix, LongArray dataCache, long highestSetIndex,\n+                      Tracker tracker, int threads, ProgressListener progress, Comparator comparator)\n+  {\n+    this.progress = progress;\n+    this.comparator = comparator;\n+    this.radixIndexCount = radix.getRadixIndexCounts();\n+    this.radixCalculator = radix.calculator();\n+    this.dataCache = dataCache;\n+    this.highestSetIndex = highestSetIndex;\n+    this.tracker = tracker;\n+    this.threads = threads;\n+  }\n+\n+  public synchronized long[][] run() throws InterruptedException\n+  {\n+    long[][] sortParams = sortRadix();\n+    int threadsNeeded = 0;\n+    for (int i = 0; i < threads; i++)\n     {\n-        this.progress = progress;\n-        this.comparator = comparator;\n-        this.radixIndexCount = radix.getRadixIndexCounts();\n-        this.radixCalculator = radix.calculator();\n-        this.dataCache = dataCache;\n-        this.highestSetIndex = highestSetIndex;\n-        this.tracker = tracker;\n-        this.threads = threads;\n+      if (sortParams[i][1] == 0)\n+      {\n+        break;\n+      }\n+      threadsNeeded++;\n     }\n \n-    public synchronized long[][] run() throws InterruptedException\n+    Workers<SortWorker> sortWorkers = new Workers<>(\"SortWorker\");\n+    progress.started(\"SORT\");\n+    for (int i = 0; i < threadsNeeded; i++)\n     {\n-        long[][] sortParams = sortRadix();\n-        int threadsNeeded = 0;\n-        for ( int i = 0; i < threads; i++ )\n-        {\n-            if ( sortParams[i][1] == 0 )\n-            {\n-                break;\n-            }\n-            threadsNeeded++;\n-        }\n-\n-        Workers<SortWorker> sortWorkers = new Workers<>( \"SortWorker\" );\n-        progress.started( \"SORT\" );\n-        for ( int i = 0; i < threadsNeeded; i++ )\n-        {\n-            if ( sortParams[i][1] == 0 )\n-            {\n-                break;\n-            }\n-            sortWorkers.start( new SortWorker( sortParams[i][0], sortParams[i][1] ) );\n-        }\n-        try\n-        {\n-            sortWorkers.awaitAndThrowOnError();\n-        }\n-        finally\n-        {\n-            progress.done();\n-        }\n-        return sortBuckets;\n+      if (sortParams[i][1] == 0)\n+      {\n+        break;\n+      }\n+      sortWorkers.start(new SortWorker(sortParams[i][0], sortParams[i][1]));\n     }\n-\n-    private long[][] sortRadix() throws InterruptedException\n+    try\n     {\n-        long[][] rangeParams = new long[threads][2];\n-        int[] bucketRange = new int[threads];\n-        Workers<TrackerInitializer> initializers = new Workers<>( \"TrackerInitializer\" );\n-        sortBuckets = new long[threads][2];\n-        long dataSize = highestSetIndex + 1;\n-        long bucketSize = dataSize / threads;\n-        long count = 0;\n-        long fullCount = 0;\n-        progress.started( \"SPLIT\" );\n-        for ( int i = 0, threadIndex = 0; i < radixIndexCount.length && threadIndex < threads; i++ )\n-        {\n-            if ( (count + radixIndexCount[i]) > bucketSize )\n-            {\n-                bucketRange[threadIndex] = count == 0 ? i : i - 1;\n-                rangeParams[threadIndex][0] = fullCount;\n-                if ( count != 0 )\n-                {\n-                    rangeParams[threadIndex][1] = count;\n-                    fullCount += count;\n-                    progress.add( count );\n-                    count = radixIndexCount[i];\n-                }\n-                else\n-                {\n-                    rangeParams[threadIndex][1] = radixIndexCount[i];\n-                    fullCount += radixIndexCount[i];\n-                    progress.add( radixIndexCount[i] );\n-                }\n-                initializers.start( new TrackerInitializer( threadIndex, rangeParams[threadIndex],\n-                        threadIndex > 0 ? bucketRange[threadIndex - 1] : -1, bucketRange[threadIndex],\n-                        sortBuckets[threadIndex] ) );\n-                threadIndex++;\n-            }\n-            else\n-            {\n-                count += radixIndexCount[i];\n-            }\n-            if ( threadIndex == threads - 1 || i == radixIndexCount.length - 1 )\n-            {\n-                bucketRange[threadIndex] = radixIndexCount.length;\n-                rangeParams[threadIndex][0] = fullCount;\n-                rangeParams[threadIndex][1] = dataSize - fullCount;\n-                initializers.start( new TrackerInitializer( threadIndex, rangeParams[threadIndex],\n-                        threadIndex > 0 ? bucketRange[threadIndex - 1] : -1, bucketRange[threadIndex],\n-                        sortBuckets[threadIndex] ) );\n-                break;\n-            }\n-        }\n-        progress.done();\n-\n-        // In the loop above where we split up radixes into buckets, we start one thread per bucket whose\n-        // job is to populate trackerCache and sortBuckets where each thread will not touch the same\n-        // data indexes as any other thread. Here we wait for them all to finish.\n-        Throwable error = initializers.await();\n-        long[] bucketIndex = new long[threads];\n-        int i = 0;\n-        for ( TrackerInitializer initializer : initializers )\n-        {\n-            bucketIndex[i++] = initializer.bucketIndex;\n-        }\n-        if ( error != null )\n-        {\n-            throw new AssertionError( error.getMessage() + \"\\n\" + dumpBuckets( rangeParams, bucketRange, bucketIndex ),\n-                    error );\n-        }\n-        return rangeParams;\n+      sortWorkers.awaitAndThrowOnError();\n+    } finally\n+    {\n+      progress.done();\n     }\n-\n-    private String dumpBuckets( long[][] rangeParams, int[] bucketRange, long[] bucketIndex )\n+    return sortBuckets;\n+  }\n+\n+  private long[][] sortRadix() throws InterruptedException\n+  {\n+    long[][] rangeParams = new long[threads][2];\n+    int[] bucketRange = new int[threads];\n+    Workers<TrackerInitializer> initializers = new Workers<>(\"TrackerInitializer\");\n+    sortBuckets = new long[threads][2];\n+    long dataSize = highestSetIndex + 1;\n+    long bucketSize = dataSize / threads;\n+    long count = 0;\n+    long fullCount = 0;\n+    progress.started(\"SPLIT\");\n+    for (int i = 0, threadIndex = 0; i < radixIndexCount.length && threadIndex < threads; i++)\n     {\n-        StringBuilder builder = new StringBuilder();\n-        builder.append( \"rangeParams:\\n\" );\n-        for ( long[] range : rangeParams )\n+      if ((count + radixIndexCount[i]) > bucketSize)\n+      {\n+        bucketRange[threadIndex] = count == 0 ? i : i - 1;\n+        rangeParams[threadIndex][0] = fullCount;\n+        if (count != 0)\n         {\n-            builder.append( \"  \" ).append( Arrays.toString( range ) ).append( \"\\n\" );\n-        }\n-        builder.append( \"bucketRange:\\n\" );\n-        for ( int range : bucketRange )\n-        {\n-            builder.append( \"  \" ).append( range ).append( \"\\n\" );\n-        }\n-        builder.append( \"bucketIndex:\\n\" );\n-        for ( long index : bucketIndex )\n+          rangeParams[threadIndex][1] = count;\n+          fullCount += count;\n+          progress.add(count);\n+          count = radixIndexCount[i];\n+        } else\n         {\n-            builder.append( \"  \" ).append( index ).append( \"\\n\" );\n+          rangeParams[threadIndex][1] = radixIndexCount[i];\n+          fullCount += radixIndexCount[i];\n+          progress.add(radixIndexCount[i]);\n         }\n-        return builder.toString();\n+        initializers.start(new TrackerInitializer(threadIndex, rangeParams[threadIndex],\n+            threadIndex > 0 ? bucketRange[threadIndex - 1] : -1, bucketRange[threadIndex],\n+            sortBuckets[threadIndex]));\n+        threadIndex++;\n+      } else\n+      {\n+        count += radixIndexCount[i];\n+      }\n+      if (threadIndex == threads - 1 || i == radixIndexCount.length - 1)\n+      {\n+        bucketRange[threadIndex] = radixIndexCount.length;\n+        rangeParams[threadIndex][0] = fullCount;\n+        rangeParams[threadIndex][1] = dataSize - fullCount;\n+        initializers.start(new TrackerInitializer(threadIndex, rangeParams[threadIndex],\n+            threadIndex > 0 ? bucketRange[threadIndex - 1] : -1, bucketRange[threadIndex],\n+            sortBuckets[threadIndex]));\n+        break;\n+      }\n+    }\n+    progress.done();\n+\n+    // In the loop above where we split up radixes into buckets, we start one thread per bucket whose\n+    // job is to populate trackerCache and sortBuckets where each thread will not touch the same\n+    // data indexes as any other thread. Here we wait for them all to finish.\n+    Throwable error = initializers.await();\n+    long[] bucketIndex = new long[threads];\n+    int i = 0;\n+    for (TrackerInitializer initializer : initializers)\n+    {\n+      bucketIndex[i++] = initializer.bucketIndex;\n     }\n+    if (error != null)\n+    {\n+      throw new AssertionError(error.getMessage() + \"\\n\" + dumpBuckets(rangeParams, bucketRange, bucketIndex),\n+          error);\n+    }\n+    return rangeParams;\n+  }\n+\n+  private String dumpBuckets(long[][] rangeParams, int[] bucketRange, long[] bucketIndex)\n+  {\n+    StringBuilder builder = new StringBuilder();\n+    builder.append(\"rangeParams:\\n\");\n+    for (long[] range : rangeParams)\n+    {\n+      builder.append(\"  \").append(Arrays.toString(range)).append(\"\\n\");\n+    }\n+    builder.append(\"bucketRange:\\n\");\n+    for (int range : bucketRange)\n+    {\n+      builder.append(\"  \").append(range).append(\"\\n\");\n+    }\n+    builder.append(\"bucketIndex:\\n\");\n+    for (long index : bucketIndex)\n+    {\n+      builder.append(\"  \").append(index).append(\"\\n\");\n+    }\n+    return builder.toString();\n+  }\n+\n+  /**\n+   * Pluggable comparator for the comparisons that quick-sort needs in order to function.\n+   */\n+  public interface Comparator\n+  {\n+    /**\n+     * @return {@code true} if {@code left} is less than {@code pivot}.\n+     */\n+    boolean lt(long left, long pivot);\n \n     /**\n-     * Pluggable comparator for the comparisons that quick-sort needs in order to function.\n+     * @return {@code true} if {@code right} is greater than or equal to {@code pivot}.\n      */\n-    public interface Comparator\n+    boolean ge(long right, long pivot);\n+\n+    /**\n+     * @param dataValue the data value in the used dataCache for a given tracker index.\n+     * @return actual data value given the data value retrieved from the dataCache at a given index.\n+     * This is exposed to be able to introduce an indirection while preparing the tracker indexes\n+     * just like the other methods on this interface does.\n+     */\n+    long dataValue(long dataValue);\n+  }\n+\n+  public static final Comparator DEFAULT = new Comparator()\n+  {\n+    @Override\n+    public boolean lt(long left, long pivot)\n     {\n-        /**\n-         * @return {@code true} if {@code left} is less than {@code pivot}.\n-         */\n-        boolean lt( long left, long pivot );\n-\n-        /**\n-         * @return {@code true} if {@code right} is greater than or equal to {@code pivot}.\n-         */\n-        boolean ge( long right, long pivot );\n-\n-        /**\n-         * @param dataValue the data value in the used dataCache for a given tracker index.\n-         * @return actual data value given the data value retrieved from the dataCache at a given index.\n-         * This is exposed to be able to introduce an indirection while preparing the tracker indexes\n-         * just like the other methods on this interface does.\n-         */\n-        long dataValue( long dataValue );\n+      return Utils.unsignedCompare(left, pivot, CompareType.LT);\n     }\n \n-    public static final Comparator DEFAULT = new Comparator()\n+    @Override\n+    public boolean ge(long right, long pivot)\n     {\n-        @Override\n-        public boolean lt( long left, long pivot )\n-        {\n-            return Utils.unsignedCompare( left, pivot, CompareType.LT );\n-        }\n+      return Utils.unsignedCompare(right, pivot, CompareType.GE);\n+    }\n \n-        @Override\n-        public boolean ge( long right, long pivot )\n-        {\n-            return Utils.unsignedCompare( right, pivot, CompareType.GE );\n-        }\n+    @Override\n+    public long dataValue(long dataValue)\n+    {\n+      return dataValue;\n+    }\n+  };\n+\n+  /**\n+   * Sorts a part of data in dataCache covered by trackerCache. Values in data cache doesn't change location,\n+   * instead trackerCache is updated to point to the right indexes. Only touches a designated part of trackerCache\n+   * so that many can run in parallel on their own part without synchronization.\n+   */\n+  private class SortWorker implements Runnable\n+  {\n+    private final long start;\n+    private final long size;\n+    private int threadLocalProgress;\n+    private final long[] pivotChoice = new long[10];\n+    private final ThreadLocalRandom random = ThreadLocalRandom.current();\n+\n+    SortWorker(long startRange, long size)\n+    {\n+      this.start = startRange;\n+      this.size = size;\n+    }\n \n-        @Override\n-        public long dataValue( long dataValue )\n-        {\n-            return dataValue;\n-        }\n-    };\n+    void incrementProgress(long diff)\n+    {\n+      threadLocalProgress += diff;\n+      if (threadLocalProgress >= 10_000 /*reasonably big to dwarf passing a memory barrier*/)\n+      {   // Update the total progress\n+        reportProgress();\n+      }\n+    }\n \n-    /**\n-     * Sorts a part of data in dataCache covered by trackerCache. Values in data cache doesn't change location,\n-     * instead trackerCache is updated to point to the right indexes. Only touches a designated part of trackerCache\n-     * so that many can run in parallel on their own part without synchronization.\n-     */\n-    private class SortWorker implements Runnable\n+    private void reportProgress()\n     {\n-        private final long start;\n-        private final long size;\n-        private int threadLocalProgress;\n-        private final long[] pivotChoice = new long[10];\n-        private final ThreadLocalRandom random = ThreadLocalRandom.current();\n+      progress.add(threadLocalProgress);\n+      threadLocalProgress = 0;\n+    }\n \n-        SortWorker( long startRange, long size )\n-        {\n-            this.start = startRange;\n-            this.size = size;\n-        }\n+    @Override\n+    public void run()\n+    {\n+      qsort(start, start + size);\n+      reportProgress();\n+    }\n \n-        void incrementProgress( long diff )\n-        {\n-            threadLocalProgress += diff;\n-            if ( threadLocalProgress >= 10_000 /*reasonably big to dwarf passing a memory barrier*/ )\n-            {   // Update the total progress\n-                reportProgress();\n-            }\n+    private long partition(long leftIndex, long rightIndex, long pivotIndex)\n+    {\n+      long li = leftIndex;\n+      long ri = rightIndex - 2;\n+      long pi = pivotIndex;\n+      long pivot = clearCollision(dataCache.get(tracker.get(pi)));\n+      // save pivot in last index\n+      tracker.swap(pi, rightIndex - 1);\n+      long left = clearCollision(dataCache.get(tracker.get(li)));\n+      long right = clearCollision(dataCache.get(tracker.get(ri)));\n+      while (li < ri)\n+      {\n+        if (comparator.lt(left, pivot))\n+        {   // this value is on the correct side of the pivot, moving on\n+          left = clearCollision(dataCache.get(tracker.get(++li)));\n+        } else if (comparator.ge(right, pivot))\n+        {   // this value is on the correct side of the pivot, moving on\n+          right = clearCollision(dataCache.get(tracker.get(--ri)));\n+        } else\n+        {   // this value is on the wrong side of the pivot, swapping\n+          tracker.swap(li, ri);\n+          long temp = left;\n+          left = right;\n+          right = temp;\n         }\n+      }\n+      long partingIndex = ri;\n+      if (comparator.lt(right, pivot))\n+      {\n+        partingIndex++;\n+      }\n+      // restore pivot\n+      tracker.swap(rightIndex - 1, partingIndex);\n+      return partingIndex;\n+    }\n \n-        private void reportProgress()\n+    private void qsort(long initialStart, long initialEnd)\n+    {\n+      PrimitiveLongStack stack = new PrimitiveLongStack(100);\n+      stack.push(initialStart);\n+      stack.push(initialEnd);\n+      while (!stack.isEmpty())\n+      {\n+        long end = stack.poll();\n+        long start = stack.poll();\n+        long diff = end - start;\n+        if (diff < 2)\n         {\n-            progress.add( threadLocalProgress );\n-            threadLocalProgress = 0;\n+          incrementProgress(2);\n+          continue;\n         }\n \n-        @Override\n-        public void run()\n-        {\n-            qsort( start, start + size );\n-            reportProgress();\n-        }\n+        incrementProgress(1);\n \n-        private long partition( long leftIndex, long rightIndex, long pivotIndex )\n-        {\n-            long li = leftIndex;\n-            long ri = rightIndex - 2;\n-            long pi = pivotIndex;\n-            long pivot = clearCollision( dataCache.get( tracker.get( pi ) ) );\n-            // save pivot in last index\n-            tracker.swap( pi, rightIndex - 1 );\n-            long left = clearCollision( dataCache.get( tracker.get( li ) ) );\n-            long right = clearCollision( dataCache.get( tracker.get( ri ) ) );\n-            while ( li < ri )\n-            {\n-                if ( comparator.lt( left, pivot ) )\n-                {   // this value is on the correct side of the pivot, moving on\n-                    left = clearCollision( dataCache.get( tracker.get( ++li ) ) );\n-                }\n-                else if ( comparator.ge( right, pivot ) )\n-                {   // this value is on the correct side of the pivot, moving on\n-                    right = clearCollision( dataCache.get( tracker.get( --ri ) ) );\n-                }\n-                else\n-                {   // this value is on the wrong side of the pivot, swapping\n-                    tracker.swap( li, ri );\n-                    long temp = left;\n-                    left = right;\n-                    right = temp;\n-                }\n-            }\n-            long partingIndex = ri;\n-            if ( comparator.lt( right, pivot ) )\n-            {\n-                partingIndex++;\n-            }\n-            // restore pivot\n-            tracker.swap( rightIndex - 1, partingIndex );\n-            return partingIndex;\n-        }\n+        // choose a random pivot between start and end\n+        long pivot = start + random.nextLong(diff);\n+        pivot = informedPivot(start, end, pivot);\n \n-        private void qsort( long initialStart, long initialEnd )\n-        {\n-            PrimitiveLongStack stack = new PrimitiveLongStack( 100 );\n-            stack.push( initialStart );\n-            stack.push( initialEnd );\n-            while ( !stack.isEmpty() )\n-            {\n-                long end = stack.poll();\n-                long start = stack.poll();\n-                long diff = end - start;\n-                if ( diff < 2 )\n-                {\n-                    incrementProgress( 2 );\n-                    continue;\n-                }\n-\n-                incrementProgress( 1 );\n-\n-                // choose a random pivot between start and end\n-                long pivot = start + random.nextLong( diff );\n-                pivot = informedPivot( start, end, pivot );\n-\n-                // partition, given that pivot\n-                pivot = partition( start, end, pivot );\n-                if ( pivot > start )\n-                {   // there are elements to left of pivot\n-                    stack.push( start );\n-                    stack.push( pivot );\n-                }\n-                if ( pivot + 1 < end )\n-                {   // there are elements to right of pivot\n-                    stack.push( pivot + 1 );\n-                    stack.push( end );\n-                }\n-            }\n+        // partition, given that pivot\n+        pivot = partition(start, end, pivot);\n+        if (pivot > start)\n+        {   // there are elements to left of pivot\n+          stack.push(start);\n+          stack.push(pivot);\n         }\n-\n-        private long informedPivot( long start, long end, long randomIndex )\n-        {\n-            if ( end - start < pivotChoice.length )\n-            {\n-                return randomIndex;\n-            }\n-\n-            long low = Math.max( start, randomIndex - 5 );\n-            long high = Math.min( low + 10, end );\n-            int length = safeCastLongToInt( high - low );\n-\n-            int j = 0;\n-            for ( long i = low; i < high; i++, j++ )\n-            {\n-                pivotChoice[j] = clearCollision( dataCache.get( tracker.get( i ) ) );\n-            }\n-            Arrays.sort( pivotChoice, 0, length );\n-\n-            long middle = pivotChoice[length / 2];\n-            for ( long i = low; i <= high; i++ )\n-            {\n-                if ( clearCollision( dataCache.get( tracker.get( i ) ) ) == middle )\n-                {\n-                    return i;\n-                }\n-            }\n-            throw new IllegalStateException( \"The middle value somehow disappeared in front of our eyes\" );\n+        if (pivot + 1 < end)\n+        {   // there are elements to right of pivot\n+          stack.push(pivot + 1);\n+          stack.push(end);\n         }\n+      }\n     }\n \n-    /**\n-     * Sets the initial tracker indexes pointing to data indexes. Only touches a designated part of trackerCache\n-     * so that many can run in parallel on their own part without synchronization.\n-     */\n-    private class TrackerInitializer implements Runnable\n+    private long informedPivot(long start, long end, long randomIndex)\n     {\n-        private final long[] rangeParams;\n-        private final int lowRadixRange;\n-        private final int highRadixRange;\n-        private final int threadIndex;\n-        private long bucketIndex;\n-        private final long[] result;\n-\n-        TrackerInitializer( int threadIndex, long[] rangeParams, int lowRadixRange, int highRadixRange,\n-                long[] result )\n+      if (end - start < pivotChoice.length)\n+      {\n+        return randomIndex;\n+      }\n+\n+      long low = Math.max(start, randomIndex - 5);\n+      long high = Math.min(low + 10, end);\n+      int length = safeCastLongToInt(high - low);\n+\n+      int j = 0;\n+      for (long i = low; i < high; i++, j++)\n+      {\n+        pivotChoice[j] = clearCollision(dataCache.get(tracker.get(i)));\n+      }\n+      Arrays.sort(pivotChoice, 0, length);\n+\n+      long middle = pivotChoice[length / 2];\n+      for (long i = low; i <= high; i++)\n+      {\n+        if (clearCollision(dataCache.get(tracker.get(i))) == middle)\n         {\n-            this.threadIndex = threadIndex;\n-            this.rangeParams = rangeParams;\n-            this.lowRadixRange = lowRadixRange;\n-            this.highRadixRange = highRadixRange;\n-            this.result = result;\n+          return i;\n         }\n+      }\n+      throw new IllegalStateException(\"The middle value somehow disappeared in front of our eyes\");\n+    }\n+  }\n+\n+  /**\n+   * Sets the initial tracker indexes pointing to data indexes. Only touches a designated part of trackerCache\n+   * so that many can run in parallel on their own part without synchronization.\n+   */\n+  private class TrackerInitializer implements Runnable\n+  {\n+    private final long[] rangeParams;\n+    private final int lowRadixRange;\n+    private final int highRadixRange;\n+    private final int threadIndex;\n+    private long bucketIndex;\n+    private final long[] result;\n+\n+    TrackerInitializer(int threadIndex, long[] rangeParams, int lowRadixRange, int highRadixRange,\n+                       long[] result)\n+    {\n+      this.threadIndex = threadIndex;\n+      this.rangeParams = rangeParams;\n+      this.lowRadixRange = lowRadixRange;\n+      this.highRadixRange = highRadixRange;\n+      this.result = result;\n+    }\n \n-        @Override\n-        public void run()\n+    @Override\n+    public void run()\n+    {\n+      for (long i = 0; i <= highestSetIndex; i++)\n+      {\n+        int rIndex = radixCalculator.radixOf(comparator.dataValue(dataCache.get(i)));\n+        if (rIndex > lowRadixRange && rIndex <= highRadixRange)\n         {\n-            for ( long i = 0; i <= highestSetIndex; i++ )\n-            {\n-                int rIndex = radixCalculator.radixOf( comparator.dataValue( dataCache.get( i ) ) );\n-                if ( rIndex > lowRadixRange && rIndex <= highRadixRange )\n-                {\n-                    long trackerIndex = rangeParams[0] + bucketIndex++;\n-                    assert tracker.get( trackerIndex ) == -1 :\n-                            \"Overlapping buckets i:\" + i + \", k:\" + threadIndex + \", index:\" + trackerIndex;\n-                    tracker.set( trackerIndex, i );\n-                    if ( bucketIndex == rangeParams[1] )\n-                    {\n-                        result[0] = highRadixRange;\n-                        result[1] = rangeParams[0];\n-                    }\n-                }\n-            }\n+          long trackerIndex = rangeParams[0] + bucketIndex++;\n+          assert tracker.get(trackerIndex) == -1 :\n+              \"Overlapping buckets i:\" + i + \", k:\" + threadIndex + \", index:\" + trackerIndex;\n+          tracker.set(trackerIndex, i);\n+          if (bucketIndex == rangeParams[1])\n+          {\n+            result[0] = highRadixRange;\n+            result[1] = rangeParams[0];\n+          }\n         }\n+      }\n     }\n+  }\n }\n",
            "diff_size": 564
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "131",
                    "column": "68",
                    "severity": "error",
                    "message": "Only one statement per line allowed.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.coding.OneStatementPerLineCheck"
                },
                {
                    "line": "345",
                    "column": "27",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "420",
                    "column": "28",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3622/ParallelSort.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3622/ParallelSort.java\nindex 8a4fc1be26d..56517987807 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3622/ParallelSort.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3622/ParallelSort.java\n@@ -83,7 +83,8 @@ public class ParallelSort\n             }\n             sortWorkers.start( new SortWorker( sortParams[i][0], sortParams[i][1] ) );\n         }\n-        try\n+\n+try\n         {\n             sortWorkers.awaitAndThrowOnError();\n         }\n@@ -91,7 +92,8 @@ public class ParallelSort\n         {\n             progress.done();\n         }\n-        return sortBuckets;\n+\n+return sortBuckets;\n     }\n \n     private long[][] sortRadix() throws InterruptedException\n@@ -126,14 +128,14 @@ public class ParallelSort\n                 }\n                 initializers.start( new TrackerInitializer( threadIndex, rangeParams[threadIndex],\n                         threadIndex > 0 ? bucketRange[threadIndex - 1] : -1, bucketRange[threadIndex],\n-                        sortBuckets[threadIndex] ) );\n-                threadIndex++;\n+                        sortBuckets[threadIndex] ) ); threadIndex++;\n             }\n             else\n             {\n                 count += radixIndexCount[i];\n             }\n-            if ( threadIndex == threads - 1 || i == radixIndexCount.length - 1 )\n+\n+if ( threadIndex == threads - 1 || i == radixIndexCount.length - 1 )\n             {\n                 bucketRange[threadIndex] = radixIndexCount.length;\n                 rangeParams[threadIndex][0] = fullCount;\n@@ -141,7 +143,7 @@ public class ParallelSort\n                 initializers.start( new TrackerInitializer( threadIndex, rangeParams[threadIndex],\n                         threadIndex > 0 ? bucketRange[threadIndex - 1] : -1, bucketRange[threadIndex],\n                         sortBuckets[threadIndex] ) );\n-                break;\n+break;\n             }\n         }\n         progress.done();\n@@ -156,12 +158,14 @@ public class ParallelSort\n         {\n             bucketIndex[i++] = initializer.bucketIndex;\n         }\n-        if ( error != null )\n+\n+if ( error != null )\n         {\n             throw new AssertionError( error.getMessage() + \"\\n\" + dumpBuckets( rangeParams, bucketRange, bucketIndex ),\n                     error );\n         }\n-        return rangeParams;\n+\n+return rangeParams;\n     }\n \n     private String dumpBuckets( long[][] rangeParams, int[] bucketRange, long[] bucketIndex )\n@@ -182,7 +186,8 @@ public class ParallelSort\n         {\n             builder.append( \"  \" ).append( index ).append( \"\\n\" );\n         }\n-        return builder.toString();\n+\n+return builder.toString();\n     }\n \n     /**\n@@ -253,7 +258,8 @@ public class ParallelSort\n         {\n             threadLocalProgress += diff;\n             if ( threadLocalProgress >= 10_000 /*reasonably big to dwarf passing a memory barrier*/ )\n-            {   // Update the total progress\n+            {\n+    // Update the total progress\n                 reportProgress();\n             }\n         }\n@@ -284,15 +290,18 @@ public class ParallelSort\n             while ( li < ri )\n             {\n                 if ( comparator.lt( left, pivot ) )\n-                {   // this value is on the correct side of the pivot, moving on\n+                {\n+    // this value is on the correct side of the pivot, moving on\n                     left = clearCollision( dataCache.get( tracker.get( ++li ) ) );\n                 }\n                 else if ( comparator.ge( right, pivot ) )\n-                {   // this value is on the correct side of the pivot, moving on\n+                {\n+    // this value is on the correct side of the pivot, moving on\n                     right = clearCollision( dataCache.get( tracker.get( --ri ) ) );\n                 }\n                 else\n-                {   // this value is on the wrong side of the pivot, swapping\n+                {\n+    // this value is on the wrong side of the pivot, swapping\n                     tracker.swap( li, ri );\n                     long temp = left;\n                     left = right;\n@@ -333,13 +342,16 @@ public class ParallelSort\n \n                 // partition, given that pivot\n                 pivot = partition( start, end, pivot );\n-                if ( pivot > start )\n-                {   // there are elements to left of pivot\n+                if ( pivot> start )\n+                {\n+    // there are elements to left of pivot\n                     stack.push( start );\n                     stack.push( pivot );\n                 }\n-                if ( pivot + 1 < end )\n-                {   // there are elements to right of pivot\n+\n+if ( pivot + 1 < end )\n+                {\n+    // there are elements to right of pivot\n                     stack.push( pivot + 1 );\n                     stack.push( end );\n                 }\n@@ -405,12 +417,11 @@ public class ParallelSort\n             for ( long i = 0; i <= highestSetIndex; i++ )\n             {\n                 int rIndex = radixCalculator.radixOf( comparator.dataValue( dataCache.get( i ) ) );\n-                if ( rIndex > lowRadixRange && rIndex <= highRadixRange )\n+                if ( rIndex> lowRadixRange && rIndex <= highRadixRange )\n                 {\n                     long trackerIndex = rangeParams[0] + bucketIndex++;\n-                    assert tracker.get( trackerIndex ) == -1 :\n-                            \"Overlapping buckets i:\" + i + \", k:\" + threadIndex + \", index:\" + trackerIndex;\n-                    tracker.set( trackerIndex, i );\n+                    assert tracker.get( trackerIndex ) == -1 : \"Overlapping buckets i:\" + i + \", k:\" + threadIndex + \", index:\" + trackerIndex;\n+tracker.set( trackerIndex, i );\n                     if ( bucketIndex == rangeParams[1] )\n                     {\n                         result[0] = highRadixRange;\n@@ -420,4 +431,4 @@ public class ParallelSort\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 35
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}