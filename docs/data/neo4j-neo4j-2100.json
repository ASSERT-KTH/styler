{
    "project_name": "neo4j-neo4j",
    "error_id": "2100",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "38",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "38",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2100/LabelEntryView.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2100/LabelEntryView.java\nindex af0d3d7ad81..94d38210b71 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2100/LabelEntryView.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2100/LabelEntryView.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.internal.event;\n \n import org.neo4j.graphdb.Label;\n@@ -28,17 +29,17 @@ import org.neo4j.memory.HeapEstimator;\n \n class LabelEntryView implements LabelEntry\n {\n-    static final long SHALLOW_SIZE = HeapEstimator.shallowSizeOfInstance( LabelEntryView.class );\n+    static final long SHALLOW_SIZE = HeapEstimator.shallowSizeOfInstance(LabelEntryView.class);\n \n     private final InternalTransaction internalTransaction;\n     private final long nodeId;\n     private final Label label;\n \n-    LabelEntryView( InternalTransaction internalTransaction, long nodeId, String labelName )\n+    LabelEntryView(InternalTransaction internalTransaction, long nodeId, String labelName)\n     {\n         this.internalTransaction = internalTransaction;\n         this.nodeId = nodeId;\n-        this.label = Label.label( labelName );\n+        this.label = Label.label(labelName);\n     }\n \n     @Override\n@@ -50,15 +51,15 @@ class LabelEntryView implements LabelEntry\n     @Override\n     public Node node()\n     {\n-        return new NodeEntity( internalTransaction, nodeId );\n+        return new NodeEntity(internalTransaction, nodeId);\n     }\n \n     @Override\n     public String toString()\n     {\n         return \"LabelEntryView{\" +\n-                \"nodeId=\" + nodeId +\n-                \", label=\" + label +\n-                '}';\n+          \"nodeId=\" + nodeId +\n+          \", label=\" + label +\n+          '}';\n     }\n }\n",
            "diff_size": 8
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}