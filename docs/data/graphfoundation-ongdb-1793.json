{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1793",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "40",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "40",
                    "column": "61",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1793/ConfigOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1793/ConfigOptions.java\nindex 6436468decf..a115ea6822a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1793/ConfigOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1793/ConfigOptions.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.configuration;\n \n import java.util.List;\n@@ -34,35 +35,35 @@ import org.neo4j.graphdb.config.SettingGroup;\n  */\n public class ConfigOptions\n {\n-    private final SettingGroup<?> settingGroup;\n+  private final SettingGroup<?> settingGroup;\n \n-    public ConfigOptions( @Nonnull SettingGroup<?> settingGroup )\n-    {\n-        this.settingGroup = settingGroup;\n-    }\n+  public ConfigOptions(@Nonnull SettingGroup<?> settingGroup)\n+  {\n+    this.settingGroup = settingGroup;\n+  }\n \n-    @Nonnull\n-    public SettingGroup<?> settingGroup()\n-    {\n-        return settingGroup;\n-    }\n+  @Nonnull\n+  public SettingGroup<?> settingGroup()\n+  {\n+    return settingGroup;\n+  }\n \n-    @Nonnull\n-    public List<ConfigValue> asConfigValues( @Nonnull Map<String,String> validConfig )\n-    {\n-        Map<String,Setting<?>> settings = settingGroup.settings( validConfig ).stream()\n-                .collect( Collectors.toMap( Setting::name, s -> s ) );\n+  @Nonnull\n+  public List<ConfigValue> asConfigValues(@Nonnull Map<String, String> validConfig)\n+  {\n+    Map<String, Setting<?>> settings = settingGroup.settings(validConfig).stream()\n+        .collect(Collectors.toMap(Setting::name, s -> s));\n \n-        return settingGroup.values( validConfig ).entrySet().stream()\n-                .map( val ->\n-                {\n-                    BaseSetting<?> setting = (BaseSetting) settings.get( val.getKey() );\n-                    return new ConfigValue( setting.name(), setting.description(),\n-                            setting.documentedDefaultValue(),\n-                        Optional.ofNullable( val.getValue() ),\n-                            setting.valueDescription(), setting.internal(), setting.dynamic(),\n-                            setting.deprecated(), setting.replacement(), setting.secret() );\n-                } )\n-                .collect( Collectors.toList() );\n-    }\n+    return settingGroup.values(validConfig).entrySet().stream()\n+        .map(val ->\n+        {\n+          BaseSetting<?> setting = (BaseSetting) settings.get(val.getKey());\n+          return new ConfigValue(setting.name(), setting.description(),\n+              setting.documentedDefaultValue(),\n+              Optional.ofNullable(val.getValue()),\n+              setting.valueDescription(), setting.internal(), setting.dynamic(),\n+              setting.deprecated(), setting.replacement(), setting.secret());\n+        })\n+        .collect(Collectors.toList());\n+  }\n }\n",
            "diff_size": 28
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "57",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 287).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1793/ConfigOptions.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1793/ConfigOptions.java\nindex 6436468decf..2df890cd853 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1793/ConfigOptions.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1793/ConfigOptions.java\n@@ -50,19 +50,11 @@ public class ConfigOptions\n     @Nonnull\n     public List<ConfigValue> asConfigValues( @Nonnull Map<String,String> validConfig )\n     {\n-        Map<String,Setting<?>> settings = settingGroup.settings( validConfig ).stream()\n-                .collect( Collectors.toMap( Setting::name, s -> s ) );\n-\n-        return settingGroup.values( validConfig ).entrySet().stream()\n-                .map( val ->\n+        Map<String,Setting<?>> settings = settingGroup.settings( validConfig ).stream().collect( Collectors.toMap( Setting::name, s -> s ) );\n+return settingGroup.values( validConfig ).entrySet().stream().map( val ->\n                 {\n                     BaseSetting<?> setting = (BaseSetting) settings.get( val.getKey() );\n-                    return new ConfigValue( setting.name(), setting.description(),\n-                            setting.documentedDefaultValue(),\n-                        Optional.ofNullable( val.getValue() ),\n-                            setting.valueDescription(), setting.internal(), setting.dynamic(),\n-                            setting.deprecated(), setting.replacement(), setting.secret() );\n-                } )\n-                .collect( Collectors.toList() );\n+                    return new ConfigValue( setting.name(), setting.description(), setting.documentedDefaultValue(), Optional.ofNullable( val.getValue() ), setting.valueDescription(), setting.internal(), setting.dynamic(), setting.deprecated(), setting.replacement(), setting.secret() );\n+                } ).collect( Collectors.toList() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}