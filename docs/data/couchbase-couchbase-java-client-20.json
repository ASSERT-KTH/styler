{
    "project_name": "couchbase-couchbase-java-client",
    "error_id": "20",
    "information": {
        "errors": [
            {
                "line": "371",
                "severity": "warning",
                "message": "Line is longer than 120 characters (found 125).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "     * @return the upserted {@link DesignDocument} on success.\n     */\n    DesignDocument upsertDesignDocument(DesignDocument designDocument, boolean development, long timeout, TimeUnit timeUnit);\n\n    /**\n     * Removes a {@link DesignDocument} from production by its name with the default management timeout.",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "371",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/20/BucketManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/20/BucketManager.java\nindex 5c693f4173c..aa68f08b0cf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/20/BucketManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/intellij/20/BucketManager.java\n@@ -1,16 +1,16 @@\n /**\n  * Copyright (C) 2014 Couchbase, Inc.\n- *\n+ * <p>\n  * Permission is hereby granted, free of charge, to any person obtaining a copy\n  * of this software and associated documentation files (the \"Software\"), to deal\n  * in the Software without restriction, including without limitation the rights\n  * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  * copies of the Software, and to permit persons to whom the Software is\n  * furnished to do so, subject to the following conditions:\n- *\n+ * <p>\n  * The above copyright notice and this permission notice shall be included in\n  * all copies or substantial portions of the Software.\n- *\n+ * <p>\n  * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n@@ -19,6 +19,7 @@\n  * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALING\n  * IN THE SOFTWARE.\n  */\n+\n package com.couchbase.client.java.bucket;\n \n import com.couchbase.client.core.annotations.InterfaceAudience;\n@@ -309,7 +310,7 @@ public interface BucketManager {\n      * @return the inserted {@link DesignDocument} on success.\n      */\n     DesignDocument insertDesignDocument(DesignDocument designDocument, boolean development, long timeout,\n-        TimeUnit timeUnit);\n+                                        TimeUnit timeUnit);\n \n     /**\n      * Upserts (inserts or replaces) a {@link DesignDocument} into production with the default management timeout.\n@@ -368,7 +369,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return the upserted {@link DesignDocument} on success.\n      */\n-    DesignDocument upsertDesignDocument(DesignDocument designDocument, boolean development, long timeout, TimeUnit timeUnit);\n+    DesignDocument upsertDesignDocument(DesignDocument designDocument, boolean development, long timeout,\n+                                        TimeUnit timeUnit);\n \n     /**\n      * Removes a {@link DesignDocument} from production by its name with the default management timeout.\n",
            "diff_size": 7
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "311",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "370",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/20/BucketManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/20/BucketManager.java\nindex 5c693f4173c..43e5d4cc471 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/20/BucketManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/naturalize/20/BucketManager.java\n@@ -308,10 +308,9 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return the inserted {@link DesignDocument} on success.\n      */\n-    DesignDocument insertDesignDocument(DesignDocument designDocument, boolean development, long timeout,\n-        TimeUnit timeUnit);\n+    DesignDocument insertDesignDocument(DesignDocument designDocument, boolean development, long timeout, TimeUnit timeUnit);\n \n-    /**\n+/**\n      * Upserts (inserts or replaces) a {@link DesignDocument} into production with the default management timeout.\n      *\n      * This method throws:\n@@ -495,4 +494,4 @@ public interface BucketManager {\n      * @return the published {@link DesignDocument} on success.\n      */\n     DesignDocument publishDesignDocument(String name, boolean overwrite, long timeout, TimeUnit timeUnit);\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "345",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "412",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/20/BucketManager.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/20/BucketManager.java\nindex 5c693f4173c..2afe66a5f5d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/errored/1/20/BucketManager.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/couchbase-couchbase-java-client/codebuff/20/BucketManager.java\n@@ -25,7 +25,6 @@ import com.couchbase.client.core.annotations.InterfaceAudience;\n import com.couchbase.client.core.annotations.InterfaceStability;\n import com.couchbase.client.java.Bucket;\n import com.couchbase.client.java.view.DesignDocument;\n-\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n \n@@ -39,6 +38,8 @@ import java.util.concurrent.TimeUnit;\n  * @author Michael Nitschinger\n  * @since 2.0\n  */\n+\n+\n @InterfaceStability.Committed\n @InterfaceAudience.Public\n public interface BucketManager {\n@@ -48,6 +49,7 @@ public interface BucketManager {\n      *\n      * @return the underlying bucket manager.\n      */\n+\n     AsyncBucketManager async();\n \n     /**\n@@ -60,6 +62,8 @@ public interface BucketManager {\n      *\n      * @return bucket information wrapped in a {@link BucketInfo}.\n      */\n+\n+\n     BucketInfo info();\n \n     /**\n@@ -74,6 +78,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return bucket information wrapped in a {@link BucketInfo}.\n      */\n+\n+\n     BucketInfo info(long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -90,6 +96,8 @@ public interface BucketManager {\n      *\n      * @return true if the bucket was flushed, an exception thrown if otherwise.\n      */\n+\n+\n     Boolean flush();\n \n     /**\n@@ -108,6 +116,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return true if the bucket was flushed, an exception thrown if otherwise.\n      */\n+\n+\n     Boolean flush(long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -120,6 +130,8 @@ public interface BucketManager {\n      *\n      * @return a potentially empty list containing published {@link DesignDocument}s.\n      */\n+\n+\n     List<DesignDocument> getDesignDocuments();\n \n     /**\n@@ -134,6 +146,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return a potentially empty list containing published {@link DesignDocument}s.\n      */\n+\n+\n     List<DesignDocument> getDesignDocuments(long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -147,6 +161,8 @@ public interface BucketManager {\n      * @param development if {@link DesignDocument}s should be loaded from development or from production.\n      * @return a potentially empty list containing published {@link DesignDocument}s.\n      */\n+\n+\n     List<DesignDocument> getDesignDocuments(boolean development);\n \n     /**\n@@ -162,6 +178,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return a potentially empty list containing published {@link DesignDocument}s.\n      */\n+\n+\n     List<DesignDocument> getDesignDocuments(boolean development, long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -177,6 +195,8 @@ public interface BucketManager {\n      * @param name the name of the {@link DesignDocument}.\n      * @return null if the document not found or a {@link DesignDocument}.\n      */\n+\n+\n     DesignDocument getDesignDocument(String name);\n \n     /**\n@@ -194,6 +214,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return null if the document not found or a {@link DesignDocument}.\n      */\n+\n+\n     DesignDocument getDesignDocument(String name, long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -211,6 +233,8 @@ public interface BucketManager {\n      * @param development if {@link DesignDocument} should be loaded from development or from production.\n      * @return null if the document not found or a {@link DesignDocument}.\n      */\n+\n+\n     DesignDocument getDesignDocument(String name, boolean development);\n \n     /**\n@@ -229,6 +253,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return null if the document not found or a {@link DesignDocument}.\n      */\n+\n+\n     DesignDocument getDesignDocument(String name, boolean development, long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -247,6 +273,8 @@ public interface BucketManager {\n      * @param designDocument the {@link DesignDocument} to insert.\n      * @return the inserted {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument insertDesignDocument(DesignDocument designDocument);\n \n     /**\n@@ -267,6 +295,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return the inserted {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument insertDesignDocument(DesignDocument designDocument, long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -287,6 +317,8 @@ public interface BucketManager {\n      * @param development if it should be inserted into development or production (published).\n      * @return the inserted {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument insertDesignDocument(DesignDocument designDocument, boolean development);\n \n     /**\n@@ -308,8 +340,9 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return the inserted {@link DesignDocument} on success.\n      */\n-    DesignDocument insertDesignDocument(DesignDocument designDocument, boolean development, long timeout,\n-        TimeUnit timeUnit);\n+\n+\n+    DesignDocument insertDesignDocument(DesignDocument designDocument, boolean development, long timeout, TimeUnit timeUnit);\n \n     /**\n      * Upserts (inserts or replaces) a {@link DesignDocument} into production with the default management timeout.\n@@ -322,6 +355,8 @@ public interface BucketManager {\n      * @param designDocument the {@link DesignDocument} to upsert.\n      * @return the upserted {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument upsertDesignDocument(DesignDocument designDocument);\n \n     /**\n@@ -337,6 +372,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return the upserted {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument upsertDesignDocument(DesignDocument designDocument, long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -352,6 +389,8 @@ public interface BucketManager {\n      * @param development if the {@link DesignDocument} should be upserted into development or production.\n      * @return the upserted {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument upsertDesignDocument(DesignDocument designDocument, boolean development);\n \n     /**\n@@ -368,6 +407,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return the upserted {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument upsertDesignDocument(DesignDocument designDocument, boolean development, long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -380,6 +421,8 @@ public interface BucketManager {\n      * @param name the name of the {@link DesignDocument}.\n      * @return true if succeeded, false otherwise.\n      */\n+\n+\n     Boolean removeDesignDocument(String name);\n \n     /**\n@@ -394,6 +437,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return true if succeeded, false otherwise.\n      */\n+\n+\n     Boolean removeDesignDocument(String name, long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -407,6 +452,8 @@ public interface BucketManager {\n      * @param development if the {@link DesignDocument} should be removed from development or production.\n      * @return true if succeeded, false otherwise.\n      */\n+\n+\n     Boolean removeDesignDocument(String name, boolean development);\n \n     /**\n@@ -422,6 +469,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return true if succeeded, false otherwise.\n      */\n+\n+\n     Boolean removeDesignDocument(String name, boolean development, long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -440,6 +489,8 @@ public interface BucketManager {\n      * @param name the name of the  {@link DesignDocument} to publish.\n      * @return the published {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument publishDesignDocument(String name);\n \n     /**\n@@ -460,6 +511,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return the published {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument publishDesignDocument(String name, long timeout, TimeUnit timeUnit);\n \n     /**\n@@ -476,6 +529,8 @@ public interface BucketManager {\n      * @param overwrite if an existing {@link DesignDocument} should be overridden.\n      * @return the published {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument publishDesignDocument(String name, boolean overwrite);\n \n     /**\n@@ -494,5 +549,8 @@ public interface BucketManager {\n      * @param timeUnit the time unit for the custom timeout.\n      * @return the published {@link DesignDocument} on success.\n      */\n+\n+\n     DesignDocument publishDesignDocument(String name, boolean overwrite, long timeout, TimeUnit timeUnit);\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 63
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "371",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "371",
                    "severity": "warning",
                    "message": "Line is longer than 120 characters (found 125).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}