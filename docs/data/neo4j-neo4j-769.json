{
    "project_name": "neo4j-neo4j",
    "error_id": "769",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "49",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "76",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "124",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "134",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "136",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "160",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/769/PathValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/769/PathValue.java\nindex a19bac9e5e4..0f000d807e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/769/PathValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/769/PathValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.virtual;\n \n import java.util.Arrays;\n@@ -45,16 +46,16 @@ public abstract class PathValue extends VirtualValue\n     public abstract RelationshipValue[] relationships();\n \n     @Override\n-    public boolean equals( VirtualValue other )\n+    public boolean equals(VirtualValue other)\n     {\n-        if ( !(other instanceof PathValue) )\n+        if (!(other instanceof PathValue))\n         {\n             return false;\n         }\n         PathValue that = (PathValue) other;\n         return size() == that.size() &&\n-               Arrays.equals( nodes(), that.nodes() ) &&\n-               Arrays.equals( relationships(), that.relationships() );\n+          Arrays.equals(nodes(), that.nodes()) &&\n+          Arrays.equals(relationships(), that.relationships());\n     }\n \n     @Override\n@@ -63,7 +64,7 @@ public abstract class PathValue extends VirtualValue\n         NodeValue[] nodes = nodes();\n         RelationshipValue[] relationships = relationships();\n         int result = nodes[0].hashCode();\n-        for ( int i = 1; i < nodes.length; i++ )\n+        for (int i = 1; i < nodes.length; i++)\n         {\n             result += HASH_CONSTANT * (result + relationships[i - 1].hashCode());\n             result += HASH_CONSTANT * (result + nodes[i].hashCode());\n@@ -72,15 +73,15 @@ public abstract class PathValue extends VirtualValue\n     }\n \n     @Override\n-    public <E extends Exception> void writeTo( AnyValueWriter<E> writer ) throws E\n+    public <E extends Exception> void writeTo(AnyValueWriter<E> writer) throws E\n     {\n-        writer.writePath( nodes(), relationships() );\n+        writer.writePath(nodes(), relationships());\n     }\n \n     @Override\n-    public <T> T map( ValueMapper<T> mapper )\n+    public <T> T map(ValueMapper<T> mapper)\n     {\n-        return mapper.mapPath( this );\n+        return mapper.mapPath(this);\n     }\n \n     @Override\n@@ -90,7 +91,7 @@ public abstract class PathValue extends VirtualValue\n     }\n \n     @Override\n-    public int unsafeCompareTo( VirtualValue other, Comparator<AnyValue> comparator )\n+    public int unsafeCompareTo(VirtualValue other, Comparator<AnyValue> comparator)\n     {\n         PathValue otherPath = (PathValue) other;\n         NodeValue[] nodes = nodes();\n@@ -98,21 +99,21 @@ public abstract class PathValue extends VirtualValue\n         NodeValue[] otherNodes = otherPath.nodes();\n         RelationshipValue[] otherRelationships = otherPath.relationships();\n \n-        int x = nodes[0].unsafeCompareTo( otherNodes[0], comparator );\n-        if ( x == 0 )\n+        int x = nodes[0].unsafeCompareTo(otherNodes[0], comparator);\n+        if (x == 0)\n         {\n             int i = 0;\n-            int length = Math.min( relationships.length, otherRelationships.length );\n+            int length = Math.min(relationships.length, otherRelationships.length);\n \n-            while ( x == 0 && i < length )\n+            while (x == 0 && i < length)\n             {\n-                x = relationships[i].unsafeCompareTo( otherRelationships[i], comparator );\n+                x = relationships[i].unsafeCompareTo(otherRelationships[i], comparator);\n                 ++i;\n             }\n \n-            if ( x == 0 )\n+            if (x == 0)\n             {\n-                x = Integer.compare( relationships.length, otherRelationships.length );\n+                x = Integer.compare(relationships.length, otherRelationships.length);\n             }\n         }\n \n@@ -120,9 +121,9 @@ public abstract class PathValue extends VirtualValue\n     }\n \n     @Override\n-    public Comparison unsafeTernaryCompareTo( VirtualValue other, TernaryComparator<AnyValue> comparator )\n+    public Comparison unsafeTernaryCompareTo(VirtualValue other, TernaryComparator<AnyValue> comparator)\n     {\n-        return Comparison.from( unsafeCompareTo( other, comparator ) );\n+        return Comparison.from(unsafeCompareTo(other, comparator));\n     }\n \n     @Override\n@@ -130,15 +131,15 @@ public abstract class PathValue extends VirtualValue\n     {\n         NodeValue[] nodes = nodes();\n         RelationshipValue[] relationships = relationships();\n-        StringBuilder sb = new StringBuilder( getTypeName() + \"{\" );\n+        StringBuilder sb = new StringBuilder(getTypeName() + \"{\");\n         int i = 0;\n-        for ( ; i < relationships.length; i++ )\n+        for (; i < relationships.length; i++)\n         {\n-            sb.append( nodes[i] );\n-            sb.append( relationships[i] );\n+            sb.append(nodes[i]);\n+            sb.append(relationships[i]);\n         }\n-        sb.append( nodes[i] );\n-        sb.append( '}' );\n+        sb.append(nodes[i]);\n+        sb.append('}');\n         return sb.toString();\n     }\n \n@@ -153,16 +154,15 @@ public abstract class PathValue extends VirtualValue\n         NodeValue[] nodes = nodes();\n         RelationshipValue[] relationships = relationships();\n         int size = nodes.length + relationships.length;\n-        ListValueBuilder builder = ListValueBuilder.newListBuilder( size );\n-        for ( int i = 0; i < size; i++ )\n+        ListValueBuilder builder = ListValueBuilder.newListBuilder(size);\n+        for (int i = 0; i < size; i++)\n         {\n-            if ( i % 2 == 0 )\n+            if (i % 2 == 0)\n             {\n-                builder.add( nodes[i / 2] );\n-            }\n-            else\n+                builder.add(nodes[i / 2]);\n+            } else\n             {\n-                builder.add( relationships[i / 2] );\n+                builder.add(relationships[i / 2]);\n             }\n         }\n         return builder.build();\n@@ -173,14 +173,15 @@ public abstract class PathValue extends VirtualValue\n         return relationships().length;\n     }\n \n-    private static final long DIRECT_PATH_SHALLOW_SIZE = shallowSizeOfInstance( DirectPathValue.class );\n+    private static final long DIRECT_PATH_SHALLOW_SIZE = shallowSizeOfInstance(DirectPathValue.class);\n+\n     static class DirectPathValue extends PathValue\n     {\n         private final NodeValue[] nodes;\n         private final RelationshipValue[] edges;\n         private final long payloadSize;\n \n-        DirectPathValue( NodeValue[] nodes, RelationshipValue[] edges, long payloadSize )\n+        DirectPathValue(NodeValue[] nodes, RelationshipValue[] edges, long payloadSize)\n         {\n             assert nodes != null;\n             assert edges != null;\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}