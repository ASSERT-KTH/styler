{
    "project_name": "apache-shardingsphere",
    "error_id": "24",
    "information": {
        "errors": [
            {
                "line": "57",
                "column": "5",
                "severity": "warning",
                "message": "'/*' has more than 1 empty lines before.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": "    \n    \n    /**\n     * Execute query.\n     *\n     * @param executionGroupContext execution group context",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/24/DriverJDBCExecutor.java\nindex 5e8b833466b..1b689e6400d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler/24/DriverJDBCExecutor.java\n@@ -52,8 +52,7 @@ public final class DriverJDBCExecutor {\n         this.jdbcExecutor = jdbcExecutor;\n         this.jdbcLockEngine = new JDBCLockEngine(metaDataContexts, jdbcExecutor);\n     }\n-    \n-    \n+\n     /**\n      * Execute query.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "57",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/24/DriverJDBCExecutor.java\nindex 5e8b833466b..323ef8d8a39 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/intellij/24/DriverJDBCExecutor.java\n@@ -39,43 +39,43 @@ import java.util.List;\n  * Driver JDBC executor.\n  */\n public final class DriverJDBCExecutor {\n-    \n+\n     private final MetaDataContexts metaDataContexts;\n-    \n+\n     @Getter\n     private final JDBCExecutor jdbcExecutor;\n-    \n+\n     private final JDBCLockEngine jdbcLockEngine;\n-    \n+\n     public DriverJDBCExecutor(final MetaDataContexts metaDataContexts, final JDBCExecutor jdbcExecutor) {\n         this.metaDataContexts = metaDataContexts;\n         this.jdbcExecutor = jdbcExecutor;\n         this.jdbcLockEngine = new JDBCLockEngine(metaDataContexts, jdbcExecutor);\n     }\n-    \n-    \n+\n+\n     /**\n      * Execute query.\n      *\n      * @param executionGroupContext execution group context\n-     * @param sqlStatementContext SQL statement context\n-     * @param callback execute query callback\n+     * @param sqlStatementContext   SQL statement context\n+     * @param callback              execute query callback\n      * @return query results\n      * @throws SQLException SQL exception\n      */\n-    public List<QueryResult> executeQuery(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, \n+    public List<QueryResult> executeQuery(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext,\n                                           final SQLStatementContext<?> sqlStatementContext, final ExecuteQueryCallback callback) throws SQLException {\n         ExecuteProcessEngine.initialize(sqlStatementContext, executionGroupContext);\n         return jdbcExecutor.execute(executionGroupContext, callback);\n     }\n-    \n+\n     /**\n      * Execute update.\n      *\n      * @param executionGroupContext execution group context\n-     * @param sqlStatementContext SQL statement context\n-     * @param routeUnits route units\n-     * @param callback JDBC executor callback\n+     * @param sqlStatementContext   SQL statement context\n+     * @param routeUnits            route units\n+     * @param callback              JDBC executor callback\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n@@ -84,22 +84,22 @@ public final class DriverJDBCExecutor {\n         List<Integer> results = jdbcLockEngine.execute(executionGroupContext, sqlStatementContext, routeUnits, callback);\n         return isNeedAccumulate(metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(), sqlStatementContext) ? accumulate(results) : results.get(0);\n     }\n-    \n+\n     private boolean isNeedAccumulate(final Collection<ShardingSphereRule> rules, final SQLStatementContext<?> sqlStatementContext) {\n         return rules.stream().anyMatch(each -> each instanceof DataNodeContainedRule && ((DataNodeContainedRule) each).isNeedAccumulate(sqlStatementContext.getTablesContext().getTableNames()));\n     }\n-    \n+\n     private int accumulate(final List<Integer> updateResults) {\n         return updateResults.stream().mapToInt(each -> null == each ? 0 : each).sum();\n     }\n-    \n+\n     /**\n      * Execute SQL.\n      *\n      * @param executionGroupContext execution group context\n-     * @param sqlStatementContext SQL statement context\n-     * @param routeUnits route units\n-     * @param callback JDBC executor callback\n+     * @param sqlStatementContext   SQL statement context\n+     * @param routeUnits            route units\n+     * @param callback              JDBC executor callback\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "67",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "81",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 256).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 0, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 254).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "warning",
                    "message": "'method def' child has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/24/DriverJDBCExecutor.java\nindex 5e8b833466b..f7f4b34e029 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/naturalize/24/DriverJDBCExecutor.java\n@@ -52,8 +52,7 @@ public final class DriverJDBCExecutor {\n         this.jdbcExecutor = jdbcExecutor;\n         this.jdbcLockEngine = new JDBCLockEngine(metaDataContexts, jdbcExecutor);\n     }\n-    \n-    \n+\n     /**\n      * Execute query.\n      *\n@@ -65,7 +64,7 @@ public final class DriverJDBCExecutor {\n      */\n     public List<QueryResult> executeQuery(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, \n                                           final SQLStatementContext<?> sqlStatementContext, final ExecuteQueryCallback callback) throws SQLException {\n-        ExecuteProcessEngine.initialize(sqlStatementContext, executionGroupContext);\n+    ExecuteProcessEngine.initialize(sqlStatementContext, executionGroupContext);\n         return jdbcExecutor.execute(executionGroupContext, callback);\n     }\n     \n@@ -79,9 +78,8 @@ public final class DriverJDBCExecutor {\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n-    public int executeUpdate(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext,\n-                             final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final JDBCExecutorCallback<Integer> callback) throws SQLException {\n-        List<Integer> results = jdbcLockEngine.execute(executionGroupContext, sqlStatementContext, routeUnits, callback);\n+    public int executeUpdate(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final JDBCExecutorCallback<Integer> callback) throws SQLException {\n+List<Integer> results = jdbcLockEngine.execute(executionGroupContext, sqlStatementContext, routeUnits, callback);\n         return isNeedAccumulate(metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(), sqlStatementContext) ? accumulate(results) : results.get(0);\n     }\n     \n@@ -103,10 +101,9 @@ public final class DriverJDBCExecutor {\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n-    public boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final SQLStatementContext<?> sqlStatementContext,\n-                           final Collection<RouteUnit> routeUnits, final JDBCExecutorCallback<Boolean> callback) throws SQLException {\n-        ExecuteProcessEngine.initialize(sqlStatementContext, executionGroupContext);\n+    public boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final JDBCExecutorCallback<Boolean> callback) throws SQLException {\n+    ExecuteProcessEngine.initialize(sqlStatementContext, executionGroupContext);\n         List<Boolean> results = jdbcLockEngine.execute(executionGroupContext, sqlStatementContext, routeUnits, callback);\n         return null != results && !results.isEmpty() && null != results.get(0) && results.get(0);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "42",
                    "severity": "warning",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "58",
                    "column": "5",
                    "severity": "warning",
                    "message": "'/*' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "69",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "87",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 256).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "93",
                    "column": "44",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "97",
                    "column": "52",
                    "severity": "warning",
                    "message": "'->' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "97",
                    "column": "52",
                    "severity": "warning",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "'METHOD_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "112",
                    "severity": "warning",
                    "message": "Line is longer than 200 characters (found 254).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/24/DriverJDBCExecutor.java\nindex 5e8b833466b..1363127fdd9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/codebuff/24/DriverJDBCExecutor.java\n@@ -30,7 +30,6 @@ import org.apache.shardingsphere.infra.executor.sql.process.ExecuteProcessEngine\n import org.apache.shardingsphere.infra.route.context.RouteUnit;\n import org.apache.shardingsphere.infra.rule.ShardingSphereRule;\n import org.apache.shardingsphere.infra.rule.type.DataNodeContainedRule;\n-\n import java.sql.SQLException;\n import java.util.Collection;\n import java.util.List;\n@@ -38,15 +37,17 @@ import java.util.List;\n /**\n  * Driver JDBC executor.\n  */\n+\n+\n public final class DriverJDBCExecutor {\n-    \n+\n     private final MetaDataContexts metaDataContexts;\n-    \n+\n     @Getter\n     private final JDBCExecutor jdbcExecutor;\n-    \n+\n     private final JDBCLockEngine jdbcLockEngine;\n-    \n+\n     public DriverJDBCExecutor(final MetaDataContexts metaDataContexts, final JDBCExecutor jdbcExecutor) {\n         this.metaDataContexts = metaDataContexts;\n         this.jdbcExecutor = jdbcExecutor;\n@@ -63,7 +64,9 @@ public final class DriverJDBCExecutor {\n      * @return query results\n      * @throws SQLException SQL exception\n      */\n-    public List<QueryResult> executeQuery(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, \n+\n+\n+    public List<QueryResult> executeQuery(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext,\n                                           final SQLStatementContext<?> sqlStatementContext, final ExecuteQueryCallback callback) throws SQLException {\n         ExecuteProcessEngine.initialize(sqlStatementContext, executionGroupContext);\n         return jdbcExecutor.execute(executionGroupContext, callback);\n@@ -79,18 +82,19 @@ public final class DriverJDBCExecutor {\n      * @return effected records count\n      * @throws SQLException SQL exception\n      */\n-    public int executeUpdate(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext,\n-                             final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final JDBCExecutorCallback<Integer> callback) throws SQLException {\n+\n+\n+    public int executeUpdate(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final JDBCExecutorCallback<Integer> callback) throws SQLException {\n         List<Integer> results = jdbcLockEngine.execute(executionGroupContext, sqlStatementContext, routeUnits, callback);\n         return isNeedAccumulate(metaDataContexts.getDefaultMetaData().getRuleMetaData().getRules(), sqlStatementContext) ? accumulate(results) : results.get(0);\n     }\n-    \n+\n     private boolean isNeedAccumulate(final Collection<ShardingSphereRule> rules, final SQLStatementContext<?> sqlStatementContext) {\n-        return rules.stream().anyMatch(each -> each instanceof DataNodeContainedRule && ((DataNodeContainedRule) each).isNeedAccumulate(sqlStatementContext.getTablesContext().getTableNames()));\n+        return rules.stream().anyMatch(each-> each instanceof DataNodeContainedRule && ((DataNodeContainedRule) each).isNeedAccumulate(sqlStatementContext.getTablesContext().getTableNames()));\n     }\n-    \n+\n     private int accumulate(final List<Integer> updateResults) {\n-        return updateResults.stream().mapToInt(each -> null == each ? 0 : each).sum();\n+        return updateResults.stream().mapToInt(each->null == each ? 0 : each).sum();\n     }\n     \n     /**\n@@ -103,10 +107,11 @@ public final class DriverJDBCExecutor {\n      * @return return true if is DQL, false if is DML\n      * @throws SQLException SQL exception\n      */\n-    public boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final SQLStatementContext<?> sqlStatementContext,\n-                           final Collection<RouteUnit> routeUnits, final JDBCExecutorCallback<Boolean> callback) throws SQLException {\n+\n+\n+    public boolean execute(final ExecutionGroupContext<JDBCExecutionUnit> executionGroupContext, final SQLStatementContext<?> sqlStatementContext, final Collection<RouteUnit> routeUnits, final JDBCExecutorCallback<Boolean> callback) throws SQLException {\n         ExecuteProcessEngine.initialize(sqlStatementContext, executionGroupContext);\n         List<Boolean> results = jdbcLockEngine.execute(executionGroupContext, sqlStatementContext, routeUnits, callback);\n         return null != results && !results.isEmpty() && null != results.get(0) && results.get(0);\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/24/DriverJDBCExecutor.java\nindex 5e8b833466b..1b689e6400d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_random/24/DriverJDBCExecutor.java\n@@ -52,8 +52,7 @@ public final class DriverJDBCExecutor {\n         this.jdbcExecutor = jdbcExecutor;\n         this.jdbcLockEngine = new JDBCLockEngine(metaDataContexts, jdbcExecutor);\n     }\n-    \n-    \n+\n     /**\n      * Execute query.\n      *\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/24/DriverJDBCExecutor.java\nindex 5e8b833466b..1b689e6400d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/errored/1/24/DriverJDBCExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/apache-shardingsphere/styler_three_grams/24/DriverJDBCExecutor.java\n@@ -52,8 +52,7 @@ public final class DriverJDBCExecutor {\n         this.jdbcExecutor = jdbcExecutor;\n         this.jdbcLockEngine = new JDBCLockEngine(metaDataContexts, jdbcExecutor);\n     }\n-    \n-    \n+\n     /**\n      * Execute query.\n      *\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}