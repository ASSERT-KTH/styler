{
    "project_name": "Activiti-Activiti",
    "error_id": "97",
    "information": {
        "errors": [
            {
                "line": "109",
                "column": "33",
                "severity": "error",
                "message": "'+' should be on the previous line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
            }
        ]
    },
    "source_code": "                    if ( warningBuilder.length() > 0 ) {\n                        LOGGER.warn(\"Following warnings encountered during process validation: \"\n                                + warningBuilder.toString());\n                    }\n\n                    if ( errorBuilder.length() > 0 ) {",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/97/AbstractAutoDeploymentStrategy.java\nindex 33e0cbed96b..4d18733e3b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/97/AbstractAutoDeploymentStrategy.java\n@@ -105,8 +105,7 @@ public abstract class AbstractAutoDeploymentStrategy implements AutoDeploymentSt\n \n                     // Write out warnings (if any)\n                     if ( warningBuilder.length() > 0 ) {\n-                        LOGGER.warn(\"Following warnings encountered during process validation: \"\n-                                + warningBuilder.toString());\n+                        LOGGER.warn(\"Following warnings encountered during process validation: \" + warningBuilder.toString());\n                     }\n \n                     if ( errorBuilder.length() > 0 ) {\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "109",
                    "column": "37",
                    "severity": "error",
                    "message": "'+' should be on the previous line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.OperatorWrapCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/97/AbstractAutoDeploymentStrategy.java\nindex 33e0cbed96b..46300619934 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/97/AbstractAutoDeploymentStrategy.java\n@@ -85,40 +85,40 @@ public abstract class AbstractAutoDeploymentStrategy implements AutoDeploymentSt\n         String resourceName = determineResourceName(resource);\n \n         if (isProcessDefinitionResource(resourceName)) {\n-        try {\n-            BpmnXMLConverter converter = new BpmnXMLConverter();\n-            BpmnModel bpmnModel = converter.convertToBpmnModel(new InputStreamSource(resource.getInputStream()), true,\n-                    false);\n-            List<ValidationError> validationErrors = repositoryService.validateProcess(bpmnModel);\n-            if ( validationErrors != null && !validationErrors.isEmpty() ) {\n-                StringBuilder warningBuilder = new StringBuilder();\n-                StringBuilder errorBuilder = new StringBuilder();\n-\n-                for (ValidationError error : validationErrors) {\n-                    if ( error.isWarning() ) {\n-                        warningBuilder.append(error.toString());\n-                        warningBuilder.append(\"\\n\");\n-                    } else {\n-                        errorBuilder.append(error.toString());\n-                        errorBuilder.append(\"\\n\");\n-                    }\n-\n-                    // Write out warnings (if any)\n-                    if ( warningBuilder.length() > 0 ) {\n-                        LOGGER.warn(\"Following warnings encountered during process validation: \"\n-                                + warningBuilder.toString());\n-                    }\n-\n-                    if ( errorBuilder.length() > 0 ) {\n-                        LOGGER.error(\"Errors while parsing:\\n\" + errorBuilder.toString());\n-                        return false;\n+            try {\n+                BpmnXMLConverter converter = new BpmnXMLConverter();\n+                BpmnModel bpmnModel = converter.convertToBpmnModel(new InputStreamSource(resource.getInputStream()), true,\n+                        false);\n+                List<ValidationError> validationErrors = repositoryService.validateProcess(bpmnModel);\n+                if (validationErrors != null && !validationErrors.isEmpty()) {\n+                    StringBuilder warningBuilder = new StringBuilder();\n+                    StringBuilder errorBuilder = new StringBuilder();\n+\n+                    for (ValidationError error : validationErrors) {\n+                        if (error.isWarning()) {\n+                            warningBuilder.append(error.toString());\n+                            warningBuilder.append(\"\\n\");\n+                        } else {\n+                            errorBuilder.append(error.toString());\n+                            errorBuilder.append(\"\\n\");\n+                        }\n+\n+                        // Write out warnings (if any)\n+                        if (warningBuilder.length() > 0) {\n+                            LOGGER.warn(\"Following warnings encountered during process validation: \"\n+                                    + warningBuilder.toString());\n+                        }\n+\n+                        if (errorBuilder.length() > 0) {\n+                            LOGGER.error(\"Errors while parsing:\\n\" + errorBuilder.toString());\n+                            return false;\n+                        }\n                     }\n                 }\n+            } catch (Exception e) {\n+                LOGGER.error(\"Error parsing XML\", e);\n+                return false;\n             }\n-        } catch ( Exception e ) {\n-            LOGGER.error(\"Error parsing XML\", e);\n-            return false;\n-        }\n         }\n         return true;\n     }\n",
            "diff_size": 35
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "37",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "47",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 4, expected is 2, indentation should be the same level as line 53.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "60",
                    "severity": "error",
                    "message": "Block comment has incorrect indentation level 4, expected is 2, indentation should be the same level as line 67.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Comment has incorrect indentation level 20, expected is 12, indentation should be the same level as line 105.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.CommentsIndentationCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/97/AbstractAutoDeploymentStrategy.java\nindex 33e0cbed96b..3faed9eb733 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/97/AbstractAutoDeploymentStrategy.java\n@@ -15,7 +15,6 @@ package org.activiti.spring.autodeployment;\n \n import java.io.IOException;\n import java.util.List;\n-\n import org.activiti.bpmn.converter.BpmnXMLConverter;\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.core.common.spring.project.ProjectModelService;\n@@ -33,27 +32,30 @@ import org.springframework.core.io.Resource;\n /**\n  * Abstract base class for implementations of {@link AutoDeploymentStrategy}.\n  */\n+\n+\n public abstract class AbstractAutoDeploymentStrategy implements AutoDeploymentStrategy {\n \n-    protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractAutoDeploymentStrategy.class);\n+  protected static final Logger LOGGER = LoggerFactory.getLogger(AbstractAutoDeploymentStrategy.class);\n \n-    private ProjectModelService projectModelService;\n+  private ProjectModelService projectModelService;\n \n-    public AbstractAutoDeploymentStrategy(ProjectModelService projectModelService) {\n-        this.projectModelService = projectModelService;\n-    }\n+  public AbstractAutoDeploymentStrategy(ProjectModelService projectModelService) {\n+    this.projectModelService = projectModelService;\n+  }\n \n     /**\n      * Gets the deployment mode this strategy handles.\n      *\n      * @return the name of the deployment mode\n      */\n-    protected abstract String getDeploymentMode();\n \n-    @Override\n-    public boolean handlesMode(final String mode) {\n-        return StringUtils.equalsIgnoreCase(mode, getDeploymentMode());\n-    }\n+  protected abstract String getDeploymentMode();\n+\n+  @Override\n+  public boolean handlesMode(final String mode) {\n+    return StringUtils.equalsIgnoreCase(mode, getDeploymentMode());\n+  }\n \n     /**\n      * Determines the name to be used for the provided resource.\n@@ -61,80 +63,74 @@ public abstract class AbstractAutoDeploymentStrategy implements AutoDeploymentSt\n      * @param resource the resource to get the name for\n      * @return the name of the resource\n      */\n-    protected String determineResourceName(final Resource resource) {\n-        String resourceName;\n-\n-        if (resource instanceof ContextResource) {\n-            resourceName = ((ContextResource) resource).getPathWithinContext();\n-\n-        } else if (resource instanceof ByteArrayResource) {\n-            resourceName = resource.getDescription();\n \n-        } else {\n-            try {\n-                resourceName = resource.getFile().getAbsolutePath();\n-            } catch (IOException e) {\n-                resourceName = resource.getFilename();\n-            }\n-        }\n-        return resourceName;\n+  protected String determineResourceName(final Resource resource) {\n+    String resourceName;\n+    if (resource instanceof ContextResource) {\n+      resourceName = ((ContextResource) resource).getPathWithinContext();\n+    } else if (resource instanceof ByteArrayResource) {\n+      resourceName = resource.getDescription();\n+    } else {\n+      try {\n+        resourceName = resource.getFile().getAbsolutePath();\n+      } catch (IOException e) {\n+        resourceName = resource.getFilename();\n+      }\n     }\n-\n-    protected boolean validateModel(Resource resource, final RepositoryService repositoryService) {\n-\n-        String resourceName = determineResourceName(resource);\n-\n-        if (isProcessDefinitionResource(resourceName)) {\n-        try {\n-            BpmnXMLConverter converter = new BpmnXMLConverter();\n-            BpmnModel bpmnModel = converter.convertToBpmnModel(new InputStreamSource(resource.getInputStream()), true,\n-                    false);\n-            List<ValidationError> validationErrors = repositoryService.validateProcess(bpmnModel);\n-            if ( validationErrors != null && !validationErrors.isEmpty() ) {\n-                StringBuilder warningBuilder = new StringBuilder();\n-                StringBuilder errorBuilder = new StringBuilder();\n-\n-                for (ValidationError error : validationErrors) {\n-                    if ( error.isWarning() ) {\n-                        warningBuilder.append(error.toString());\n-                        warningBuilder.append(\"\\n\");\n-                    } else {\n-                        errorBuilder.append(error.toString());\n-                        errorBuilder.append(\"\\n\");\n-                    }\n+    return resourceName;\n+  }\n+\n+  protected boolean validateModel(Resource resource, final RepositoryService repositoryService) {\n+    String resourceName = determineResourceName(resource);\n+    if (isProcessDefinitionResource(resourceName)) {\n+      try {\n+        BpmnXMLConverter converter = new BpmnXMLConverter();\n+        BpmnModel bpmnModel = converter.convertToBpmnModel(new InputStreamSource(resource.getInputStream()),\n+                                                           true,\n+                                                           false);\n+        List<ValidationError> validationErrors = repositoryService.validateProcess(bpmnModel);\n+        if (validationErrors != null && !validationErrors.isEmpty()) {\n+          StringBuilder warningBuilder = new StringBuilder();\n+          StringBuilder errorBuilder = new StringBuilder();\n+          for (ValidationError error : validationErrors) {\n+            if (error.isWarning()) {\n+              warningBuilder.append(error.toString());\n+              warningBuilder.append(\"\\n\");\n+            } else {\n+              errorBuilder.append(error.toString());\n+              errorBuilder.append(\"\\n\");\n+            }\n \n                     // Write out warnings (if any)\n-                    if ( warningBuilder.length() > 0 ) {\n-                        LOGGER.warn(\"Following warnings encountered during process validation: \"\n-                                + warningBuilder.toString());\n-                    }\n-\n-                    if ( errorBuilder.length() > 0 ) {\n-                        LOGGER.error(\"Errors while parsing:\\n\" + errorBuilder.toString());\n-                        return false;\n-                    }\n-                }\n+            if (warningBuilder.length() > 0) {\n+              LOGGER.warn(\"Following warnings encountered during process validation: \" + warningBuilder.toString());\n             }\n-        } catch ( Exception e ) {\n-            LOGGER.error(\"Error parsing XML\", e);\n-            return false;\n-        }\n-        }\n-        return true;\n-    }\n-\n-    private boolean isProcessDefinitionResource(String resource) {\n-        return resource.endsWith(\".bpmn20.xml\") || resource.endsWith(\".bpmn\");\n-    }\n-\n-    protected DeploymentBuilder loadProjectManifest(DeploymentBuilder deploymentBuilder) {\n-        if (projectModelService != null && projectModelService.hasProjectManifest()) {\n-            try {\n-                deploymentBuilder.setProjectManifest(projectModelService.loadProjectManifest());\n-            } catch (IOException e) {\n-                LOGGER.warn(\"Manifest of application not found. Project release version will not be set for deployment.\");\n+            if (errorBuilder.length() > 0) {\n+              LOGGER.error(\"Errors while parsing:\\n\" + errorBuilder.toString());\n+              return false;\n             }\n+          }\n         }\n-        return deploymentBuilder;\n+      } catch (Exception e) {\n+        LOGGER.error(\"Error parsing XML\", e);\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  private boolean isProcessDefinitionResource(String resource) {\n+    return resource.endsWith(\".bpmn20.xml\") || resource.endsWith(\".bpmn\");\n+  }\n+\n+  protected DeploymentBuilder loadProjectManifest(DeploymentBuilder deploymentBuilder) {\n+    if (projectModelService != null && projectModelService.hasProjectManifest()) {\n+      try {\n+        deploymentBuilder.setProjectManifest(projectModelService.loadProjectManifest());\n+      } catch (IOException e) {\n+        LOGGER.warn(\"Manifest of application not found. Project release version will not be set for deployment.\");\n+      }\n     }\n-}\n+    return deploymentBuilder;\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 109
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/97/AbstractAutoDeploymentStrategy.java\nindex 33e0cbed96b..4d18733e3b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/97/AbstractAutoDeploymentStrategy.java\n@@ -105,8 +105,7 @@ public abstract class AbstractAutoDeploymentStrategy implements AutoDeploymentSt\n \n                     // Write out warnings (if any)\n                     if ( warningBuilder.length() > 0 ) {\n-                        LOGGER.warn(\"Following warnings encountered during process validation: \"\n-                                + warningBuilder.toString());\n+                        LOGGER.warn(\"Following warnings encountered during process validation: \" + warningBuilder.toString());\n                     }\n \n                     if ( errorBuilder.length() > 0 ) {\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/97/AbstractAutoDeploymentStrategy.java\nindex 33e0cbed96b..4d18733e3b1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/97/AbstractAutoDeploymentStrategy.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/97/AbstractAutoDeploymentStrategy.java\n@@ -105,8 +105,7 @@ public abstract class AbstractAutoDeploymentStrategy implements AutoDeploymentSt\n \n                     // Write out warnings (if any)\n                     if ( warningBuilder.length() > 0 ) {\n-                        LOGGER.warn(\"Following warnings encountered during process validation: \"\n-                                + warningBuilder.toString());\n+                        LOGGER.warn(\"Following warnings encountered during process validation: \" + warningBuilder.toString());\n                     }\n \n                     if ( errorBuilder.length() > 0 ) {\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "intellij",
        "naturalize",
        "codebuff"
    ]
}