{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1335",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "37",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "37",
                    "column": "54",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "100",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1335/MemoryBuffersMetrics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1335/MemoryBuffersMetrics.java\nindex dca068a24ea..e1032fbb265 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1335/MemoryBuffersMetrics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1335/MemoryBuffersMetrics.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.metrics.source.jvm;\n \n import com.codahale.metrics.Gauge;\n@@ -29,33 +30,33 @@ import static com.codahale.metrics.MetricRegistry.name;\n \n public class MemoryBuffersMetrics extends JvmMetrics\n {\n-    public static final String MEMORY_BUFFER = name( JvmMetrics.NAME_PREFIX, \"memory.buffer\" );\n+  public static final String MEMORY_BUFFER = name(JvmMetrics.NAME_PREFIX, \"memory.buffer\");\n \n-    private final MetricRegistry registry;\n+  private final MetricRegistry registry;\n \n-    public MemoryBuffersMetrics( MetricRegistry registry )\n-    {\n-        this.registry = registry;\n-    }\n+  public MemoryBuffersMetrics(MetricRegistry registry)\n+  {\n+    this.registry = registry;\n+  }\n \n-    @Override\n-    public void start()\n+  @Override\n+  public void start()\n+  {\n+    for (final BufferPoolMXBean pool : ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class))\n     {\n-        for ( final BufferPoolMXBean pool : ManagementFactory.getPlatformMXBeans( BufferPoolMXBean.class ) )\n-        {\n-            registry.register(\n-                    name( MEMORY_BUFFER, prettifyName( pool.getName() ), \"count\" ), (Gauge<Long>) pool::getCount );\n-            registry.register(\n-                    name( MEMORY_BUFFER, prettifyName( pool.getName() ), \"used\" ), (Gauge<Long>) pool::getMemoryUsed );\n-            registry.register(\n-                    name( MEMORY_BUFFER, prettifyName( pool.getName() ), \"capacity\" ),\n-                    (Gauge<Long>) pool::getTotalCapacity );\n-        }\n+      registry.register(\n+          name(MEMORY_BUFFER, prettifyName(pool.getName()), \"count\"), (Gauge<Long>) pool::getCount);\n+      registry.register(\n+          name(MEMORY_BUFFER, prettifyName(pool.getName()), \"used\"), (Gauge<Long>) pool::getMemoryUsed);\n+      registry.register(\n+          name(MEMORY_BUFFER, prettifyName(pool.getName()), \"capacity\"),\n+          (Gauge<Long>) pool::getTotalCapacity);\n     }\n+  }\n \n-    @Override\n-    public void stop()\n-    {\n-        registry.removeMatching( ( name, metric ) -> name.startsWith( MEMORY_BUFFER ) );\n-    }\n+  @Override\n+  public void stop()\n+  {\n+    registry.removeMatching((name, metric) -> name.startsWith(MEMORY_BUFFER));\n+  }\n }\n",
            "diff_size": 27
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1335/MemoryBuffersMetrics.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1335/MemoryBuffersMetrics.java\nindex dca068a24ea..1bca2c435e1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1335/MemoryBuffersMetrics.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1335/MemoryBuffersMetrics.java\n@@ -43,14 +43,10 @@ public class MemoryBuffersMetrics extends JvmMetrics\n     {\n         for ( final BufferPoolMXBean pool : ManagementFactory.getPlatformMXBeans( BufferPoolMXBean.class ) )\n         {\n-            registry.register(\n-                    name( MEMORY_BUFFER, prettifyName( pool.getName() ), \"count\" ), (Gauge<Long>) pool::getCount );\n-            registry.register(\n-                    name( MEMORY_BUFFER, prettifyName( pool.getName() ), \"used\" ), (Gauge<Long>) pool::getMemoryUsed );\n-            registry.register(\n-                    name( MEMORY_BUFFER, prettifyName( pool.getName() ), \"capacity\" ),\n-                    (Gauge<Long>) pool::getTotalCapacity );\n-        }\n+            registry.register( name( MEMORY_BUFFER, prettifyName( pool.getName() ), \"count\" ), (Gauge<Long>) pool::getCount );\n+registry.register( name( MEMORY_BUFFER, prettifyName( pool.getName() ), \"used\" ), (Gauge<Long>) pool::getMemoryUsed );\n+registry.register( name( MEMORY_BUFFER, prettifyName( pool.getName() ), \"capacity\" ), (Gauge<Long>) pool::getTotalCapacity );\n+    }\n     }\n \n     @Override\n@@ -58,4 +54,4 @@ public class MemoryBuffersMetrics extends JvmMetrics\n     {\n         registry.removeMatching( ( name, metric ) -> name.startsWith( MEMORY_BUFFER ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}