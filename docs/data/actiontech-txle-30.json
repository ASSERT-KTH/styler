{
    "project_name": "actiontech-txle",
    "error_id": "30",
    "information": {
        "errors": [
            {
                "line": "97",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "\n  @Override\n\tpublic List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n\t\treturn eventRepo.selectPausedAndContinueEvent(globalTxId);\n\t}\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "98",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/30/SpringTxEventRepository.java\nindex f3b83dc44ca..54fea45fccb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler/30/SpringTxEventRepository.java\n@@ -94,7 +94,7 @@ class SpringTxEventRepository implements TxEventRepository {\n   }\n \n   @Override\n-\tpublic List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n+  public List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n \t\treturn eventRepo.selectPausedAndContinueEvent(globalTxId);\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/30/SpringTxEventRepository.java\nindex f3b83dc44ca..88ddc0462ef 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/intellij/30/SpringTxEventRepository.java\n@@ -38,336 +38,336 @@ import java.util.*;\n import static org.apache.servicecomb.saga.common.EventType.*;\n \n class SpringTxEventRepository implements TxEventRepository {\n-  private static final Logger LOG = LoggerFactory.getLogger(SpringTxEventRepository.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(SpringTxEventRepository.class);\n \n-  private final TxEventEnvelopeRepository eventRepo;\n+    private final TxEventEnvelopeRepository eventRepo;\n \n-  @Autowired\n-  private IDataDictionaryService dataDictionaryService;\n+    @Autowired\n+    private IDataDictionaryService dataDictionaryService;\n \n-  @Autowired\n-  private GlobalTxListener globalTxListener;\n+    @Autowired\n+    private GlobalTxListener globalTxListener;\n \n-  SpringTxEventRepository(TxEventEnvelopeRepository eventRepo) {\n-    this.eventRepo = eventRepo;\n-  }\n+    SpringTxEventRepository(TxEventEnvelopeRepository eventRepo) {\n+        this.eventRepo = eventRepo;\n+    }\n \n-  @Override\n-  public void save(TxEvent event) {\n-    globalTxListener.listenEvent(event);\n-    TxEvent saveEvent = eventRepo.save(event);\n-    if (saveEvent != null) {\n-      event.setSurrogateId(saveEvent.id());\n-      globalTxListener.listenEvent(event);\n+    @Override\n+    public void save(TxEvent event) {\n+        globalTxListener.listenEvent(event);\n+        TxEvent saveEvent = eventRepo.save(event);\n+        if (saveEvent != null) {\n+            event.setSurrogateId(saveEvent.id());\n+            globalTxListener.listenEvent(event);\n+        }\n     }\n-  }\n \n-  @Override\n-  public List<TxEvent> findTimeoutEvents(long unendedMinEventId) {\n+    @Override\n+    public List<TxEvent> findTimeoutEvents(long unendedMinEventId) {\n //    return eventRepo.findTimeoutEvents(SINGLE_TX_EVENT_REQUEST);\n-    return eventRepo.findTimeoutEvents(unendedMinEventId, new Date());\n-  }\n-\n-  @Override\n-  public TxEvent findTimeoutEventsBeforeEnding(String globalTxId) {\n-    return eventRepo.findTimeoutEventsBeforeEnding(globalTxId, new Date());\n-  }\n-\n-  @Override\n-  public List<TxEvent> findTimeoutEvents(List<String> globalTxId) {\n-    return eventRepo.findTimeoutEvents(globalTxId, new Date());\n-  }\n-\n-  @Override\n-  public Optional<TxEvent> findTxStartedEvent(String globalTxId, String localTxId) {\n-    return eventRepo.findFirstStartedEventByGlobalTxIdAndLocalTxId(globalTxId, localTxId);\n-  }\n-\n-  @Override\n-  public List<TxEvent> findSequentialCompensableEventOfUnended(long unendedMinEventId) {\n-    return eventRepo.findSequentialCompensableEventOfUnended(unendedMinEventId);\n-  }\n-\n-  @Override\n-  public List<String> selectAllTypeByGlobalTxId(String globalTxId) {\n-    return eventRepo.selectAllTypeByGlobalTxId(globalTxId);\n-  }\n-\n-  @Override\n-\tpublic List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n-\t\treturn eventRepo.selectPausedAndContinueEvent(globalTxId);\n-\t}\n-\n-  @Override\n-  public Set<String> selectEndedGlobalTx(Set<String> localTxIdSet) {\n-    return eventRepo.selectEndedGlobalTx(localTxIdSet);\n-  }\n-\n-  @Override\n-  public boolean checkIsExistsEventType(String globalTxId, String localTxId, String type) {\n-    return eventRepo.checkIsExistsEventType(globalTxId, localTxId, type) > 0;\n-  }\n-\n-  @Override\n-  public boolean checkTxIsAborted(String globalTxId, String localTxId) {\n-    return eventRepo.checkTxIsAborted(globalTxId, localTxId) > 0;\n-  }\n-\n-  @Override\n-  public List<Map<String, Object>> findTxList(int pageIndex, int pageSize, String orderName, String direction, String searchText) {\n-    // \u786e\u5b9a\u672c\u6b21\u5206\u9875\u67e5\u8be2\u7684\u5168\u5c40\u4e8b\u52a1\n-    List<TxEvent> txStartedEventList = this.searchTxList(pageIndex, pageSize, orderName, direction, searchText);\n-    if (txStartedEventList != null && !txStartedEventList.isEmpty()) {\n-      List<Map<String, Object>> resultTxEventList = new LinkedList<>();\n-\n-      List<String> globalTxIdList = new ArrayList<>();\n-      txStartedEventList.forEach(event -> {\n-        globalTxIdList.add(event.globalTxId());\n-        resultTxEventList.add(event.toMap());\n-      });\n-\n-      List<TxEvent> txEventList = eventRepo.selectTxEventByGlobalTxIds(globalTxIdList);\n-      if (txEventList != null && !txEventList.isEmpty()) {\n-        // \u8ba1\u7b97\u5168\u5c40\u4e8b\u52a1\u7684\u72b6\u6001\n-        computeGlobalTxStatus(txEventList, resultTxEventList);\n-      }\n-\n-      return resultTxEventList;\n+        return eventRepo.findTimeoutEvents(unendedMinEventId, new Date());\n+    }\n+\n+    @Override\n+    public TxEvent findTimeoutEventsBeforeEnding(String globalTxId) {\n+        return eventRepo.findTimeoutEventsBeforeEnding(globalTxId, new Date());\n+    }\n+\n+    @Override\n+    public List<TxEvent> findTimeoutEvents(List<String> globalTxId) {\n+        return eventRepo.findTimeoutEvents(globalTxId, new Date());\n     }\n-    return null;\n-  }\n-\n-  private List<TxEvent> searchTxList(int pageIndex, int pageSize, String orderName, String direction, String searchText) {\n-    // TODO \u68c0\u6d4b\u662f\u5426\u6709\u975e\u6570\u5b57\uff0c\u5982\u679c\u6709\u975e\u6570\u5b57\u5219\u8fc7\u6ee4\u6389\u6570\u5b57\u7c7b\u578b\u5b57\u6bb5\n-    // TODO \u68c0\u6d4b\u5982\u679c\u662f\u5b57\u7b26\u201c-\u201d\uff0c\u5219\u89c6\u4e3a\u65e0searchText\u5904\u7406\uff0c\u56e0\u4e3a\u6bcf\u4e00\u884c\u7684\u65e5\u671f\u90fd\u542b\u6709\u201c-\u201d\uff0c\u6216\u8005\u662f\u5f53\u5df2\u5b8c\u6210\u7684\u67e5\u8be2\n-    try {\n-      pageIndex = pageIndex < 1 ? 0 : pageIndex;\n-      pageSize = pageSize < 1 ? 100 : pageSize;\n-\n-      Sort.Direction sd = Sort.Direction.DESC;\n-      if (orderName == null || orderName.length() == 0) {\n-        orderName = \"creationTime\";\n-      }\n-      if (\"asc\".equalsIgnoreCase(direction)) {\n-        sd = Sort.Direction.ASC;\n-      }\n-\n-      PageRequest pageRequest = new PageRequest(pageIndex, pageSize, sd, orderName);\n-      if (searchText == null || searchText.length() == 0) {\n-        return eventRepo.findTxList(pageRequest);\n-      }\n-      return eventRepo.findTxList(pageRequest, searchText);\n-    } catch (Exception e) {\n-      LOG.error(\"Failed to find the list of Global Transaction. params {pageIndex: [{}], pageSize: [{}], orderName: [{}], direction: [{}], searchText: [{}]}.\", pageIndex, pageSize, orderName, direction, searchText, e);\n+\n+    @Override\n+    public Optional<TxEvent> findTxStartedEvent(String globalTxId, String localTxId) {\n+        return eventRepo.findFirstStartedEventByGlobalTxIdAndLocalTxId(globalTxId, localTxId);\n     }\n-    return null;\n-  }\n-\n-  @Override\n-  public List<TxEvent> selectTxEventByGlobalTxIds(List<String> globalTxIdList) {\n-    return eventRepo.selectTxEventByGlobalTxIds(globalTxIdList);\n-  }\n-\n-  @Override\n-  public long findTxCount(String searchText) {\n-    if (searchText == null || searchText.length() == 0) {\n-      return eventRepo.findTxListCount();\n+\n+    @Override\n+    public List<TxEvent> findSequentialCompensableEventOfUnended(long unendedMinEventId) {\n+        return eventRepo.findSequentialCompensableEventOfUnended(unendedMinEventId);\n     }\n-    return eventRepo.findTxListCount(searchText);\n-  }\n-\n-  @Override\n-  public List<Map<String, Object>> findSubTxList(String globalTxIds) {\n-      if (globalTxIds != null && globalTxIds.length() > 0) {\n-          List<String> globalTxIdList = Arrays.asList(globalTxIds.split(\",\"));\n-          List<TxEvent> txEventList = eventRepo.selectSpecialColumnsOfTxEventByGlobalTxIds(globalTxIdList);\n-          if (txEventList != null && !txEventList.isEmpty()) {\n-              List<Map<String, Object>> resultTxEventList = new LinkedList<>();\n-              Set<String> localTxIdSet = new HashSet<>();\n-              txEventList.forEach(event -> {\n-                  if (TxStartedEvent.name().equals(event.type()) && !localTxIdSet.contains(event.localTxId())) {\n-                      localTxIdSet.add(event.localTxId());\n-                      resultTxEventList.add(event.toMap());\n-                  }\n-              });\n-\n-              computeSubTxStatus(txEventList, resultTxEventList);\n-\n-              return resultTxEventList;\n-          }\n-      }\n-      return null;\n-  }\n-\n-  @Override\n-  public List<TxEvent> selectUnendedTxEvents(long unendedMinEventId) {\n-    return eventRepo.selectUnendedTxEvents(unendedMinEventId);\n-  }\n-\n-  @Override\n-  public long selectMinUnendedTxEventId(long unendedMinEventId) {\n-    return eventRepo.selectMinUnendedTxEventId(unendedMinEventId);\n-  }\n-\n-  @Override\n-  public Date selectMinDateInTxEvent() {\n-    return eventRepo.selectMinDateInTxEvent();\n-  }\n-\n-  @Override\n-  public List<Long> selectEndedEventIdsWithinSomePeriod(int pageIndex, int pageSize, Date startTime, Date endTime) {\n-    return eventRepo.selectEndedEventIdsWithinSomePeriod(new PageRequest(pageIndex, pageSize), startTime, endTime);\n-  }\n-\n-  public TxEvent selectMinRetriesEventByTxIdType(String globalTxId, String localTxId, String type) {\n-    return eventRepo.selectMinRetriesEventByTxIdType(globalTxId, localTxId, type);\n-  }\n-\n-  @Override\n-  public TxEvent selectEventByGlobalTxIdType(String globalTxId, String type) {\n-    return eventRepo.selectEventByGlobalTxIdType(globalTxId, type);\n-  }\n-\n-  public boolean checkIsAlreadyRetried(String globalTxId, String localTxId) {\n-    return eventRepo.selectStartedAndAbortedEndRate(globalTxId, localTxId) == 0;\n-  }\n-\n-  // \u8ba1\u7b97\u5168\u5c40\u4e8b\u52a1\u7684\u72b6\u6001\n-  private void computeGlobalTxStatus(List<TxEvent> txEventList, List<Map<String, Object>> resultTxEventList) {\n-    Map<String, String> statusValueName = new HashMap<>(8);\n-    List<DataDictionaryItem> dataDictionaryItemList = dataDictionaryService.selectDataDictionaryList(\"global-tx-status\");\n-    if (dataDictionaryItemList != null && !dataDictionaryItemList.isEmpty()) {\n-      dataDictionaryItemList.forEach(dd -> statusValueName.put(dd.getValue(), dd.getName()));\n+\n+    @Override\n+    public List<String> selectAllTypeByGlobalTxId(String globalTxId) {\n+        return eventRepo.selectAllTypeByGlobalTxId(globalTxId);\n     }\n \n-    // 0-\u8fd0\u884c\u4e2d\uff0c1-\u8fd0\u884c\u5f02\u5e38\uff0c2-\u6682\u505c\uff0c3-\u6b63\u5e38\u7ed3\u675f\uff0c4-\u5f02\u5e38\u7ed3\u675f\n-    resultTxEventList.forEach(txMap -> {\n-      txMap.put(\"status_db\", 0);\n-      txMap.put(\"status\", statusValueName.get(\"0\"));\n-    });\n-\n-    txEventList.forEach(event -> {\n-      if (TxAbortedEvent.name().equals(event.type())) {\n-        for (Map<String, Object> txMap : resultTxEventList) {\n-          if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString())) {\n-            // \u5f02\u5e38\u72b6\u6001\n-            txMap.put(\"status_db\", 1);\n-            txMap.put(\"status\", statusValueName.get(\"1\"));\n-            break;\n-          }\n+    @Override\n+    public List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n+        return eventRepo.selectPausedAndContinueEvent(globalTxId);\n+    }\n+\n+    @Override\n+    public Set<String> selectEndedGlobalTx(Set<String> localTxIdSet) {\n+        return eventRepo.selectEndedGlobalTx(localTxIdSet);\n+    }\n+\n+    @Override\n+    public boolean checkIsExistsEventType(String globalTxId, String localTxId, String type) {\n+        return eventRepo.checkIsExistsEventType(globalTxId, localTxId, type) > 0;\n+    }\n+\n+    @Override\n+    public boolean checkTxIsAborted(String globalTxId, String localTxId) {\n+        return eventRepo.checkTxIsAborted(globalTxId, localTxId) > 0;\n+    }\n+\n+    @Override\n+    public List<Map<String, Object>> findTxList(int pageIndex, int pageSize, String orderName, String direction, String searchText) {\n+        // \u786e\u5b9a\u672c\u6b21\u5206\u9875\u67e5\u8be2\u7684\u5168\u5c40\u4e8b\u52a1\n+        List<TxEvent> txStartedEventList = this.searchTxList(pageIndex, pageSize, orderName, direction, searchText);\n+        if (txStartedEventList != null && !txStartedEventList.isEmpty()) {\n+            List<Map<String, Object>> resultTxEventList = new LinkedList<>();\n+\n+            List<String> globalTxIdList = new ArrayList<>();\n+            txStartedEventList.forEach(event -> {\n+                globalTxIdList.add(event.globalTxId());\n+                resultTxEventList.add(event.toMap());\n+            });\n+\n+            List<TxEvent> txEventList = eventRepo.selectTxEventByGlobalTxIds(globalTxIdList);\n+            if (txEventList != null && !txEventList.isEmpty()) {\n+                // \u8ba1\u7b97\u5168\u5c40\u4e8b\u52a1\u7684\u72b6\u6001\n+                computeGlobalTxStatus(txEventList, resultTxEventList);\n+            }\n+\n+            return resultTxEventList;\n         }\n-      }\n-    });\n-\n-    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n-    txEventList.forEach(event -> {\n-      if (SagaEndedEvent.name().equals(event.type())) {\n-        for (Map<String, Object> txMap : resultTxEventList) {\n-          if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString())) {\n-            // ****\u8bbe\u7f6e\u7ed3\u675f\u65f6\u95f4****\n-            txMap.put(\"endTime\", sdf.format(event.creationTime()));\n-            if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n-              // \u6b63\u5e38\u7ed3\u675f\n-              txMap.put(\"status_db\", 3);\n-              txMap.put(\"status\", statusValueName.get(\"3\"));\n-            } else {\n-              // \u5f02\u5e38\u7ed3\u675f\n-              txMap.put(\"status_db\", 4);\n-              txMap.put(\"status\", statusValueName.get(\"4\"));\n+        return null;\n+    }\n+\n+    private List<TxEvent> searchTxList(int pageIndex, int pageSize, String orderName, String direction, String searchText) {\n+        // TODO \u68c0\u6d4b\u662f\u5426\u6709\u975e\u6570\u5b57\uff0c\u5982\u679c\u6709\u975e\u6570\u5b57\u5219\u8fc7\u6ee4\u6389\u6570\u5b57\u7c7b\u578b\u5b57\u6bb5\n+        // TODO \u68c0\u6d4b\u5982\u679c\u662f\u5b57\u7b26\u201c-\u201d\uff0c\u5219\u89c6\u4e3a\u65e0searchText\u5904\u7406\uff0c\u56e0\u4e3a\u6bcf\u4e00\u884c\u7684\u65e5\u671f\u90fd\u542b\u6709\u201c-\u201d\uff0c\u6216\u8005\u662f\u5f53\u5df2\u5b8c\u6210\u7684\u67e5\u8be2\n+        try {\n+            pageIndex = pageIndex < 1 ? 0 : pageIndex;\n+            pageSize = pageSize < 1 ? 100 : pageSize;\n+\n+            Sort.Direction sd = Sort.Direction.DESC;\n+            if (orderName == null || orderName.length() == 0) {\n+                orderName = \"creationTime\";\n+            }\n+            if (\"asc\".equalsIgnoreCase(direction)) {\n+                sd = Sort.Direction.ASC;\n             }\n-            break;\n-          }\n+\n+            PageRequest pageRequest = new PageRequest(pageIndex, pageSize, sd, orderName);\n+            if (searchText == null || searchText.length() == 0) {\n+                return eventRepo.findTxList(pageRequest);\n+            }\n+            return eventRepo.findTxList(pageRequest, searchText);\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to find the list of Global Transaction. params {pageIndex: [{}], pageSize: [{}], orderName: [{}], direction: [{}], searchText: [{}]}.\", pageIndex, pageSize, orderName, direction, searchText, e);\n         }\n-      }\n-    });\n+        return null;\n+    }\n \n-    resultTxEventList.forEach(txMap -> {\n-      // \u6b63\u5e38\u72b6\u6001\u573a\u666f\u624d\u53bb\u9a8c\u8bc1\u662f\u5426\u6682\u505c\n-      if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n-        txEventList.forEach(event -> {\n-          if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString()) && (AdditionalEventType.SagaPausedEvent.name().equals(event.type()) || AdditionalEventType.SagaAutoContinuedEvent.name().equals(event.type()))) {\n-            List<TxEvent> pauseContinueEventList = eventRepo.selectPausedAndContinueEvent(event.globalTxId());\n-            if (pauseContinueEventList != null && !pauseContinueEventList.isEmpty()) {\n-              // \u6682\u505c\u72b6\u6001\n-              if (pauseContinueEventList.size() % 2 == 1) {\n-                // \u6682\u505c\n-                txMap.put(\"status_db\", 2);\n-                txMap.put(\"status\", statusValueName.get(\"2\"));\n-              }\n+    @Override\n+    public List<TxEvent> selectTxEventByGlobalTxIds(List<String> globalTxIdList) {\n+        return eventRepo.selectTxEventByGlobalTxIds(globalTxIdList);\n+    }\n+\n+    @Override\n+    public long findTxCount(String searchText) {\n+        if (searchText == null || searchText.length() == 0) {\n+            return eventRepo.findTxListCount();\n+        }\n+        return eventRepo.findTxListCount(searchText);\n+    }\n+\n+    @Override\n+    public List<Map<String, Object>> findSubTxList(String globalTxIds) {\n+        if (globalTxIds != null && globalTxIds.length() > 0) {\n+            List<String> globalTxIdList = Arrays.asList(globalTxIds.split(\",\"));\n+            List<TxEvent> txEventList = eventRepo.selectSpecialColumnsOfTxEventByGlobalTxIds(globalTxIdList);\n+            if (txEventList != null && !txEventList.isEmpty()) {\n+                List<Map<String, Object>> resultTxEventList = new LinkedList<>();\n+                Set<String> localTxIdSet = new HashSet<>();\n+                txEventList.forEach(event -> {\n+                    if (TxStartedEvent.name().equals(event.type()) && !localTxIdSet.contains(event.localTxId())) {\n+                        localTxIdSet.add(event.localTxId());\n+                        resultTxEventList.add(event.toMap());\n+                    }\n+                });\n+\n+                computeSubTxStatus(txEventList, resultTxEventList);\n+\n+                return resultTxEventList;\n             }\n-          }\n-        });\n-      }\n-    });\n-  }\n-\n-  // \u8ba1\u7b97\u5b50\u4e8b\u52a1\u7684\u72b6\u6001\n-  private void computeSubTxStatus(List<TxEvent> txEventList, List<Map<String, Object>> resultTxEventList) {\n-    Map<String, String> statusValueName = new HashMap<>(8);\n-    List<DataDictionaryItem> dataDictionaryItemList = dataDictionaryService.selectDataDictionaryList(\"global-tx-status\");\n-    if (dataDictionaryItemList != null && !dataDictionaryItemList.isEmpty()) {\n-      dataDictionaryItemList.forEach(dd -> statusValueName.put(dd.getValue(), dd.getName()));\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public List<TxEvent> selectUnendedTxEvents(long unendedMinEventId) {\n+        return eventRepo.selectUnendedTxEvents(unendedMinEventId);\n     }\n \n-    // 0-\u8fd0\u884c\u4e2d\uff0c1-\u8fd0\u884c\u5f02\u5e38\uff0c2-\u6682\u505c\uff0c3-\u6b63\u5e38\u7ed3\u675f\uff0c4-\u5f02\u5e38\u7ed3\u675f\n-    resultTxEventList.forEach(txMap -> {\n-      txMap.put(\"status_db\", 0);\n-      txMap.put(\"status\", statusValueName.get(\"0\"));\n-    });\n-\n-    txEventList.forEach(event -> {\n-      if (TxAbortedEvent.name().equals(event.type())) {\n-        for (Map<String, Object> txMap : resultTxEventList) {\n-          if (event.localTxId().equals(txMap.get(\"localTxId\").toString())) {\n-            // \u5f02\u5e38\u72b6\u6001\n-            txMap.put(\"status_db\", 1);\n-            txMap.put(\"status\", statusValueName.get(\"1\"));\n-            break;\n-          }\n+    @Override\n+    public long selectMinUnendedTxEventId(long unendedMinEventId) {\n+        return eventRepo.selectMinUnendedTxEventId(unendedMinEventId);\n+    }\n+\n+    @Override\n+    public Date selectMinDateInTxEvent() {\n+        return eventRepo.selectMinDateInTxEvent();\n+    }\n+\n+    @Override\n+    public List<Long> selectEndedEventIdsWithinSomePeriod(int pageIndex, int pageSize, Date startTime, Date endTime) {\n+        return eventRepo.selectEndedEventIdsWithinSomePeriod(new PageRequest(pageIndex, pageSize), startTime, endTime);\n+    }\n+\n+    public TxEvent selectMinRetriesEventByTxIdType(String globalTxId, String localTxId, String type) {\n+        return eventRepo.selectMinRetriesEventByTxIdType(globalTxId, localTxId, type);\n+    }\n+\n+    @Override\n+    public TxEvent selectEventByGlobalTxIdType(String globalTxId, String type) {\n+        return eventRepo.selectEventByGlobalTxIdType(globalTxId, type);\n+    }\n+\n+    public boolean checkIsAlreadyRetried(String globalTxId, String localTxId) {\n+        return eventRepo.selectStartedAndAbortedEndRate(globalTxId, localTxId) == 0;\n+    }\n+\n+    // \u8ba1\u7b97\u5168\u5c40\u4e8b\u52a1\u7684\u72b6\u6001\n+    private void computeGlobalTxStatus(List<TxEvent> txEventList, List<Map<String, Object>> resultTxEventList) {\n+        Map<String, String> statusValueName = new HashMap<>(8);\n+        List<DataDictionaryItem> dataDictionaryItemList = dataDictionaryService.selectDataDictionaryList(\"global-tx-status\");\n+        if (dataDictionaryItemList != null && !dataDictionaryItemList.isEmpty()) {\n+            dataDictionaryItemList.forEach(dd -> statusValueName.put(dd.getValue(), dd.getName()));\n         }\n-      }\n-    });\n-\n-    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n-    txEventList.forEach(event -> {\n-      if (TxEndedEvent.name().equals(event.type())) {\n-        for (Map<String, Object> txMap : resultTxEventList) {\n-          if (event.localTxId().equals(txMap.get(\"localTxId\").toString())) {\n-            // ****\u8bbe\u7f6e\u7ed3\u675f\u65f6\u95f4****\n-            txMap.put(\"endTime\", sdf.format(event.creationTime()));\n+\n+        // 0-\u8fd0\u884c\u4e2d\uff0c1-\u8fd0\u884c\u5f02\u5e38\uff0c2-\u6682\u505c\uff0c3-\u6b63\u5e38\u7ed3\u675f\uff0c4-\u5f02\u5e38\u7ed3\u675f\n+        resultTxEventList.forEach(txMap -> {\n+            txMap.put(\"status_db\", 0);\n+            txMap.put(\"status\", statusValueName.get(\"0\"));\n+        });\n+\n+        txEventList.forEach(event -> {\n+            if (TxAbortedEvent.name().equals(event.type())) {\n+                for (Map<String, Object> txMap : resultTxEventList) {\n+                    if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString())) {\n+                        // \u5f02\u5e38\u72b6\u6001\n+                        txMap.put(\"status_db\", 1);\n+                        txMap.put(\"status\", statusValueName.get(\"1\"));\n+                        break;\n+                    }\n+                }\n+            }\n+        });\n+\n+        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+        txEventList.forEach(event -> {\n+            if (SagaEndedEvent.name().equals(event.type())) {\n+                for (Map<String, Object> txMap : resultTxEventList) {\n+                    if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString())) {\n+                        // ****\u8bbe\u7f6e\u7ed3\u675f\u65f6\u95f4****\n+                        txMap.put(\"endTime\", sdf.format(event.creationTime()));\n+                        if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n+                            // \u6b63\u5e38\u7ed3\u675f\n+                            txMap.put(\"status_db\", 3);\n+                            txMap.put(\"status\", statusValueName.get(\"3\"));\n+                        } else {\n+                            // \u5f02\u5e38\u7ed3\u675f\n+                            txMap.put(\"status_db\", 4);\n+                            txMap.put(\"status\", statusValueName.get(\"4\"));\n+                        }\n+                        break;\n+                    }\n+                }\n+            }\n+        });\n+\n+        resultTxEventList.forEach(txMap -> {\n+            // \u6b63\u5e38\u72b6\u6001\u573a\u666f\u624d\u53bb\u9a8c\u8bc1\u662f\u5426\u6682\u505c\n             if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n-              // \u6b63\u5e38\u7ed3\u675f\n-              txMap.put(\"status_db\", 3);\n-              txMap.put(\"status\", statusValueName.get(\"3\"));\n-            } else {\n-              // \u5f02\u5e38\u7ed3\u675f\n-              txMap.put(\"status_db\", 4);\n-              txMap.put(\"status\", statusValueName.get(\"4\"));\n+                txEventList.forEach(event -> {\n+                    if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString()) && (AdditionalEventType.SagaPausedEvent.name().equals(event.type()) || AdditionalEventType.SagaAutoContinuedEvent.name().equals(event.type()))) {\n+                        List<TxEvent> pauseContinueEventList = eventRepo.selectPausedAndContinueEvent(event.globalTxId());\n+                        if (pauseContinueEventList != null && !pauseContinueEventList.isEmpty()) {\n+                            // \u6682\u505c\u72b6\u6001\n+                            if (pauseContinueEventList.size() % 2 == 1) {\n+                                // \u6682\u505c\n+                                txMap.put(\"status_db\", 2);\n+                                txMap.put(\"status\", statusValueName.get(\"2\"));\n+                            }\n+                        }\n+                    }\n+                });\n             }\n-            break;\n-          }\n+        });\n+    }\n+\n+    // \u8ba1\u7b97\u5b50\u4e8b\u52a1\u7684\u72b6\u6001\n+    private void computeSubTxStatus(List<TxEvent> txEventList, List<Map<String, Object>> resultTxEventList) {\n+        Map<String, String> statusValueName = new HashMap<>(8);\n+        List<DataDictionaryItem> dataDictionaryItemList = dataDictionaryService.selectDataDictionaryList(\"global-tx-status\");\n+        if (dataDictionaryItemList != null && !dataDictionaryItemList.isEmpty()) {\n+            dataDictionaryItemList.forEach(dd -> statusValueName.put(dd.getValue(), dd.getName()));\n         }\n-      }\n-    });\n \n-    resultTxEventList.forEach(txMap -> {\n-      // \u6b63\u5e38\u72b6\u6001\u573a\u666f\u624d\u53bb\u9a8c\u8bc1\u662f\u5426\u6682\u505c\n-      if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n+        // 0-\u8fd0\u884c\u4e2d\uff0c1-\u8fd0\u884c\u5f02\u5e38\uff0c2-\u6682\u505c\uff0c3-\u6b63\u5e38\u7ed3\u675f\uff0c4-\u5f02\u5e38\u7ed3\u675f\n+        resultTxEventList.forEach(txMap -> {\n+            txMap.put(\"status_db\", 0);\n+            txMap.put(\"status\", statusValueName.get(\"0\"));\n+        });\n+\n         txEventList.forEach(event -> {\n-          if (event.localTxId().equals(txMap.get(\"localTxId\").toString()) && (AdditionalEventType.SagaPausedEvent.name().equals(event.type()) || AdditionalEventType.SagaAutoContinuedEvent.name().equals(event.type()))) {\n-            List<TxEvent> pauseContinueEventList = eventRepo.selectPausedAndContinueEvent(event.globalTxId());\n-            if (pauseContinueEventList != null && !pauseContinueEventList.isEmpty()) {\n-              // \u6682\u505c\u72b6\u6001\n-              if (pauseContinueEventList.size() % 2 == 1) {\n-                // \u6682\u505c\n-                txMap.put(\"status_db\", 2);\n-                txMap.put(\"status\", statusValueName.get(\"2\"));\n-              }\n+            if (TxAbortedEvent.name().equals(event.type())) {\n+                for (Map<String, Object> txMap : resultTxEventList) {\n+                    if (event.localTxId().equals(txMap.get(\"localTxId\").toString())) {\n+                        // \u5f02\u5e38\u72b6\u6001\n+                        txMap.put(\"status_db\", 1);\n+                        txMap.put(\"status\", statusValueName.get(\"1\"));\n+                        break;\n+                    }\n+                }\n             }\n-          }\n         });\n-      }\n-    });\n-  }\n+\n+        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+        txEventList.forEach(event -> {\n+            if (TxEndedEvent.name().equals(event.type())) {\n+                for (Map<String, Object> txMap : resultTxEventList) {\n+                    if (event.localTxId().equals(txMap.get(\"localTxId\").toString())) {\n+                        // ****\u8bbe\u7f6e\u7ed3\u675f\u65f6\u95f4****\n+                        txMap.put(\"endTime\", sdf.format(event.creationTime()));\n+                        if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n+                            // \u6b63\u5e38\u7ed3\u675f\n+                            txMap.put(\"status_db\", 3);\n+                            txMap.put(\"status\", statusValueName.get(\"3\"));\n+                        } else {\n+                            // \u5f02\u5e38\u7ed3\u675f\n+                            txMap.put(\"status_db\", 4);\n+                            txMap.put(\"status\", statusValueName.get(\"4\"));\n+                        }\n+                        break;\n+                    }\n+                }\n+            }\n+        });\n+\n+        resultTxEventList.forEach(txMap -> {\n+            // \u6b63\u5e38\u72b6\u6001\u573a\u666f\u624d\u53bb\u9a8c\u8bc1\u662f\u5426\u6682\u505c\n+            if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n+                txEventList.forEach(event -> {\n+                    if (event.localTxId().equals(txMap.get(\"localTxId\").toString()) && (AdditionalEventType.SagaPausedEvent.name().equals(event.type()) || AdditionalEventType.SagaAutoContinuedEvent.name().equals(event.type()))) {\n+                        List<TxEvent> pauseContinueEventList = eventRepo.selectPausedAndContinueEvent(event.globalTxId());\n+                        if (pauseContinueEventList != null && !pauseContinueEventList.isEmpty()) {\n+                            // \u6682\u505c\u72b6\u6001\n+                            if (pauseContinueEventList.size() % 2 == 1) {\n+                                // \u6682\u505c\n+                                txMap.put(\"status_db\", 2);\n+                                txMap.put(\"status\", statusValueName.get(\"2\"));\n+                            }\n+                        }\n+                    }\n+                });\n+            }\n+        });\n+    }\n \n }\n",
            "diff_size": 461
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/30/SpringTxEventRepository.java\nindex f3b83dc44ca..0dd00ab51e9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/codebuff/30/SpringTxEventRepository.java\n@@ -31,343 +31,329 @@ import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.data.domain.PageRequest;\n import org.springframework.data.domain.Sort;\n-\n import java.text.SimpleDateFormat;\n import java.util.*;\n-\n import static org.apache.servicecomb.saga.common.EventType.*;\n \n class SpringTxEventRepository implements TxEventRepository {\n-  private static final Logger LOG = LoggerFactory.getLogger(SpringTxEventRepository.class);\n-\n-  private final TxEventEnvelopeRepository eventRepo;\n+    private static final Logger LOG = LoggerFactory.getLogger(SpringTxEventRepository.class);\n+    private final TxEventEnvelopeRepository eventRepo;\n \n-  @Autowired\n-  private IDataDictionaryService dataDictionaryService;\n+    @Autowired\n+    private IDataDictionaryService dataDictionaryService;\n \n-  @Autowired\n-  private GlobalTxListener globalTxListener;\n+    @Autowired\n+    private GlobalTxListener globalTxListener;\n \n-  SpringTxEventRepository(TxEventEnvelopeRepository eventRepo) {\n+    SpringTxEventRepository(TxEventEnvelopeRepository eventRepo) {\n     this.eventRepo = eventRepo;\n-  }\n-\n-  @Override\n-  public void save(TxEvent event) {\n-    globalTxListener.listenEvent(event);\n-    TxEvent saveEvent = eventRepo.save(event);\n-    if (saveEvent != null) {\n-      event.setSurrogateId(saveEvent.id());\n-      globalTxListener.listenEvent(event);\n     }\n-  }\n \n-  @Override\n-  public List<TxEvent> findTimeoutEvents(long unendedMinEventId) {\n+    @Override\n+    public void save(TxEvent event) {\n+        globalTxListener.listenEvent(event);\n+        TxEvent saveEvent = eventRepo.save(event);\n+        if (saveEvent != null) {\n+            event.setSurrogateId(saveEvent.id());\n+            globalTxListener.listenEvent(event);\n+        }\n+    }\n+\n+    @Override\n+    public List<TxEvent> findTimeoutEvents(long unendedMinEventId) {\n //    return eventRepo.findTimeoutEvents(SINGLE_TX_EVENT_REQUEST);\n-    return eventRepo.findTimeoutEvents(unendedMinEventId, new Date());\n-  }\n-\n-  @Override\n-  public TxEvent findTimeoutEventsBeforeEnding(String globalTxId) {\n-    return eventRepo.findTimeoutEventsBeforeEnding(globalTxId, new Date());\n-  }\n-\n-  @Override\n-  public List<TxEvent> findTimeoutEvents(List<String> globalTxId) {\n-    return eventRepo.findTimeoutEvents(globalTxId, new Date());\n-  }\n-\n-  @Override\n-  public Optional<TxEvent> findTxStartedEvent(String globalTxId, String localTxId) {\n-    return eventRepo.findFirstStartedEventByGlobalTxIdAndLocalTxId(globalTxId, localTxId);\n-  }\n-\n-  @Override\n-  public List<TxEvent> findSequentialCompensableEventOfUnended(long unendedMinEventId) {\n-    return eventRepo.findSequentialCompensableEventOfUnended(unendedMinEventId);\n-  }\n-\n-  @Override\n-  public List<String> selectAllTypeByGlobalTxId(String globalTxId) {\n-    return eventRepo.selectAllTypeByGlobalTxId(globalTxId);\n-  }\n-\n-  @Override\n-\tpublic List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n-\t\treturn eventRepo.selectPausedAndContinueEvent(globalTxId);\n-\t}\n-\n-  @Override\n-  public Set<String> selectEndedGlobalTx(Set<String> localTxIdSet) {\n-    return eventRepo.selectEndedGlobalTx(localTxIdSet);\n-  }\n-\n-  @Override\n-  public boolean checkIsExistsEventType(String globalTxId, String localTxId, String type) {\n-    return eventRepo.checkIsExistsEventType(globalTxId, localTxId, type) > 0;\n-  }\n-\n-  @Override\n-  public boolean checkTxIsAborted(String globalTxId, String localTxId) {\n-    return eventRepo.checkTxIsAborted(globalTxId, localTxId) > 0;\n-  }\n-\n-  @Override\n-  public List<Map<String, Object>> findTxList(int pageIndex, int pageSize, String orderName, String direction, String searchText) {\n+        return eventRepo.findTimeoutEvents(unendedMinEventId, new Date());\n+    }\n+\n+    @Override\n+    public TxEvent findTimeoutEventsBeforeEnding(String globalTxId) {\n+        return eventRepo.findTimeoutEventsBeforeEnding(globalTxId, new Date());\n+    }\n+\n+    @Override\n+    public List<TxEvent> findTimeoutEvents(List<String> globalTxId) {\n+        return eventRepo.findTimeoutEvents(globalTxId, new Date());\n+    }\n+\n+    @Override\n+    public Optional<TxEvent> findTxStartedEvent(String globalTxId, String localTxId) {\n+        return eventRepo.findFirstStartedEventByGlobalTxIdAndLocalTxId(globalTxId, localTxId);\n+    }\n+\n+    @Override\n+    public List<TxEvent> findSequentialCompensableEventOfUnended(long unendedMinEventId) {\n+        return eventRepo.findSequentialCompensableEventOfUnended(unendedMinEventId);\n+    }\n+\n+    @Override\n+    public List<String> selectAllTypeByGlobalTxId(String globalTxId) {\n+        return eventRepo.selectAllTypeByGlobalTxId(globalTxId);\n+    }\n+\n+    @Override\n+    public List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n+        return eventRepo.selectPausedAndContinueEvent(globalTxId);\n+    }\n+\n+    @Override\n+    public Set<String> selectEndedGlobalTx(Set<String> localTxIdSet) {\n+        return eventRepo.selectEndedGlobalTx(localTxIdSet);\n+    }\n+\n+    @Override\n+    public boolean checkIsExistsEventType(String globalTxId, String localTxId, String type) {\n+        return eventRepo.checkIsExistsEventType(globalTxId, localTxId, type) > 0;\n+    }\n+\n+    @Override\n+    public boolean checkTxIsAborted(String globalTxId, String localTxId) {\n+        return eventRepo.checkTxIsAborted(globalTxId, localTxId) > 0;\n+    }\n+\n+    @Override\n+    public List<Map<String, Object>> findTxList(int pageIndex, int pageSize, String orderName, String direction, String searchText) {\n     // \u786e\u5b9a\u672c\u6b21\u5206\u9875\u67e5\u8be2\u7684\u5168\u5c40\u4e8b\u52a1\n-    List<TxEvent> txStartedEventList = this.searchTxList(pageIndex, pageSize, orderName, direction, searchText);\n-    if (txStartedEventList != null && !txStartedEventList.isEmpty()) {\n-      List<Map<String, Object>> resultTxEventList = new LinkedList<>();\n-\n-      List<String> globalTxIdList = new ArrayList<>();\n-      txStartedEventList.forEach(event -> {\n-        globalTxIdList.add(event.globalTxId());\n-        resultTxEventList.add(event.toMap());\n-      });\n-\n-      List<TxEvent> txEventList = eventRepo.selectTxEventByGlobalTxIds(globalTxIdList);\n-      if (txEventList != null && !txEventList.isEmpty()) {\n+        List<TxEvent> txStartedEventList = this.searchTxList(pageIndex, pageSize, orderName, direction, searchText);\n+        if (txStartedEventList != null && !txStartedEventList.isEmpty()) {\n+            List<Map<String, Object>> resultTxEventList = new LinkedList<>();\n+            List<String> globalTxIdList = new ArrayList<>();\n+            txStartedEventList.forEach(event -> {\n+                globalTxIdList.add(event.globalTxId());\n+                resultTxEventList.add(event.toMap());\n+            });\n+            List<TxEvent> txEventList = eventRepo.selectTxEventByGlobalTxIds(globalTxIdList);\n+            if (txEventList != null && !txEventList.isEmpty()) {\n         // \u8ba1\u7b97\u5168\u5c40\u4e8b\u52a1\u7684\u72b6\u6001\n-        computeGlobalTxStatus(txEventList, resultTxEventList);\n-      }\n-\n-      return resultTxEventList;\n+                computeGlobalTxStatus(txEventList, resultTxEventList);\n+            }\n+            return resultTxEventList;\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n \n-  private List<TxEvent> searchTxList(int pageIndex, int pageSize, String orderName, String direction, String searchText) {\n+    private List<TxEvent> searchTxList(int pageIndex, int pageSize, String orderName, String direction, String searchText) {\n     // TODO \u68c0\u6d4b\u662f\u5426\u6709\u975e\u6570\u5b57\uff0c\u5982\u679c\u6709\u975e\u6570\u5b57\u5219\u8fc7\u6ee4\u6389\u6570\u5b57\u7c7b\u578b\u5b57\u6bb5\n     // TODO \u68c0\u6d4b\u5982\u679c\u662f\u5b57\u7b26\u201c-\u201d\uff0c\u5219\u89c6\u4e3a\u65e0searchText\u5904\u7406\uff0c\u56e0\u4e3a\u6bcf\u4e00\u884c\u7684\u65e5\u671f\u90fd\u542b\u6709\u201c-\u201d\uff0c\u6216\u8005\u662f\u5f53\u5df2\u5b8c\u6210\u7684\u67e5\u8be2\n-    try {\n-      pageIndex = pageIndex < 1 ? 0 : pageIndex;\n-      pageSize = pageSize < 1 ? 100 : pageSize;\n-\n-      Sort.Direction sd = Sort.Direction.DESC;\n-      if (orderName == null || orderName.length() == 0) {\n-        orderName = \"creationTime\";\n-      }\n-      if (\"asc\".equalsIgnoreCase(direction)) {\n-        sd = Sort.Direction.ASC;\n-      }\n-\n-      PageRequest pageRequest = new PageRequest(pageIndex, pageSize, sd, orderName);\n-      if (searchText == null || searchText.length() == 0) {\n-        return eventRepo.findTxList(pageRequest);\n-      }\n-      return eventRepo.findTxList(pageRequest, searchText);\n-    } catch (Exception e) {\n-      LOG.error(\"Failed to find the list of Global Transaction. params {pageIndex: [{}], pageSize: [{}], orderName: [{}], direction: [{}], searchText: [{}]}.\", pageIndex, pageSize, orderName, direction, searchText, e);\n+        try {\n+            pageIndex = pageIndex < 1 ? 0 : pageIndex;\n+            pageSize = pageSize < 1 ? 100 : pageSize;\n+            Sort.Direction sd = Sort.Direction.DESC;\n+            if (orderName == null || orderName.length() == 0) {\n+                orderName = \"creationTime\";\n+            }\n+            if (\"asc\".equalsIgnoreCase(direction)) {\n+                sd = Sort.Direction.ASC;\n+            }\n+            PageRequest pageRequest = new PageRequest(pageIndex, pageSize, sd, orderName);\n+            if (searchText == null || searchText.length() == 0) {\n+                return eventRepo.findTxList(pageRequest);\n+            }\n+            return eventRepo.findTxList(pageRequest, searchText);\n+        } catch (Exception e) {\n+            LOG.error(\"Failed to find the list of Global Transaction. params {pageIndex: [{}], pageSize: [{}], orderName: [{}], direction: [{}], searchText: [{}]}.\", pageIndex, pageSize, orderName, direction, searchText, e);\n+        }\n+        return null;\n     }\n-    return null;\n-  }\n-\n-  @Override\n-  public List<TxEvent> selectTxEventByGlobalTxIds(List<String> globalTxIdList) {\n-    return eventRepo.selectTxEventByGlobalTxIds(globalTxIdList);\n-  }\n-\n-  @Override\n-  public long findTxCount(String searchText) {\n-    if (searchText == null || searchText.length() == 0) {\n-      return eventRepo.findTxListCount();\n+\n+    @Override\n+    public List<TxEvent> selectTxEventByGlobalTxIds(List<String> globalTxIdList) {\n+        return eventRepo.selectTxEventByGlobalTxIds(globalTxIdList);\n     }\n-    return eventRepo.findTxListCount(searchText);\n-  }\n-\n-  @Override\n-  public List<Map<String, Object>> findSubTxList(String globalTxIds) {\n-      if (globalTxIds != null && globalTxIds.length() > 0) {\n-          List<String> globalTxIdList = Arrays.asList(globalTxIds.split(\",\"));\n-          List<TxEvent> txEventList = eventRepo.selectSpecialColumnsOfTxEventByGlobalTxIds(globalTxIdList);\n-          if (txEventList != null && !txEventList.isEmpty()) {\n-              List<Map<String, Object>> resultTxEventList = new LinkedList<>();\n-              Set<String> localTxIdSet = new HashSet<>();\n-              txEventList.forEach(event -> {\n-                  if (TxStartedEvent.name().equals(event.type()) && !localTxIdSet.contains(event.localTxId())) {\n-                      localTxIdSet.add(event.localTxId());\n-                      resultTxEventList.add(event.toMap());\n-                  }\n-              });\n-\n-              computeSubTxStatus(txEventList, resultTxEventList);\n-\n-              return resultTxEventList;\n-          }\n-      }\n-      return null;\n-  }\n-\n-  @Override\n-  public List<TxEvent> selectUnendedTxEvents(long unendedMinEventId) {\n-    return eventRepo.selectUnendedTxEvents(unendedMinEventId);\n-  }\n-\n-  @Override\n-  public long selectMinUnendedTxEventId(long unendedMinEventId) {\n-    return eventRepo.selectMinUnendedTxEventId(unendedMinEventId);\n-  }\n-\n-  @Override\n-  public Date selectMinDateInTxEvent() {\n-    return eventRepo.selectMinDateInTxEvent();\n-  }\n-\n-  @Override\n-  public List<Long> selectEndedEventIdsWithinSomePeriod(int pageIndex, int pageSize, Date startTime, Date endTime) {\n-    return eventRepo.selectEndedEventIdsWithinSomePeriod(new PageRequest(pageIndex, pageSize), startTime, endTime);\n-  }\n-\n-  public TxEvent selectMinRetriesEventByTxIdType(String globalTxId, String localTxId, String type) {\n-    return eventRepo.selectMinRetriesEventByTxIdType(globalTxId, localTxId, type);\n-  }\n-\n-  @Override\n-  public TxEvent selectEventByGlobalTxIdType(String globalTxId, String type) {\n-    return eventRepo.selectEventByGlobalTxIdType(globalTxId, type);\n-  }\n-\n-  public boolean checkIsAlreadyRetried(String globalTxId, String localTxId) {\n-    return eventRepo.selectStartedAndAbortedEndRate(globalTxId, localTxId) == 0;\n-  }\n \n-  // \u8ba1\u7b97\u5168\u5c40\u4e8b\u52a1\u7684\u72b6\u6001\n-  private void computeGlobalTxStatus(List<TxEvent> txEventList, List<Map<String, Object>> resultTxEventList) {\n-    Map<String, String> statusValueName = new HashMap<>(8);\n-    List<DataDictionaryItem> dataDictionaryItemList = dataDictionaryService.selectDataDictionaryList(\"global-tx-status\");\n-    if (dataDictionaryItemList != null && !dataDictionaryItemList.isEmpty()) {\n-      dataDictionaryItemList.forEach(dd -> statusValueName.put(dd.getValue(), dd.getName()));\n+    @Override\n+    public long findTxCount(String searchText) {\n+        if (searchText == null || searchText.length() == 0) {\n+            return eventRepo.findTxListCount();\n+        }\n+        return eventRepo.findTxListCount(searchText);\n+    }\n+\n+    @Override\n+    public List<Map<String, Object>> findSubTxList(String globalTxIds) {\n+        if (globalTxIds != null && globalTxIds.length() > 0) {\n+            List<String> globalTxIdList = Arrays.asList(globalTxIds.split(\",\"));\n+            List<TxEvent> txEventList = eventRepo.selectSpecialColumnsOfTxEventByGlobalTxIds(globalTxIdList);\n+            if (txEventList != null && !txEventList.isEmpty()) {\n+                List<Map<String, Object>> resultTxEventList = new LinkedList<>();\n+                Set<String> localTxIdSet = new HashSet<>();\n+                txEventList.forEach(event -> {\n+                    if (TxStartedEvent.name().equals(event.type()) && !localTxIdSet.contains(event.localTxId())) {\n+                        localTxIdSet.add(event.localTxId());\n+                        resultTxEventList.add(event.toMap());\n+                    }\n+                });\n+                computeSubTxStatus(txEventList, resultTxEventList);\n+                return resultTxEventList;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public List<TxEvent> selectUnendedTxEvents(long unendedMinEventId) {\n+        return eventRepo.selectUnendedTxEvents(unendedMinEventId);\n+    }\n+\n+    @Override\n+    public long selectMinUnendedTxEventId(long unendedMinEventId) {\n+        return eventRepo.selectMinUnendedTxEventId(unendedMinEventId);\n     }\n \n+    @Override\n+    public Date selectMinDateInTxEvent() {\n+        return eventRepo.selectMinDateInTxEvent();\n+    }\n+\n+    @Override\n+    public List<Long> selectEndedEventIdsWithinSomePeriod(int pageIndex, int pageSize, Date startTime, Date endTime) {\n+        return eventRepo.selectEndedEventIdsWithinSomePeriod(new PageRequest(pageIndex, pageSize), startTime, endTime);\n+    }\n+\n+    public TxEvent selectMinRetriesEventByTxIdType(String globalTxId, String localTxId, String type) {\n+        return eventRepo.selectMinRetriesEventByTxIdType(globalTxId, localTxId, type);\n+    }\n+\n+    @Override\n+    public TxEvent selectEventByGlobalTxIdType(String globalTxId, String type) {\n+        return eventRepo.selectEventByGlobalTxIdType(globalTxId, type);\n+    }\n+\n+    public boolean checkIsAlreadyRetried(String globalTxId, String localTxId) {\n+        return eventRepo.selectStartedAndAbortedEndRate(globalTxId, localTxId) == 0;\n+    }\n+\n+  // \u8ba1\u7b97\u5168\u5c40\u4e8b\u52a1\u7684\u72b6\u6001\n+\n+    private void computeGlobalTxStatus(List<TxEvent> txEventList, List<Map<String, Object>> resultTxEventList) {\n+        Map<String, String> statusValueName = new HashMap<>(8);\n+        List<DataDictionaryItem> dataDictionaryItemList = dataDictionaryService.selectDataDictionaryList(\"global-tx-status\");\n+        if (dataDictionaryItemList != null && !dataDictionaryItemList.isEmpty()) {\n+            dataDictionaryItemList.forEach(dd -> statusValueName.put(dd.getValue(), dd.getName()));\n+        }\n+\n     // 0-\u8fd0\u884c\u4e2d\uff0c1-\u8fd0\u884c\u5f02\u5e38\uff0c2-\u6682\u505c\uff0c3-\u6b63\u5e38\u7ed3\u675f\uff0c4-\u5f02\u5e38\u7ed3\u675f\n-    resultTxEventList.forEach(txMap -> {\n-      txMap.put(\"status_db\", 0);\n-      txMap.put(\"status\", statusValueName.get(\"0\"));\n-    });\n-\n-    txEventList.forEach(event -> {\n-      if (TxAbortedEvent.name().equals(event.type())) {\n-        for (Map<String, Object> txMap : resultTxEventList) {\n-          if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString())) {\n+        resultTxEventList.forEach(txMap -> {\n+            txMap.put(\"status_db\", 0);\n+            txMap.put(\"status\", statusValueName.get(\"0\"));\n+        });\n+        txEventList.forEach(event -> {\n+            if (TxAbortedEvent.name().equals(event.type())) {\n+                for (Map<String, Object> txMap : resultTxEventList) {\n+                    if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString())) {\n             // \u5f02\u5e38\u72b6\u6001\n-            txMap.put(\"status_db\", 1);\n-            txMap.put(\"status\", statusValueName.get(\"1\"));\n-            break;\n-          }\n-        }\n-      }\n-    });\n-\n-    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n-    txEventList.forEach(event -> {\n-      if (SagaEndedEvent.name().equals(event.type())) {\n-        for (Map<String, Object> txMap : resultTxEventList) {\n-          if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString())) {\n+                        txMap.put(\"status_db\", 1);\n+                        txMap.put(\"status\", statusValueName.get(\"1\"));\n+                        break;\n+                    }\n+                }\n+            }\n+        });\n+        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+        txEventList.forEach(event -> {\n+            if (SagaEndedEvent.name().equals(event.type())) {\n+                for (Map<String, Object> txMap : resultTxEventList) {\n+                    if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString())) {\n             // ****\u8bbe\u7f6e\u7ed3\u675f\u65f6\u95f4****\n-            txMap.put(\"endTime\", sdf.format(event.creationTime()));\n-            if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n+                        txMap.put(\"endTime\", sdf.format(event.creationTime()));\n+                        if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n               // \u6b63\u5e38\u7ed3\u675f\n-              txMap.put(\"status_db\", 3);\n-              txMap.put(\"status\", statusValueName.get(\"3\"));\n-            } else {\n+                            txMap.put(\"status_db\", 3);\n+                            txMap.put(\"status\", statusValueName.get(\"3\"));\n+                        } else {\n               // \u5f02\u5e38\u7ed3\u675f\n-              txMap.put(\"status_db\", 4);\n-              txMap.put(\"status\", statusValueName.get(\"4\"));\n+                            txMap.put(\"status_db\", 4);\n+                            txMap.put(\"status\", statusValueName.get(\"4\"));\n+                        }\n+                        break;\n+                    }\n+                }\n             }\n-            break;\n-          }\n-        }\n-      }\n-    });\n-\n-    resultTxEventList.forEach(txMap -> {\n+        });\n+        resultTxEventList.forEach(txMap -> {\n       // \u6b63\u5e38\u72b6\u6001\u573a\u666f\u624d\u53bb\u9a8c\u8bc1\u662f\u5426\u6682\u505c\n-      if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n-        txEventList.forEach(event -> {\n-          if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString()) && (AdditionalEventType.SagaPausedEvent.name().equals(event.type()) || AdditionalEventType.SagaAutoContinuedEvent.name().equals(event.type()))) {\n-            List<TxEvent> pauseContinueEventList = eventRepo.selectPausedAndContinueEvent(event.globalTxId());\n-            if (pauseContinueEventList != null && !pauseContinueEventList.isEmpty()) {\n+            if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n+                txEventList.forEach(event -> {\n+                    if (event.globalTxId().equals(txMap.get(\"globalTxId\").toString()) && (AdditionalEventType.SagaPausedEvent.name().equals(event.type()) || AdditionalEventType.SagaAutoContinuedEvent.name().equals(event.type()))) {\n+                        List<TxEvent> pauseContinueEventList = eventRepo.selectPausedAndContinueEvent(event.globalTxId());\n+                        if (pauseContinueEventList != null && !pauseContinueEventList.isEmpty()) {\n               // \u6682\u505c\u72b6\u6001\n-              if (pauseContinueEventList.size() % 2 == 1) {\n+                            if (pauseContinueEventList.size() % 2 == 1) {\n                 // \u6682\u505c\n-                txMap.put(\"status_db\", 2);\n-                txMap.put(\"status\", statusValueName.get(\"2\"));\n-              }\n+                                txMap.put(\"status_db\", 2);\n+                                txMap.put(\"status\", statusValueName.get(\"2\"));\n+                            }\n+                        }\n+                    }\n+                });\n             }\n-          }\n         });\n-      }\n-    });\n-  }\n+    }\n \n   // \u8ba1\u7b97\u5b50\u4e8b\u52a1\u7684\u72b6\u6001\n-  private void computeSubTxStatus(List<TxEvent> txEventList, List<Map<String, Object>> resultTxEventList) {\n-    Map<String, String> statusValueName = new HashMap<>(8);\n-    List<DataDictionaryItem> dataDictionaryItemList = dataDictionaryService.selectDataDictionaryList(\"global-tx-status\");\n-    if (dataDictionaryItemList != null && !dataDictionaryItemList.isEmpty()) {\n-      dataDictionaryItemList.forEach(dd -> statusValueName.put(dd.getValue(), dd.getName()));\n-    }\n+\n+    private void computeSubTxStatus(List<TxEvent> txEventList, List<Map<String, Object>> resultTxEventList) {\n+        Map<String, String> statusValueName = new HashMap<>(8);\n+        List<DataDictionaryItem> dataDictionaryItemList = dataDictionaryService.selectDataDictionaryList(\"global-tx-status\");\n+        if (dataDictionaryItemList != null && !dataDictionaryItemList.isEmpty()) {\n+            dataDictionaryItemList.forEach(dd -> statusValueName.put(dd.getValue(), dd.getName()));\n+        }\n \n     // 0-\u8fd0\u884c\u4e2d\uff0c1-\u8fd0\u884c\u5f02\u5e38\uff0c2-\u6682\u505c\uff0c3-\u6b63\u5e38\u7ed3\u675f\uff0c4-\u5f02\u5e38\u7ed3\u675f\n-    resultTxEventList.forEach(txMap -> {\n-      txMap.put(\"status_db\", 0);\n-      txMap.put(\"status\", statusValueName.get(\"0\"));\n-    });\n-\n-    txEventList.forEach(event -> {\n-      if (TxAbortedEvent.name().equals(event.type())) {\n-        for (Map<String, Object> txMap : resultTxEventList) {\n-          if (event.localTxId().equals(txMap.get(\"localTxId\").toString())) {\n+        resultTxEventList.forEach(txMap -> {\n+            txMap.put(\"status_db\", 0);\n+            txMap.put(\"status\", statusValueName.get(\"0\"));\n+        });\n+        txEventList.forEach(event -> {\n+            if (TxAbortedEvent.name().equals(event.type())) {\n+                for (Map<String, Object> txMap : resultTxEventList) {\n+                    if (event.localTxId().equals(txMap.get(\"localTxId\").toString())) {\n             // \u5f02\u5e38\u72b6\u6001\n-            txMap.put(\"status_db\", 1);\n-            txMap.put(\"status\", statusValueName.get(\"1\"));\n-            break;\n-          }\n-        }\n-      }\n-    });\n-\n-    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n-    txEventList.forEach(event -> {\n-      if (TxEndedEvent.name().equals(event.type())) {\n-        for (Map<String, Object> txMap : resultTxEventList) {\n-          if (event.localTxId().equals(txMap.get(\"localTxId\").toString())) {\n+                        txMap.put(\"status_db\", 1);\n+                        txMap.put(\"status\", statusValueName.get(\"1\"));\n+                        break;\n+                    }\n+                }\n+            }\n+        });\n+        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n+        txEventList.forEach(event -> {\n+            if (TxEndedEvent.name().equals(event.type())) {\n+                for (Map<String, Object> txMap : resultTxEventList) {\n+                    if (event.localTxId().equals(txMap.get(\"localTxId\").toString())) {\n             // ****\u8bbe\u7f6e\u7ed3\u675f\u65f6\u95f4****\n-            txMap.put(\"endTime\", sdf.format(event.creationTime()));\n-            if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n+                        txMap.put(\"endTime\", sdf.format(event.creationTime()));\n+                        if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n               // \u6b63\u5e38\u7ed3\u675f\n-              txMap.put(\"status_db\", 3);\n-              txMap.put(\"status\", statusValueName.get(\"3\"));\n-            } else {\n+                            txMap.put(\"status_db\", 3);\n+                            txMap.put(\"status\", statusValueName.get(\"3\"));\n+                        } else {\n               // \u5f02\u5e38\u7ed3\u675f\n-              txMap.put(\"status_db\", 4);\n-              txMap.put(\"status\", statusValueName.get(\"4\"));\n+                            txMap.put(\"status_db\", 4);\n+                            txMap.put(\"status\", statusValueName.get(\"4\"));\n+                        }\n+                        break;\n+                    }\n+                }\n             }\n-            break;\n-          }\n-        }\n-      }\n-    });\n-\n-    resultTxEventList.forEach(txMap -> {\n+        });\n+        resultTxEventList.forEach(txMap -> {\n       // \u6b63\u5e38\u72b6\u6001\u573a\u666f\u624d\u53bb\u9a8c\u8bc1\u662f\u5426\u6682\u505c\n-      if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n-        txEventList.forEach(event -> {\n-          if (event.localTxId().equals(txMap.get(\"localTxId\").toString()) && (AdditionalEventType.SagaPausedEvent.name().equals(event.type()) || AdditionalEventType.SagaAutoContinuedEvent.name().equals(event.type()))) {\n-            List<TxEvent> pauseContinueEventList = eventRepo.selectPausedAndContinueEvent(event.globalTxId());\n-            if (pauseContinueEventList != null && !pauseContinueEventList.isEmpty()) {\n+            if (Integer.parseInt(txMap.get(\"status_db\").toString()) == 0) {\n+                txEventList.forEach(event -> {\n+                    if (event.localTxId().equals(txMap.get(\"localTxId\").toString()) && (AdditionalEventType.SagaPausedEvent.name().equals(event.type()) || AdditionalEventType.SagaAutoContinuedEvent.name().equals(event.type()))) {\n+                        List<TxEvent> pauseContinueEventList = eventRepo.selectPausedAndContinueEvent(event.globalTxId());\n+                        if (pauseContinueEventList != null && !pauseContinueEventList.isEmpty()) {\n               // \u6682\u505c\u72b6\u6001\n-              if (pauseContinueEventList.size() % 2 == 1) {\n+                            if (pauseContinueEventList.size() % 2 == 1) {\n                 // \u6682\u505c\n-                txMap.put(\"status_db\", 2);\n-                txMap.put(\"status\", statusValueName.get(\"2\"));\n-              }\n+                                txMap.put(\"status_db\", 2);\n+                                txMap.put(\"status\", statusValueName.get(\"2\"));\n+                            }\n+                        }\n+                    }\n+                });\n             }\n-          }\n         });\n-      }\n-    });\n-  }\n+    }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 380
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "98",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/30/SpringTxEventRepository.java\nindex f3b83dc44ca..54fea45fccb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_random/30/SpringTxEventRepository.java\n@@ -94,7 +94,7 @@ class SpringTxEventRepository implements TxEventRepository {\n   }\n \n   @Override\n-\tpublic List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n+  public List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n \t\treturn eventRepo.selectPausedAndContinueEvent(globalTxId);\n \t}\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "98",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/30/SpringTxEventRepository.java\nindex f3b83dc44ca..54fea45fccb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/errored/1/30/SpringTxEventRepository.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/actiontech-txle/styler_three_grams/30/SpringTxEventRepository.java\n@@ -94,7 +94,7 @@ class SpringTxEventRepository implements TxEventRepository {\n   }\n \n   @Override\n-\tpublic List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n+  public List<TxEvent> selectPausedAndContinueEvent(String globalTxId) {\n \t\treturn eventRepo.selectPausedAndContinueEvent(globalTxId);\n \t}\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}