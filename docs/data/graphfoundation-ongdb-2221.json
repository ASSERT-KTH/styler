{
    "project_name": "graphfoundation-ongdb",
    "error_id": "2221",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "52",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "45",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "95",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "67",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "94",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "100",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "106",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2221/KernelExtensionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2221/KernelExtensionUtil.java\nindex 2aad746e6d2..83334f36dd1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2221/KernelExtensionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/2221/KernelExtensionUtil.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.extension;\n \n import java.io.BufferedReader;\n@@ -33,80 +34,78 @@ import static java.lang.System.getProperty;\n  */\n public abstract class KernelExtensionUtil\n {\n-    private KernelExtensionUtil()\n-    {\n-        throw new AssertionError(); // no instances\n-    }\n+  private KernelExtensionUtil()\n+  {\n+    throw new AssertionError(); // no instances\n+  }\n \n-    public static String servicesClassPathEntryInformation()\n+  public static String servicesClassPathEntryInformation()\n+  {\n+    String separator = System.lineSeparator();\n+    StringBuilder result = new StringBuilder(\"Kernel extensions available on classpath: \");\n+    StringBuilder classPath = new StringBuilder();\n+    for (String entry : getProperty(\"java.class.path\").split(pathSeparator))\n     {\n-        String separator = System.lineSeparator();\n-        StringBuilder result = new StringBuilder( \"Kernel extensions available on classpath: \" );\n-        StringBuilder classPath = new StringBuilder();\n-        for ( String entry : getProperty( \"java.class.path\" ).split( pathSeparator ) )\n-        {\n-            classPath.append( separator ).append( \"  \" ).append( entry );\n-\n-            File entryFile = new File( entry );\n-            if ( entryFile.isDirectory() )\n-            {   // Might we have a directory containing META-INF/services here?\n-                File servicesDir = new File( new File( entryFile, \"META-INF\" ), \"services\" );\n-                if ( servicesDir.exists() )\n-                {\n-                    result.append( separator )\n-                            .append( \"Listing service files and kernel extensions where possible in \" )\n-                            .append( servicesDir ).append( ':' );\n-                    File[] files = servicesDir.listFiles();\n-                    if ( files != null )\n-                    {\n-                        for ( File serviceFile : files )\n-                        {\n-                            if ( serviceFile.isFile() )\n-                            {\n-                                result.append( separator ).append( \"  \" ).append( serviceFile.getName() );\n-                            }\n-                        }\n-                    }\n+      classPath.append(separator).append(\"  \").append(entry);\n \n-                    File extensionsFile = new File( servicesDir, KernelExtensionFactory.class.getName() );\n-                    if ( extensionsFile.exists() )\n-                    {\n-                        appendKernelExtensionsList( extensionsFile, result, separator + \"   + \" );\n-                    }\n-                }\n+      File entryFile = new File(entry);\n+      if (entryFile.isDirectory())\n+      {   // Might we have a directory containing META-INF/services here?\n+        File servicesDir = new File(new File(entryFile, \"META-INF\"), \"services\");\n+        if (servicesDir.exists())\n+        {\n+          result.append(separator)\n+              .append(\"Listing service files and kernel extensions where possible in \")\n+              .append(servicesDir).append(':');\n+          File[] files = servicesDir.listFiles();\n+          if (files != null)\n+          {\n+            for (File serviceFile : files)\n+            {\n+              if (serviceFile.isFile())\n+              {\n+                result.append(separator).append(\"  \").append(serviceFile.getName());\n+              }\n             }\n+          }\n+\n+          File extensionsFile = new File(servicesDir, KernelExtensionFactory.class.getName());\n+          if (extensionsFile.exists())\n+          {\n+            appendKernelExtensionsList(extensionsFile, result, separator + \"   + \");\n+          }\n         }\n-        return result.append( separator ).append( separator )\n-                .append( \"Class path entries:\" ).append( classPath ).toString();\n+      }\n     }\n+    return result.append(separator).append(separator)\n+        .append(\"Class path entries:\").append(classPath).toString();\n+  }\n \n-    private static void appendKernelExtensionsList( File file, StringBuilder to, String separator )\n+  private static void appendKernelExtensionsList(File file, StringBuilder to, String separator)\n+  {\n+    try (BufferedReader reader = new BufferedReader(new FileReader(file)))\n     {\n-        try ( BufferedReader reader = new BufferedReader( new FileReader( file ) ) )\n-        {\n-            String line;\n-            while ( (line = reader.readLine()) != null )\n-            {\n-                boolean exists = tryLoadClass( line );\n-                to.append( separator ).append( line ).append( \" (\" ).append( exists ? \"exists\" : \"DOES NOT exist\" ).append( ')' );\n-            }\n-        }\n-        catch ( IOException e )\n-        {\n-            to.append( \"Couldn't read due to \" ).append( e.getMessage() );\n-        }\n+      String line;\n+      while ((line = reader.readLine()) != null)\n+      {\n+        boolean exists = tryLoadClass(line);\n+        to.append(separator).append(line).append(\" (\").append(exists ? \"exists\" : \"DOES NOT exist\").append(')');\n+      }\n+    } catch (IOException e)\n+    {\n+      to.append(\"Couldn't read due to \").append(e.getMessage());\n     }\n+  }\n \n-    private static boolean tryLoadClass( String className )\n+  private static boolean tryLoadClass(String className)\n+  {\n+    try\n     {\n-        try\n-        {\n-            Class.forName( className );\n-            return true;\n-        }\n-        catch ( ClassNotFoundException e )\n-        {\n-            return false;\n-        }\n+      Class.forName(className);\n+      return true;\n+    } catch (ClassNotFoundException e)\n+    {\n+      return false;\n     }\n+  }\n }\n",
            "diff_size": 98
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2221/KernelExtensionUtil.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2221/KernelExtensionUtil.java\nindex 2aad746e6d2..25ef5c708c1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/2221/KernelExtensionUtil.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/2221/KernelExtensionUtil.java\n@@ -46,17 +46,15 @@ public abstract class KernelExtensionUtil\n         for ( String entry : getProperty( \"java.class.path\" ).split( pathSeparator ) )\n         {\n             classPath.append( separator ).append( \"  \" ).append( entry );\n-\n-            File entryFile = new File( entry );\n+File entryFile = new File( entry );\n             if ( entryFile.isDirectory() )\n-            {   // Might we have a directory containing META-INF/services here?\n+            {\n+    // Might we have a directory containing META-INF/services here?\n                 File servicesDir = new File( new File( entryFile, \"META-INF\" ), \"services\" );\n                 if ( servicesDir.exists() )\n                 {\n-                    result.append( separator )\n-                            .append( \"Listing service files and kernel extensions where possible in \" )\n-                            .append( servicesDir ).append( ':' );\n-                    File[] files = servicesDir.listFiles();\n+                    result.append( separator ).append( \"Listing service files and kernel extensions where possible in \" ).append( servicesDir ).append( ':' );\n+File[] files = servicesDir.listFiles();\n                     if ( files != null )\n                     {\n                         for ( File serviceFile : files )\n@@ -76,8 +74,7 @@ public abstract class KernelExtensionUtil\n                 }\n             }\n         }\n-        return result.append( separator ).append( separator )\n-                .append( \"Class path entries:\" ).append( classPath ).toString();\n+        return result.append( separator ).append( separator ).append( \"Class path entries:\" ).append( classPath ).toString();\n     }\n \n     private static void appendKernelExtensionsList( File file, StringBuilder to, String separator )\n@@ -109,4 +106,4 @@ public abstract class KernelExtensionUtil\n             return false;\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}