{
    "project_name": "Activiti-Activiti",
    "error_id": "957",
    "information": {
        "errors": [
            {
                "line": "16",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.converter.export;\n\nimport javax.xml.stream.XMLStreamWriter;\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/957/CollaborationExport.java\nindex aa67b2f3292..f85e4b95ca0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/957/CollaborationExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/957/CollaborationExport.java\nindex aa67b2f3292..1939a200ca9 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/957/CollaborationExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n@@ -25,41 +26,41 @@ import org.apache.commons.lang3.StringUtils;\n \n public class CollaborationExport implements BpmnXMLConstants {\n \n-  public static void writePools(BpmnModel model, XMLStreamWriter xtw) throws Exception {\n-    if (!model.getPools().isEmpty()) {\n-      xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_COLLABORATION, BPMN2_NAMESPACE);\n-      xtw.writeAttribute(ATTRIBUTE_ID, \"Collaboration\");\n-      for (Pool pool : model.getPools()) {\n-        xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_PARTICIPANT, BPMN2_NAMESPACE);\n-        xtw.writeAttribute(ATTRIBUTE_ID, pool.getId());\n-        if (StringUtils.isNotEmpty(pool.getName())) {\n-          xtw.writeAttribute(ATTRIBUTE_NAME, pool.getName());\n-        }\n-        if (StringUtils.isNotEmpty(pool.getProcessRef())) {\n-          xtw.writeAttribute(ATTRIBUTE_PROCESS_REF, pool.getProcessRef());\n-        }\n-        xtw.writeEndElement();\n-      }\n+    public static void writePools(BpmnModel model, XMLStreamWriter xtw) throws Exception {\n+        if (!model.getPools().isEmpty()) {\n+            xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_COLLABORATION, BPMN2_NAMESPACE);\n+            xtw.writeAttribute(ATTRIBUTE_ID, \"Collaboration\");\n+            for (Pool pool : model.getPools()) {\n+                xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_PARTICIPANT, BPMN2_NAMESPACE);\n+                xtw.writeAttribute(ATTRIBUTE_ID, pool.getId());\n+                if (StringUtils.isNotEmpty(pool.getName())) {\n+                    xtw.writeAttribute(ATTRIBUTE_NAME, pool.getName());\n+                }\n+                if (StringUtils.isNotEmpty(pool.getProcessRef())) {\n+                    xtw.writeAttribute(ATTRIBUTE_PROCESS_REF, pool.getProcessRef());\n+                }\n+                xtw.writeEndElement();\n+            }\n \n-      for (MessageFlow messageFlow : model.getMessageFlows().values()) {\n-        xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_MESSAGE_FLOW, BPMN2_NAMESPACE);\n-        xtw.writeAttribute(ATTRIBUTE_ID, messageFlow.getId());\n-        if (StringUtils.isNotEmpty(messageFlow.getName())) {\n-          xtw.writeAttribute(ATTRIBUTE_NAME, messageFlow.getName());\n-        }\n-        if (StringUtils.isNotEmpty(messageFlow.getSourceRef())) {\n-          xtw.writeAttribute(ATTRIBUTE_FLOW_SOURCE_REF, messageFlow.getSourceRef());\n-        }\n-        if (StringUtils.isNotEmpty(messageFlow.getTargetRef())) {\n-          xtw.writeAttribute(ATTRIBUTE_FLOW_TARGET_REF, messageFlow.getTargetRef());\n-        }\n-        if (StringUtils.isNotEmpty(messageFlow.getMessageRef())) {\n-          xtw.writeAttribute(ATTRIBUTE_MESSAGE_REF, messageFlow.getMessageRef());\n-        }\n-        xtw.writeEndElement();\n-      }\n+            for (MessageFlow messageFlow : model.getMessageFlows().values()) {\n+                xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_MESSAGE_FLOW, BPMN2_NAMESPACE);\n+                xtw.writeAttribute(ATTRIBUTE_ID, messageFlow.getId());\n+                if (StringUtils.isNotEmpty(messageFlow.getName())) {\n+                    xtw.writeAttribute(ATTRIBUTE_NAME, messageFlow.getName());\n+                }\n+                if (StringUtils.isNotEmpty(messageFlow.getSourceRef())) {\n+                    xtw.writeAttribute(ATTRIBUTE_FLOW_SOURCE_REF, messageFlow.getSourceRef());\n+                }\n+                if (StringUtils.isNotEmpty(messageFlow.getTargetRef())) {\n+                    xtw.writeAttribute(ATTRIBUTE_FLOW_TARGET_REF, messageFlow.getTargetRef());\n+                }\n+                if (StringUtils.isNotEmpty(messageFlow.getMessageRef())) {\n+                    xtw.writeAttribute(ATTRIBUTE_MESSAGE_REF, messageFlow.getMessageRef());\n+                }\n+                xtw.writeEndElement();\n+            }\n \n-      xtw.writeEndElement();\n+            xtw.writeEndElement();\n+        }\n     }\n-  }\n }\n",
            "diff_size": 36
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "16",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/957/CollaborationExport.java\nindex aa67b2f3292..05a50196a0b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/957/CollaborationExport.java\n@@ -16,50 +16,60 @@\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n-\n import org.activiti.bpmn.constants.BpmnXMLConstants;\n import org.activiti.bpmn.model.BpmnModel;\n import org.activiti.bpmn.model.MessageFlow;\n import org.activiti.bpmn.model.Pool;\n import org.apache.commons.lang3.StringUtils;\n \n+\n public class CollaborationExport implements BpmnXMLConstants {\n \n   public static void writePools(BpmnModel model, XMLStreamWriter xtw) throws Exception {\n     if (!model.getPools().isEmpty()) {\n-      xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_COLLABORATION, BPMN2_NAMESPACE);\n+      xtw.writeStartElement(BPMN2_PREFIX,\n+                            ELEMENT_COLLABORATION,\n+                            BPMN2_NAMESPACE);\n       xtw.writeAttribute(ATTRIBUTE_ID, \"Collaboration\");\n       for (Pool pool : model.getPools()) {\n-        xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_PARTICIPANT, BPMN2_NAMESPACE);\n-        xtw.writeAttribute(ATTRIBUTE_ID, pool.getId());\n-        if (StringUtils.isNotEmpty(pool.getName())) {\n-          xtw.writeAttribute(ATTRIBUTE_NAME, pool.getName());\n-        }\n-        if (StringUtils.isNotEmpty(pool.getProcessRef())) {\n-          xtw.writeAttribute(ATTRIBUTE_PROCESS_REF, pool.getProcessRef());\n-        }\n-        xtw.writeEndElement();\n+          xtw.writeStartElement(BPMN2_PREFIX,\n+                                ELEMENT_PARTICIPANT,\n+                                BPMN2_NAMESPACE);\n+          xtw.writeAttribute(ATTRIBUTE_ID, pool.getId());\n+          if (StringUtils.isNotEmpty(pool.getName())) {\n+            xtw.writeAttribute(ATTRIBUTE_NAME, pool.getName());\n+          }\n+          if (StringUtils.isNotEmpty(pool.getProcessRef())) {\n+            xtw.writeAttribute(ATTRIBUTE_PROCESS_REF,\n+                               pool.getProcessRef());\n+          }\n+          xtw.writeEndElement();\n       }\n \n       for (MessageFlow messageFlow : model.getMessageFlows().values()) {\n-        xtw.writeStartElement(BPMN2_PREFIX, ELEMENT_MESSAGE_FLOW, BPMN2_NAMESPACE);\n-        xtw.writeAttribute(ATTRIBUTE_ID, messageFlow.getId());\n-        if (StringUtils.isNotEmpty(messageFlow.getName())) {\n-          xtw.writeAttribute(ATTRIBUTE_NAME, messageFlow.getName());\n-        }\n-        if (StringUtils.isNotEmpty(messageFlow.getSourceRef())) {\n-          xtw.writeAttribute(ATTRIBUTE_FLOW_SOURCE_REF, messageFlow.getSourceRef());\n-        }\n-        if (StringUtils.isNotEmpty(messageFlow.getTargetRef())) {\n-          xtw.writeAttribute(ATTRIBUTE_FLOW_TARGET_REF, messageFlow.getTargetRef());\n-        }\n-        if (StringUtils.isNotEmpty(messageFlow.getMessageRef())) {\n-          xtw.writeAttribute(ATTRIBUTE_MESSAGE_REF, messageFlow.getMessageRef());\n-        }\n-        xtw.writeEndElement();\n+          xtw.writeStartElement(BPMN2_PREFIX,\n+                                ELEMENT_MESSAGE_FLOW,\n+                                BPMN2_NAMESPACE);\n+          xtw.writeAttribute(ATTRIBUTE_ID, messageFlow.getId());\n+          if (StringUtils.isNotEmpty(messageFlow.getName())) {\n+            xtw.writeAttribute(ATTRIBUTE_NAME, messageFlow.getName());\n+          }\n+          if (StringUtils.isNotEmpty(messageFlow.getSourceRef())) {\n+            xtw.writeAttribute(ATTRIBUTE_FLOW_SOURCE_REF,\n+                               messageFlow.getSourceRef());\n+          }\n+          if (StringUtils.isNotEmpty(messageFlow.getTargetRef())) {\n+            xtw.writeAttribute(ATTRIBUTE_FLOW_TARGET_REF,\n+                               messageFlow.getTargetRef());\n+          }\n+          if (StringUtils.isNotEmpty(messageFlow.getMessageRef())) {\n+            xtw.writeAttribute(ATTRIBUTE_MESSAGE_REF,\n+                               messageFlow.getMessageRef());\n+          }\n+          xtw.writeEndElement();\n       }\n-\n       xtw.writeEndElement();\n     }\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 40
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/957/CollaborationExport.java\nindex aa67b2f3292..f85e4b95ca0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/957/CollaborationExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/957/CollaborationExport.java\nindex aa67b2f3292..f85e4b95ca0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/957/CollaborationExport.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/957/CollaborationExport.java\n@@ -13,6 +13,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter.export;\n \n import javax.xml.stream.XMLStreamWriter;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}