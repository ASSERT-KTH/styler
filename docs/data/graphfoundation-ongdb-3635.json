{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3635",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "45",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "56",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "74",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "106",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "95",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "39",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "123",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "139",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "139",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "158",
                    "column": "87",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "163",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3635/InlineNodeLabels.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3635/InlineNodeLabels.java\nindex 16b428b81cb..1ca30958c6c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3635/InlineNodeLabels.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3635/InlineNodeLabels.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import java.util.Arrays;\n@@ -38,142 +39,141 @@ import static org.neo4j.kernel.impl.util.Bits.bitsFromLongs;\n \n public class InlineNodeLabels implements NodeLabels\n {\n-    private static final int LABEL_BITS = 36;\n-    private final NodeRecord node;\n-\n-    public InlineNodeLabels( NodeRecord node )\n-    {\n-        this.node = node;\n-    }\n-\n-    @Override\n-    public long[] get( NodeStore nodeStore )\n-    {\n-        return get( node );\n-    }\n-\n-    public static long[] get( NodeRecord node )\n-    {\n-        return parseInlined( node.getLabelField() );\n-    }\n-\n-    @Override\n-    public long[] getIfLoaded()\n-    {\n-        return parseInlined( node.getLabelField() );\n-    }\n-\n-    @Override\n-    public Collection<DynamicRecord> put( long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator )\n-    {\n-        Arrays.sort( labelIds );\n-        return putSorted( node, labelIds, nodeStore, allocator );\n-    }\n-\n-    public static Collection<DynamicRecord> putSorted( NodeRecord node, long[] labelIds,\n-            NodeStore nodeStore, DynamicRecordAllocator allocator )\n-    {\n-        if ( tryInlineInNodeRecord( node, labelIds, node.getDynamicLabelRecords() ) )\n-        {\n-            return Collections.emptyList();\n-        }\n-\n-        return DynamicNodeLabels.putSorted( node, labelIds, nodeStore, allocator );\n-    }\n-\n-    @Override\n-    public Collection<DynamicRecord> add( long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator )\n-    {\n-        long[] augmentedLabelIds = labelCount( node.getLabelField() ) == 0 ? new long[]{labelId} :\n-                                   concatAndSort( parseInlined( node.getLabelField() ), labelId );\n-\n-        return putSorted( node, augmentedLabelIds, nodeStore, allocator );\n-    }\n-\n-    @Override\n-    public Collection<DynamicRecord> remove( long labelId, NodeStore nodeStore )\n-    {\n-        long[] newLabelIds = filter( parseInlined( node.getLabelField() ), labelId );\n-        boolean inlined = tryInlineInNodeRecord( node, newLabelIds, node.getDynamicLabelRecords() );\n-        assert inlined;\n-        return Collections.emptyList();\n-    }\n-\n-    static boolean tryInlineInNodeRecord( NodeRecord node, long[] ids, Collection<DynamicRecord> changedDynamicRecords )\n+  private static final int LABEL_BITS = 36;\n+  private final NodeRecord node;\n+\n+  public InlineNodeLabels(NodeRecord node)\n+  {\n+    this.node = node;\n+  }\n+\n+  @Override\n+  public long[] get(NodeStore nodeStore)\n+  {\n+    return get(node);\n+  }\n+\n+  public static long[] get(NodeRecord node)\n+  {\n+    return parseInlined(node.getLabelField());\n+  }\n+\n+  @Override\n+  public long[] getIfLoaded()\n+  {\n+    return parseInlined(node.getLabelField());\n+  }\n+\n+  @Override\n+  public Collection<DynamicRecord> put(long[] labelIds, NodeStore nodeStore, DynamicRecordAllocator allocator)\n+  {\n+    Arrays.sort(labelIds);\n+    return putSorted(node, labelIds, nodeStore, allocator);\n+  }\n+\n+  public static Collection<DynamicRecord> putSorted(NodeRecord node, long[] labelIds,\n+                                                    NodeStore nodeStore, DynamicRecordAllocator allocator)\n+  {\n+    if (tryInlineInNodeRecord(node, labelIds, node.getDynamicLabelRecords()))\n     {\n-        // We reserve the high header bit for future extensions of the format of the in-lined label bits\n-        // i.e. the 0-valued high header bit can allow for 0-7 in-lined labels in the bit-packed format.\n-        if ( ids.length > 7 )\n-        {\n-            return false;\n-        }\n-\n-        byte bitsPerLabel = (byte) (ids.length > 0 ? (LABEL_BITS / ids.length) : LABEL_BITS);\n-        Bits bits = bits( 5 );\n-        if ( !inlineValues( ids, bitsPerLabel, bits ) )\n-        {\n-            return false;\n-        }\n-        node.setLabelField( combineLabelCountAndLabelStorage( (byte) ids.length, bits.getLongs()[0] ),\n-                            changedDynamicRecords );\n-        return true;\n+      return Collections.emptyList();\n     }\n \n-    private static boolean inlineValues( long[] values, int maxBitsPerLabel, Bits target )\n+    return DynamicNodeLabels.putSorted(node, labelIds, nodeStore, allocator);\n+  }\n+\n+  @Override\n+  public Collection<DynamicRecord> add(long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator)\n+  {\n+    long[] augmentedLabelIds = labelCount(node.getLabelField()) == 0 ? new long[] {labelId} :\n+        concatAndSort(parseInlined(node.getLabelField()), labelId);\n+\n+    return putSorted(node, augmentedLabelIds, nodeStore, allocator);\n+  }\n+\n+  @Override\n+  public Collection<DynamicRecord> remove(long labelId, NodeStore nodeStore)\n+  {\n+    long[] newLabelIds = filter(parseInlined(node.getLabelField()), labelId);\n+    boolean inlined = tryInlineInNodeRecord(node, newLabelIds, node.getDynamicLabelRecords());\n+    assert inlined;\n+    return Collections.emptyList();\n+  }\n+\n+  static boolean tryInlineInNodeRecord(NodeRecord node, long[] ids, Collection<DynamicRecord> changedDynamicRecords)\n+  {\n+    // We reserve the high header bit for future extensions of the format of the in-lined label bits\n+    // i.e. the 0-valued high header bit can allow for 0-7 in-lined labels in the bit-packed format.\n+    if (ids.length > 7)\n     {\n-        long limit = 1L << maxBitsPerLabel;\n-        for ( long value : values )\n-        {\n-            if ( highestOneBit( value ) < limit )\n-            {\n-                target.put( value, maxBitsPerLabel );\n-            }\n-            else\n-            {\n-                return false;\n-            }\n-        }\n-        return true;\n+      return false;\n     }\n \n-    public static long[] parseInlined( long labelField )\n+    byte bitsPerLabel = (byte) (ids.length > 0 ? (LABEL_BITS / ids.length) : LABEL_BITS);\n+    Bits bits = bits(5);\n+    if (!inlineValues(ids, bitsPerLabel, bits))\n     {\n-        byte numberOfLabels = labelCount( labelField );\n-        if ( numberOfLabels == 0 )\n-        {\n-            return EMPTY_LONG_ARRAY;\n-        }\n-\n-        long existingLabelsField = parseLabelsBody( labelField );\n-        byte bitsPerLabel = (byte) (LABEL_BITS / numberOfLabels);\n-        Bits bits = bitsFromLongs( new long[]{existingLabelsField} );\n-        long[] result = new long[numberOfLabels];\n-        for ( int i = 0; i < result.length; i++ )\n-        {\n-            result[i] = bits.getLong( bitsPerLabel );\n-        }\n-        return result;\n+      return false;\n     }\n-\n-    private static long combineLabelCountAndLabelStorage( byte labelCount, long labelBits )\n-    {\n-        return ((long)labelCount << 36) | labelBits;\n-    }\n-\n-    private static byte labelCount( long labelField )\n+    node.setLabelField(combineLabelCountAndLabelStorage((byte) ids.length, bits.getLongs()[0]),\n+        changedDynamicRecords);\n+    return true;\n+  }\n+\n+  private static boolean inlineValues(long[] values, int maxBitsPerLabel, Bits target)\n+  {\n+    long limit = 1L << maxBitsPerLabel;\n+    for (long value : values)\n     {\n-        return (byte) ((labelField & 0xF000000000L) >>> 36);\n+      if (highestOneBit(value) < limit)\n+      {\n+        target.put(value, maxBitsPerLabel);\n+      } else\n+      {\n+        return false;\n+      }\n     }\n+    return true;\n+  }\n \n-    @Override\n-    public boolean isInlined()\n+  public static long[] parseInlined(long labelField)\n+  {\n+    byte numberOfLabels = labelCount(labelField);\n+    if (numberOfLabels == 0)\n     {\n-        return true;\n+      return EMPTY_LONG_ARRAY;\n     }\n \n-    @Override\n-    public String toString()\n+    long existingLabelsField = parseLabelsBody(labelField);\n+    byte bitsPerLabel = (byte) (LABEL_BITS / numberOfLabels);\n+    Bits bits = bitsFromLongs(new long[] {existingLabelsField});\n+    long[] result = new long[numberOfLabels];\n+    for (int i = 0; i < result.length; i++)\n     {\n-        return format( \"Inline(0x%x:%s)\", node.getLabelField(), Arrays.toString( getIfLoaded(/*it is*/ ) ) );\n+      result[i] = bits.getLong(bitsPerLabel);\n     }\n+    return result;\n+  }\n+\n+  private static long combineLabelCountAndLabelStorage(byte labelCount, long labelBits)\n+  {\n+    return ((long) labelCount << 36) | labelBits;\n+  }\n+\n+  private static byte labelCount(long labelField)\n+  {\n+    return (byte) ((labelField & 0xF000000000L) >>> 36);\n+  }\n+\n+  @Override\n+  public boolean isInlined()\n+  {\n+    return true;\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"Inline(0x%x:%s)\", node.getLabelField(), Arrays.toString(getIfLoaded(/*it is*/)));\n+  }\n }\n",
            "diff_size": 189
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "87",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 162).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "column": "24",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "109",
                    "column": "47",
                    "severity": "error",
                    "message": "'>' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3635/InlineNodeLabels.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3635/InlineNodeLabels.java\nindex 16b428b81cb..ad5b6bef329 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3635/InlineNodeLabels.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3635/InlineNodeLabels.java\n@@ -84,10 +84,8 @@ public class InlineNodeLabels implements NodeLabels\n     @Override\n     public Collection<DynamicRecord> add( long labelId, NodeStore nodeStore, DynamicRecordAllocator allocator )\n     {\n-        long[] augmentedLabelIds = labelCount( node.getLabelField() ) == 0 ? new long[]{labelId} :\n-                                   concatAndSort( parseInlined( node.getLabelField() ), labelId );\n-\n-        return putSorted( node, augmentedLabelIds, nodeStore, allocator );\n+        long[] augmentedLabelIds = labelCount( node.getLabelField() ) == 0 ? new long[]{labelId} : concatAndSort( parseInlined( node.getLabelField() ), labelId );\n+return putSorted( node, augmentedLabelIds, nodeStore, allocator );\n     }\n \n     @Override\n@@ -103,20 +101,19 @@ public class InlineNodeLabels implements NodeLabels\n     {\n         // We reserve the high header bit for future extensions of the format of the in-lined label bits\n         // i.e. the 0-valued high header bit can allow for 0-7 in-lined labels in the bit-packed format.\n-        if ( ids.length > 7 )\n+        if ( ids.length> 7 )\n         {\n             return false;\n         }\n \n-        byte bitsPerLabel = (byte) (ids.length > 0 ? (LABEL_BITS / ids.length) : LABEL_BITS);\n+        byte bitsPerLabel = (byte) (ids.length> 0 ? ( LABEL_BITS / ids.length) : LABEL_BITS);\n         Bits bits = bits( 5 );\n         if ( !inlineValues( ids, bitsPerLabel, bits ) )\n         {\n             return false;\n         }\n-        node.setLabelField( combineLabelCountAndLabelStorage( (byte) ids.length, bits.getLongs()[0] ),\n-                            changedDynamicRecords );\n-        return true;\n+        node.setLabelField( combineLabelCountAndLabelStorage( (byte) ids.length, bits.getLongs()[0] ), changedDynamicRecords );\n+return true;\n     }\n \n     private static boolean inlineValues( long[] values, int maxBitsPerLabel, Bits target )\n@@ -145,14 +142,15 @@ public class InlineNodeLabels implements NodeLabels\n         }\n \n         long existingLabelsField = parseLabelsBody( labelField );\n-        byte bitsPerLabel = (byte) (LABEL_BITS / numberOfLabels);\n+        byte bitsPerLabel = (byte) ( LABEL_BITS / numberOfLabels);\n         Bits bits = bitsFromLongs( new long[]{existingLabelsField} );\n         long[] result = new long[numberOfLabels];\n         for ( int i = 0; i < result.length; i++ )\n         {\n             result[i] = bits.getLong( bitsPerLabel );\n         }\n-        return result;\n+\n+return result;\n     }\n \n     private static long combineLabelCountAndLabelStorage( byte labelCount, long labelBits )\n@@ -162,7 +160,7 @@ public class InlineNodeLabels implements NodeLabels\n \n     private static byte labelCount( long labelField )\n     {\n-        return (byte) ((labelField & 0xF000000000L) >>> 36);\n+        return (byte) ((labelField & 0xF000000000L) >>> 36 );\n     }\n \n     @Override\n@@ -176,4 +174,4 @@ public class InlineNodeLabels implements NodeLabels\n     {\n         return format( \"Inline(0x%x:%s)\", node.getLabelField(), Arrays.toString( getIfLoaded(/*it is*/ ) ) );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}