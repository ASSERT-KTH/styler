{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4478",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "80",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "52",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "75",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "63",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "98",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "105",
                    "column": "98",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "112",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "68",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "53",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4478/DuplicatedExtensionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4478/DuplicatedExtensionValidator.java\nindex 238896358ff..f11942096ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4478/DuplicatedExtensionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4478/DuplicatedExtensionValidator.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\r\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n  */\r\n+\r\n package org.neo4j.tooling.procedure.validators;\r\n \r\n import org.neo4j.tooling.procedure.messages.CompilationMessage;\r\n@@ -43,80 +44,80 @@ import static java.util.stream.Collectors.groupingBy;\n  * {@code T}.\r\n  * This validation is done within an annotation processor. This means that the detection is detected only per\r\n  * compilation unit, not per Neo4j instance.\r\n- *\r\n+ * <p>\r\n  * Indeed, a Neo4j instance can aggregate several extension JARs and its duplication detection cannot be entirely\r\n  * replaced by this.\r\n  *\r\n  * @param <T> annotation type\r\n  */\r\n public class DuplicatedExtensionValidator<T extends Annotation>\r\n-        implements Function<Collection<Element>,Stream<CompilationMessage>>\r\n+    implements Function<Collection<Element>, Stream<CompilationMessage>>\r\n {\r\n \r\n-    private final Elements elements;\r\n-    private final Class<T> annotationType;\r\n-    private final Function<T,Optional<String>> customNameExtractor;\r\n-\r\n-    public DuplicatedExtensionValidator( Elements elements, Class<T> annotationType,\r\n-            Function<T,Optional<String>> customNameExtractor )\r\n-    {\r\n-        this.elements = elements;\r\n-        this.annotationType = annotationType;\r\n-        this.customNameExtractor = customNameExtractor;\r\n-    }\r\n-\r\n-    @Override\r\n-    public Stream<CompilationMessage> apply( Collection<Element> visitedProcedures )\r\n-    {\r\n-        return findDuplicates( visitedProcedures );\r\n-    }\r\n-\r\n-    private Stream<CompilationMessage> findDuplicates( Collection<Element> visitedProcedures )\r\n-    {\r\n-        return indexByName( visitedProcedures ).filter( index -> index.getValue().size() > 1 )\r\n-                .flatMap( this::asErrors );\r\n-    }\r\n-\r\n-    private Stream<Map.Entry<String,List<Element>>> indexByName( Collection<Element> visitedProcedures )\r\n-    {\r\n-        return visitedProcedures.stream().collect( groupingBy( this::getName ) ).entrySet().stream();\r\n-    }\r\n-\r\n-    private String getName( Element procedure )\r\n-    {\r\n-        T annotation = procedure.getAnnotation( annotationType );\r\n-        Optional<String> customName = customNameExtractor.apply( annotation );\r\n-        return customName.orElse( defaultQualifiedName( procedure ) );\r\n-    }\r\n-\r\n-    private String defaultQualifiedName( Element procedure )\r\n-    {\r\n-        return String.format( \"%s.%s\", elements.getPackageOf( procedure ).toString(), procedure.getSimpleName() );\r\n-    }\r\n-\r\n-    private Stream<CompilationMessage> asErrors( Map.Entry<String,List<Element>> indexedProcedures )\r\n-    {\r\n-        String duplicatedName = indexedProcedures.getKey();\r\n-        return indexedProcedures.getValue().stream()\r\n-                .map( procedure -> asError( procedure, duplicatedName, indexedProcedures.getValue().size() ) );\r\n-    }\r\n-\r\n-    private CompilationMessage asError( Element procedure, String duplicatedName, int duplicateCount )\r\n-    {\r\n-        return new DuplicatedProcedureError( procedure, getAnnotationMirror( procedure ),\r\n-                \"Procedure|function name <%s> is already defined %s times. It should be defined only once!\",\r\n-                duplicatedName, String.valueOf( duplicateCount ) );\r\n-    }\r\n-\r\n-    private AnnotationMirror getAnnotationMirror( Element procedure )\r\n-    {\r\n-        return procedure.getAnnotationMirrors().stream().filter( this::isProcedureAnnotationType ).findFirst()\r\n-                .orElse( null );\r\n-    }\r\n-\r\n-    private boolean isProcedureAnnotationType( AnnotationMirror mirror )\r\n-    {\r\n-        return new AnnotationTypeVisitor( Procedure.class ).visit( mirror.getAnnotationType().asElement() );\r\n-    }\r\n+  private final Elements elements;\r\n+  private final Class<T> annotationType;\r\n+  private final Function<T, Optional<String>> customNameExtractor;\r\n+\r\n+  public DuplicatedExtensionValidator(Elements elements, Class<T> annotationType,\r\n+                                      Function<T, Optional<String>> customNameExtractor)\r\n+  {\r\n+    this.elements = elements;\r\n+    this.annotationType = annotationType;\r\n+    this.customNameExtractor = customNameExtractor;\r\n+  }\r\n+\r\n+  @Override\r\n+  public Stream<CompilationMessage> apply(Collection<Element> visitedProcedures)\r\n+  {\r\n+    return findDuplicates(visitedProcedures);\r\n+  }\r\n+\r\n+  private Stream<CompilationMessage> findDuplicates(Collection<Element> visitedProcedures)\r\n+  {\r\n+    return indexByName(visitedProcedures).filter(index -> index.getValue().size() > 1)\r\n+        .flatMap(this::asErrors);\r\n+  }\r\n+\r\n+  private Stream<Map.Entry<String, List<Element>>> indexByName(Collection<Element> visitedProcedures)\r\n+  {\r\n+    return visitedProcedures.stream().collect(groupingBy(this::getName)).entrySet().stream();\r\n+  }\r\n+\r\n+  private String getName(Element procedure)\r\n+  {\r\n+    T annotation = procedure.getAnnotation(annotationType);\r\n+    Optional<String> customName = customNameExtractor.apply(annotation);\r\n+    return customName.orElse(defaultQualifiedName(procedure));\r\n+  }\r\n+\r\n+  private String defaultQualifiedName(Element procedure)\r\n+  {\r\n+    return String.format(\"%s.%s\", elements.getPackageOf(procedure).toString(), procedure.getSimpleName());\r\n+  }\r\n+\r\n+  private Stream<CompilationMessage> asErrors(Map.Entry<String, List<Element>> indexedProcedures)\r\n+  {\r\n+    String duplicatedName = indexedProcedures.getKey();\r\n+    return indexedProcedures.getValue().stream()\r\n+        .map(procedure -> asError(procedure, duplicatedName, indexedProcedures.getValue().size()));\r\n+  }\r\n+\r\n+  private CompilationMessage asError(Element procedure, String duplicatedName, int duplicateCount)\r\n+  {\r\n+    return new DuplicatedProcedureError(procedure, getAnnotationMirror(procedure),\r\n+        \"Procedure|function name <%s> is already defined %s times. It should be defined only once!\",\r\n+        duplicatedName, String.valueOf(duplicateCount));\r\n+  }\r\n+\r\n+  private AnnotationMirror getAnnotationMirror(Element procedure)\r\n+  {\r\n+    return procedure.getAnnotationMirrors().stream().filter(this::isProcedureAnnotationType).findFirst()\r\n+        .orElse(null);\r\n+  }\r\n+\r\n+  private boolean isProcedureAnnotationType(AnnotationMirror mirror)\r\n+  {\r\n+    return new AnnotationTypeVisitor(Procedure.class).visit(mirror.getAnnotationType().asElement());\r\n+  }\r\n \r\n }\r\n",
            "diff_size": 68
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "101",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 234).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4478/DuplicatedExtensionValidator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4478/DuplicatedExtensionValidator.java\nindex 238896358ff..a25077595ba 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4478/DuplicatedExtensionValidator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4478/DuplicatedExtensionValidator.java\n@@ -49,16 +49,13 @@ import static java.util.stream.Collectors.groupingBy;\n  *\r\n  * @param <T> annotation type\r\n  */\r\n-public class DuplicatedExtensionValidator<T extends Annotation>\r\n-        implements Function<Collection<Element>,Stream<CompilationMessage>>\r\n-{\r\n-\r\n+public class DuplicatedExtensionValidator<T extends Annotation> implements Function<Collection<Element>, Stream<CompilationMessage>>\r\n+{\n     private final Elements elements;\r\n     private final Class<T> annotationType;\r\n     private final Function<T,Optional<String>> customNameExtractor;\r\n \r\n-    public DuplicatedExtensionValidator( Elements elements, Class<T> annotationType,\r\n-            Function<T,Optional<String>> customNameExtractor )\r\n+    public DuplicatedExtensionValidator( Elements elements, Class<T> annotationType, Function<T,Optional<String>> customNameExtractor )\r\n     {\r\n         this.elements = elements;\r\n         this.annotationType = annotationType;\r\n@@ -73,8 +70,7 @@ public class DuplicatedExtensionValidator<T extends Annotation>\n \r\n     private Stream<CompilationMessage> findDuplicates( Collection<Element> visitedProcedures )\r\n     {\r\n-        return indexByName( visitedProcedures ).filter( index -> index.getValue().size() > 1 )\r\n-                .flatMap( this::asErrors );\r\n+        return indexByName( visitedProcedures ).filter( index -> index.getValue().size() > 1 ).flatMap( this::asErrors );\r\n     }\r\n \r\n     private Stream<Map.Entry<String,List<Element>>> indexByName( Collection<Element> visitedProcedures )\r\n@@ -97,26 +93,21 @@ public class DuplicatedExtensionValidator<T extends Annotation>\n     private Stream<CompilationMessage> asErrors( Map.Entry<String,List<Element>> indexedProcedures )\r\n     {\r\n         String duplicatedName = indexedProcedures.getKey();\r\n-        return indexedProcedures.getValue().stream()\r\n-                .map( procedure -> asError( procedure, duplicatedName, indexedProcedures.getValue().size() ) );\r\n+        return indexedProcedures.getValue().stream().map( procedure -> asError( procedure, duplicatedName, indexedProcedures.getValue().size() ) );\r\n     }\r\n \r\n     private CompilationMessage asError( Element procedure, String duplicatedName, int duplicateCount )\r\n     {\r\n-        return new DuplicatedProcedureError( procedure, getAnnotationMirror( procedure ),\r\n-                \"Procedure|function name <%s> is already defined %s times. It should be defined only once!\",\r\n-                duplicatedName, String.valueOf( duplicateCount ) );\r\n+        return new DuplicatedProcedureError( procedure, getAnnotationMirror( procedure ), \"Procedure|function name <%s> is already defined %s times. It should be defined only once!\", duplicatedName, String.valueOf( duplicateCount ) );\r\n     }\r\n \r\n     private AnnotationMirror getAnnotationMirror( Element procedure )\r\n     {\r\n-        return procedure.getAnnotationMirrors().stream().filter( this::isProcedureAnnotationType ).findFirst()\r\n-                .orElse( null );\r\n+        return procedure.getAnnotationMirrors().stream().filter( this::isProcedureAnnotationType ).findFirst().orElse( null );\r\n     }\r\n \r\n     private boolean isProcedureAnnotationType( AnnotationMirror mirror )\r\n     {\r\n         return new AnnotationTypeVisitor( Procedure.class ).visit( mirror.getAnnotationType().asElement() );\r\n-    }\r\n-\r\n-}\r\n+    }\n+    }\n\\ No newline at end of file\n",
            "diff_size": 18
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}