{
    "project_name": "junkdog-artemis-odb",
    "error_id": "14",
    "information": {
        "errors": [
            {
                "line": "8",
                "severity": "error",
                "message": "Line is longer than 105 characters (found 106).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": " * Fake type.\n *\n * Bit of a hack, we need this to refer to types that have not been generated yet, like SuperMapper and E.\n *\n * @todo is there an idiomatic solution?\n * @author Daan van Yperen",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/14/TypeDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/14/TypeDescriptor.java\nindex e1285ae25fc..967d5c25f4c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/14/TypeDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/intellij/14/TypeDescriptor.java\n@@ -4,11 +4,11 @@ import java.lang.reflect.Type;\n \n /**\n  * Fake type.\n- *\n+ * <p>\n  * Bit of a hack, we need this to refer to types that have not been generated yet, like SuperMapper and E.\n  *\n- * @todo is there an idiomatic solution?\n  * @author Daan van Yperen\n+ * @todo is there an idiomatic solution?\n  */\n public class TypeDescriptor implements Type {\n \n",
            "diff_size": 3
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/14/TypeDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/14/TypeDescriptor.java\nindex e1285ae25fc..e0eb1ce6aed 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/14/TypeDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/naturalize/14/TypeDescriptor.java\n@@ -11,15 +11,14 @@ import java.lang.reflect.Type;\n  * @author Daan van Yperen\n  */\n public class TypeDescriptor implements Type {\n-\n-    private String name;\n+\tprivate String name;\n \n     public TypeDescriptor(String name) {\n-        this.name = name;\n+\tthis.name = name;\n     }\n \n     @Override\n     public String toString() {\n-        return name;\n+\treturn name;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 5
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/14/TypeDescriptor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/14/TypeDescriptor.java\nindex e1285ae25fc..42389b3cecd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/errored/1/14/TypeDescriptor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/junkdog-artemis-odb/codebuff/14/TypeDescriptor.java\n@@ -10,16 +10,16 @@ import java.lang.reflect.Type;\n  * @todo is there an idiomatic solution?\n  * @author Daan van Yperen\n  */\n-public class TypeDescriptor implements Type {\n \n-    private String name;\n+public class TypeDescriptor implements Type {\n+ private String name;\n \n-    public TypeDescriptor(String name) {\n-        this.name = name;\n-    }\n+ public TypeDescriptor(String name) {\n+  this.name = name;\n+ }\n \n-    @Override\n-    public String toString() {\n-        return name;\n-    }\n-}\n+ @Override\n+ public String toString() {\n+  return name;\n+ }\n+}\n\\ No newline at end of file\n",
            "diff_size": 11
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "8",
                    "severity": "error",
                    "message": "Line is longer than 105 characters (found 106).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": null,
            "diff": null
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}