{
    "project_name": "CONNECT-Solution-CONNECT",
    "error_id": "2",
    "information": {
        "errors": [
            {
                "line": "27",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\npackage gov.hhs.fha.nhinc.docquery.xdsb.helper;\n\n/**\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/2/XDSbAdhocQueryResponseHelperImpl.java\nindex a9150ac0265..4349862f25f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler/2/XDSbAdhocQueryResponseHelperImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.xdsb.helper;\n \n /**\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/2/XDSbAdhocQueryResponseHelperImpl.java\nindex a9150ac0265..00722cc9be8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/intellij/2/XDSbAdhocQueryResponseHelperImpl.java\n@@ -24,12 +24,13 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.xdsb.helper;\n \n /**\n- *\n  * @author tjafri\n  */\n+\n import gov.hhs.fha.nhinc.docquery.xdsb.helper.XDSbConstants.ClassificationScheme;\n import gov.hhs.fha.nhinc.docquery.xdsb.helper.XDSbConstants.IdentificationScheme;\n import gov.hhs.fha.nhinc.docquery.xdsb.helper.XDSbConstants.ResponseSlotName;\n@@ -51,85 +52,85 @@ import org.apache.commons.lang.StringUtils;\n  */\n public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseHelper {\n \n-    @Override\n-    public String getSingleSlotValue(final ResponseSlotName slotName, final IdentifiableType identifiableType) {\n-        return getSingleSlotValue(slotName.toString(), identifiableType);\n-    }\n+  @Override\n+  public String getSingleSlotValue(final ResponseSlotName slotName, final IdentifiableType identifiableType) {\n+    return getSingleSlotValue(slotName.toString(), identifiableType);\n+  }\n \n-    @Override\n-    public String getSingleSlotValue(final String customSlotName, final IdentifiableType identifiableType) {\n-        if (identifiableType != null && identifiableType.getSlot() != null) {\n-            for (final SlotType1 s : identifiableType.getSlot()) {\n-                if (StringUtils.equalsIgnoreCase(customSlotName, s.getName()) && s.getValueList() != null) {\n-                    final ValueListType vlt = s.getValueList();\n-                    if (vlt.getValue() != null && !vlt.getValue().isEmpty()) {\n-                        return vlt.getValue().get(0);\n-                    }\n-                }\n-            }\n+  @Override\n+  public String getSingleSlotValue(final String customSlotName, final IdentifiableType identifiableType) {\n+    if (identifiableType != null && identifiableType.getSlot() != null) {\n+      for (final SlotType1 s : identifiableType.getSlot()) {\n+        if (StringUtils.equalsIgnoreCase(customSlotName, s.getName()) && s.getValueList() != null) {\n+          final ValueListType vlt = s.getValueList();\n+          if (vlt.getValue() != null && !vlt.getValue().isEmpty()) {\n+            return vlt.getValue().get(0);\n+          }\n         }\n-        return null;\n+      }\n     }\n+    return null;\n+  }\n \n-    @Override\n-    public String getStatus(final ExtrinsicObjectType extrinsicObject) {\n-        String status = null;\n-        if (extrinsicObject != null) {\n-            status = extrinsicObject.getStatus();\n-        }\n-        return status;\n+  @Override\n+  public String getStatus(final ExtrinsicObjectType extrinsicObject) {\n+    String status = null;\n+    if (extrinsicObject != null) {\n+      status = extrinsicObject.getStatus();\n     }\n+    return status;\n+  }\n \n-    @Override\n-    public String getTitle(final ExtrinsicObjectType extrinsicObject) {\n-        String title = null;\n-        if (extrinsicObject != null && extrinsicObject.getName() != null\n-            && extrinsicObject.getName().getLocalizedString() != null) {\n-            final List<LocalizedStringType> names = extrinsicObject.getName().getLocalizedString();\n-            if (CollectionUtils.isNotEmpty(names) && names.get(0) != null) {\n-                title = extrinsicObject.getName().getLocalizedString().get(0).getValue();\n-            }\n+  @Override\n+  public String getTitle(final ExtrinsicObjectType extrinsicObject) {\n+    String title = null;\n+    if (extrinsicObject != null && extrinsicObject.getName() != null\n+        && extrinsicObject.getName().getLocalizedString() != null) {\n+      final List<LocalizedStringType> names = extrinsicObject.getName().getLocalizedString();\n+      if (CollectionUtils.isNotEmpty(names) && names.get(0) != null) {\n+        title = extrinsicObject.getName().getLocalizedString().get(0).getValue();\n+      }\n \n-        }\n-        return title;\n     }\n+    return title;\n+  }\n \n-    @Override\n-    public String getClassificationValue(final ClassificationScheme classification,\n-        final ExtrinsicObjectType extrinsicObject) {\n-        final RegistryObjectType registryObjectType = getClassification(classification, extrinsicObject);\n-        if (registryObjectType != null && registryObjectType instanceof ClassificationType) {\n-            return ((ClassificationType) registryObjectType).getNodeRepresentation();\n-        }\n-        return null;\n+  @Override\n+  public String getClassificationValue(final ClassificationScheme classification,\n+                                       final ExtrinsicObjectType extrinsicObject) {\n+    final RegistryObjectType registryObjectType = getClassification(classification, extrinsicObject);\n+    if (registryObjectType != null && registryObjectType instanceof ClassificationType) {\n+      return ((ClassificationType) registryObjectType).getNodeRepresentation();\n     }\n+    return null;\n+  }\n \n-    @Override\n-    public String getExternalIdentifierValue(final IdentificationScheme idScheme,\n-        final ExtrinsicObjectType extrinsicObject) {\n-        String value = null;\n-        final List<ExternalIdentifierType> externalIds = extrinsicObject.getExternalIdentifier();\n-        for (final ExternalIdentifierType id : externalIds) {\n-            if (StringUtils.equalsIgnoreCase(idScheme.toString(), id.getIdentificationScheme())) {\n-                value = id.getValue();\n-            }\n-        }\n-        return value;\n+  @Override\n+  public String getExternalIdentifierValue(final IdentificationScheme idScheme,\n+                                           final ExtrinsicObjectType extrinsicObject) {\n+    String value = null;\n+    final List<ExternalIdentifierType> externalIds = extrinsicObject.getExternalIdentifier();\n+    for (final ExternalIdentifierType id : externalIds) {\n+      if (StringUtils.equalsIgnoreCase(idScheme.toString(), id.getIdentificationScheme())) {\n+        value = id.getValue();\n+      }\n     }\n+    return value;\n+  }\n \n-    @Override\n-    public RegistryObjectType getClassification(final ClassificationScheme classification,\n-        final ExtrinsicObjectType extrinsicObject) {\n-        RegistryObjectType registryObject = null;\n-        if (extrinsicObject != null) {\n-            final List<ClassificationType> classifications = extrinsicObject.getClassification();\n-            for (final ClassificationType c : classifications) {\n-                if (StringUtils.equalsIgnoreCase(c.getClassificationScheme(), classification.toString())) {\n-                    registryObject = c;\n-                }\n-            }\n+  @Override\n+  public RegistryObjectType getClassification(final ClassificationScheme classification,\n+                                              final ExtrinsicObjectType extrinsicObject) {\n+    RegistryObjectType registryObject = null;\n+    if (extrinsicObject != null) {\n+      final List<ClassificationType> classifications = extrinsicObject.getClassification();\n+      for (final ClassificationType c : classifications) {\n+        if (StringUtils.equalsIgnoreCase(c.getClassificationScheme(), classification.toString())) {\n+          registryObject = c;\n         }\n-        return registryObject;\n+      }\n     }\n+    return registryObject;\n+  }\n \n }\n",
            "diff_size": 80
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "88",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/2/XDSbAdhocQueryResponseHelperImpl.java\nindex a9150ac0265..23459a3e8e2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/naturalize/2/XDSbAdhocQueryResponseHelperImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.xdsb.helper;\n \n /**\n@@ -76,15 +77,15 @@ public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseH\n         String status = null;\n         if (extrinsicObject != null) {\n             status = extrinsicObject.getStatus();\n-        }\n+\n+    }\n         return status;\n     }\n \n     @Override\n     public String getTitle(final ExtrinsicObjectType extrinsicObject) {\n         String title = null;\n-        if (extrinsicObject != null && extrinsicObject.getName() != null\n-            && extrinsicObject.getName().getLocalizedString() != null) {\n+        if (extrinsicObject != null && extrinsicObject.getName() != null && extrinsicObject.getName().getLocalizedString() != null) {\n             final List<LocalizedStringType> names = extrinsicObject.getName().getLocalizedString();\n             if (CollectionUtils.isNotEmpty(names) && names.get(0) != null) {\n                 title = extrinsicObject.getName().getLocalizedString().get(0).getValue();\n@@ -100,14 +101,15 @@ public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseH\n         final RegistryObjectType registryObjectType = getClassification(classification, extrinsicObject);\n         if (registryObjectType != null && registryObjectType instanceof ClassificationType) {\n             return ((ClassificationType) registryObjectType).getNodeRepresentation();\n-        }\n+\n+    }\n         return null;\n     }\n \n     @Override\n     public String getExternalIdentifierValue(final IdentificationScheme idScheme,\n         final ExtrinsicObjectType extrinsicObject) {\n-        String value = null;\n+    String value = null;\n         final List<ExternalIdentifierType> externalIds = extrinsicObject.getExternalIdentifier();\n         for (final ExternalIdentifierType id : externalIds) {\n             if (StringUtils.equalsIgnoreCase(idScheme.toString(), id.getIdentificationScheme())) {\n@@ -120,7 +122,7 @@ public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseH\n     @Override\n     public RegistryObjectType getClassification(final ClassificationScheme classification,\n         final ExtrinsicObjectType extrinsicObject) {\n-        RegistryObjectType registryObject = null;\n+    RegistryObjectType registryObject = null;\n         if (extrinsicObject != null) {\n             final List<ClassificationType> classifications = extrinsicObject.getClassification();\n             for (final ClassificationType c : classifications) {\n@@ -132,4 +134,4 @@ public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseH\n         return registryObject;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 10
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "67",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "94",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 133).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "109",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 126).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "120",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 135).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "134",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/2/XDSbAdhocQueryResponseHelperImpl.java\nindex a9150ac0265..038ef48bfaf 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/codebuff/2/XDSbAdhocQueryResponseHelperImpl.java\n@@ -30,6 +30,7 @@ package gov.hhs.fha.nhinc.docquery.xdsb.helper;\n  *\n  * @author tjafri\n  */\n+\n import gov.hhs.fha.nhinc.docquery.xdsb.helper.XDSbConstants.ClassificationScheme;\n import gov.hhs.fha.nhinc.docquery.xdsb.helper.XDSbConstants.IdentificationScheme;\n import gov.hhs.fha.nhinc.docquery.xdsb.helper.XDSbConstants.ResponseSlotName;\n@@ -49,20 +50,25 @@ import org.apache.commons.lang.StringUtils;\n  * @author tjafri\n  *\n  */\n+\n+\n public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseHelper {\n \n+\n     @Override\n     public String getSingleSlotValue(final ResponseSlotName slotName, final IdentifiableType identifiableType) {\n         return getSingleSlotValue(slotName.toString(), identifiableType);\n     }\n \n+\n     @Override\n     public String getSingleSlotValue(final String customSlotName, final IdentifiableType identifiableType) {\n         if (identifiableType != null && identifiableType.getSlot() != null) {\n-            for (final SlotType1 s : identifiableType.getSlot()) {\n+            for ( final SlotType1 s : identifiableType.getSlot()) {\n                 if (StringUtils.equalsIgnoreCase(customSlotName, s.getName()) && s.getValueList() != null) {\n                     final ValueListType vlt = s.getValueList();\n-                    if (vlt.getValue() != null && !vlt.getValue().isEmpty()) {\n+                    if (vlt.getValue() != null && !\n+                                                      vlt.getValue().isEmpty()) {\n                         return vlt.getValue().get(0);\n                     }\n                 }\n@@ -71,6 +77,7 @@ public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseH\n         return null;\n     }\n \n+\n     @Override\n     public String getStatus(final ExtrinsicObjectType extrinsicObject) {\n         String status = null;\n@@ -80,36 +87,37 @@ public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseH\n         return status;\n     }\n \n+\n     @Override\n     public String getTitle(final ExtrinsicObjectType extrinsicObject) {\n         String title = null;\n-        if (extrinsicObject != null && extrinsicObject.getName() != null\n-            && extrinsicObject.getName().getLocalizedString() != null) {\n+        if (extrinsicObject != null && extrinsicObject.getName() != null && extrinsicObject.getName().getLocalizedString() != null) {\n             final List<LocalizedStringType> names = extrinsicObject.getName().getLocalizedString();\n             if (CollectionUtils.isNotEmpty(names) && names.get(0) != null) {\n                 title = extrinsicObject.getName().getLocalizedString().get(0).getValue();\n             }\n-\n         }\n         return title;\n     }\n \n+\n     @Override\n-    public String getClassificationValue(final ClassificationScheme classification,\n-        final ExtrinsicObjectType extrinsicObject) {\n+    public String getClassificationValue(final ClassificationScheme classification, final ExtrinsicObjectType extrinsicObject) {\n         final RegistryObjectType registryObjectType = getClassification(classification, extrinsicObject);\n         if (registryObjectType != null && registryObjectType instanceof ClassificationType) {\n-            return ((ClassificationType) registryObjectType).getNodeRepresentation();\n+            return ((ClassificationType)\n+                        registryObjectType ).getNodeRepresentation();\n         }\n         return null;\n     }\n \n+\n     @Override\n-    public String getExternalIdentifierValue(final IdentificationScheme idScheme,\n-        final ExtrinsicObjectType extrinsicObject) {\n+    public String getExternalIdentifierValue(final IdentificationScheme idScheme, final ExtrinsicObjectType extrinsicObject) {\n         String value = null;\n+\n         final List<ExternalIdentifierType> externalIds = extrinsicObject.getExternalIdentifier();\n-        for (final ExternalIdentifierType id : externalIds) {\n+        for ( final ExternalIdentifierType id : externalIds) {\n             if (StringUtils.equalsIgnoreCase(idScheme.toString(), id.getIdentificationScheme())) {\n                 value = id.getValue();\n             }\n@@ -117,13 +125,13 @@ public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseH\n         return value;\n     }\n \n+\n     @Override\n-    public RegistryObjectType getClassification(final ClassificationScheme classification,\n-        final ExtrinsicObjectType extrinsicObject) {\n+    public RegistryObjectType getClassification(final ClassificationScheme classification, final ExtrinsicObjectType extrinsicObject) {\n         RegistryObjectType registryObject = null;\n         if (extrinsicObject != null) {\n             final List<ClassificationType> classifications = extrinsicObject.getClassification();\n-            for (final ClassificationType c : classifications) {\n+            for ( final ClassificationType c : classifications) {\n                 if (StringUtils.equalsIgnoreCase(c.getClassificationScheme(), classification.toString())) {\n                     registryObject = c;\n                 }\n@@ -132,4 +140,4 @@ public class XDSbAdhocQueryResponseHelperImpl implements XDSbAdhocQueryResponseH\n         return registryObject;\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 28
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "27",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/2/XDSbAdhocQueryResponseHelperImpl.java\nindex a9150ac0265..4349862f25f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/errored/1/2/XDSbAdhocQueryResponseHelperImpl.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/CONNECT-Solution-CONNECT/styler_three_grams/2/XDSbAdhocQueryResponseHelperImpl.java\n@@ -24,6 +24,7 @@\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+\n package gov.hhs.fha.nhinc.docquery.xdsb.helper;\n \n /**\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_random"
    ]
}