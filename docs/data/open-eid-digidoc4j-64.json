{
    "project_name": "open-eid-digidoc4j",
    "error_id": "64",
    "information": {
        "errors": [
            {
                "line": "152",
                "severity": "error",
                "message": "Line is longer than 120 characters (found 122).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "  }\n\n  private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n    AsicSignatureParser signatureParser = new AsicSignatureParser(detachedContents, getConfiguration());\n    XadesSignature xadesSignature = signatureParser.parse(signatureDocument);\n    return new XadesSignatureWrapper(xadesSignature, signatureDocument);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/64/AsicSignatureBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/64/AsicSignatureBuilder.java\nindex 7b82e852122..20e338d1efe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/64/AsicSignatureBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/64/AsicSignatureBuilder.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic;\n \n@@ -134,7 +134,7 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     }\n     List<DSSDocument> detachedContents = detachedContentCreator.getDetachedContentList();\n     XadesSignatureWrapper signatureWrapper = parseSignatureWrapper(signedDocument, detachedContents);\n-    \n+\n     AsicSignature signature;\n     if (SignatureContainerMatcherValidator.isBDocOnlySignature(signatureParameters.getSignatureProfile())) {\n       BDocSignatureOpener signatureOpener = new BDocSignatureOpener(configuration);\n@@ -149,7 +149,8 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     return signature;\n   }\n \n-  private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument, List<DSSDocument> detachedContents) {\n+  private XadesSignatureWrapper parseSignatureWrapper(DSSDocument signatureDocument,\n+                                                      List<DSSDocument> detachedContents) {\n     AsicSignatureParser signatureParser = new AsicSignatureParser(detachedContents, getConfiguration());\n     XadesSignature xadesSignature = signatureParser.parse(signatureDocument);\n     return new XadesSignatureWrapper(xadesSignature, signatureDocument);\n@@ -312,14 +313,18 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n \n       SignerLocation signerLocation = new SignerLocation();\n \n-      if (!isEmpty(signatureParameters.getCity()))\n+      if (!isEmpty(signatureParameters.getCity())) {\n         signerLocation.setLocality(signatureParameters.getCity());\n-      if (!isEmpty(signatureParameters.getStateOrProvince()))\n+      }\n+      if (!isEmpty(signatureParameters.getStateOrProvince())) {\n         signerLocation.setStateOrProvince(signatureParameters.getStateOrProvince());\n-      if (!isEmpty(signatureParameters.getPostalCode()))\n+      }\n+      if (!isEmpty(signatureParameters.getPostalCode())) {\n         signerLocation.setPostalCode(signatureParameters.getPostalCode());\n-      if (!isEmpty(signatureParameters.getCountry()))\n+      }\n+      if (!isEmpty(signatureParameters.getCountry())) {\n         signerLocation.setCountry(signatureParameters.getCountry());\n+      }\n       facade.setSignerLocation(signerLocation);\n     }\n     facade.setSignerRoles(signerRoles);\n",
            "diff_size": 19
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "151",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/64/AsicSignatureBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/64/AsicSignatureBuilder.java\nindex 7b82e852122..49b9ffd19d1 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/64/AsicSignatureBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/64/AsicSignatureBuilder.java\n@@ -134,8 +134,7 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     }\n     List<DSSDocument> detachedContents = detachedContentCreator.getDetachedContentList();\n     XadesSignatureWrapper signatureWrapper = parseSignatureWrapper(signedDocument, detachedContents);\n-    \n-    AsicSignature signature;\n+AsicSignature signature;\n     if (SignatureContainerMatcherValidator.isBDocOnlySignature(signatureParameters.getSignatureProfile())) {\n       BDocSignatureOpener signatureOpener = new BDocSignatureOpener(configuration);\n       signature = signatureOpener.open(signatureWrapper);\n@@ -378,4 +377,4 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     return configuration.getTspSource();\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "80",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 143).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "104",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 161).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "108",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 151).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "148",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "214",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 206).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "218",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 245).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/64/AsicSignatureBuilder.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/64/AsicSignatureBuilder.java\nindex 7b82e852122..d9b2f99d205 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/64/AsicSignatureBuilder.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/64/AsicSignatureBuilder.java\n@@ -43,12 +43,10 @@ import org.digidoc4j.impl.asic.xades.XadesSigningDssFacade;\n import org.digidoc4j.utils.Helper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import java.security.cert.X509Certificate;\n import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n-\n import static eu.europa.esig.dss.SignatureLevel.XAdES_BASELINE_B;\n import static eu.europa.esig.dss.SignatureLevel.XAdES_BASELINE_LT;\n import static eu.europa.esig.dss.SignatureLevel.XAdES_BASELINE_LTA;\n@@ -57,10 +55,13 @@ import static org.apache.commons.lang3.StringUtils.isEmpty;\n /**\n  * Signature builder for Asic container.\n  */\n+\n+\n public class AsicSignatureBuilder extends SignatureBuilder implements SignatureFinalizer {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicSignatureBuilder.class);\n   private static final int hexMaxlen = 10;\n+\n   protected transient XadesSigningDssFacade facade;\n   private Date signingDate;\n   private boolean isLTorLTAprofile = false;\n@@ -76,8 +77,7 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n       signatureValue = signatureToken.sign(signatureParameters.getDigestAlgorithm(), dataToSign);\n       result = finalizeSignature(signatureValue);\n     } catch (TechnicalException e) {\n-      logger.warn(\"PROBLEM with signing: \"\n-          + Helper.bytesToHex(dataToSign, hexMaxlen) + \" -> \" + Helper.bytesToHex(signatureValue, hexMaxlen));\n+      logger.warn(\"PROBLEM with signing: \" + Helper.bytesToHex(dataToSign, hexMaxlen) + \" -> \" + Helper.bytesToHex(signatureValue, hexMaxlen));\n     }\n     return result;\n   }\n@@ -101,15 +101,11 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n \n   @Override\n   public Signature finalizeSignature(byte[] signatureValue) {\n-    if ((signatureParameters.getEncryptionAlgorithm() == EncryptionAlgorithm.ECDSA || isEcdsaCertificate())\n-        && DSSSignatureUtils.isAsn1Encoded(signatureValue)) {\n-      logger.debug(\"Finalizing signature ASN1: \" + Helper.bytesToHex(signatureValue, hexMaxlen) + \" [\"\n-          + String.valueOf(signatureValue.length) + \"]\");\n-      signatureValue = DSSSignatureUtils.convertToXmlDSig(eu.europa.esig.dss.EncryptionAlgorithm.ECDSA,\n-          signatureValue);\n+    if ((signatureParameters.getEncryptionAlgorithm() == EncryptionAlgorithm.ECDSA || isEcdsaCertificate()) && DSSSignatureUtils.isAsn1Encoded(signatureValue)) {\n+      logger.debug(\"Finalizing signature ASN1: \" + Helper.bytesToHex(signatureValue, hexMaxlen) + \" [\" + String.valueOf(signatureValue.length) + \"]\");\n+      signatureValue = DSSSignatureUtils.convertToXmlDSig(eu.europa.esig.dss.EncryptionAlgorithm.ECDSA, signatureValue);\n     }\n-    logger.debug(\"Finalizing signature XmlDSig: \" + Helper.bytesToHex(signatureValue, hexMaxlen) + \" [\"\n-        + String.valueOf(signatureValue.length) + \"]\");\n+    logger.debug(\"Finalizing signature XmlDSig: \" + Helper.bytesToHex(signatureValue, hexMaxlen) + \" [\" + String.valueOf(signatureValue.length) + \"]\");\n     populateParametersForFinalizingSignature(signatureValue);\n     validateSignatureCompatibilityWithContainer();\n     Collection<DataFile> dataFilesToSign = getDataFiles();\n@@ -120,6 +116,7 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n \n   protected void validateSignatureCompatibilityWithContainer() {\n     // Do nothing\n+\n   }\n \n   protected Signature createSignature(DSSDocument signedDocument) {\n@@ -134,7 +131,6 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     }\n     List<DSSDocument> detachedContents = detachedContentCreator.getDetachedContentList();\n     XadesSignatureWrapper signatureWrapper = parseSignatureWrapper(signedDocument, detachedContents);\n-    \n     AsicSignature signature;\n     if (SignatureContainerMatcherValidator.isBDocOnlySignature(signatureParameters.getSignatureProfile())) {\n       BDocSignatureOpener signatureOpener = new BDocSignatureOpener(configuration);\n@@ -215,17 +211,11 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n   }\n \n   protected boolean isBaselineSignatureProfile() {\n-    return signatureParameters.getSignatureProfile() != null\n-        && (SignatureProfile.B_BES == signatureParameters.getSignatureProfile()\n-        || SignatureProfile.B_EPES == signatureParameters.getSignatureProfile());\n+    return signatureParameters.getSignatureProfile() != null && (SignatureProfile.B_BES == signatureParameters.getSignatureProfile() || SignatureProfile.B_EPES == signatureParameters.getSignatureProfile());\n   }\n \n   protected void setOcspSource(byte[] signatureValueBytes) {\n-    SKOnlineOCSPSource ocspSource = (SKOnlineOCSPSource) OCSPSourceBuilder.anOcspSource().\n-        withSignatureProfile(this.signatureParameters.getSignatureProfile()).\n-        withSignatureValue(signatureValueBytes).\n-        withConfiguration(getConfiguration()).\n-        build();\n+    SKOnlineOCSPSource ocspSource = (SKOnlineOCSPSource) OCSPSourceBuilder.anOcspSource().withSignatureProfile(this.signatureParameters.getSignatureProfile()).withSignatureValue(signatureValueBytes).withConfiguration(getConfiguration()).build();\n     this.facade.setOcspSource(ocspSource);\n   }\n \n@@ -307,11 +297,8 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     logger.debug(\"Adding signer information\");\n     List<String> signerRoles = signatureParameters.getRoles();\n     if (!(isEmpty(signatureParameters.getCity()) && isEmpty(signatureParameters.getStateOrProvince())\n-        && isEmpty(signatureParameters.getPostalCode())\n-        && isEmpty(signatureParameters.getCountry()))) {\n-\n+        && isEmpty(signatureParameters.getPostalCode()) && isEmpty(signatureParameters.getCountry()))) {\n       SignerLocation signerLocation = new SignerLocation();\n-\n       if (!isEmpty(signatureParameters.getCity()))\n         signerLocation.setLocality(signatureParameters.getCity());\n       if (!isEmpty(signatureParameters.getStateOrProvince()))\n@@ -377,5 +364,4 @@ public class AsicSignatureBuilder extends SignatureBuilder implements SignatureF\n     }\n     return configuration.getTspSource();\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 31
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "152",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 122).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}