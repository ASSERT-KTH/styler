{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4476",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "61",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "62",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "79",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "104",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "106",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "109",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "15",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "142",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "144",
                    "column": "92",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "146",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "154",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "69",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "60",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "178",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "185",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "75",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "69",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "200",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "201",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "42",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "205",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "115",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4476/RecoveryProtocol.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4476/RecoveryProtocol.java\nindex a6057b666dc..312ff9d7d98 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4476/RecoveryProtocol.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4476/RecoveryProtocol.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.consensus.log.segmented;\n \n import java.io.File;\n@@ -48,167 +49,165 @@ import static java.util.Collections.emptyList;\n  */\n class RecoveryProtocol\n {\n-    private static final SegmentHeader.Marshal headerMarshal = new SegmentHeader.Marshal();\n-\n-    private final FileSystemAbstraction fileSystem;\n-    private final FileNames fileNames;\n-    private final ChannelMarshal<ReplicatedContent> contentMarshal;\n-    private final LogProvider logProvider;\n-    private final Log log;\n-    private ReaderPool readerPool;\n-\n-    RecoveryProtocol( FileSystemAbstraction fileSystem, FileNames fileNames, ReaderPool readerPool,\n-            ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider )\n+  private static final SegmentHeader.Marshal headerMarshal = new SegmentHeader.Marshal();\n+\n+  private final FileSystemAbstraction fileSystem;\n+  private final FileNames fileNames;\n+  private final ChannelMarshal<ReplicatedContent> contentMarshal;\n+  private final LogProvider logProvider;\n+  private final Log log;\n+  private ReaderPool readerPool;\n+\n+  RecoveryProtocol(FileSystemAbstraction fileSystem, FileNames fileNames, ReaderPool readerPool,\n+                   ChannelMarshal<ReplicatedContent> contentMarshal, LogProvider logProvider)\n+  {\n+    this.fileSystem = fileSystem;\n+    this.fileNames = fileNames;\n+    this.readerPool = readerPool;\n+    this.contentMarshal = contentMarshal;\n+    this.logProvider = logProvider;\n+    this.log = logProvider.getLog(getClass());\n+  }\n+\n+  State run() throws IOException, DamagedLogStorageException, DisposedException\n+  {\n+    State state = new State();\n+    SortedMap<Long, File> files = fileNames.getAllFiles(fileSystem, log);\n+\n+    if (files.entrySet().isEmpty())\n     {\n-        this.fileSystem = fileSystem;\n-        this.fileNames = fileNames;\n-        this.readerPool = readerPool;\n-        this.contentMarshal = contentMarshal;\n-        this.logProvider = logProvider;\n-        this.log = logProvider.getLog( getClass() );\n+      state.segments = new Segments(fileSystem, fileNames, readerPool, emptyList(), contentMarshal, logProvider, -1);\n+      state.segments.rotate(-1, -1, -1);\n+      state.terms = new Terms(-1, -1);\n+      return state;\n     }\n \n-    State run() throws IOException, DamagedLogStorageException, DisposedException\n-    {\n-        State state = new State();\n-        SortedMap<Long,File> files = fileNames.getAllFiles( fileSystem, log );\n-\n-        if ( files.entrySet().isEmpty() )\n-        {\n-            state.segments = new Segments( fileSystem, fileNames, readerPool, emptyList(), contentMarshal, logProvider, -1 );\n-            state.segments.rotate( -1, -1, -1 );\n-            state.terms = new Terms( -1, -1 );\n-            return state;\n-        }\n-\n-        List<SegmentFile> segmentFiles = new ArrayList<>();\n-        SegmentFile segment = null;\n+    List<SegmentFile> segmentFiles = new ArrayList<>();\n+    SegmentFile segment = null;\n \n-        long expectedVersion = files.firstKey();\n-        boolean mustRecoverLastHeader = false;\n-        boolean skip = true; // the first file is treated the same as a skip\n+    long expectedVersion = files.firstKey();\n+    boolean mustRecoverLastHeader = false;\n+    boolean skip = true; // the first file is treated the same as a skip\n \n-        for ( Map.Entry<Long,File> entry : files.entrySet() )\n+    for (Map.Entry<Long, File> entry : files.entrySet())\n+    {\n+      long fileNameVersion = entry.getKey();\n+      File file = entry.getValue();\n+      SegmentHeader header;\n+\n+      checkVersionSequence(fileNameVersion, expectedVersion);\n+\n+      try\n+      {\n+        header = loadHeader(fileSystem, file);\n+        checkVersionMatches(header.version(), fileNameVersion);\n+      } catch (EndOfStreamException e)\n+      {\n+        if (files.lastKey() != fileNameVersion)\n+        {\n+          throw new DamagedLogStorageException(e, \"Intermediate file with incomplete or no header found: %s\", file);\n+        } else if (files.size() == 1)\n         {\n-            long fileNameVersion = entry.getKey();\n-            File file = entry.getValue();\n-            SegmentHeader header;\n-\n-            checkVersionSequence( fileNameVersion, expectedVersion );\n-\n-            try\n-            {\n-                header = loadHeader( fileSystem, file );\n-                checkVersionMatches( header.version(), fileNameVersion );\n-            }\n-            catch ( EndOfStreamException e )\n-            {\n-                if ( files.lastKey() != fileNameVersion )\n-                {\n-                    throw new DamagedLogStorageException( e, \"Intermediate file with incomplete or no header found: %s\", file );\n-                }\n-                else if ( files.size() == 1 )\n-                {\n-                    throw new DamagedLogStorageException( e, \"Single file with incomplete or no header found: %s\", file );\n-                }\n-\n-                /* Last file header must be recovered by scanning next-to-last file and writing a new header based on that. */\n-                mustRecoverLastHeader = true;\n-                break;\n-            }\n-\n-            segment = new SegmentFile( fileSystem, file, readerPool, fileNameVersion, contentMarshal, logProvider, header );\n-            segmentFiles.add( segment );\n-\n-            if ( segment.header().prevIndex() != segment.header().prevFileLastIndex() )\n-            {\n-                log.info( format( \"Skipping from index %d to %d.\", segment.header().prevFileLastIndex(),\n-                        segment.header().prevIndex() + 1 ) );\n-                skip = true;\n-            }\n-\n-            if ( skip )\n-            {\n-                state.prevIndex = segment.header().prevIndex();\n-                state.prevTerm = segment.header().prevTerm();\n-                skip = false;\n-            }\n-\n-            expectedVersion++;\n+          throw new DamagedLogStorageException(e, \"Single file with incomplete or no header found: %s\", file);\n         }\n \n-        assert segment != null;\n+        /* Last file header must be recovered by scanning next-to-last file and writing a new header based on that. */\n+        mustRecoverLastHeader = true;\n+        break;\n+      }\n+\n+      segment = new SegmentFile(fileSystem, file, readerPool, fileNameVersion, contentMarshal, logProvider, header);\n+      segmentFiles.add(segment);\n+\n+      if (segment.header().prevIndex() != segment.header().prevFileLastIndex())\n+      {\n+        log.info(format(\"Skipping from index %d to %d.\", segment.header().prevFileLastIndex(),\n+            segment.header().prevIndex() + 1));\n+        skip = true;\n+      }\n+\n+      if (skip)\n+      {\n+        state.prevIndex = segment.header().prevIndex();\n+        state.prevTerm = segment.header().prevTerm();\n+        skip = false;\n+      }\n+\n+      expectedVersion++;\n+    }\n \n-        state.appendIndex = segment.header().prevIndex();\n-        state.terms = new Terms( segment.header().prevIndex(), segment.header().prevTerm() );\n+    assert segment != null;\n \n-        try ( IOCursor<EntryRecord> cursor = segment.getCursor( segment.header().prevIndex() + 1 ) )\n-        {\n-            while ( cursor.next() )\n-            {\n-                EntryRecord entry = cursor.get();\n-                state.appendIndex = entry.logIndex();\n-                state.terms.append( state.appendIndex, entry.logEntry().term() );\n-            }\n-        }\n-\n-        if ( mustRecoverLastHeader )\n-        {\n-            SegmentHeader header = new SegmentHeader( state.appendIndex, expectedVersion, state.appendIndex, state.terms.latest() );\n-            log.warn( \"Recovering last file based on next-to-last file. \" + header );\n+    state.appendIndex = segment.header().prevIndex();\n+    state.terms = new Terms(segment.header().prevIndex(), segment.header().prevTerm());\n \n-            File file = fileNames.getForVersion( expectedVersion );\n-            writeHeader( fileSystem, file, header );\n+    try (IOCursor<EntryRecord> cursor = segment.getCursor(segment.header().prevIndex() + 1))\n+    {\n+      while (cursor.next())\n+      {\n+        EntryRecord entry = cursor.get();\n+        state.appendIndex = entry.logIndex();\n+        state.terms.append(state.appendIndex, entry.logEntry().term());\n+      }\n+    }\n \n-            segment = new SegmentFile( fileSystem, file, readerPool, expectedVersion, contentMarshal, logProvider, header );\n-            segmentFiles.add( segment );\n-        }\n+    if (mustRecoverLastHeader)\n+    {\n+      SegmentHeader header = new SegmentHeader(state.appendIndex, expectedVersion, state.appendIndex, state.terms.latest());\n+      log.warn(\"Recovering last file based on next-to-last file. \" + header);\n \n-        state.segments = new Segments( fileSystem, fileNames, readerPool, segmentFiles, contentMarshal, logProvider,\n-                segment.header().version() );\n+      File file = fileNames.getForVersion(expectedVersion);\n+      writeHeader(fileSystem, file, header);\n \n-        return state;\n+      segment = new SegmentFile(fileSystem, file, readerPool, expectedVersion, contentMarshal, logProvider, header);\n+      segmentFiles.add(segment);\n     }\n \n-    private static SegmentHeader loadHeader(\n-            FileSystemAbstraction fileSystem,\n-            File file ) throws IOException, EndOfStreamException\n+    state.segments = new Segments(fileSystem, fileNames, readerPool, segmentFiles, contentMarshal, logProvider,\n+        segment.header().version());\n+\n+    return state;\n+  }\n+\n+  private static SegmentHeader loadHeader(\n+      FileSystemAbstraction fileSystem,\n+      File file) throws IOException, EndOfStreamException\n+  {\n+    try (StoreChannel channel = fileSystem.open(file, OpenMode.READ))\n     {\n-        try ( StoreChannel channel = fileSystem.open( file, OpenMode.READ ) )\n-        {\n-            return headerMarshal.unmarshal( new ReadAheadChannel<>( channel, SegmentHeader.SIZE ) );\n-        }\n+      return headerMarshal.unmarshal(new ReadAheadChannel<>(channel, SegmentHeader.SIZE));\n     }\n-\n-    private static void writeHeader(\n-            FileSystemAbstraction fileSystem,\n-            File file,\n-            SegmentHeader header ) throws IOException\n+  }\n+\n+  private static void writeHeader(\n+      FileSystemAbstraction fileSystem,\n+      File file,\n+      SegmentHeader header) throws IOException\n+  {\n+    try (StoreChannel channel = fileSystem.open(file, OpenMode.READ_WRITE))\n     {\n-        try ( StoreChannel channel = fileSystem.open( file, OpenMode.READ_WRITE ) )\n-        {\n-            channel.position( 0 );\n-            PhysicalFlushableChannel writer = new PhysicalFlushableChannel( channel, SegmentHeader.SIZE );\n-            headerMarshal.marshal( header, writer );\n-            writer.prepareForFlush().flush();\n-        }\n+      channel.position(0);\n+      PhysicalFlushableChannel writer = new PhysicalFlushableChannel(channel, SegmentHeader.SIZE);\n+      headerMarshal.marshal(header, writer);\n+      writer.prepareForFlush().flush();\n     }\n+  }\n \n-    private static void checkVersionSequence( long fileNameVersion, long expectedVersion ) throws DamagedLogStorageException\n+  private static void checkVersionSequence(long fileNameVersion, long expectedVersion) throws DamagedLogStorageException\n+  {\n+    if (fileNameVersion != expectedVersion)\n     {\n-        if ( fileNameVersion != expectedVersion )\n-        {\n-            throw new DamagedLogStorageException( \"File versions not strictly monotonic. Expected: %d but found: %d\",\n-                    expectedVersion, fileNameVersion );\n-        }\n+      throw new DamagedLogStorageException(\"File versions not strictly monotonic. Expected: %d but found: %d\",\n+          expectedVersion, fileNameVersion);\n     }\n+  }\n \n-    private static void checkVersionMatches( long headerVersion, long fileNameVersion ) throws DamagedLogStorageException\n+  private static void checkVersionMatches(long headerVersion, long fileNameVersion) throws DamagedLogStorageException\n+  {\n+    if (headerVersion != fileNameVersion)\n     {\n-        if ( headerVersion != fileNameVersion )\n-        {\n-            throw new DamagedLogStorageException(\n-                    \"File version does not match header version. Expected: %d but found: %d\", headerVersion, fileNameVersion );\n-        }\n+      throw new DamagedLogStorageException(\n+          \"File version does not match header version. Expected: %d but found: %d\", headerVersion, fileNameVersion);\n     }\n+  }\n }\n",
            "diff_size": 220
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}