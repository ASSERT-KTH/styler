{
    "project_name": "codefollower-H2-Research",
    "error_id": "299",
    "information": {
        "errors": [
            {
                "line": "134",
                "column": "9",
                "severity": "warning",
                "message": "'}' at column 9 should be alone on a line.",
                "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
            }
        ]
    },
    "source_code": "        if (section.startsWith(\"Commands\")) {\n            page = \"commands.html\";\n        } if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n            page = \"datatypes.html\";\n        } else if (section.startsWith(\"Functions\")) {\n            page = \"functions.html\";",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/299/BnfSyntax.java\nindex 478d5169d52..5729cde5475 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler/299/BnfSyntax.java\n@@ -131,7 +131,8 @@ public class BnfSyntax implements BnfVisitor {\n         String section = found.getSection();\n         if (section.startsWith(\"Commands\")) {\n             page = \"commands.html\";\n-        } if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n+        }\n+        if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n             page = \"datatypes.html\";\n         } else if (section.startsWith(\"Functions\")) {\n             page = \"functions.html\";\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/299/BnfSyntax.java\nindex 478d5169d52..b4e0838d63b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/intellij/299/BnfSyntax.java\n@@ -3,11 +3,13 @@\n  * and the EPL 1.0 (https://h2database.com/html/license.html).\n  * Initial Developer: H2 Group\n  */\n+\n package org.h2.build.doc;\n \n import java.util.ArrayDeque;\n import java.util.ArrayList;\n import java.util.StringTokenizer;\n+\n import org.h2.bnf.Bnf;\n import org.h2.bnf.BnfVisitor;\n import org.h2.bnf.Rule;\n@@ -20,160 +22,161 @@ import org.h2.util.StringUtils;\n  */\n public class BnfSyntax implements BnfVisitor {\n \n-    private String html;\n+  private String html;\n \n-    /**\n-     * Get the HTML syntax for the given syntax.\n-     *\n-     * @param bnf the BNF\n-     * @param syntaxLines the syntax\n-     * @return the HTML\n-     */\n-    public String getHtml(Bnf bnf, String syntaxLines) {\n-        syntaxLines = StringUtils.replaceAll(syntaxLines, \"\\n    \", \"\\n\");\n-        StringTokenizer tokenizer = Bnf.getTokenizer(syntaxLines);\n-        StringBuilder buff = new StringBuilder();\n-        ArrayDeque<Character> deque = new ArrayDeque<>();\n-        boolean extension = false;\n-        while (tokenizer.hasMoreTokens()) {\n-            String s = tokenizer.nextToken();\n-            if (s.equals(\"@c@\")) {\n-                if (!extension) {\n-                    extension = true;\n-                    buff.append(\"<span class=\\\"ruleCompat\\\">\");\n-                }\n-                s = skipAfterExtensionStart(tokenizer, buff);\n-            } else if (s.equals(\"@h2@\")) {\n-                if (!extension) {\n-                    extension = true;\n-                    buff.append(\"<span class=\\\"ruleH2\\\">\");\n-                }\n-                s = skipAfterExtensionStart(tokenizer, buff);\n-            }\n-            if (extension) {\n-                if (s.length() == 1) {\n-                    char c = s.charAt(0);\n-                    switch (c) {\n-                    case '[':\n-                        deque.addLast(']');\n-                        break;\n-                    case '{':\n-                        deque.addLast('}');\n-                        break;\n-                    case ']':\n-                    case '}':\n-                        char c2 = deque.removeLast();\n-                        if (c != c2) {\n-                            throw new AssertionError(\"Expected \" + c2 + \" got \" + c);\n-                        }\n-                        break;\n-                    default:\n-                        if (deque.isEmpty()) {\n-                            deque.add('*');\n-                        }\n-                    }\n-                } else if (deque.isEmpty()) {\n-                    deque.add('*');\n-                }\n-            }\n-            if (s.length() == 1 || StringUtils.toUpperEnglish(s).equals(s)) {\n-                buff.append(StringUtils.xmlText(s));\n-                if (extension && deque.isEmpty()) {\n-                    extension = false;\n-                    buff.append(\"</span>\");\n-                }\n-                continue;\n-            }\n-            buff.append(getLink(bnf, s));\n+  /**\n+   * Get the HTML syntax for the given syntax.\n+   *\n+   * @param bnf         the BNF\n+   * @param syntaxLines the syntax\n+   * @return the HTML\n+   */\n+  public String getHtml(Bnf bnf, String syntaxLines) {\n+    syntaxLines = StringUtils.replaceAll(syntaxLines, \"\\n    \", \"\\n\");\n+    StringTokenizer tokenizer = Bnf.getTokenizer(syntaxLines);\n+    StringBuilder buff = new StringBuilder();\n+    ArrayDeque<Character> deque = new ArrayDeque<>();\n+    boolean extension = false;\n+    while (tokenizer.hasMoreTokens()) {\n+      String s = tokenizer.nextToken();\n+      if (s.equals(\"@c@\")) {\n+        if (!extension) {\n+          extension = true;\n+          buff.append(\"<span class=\\\"ruleCompat\\\">\");\n         }\n-        if (extension) {\n-            if (deque.size() != 1 || deque.getLast() != '*') {\n-                throw new AssertionError(\"Expected \" + deque.getLast() + \" got end of data\");\n-            }\n-            buff.append(\"</span>\");\n+        s = skipAfterExtensionStart(tokenizer, buff);\n+      } else if (s.equals(\"@h2@\")) {\n+        if (!extension) {\n+          extension = true;\n+          buff.append(\"<span class=\\\"ruleH2\\\">\");\n         }\n-        String s = buff.toString();\n-        // ensure it works within XHTML comments\n-        s = StringUtils.replaceAll(s, \"--\", \"&#45;-\");\n-        return s;\n-    }\n-\n-    private static String skipAfterExtensionStart(StringTokenizer tokenizer, StringBuilder buff) {\n-        String s;\n-        do {\n-            s = tokenizer.nextToken();\n-        } while (s.equals(\" \"));\n-        return s;\n-    }\n-\n-    /**\n-     * Get the HTML link to the given token.\n-     *\n-     * @param bnf the BNF\n-     * @param token the token\n-     * @return the HTML link\n-     */\n-    String getLink(Bnf bnf, String token) {\n-        RuleHead found = null;\n-        String key = Bnf.getRuleMapKey(token);\n-        for (int i = 0; i < token.length(); i++) {\n-            String test = StringUtils.toLowerEnglish(key.substring(i));\n-            RuleHead r = bnf.getRuleHead(test);\n-            if (r != null) {\n-                found = r;\n-                break;\n-            }\n-        }\n-        if (found == null) {\n-            return token;\n+        s = skipAfterExtensionStart(tokenizer, buff);\n+      }\n+      if (extension) {\n+        if (s.length() == 1) {\n+          char c = s.charAt(0);\n+          switch (c) {\n+            case '[':\n+              deque.addLast(']');\n+              break;\n+            case '{':\n+              deque.addLast('}');\n+              break;\n+            case ']':\n+            case '}':\n+              char c2 = deque.removeLast();\n+              if (c != c2) {\n+                throw new AssertionError(\"Expected \" + c2 + \" got \" + c);\n+              }\n+              break;\n+            default:\n+              if (deque.isEmpty()) {\n+                deque.add('*');\n+              }\n+          }\n+        } else if (deque.isEmpty()) {\n+          deque.add('*');\n         }\n-        String page = \"grammar.html\";\n-        String section = found.getSection();\n-        if (section.startsWith(\"Commands\")) {\n-            page = \"commands.html\";\n-        } if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n-            page = \"datatypes.html\";\n-        } else if (section.startsWith(\"Functions\")) {\n-            page = \"functions.html\";\n-        } else if (token.equals(\"@func@\")) {\n-            return \"<a href=\\\"functions.html\\\">Function</a>\";\n-        } else if (found.getRule() instanceof RuleFixed) {\n-            found.getRule().accept(this);\n-            return html;\n+      }\n+      if (s.length() == 1 || StringUtils.toUpperEnglish(s).equals(s)) {\n+        buff.append(StringUtils.xmlText(s));\n+        if (extension && deque.isEmpty()) {\n+          extension = false;\n+          buff.append(\"</span>\");\n         }\n-        String link = found.getTopic().toLowerCase().replace(' ', '_');\n-        link = page + \"#\" + StringUtils.urlEncode(link);\n-        return \"<a href=\\\"\" + link + \"\\\">\" + token + \"</a>\";\n+        continue;\n+      }\n+      buff.append(getLink(bnf, s));\n     }\n-\n-    @Override\n-    public void visitRuleElement(boolean keyword, String name, Rule link) {\n-        // not used\n+    if (extension) {\n+      if (deque.size() != 1 || deque.getLast() != '*') {\n+        throw new AssertionError(\"Expected \" + deque.getLast() + \" got end of data\");\n+      }\n+      buff.append(\"</span>\");\n     }\n+    String s = buff.toString();\n+    // ensure it works within XHTML comments\n+    s = StringUtils.replaceAll(s, \"--\", \"&#45;-\");\n+    return s;\n+  }\n \n-    @Override\n-    public void visitRuleFixed(int type) {\n-        html = BnfRailroad.getHtmlText(type);\n-    }\n+  private static String skipAfterExtensionStart(StringTokenizer tokenizer, StringBuilder buff) {\n+    String s;\n+    do {\n+      s = tokenizer.nextToken();\n+    } while (s.equals(\" \"));\n+    return s;\n+  }\n \n-    @Override\n-    public void visitRuleList(boolean or, ArrayList<Rule> list) {\n-        // not used\n+  /**\n+   * Get the HTML link to the given token.\n+   *\n+   * @param bnf   the BNF\n+   * @param token the token\n+   * @return the HTML link\n+   */\n+  String getLink(Bnf bnf, String token) {\n+    RuleHead found = null;\n+    String key = Bnf.getRuleMapKey(token);\n+    for (int i = 0; i < token.length(); i++) {\n+      String test = StringUtils.toLowerEnglish(key.substring(i));\n+      RuleHead r = bnf.getRuleHead(test);\n+      if (r != null) {\n+        found = r;\n+        break;\n+      }\n     }\n-\n-    @Override\n-    public void visitRuleOptional(Rule rule) {\n-        // not used\n+    if (found == null) {\n+      return token;\n     }\n-\n-    @Override\n-    public void visitRuleRepeat(boolean comma, Rule rule) {\n-        // not used\n+    String page = \"grammar.html\";\n+    String section = found.getSection();\n+    if (section.startsWith(\"Commands\")) {\n+      page = \"commands.html\";\n     }\n-\n-    @Override\n-    public void visitRuleExtension(Rule rule, boolean compatibility) {\n-        // not used\n+    if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n+      page = \"datatypes.html\";\n+    } else if (section.startsWith(\"Functions\")) {\n+      page = \"functions.html\";\n+    } else if (token.equals(\"@func@\")) {\n+      return \"<a href=\\\"functions.html\\\">Function</a>\";\n+    } else if (found.getRule() instanceof RuleFixed) {\n+      found.getRule().accept(this);\n+      return html;\n     }\n+    String link = found.getTopic().toLowerCase().replace(' ', '_');\n+    link = page + \"#\" + StringUtils.urlEncode(link);\n+    return \"<a href=\\\"\" + link + \"\\\">\" + token + \"</a>\";\n+  }\n+\n+  @Override\n+  public void visitRuleElement(boolean keyword, String name, Rule link) {\n+    // not used\n+  }\n+\n+  @Override\n+  public void visitRuleFixed(int type) {\n+    html = BnfRailroad.getHtmlText(type);\n+  }\n+\n+  @Override\n+  public void visitRuleList(boolean or, ArrayList<Rule> list) {\n+    // not used\n+  }\n+\n+  @Override\n+  public void visitRuleOptional(Rule rule) {\n+    // not used\n+  }\n+\n+  @Override\n+  public void visitRuleRepeat(boolean comma, Rule rule) {\n+    // not used\n+  }\n+\n+  @Override\n+  public void visitRuleExtension(Rule rule, boolean compatibility) {\n+    // not used\n+  }\n \n }\n",
            "diff_size": 206
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/299/BnfSyntax.java\nindex 478d5169d52..5445f4e88c2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/naturalize/299/BnfSyntax.java\n@@ -131,7 +131,8 @@ public class BnfSyntax implements BnfVisitor {\n         String section = found.getSection();\n         if (section.startsWith(\"Commands\")) {\n             page = \"commands.html\";\n-        } if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n+        }\n+if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n             page = \"datatypes.html\";\n         } else if (section.startsWith(\"Functions\")) {\n             page = \"functions.html\";\n@@ -176,4 +177,4 @@ public class BnfSyntax implements BnfVisitor {\n         // not used\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 3
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/299/BnfSyntax.java\nindex 478d5169d52..72e1726e63a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/codebuff/299/BnfSyntax.java\n@@ -18,6 +18,8 @@ import org.h2.util.StringUtils;\n /**\n  * A BNF visitor that generates BNF in HTML form.\n  */\n+\n+\n public class BnfSyntax implements BnfVisitor {\n \n     private String html;\n@@ -29,11 +31,13 @@ public class BnfSyntax implements BnfVisitor {\n      * @param syntaxLines the syntax\n      * @return the HTML\n      */\n+\n+\n     public String getHtml(Bnf bnf, String syntaxLines) {\n         syntaxLines = StringUtils.replaceAll(syntaxLines, \"\\n    \", \"\\n\");\n         StringTokenizer tokenizer = Bnf.getTokenizer(syntaxLines);\n         StringBuilder buff = new StringBuilder();\n-        ArrayDeque<Character> deque = new ArrayDeque<>();\n+        ArrayDeque<Character> deque = new ArrayDeque< >();\n         boolean extension = false;\n         while (tokenizer.hasMoreTokens()) {\n             String s = tokenizer.nextToken();\n@@ -113,6 +117,8 @@ public class BnfSyntax implements BnfVisitor {\n      * @param token the token\n      * @return the HTML link\n      */\n+\n+\n     String getLink(Bnf bnf, String token) {\n         RuleHead found = null;\n         String key = Bnf.getRuleMapKey(token);\n@@ -131,24 +137,27 @@ public class BnfSyntax implements BnfVisitor {\n         String section = found.getSection();\n         if (section.startsWith(\"Commands\")) {\n             page = \"commands.html\";\n-        } if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n+        }\n+        if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n             page = \"datatypes.html\";\n         } else if (section.startsWith(\"Functions\")) {\n             page = \"functions.html\";\n-        } else if (token.equals(\"@func@\")) {\n+                                          } else if (token.equals(\"@func@\")) {\n             return \"<a href=\\\"functions.html\\\">Function</a>\";\n         } else if (found.getRule() instanceof RuleFixed) {\n-            found.getRule().accept(this);\n-            return html;\n-        }\n+                                                     found.getRule().accept(this);\n+                                                     return html;\n+                                                 }\n         String link = found.getTopic().toLowerCase().replace(' ', '_');\n         link = page + \"#\" + StringUtils.urlEncode(link);\n-        return \"<a href=\\\"\" + link + \"\\\">\" + token + \"</a>\";\n+        return \"<a href=\\\"\" + link + \"\\\">\"\n+        + token + \"</a>\";\n     }\n \n     @Override\n     public void visitRuleElement(boolean keyword, String name, Rule link) {\n         // not used\n+\n     }\n \n     @Override\n@@ -159,21 +168,25 @@ public class BnfSyntax implements BnfVisitor {\n     @Override\n     public void visitRuleList(boolean or, ArrayList<Rule> list) {\n         // not used\n+\n     }\n \n     @Override\n     public void visitRuleOptional(Rule rule) {\n         // not used\n+\n     }\n \n     @Override\n     public void visitRuleRepeat(boolean comma, Rule rule) {\n         // not used\n+\n     }\n \n     @Override\n     public void visitRuleExtension(Rule rule, boolean compatibility) {\n         // not used\n+\n     }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 21
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/299/BnfSyntax.java\nindex 478d5169d52..5729cde5475 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_random/299/BnfSyntax.java\n@@ -131,7 +131,8 @@ public class BnfSyntax implements BnfVisitor {\n         String section = found.getSection();\n         if (section.startsWith(\"Commands\")) {\n             page = \"commands.html\";\n-        } if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n+        }\n+        if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n             page = \"datatypes.html\";\n         } else if (section.startsWith(\"Functions\")) {\n             page = \"functions.html\";\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/299/BnfSyntax.java\nindex 478d5169d52..413baf3e380 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/errored/1/299/BnfSyntax.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/codefollower-H2-Research/styler_three_grams/299/BnfSyntax.java\n@@ -131,7 +131,8 @@ public class BnfSyntax implements BnfVisitor {\n         String section = found.getSection();\n         if (section.startsWith(\"Commands\")) {\n             page = \"commands.html\";\n-        } if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n+        }\n+    if (section.startsWith(\"Data Types\") || section.startsWith(\"Interval Data Types\")) {\n             page = \"datatypes.html\";\n         } else if (section.startsWith(\"Functions\")) {\n             page = \"functions.html\";\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": []
}