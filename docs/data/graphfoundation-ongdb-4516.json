{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4516",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "153",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "108",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "176",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "180",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "186",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "186",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "189",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "192",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "192",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "196",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "196",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "199",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "215",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "216",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "232",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "267",
                    "column": "109",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "269",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "271",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "273",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "277",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "277",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "282",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "287",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "287",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "287",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "291",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "291",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "298",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "298",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "300",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "305",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "305",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "38",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "316",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "340",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "342",
                    "column": "59",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "346",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "350",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "358",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "372",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "22",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "400",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "417",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "419",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "421",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "55",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "426",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "429",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "432",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "432",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "435",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "435",
                    "column": "45",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "438",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "450",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "450",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "452",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "469",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "474",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "479",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "484",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "489",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "491",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "493",
                    "column": "111",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4516/GenerationSafePointerPair.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4516/GenerationSafePointerPair.java\nindex 9302c1153be..107c822221f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4516/GenerationSafePointerPair.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4516/GenerationSafePointerPair.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.index.internal.gbptree;\n \n import org.neo4j.io.pagecache.PageCursor;\n@@ -88,418 +89,410 @@ import static org.neo4j.index.internal.gbptree.GenerationSafePointer.readPointer\n  */\n class GenerationSafePointerPair\n {\n-    static final int SIZE = GenerationSafePointer.SIZE * 2;\n-    static final int NO_LOGICAL_POS = -1;\n-    static final String GENERATION_COMPARISON_NAME_B_BIG = \"A < B\";\n-    static final String GENERATION_COMPARISON_NAME_A_BIG = \"A > B\";\n-    static final String GENERATION_COMPARISON_NAME_EQUAL = \"A == B\";\n-\n-    // Pointer states\n-    static final byte STABLE = 0;     // any previous generation made safe by a checkpoint\n-    static final byte UNSTABLE = 1;   // current generation, generation under evolution until next checkpoint\n-    static final byte CRASH = 2;      // pointer written as unstable and didn't make it to checkpoint before crashing\n-    static final byte BROKEN = 3;     // mismatching checksum\n-    static final byte EMPTY = 4;      // generation and pointer all zeros\n-\n-    // Flags and failure information\n-    static final long FLAG_SUCCESS     = 0x00000000_00000000L;\n-    static final long FLAG_FAIL        = 0x80000000_00000000L;\n-    static final long FLAG_READ        = 0x00000000_00000000L;\n-    static final long FLAG_WRITE       = 0x40000000_00000000L;\n-    static final long FLAG_GENERATION_EQUAL = 0x00000000_00000000L;\n-    static final long FLAG_GENERATION_A_BIG = 0x08000000_00000000L;\n-    static final long FLAG_GENERATION_B_BIG = 0x10000000_00000000L;\n-    static final long FLAG_SLOT_A      = 0x00000000_00000000L;\n-    static final long FLAG_SLOT_B      = 0x20000000_00000000L;\n-    static final long FLAG_ABS_OFFSET  = 0x00000000_00000000L;\n-    static final long FLAG_LOGICAL_POS = 0x10000000_00000000L;\n-    static final int  SHIFT_STATE_A    = 56;\n-    static final int  SHIFT_STATE_B    = 53;\n-    static final int SHIFT_GENERATION_OFFSET = 48;\n-\n-    // Aggregations\n-    static final long SUCCESS_WRITE_TO_B = FLAG_SUCCESS | FLAG_WRITE | FLAG_SLOT_B;\n-    static final long SUCCESS_WRITE_TO_A = FLAG_SUCCESS | FLAG_WRITE | FLAG_SLOT_A;\n-\n-    // Masks\n-    static final long SUCCESS_MASK         = FLAG_SUCCESS | FLAG_FAIL;\n-    static final long READ_OR_WRITE_MASK   = FLAG_READ | FLAG_WRITE;\n-    static final long SLOT_MASK            = FLAG_SLOT_A | FLAG_SLOT_B;\n-    static final long STATE_MASK           = 0x7; // After shift\n-    static final long GENERATION_COMPARISON_MASK = FLAG_GENERATION_EQUAL | FLAG_GENERATION_A_BIG | FLAG_GENERATION_B_BIG;\n-    static final long POINTER_MASK         = 0x0000FFFF_FFFFFFFFL;\n-    static final long GENERATION_OFFSET_MASK = 0x0FFF0000_00000000L;\n-    static final long GENERATION_OFFSET_TYPE_MASK = FLAG_ABS_OFFSET | FLAG_LOGICAL_POS;\n-    static final long HEADER_MASK          = ~POINTER_MASK;\n-    static final long MAX_GENERATION_OFFSET_MASK = 0xFFF;\n-\n-    private GenerationSafePointerPair()\n+  static final int SIZE = GenerationSafePointer.SIZE * 2;\n+  static final int NO_LOGICAL_POS = -1;\n+  static final String GENERATION_COMPARISON_NAME_B_BIG = \"A < B\";\n+  static final String GENERATION_COMPARISON_NAME_A_BIG = \"A > B\";\n+  static final String GENERATION_COMPARISON_NAME_EQUAL = \"A == B\";\n+\n+  // Pointer states\n+  static final byte STABLE = 0;     // any previous generation made safe by a checkpoint\n+  static final byte UNSTABLE = 1;   // current generation, generation under evolution until next checkpoint\n+  static final byte CRASH = 2;      // pointer written as unstable and didn't make it to checkpoint before crashing\n+  static final byte BROKEN = 3;     // mismatching checksum\n+  static final byte EMPTY = 4;      // generation and pointer all zeros\n+\n+  // Flags and failure information\n+  static final long FLAG_SUCCESS = 0x00000000_00000000L;\n+  static final long FLAG_FAIL = 0x80000000_00000000L;\n+  static final long FLAG_READ = 0x00000000_00000000L;\n+  static final long FLAG_WRITE = 0x40000000_00000000L;\n+  static final long FLAG_GENERATION_EQUAL = 0x00000000_00000000L;\n+  static final long FLAG_GENERATION_A_BIG = 0x08000000_00000000L;\n+  static final long FLAG_GENERATION_B_BIG = 0x10000000_00000000L;\n+  static final long FLAG_SLOT_A = 0x00000000_00000000L;\n+  static final long FLAG_SLOT_B = 0x20000000_00000000L;\n+  static final long FLAG_ABS_OFFSET = 0x00000000_00000000L;\n+  static final long FLAG_LOGICAL_POS = 0x10000000_00000000L;\n+  static final int SHIFT_STATE_A = 56;\n+  static final int SHIFT_STATE_B = 53;\n+  static final int SHIFT_GENERATION_OFFSET = 48;\n+\n+  // Aggregations\n+  static final long SUCCESS_WRITE_TO_B = FLAG_SUCCESS | FLAG_WRITE | FLAG_SLOT_B;\n+  static final long SUCCESS_WRITE_TO_A = FLAG_SUCCESS | FLAG_WRITE | FLAG_SLOT_A;\n+\n+  // Masks\n+  static final long SUCCESS_MASK = FLAG_SUCCESS | FLAG_FAIL;\n+  static final long READ_OR_WRITE_MASK = FLAG_READ | FLAG_WRITE;\n+  static final long SLOT_MASK = FLAG_SLOT_A | FLAG_SLOT_B;\n+  static final long STATE_MASK = 0x7; // After shift\n+  static final long GENERATION_COMPARISON_MASK = FLAG_GENERATION_EQUAL | FLAG_GENERATION_A_BIG | FLAG_GENERATION_B_BIG;\n+  static final long POINTER_MASK = 0x0000FFFF_FFFFFFFFL;\n+  static final long GENERATION_OFFSET_MASK = 0x0FFF0000_00000000L;\n+  static final long GENERATION_OFFSET_TYPE_MASK = FLAG_ABS_OFFSET | FLAG_LOGICAL_POS;\n+  static final long HEADER_MASK = ~POINTER_MASK;\n+  static final long MAX_GENERATION_OFFSET_MASK = 0xFFF;\n+\n+  private GenerationSafePointerPair()\n+  {\n+  }\n+\n+  /**\n+   * Reads a GSPP, returning the read pointer or a failure. Check success/failure using {@link #isSuccess(long)}\n+   * and if failure extract more information using {@link #failureDescription(long)}.\n+   *\n+   * @param cursor             {@link PageCursor} to read from, placed at the beginning of the GSPP.\n+   * @param stableGeneration   stable index generation.\n+   * @param unstableGeneration unstable index generation.\n+   * @param logicalPos         logical position to use in header-part of the read result. If {@link #NO_LOGICAL_POS}\n+   *                           then the {@link PageCursor#getOffset() cursor offset} is used. Header will also note whether or not\n+   *                           this is a logical pos or the offset was used. This fact will be used in {@link #isLogicalPos(long)}.\n+   * @return most recent readable pointer, or failure. Check result using {@link #isSuccess(long)}.\n+   */\n+  public static long read(PageCursor cursor, long stableGeneration, long unstableGeneration, int logicalPos)\n+  {\n+    int gsppOffset = cursor.getOffset();\n+\n+    // Try A\n+    long generationA = readGeneration(cursor);\n+    long pointerA = readPointer(cursor);\n+    short readChecksumA = readChecksum(cursor);\n+    short checksumA = checksumOf(generationA, pointerA);\n+    boolean correctChecksumA = readChecksumA == checksumA;\n+\n+    // Try B\n+    long generationB = readGeneration(cursor);\n+    long pointerB = readPointer(cursor);\n+    short readChecksumB = readChecksum(cursor);\n+    short checksumB = checksumOf(generationB, pointerB);\n+    boolean correctChecksumB = readChecksumB == checksumB;\n+\n+    byte pointerStateA = pointerState(stableGeneration, unstableGeneration, generationA, pointerA, correctChecksumA);\n+    byte pointerStateB = pointerState(stableGeneration, unstableGeneration, generationB, pointerB, correctChecksumB);\n+\n+    if (pointerStateA == UNSTABLE)\n     {\n-    }\n-\n-    /**\n-     * Reads a GSPP, returning the read pointer or a failure. Check success/failure using {@link #isSuccess(long)}\n-     * and if failure extract more information using {@link #failureDescription(long)}.\n-     *\n-     * @param cursor {@link PageCursor} to read from, placed at the beginning of the GSPP.\n-     * @param stableGeneration stable index generation.\n-     * @param unstableGeneration unstable index generation.\n-     * @param logicalPos logical position to use in header-part of the read result. If {@link #NO_LOGICAL_POS}\n-     * then the {@link PageCursor#getOffset() cursor offset} is used. Header will also note whether or not\n-     * this is a logical pos or the offset was used. This fact will be used in {@link #isLogicalPos(long)}.\n-     * @return most recent readable pointer, or failure. Check result using {@link #isSuccess(long)}.\n-     */\n-    public static long read( PageCursor cursor, long stableGeneration, long unstableGeneration, int logicalPos )\n+      if (pointerStateB == STABLE || pointerStateB == EMPTY)\n+      {\n+        return buildSuccessfulReadResult(FLAG_SLOT_A, logicalPos, gsppOffset, pointerA);\n+      }\n+    } else if (pointerStateB == UNSTABLE)\n     {\n-        int gsppOffset = cursor.getOffset();\n-\n-        // Try A\n-        long generationA = readGeneration( cursor );\n-        long pointerA = readPointer( cursor );\n-        short readChecksumA = readChecksum( cursor );\n-        short checksumA = checksumOf( generationA, pointerA );\n-        boolean correctChecksumA = readChecksumA == checksumA;\n-\n-        // Try B\n-        long generationB = readGeneration( cursor );\n-        long pointerB = readPointer( cursor );\n-        short readChecksumB = readChecksum( cursor );\n-        short checksumB = checksumOf( generationB, pointerB );\n-        boolean correctChecksumB = readChecksumB == checksumB;\n-\n-        byte pointerStateA = pointerState( stableGeneration, unstableGeneration, generationA, pointerA, correctChecksumA );\n-        byte pointerStateB = pointerState( stableGeneration, unstableGeneration, generationB, pointerB, correctChecksumB );\n-\n-        if ( pointerStateA == UNSTABLE )\n-        {\n-            if ( pointerStateB == STABLE || pointerStateB == EMPTY )\n-            {\n-                return buildSuccessfulReadResult( FLAG_SLOT_A, logicalPos, gsppOffset, pointerA );\n-            }\n-        }\n-        else if ( pointerStateB == UNSTABLE )\n-        {\n-            if ( pointerStateA == STABLE || pointerStateA == EMPTY )\n-            {\n-                return buildSuccessfulReadResult( FLAG_SLOT_B, logicalPos, gsppOffset, pointerB );\n-            }\n-        }\n-        else if ( pointerStateA == STABLE && pointerStateB == STABLE )\n-        {\n-            // compare generation\n-            if ( generationA > generationB )\n-            {\n-                return buildSuccessfulReadResult( FLAG_SLOT_A, logicalPos, gsppOffset, pointerA );\n-            }\n-            else if ( generationB > generationA )\n-            {\n-                return buildSuccessfulReadResult( FLAG_SLOT_B, logicalPos, gsppOffset, pointerB );\n-            }\n-        }\n-        else if ( pointerStateA == STABLE )\n-        {\n-            return buildSuccessfulReadResult( FLAG_SLOT_A, logicalPos, gsppOffset, pointerA );\n-        }\n-        else if ( pointerStateB == STABLE )\n-        {\n-            return buildSuccessfulReadResult( FLAG_SLOT_B, logicalPos, gsppOffset, pointerB );\n-        }\n-\n-        return FLAG_FAIL | FLAG_READ | generationState( generationA, generationB ) |\n-               ((long) pointerStateA) << SHIFT_STATE_A | ((long) pointerStateB) << SHIFT_STATE_B;\n-    }\n-\n-    private static long buildSuccessfulReadResult( long slot, int logicalPos, int gsppOffset, long pointer )\n+      if (pointerStateA == STABLE || pointerStateA == EMPTY)\n+      {\n+        return buildSuccessfulReadResult(FLAG_SLOT_B, logicalPos, gsppOffset, pointerB);\n+      }\n+    } else if (pointerStateA == STABLE && pointerStateB == STABLE)\n     {\n-        boolean isLogicalPos = logicalPos != NO_LOGICAL_POS;\n-        long offsetType = isLogicalPos ? FLAG_LOGICAL_POS : FLAG_ABS_OFFSET;\n-        long generationOffset = isLogicalPos ? logicalPos : gsppOffset;\n-        if ( (generationOffset & ~MAX_GENERATION_OFFSET_MASK) != 0 )\n-        {\n-            throw new IllegalArgumentException( \"Illegal generationOffset:\" + generationOffset + \", it would be too large, max is \" +\n-                    MAX_GENERATION_OFFSET_MASK );\n-        }\n-        return FLAG_SUCCESS | FLAG_READ | slot | offsetType | generationOffset << SHIFT_GENERATION_OFFSET | pointer;\n-    }\n-\n-    /**\n-     * Writes a GSP at one of the GSPP slots A/B, returning the result.\n-     * Check success/failure using {@link #isSuccess(long)} and if failure extract more information using\n-     * {@link #failureDescription(long)}.\n-     *\n-     * @param cursor {@link PageCursor} to write to, placed at the beginning of the GSPP.\n-     * @param pointer pageId to write.\n-     * @param stableGeneration stable index generation.\n-     * @param unstableGeneration unstable index generation, which will be the generation to write in the slot.\n-     * @return {@code true} on success, otherwise {@code false} on failure.\n-     */\n-    public static long write( PageCursor cursor, long pointer, long stableGeneration, long unstableGeneration )\n+      // compare generation\n+      if (generationA > generationB)\n+      {\n+        return buildSuccessfulReadResult(FLAG_SLOT_A, logicalPos, gsppOffset, pointerA);\n+      } else if (generationB > generationA)\n+      {\n+        return buildSuccessfulReadResult(FLAG_SLOT_B, logicalPos, gsppOffset, pointerB);\n+      }\n+    } else if (pointerStateA == STABLE)\n     {\n-        // Later there will be a selection which \"slot\" of GSP out of the two to write into.\n-        int offset = cursor.getOffset();\n-        pointer = pointer( pointer );\n-\n-        // Try A\n-        long generationA = readGeneration( cursor );\n-        long pointerA = readPointer( cursor );\n-        short readChecksumA = readChecksum( cursor );\n-        short checksumA = checksumOf( generationA, pointerA );\n-        boolean correctChecksumA = readChecksumA == checksumA;\n-\n-        // Try B\n-        long generationB = readGeneration( cursor );\n-        long pointerB = readPointer( cursor );\n-        short readChecksumB = readChecksum( cursor );\n-        short checksumB = checksumOf( generationB, pointerB );\n-        boolean correctChecksumB = readChecksumB == checksumB;\n-\n-        byte pointerStateA = pointerState( stableGeneration, unstableGeneration, generationA, pointerA, correctChecksumA );\n-        byte pointerStateB = pointerState( stableGeneration, unstableGeneration, generationB, pointerB, correctChecksumB );\n-\n-        long writeResult = writeResult( pointerStateA, pointerStateB, generationA, generationB );\n-\n-        if ( isSuccess( writeResult ) )\n-        {\n-            boolean writeToA = ( writeResult & SLOT_MASK) == FLAG_SLOT_A;\n-            int writeOffset = writeToA ? offset : offset + GenerationSafePointer.SIZE;\n-            cursor.setOffset( writeOffset );\n-            GenerationSafePointer.write( cursor, unstableGeneration, pointer );\n-        }\n-        return writeResult;\n+      return buildSuccessfulReadResult(FLAG_SLOT_A, logicalPos, gsppOffset, pointerA);\n+    } else if (pointerStateB == STABLE)\n+    {\n+      return buildSuccessfulReadResult(FLAG_SLOT_B, logicalPos, gsppOffset, pointerB);\n     }\n \n-    private static long writeResult( byte pointerStateA, byte pointerStateB, long generationA, long generationB )\n-    {\n-        if ( pointerStateA == STABLE )\n-        {\n-            if ( pointerStateB == STABLE )\n-            {\n-                if ( generationA > generationB )\n-                {\n-                    // Write to slot B\n-                    return SUCCESS_WRITE_TO_B;\n-                }\n-                else if ( generationB > generationA )\n-                {\n-                    // Write to slot A\n-                    return SUCCESS_WRITE_TO_A;\n-                }\n-            }\n-            else\n-            {\n-                // Write to slot B\n-                return SUCCESS_WRITE_TO_B;\n-            }\n-        }\n-        else if ( pointerStateB == STABLE )\n-        {\n-            // write to slot A\n-            return SUCCESS_WRITE_TO_A;\n-        }\n-        else if ( pointerStateA == UNSTABLE )\n-        {\n-            if ( pointerStateB == EMPTY )\n-            {\n-                // write to slot A\n-                return SUCCESS_WRITE_TO_A;\n-            }\n-        }\n-        else if ( pointerStateB == UNSTABLE )\n-        {\n-            if ( pointerStateA == EMPTY )\n-            {\n-                // write to slot B\n-                return SUCCESS_WRITE_TO_B;\n-            }\n-        }\n-        else if ( pointerStateA == EMPTY && pointerStateB == EMPTY )\n-        {\n-            // write to slot A\n-            return SUCCESS_WRITE_TO_A;\n-        }\n+    return FLAG_FAIL | FLAG_READ | generationState(generationA, generationB) |\n+        ((long) pointerStateA) << SHIFT_STATE_A | ((long) pointerStateB) << SHIFT_STATE_B;\n+  }\n \n-        // Encode error\n-        return FLAG_FAIL | FLAG_WRITE | generationState( generationA, generationB ) |\n-               ((long) pointerStateA) << SHIFT_STATE_A | ((long) pointerStateB) << SHIFT_STATE_B;\n+  private static long buildSuccessfulReadResult(long slot, int logicalPos, int gsppOffset, long pointer)\n+  {\n+    boolean isLogicalPos = logicalPos != NO_LOGICAL_POS;\n+    long offsetType = isLogicalPos ? FLAG_LOGICAL_POS : FLAG_ABS_OFFSET;\n+    long generationOffset = isLogicalPos ? logicalPos : gsppOffset;\n+    if ((generationOffset & ~MAX_GENERATION_OFFSET_MASK) != 0)\n+    {\n+      throw new IllegalArgumentException(\"Illegal generationOffset:\" + generationOffset + \", it would be too large, max is \" +\n+          MAX_GENERATION_OFFSET_MASK);\n     }\n-\n-    private static long generationState( long generationA, long generationB )\n+    return FLAG_SUCCESS | FLAG_READ | slot | offsetType | generationOffset << SHIFT_GENERATION_OFFSET | pointer;\n+  }\n+\n+  /**\n+   * Writes a GSP at one of the GSPP slots A/B, returning the result.\n+   * Check success/failure using {@link #isSuccess(long)} and if failure extract more information using\n+   * {@link #failureDescription(long)}.\n+   *\n+   * @param cursor             {@link PageCursor} to write to, placed at the beginning of the GSPP.\n+   * @param pointer            pageId to write.\n+   * @param stableGeneration   stable index generation.\n+   * @param unstableGeneration unstable index generation, which will be the generation to write in the slot.\n+   * @return {@code true} on success, otherwise {@code false} on failure.\n+   */\n+  public static long write(PageCursor cursor, long pointer, long stableGeneration, long unstableGeneration)\n+  {\n+    // Later there will be a selection which \"slot\" of GSP out of the two to write into.\n+    int offset = cursor.getOffset();\n+    pointer = pointer(pointer);\n+\n+    // Try A\n+    long generationA = readGeneration(cursor);\n+    long pointerA = readPointer(cursor);\n+    short readChecksumA = readChecksum(cursor);\n+    short checksumA = checksumOf(generationA, pointerA);\n+    boolean correctChecksumA = readChecksumA == checksumA;\n+\n+    // Try B\n+    long generationB = readGeneration(cursor);\n+    long pointerB = readPointer(cursor);\n+    short readChecksumB = readChecksum(cursor);\n+    short checksumB = checksumOf(generationB, pointerB);\n+    boolean correctChecksumB = readChecksumB == checksumB;\n+\n+    byte pointerStateA = pointerState(stableGeneration, unstableGeneration, generationA, pointerA, correctChecksumA);\n+    byte pointerStateB = pointerState(stableGeneration, unstableGeneration, generationB, pointerB, correctChecksumB);\n+\n+    long writeResult = writeResult(pointerStateA, pointerStateB, generationA, generationB);\n+\n+    if (isSuccess(writeResult))\n     {\n-        return generationA > generationB ? FLAG_GENERATION_A_BIG : generationB > generationA ? FLAG_GENERATION_B_BIG\n-                                                                                             : FLAG_GENERATION_EQUAL;\n+      boolean writeToA = (writeResult & SLOT_MASK) == FLAG_SLOT_A;\n+      int writeOffset = writeToA ? offset : offset + GenerationSafePointer.SIZE;\n+      cursor.setOffset(writeOffset);\n+      GenerationSafePointer.write(cursor, unstableGeneration, pointer);\n     }\n+    return writeResult;\n+  }\n \n-    /**\n-     * Pointer state of a GSP (generation, pointer, checksum). Can be any of:\n-     * <ul>\n-     * <li>{@link #STABLE}</li>\n-     * <li>{@link #UNSTABLE}</li>\n-     * <li>{@link #CRASH}</li>\n-     * <li>{@link #BROKEN}</li>\n-     * <li>{@link #EMPTY}</li>\n-     * </ul>\n-     *\n-     * @param stableGeneration stable generation.\n-     * @param unstableGeneration unstable generation.\n-     * @param generation GSP generation.\n-     * @param pointer GSP pointer.\n-     * @param checksumIsCorrect whether or not GSP checksum matches checksum of {@code generation} and {@code pointer}.\n-     * @return one of the available pointer states.\n-     */\n-    static byte pointerState( long stableGeneration, long unstableGeneration,\n-            long generation, long pointer, boolean checksumIsCorrect )\n+  private static long writeResult(byte pointerStateA, byte pointerStateB, long generationA, long generationB)\n+  {\n+    if (pointerStateA == STABLE)\n     {\n-        if ( GenerationSafePointer.isEmpty( generation, pointer ) )\n+      if (pointerStateB == STABLE)\n+      {\n+        if (generationA > generationB)\n         {\n-            return EMPTY;\n-        }\n-        if ( !checksumIsCorrect )\n+          // Write to slot B\n+          return SUCCESS_WRITE_TO_B;\n+        } else if (generationB > generationA)\n         {\n-            return BROKEN;\n+          // Write to slot A\n+          return SUCCESS_WRITE_TO_A;\n         }\n-        if ( generation < MIN_GENERATION )\n-        {\n-            return BROKEN;\n-        }\n-        if ( generation <= stableGeneration )\n-        {\n-            return STABLE;\n-        }\n-        if ( generation == unstableGeneration )\n-        {\n-            return UNSTABLE;\n-        }\n-        return CRASH;\n-    }\n-\n-    /**\n-     * Checks to see if a result from read/write was successful. If not more failure information can be extracted\n-     * using {@link #failureDescription(long)}.\n-     *\n-     * @param result result from {@link #read(PageCursor, long, long, int)} or {@link #write(PageCursor, long, long, long)}.\n-     * @return {@code true} if successful read/write, otherwise {@code false}.\n-     */\n-    static boolean isSuccess( long result )\n+      } else\n+      {\n+        // Write to slot B\n+        return SUCCESS_WRITE_TO_B;\n+      }\n+    } else if (pointerStateB == STABLE)\n     {\n-        return (result & SUCCESS_MASK) == FLAG_SUCCESS;\n-    }\n-\n-    /**\n-     * @param readResult whole read result from {@link #read(PageCursor, long, long, int)}, containing both\n-     * pointer as well as header information about the pointer.\n-     * @return the pointer-part of {@code readResult}.\n-     */\n-    static long pointer( long readResult )\n+      // write to slot A\n+      return SUCCESS_WRITE_TO_A;\n+    } else if (pointerStateA == UNSTABLE)\n+    {\n+      if (pointerStateB == EMPTY)\n+      {\n+        // write to slot A\n+        return SUCCESS_WRITE_TO_A;\n+      }\n+    } else if (pointerStateB == UNSTABLE)\n     {\n-        return readResult & POINTER_MASK;\n+      if (pointerStateA == EMPTY)\n+      {\n+        // write to slot B\n+        return SUCCESS_WRITE_TO_B;\n+      }\n+    } else if (pointerStateA == EMPTY && pointerStateB == EMPTY)\n+    {\n+      // write to slot A\n+      return SUCCESS_WRITE_TO_A;\n     }\n \n-    /**\n-     * Calling {@link #read(PageCursor, long, long, int)} (potentially also {@link #write(PageCursor, long, long, long)})\n-     * can fail due to seeing an unexpected state of the two GSPs. Failing right there and then isn't an option\n-     * due to how the page cache works and that something read from a {@link PageCursor} must not be interpreted\n-     * until after passing a {@link PageCursor#shouldRetry()} returning {@code false}. This creates a need for\n-     * including failure information in result returned from these methods so that, if failed, can have\n-     * the caller which interprets the result fail in a proper place. That place can make use of this method\n-     * by getting a human-friendly description about the failure.\n-     *\n-     * @param result result from {@link #read(PageCursor, long, long, int)} or\n-     * {@link #write(PageCursor, long, long, long)}.\n-     * @return a human-friendly description of the failure.\n-     */\n-    static String failureDescription( long result )\n+    // Encode error\n+    return FLAG_FAIL | FLAG_WRITE | generationState(generationA, generationB) |\n+        ((long) pointerStateA) << SHIFT_STATE_A | ((long) pointerStateB) << SHIFT_STATE_B;\n+  }\n+\n+  private static long generationState(long generationA, long generationB)\n+  {\n+    return generationA > generationB ? FLAG_GENERATION_A_BIG : generationB > generationA ? FLAG_GENERATION_B_BIG\n+        : FLAG_GENERATION_EQUAL;\n+  }\n+\n+  /**\n+   * Pointer state of a GSP (generation, pointer, checksum). Can be any of:\n+   * <ul>\n+   * <li>{@link #STABLE}</li>\n+   * <li>{@link #UNSTABLE}</li>\n+   * <li>{@link #CRASH}</li>\n+   * <li>{@link #BROKEN}</li>\n+   * <li>{@link #EMPTY}</li>\n+   * </ul>\n+   *\n+   * @param stableGeneration   stable generation.\n+   * @param unstableGeneration unstable generation.\n+   * @param generation         GSP generation.\n+   * @param pointer            GSP pointer.\n+   * @param checksumIsCorrect  whether or not GSP checksum matches checksum of {@code generation} and {@code pointer}.\n+   * @return one of the available pointer states.\n+   */\n+  static byte pointerState(long stableGeneration, long unstableGeneration,\n+                           long generation, long pointer, boolean checksumIsCorrect)\n+  {\n+    if (GenerationSafePointer.isEmpty(generation, pointer))\n     {\n-        return \"GSPP \" + (isRead( result ) ? \"READ\" : \"WRITE\") + \" failure\" +\n-                format( \"%n  Pointer state A: %s\",\n-                        pointerStateName( pointerStateFromResult( result, SHIFT_STATE_A ) ) ) +\n-                format( \"%n  Pointer state B: %s\",\n-                        pointerStateName( pointerStateFromResult( result, SHIFT_STATE_B ) ) ) +\n-                format( \"%n  Generations: \" + generationComparisonFromResult( result ) );\n+      return EMPTY;\n     }\n-\n-    /**\n-     * Asserts that a result is {@link #isSuccess(long) successful}, otherwise throws {@link IllegalStateException}.\n-     *\n-     * @param result result returned from {@link #read(PageCursor, long, long, int)} or\n-     * {@link #write(PageCursor, long, long, long)}\n-     * @return {@code true} if {@link #isSuccess(long) successful}, for interoperability with {@code assert}.\n-     */\n-    static boolean assertSuccess( long result )\n+    if (!checksumIsCorrect)\n     {\n-        if ( !isSuccess( result ) )\n-        {\n-            throw new TreeInconsistencyException( failureDescription( result ) );\n-        }\n-        return true;\n+      return BROKEN;\n     }\n-\n-    private static String generationComparisonFromResult( long result )\n+    if (generation < MIN_GENERATION)\n     {\n-        long bits = result & GENERATION_COMPARISON_MASK;\n-        if ( bits == FLAG_GENERATION_EQUAL )\n-        {\n-            return GENERATION_COMPARISON_NAME_EQUAL;\n-        }\n-        else if ( bits == FLAG_GENERATION_A_BIG )\n-        {\n-            return GENERATION_COMPARISON_NAME_A_BIG;\n-        }\n-        else if ( bits == FLAG_GENERATION_B_BIG )\n-        {\n-            return GENERATION_COMPARISON_NAME_B_BIG;\n-        }\n-        else\n-        {\n-            return \"Unknown[\" + bits + \"]\";\n-        }\n+      return BROKEN;\n     }\n-\n-    /**\n-     * Name of the provided {@code pointerState} gotten from {@link #pointerState(long, long, long, long, boolean)}.\n-     *\n-     * @param pointerState pointer state to get name for.\n-     * @return name of {@code pointerState}.\n-     */\n-    static String pointerStateName( byte pointerState )\n+    if (generation <= stableGeneration)\n     {\n-        switch ( pointerState )\n-        {\n-        case STABLE: return \"STABLE\";\n-        case UNSTABLE: return \"UNSTABLE\";\n-        case CRASH: return \"CRASH\";\n-        case BROKEN: return \"BROKEN\";\n-        case EMPTY: return \"EMPTY\";\n-        default: return \"Unknown[\" + pointerState + \"]\";\n-        }\n+      return STABLE;\n     }\n-\n-    static byte pointerStateFromResult( long result, int shift )\n+    if (generation == unstableGeneration)\n     {\n-        return (byte) ((result >>> shift) & STATE_MASK);\n+      return UNSTABLE;\n     }\n-\n-    static boolean isRead( long result )\n+    return CRASH;\n+  }\n+\n+  /**\n+   * Checks to see if a result from read/write was successful. If not more failure information can be extracted\n+   * using {@link #failureDescription(long)}.\n+   *\n+   * @param result result from {@link #read(PageCursor, long, long, int)} or {@link #write(PageCursor, long, long, long)}.\n+   * @return {@code true} if successful read/write, otherwise {@code false}.\n+   */\n+  static boolean isSuccess(long result)\n+  {\n+    return (result & SUCCESS_MASK) == FLAG_SUCCESS;\n+  }\n+\n+  /**\n+   * @param readResult whole read result from {@link #read(PageCursor, long, long, int)}, containing both\n+   *                   pointer as well as header information about the pointer.\n+   * @return the pointer-part of {@code readResult}.\n+   */\n+  static long pointer(long readResult)\n+  {\n+    return readResult & POINTER_MASK;\n+  }\n+\n+  /**\n+   * Calling {@link #read(PageCursor, long, long, int)} (potentially also {@link #write(PageCursor, long, long, long)})\n+   * can fail due to seeing an unexpected state of the two GSPs. Failing right there and then isn't an option\n+   * due to how the page cache works and that something read from a {@link PageCursor} must not be interpreted\n+   * until after passing a {@link PageCursor#shouldRetry()} returning {@code false}. This creates a need for\n+   * including failure information in result returned from these methods so that, if failed, can have\n+   * the caller which interprets the result fail in a proper place. That place can make use of this method\n+   * by getting a human-friendly description about the failure.\n+   *\n+   * @param result result from {@link #read(PageCursor, long, long, int)} or\n+   *               {@link #write(PageCursor, long, long, long)}.\n+   * @return a human-friendly description of the failure.\n+   */\n+  static String failureDescription(long result)\n+  {\n+    return \"GSPP \" + (isRead(result) ? \"READ\" : \"WRITE\") + \" failure\" +\n+        format(\"%n  Pointer state A: %s\",\n+            pointerStateName(pointerStateFromResult(result, SHIFT_STATE_A))) +\n+        format(\"%n  Pointer state B: %s\",\n+            pointerStateName(pointerStateFromResult(result, SHIFT_STATE_B))) +\n+        format(\"%n  Generations: \" + generationComparisonFromResult(result));\n+  }\n+\n+  /**\n+   * Asserts that a result is {@link #isSuccess(long) successful}, otherwise throws {@link IllegalStateException}.\n+   *\n+   * @param result result returned from {@link #read(PageCursor, long, long, int)} or\n+   *               {@link #write(PageCursor, long, long, long)}\n+   * @return {@code true} if {@link #isSuccess(long) successful}, for interoperability with {@code assert}.\n+   */\n+  static boolean assertSuccess(long result)\n+  {\n+    if (!isSuccess(result))\n     {\n-        return (result & READ_OR_WRITE_MASK) == FLAG_READ;\n+      throw new TreeInconsistencyException(failureDescription(result));\n     }\n+    return true;\n+  }\n \n-    static boolean resultIsFromSlotA( long result )\n+  private static String generationComparisonFromResult(long result)\n+  {\n+    long bits = result & GENERATION_COMPARISON_MASK;\n+    if (bits == FLAG_GENERATION_EQUAL)\n     {\n-        return (result & SLOT_MASK) == FLAG_SLOT_A;\n+      return GENERATION_COMPARISON_NAME_EQUAL;\n+    } else if (bits == FLAG_GENERATION_A_BIG)\n+    {\n+      return GENERATION_COMPARISON_NAME_A_BIG;\n+    } else if (bits == FLAG_GENERATION_B_BIG)\n+    {\n+      return GENERATION_COMPARISON_NAME_B_BIG;\n+    } else\n+    {\n+      return \"Unknown[\" + bits + \"]\";\n     }\n-\n-    static boolean isLogicalPos( long readResult )\n+  }\n+\n+  /**\n+   * Name of the provided {@code pointerState} gotten from {@link #pointerState(long, long, long, long, boolean)}.\n+   *\n+   * @param pointerState pointer state to get name for.\n+   * @return name of {@code pointerState}.\n+   */\n+  static String pointerStateName(byte pointerState)\n+  {\n+    switch (pointerState)\n     {\n-        return (readResult & GENERATION_OFFSET_TYPE_MASK) == FLAG_LOGICAL_POS;\n+      case STABLE:\n+        return \"STABLE\";\n+      case UNSTABLE:\n+        return \"UNSTABLE\";\n+      case CRASH:\n+        return \"CRASH\";\n+      case BROKEN:\n+        return \"BROKEN\";\n+      case EMPTY:\n+        return \"EMPTY\";\n+      default:\n+        return \"Unknown[\" + pointerState + \"]\";\n     }\n-\n-    static int generationOffset( long readResult )\n+  }\n+\n+  static byte pointerStateFromResult(long result, int shift)\n+  {\n+    return (byte) ((result >>> shift) & STATE_MASK);\n+  }\n+\n+  static boolean isRead(long result)\n+  {\n+    return (result & READ_OR_WRITE_MASK) == FLAG_READ;\n+  }\n+\n+  static boolean resultIsFromSlotA(long result)\n+  {\n+    return (result & SLOT_MASK) == FLAG_SLOT_A;\n+  }\n+\n+  static boolean isLogicalPos(long readResult)\n+  {\n+    return (readResult & GENERATION_OFFSET_TYPE_MASK) == FLAG_LOGICAL_POS;\n+  }\n+\n+  static int generationOffset(long readResult)\n+  {\n+    if ((readResult & HEADER_MASK) == 0)\n     {\n-        if ( (readResult & HEADER_MASK) == 0 )\n-        {\n-            throw new IllegalArgumentException( \"Expected a header in read result, but read result was \" + readResult );\n-        }\n-\n-        return Math.toIntExact( (readResult & GENERATION_OFFSET_MASK) >>> SHIFT_GENERATION_OFFSET );\n+      throw new IllegalArgumentException(\"Expected a header in read result, but read result was \" + readResult);\n     }\n+\n+    return Math.toIntExact((readResult & GENERATION_OFFSET_MASK) >>> SHIFT_GENERATION_OFFSET);\n+  }\n }\n",
            "diff_size": 608
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}