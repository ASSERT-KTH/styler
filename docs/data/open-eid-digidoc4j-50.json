{
    "project_name": "open-eid-digidoc4j",
    "error_id": "50",
    "information": {
        "errors": [
            {
                "line": "87",
                "column": "61",
                "severity": "error",
                "message": "'{' is not preceded with whitespace.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
            }
        ]
    },
    "source_code": "    logger.debug(\"Writing asic mime type to asic zip file\");\n    String mimeTypeString;\n    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n      mimeTypeString = MimeType.ASICS.getMimeTypeString();\n    } else {\n      mimeTypeString = MimeType.ASICE.getMimeTypeString();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler/50/AsicContainerCreator.java\nindex c251d78a150..76c05b13631 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler/50/AsicContainerCreator.java\n@@ -84,7 +84,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/50/AsicContainerCreator.java\nindex c251d78a150..aa862872aa7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/intellij/50/AsicContainerCreator.java\n@@ -1,12 +1,12 @@\n /* DigiDoc4J library\n-*\n-* This software is released under either the GNU Library General Public\n-* License (see LICENSE.LGPL).\n-*\n-* Note that the only valid version of the LGPL license as far as this\n-* project is concerned is the original GNU Library General Public License\n-* Version 2.1, February 1999\n-*/\n+ *\n+ * This software is released under either the GNU Library General Public\n+ * License (see LICENSE.LGPL).\n+ *\n+ * Note that the only valid version of the LGPL license as far as this\n+ * project is concerned is the original GNU Library General Public License\n+ * Version 2.1, February 1999\n+ */\n \n package org.digidoc4j.impl.asic;\n \n@@ -84,7 +84,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n@@ -94,7 +94,7 @@ public class AsicContainerCreator {\n   }\n \n   /**\n-   * @param dataFiles list of data files\n+   * @param dataFiles     list of data files\n    * @param containerType type\n    */\n   public void writeManifest(Collection<DataFile> dataFiles, String containerType) {\n@@ -123,7 +123,7 @@ public class AsicContainerCreator {\n   }\n \n   /**\n-   * @param signatures list of signatures\n+   * @param signatures                 list of signatures\n    * @param nextSignatureFileNameIndex index\n    */\n   public void writeSignatures(Collection<Signature> signatures, int nextSignatureFileNameIndex) {\n@@ -151,12 +151,12 @@ public class AsicContainerCreator {\n   public void writeExistingEntries(Collection<AsicEntry> asicEntries) {\n     logger.debug(\"Writing existing zip container entries\");\n     asicEntries.stream()\n-            .sorted(AsicContainerCreator::compareAsicEntriesPrioritizeMimeType)\n-            .forEach(asicEntry -> {\n-              DSSDocument content = asicEntry.getContent();\n-              ZipEntry zipEntry = asicEntry.getZipEntry();\n-              new StreamEntryCallback(zipEntry, content.openStream(), false).write();\n-            });\n+        .sorted(AsicContainerCreator::compareAsicEntriesPrioritizeMimeType)\n+        .forEach(asicEntry -> {\n+          DSSDocument content = asicEntry.getContent();\n+          ZipEntry zipEntry = asicEntry.getZipEntry();\n+          new StreamEntryCallback(zipEntry, content.openStream(), false).write();\n+        });\n   }\n \n   /**\n",
            "diff_size": 17
        },
        {
            "tool": "naturalize",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/50/AsicContainerCreator.java\nindex c251d78a150..51b0926c356 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/naturalize/50/AsicContainerCreator.java\n@@ -84,7 +84,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n@@ -150,9 +150,7 @@ public class AsicContainerCreator {\n    */\n   public void writeExistingEntries(Collection<AsicEntry> asicEntries) {\n     logger.debug(\"Writing existing zip container entries\");\n-    asicEntries.stream()\n-            .sorted(AsicContainerCreator::compareAsicEntriesPrioritizeMimeType)\n-            .forEach(asicEntry -> {\n+    asicEntries.stream().sorted(AsicContainerCreator::compareAsicEntriesPrioritizeMimeType).forEach(asicEntry -> {\n               DSSDocument content = asicEntry.getContent();\n               ZipEntry zipEntry = asicEntry.getZipEntry();\n               new StreamEntryCallback(zipEntry, content.openStream(), false).write();\n@@ -239,7 +237,6 @@ public class AsicContainerCreator {\n     }\n \n     abstract void doWithEntryStream(OutputStream stream) throws IOException;\n-\n   }\n \n   private static ZipEntry getAsicMimeTypeZipEntry(byte[] mimeTypeBytes) {\n@@ -270,4 +267,4 @@ public class AsicContainerCreator {\n     throw new TechnicalException(message, e);\n   }\n \n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 6
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "160",
                    "column": "110",
                    "severity": "error",
                    "message": "'->' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAroundCheck"
                },
                {
                    "line": "161",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 147).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "162",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 146).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "163",
                    "severity": "error",
                    "message": "Line is longer than 120 characters (found 173).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/50/AsicContainerCreator.java\nindex c251d78a150..4442ca3c01a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/codebuff/50/AsicContainerCreator.java\n@@ -21,7 +21,6 @@ import java.util.Collection;\n import java.util.zip.CRC32;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n-\n import org.apache.commons.io.IOUtils;\n import org.digidoc4j.Constant;\n import org.digidoc4j.DataFile;\n@@ -32,20 +31,19 @@ import org.digidoc4j.impl.asic.manifest.AsicManifest;\n import org.digidoc4j.utils.Helper;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import eu.europa.esig.dss.model.DSSDocument;\n import eu.europa.esig.dss.model.MimeType;\n \n /**\n  * ASIC container creator\n  */\n+\n+\n public class AsicContainerCreator {\n \n   private static final Logger logger = LoggerFactory.getLogger(AsicContainerCreator.class);\n-\n   private static final String ZIP_ENTRY_MIMETYPE = \"mimetype\";\n   private static final Charset CHARSET = StandardCharsets.UTF_8;\n-\n   private final ZipOutputStream zipOutputStream;\n   private final OutputStream outputStream;\n   private String zipComment;\n@@ -53,11 +51,13 @@ public class AsicContainerCreator {\n   /**\n    * @param outputStream stream\n    */\n+\n   public AsicContainerCreator(OutputStream outputStream) {\n     this.outputStream = outputStream;\n     this.zipOutputStream = new ZipOutputStream(outputStream, CHARSET);\n   }\n \n+\n   public void finalizeZipFile() {\n     logger.debug(\"Finalizing asic zip file\");\n     try {\n@@ -81,10 +81,11 @@ public class AsicContainerCreator {\n   /**\n    * @param containerType type\n    */\n+\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n@@ -97,21 +98,24 @@ public class AsicContainerCreator {\n    * @param dataFiles list of data files\n    * @param containerType type\n    */\n+\n   public void writeManifest(Collection<DataFile> dataFiles, String containerType) {\n     logger.debug(\"Writing asic manifest\");\n     final AsicManifest manifest = new AsicManifest(containerType);\n     manifest.addFileEntry(dataFiles);\n     new EntryCallback(new ZipEntry(AsicManifest.XML_PATH)) {\n-      @Override\n-      void doWithEntryStream(OutputStream stream) throws IOException {\n-        manifest.writeTo(stream);\n-      }\n-    }.write();\n+\n+@Override\n+void doWithEntryStream(OutputStream stream) throws IOException {\n+  manifest.writeTo(stream);\n+}\n+}.write();\n   }\n \n   /**\n    * @param dataFiles list of data files\n    */\n+\n   public void writeDataFiles(Collection<DataFile> dataFiles) {\n     logger.debug(\"Adding data files to the asic zip container\");\n     for (DataFile dataFile : dataFiles) {\n@@ -126,6 +130,7 @@ public class AsicContainerCreator {\n    * @param signatures list of signatures\n    * @param nextSignatureFileNameIndex index\n    */\n+\n   public void writeSignatures(Collection<Signature> signatures, int nextSignatureFileNameIndex) {\n     logger.debug(\"Adding signatures to the asic zip container\");\n     int index = nextSignatureFileNameIndex;\n@@ -139,6 +144,7 @@ public class AsicContainerCreator {\n   /**\n    * @param dataFile data file\n    */\n+\n   public void writeTimestampToken(DataFile dataFile) {\n     logger.debug(\"Adding signatures to the asic zip container\");\n     String signatureFileName = \"META-INF/timestamp.tst\";\n@@ -148,20 +154,20 @@ public class AsicContainerCreator {\n   /**\n    * @param asicEntries list of ASIC entries\n    */\n+\n   public void writeExistingEntries(Collection<AsicEntry> asicEntries) {\n     logger.debug(\"Writing existing zip container entries\");\n-    asicEntries.stream()\n-            .sorted(AsicContainerCreator::compareAsicEntriesPrioritizeMimeType)\n-            .forEach(asicEntry -> {\n-              DSSDocument content = asicEntry.getContent();\n-              ZipEntry zipEntry = asicEntry.getZipEntry();\n-              new StreamEntryCallback(zipEntry, content.openStream(), false).write();\n-            });\n+    asicEntries.stream().sorted(AsicContainerCreator::compareAsicEntriesPrioritizeMimeType).forEach(asicEntry-> {\n+                                                                                                      DSSDocument content = asicEntry.getContent();\n+                                                                                                      ZipEntry zipEntry = asicEntry.getZipEntry();\n+                                                                                                      new StreamEntryCallback(zipEntry, content.openStream(), false).write();\n+                                                                                                    });\n   }\n \n   /**\n    * @param comment comment\n    */\n+\n   public void writeContainerComment(String comment) {\n     logger.debug(\"Writing container comment: \" + comment);\n     zipOutputStream.setComment(comment);\n@@ -170,6 +176,7 @@ public class AsicContainerCreator {\n   /**\n    * @param zipComment comment\n    */\n+\n   public void setZipComment(String zipComment) {\n     this.zipComment = zipComment;\n   }\n@@ -182,6 +189,7 @@ public class AsicContainerCreator {\n       this(entry, inputStream, true);\n     }\n \n+\n     StreamEntryCallback(ZipEntry entry, InputStream inputStream, boolean addComment) {\n       super(entry, addComment);\n       this.inputStream = inputStream;\n@@ -191,7 +199,6 @@ public class AsicContainerCreator {\n     void doWithEntryStream(OutputStream stream) throws IOException {\n       IOUtils.copy(inputStream, stream);\n     }\n-\n   }\n \n   private class BytesEntryCallback extends EntryCallback {\n@@ -219,6 +226,7 @@ public class AsicContainerCreator {\n       this(entry, true);\n     }\n \n+\n     EntryCallback(ZipEntry entry, boolean addComment) {\n       this.entry = entry;\n       this.addComment = addComment;\n@@ -228,7 +236,6 @@ public class AsicContainerCreator {\n       if (addComment) {\n         entry.setComment(zipComment);\n       }\n-\n       try {\n         zipOutputStream.putNextEntry(entry);\n         doWithEntryStream(zipOutputStream);\n@@ -259,9 +266,9 @@ public class AsicContainerCreator {\n     if (leftIsMimeType && !rightIsMimeType) {\n       return -1;\n     } else if (!leftIsMimeType && rightIsMimeType) {\n-      return 1;\n+             return 1;\n     } else {\n-      return 0;\n+             return 0;\n     }\n   }\n \n@@ -269,5 +276,4 @@ public class AsicContainerCreator {\n     logger.error(message + \": \" + e.getMessage());\n     throw new TechnicalException(message, e);\n   }\n-\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 38
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/50/AsicContainerCreator.java\nindex c251d78a150..76c05b13631 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_random/50/AsicContainerCreator.java\n@@ -84,7 +84,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/50/AsicContainerCreator.java\nindex c251d78a150..76c05b13631 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/errored/1/50/AsicContainerCreator.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/open-eid-digidoc4j/styler_three_grams/50/AsicContainerCreator.java\n@@ -84,7 +84,7 @@ public class AsicContainerCreator {\n   public void writeAsiceMimeType(String containerType) {\n     logger.debug(\"Writing asic mime type to asic zip file\");\n     String mimeTypeString;\n-    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)){\n+    if (Constant.ASICS_CONTAINER_TYPE.equals(containerType)) {\n       mimeTypeString = MimeType.ASICS.getMimeTypeString();\n     } else {\n       mimeTypeString = MimeType.ASICE.getMimeTypeString();\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "codebuff"
    ]
}