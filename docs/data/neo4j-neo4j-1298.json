{
    "project_name": "neo4j-neo4j",
    "error_id": "1298",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "89",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "53",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "93",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "93",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "48",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "107",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "122",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "130",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "141",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "148",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "162",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "174",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "180",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "183",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "197",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "208",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "92",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "226",
                    "column": "122",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "228",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "238",
                    "column": "105",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "18",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "32",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "244",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "71",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1298/AbstractDynamicStore.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1298/AbstractDynamicStore.java\nindex 0516ca210f7..ff241da2358 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/1298/AbstractDynamicStore.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/1298/AbstractDynamicStore.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.store;\n \n import org.eclipse.collections.api.set.ImmutableSet;\n@@ -70,100 +71,99 @@ import static org.neo4j.memory.HeapEstimator.alignObjectSize;\n  * The record size is what's stored in the header (first record). {@link #getRecordDataSize()} returns\n  * the size which was configured at the store creation, {@link #getRecordSize()} returns what the store header says.\n  */\n-public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRecord,IntStoreHeader>\n-        implements DynamicRecordAllocator\n+public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRecord, IntStoreHeader>\n+  implements DynamicRecordAllocator\n {\n     public AbstractDynamicStore(\n-            Path path,\n-            Path idFile,\n-            Config conf,\n-            IdType idType,\n-            IdGeneratorFactory idGeneratorFactory,\n-            PageCache pageCache,\n-            LogProvider logProvider,\n-            String typeDescriptor,\n-            int dataSizeFromConfiguration,\n-            RecordFormat<DynamicRecord> recordFormat,\n-            String storeVersion,\n-            ImmutableSet<OpenOption> openOptions )\n+      Path path,\n+      Path idFile,\n+      Config conf,\n+      IdType idType,\n+      IdGeneratorFactory idGeneratorFactory,\n+      PageCache pageCache,\n+      LogProvider logProvider,\n+      String typeDescriptor,\n+      int dataSizeFromConfiguration,\n+      RecordFormat<DynamicRecord> recordFormat,\n+      String storeVersion,\n+      ImmutableSet<OpenOption> openOptions)\n     {\n-        super( path, idFile, conf, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n-                recordFormat, new DynamicStoreHeaderFormat( dataSizeFromConfiguration, recordFormat ),\n-                storeVersion, openOptions );\n+        super(path, idFile, conf, idType, idGeneratorFactory, pageCache, logProvider, typeDescriptor,\n+          recordFormat, new DynamicStoreHeaderFormat(dataSizeFromConfiguration, recordFormat),\n+          storeVersion, openOptions);\n     }\n \n-    public static void allocateRecordsFromBytes( Collection<DynamicRecord> recordList, byte[] src, DynamicRecordAllocator dynamicRecordAllocator,\n-            PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    public static void allocateRecordsFromBytes(Collection<DynamicRecord> recordList, byte[] src, DynamicRecordAllocator dynamicRecordAllocator,\n+                                                PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        requireNonNull( src );\n+        requireNonNull(src);\n \n         int dataSize = dynamicRecordAllocator.getRecordDataSize();\n         int payloadSize = src.length;\n         int lastBlockSize = payloadSize % dataSize;\n \n-        long fullBlockSize = DynamicRecord.SHALLOW_SIZE + alignObjectSize( ARRAY_HEADER_BYTES + dataSize );\n+        long fullBlockSize = DynamicRecord.SHALLOW_SIZE + alignObjectSize(ARRAY_HEADER_BYTES + dataSize);\n         int numberOfFullBlocks = payloadSize / dataSize;\n         long totalSize = numberOfFullBlocks * fullBlockSize;\n \n-        if ( lastBlockSize != 0 )\n+        if (lastBlockSize != 0)\n         {\n-            totalSize += DynamicRecord.SHALLOW_SIZE + alignObjectSize( ARRAY_HEADER_BYTES + lastBlockSize );\n+            totalSize += DynamicRecord.SHALLOW_SIZE + alignObjectSize(ARRAY_HEADER_BYTES + lastBlockSize);\n         }\n \n-        memoryTracker.allocateHeap( totalSize );\n+        memoryTracker.allocateHeap(totalSize);\n \n-        DynamicRecord nextRecord = dynamicRecordAllocator.nextRecord( cursorTracer );\n+        DynamicRecord nextRecord = dynamicRecordAllocator.nextRecord(cursorTracer);\n         int srcOffset = 0;\n         do\n         {\n             DynamicRecord record = nextRecord;\n-            record.setStartRecord( srcOffset == 0 );\n-            if ( payloadSize - srcOffset > dataSize )\n+            record.setStartRecord(srcOffset == 0);\n+            if (payloadSize - srcOffset > dataSize)\n             {\n                 byte[] data = new byte[dataSize];\n-                System.arraycopy( src, srcOffset, data, 0, dataSize );\n-                record.setData( data );\n-                nextRecord = dynamicRecordAllocator.nextRecord( cursorTracer );\n-                record.setNextBlock( nextRecord.getId() );\n+                System.arraycopy(src, srcOffset, data, 0, dataSize);\n+                record.setData(data);\n+                nextRecord = dynamicRecordAllocator.nextRecord(cursorTracer);\n+                record.setNextBlock(nextRecord.getId());\n                 srcOffset += dataSize;\n-            }\n-            else\n+            } else\n             {\n                 byte[] data = new byte[payloadSize - srcOffset];\n-                System.arraycopy( src, srcOffset, data, 0, data.length );\n-                record.setData( data );\n+                System.arraycopy(src, srcOffset, data, 0, data.length);\n+                record.setData(data);\n                 nextRecord = null;\n-                record.setNextBlock( Record.NO_NEXT_BLOCK.intValue() );\n+                record.setNextBlock(Record.NO_NEXT_BLOCK.intValue());\n             }\n-            recordList.add( record );\n+            recordList.add(record);\n             assert record.getData() != null;\n         }\n-        while ( nextRecord != null );\n+        while (nextRecord != null);\n     }\n \n     /**\n      * @return a {@link ByteBuffer#slice() sliced} {@link ByteBuffer} wrapping {@code target} or,\n      * if necessary a new larger {@code byte[]} and containing exactly all concatenated data read from records\n      */\n-    public static ByteBuffer concatData( Collection<DynamicRecord> records, byte[] target )\n+    public static ByteBuffer concatData(Collection<DynamicRecord> records, byte[] target)\n     {\n         int totalLength = 0;\n-        for ( DynamicRecord record : records )\n+        for (DynamicRecord record : records)\n         {\n             totalLength += record.getLength();\n         }\n \n-        if ( target.length < totalLength )\n+        if (target.length < totalLength)\n         {\n             target = new byte[totalLength];\n         }\n \n-        ByteBuffer buffer = ByteBuffer.wrap( target, 0, totalLength );\n-        for ( DynamicRecord record : records )\n+        ByteBuffer buffer = ByteBuffer.wrap(target, 0, totalLength);\n+        for (DynamicRecord record : records)\n         {\n-            buffer.put( record.getData() );\n+            buffer.put(record.getData());\n         }\n-        buffer.position( 0 );\n+        buffer.position(0);\n         return buffer;\n     }\n \n@@ -171,84 +171,84 @@ public abstract class AbstractDynamicStore extends CommonAbstractStore<DynamicRe\n      * @return Pair&lt; header-in-first-record , all-other-bytes &gt;\n      */\n     public static Pair<byte[], byte[]> readFullByteArrayFromHeavyRecords(\n-            Iterable<DynamicRecord> records, PropertyType propertyType )\n+      Iterable<DynamicRecord> records, PropertyType propertyType)\n     {\n         byte[] header = null;\n         List<byte[]> byteList = new ArrayList<>();\n         int totalSize = 0;\n         int i = 0;\n-        for ( DynamicRecord record : records )\n+        for (DynamicRecord record : records)\n         {\n             int offset = 0;\n-            if ( i++ == 0 )\n+            if (i++ == 0)\n             {   // This is the first one, read out the header separately\n-                header = propertyType.readDynamicRecordHeader( record.getData() );\n+                header = propertyType.readDynamicRecordHeader(record.getData());\n                 offset = header.length;\n             }\n \n-            byteList.add( record.getData() );\n+            byteList.add(record.getData());\n             totalSize += record.getData().length - offset;\n         }\n         byte[] bArray = new byte[totalSize];\n         assert header != null :\n-                \"header should be non-null since records should not be empty: \" + Iterables.toString( records, \", \" );\n+          \"header should be non-null since records should not be empty: \" + Iterables.toString(records, \", \");\n         int sourceOffset = header.length;\n         int offset = 0;\n-        for ( byte[] currentArray : byteList )\n+        for (byte[] currentArray : byteList)\n         {\n-            System.arraycopy( currentArray, sourceOffset, bArray, offset,\n-                    currentArray.length - sourceOffset );\n+            System.arraycopy(currentArray, sourceOffset, bArray, offset,\n+              currentArray.length - sourceOffset);\n             offset += currentArray.length - sourceOffset;\n             sourceOffset = 0;\n         }\n-        return Pair.of( header, bArray );\n+        return Pair.of(header, bArray);\n     }\n \n     @Override\n-    public DynamicRecord nextRecord( PageCursorTracer cursorTracer )\n+    public DynamicRecord nextRecord(PageCursorTracer cursorTracer)\n     {\n-        return StandardDynamicRecordAllocator.allocateRecord( nextId( cursorTracer ) );\n+        return StandardDynamicRecordAllocator.allocateRecord(nextId(cursorTracer));\n     }\n \n-    void allocateRecordsFromBytes( Collection<DynamicRecord> target, byte[] src, PageCursorTracer cursorTracer, MemoryTracker memoryTracker )\n+    void allocateRecordsFromBytes(Collection<DynamicRecord> target, byte[] src, PageCursorTracer cursorTracer, MemoryTracker memoryTracker)\n     {\n-        allocateRecordsFromBytes( target, src, this, cursorTracer, memoryTracker );\n+        allocateRecordsFromBytes(target, src, this, cursorTracer, memoryTracker);\n     }\n \n     @Override\n     public String toString()\n     {\n         return super.toString() + \"[fileName:\" + storageFile.getFileName() +\n-                \", blockSize:\" + getRecordDataSize() + \"]\";\n+          \", blockSize:\" + getRecordDataSize() + \"]\";\n     }\n \n-    Pair<byte[]/*header in the first record*/, byte[]/*all other bytes*/> readFullByteArray( Iterable<DynamicRecord> records, PropertyType propertyType,\n-            PageCursorTracer cursorTracer )\n+    Pair<byte[]/*header in the first record*/, byte[]/*all other bytes*/> readFullByteArray(Iterable<DynamicRecord> records, PropertyType propertyType,\n+                                                                                            PageCursorTracer cursorTracer)\n     {\n-        for ( DynamicRecord record : records )\n+        for (DynamicRecord record : records)\n         {\n-            ensureHeavy( record, cursorTracer );\n+            ensureHeavy(record, cursorTracer);\n         }\n \n-        return readFullByteArrayFromHeavyRecords( records, propertyType );\n+        return readFullByteArrayFromHeavyRecords(records, propertyType);\n     }\n \n     private static class DynamicStoreHeaderFormat extends IntStoreHeaderFormat\n     {\n-        DynamicStoreHeaderFormat( int dataSizeFromConfiguration, RecordFormat<DynamicRecord> recordFormat )\n+        DynamicStoreHeaderFormat(int dataSizeFromConfiguration, RecordFormat<DynamicRecord> recordFormat)\n         {\n-            super( dataSizeFromConfiguration + recordFormat.getRecordHeaderSize() );\n+            super(dataSizeFromConfiguration + recordFormat.getRecordHeaderSize());\n         }\n \n         @Override\n-        public void writeHeader( PageCursor cursor )\n+        public void writeHeader(PageCursor cursor)\n         {\n-            if ( header < 1 || header > 0xFFFF )\n+            if (header < 1 || header > 0xFFFF)\n             {\n                 throw new IllegalArgumentException(\n-                        \"Illegal block size[\" + header + \"], limit is 65535\" );\n+                  \"Illegal block size[\" + header + \"], limit is 65535\");\n             }\n-            super.writeHeader( cursor );\n+            super.writeHeader(cursor);\n         }\n     }\n }\n",
            "diff_size": 72
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}