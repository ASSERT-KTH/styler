{
    "project_name": "opencb-opencga",
    "error_id": "390",
    "information": {
        "errors": [
            {
                "line": "105",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 150).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "                                try {\n                                    // Sample still doesn't exist, so we create it\n                                    OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().create(study, new Sample().setId(sampleId),\n                                            QueryOptions.empty(), token);\n                                    if (sampleResult.getNumResults() != 1) {\n                                        throw new CatalogException(\"Could not create sample '\" + sampleId + \"'\");",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/390/PostLinkSampleAssociation.java\nindex a3744cae0ae..2cac04006f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler/390/PostLinkSampleAssociation.java\n@@ -102,7 +102,8 @@ public class PostLinkSampleAssociation extends OpenCgaToolScopeStudy {\n                             if (!sampleExists(sampleId)) {\n                                 try {\n                                     // Sample still doesn't exist, so we create it\n-                                    OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().create(study, new Sample().setId(sampleId),\n+                                    OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().create(study, new Sample()\n+                                    .setId(sampleId),\n                                             QueryOptions.empty(), token);\n                                     if (sampleResult.getNumResults() != 1) {\n                                         throw new CatalogException(\"Could not create sample '\" + sampleId + \"'\");\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/390/PostLinkSampleAssociation.java\nindex a3744cae0ae..2d08a7589fe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/390/PostLinkSampleAssociation.java\n@@ -23,180 +23,180 @@ import org.opencb.opencga.core.tools.annotations.ToolParams;\n import java.util.*;\n \n @Tool(id = PostLinkSampleAssociation.ID, resource = Enums.Resource.FILE, type = Tool.Type.OPERATION,\n-        description = PostLinkSampleAssociation.DESCRIPTION)\n+    description = PostLinkSampleAssociation.DESCRIPTION)\n public class PostLinkSampleAssociation extends OpenCgaToolScopeStudy {\n \n-    public static final String ID = \"postlink\";\n-    public static final String DESCRIPTION = \"Associate samples to files that were linked and could not associate their samples because \"\n-            + \"the number of samples contained was too high.\";\n+  public static final String ID = \"postlink\";\n+  public static final String DESCRIPTION = \"Associate samples to files that were linked and could not associate their samples because \"\n+      + \"the number of samples contained was too high.\";\n \n-    @ToolParams\n-    protected final PostLinkToolParams postLinkParams = new PostLinkToolParams();\n+  @ToolParams\n+  protected final PostLinkToolParams postLinkParams = new PostLinkToolParams();\n \n-    @Override\n-    protected void check() throws Exception {\n-        super.check();\n-        // Add default batch size\n-        if (postLinkParams.getBatchSize() == null || postLinkParams.getBatchSize() <= 0) {\n-            postLinkParams.setBatchSize(1000);\n-        }\n+  @Override\n+  protected void check() throws Exception {\n+    super.check();\n+    // Add default batch size\n+    if (postLinkParams.getBatchSize() == null || postLinkParams.getBatchSize() <= 0) {\n+      postLinkParams.setBatchSize(1000);\n+    }\n+  }\n+\n+  @Override\n+  protected void run() throws Exception {\n+    // Obtain an iterator to get all the files that were link and not associated to any of its samples\n+    Query fileQuery = new Query(FileDBAdaptor.QueryParams.INTERNAL_STATUS_NAME.key(), FileStatus.MISSING_SAMPLES);\n+    QueryOptions options = new QueryOptions(FileManager.INCLUDE_FILE_URI_PATH);\n+    List<String> includeList = new ArrayList<>(options.getAsStringList(QueryOptions.INCLUDE));\n+    includeList.add(FileDBAdaptor.QueryParams.INTERNAL_MISSING_SAMPLES.key());\n+    includeList.add(FileDBAdaptor.QueryParams.INTERNAL_STATUS.key());\n+    options.put(QueryOptions.INCLUDE, includeList);\n+    options.put(QueryOptions.LIMIT, 20);\n+    options.put(QueryOptions.COUNT, true);\n+\n+    List<String> files = null;\n+    if (CollectionUtils.isEmpty(postLinkParams.getFiles())\n+        || postLinkParams.getFiles().size() == 1 && postLinkParams.getFiles().get(0).equals(ParamConstants.ALL)) {\n+      logger.info(\"Processing all files with internal status = '\" + FileStatus.MISSING_SAMPLES + \"'\");\n+    } else {\n+      files = new LinkedList<>(postLinkParams.getFiles());\n     }\n \n-    @Override\n-    protected void run() throws Exception {\n-        // Obtain an iterator to get all the files that were link and not associated to any of its samples\n-        Query fileQuery = new Query(FileDBAdaptor.QueryParams.INTERNAL_STATUS_NAME.key(), FileStatus.MISSING_SAMPLES);\n-        QueryOptions options = new QueryOptions(FileManager.INCLUDE_FILE_URI_PATH);\n-        List<String> includeList = new ArrayList<>(options.getAsStringList(QueryOptions.INCLUDE));\n-        includeList.add(FileDBAdaptor.QueryParams.INTERNAL_MISSING_SAMPLES.key());\n-        includeList.add(FileDBAdaptor.QueryParams.INTERNAL_STATUS.key());\n-        options.put(QueryOptions.INCLUDE, includeList);\n-        options.put(QueryOptions.LIMIT, 20);\n-        options.put(QueryOptions.COUNT, true);\n-\n-        List<String> files = null;\n-        if (CollectionUtils.isEmpty(postLinkParams.getFiles())\n-                || postLinkParams.getFiles().size() == 1 && postLinkParams.getFiles().get(0).equals(ParamConstants.ALL)) {\n-            logger.info(\"Processing all files with internal status = '\" + FileStatus.MISSING_SAMPLES + \"'\");\n-        } else {\n-            files = new LinkedList<>(postLinkParams.getFiles());\n+    int numPendingFiles = -1;\n+    int numFiles = 0;\n+    while (true) {\n+      OpenCGAResult<File> fileResult;\n+      if (files == null) {\n+        // We need to associate all non-associated files\n+        fileResult = catalogManager.getFileManager().search(study, fileQuery, options, token);\n+        if (fileResult.getNumResults() == 0) {\n+          break;\n+        }\n+      } else {\n+        // We will only process the files provided\n+        if (files.isEmpty()) {\n+          break;\n+        }\n+        fileResult = catalogManager.getFileManager().get(study, files.remove(0), options, token);\n+      }\n+      if (numPendingFiles < 0) {\n+        numPendingFiles = ((int) fileResult.getNumMatches());\n+      }\n+\n+      for (File file : fileResult.getResults()) {\n+        numFiles++;\n+        logger.info(\"Processing file {}/{} - {}\", numFiles, numPendingFiles, file.getId());\n+        // Validate status\n+        if (!FileStatus.MISSING_SAMPLES.equals(file.getInternal().getStatus().getName())) {\n+          // Skip current file. This file seems to be already properly associated\n+          continue;\n         }\n \n-        int numPendingFiles = -1;\n-        int numFiles = 0;\n-        while (true) {\n-            OpenCGAResult<File> fileResult;\n-            if (files == null) {\n-                // We need to associate all non-associated files\n-                fileResult = catalogManager.getFileManager().search(study, fileQuery, options, token);\n-                if (fileResult.getNumResults() == 0) {\n-                    break;\n-                }\n-            } else {\n-                // We will only process the files provided\n-                if (files.isEmpty()) {\n-                    break;\n+        // Process samples that need to be created first\n+        if (file.getInternal() != null && file.getInternal().getMissingSamples() != null) {\n+          List<String> sampleList = new LinkedList<>();\n+\n+          if (CollectionUtils.isNotEmpty(file.getInternal().getMissingSamples().getNonExisting())) {\n+            logger.info(\"Create {} missing samples\", file.getInternal().getMissingSamples().getNonExisting().size());\n+            for (String sampleId : file.getInternal().getMissingSamples().getNonExisting()) {\n+              if (!sampleExists(sampleId)) {\n+                try {\n+                  // Sample still doesn't exist, so we create it\n+                  OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().create(study, new Sample().setId(sampleId),\n+                      QueryOptions.empty(), token);\n+                  if (sampleResult.getNumResults() != 1) {\n+                    throw new CatalogException(\"Could not create sample '\" + sampleId + \"'\");\n+                  }\n+                } catch (CatalogException e) {\n+                  try {\n+                    if (sampleExists(sampleId)) {\n+                      // If sample was successfully created, but still got an exception.\n+                      // Ignore exception\n+\n+                      // Log INFO without stack trace\n+                      logger.info(\"Caught exception creating sample \\\"\" + sampleId + \"\\\",\"\n+                          + \" but sample was actually created. Ignoring \" + e.toString());\n+\n+                      // Log DEBUG with full stack trace\n+                      logger.debug(\"Ignored exception\", e);\n+                    } else {\n+                      // Sample could not be created.\n+                      // Throw exception\n+                      throw e;\n+                    }\n+                  } catch (Exception e1) {\n+                    // Something went wrong. Throw original exception, and add this new as suppressed\n+                    e.addSuppressed(e1);\n+                    throw e;\n+                  }\n                 }\n-                fileResult = catalogManager.getFileManager().get(study, files.remove(0), options, token);\n+              }\n+\n+              sampleList.add(sampleId);\n             }\n-            if (numPendingFiles < 0) {\n-                numPendingFiles = ((int) fileResult.getNumMatches());\n+          }\n+\n+          if (file.getInternal().getMissingSamples().getExisting() != null) {\n+            // Process existing samples\n+            sampleList.addAll(file.getInternal().getMissingSamples().getExisting());\n+          }\n+\n+          // Create sample batches\n+          int batchSize = postLinkParams.getBatchSize();\n+          List<List<String>> sampleListList = new ArrayList<>((sampleList.size() / batchSize) + 1);\n+          // Create batches\n+          List<String> currentList = null;\n+          for (int i = 0; i < sampleList.size(); i++) {\n+            if (i % batchSize == 0) {\n+              currentList = new ArrayList<>(batchSize);\n+              sampleListList.add(currentList);\n             }\n \n-            for (File file : fileResult.getResults()) {\n-                numFiles++;\n-                logger.info(\"Processing file {}/{} - {}\", numFiles, numPendingFiles, file.getId());\n-                // Validate status\n-                if (!FileStatus.MISSING_SAMPLES.equals(file.getInternal().getStatus().getName())) {\n-                    // Skip current file. This file seems to be already properly associated\n-                    continue;\n-                }\n-\n-                // Process samples that need to be created first\n-                if (file.getInternal() != null && file.getInternal().getMissingSamples() != null) {\n-                    List<String> sampleList = new LinkedList<>();\n-\n-                    if (CollectionUtils.isNotEmpty(file.getInternal().getMissingSamples().getNonExisting())) {\n-                        logger.info(\"Create {} missing samples\", file.getInternal().getMissingSamples().getNonExisting().size());\n-                        for (String sampleId : file.getInternal().getMissingSamples().getNonExisting()) {\n-                            if (!sampleExists(sampleId)) {\n-                                try {\n-                                    // Sample still doesn't exist, so we create it\n-                                    OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().create(study, new Sample().setId(sampleId),\n-                                            QueryOptions.empty(), token);\n-                                    if (sampleResult.getNumResults() != 1) {\n-                                        throw new CatalogException(\"Could not create sample '\" + sampleId + \"'\");\n-                                    }\n-                                } catch (CatalogException e) {\n-                                    try {\n-                                        if (sampleExists(sampleId)) {\n-                                            // If sample was successfully created, but still got an exception.\n-                                            // Ignore exception\n-\n-                                            // Log INFO without stack trace\n-                                            logger.info(\"Caught exception creating sample \\\"\" + sampleId + \"\\\",\"\n-                                                    + \" but sample was actually created. Ignoring \" + e.toString());\n-\n-                                            // Log DEBUG with full stack trace\n-                                            logger.debug(\"Ignored exception\", e);\n-                                        } else {\n-                                            // Sample could not be created.\n-                                            // Throw exception\n-                                            throw e;\n-                                        }\n-                                    } catch (Exception e1) {\n-                                        // Something went wrong. Throw original exception, and add this new as suppressed\n-                                        e.addSuppressed(e1);\n-                                        throw e;\n-                                    }\n-                                }\n-                            }\n-\n-                            sampleList.add(sampleId);\n-                        }\n-                    }\n-\n-                    if (file.getInternal().getMissingSamples().getExisting() != null) {\n-                        // Process existing samples\n-                        sampleList.addAll(file.getInternal().getMissingSamples().getExisting());\n-                    }\n-\n-                    // Create sample batches\n-                    int batchSize = postLinkParams.getBatchSize();\n-                    List<List<String>> sampleListList = new ArrayList<>((sampleList.size() / batchSize) + 1);\n-                    // Create batches\n-                    List<String> currentList = null;\n-                    for (int i = 0; i < sampleList.size(); i++) {\n-                        if (i % batchSize == 0) {\n-                            currentList = new ArrayList<>(batchSize);\n-                            sampleListList.add(currentList);\n-                        }\n-\n-                        currentList.add(sampleList.get(i));\n-                    }\n-                    if (!sampleList.isEmpty()) {\n-                        logger.info(\"Update {} samples in {} batches\", sampleList.size(), sampleListList.size());\n-                    }\n-\n-                    // Update file\n-                    ObjectMap actionMap = new ObjectMap()\n-                            .append(FileDBAdaptor.QueryParams.SAMPLE_IDS.key(), ParamUtils.BasicUpdateAction.ADD);\n-\n-                    int sampleListCount = 0;\n-                    for (List<String> auxSampleList : sampleListList) {\n-                        sampleListCount++;\n-                        logger.info(\"Update batch {}/{} with {} samples\", sampleListCount, sampleListList.size(), auxSampleList.size());\n-                        FileUpdateParams fileUpdateParams = new FileUpdateParams()\n-                                .setSampleIds(auxSampleList);\n-\n-                        QueryOptions queryOptions = new QueryOptions(Constants.ACTIONS, actionMap);\n-\n-                        OpenCGAResult<File> fileUpdateResult = catalogManager.getFileManager().update(study, file.getUuid(),\n-                                fileUpdateParams, queryOptions, token);\n-                        if (fileUpdateResult.getNumUpdated() != 1) {\n-                            throw new CatalogException(\"Could not update sample list of file '\" + file.getPath() + \"'.\");\n-                        }\n-                    }\n+            currentList.add(sampleList.get(i));\n+          }\n+          if (!sampleList.isEmpty()) {\n+            logger.info(\"Update {} samples in {} batches\", sampleList.size(), sampleListList.size());\n+          }\n+\n+          // Update file\n+          ObjectMap actionMap = new ObjectMap()\n+              .append(FileDBAdaptor.QueryParams.SAMPLE_IDS.key(), ParamUtils.BasicUpdateAction.ADD);\n+\n+          int sampleListCount = 0;\n+          for (List<String> auxSampleList : sampleListList) {\n+            sampleListCount++;\n+            logger.info(\"Update batch {}/{} with {} samples\", sampleListCount, sampleListList.size(), auxSampleList.size());\n+            FileUpdateParams fileUpdateParams = new FileUpdateParams()\n+                .setSampleIds(auxSampleList);\n+\n+            QueryOptions queryOptions = new QueryOptions(Constants.ACTIONS, actionMap);\n+\n+            OpenCGAResult<File> fileUpdateResult = catalogManager.getFileManager().update(study, file.getUuid(),\n+                fileUpdateParams, queryOptions, token);\n+            if (fileUpdateResult.getNumUpdated() != 1) {\n+              throw new CatalogException(\"Could not update sample list of file '\" + file.getPath() + \"'.\");\n+            }\n+          }\n \n-                    // Now that all the samples are updated, we update the internal status\n-                    FileUpdateParams fileUpdateParams = new FileUpdateParams()\n-                            .setInternal(new SmallFileInternal(new FileStatus(FileStatus.READY), MissingSamples.initialize()));\n+          // Now that all the samples are updated, we update the internal status\n+          FileUpdateParams fileUpdateParams = new FileUpdateParams()\n+              .setInternal(new SmallFileInternal(new FileStatus(FileStatus.READY), MissingSamples.initialize()));\n \n-                    OpenCGAResult<File> fileUpdateResult = catalogManager.getFileManager().update(study, file.getUuid(), fileUpdateParams,\n-                            QueryOptions.empty(), token);\n-                    if (fileUpdateResult.getNumUpdated() != 1) {\n-                        throw new CatalogException(\"Could not update internal status of file '\" + file.getPath() + \"'.\");\n-                    }\n-                }\n-            }\n+          OpenCGAResult<File> fileUpdateResult = catalogManager.getFileManager().update(study, file.getUuid(), fileUpdateParams,\n+              QueryOptions.empty(), token);\n+          if (fileUpdateResult.getNumUpdated() != 1) {\n+            throw new CatalogException(\"Could not update internal status of file '\" + file.getPath() + \"'.\");\n+          }\n         }\n+      }\n     }\n+  }\n \n-    private boolean sampleExists(String sampleId) throws CatalogException {\n-        Query sampleQuery = new Query(SampleDBAdaptor.QueryParams.ID.key(), sampleId);\n-        OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().search(study, sampleQuery,\n-                SampleManager.INCLUDE_SAMPLE_IDS, token);\n+  private boolean sampleExists(String sampleId) throws CatalogException {\n+    Query sampleQuery = new Query(SampleDBAdaptor.QueryParams.ID.key(), sampleId);\n+    OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().search(study, sampleQuery,\n+        SampleManager.INCLUDE_SAMPLE_IDS, token);\n \n-        return sampleResult.getNumResults() == 1;\n-    }\n+    return sampleResult.getNumResults() == 1;\n+  }\n }\n",
            "diff_size": 229
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "105",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 150).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/390/PostLinkSampleAssociation.java\nindex a3744cae0ae..f31a2c873ca 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/390/PostLinkSampleAssociation.java\n@@ -199,4 +199,4 @@ public class PostLinkSampleAssociation extends OpenCgaToolScopeStudy {\n \n         return sampleResult.getNumResults() == 1;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/390/PostLinkSampleAssociation.java\nindex a3744cae0ae..2cac04006f2 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_random/390/PostLinkSampleAssociation.java\n@@ -102,7 +102,8 @@ public class PostLinkSampleAssociation extends OpenCgaToolScopeStudy {\n                             if (!sampleExists(sampleId)) {\n                                 try {\n                                     // Sample still doesn't exist, so we create it\n-                                    OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().create(study, new Sample().setId(sampleId),\n+                                    OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().create(study, new Sample()\n+                                    .setId(sampleId),\n                                             QueryOptions.empty(), token);\n                                     if (sampleResult.getNumResults() != 1) {\n                                         throw new CatalogException(\"Could not create sample '\" + sampleId + \"'\");\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "105",
                    "column": "62",
                    "severity": "error",
                    "message": "'>' is followed by an illegal character.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "105",
                    "column": "117",
                    "severity": "error",
                    "message": "'(' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.MethodParamPadCheck"
                },
                {
                    "line": "105",
                    "column": "118",
                    "severity": "error",
                    "message": "'(' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/390/PostLinkSampleAssociation.java\nindex a3744cae0ae..0ba1cb2a5ee 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/390/PostLinkSampleAssociation.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/390/PostLinkSampleAssociation.java\n@@ -102,8 +102,9 @@ public class PostLinkSampleAssociation extends OpenCgaToolScopeStudy {\n                             if (!sampleExists(sampleId)) {\n                                 try {\n                                     // Sample still doesn't exist, so we create it\n-                                    OpenCGAResult<Sample> sampleResult = catalogManager.getSampleManager().create(study, new Sample().setId(sampleId),\n-                                            QueryOptions.empty(), token);\n+                                        OpenCGAResult<Sample>sampleResult=catalogManager.getSampleManager() .create ( study, new\n+                                        Sample().setId(sampleId),\n+                                             QueryOptions.empty(), token);\n                                     if (sampleResult.getNumResults() != 1) {\n                                         throw new CatalogException(\"Could not create sample '\" + sampleId + \"'\");\n                                     }\n",
            "diff_size": 3
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}