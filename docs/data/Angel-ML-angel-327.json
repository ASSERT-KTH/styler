{
    "project_name": "Angel-ML-angel",
    "error_id": "327",
    "information": {
        "errors": [
            {
                "line": "35",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "   * @return An InetSocketInstance\n   */\n  public static InetSocketAddress createInetSocketAddressFromHostAndPortStr(final String hostAndPort) {\n    return new InetSocketAddress(parseHostname(hostAndPort), parsePort(hostAndPort));\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/327/Addressing.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/327/Addressing.java\nindex c2ded6c7bc4..913edcb2c48 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/327/Addressing.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/327/Addressing.java\n@@ -1,5 +1,4 @@\n /**\n- *\n  * Licensed to the Apache Software Foundation (ASF) under one\n  * or more contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n@@ -7,9 +6,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -32,7 +31,8 @@ public class Addressing {\n    * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n    * @return An InetSocketInstance\n    */\n-  public static InetSocketAddress createInetSocketAddressFromHostAndPortStr(final String hostAndPort) {\n+  public static InetSocketAddress createInetSocketAddressFromHostAndPortStr(\n+      final String hostAndPort) {\n     return new InetSocketAddress(parseHostname(hostAndPort), parsePort(hostAndPort));\n   }\n \n",
            "diff_size": 6
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/327/Addressing.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/327/Addressing.java\nindex c2ded6c7bc4..a0f1ba0d480 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/327/Addressing.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/327/Addressing.java\n@@ -71,4 +71,4 @@ public class Addressing {\n     }\n     return Integer.parseInt(hostAndPort.substring(colonIndex + 1));\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "39",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/327/Addressing.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/327/Addressing.java\nindex c2ded6c7bc4..27c422815ae 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/327/Addressing.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/327/Addressing.java\n@@ -24,14 +24,18 @@ import java.net.InetSocketAddress;\n /**\n  * Utility for network addresses, resolving and naming.\n  */\n+\n public class Addressing {\n+\n   public static final String VALID_PORT_REGEX = \"[\\\\d]+\";\n+\n   public static final String HOSTNAME_PORT_SEPARATOR = \":\";\n \n   /**\n    * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n    * @return An InetSocketInstance\n    */\n+\n   public static InetSocketAddress createInetSocketAddressFromHostAndPortStr(final String hostAndPort) {\n     return new InetSocketAddress(parseHostname(hostAndPort), parsePort(hostAndPort));\n   }\n@@ -44,6 +48,7 @@ public class Addressing {\n    *         <code>example.org</code> and port is 1234, this method will return\n    *         <code>example.org:1234</code>\n    */\n+\n   public static String createHostAndPortStr(final String hostname, final int port) {\n     return hostname + HOSTNAME_PORT_SEPARATOR + port;\n   }\n@@ -52,6 +57,7 @@ public class Addressing {\n    * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n    * @return The hostname portion of <code>hostAndPort</code>\n    */\n+\n   public static String parseHostname(final String hostAndPort) {\n     int colonIndex = hostAndPort.lastIndexOf(HOSTNAME_PORT_SEPARATOR);\n     if (colonIndex < 0) {\n@@ -64,6 +70,7 @@ public class Addressing {\n    * @param hostAndPort Formatted as <code>&lt;hostname> ':' &lt;port></code>\n    * @return The port portion of <code>hostAndPort</code>\n    */\n+\n   public static int parsePort(final String hostAndPort) {\n     int colonIndex = hostAndPort.lastIndexOf(HOSTNAME_PORT_SEPARATOR);\n     if (colonIndex < 0) {\n@@ -71,4 +78,5 @@ public class Addressing {\n     }\n     return Integer.parseInt(hostAndPort.substring(colonIndex + 1));\n   }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "35",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}