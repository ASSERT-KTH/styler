{
    "project_name": "GluuFederation-oxCore",
    "error_id": "97",
    "information": {
        "errors": [
            {
                "line": "102",
                "column": "1",
                "severity": "error",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    }\n\n\t@Override\n\tpublic boolean hasKey(String key) {\n        Boolean hasKey = pool.getResource().exists(key);\n",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "103",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/97/RedisShardedProvider.java\nindex 7c116138501..9f2270d160c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler/97/RedisShardedProvider.java\n@@ -99,7 +99,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n+    @Override\n \tpublic boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/97/RedisShardedProvider.java\nindex 7c116138501..183d52e8795 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/intellij/97/RedisShardedProvider.java\n@@ -67,8 +67,8 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n                     if (configuration.getUseSSL()) {\n                         if (StringUtils.isNotBlank(configuration.getSslTrustStoreFilePath())) {\n                             shardInfo = new JedisShardInfo(host, port, true,\n-                                    RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())),\n-                                    new SSLParameters(), new DefaultHostnameVerifier());\n+                                RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())),\n+                                new SSLParameters(), new DefaultHostnameVerifier());\n                         } else {\n                             shardInfo = new JedisShardInfo(host, port, true);\n                         }\n@@ -99,12 +99,12 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n-\tpublic boolean hasKey(String key) {\n+    @Override\n+    public boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n         return Boolean.TRUE.equals(hasKey);\n-\t}\n+    }\n \n     @Override\n     public Object get(String key) {\n",
            "diff_size": 5
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 195).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "102",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/97/RedisShardedProvider.java\nindex 7c116138501..346686f153f 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/naturalize/97/RedisShardedProvider.java\n@@ -67,8 +67,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n                     if (configuration.getUseSSL()) {\n                         if (StringUtils.isNotBlank(configuration.getSslTrustStoreFilePath())) {\n                             shardInfo = new JedisShardInfo(host, port, true,\n-                                    RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())),\n-                                    new SSLParameters(), new DefaultHostnameVerifier());\n+                                    RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())), new SSLParameters(), new DefaultHostnameVerifier());\n                         } else {\n                             shardInfo = new JedisShardInfo(host, port, true);\n                         }\n@@ -99,14 +98,14 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n+@Override\n \tpublic boolean hasKey(String key) {\n-        Boolean hasKey = pool.getResource().exists(key);\n+    Boolean hasKey = pool.getResource().exists(key);\n \n         return Boolean.TRUE.equals(hasKey);\n-\t}\n+    }\n \n-    @Override\n+@Override\n     public Object get(String key) {\n         ShardedJedis jedis = pool.getResource();\n         try {\n@@ -158,4 +157,4 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n     public void clear() {\n         LOG.trace(\"clear not supported by sharded implemented\");\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "63",
                    "severity": "error",
                    "message": "Line is longer than 150 characters (found 236).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/97/RedisShardedProvider.java\nindex 7c116138501..8bc05fe8dfd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/codebuff/97/RedisShardedProvider.java\n@@ -4,15 +4,12 @@ import java.io.File;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.net.ssl.SSLParameters;\n-\n import org.apache.commons.lang.SerializationUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.http.conn.ssl.DefaultHostnameVerifier;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-\n import redis.clients.jedis.JedisPoolConfig;\n import redis.clients.jedis.JedisShardInfo;\n import redis.clients.jedis.ShardedJedis;\n@@ -23,10 +20,11 @@ import redis.clients.jedis.ShardedJedisPool;\n  *\n  * @author yuriyz on 02/23/2017.\n  */\n+\n+\n public class RedisShardedProvider extends AbstractRedisProvider {\n \n     private static final Logger LOG = LoggerFactory.getLogger(RedisShardedProvider.class);\n-\n     private ShardedJedisPool pool;\n \n     public RedisShardedProvider(RedisConfiguration redisConfiguration) {\n@@ -40,9 +38,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n             JedisPoolConfig poolConfig = new JedisPoolConfig();\n             poolConfig.setMaxTotal(1000);\n             poolConfig.setMinIdle(2);\n-\n             pool = new ShardedJedisPool(poolConfig, shards(redisConfiguration));\n-\n             testConnection();\n             LOG.debug(\"RedisShardedProvider started.\");\n         } catch (Exception e) {\n@@ -53,7 +49,6 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n \n     private static List<JedisShardInfo> shards(RedisConfiguration configuration) {\n         final String[] serverWithPorts = StringUtils.split(configuration.getServers().trim(), \",\");\n-\n         List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>();\n         for (String serverWithPort : serverWithPorts) {\n             serverWithPort = serverWithPort.trim();\n@@ -61,20 +56,18 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n                 final String[] split = serverWithPort.trim().split(\":\");\n                 String host = split[0];\n                 int port = Integer.parseInt(split[1].trim());\n-\n                 try {\n                     final JedisShardInfo shardInfo;\n                     if (configuration.getUseSSL()) {\n                         if (StringUtils.isNotBlank(configuration.getSslTrustStoreFilePath())) {\n-                            shardInfo = new JedisShardInfo(host, port, true,\n-                                    RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())),\n-                                    new SSLParameters(), new DefaultHostnameVerifier());\n+                            shardInfo = new JedisShardInfo(host, port, true, RedisProviderFactory.createTrustStoreSslSocketFactory(new File(configuration.getSslTrustStoreFilePath())), new SSLParameters(), new DefaultHostnameVerifier());\n                         } else {\n                             shardInfo = new JedisShardInfo(host, port, true);\n                         }\n                     } else {\n                         shardInfo = new JedisShardInfo(host, port);\n                     }\n+\n                     shards.add(shardInfo);\n                 } catch (Exception e) {\n                     LOG.error(\"Failed to create shard info.\", e);\n@@ -83,14 +76,13 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n                 shards.add(new JedisShardInfo(serverWithPort));\n             }\n         }\n+\n         return shards;\n     }\n \n     public void destroy() {\n         LOG.debug(\"Destroying RedisShardedProvider\");\n-\n         pool.close();\n-\n         LOG.debug(\"Destroyed RedisShardedProvider\");\n     }\n \n@@ -99,12 +91,12 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n-\tpublic boolean hasKey(String key) {\n+    @Override\n+    public boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n         return Boolean.TRUE.equals(hasKey);\n-\t}\n+    }\n \n     @Override\n     public Object get(String key) {\n@@ -115,6 +107,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n             if (value != null && value.length > 0) {\n                 deserialized = SerializationUtils.deserialize(value);\n             }\n+\n             return deserialized;\n         } finally {\n             jedis.close();\n@@ -125,7 +118,9 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n     public void put(int expirationInSeconds, String key, Object object) {\n         ShardedJedis jedis = pool.getResource();\n         try {\n-            String status = jedis.setex(key.getBytes(), expirationInSeconds, SerializationUtils.serialize((Serializable) object));\n+            String status = jedis.setex(key.getBytes(),\n+                expirationInSeconds,\n+                    SerializationUtils.serialize((Serializable) object));\n             LOG.trace(\"put - key: \" + key + \", status: \" + status);\n         } finally {\n             jedis.close();\n@@ -158,4 +153,5 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n     public void clear() {\n         LOG.trace(\"clear not supported by sharded implemented\");\n     }\n-}\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 26
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "103",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/97/RedisShardedProvider.java\nindex 7c116138501..9f2270d160c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_random/97/RedisShardedProvider.java\n@@ -99,7 +99,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n+    @Override\n \tpublic boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "103",
                    "column": "1",
                    "severity": "error",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/97/RedisShardedProvider.java\nindex 7c116138501..9f2270d160c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/errored/1/97/RedisShardedProvider.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/GluuFederation-oxCore/styler_three_grams/97/RedisShardedProvider.java\n@@ -99,7 +99,7 @@ public class RedisShardedProvider extends AbstractRedisProvider {\n         return pool;\n     }\n \n-\t@Override\n+    @Override\n \tpublic boolean hasKey(String key) {\n         Boolean hasKey = pool.getResource().exists(key);\n \n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}