{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1866",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "34",
                    "column": "66",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "34",
                    "column": "116",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "60",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "62",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1866/Registers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1866/Registers.java\nindex d215a191825..fe7b1d65c3a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1866/Registers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1866/Registers.java\n@@ -17,69 +17,70 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.register;\n \n public class Registers\n {\n-    private Registers()\n-    {\n-    }\n+  private Registers()\n+  {\n+  }\n \n-    public static Register.DoubleLongRegister newDoubleLongRegister()\n-    {\n-        return newDoubleLongRegister( -1L, -1L );\n-    }\n+  public static Register.DoubleLongRegister newDoubleLongRegister()\n+  {\n+    return newDoubleLongRegister(-1L, -1L);\n+  }\n \n-    public static Register.DoubleLongRegister newDoubleLongRegister( final long initialFirst, final long initialSecond )\n+  public static Register.DoubleLongRegister newDoubleLongRegister(final long initialFirst, final long initialSecond)\n+  {\n+    return new Register.DoubleLongRegister()\n     {\n-        return new Register.DoubleLongRegister()\n-        {\n-            private long first = initialFirst;\n-            private long second = initialSecond;\n+      private long first = initialFirst;\n+      private long second = initialSecond;\n \n-            @Override\n-            public long readFirst()\n-            {\n-                return first;\n-            }\n+      @Override\n+      public long readFirst()\n+      {\n+        return first;\n+      }\n \n-            @Override\n-            public long readSecond()\n-            {\n-                return second;\n-            }\n+      @Override\n+      public long readSecond()\n+      {\n+        return second;\n+      }\n \n-            @Override\n-            public void copyTo( Register.DoubleLong.Out target )\n-            {\n-                target.write( first, second );\n-            }\n+      @Override\n+      public void copyTo(Register.DoubleLong.Out target)\n+      {\n+        target.write(first, second);\n+      }\n \n-            @Override\n-            public boolean hasValues( long first, long second )\n-            {\n-                return this.first == first && this.second == second;\n-            }\n+      @Override\n+      public boolean hasValues(long first, long second)\n+      {\n+        return this.first == first && this.second == second;\n+      }\n \n-            @Override\n-            public void write( long first, long second )\n-            {\n-                this.first = first;\n-                this.second = second;\n-            }\n+      @Override\n+      public void write(long first, long second)\n+      {\n+        this.first = first;\n+        this.second = second;\n+      }\n \n-            @Override\n-            public void increment( long firstDelta, long secondDelta )\n-            {\n-                this.first += firstDelta;\n-                this.second += secondDelta;\n-            }\n+      @Override\n+      public void increment(long firstDelta, long secondDelta)\n+      {\n+        this.first += firstDelta;\n+        this.second += secondDelta;\n+      }\n \n-            @Override\n-            public String toString()\n-            {\n-                return \"DoubleLongRegister{first=\" + first + \", second=\" + second + \"}\";\n-            }\n-        };\n-    }\n+      @Override\n+      public String toString()\n+      {\n+        return \"DoubleLongRegister{first=\" + first + \", second=\" + second + \"}\";\n+      }\n+    };\n+  }\n }\n",
            "diff_size": 54
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1866/Registers.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1866/Registers.java\nindex d215a191825..bd9216039a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1866/Registers.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1866/Registers.java\n@@ -82,4 +82,4 @@ public class Registers\n             }\n         };\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}