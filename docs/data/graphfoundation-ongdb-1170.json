{
    "project_name": "graphfoundation-ongdb",
    "error_id": "1170",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "41",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "41",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "31",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "53",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "63",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "77",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "84",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "87",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "73",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "16",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "111",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "126",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "199",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "241",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "243",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "253",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "259",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1170/StringValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1170/StringValue.java\nindex 99c7dc0a586..dacb89b7077 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1170/StringValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/1170/StringValue.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.values.storable;\n \n import java.util.ArrayList;\n@@ -34,240 +35,237 @@ import static java.lang.String.format;\n \n public abstract class StringValue extends TextValue\n {\n-    abstract String value();\n-\n-    @Override\n-    public boolean equals( Value value )\n+  abstract String value();\n+\n+  @Override\n+  public boolean equals(Value value)\n+  {\n+    return value.equals(value());\n+  }\n+\n+  @Override\n+  public boolean equals(char x)\n+  {\n+    return value().length() == 1 && value().charAt(0) == x;\n+  }\n+\n+  @Override\n+  public boolean equals(String x)\n+  {\n+    return value().equals(x);\n+  }\n+\n+  @Override\n+  public <E extends Exception> void writeTo(ValueWriter<E> writer) throws E\n+  {\n+    writer.writeString(value());\n+  }\n+\n+  @Override\n+  public TextValue toLower()\n+  {\n+    return new StringWrappingStringValue(value().toLowerCase());\n+  }\n+\n+  @Override\n+  public TextValue toUpper()\n+  {\n+    return new StringWrappingStringValue(value().toUpperCase());\n+  }\n+\n+  @Override\n+  public ListValue split(String separator)\n+  {\n+    assert separator != null;\n+    String asString = value();\n+    //Cypher has different semantics for the case where the separator\n+    //is exactly the value, in cypher we expect two empty arrays\n+    //where as java returns an empty array\n+    if (separator.equals(asString))\n+    {\n+      return EMPTY_SPLIT;\n+    } else if (separator.isEmpty())\n     {\n-        return value.equals( value() );\n+      return VirtualValues.fromArray(Values.charArray(asString.toCharArray()));\n     }\n \n-    @Override\n-    public boolean equals( char x )\n+    List<AnyValue> split = splitNonRegex(asString, separator);\n+    return VirtualValues.fromList(split);\n+  }\n+\n+  /**\n+   * Splits a string.\n+   *\n+   * @param input String to be split\n+   * @param delim delimiter, must not be not empty\n+   * @return the split string as a List of TextValues\n+   */\n+  private static List<AnyValue> splitNonRegex(String input, String delim)\n+  {\n+    List<AnyValue> l = new ArrayList<>();\n+    int offset = 0;\n+\n+    while (true)\n     {\n-        return value().length() == 1 && value().charAt( 0 ) == x;\n+      int index = input.indexOf(delim, offset);\n+      if (index == -1)\n+      {\n+        String substring = input.substring(offset);\n+        l.add(Values.stringValue(substring));\n+        return l;\n+      } else\n+      {\n+        String substring = input.substring(offset, index);\n+        l.add(Values.stringValue(substring));\n+        offset = index + delim.length();\n+      }\n     }\n-\n+  }\n+\n+  @Override\n+  public TextValue replace(String find, String replace)\n+  {\n+    assert find != null;\n+    assert replace != null;\n+\n+    return Values.stringValue(value().replace(find, replace));\n+  }\n+\n+  @Override\n+  public Object asObjectCopy()\n+  {\n+    return value();\n+  }\n+\n+  @Override\n+  public String toString()\n+  {\n+    return format(\"%s(\\\"%s\\\")\", getTypeName(), value());\n+  }\n+\n+  @Override\n+  public String getTypeName()\n+  {\n+    return \"String\";\n+  }\n+\n+  @Override\n+  public String stringValue()\n+  {\n+    return value();\n+  }\n+\n+  @Override\n+  public String prettyPrint()\n+  {\n+    return format(\"'%s'\", value());\n+  }\n+\n+  @Override\n+  public <T> T map(ValueMapper<T> mapper)\n+  {\n+    return mapper.mapString(this);\n+  }\n+\n+  @Override\n+  public int compareTo(TextValue other)\n+  {\n+    String thisString = value();\n+    String thatString = other.stringValue();\n+    return thisString.compareTo(thatString);\n+  }\n+\n+  static TextValue EMTPY = new StringValue()\n+  {\n     @Override\n-    public boolean equals( String x )\n+    protected int computeHash()\n     {\n-        return value().equals( x );\n+      return 0;\n     }\n \n     @Override\n-    public <E extends Exception> void writeTo( ValueWriter<E> writer ) throws E\n+    public long updateHash(HashFunction hashFunction, long hash)\n     {\n-        writer.writeString( value() );\n+      return hashFunction.update(hash, 0); // Mix in our length; a single zero.\n     }\n \n     @Override\n-    public TextValue toLower()\n+    public int length()\n     {\n-        return new StringWrappingStringValue( value().toLowerCase() );\n+      return 0;\n     }\n \n     @Override\n-    public TextValue toUpper()\n+    public TextValue substring(int start, int end)\n     {\n-        return new StringWrappingStringValue( value().toUpperCase() );\n+      return this;\n     }\n \n     @Override\n-    public ListValue split( String separator )\n+    public TextValue trim()\n     {\n-        assert separator != null;\n-        String asString = value();\n-        //Cypher has different semantics for the case where the separator\n-        //is exactly the value, in cypher we expect two empty arrays\n-        //where as java returns an empty array\n-        if ( separator.equals( asString ) )\n-        {\n-            return EMPTY_SPLIT;\n-        }\n-        else if ( separator.isEmpty() )\n-        {\n-            return VirtualValues.fromArray( Values.charArray( asString.toCharArray() ) );\n-        }\n-\n-        List<AnyValue> split = splitNonRegex( asString, separator );\n-        return VirtualValues.fromList( split );\n+      return this;\n     }\n \n-    /**\n-     * Splits a string.\n-     *\n-     * @param input String to be split\n-     * @param delim delimiter, must not be not empty\n-     * @return the split string as a List of TextValues\n-     */\n-    private static List<AnyValue> splitNonRegex( String input, String delim )\n+    @Override\n+    public TextValue ltrim()\n     {\n-        List<AnyValue> l = new ArrayList<>();\n-        int offset = 0;\n-\n-        while ( true )\n-        {\n-            int index = input.indexOf( delim, offset );\n-            if ( index == -1 )\n-            {\n-                String substring = input.substring( offset );\n-                l.add( Values.stringValue( substring ) );\n-                return l;\n-            }\n-            else\n-            {\n-                String substring = input.substring( offset, index );\n-                l.add( Values.stringValue( substring ) );\n-                offset = index + delim.length();\n-            }\n-        }\n+      return this;\n     }\n \n     @Override\n-    public TextValue replace( String find, String replace )\n+    public TextValue rtrim()\n     {\n-        assert find != null;\n-        assert replace != null;\n-\n-        return Values.stringValue( value().replace( find, replace ) );\n+      return this;\n     }\n \n     @Override\n-    public Object asObjectCopy()\n+    public TextValue reverse()\n     {\n-        return value();\n+      return this;\n     }\n \n     @Override\n-    public String toString()\n+    public TextValue toLower()\n     {\n-        return format( \"%s(\\\"%s\\\")\", getTypeName(), value() );\n+      return this;\n     }\n \n     @Override\n-    public String getTypeName()\n+    public TextValue toUpper()\n     {\n-        return \"String\";\n+      return this;\n     }\n \n     @Override\n-    public String stringValue()\n+    public TextValue replace(String find, String replace)\n     {\n-        return value();\n+      if (find.isEmpty())\n+      {\n+        return Values.stringValue(replace);\n+      } else\n+      {\n+        return this;\n+      }\n     }\n \n     @Override\n-    public String prettyPrint()\n+    public int compareTo(TextValue other)\n     {\n-        return format( \"'%s'\", value() );\n+      return -other.length();\n     }\n \n     @Override\n-    public <T> T map( ValueMapper<T> mapper )\n+    Matcher matcher(Pattern pattern)\n     {\n-        return mapper.mapString( this );\n+      return pattern.matcher(\"\");\n     }\n \n     @Override\n-    public int compareTo( TextValue other )\n+    String value()\n     {\n-        String thisString = value();\n-        String thatString = other.stringValue();\n-        return thisString.compareTo( thatString );\n+      return \"\";\n     }\n-\n-    static TextValue EMTPY = new StringValue()\n-    {\n-        @Override\n-        protected int computeHash()\n-        {\n-            return 0;\n-        }\n-\n-        @Override\n-        public long updateHash( HashFunction hashFunction, long hash )\n-        {\n-            return hashFunction.update( hash, 0 ); // Mix in our length; a single zero.\n-        }\n-\n-        @Override\n-        public int length()\n-        {\n-            return 0;\n-        }\n-\n-        @Override\n-        public TextValue substring( int start, int end )\n-        {\n-            return this;\n-        }\n-\n-        @Override\n-        public TextValue trim()\n-        {\n-            return this;\n-        }\n-\n-        @Override\n-        public TextValue ltrim()\n-        {\n-            return this;\n-        }\n-\n-        @Override\n-        public TextValue rtrim()\n-        {\n-            return this;\n-        }\n-\n-        @Override\n-        public TextValue reverse()\n-        {\n-            return this;\n-        }\n-\n-        @Override\n-        public TextValue toLower()\n-        {\n-            return this;\n-        }\n-\n-        @Override\n-        public TextValue toUpper()\n-        {\n-            return this;\n-        }\n-\n-        @Override\n-        public TextValue replace( String find, String replace )\n-        {\n-            if ( find.isEmpty() )\n-            {\n-                return Values.stringValue( replace );\n-            }\n-            else\n-            {\n-                return this;\n-            }\n-        }\n-\n-        @Override\n-        public int compareTo( TextValue other )\n-        {\n-            return -other.length();\n-        }\n-\n-        @Override\n-        Matcher matcher( Pattern pattern )\n-        {\n-            return pattern.matcher( \"\" );\n-        }\n-\n-        @Override\n-        String value()\n-        {\n-            return \"\";\n-        }\n-    };\n+  };\n }\n \n",
            "diff_size": 311
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1170/StringValue.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1170/StringValue.java\nindex 99c7dc0a586..20063532e52 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/1170/StringValue.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/1170/StringValue.java\n@@ -269,5 +269,4 @@ public abstract class StringValue extends TextValue\n             return \"\";\n         }\n     };\n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 2
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}