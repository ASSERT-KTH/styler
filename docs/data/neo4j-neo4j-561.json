{
    "project_name": "neo4j-neo4j",
    "error_id": "561",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "48",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "139",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "20",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "59",
                    "column": "55",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "110",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "91",
                    "column": "17",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "38",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "113",
                    "column": "57",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/561/RotatingRequestLog.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/561/RotatingRequestLog.java\nindex 0586ce6f09d..b9c48c8b311 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/561/RotatingRequestLog.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/561/RotatingRequestLog.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.server.web;\n \n import org.eclipse.jetty.server.Request;\n@@ -44,51 +45,50 @@ public class RotatingRequestLog extends AbstractLifeCycle implements RequestLog,\n     private final Log log;\n     private final Neo4jLoggerContext loggerContext;\n \n-    public RotatingRequestLog( FileSystemAbstraction fs, LogTimeZone logTimeZone, String logFile, long rotationSize, int rotationKeepNumber )\n+    public RotatingRequestLog(FileSystemAbstraction fs, LogTimeZone logTimeZone, String logFile, long rotationSize, int rotationKeepNumber)\n     {\n-        loggerContext = LogConfig.createBuilder( fs, Path.of( logFile ), Level.INFO )\n-                .withRotation( rotationSize, rotationKeepNumber )\n-                .withTimezone( logTimeZone )\n-                .build();\n+        loggerContext = LogConfig.createBuilder(fs, Path.of(logFile), Level.INFO)\n+          .withRotation(rotationSize, rotationKeepNumber)\n+          .withTimezone(logTimeZone)\n+          .build();\n \n-        log = new Log4jLogProvider( loggerContext ).getLog( \"REQUEST\" );\n+        log = new Log4jLogProvider(loggerContext).getLog(\"REQUEST\");\n     }\n \n     @Override\n-    public void log( Request request, Response response )\n+    public void log(Request request, Response response)\n     {\n         // Trying to replicate this logback pattern:\n         // %h %l %user [%t{dd/MMM/yyyy:HH:mm:ss Z}] \"%r\" %s %b \"%i{Referer}\" \"%i{User-Agent}\" %D\n-        String remoteHost = swallowExceptions( request, HttpServletRequest::getRemoteHost );\n-        String user = swallowExceptions( request, HttpServletRequest::getRemoteUser );\n-        String requestURL = findRequestURI( request );\n+        String remoteHost = swallowExceptions(request, HttpServletRequest::getRemoteHost);\n+        String user = swallowExceptions(request, HttpServletRequest::getRemoteUser);\n+        String requestURL = findRequestURI(request);\n         int statusCode = response.getStatus();\n         long length = response.getContentLength();\n-        String referer = swallowExceptions( request, r -> r.getHeader( \"Referer\" ) );\n-        String userAgent = swallowExceptions( request, r -> r.getHeader( \"User-Agent\" ) );\n+        String referer = swallowExceptions(request, r -> r.getHeader(\"Referer\"));\n+        String userAgent = swallowExceptions(request, r -> r.getHeader(\"User-Agent\"));\n         long requestTimeStamp = request != null ? request.getTimeStamp() : -1;\n         long now = System.currentTimeMillis();\n         long serviceTime = requestTimeStamp < 0 ? -1 : now - requestTimeStamp;\n \n-        log.info( \"%s - %s [%tc] \\\"%s\\\" %s %s \\\"%s\\\" \\\"%s\\\" %s\",\n-                defaultString( remoteHost ),\n-                defaultString( user ),\n-                now,\n-                defaultString( requestURL ),\n-                statusCode,\n-                length,\n-                defaultString( referer ),\n-                defaultString( userAgent ),\n-                serviceTime );\n+        log.info(\"%s - %s [%tc] \\\"%s\\\" %s %s \\\"%s\\\" \\\"%s\\\" %s\",\n+          defaultString(remoteHost),\n+          defaultString(user),\n+          now,\n+          defaultString(requestURL),\n+          statusCode,\n+          length,\n+          defaultString(referer),\n+          defaultString(userAgent),\n+          serviceTime);\n     }\n \n-    private <T> T swallowExceptions( HttpServletRequest outerRequest, Function<HttpServletRequest, T> function )\n+    private <T> T swallowExceptions(HttpServletRequest outerRequest, Function<HttpServletRequest, T> function)\n     {\n         try\n         {\n-            return outerRequest == null ? null : function.apply( outerRequest );\n-        }\n-        catch ( Throwable t )\n+            return outerRequest == null ? null : function.apply(outerRequest);\n+        } catch (Throwable t)\n         {\n             return null;\n         }\n@@ -101,16 +101,16 @@ public class RotatingRequestLog extends AbstractLifeCycle implements RequestLog,\n     }\n \n     @Override\n-    public void eventCount( long count )\n+    public void eventCount(long count)\n     {\n     }\n \n-    private String findRequestURI( Request request )\n+    private String findRequestURI(Request request)\n     {\n-        var requestURI = swallowExceptions( request, HttpServletRequest::getRequestURI );\n-        var queryString = swallowExceptions( request, HttpServletRequest::getQueryString );\n+        var requestURI = swallowExceptions(request, HttpServletRequest::getRequestURI);\n+        var queryString = swallowExceptions(request, HttpServletRequest::getQueryString);\n \n-        if ( queryString == null || queryString.isBlank() )\n+        if (queryString == null || queryString.isBlank())\n         {\n             return requestURI;\n         }\n",
            "diff_size": 32
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}