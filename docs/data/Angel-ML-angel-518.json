{
    "project_name": "Angel-ML-angel",
    "error_id": "518",
    "information": {
        "errors": [
            {
                "line": "79",
                "severity": "error",
                "message": "Line is longer than 100 characters (found 127).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "      }\n    }\n    LOG.debug(\"split use time=\" + (System.currentTimeMillis() - startTs) + \" ms \" + \" partParams number=\" + partParams.size());\n    return partParams;\n  }\n",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/518/IndexGetParam.java\nindex 97acc029c59..389bb059884 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler/518/IndexGetParam.java\n@@ -76,8 +76,9 @@ public class IndexGetParam extends GetParam {\n         partParams.add(new IndexPartGetParam(matrixId, rowId, entry.getKey(), entry.getValue()));\r\n       }\r\n     }\r\n-    LOG.debug(\"split use time=\" + (System.currentTimeMillis() - startTs) + \" ms \" + \" partParams number=\" + partParams.size());\r\n-    return partParams;\r\n+    LOG.debug(\"split use time=\" + (System.currentTimeMillis()- startTs )+ \" ms \" +\r\n+      \" partParams number=\" + partParams.size());\r\n+     return partParams;\r\n   }\r\n \r\n   /**\r\n",
            "diff_size": 3
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/518/IndexGetParam.java\nindex 97acc029c59..de99f74ecd8 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/intellij/518/IndexGetParam.java\n@@ -36,8 +36,8 @@ public class IndexGetParam extends GetParam {\n   private Map<PartitionKey, int[]> partKeyToIndexesMap;\r\n \r\n   /**\r\n-   * @param matId matrixID\r\n-   * @param rowId rowID\r\n+   * @param matId   matrixID\r\n+   * @param rowId   rowID\r\n    * @param indexes specified index\r\n    */\r\n   public IndexGetParam(int matId, int rowId, int[] indexes) {\r\n@@ -47,8 +47,8 @@ public class IndexGetParam extends GetParam {\n   }\r\n \r\n   /**\r\n-   * @param matId matrixID\r\n-   * @param rowId rowID\r\n+   * @param matId               matrixID\r\n+   * @param rowId               rowID\r\n    * @param partKeyToIndexesMap specified index\r\n    */\r\n   public IndexGetParam(int matId, int rowId, Map<PartitionKey, int[]> partKeyToIndexesMap) {\r\n@@ -59,31 +59,34 @@ public class IndexGetParam extends GetParam {\n \r\n   /**\r\n    * Find the used partition of the specifiex index array of this matrix this row\r\n+   *\r\n    * @return partition get param of specified index\r\n    */\r\n   @Override\r\n   public List<PartitionGetParam> split() {\r\n     long startTs = System.currentTimeMillis();\r\n-    if(partKeyToIndexesMap == null) {\r\n+    if (partKeyToIndexesMap == null) {\r\n       partKeyToIndexesMap = split(PSAgentContext.get().getMatrixMetaManager()\r\n-        .getPartitions(matrixId, rowId), indexes);\r\n+          .getPartitions(matrixId, rowId), indexes);\r\n       indexes = null;\r\n     }\r\n \r\n     List<PartitionGetParam> partParams = new ArrayList<>(partKeyToIndexesMap.size());\r\n-    for(Map.Entry<PartitionKey, int[]> entry : partKeyToIndexesMap.entrySet()) {\r\n-      if(entry.getValue().length > 0) {\r\n+    for (Map.Entry<PartitionKey, int[]> entry : partKeyToIndexesMap.entrySet()) {\r\n+      if (entry.getValue().length > 0) {\r\n         partParams.add(new IndexPartGetParam(matrixId, rowId, entry.getKey(), entry.getValue()));\r\n       }\r\n     }\r\n-    LOG.debug(\"split use time=\" + (System.currentTimeMillis() - startTs) + \" ms \" + \" partParams number=\" + partParams.size());\r\n+    LOG.debug(\"split use time=\" + (System.currentTimeMillis() - startTs) + \" ms \" +\r\n+        \" partParams number=\" + partParams.size());\r\n     return partParams;\r\n   }\r\n \r\n   /**\r\n    * Find the used partition of the specifiex index array of this matrix this row\r\n+   *\r\n    * @param partKeys all partitions of this matrix and this row\r\n-   * @param indexes specified index array\r\n+   * @param indexes  specified index array\r\n    * @return the used partition of the specifiex index array of this matrix this row\r\n    */\r\n   private Map<PartitionKey, int[]> split(List<PartitionKey> partKeys, int[] indexes) {\r\n@@ -94,9 +97,9 @@ public class IndexGetParam extends GetParam {\n \r\n     // Sort partition keys use start column index\r\n     Collections.sort(partKeys,\r\n-      (PartitionKey key1, PartitionKey key2) -> {\r\n-        return key1.getStartCol() < key2.getStartCol() ? -1 : 1;\r\n-      });\r\n+        (PartitionKey key1, PartitionKey key2) -> {\r\n+          return key1.getStartCol() < key2.getStartCol() ? -1 : 1;\r\n+        });\r\n \r\n     int ii = 0;\r\n     int keyIndex = 0;\r\n@@ -111,8 +114,8 @@ public class IndexGetParam extends GetParam {\n         length++;\r\n       }\r\n \r\n-      if(length != 0) {\r\n-        int [] split = new int[length];\r\n+      if (length != 0) {\r\n+        int[] split = new int[length];\r\n         System.arraycopy(indexes, ii - length, split, 0, length);\r\n         ret.put(partKeys.get(keyIndex), split);\r\n       }\r\n@@ -126,11 +129,11 @@ public class IndexGetParam extends GetParam {\n   }\r\n \r\n   public int size() {\r\n-    if(indexes != null) {\r\n+    if (indexes != null) {\r\n       return indexes.length;\r\n     } else {\r\n       int counter = 0;\r\n-      for(int[] partIndexes : partKeyToIndexesMap.values()) {\r\n+      for (int[] partIndexes : partKeyToIndexesMap.values()) {\r\n         counter += partIndexes.length;\r\n       }\r\n \r\n@@ -138,7 +141,7 @@ public class IndexGetParam extends GetParam {\n     }\r\n   }\r\n \r\n-  public Map<PartitionKey,int[]> getPartKeyToIndexesMap() {\r\n+  public Map<PartitionKey, int[]> getPartKeyToIndexesMap() {\r\n     return partKeyToIndexesMap;\r\n   }\r\n }\r\n",
            "diff_size": 21
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "79",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/518/IndexGetParam.java\nindex 97acc029c59..cb09c3b1d53 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/naturalize/518/IndexGetParam.java\n@@ -64,14 +64,14 @@ public class IndexGetParam extends GetParam {\n   @Override\r\n   public List<PartitionGetParam> split() {\r\n     long startTs = System.currentTimeMillis();\r\n-    if(partKeyToIndexesMap == null) {\r\n+    if (partKeyToIndexesMap == null) {\r\n       partKeyToIndexesMap = split(PSAgentContext.get().getMatrixMetaManager()\r\n-        .getPartitions(matrixId, rowId), indexes);\r\n-      indexes = null;\r\n+        .getPartitions(matrixId, rowId), indexes);\n+indexes = null;\r\n     }\r\n \r\n     List<PartitionGetParam> partParams = new ArrayList<>(partKeyToIndexesMap.size());\r\n-    for(Map.Entry<PartitionKey, int[]> entry : partKeyToIndexesMap.entrySet()) {\r\n+    for (Map.Entry<PartitionKey, int[]> entry : partKeyToIndexesMap.entrySet()) {\r\n       if(entry.getValue().length > 0) {\r\n         partParams.add(new IndexPartGetParam(matrixId, rowId, entry.getKey(), entry.getValue()));\r\n       }\r\n@@ -93,12 +93,10 @@ public class IndexGetParam extends GetParam {\n     HashMap<PartitionKey, int[]> ret = new HashMap<>();\r\n \r\n     // Sort partition keys use start column index\r\n-    Collections.sort(partKeys,\r\n-      (PartitionKey key1, PartitionKey key2) -> {\r\n+    Collections.sort(partKeys, (PartitionKey key1, PartitionKey key2) -> {\r\n         return key1.getStartCol() < key2.getStartCol() ? -1 : 1;\r\n-      });\r\n-\r\n-    int ii = 0;\r\n+      });\n+int ii = 0;\r\n     int keyIndex = 0;\r\n     // For each partition, we generate a update split.\r\n     // Although the split is empty for partitions those without any update data,\r\n@@ -111,8 +109,8 @@ public class IndexGetParam extends GetParam {\n         length++;\r\n       }\r\n \r\n-      if(length != 0) {\r\n-        int [] split = new int[length];\r\n+      if (length != 0) {\r\n+        int[] split = new int[length];\r\n         System.arraycopy(indexes, ii - length, split, 0, length);\r\n         ret.put(partKeys.get(keyIndex), split);\r\n       }\r\n@@ -130,7 +128,7 @@ public class IndexGetParam extends GetParam {\n       return indexes.length;\r\n     } else {\r\n       int counter = 0;\r\n-      for(int[] partIndexes : partKeyToIndexesMap.values()) {\r\n+      for (int[] partIndexes : partKeyToIndexesMap.values()) {\r\n         counter += partIndexes.length;\r\n       }\r\n \r\n@@ -138,7 +136,7 @@ public class IndexGetParam extends GetParam {\n     }\r\n   }\r\n \r\n-  public Map<PartitionKey,int[]> getPartKeyToIndexesMap() {\r\n+  public Map<PartitionKey, int[]> getPartKeyToIndexesMap() {\r\n     return partKeyToIndexesMap;\r\n   }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 14
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "82",
                    "severity": "error",
                    "message": "Line is longer than 100 characters (found 127).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/518/IndexGetParam.java\nindex 97acc029c59..9b0c01256a3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/codebuff/518/IndexGetParam.java\n@@ -15,69 +15,72 @@\n  *\r\n  */\r\n \r\n-package com.tencent.angel.ml.matrix.psf.get.enhance.indexed;\r\n-\r\n-import com.tencent.angel.PartitionKey;\r\n-import com.tencent.angel.ml.matrix.psf.get.base.GetParam;\r\n-import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetParam;\r\n-import com.tencent.angel.psagent.PSAgentContext;\r\n-import org.apache.commons.logging.Log;\r\n-import org.apache.commons.logging.LogFactory;\r\n-\r\n+package com.tencent.angel.ml.matrix.psf.get.enhance.indexed;\n+\n+import com.tencent.angel.PartitionKey;\n+import com.tencent.angel.ml.matrix.psf.get.base.GetParam;\n+import com.tencent.angel.ml.matrix.psf.get.base.PartitionGetParam;\n+import com.tencent.angel.psagent.PSAgentContext;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import java.util.*;\r\n \r\n /**\r\n  * The GetParam of IndexGetFunc\r\n- */\r\n-public class IndexGetParam extends GetParam {\r\n-  private static final Log LOG = LogFactory.getLog(IndexGetParam.class);\r\n-  private int rowId;\r\n-  private int[] indexes;\r\n+ */\n+\n+public class IndexGetParam extends GetParam {\n+\n+  private static final Log LOG = LogFactory.getLog(IndexGetParam.class);\n+  private int rowId;\n+  private int[] indexes;\n   private Map<PartitionKey, int[]> partKeyToIndexesMap;\r\n \r\n   /**\r\n    * @param matId matrixID\r\n    * @param rowId rowID\r\n    * @param indexes specified index\r\n-   */\r\n-  public IndexGetParam(int matId, int rowId, int[] indexes) {\r\n-    super(matId);\r\n-    this.rowId = rowId;\r\n-    this.indexes = indexes;\r\n+   */\n+\n+  public IndexGetParam(int matId, int rowId, int[] indexes) {\n+    super(matId);\n+    this.rowId = rowId;\n+    this.indexes = indexes;\n   }\r\n \r\n   /**\r\n    * @param matId matrixID\r\n    * @param rowId rowID\r\n    * @param partKeyToIndexesMap specified index\r\n-   */\r\n-  public IndexGetParam(int matId, int rowId, Map<PartitionKey, int[]> partKeyToIndexesMap) {\r\n-    super(matId);\r\n-    this.rowId = rowId;\r\n-    this.partKeyToIndexesMap = partKeyToIndexesMap;\r\n+   */\n+\n+  public IndexGetParam(int matId, int rowId, Map<PartitionKey, int[]> partKeyToIndexesMap) {\n+    super(matId);\n+    this.rowId = rowId;\n+    this.partKeyToIndexesMap = partKeyToIndexesMap;\n   }\r\n \r\n   /**\r\n    * Find the used partition of the specifiex index array of this matrix this row\r\n    * @return partition get param of specified index\r\n-   */\r\n-  @Override\r\n-  public List<PartitionGetParam> split() {\r\n-    long startTs = System.currentTimeMillis();\r\n-    if(partKeyToIndexesMap == null) {\r\n-      partKeyToIndexesMap = split(PSAgentContext.get().getMatrixMetaManager()\r\n-        .getPartitions(matrixId, rowId), indexes);\r\n-      indexes = null;\r\n-    }\r\n-\r\n-    List<PartitionGetParam> partParams = new ArrayList<>(partKeyToIndexesMap.size());\r\n-    for(Map.Entry<PartitionKey, int[]> entry : partKeyToIndexesMap.entrySet()) {\r\n-      if(entry.getValue().length > 0) {\r\n-        partParams.add(new IndexPartGetParam(matrixId, rowId, entry.getKey(), entry.getValue()));\r\n-      }\r\n-    }\r\n-    LOG.debug(\"split use time=\" + (System.currentTimeMillis() - startTs) + \" ms \" + \" partParams number=\" + partParams.size());\r\n-    return partParams;\r\n+   */\n+\n+  @Override\n+  public List<PartitionGetParam> split() {\n+    long startTs = System.currentTimeMillis();\n+    if (partKeyToIndexesMap == null) {\n+      partKeyToIndexesMap = split(PSAgentContext.get().getMatrixMetaManager().getPartitions(matrixId, rowId), indexes);\n+      indexes = null;\n+    }\n+\n+    List<PartitionGetParam> partParams = new ArrayList<>(partKeyToIndexesMap.size());\n+    for (Map.Entry<PartitionKey, int[]> entry : partKeyToIndexesMap.entrySet()) {\n+      if (entry.getValue().length > 0) {\n+        partParams.add(new IndexPartGetParam(matrixId, rowId, entry.getKey(), entry.getValue()));\n+      }\n+    }\n+    LOG.debug(\"split use time=\" + (System.currentTimeMillis() - startTs) + \" ms \" + \" partParams number=\" + partParams.size());\n+    return partParams;\n   }\r\n \r\n   /**\r\n@@ -85,60 +88,60 @@ public class IndexGetParam extends GetParam {\n    * @param partKeys all partitions of this matrix and this row\r\n    * @param indexes specified index array\r\n    * @return the used partition of the specifiex index array of this matrix this row\r\n-   */\r\n+   */\n+\n   private Map<PartitionKey, int[]> split(List<PartitionKey> partKeys, int[] indexes) {\r\n-    // Sort the parts by partitionId\r\n-    Arrays.sort(indexes);\r\n-\r\n+    // Sort the parts by partitionId\n+    Arrays.sort(indexes);\n     HashMap<PartitionKey, int[]> ret = new HashMap<>();\r\n \r\n-    // Sort partition keys use start column index\r\n-    Collections.sort(partKeys,\r\n-      (PartitionKey key1, PartitionKey key2) -> {\r\n-        return key1.getStartCol() < key2.getStartCol() ? -1 : 1;\r\n-      });\r\n-\r\n-    int ii = 0;\r\n+    // Sort partition keys use start column index\n+    Collections.sort(partKeys,\n+                     (PartitionKey key1, PartitionKey key2)-> {\n+                       return key1.getStartCol() < key2.getStartCol() ? -1 : 1;\n+                     });\n+\n+    int ii = 0;\n     int keyIndex = 0;\r\n     // For each partition, we generate a update split.\r\n     // Although the split is empty for partitions those without any update data,\r\n-    // we still need to generate a update split to update the clock info on ps.\r\n-    while (ii < indexes.length || keyIndex < partKeys.size()) {\r\n-      int length = 0;\r\n-      long endOffset = partKeys.get(keyIndex).getEndCol();\r\n-      while (ii < indexes.length && indexes[ii] < endOffset) {\r\n-        ii++;\r\n-        length++;\r\n-      }\r\n-\r\n-      if(length != 0) {\r\n-        int [] split = new int[length];\r\n-        System.arraycopy(indexes, ii - length, split, 0, length);\r\n-        ret.put(partKeys.get(keyIndex), split);\r\n-      }\r\n-      keyIndex++;\r\n-    }\r\n-    return ret;\r\n-  }\r\n-\r\n-  public int getRowId() {\r\n-    return rowId;\r\n-  }\r\n-\r\n-  public int size() {\r\n-    if(indexes != null) {\r\n-      return indexes.length;\r\n-    } else {\r\n-      int counter = 0;\r\n-      for(int[] partIndexes : partKeyToIndexesMap.values()) {\r\n-        counter += partIndexes.length;\r\n-      }\r\n-\r\n-      return counter;\r\n-    }\r\n-  }\r\n-\r\n-  public Map<PartitionKey,int[]> getPartKeyToIndexesMap() {\r\n-    return partKeyToIndexesMap;\r\n-  }\r\n-}\r\n+    // we still need to generate a update split to update the clock info on ps.\n+    while (ii < indexes.length || keyIndex < partKeys.size()) {\n+      int length = 0;\n+      long endOffset = partKeys.get(keyIndex).getEndCol();\n+      while (ii < indexes.length && indexes[ii] < endOffset) {\n+        ii++;\n+        length++;\n+      }\n+\n+      if (length != 0) {\n+        int[] split = new int[length];\n+        System.arraycopy(indexes, ii - length, split, 0, length);\n+        ret.put(partKeys.get(keyIndex), split);\n+      }\n+      keyIndex++;\n+    }\n+    return ret;\n+  }\n+\n+  public int getRowId() {\n+    return rowId;\n+  }\n+\n+  public int size() {\n+    if (indexes != null) {\n+      return indexes.length;\n+    } else {\n+      int counter = 0;\n+      for (int[] partIndexes : partKeyToIndexesMap.values()) {\n+        counter += partIndexes.length;\n+      }\n+      return counter;\n+    }\n+  }\n+\n+  public Map<PartitionKey, int[]> getPartKeyToIndexesMap() {\n+    return partKeyToIndexesMap;\n+  }\n+\n+}\n\\ No newline at end of file\n",
            "diff_size": 98
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_random/518/IndexGetParam.java\nindex 97acc029c59..389bb059884 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_random/518/IndexGetParam.java\n@@ -76,8 +76,9 @@ public class IndexGetParam extends GetParam {\n         partParams.add(new IndexPartGetParam(matrixId, rowId, entry.getKey(), entry.getValue()));\r\n       }\r\n     }\r\n-    LOG.debug(\"split use time=\" + (System.currentTimeMillis() - startTs) + \" ms \" + \" partParams number=\" + partParams.size());\r\n-    return partParams;\r\n+    LOG.debug(\"split use time=\" + (System.currentTimeMillis()- startTs )+ \" ms \" +\r\n+      \" partParams number=\" + partParams.size());\r\n+     return partParams;\r\n   }\r\n \r\n   /**\r\n",
            "diff_size": 3
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/518/IndexGetParam.java\nindex 97acc029c59..4cdfe444784 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/errored/1/518/IndexGetParam.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Angel-ML-angel/styler_three_grams/518/IndexGetParam.java\n@@ -76,8 +76,10 @@ public class IndexGetParam extends GetParam {\n         partParams.add(new IndexPartGetParam(matrixId, rowId, entry.getKey(), entry.getValue()));\r\n       }\r\n     }\r\n-    LOG.debug(\"split use time=\" + (System.currentTimeMillis() - startTs) + \" ms \" + \" partParams number=\" + partParams.size());\r\n-    return partParams;\r\n+\r\n+    LOG.debug(\"split use time=\" +(System.currentTimeMillis( )- startTs)\r\n++\" ms \" + \" partParams number=\" + partParams.size());\r\n+     return partParams;\r\n   }\r\n \r\n   /**\r\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}