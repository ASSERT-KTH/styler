{
    "project_name": "googleapis-google-cloud-java",
    "error_id": "828",
    "information": {
        "errors": [
            {
                "line": "379",
                "severity": "warning",
                "message": "Line is longer than 100 characters (found 103).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    initializeExpectedTopic(1);\n    expect(pubsub.getOptions()).andReturn(mockOptions);\n    expect(pubsub.replaceTopicPolicyAsync(NAME, POLICY)).andReturn(ApiFutures.immediateFuture(POLICY));\n    replay(pubsub);\n    initializeTopic();\n    Policy policy = topic.replacePolicyAsync(POLICY).get();",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/828/TopicTest.java\nindex e597fef4208..4be056c777a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler/828/TopicTest.java\n@@ -376,7 +376,8 @@ public class TopicTest {\n   public void testReplacePolicyAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    expect(pubsub.replaceTopicPolicyAsync(NAME, POLICY)).andReturn(ApiFutures.immediateFuture(POLICY));\n+    expect(pubsub.replaceTopicPolicyAsync(NAME, POLICY))\n+        .andReturn(ApiFutures.immediateFuture(POLICY));\n     replay(pubsub);\n     initializeTopic();\n     Policy policy = topic.replacePolicyAsync(POLICY).get();\n",
            "diff_size": 2
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/828/TopicTest.java\nindex e597fef4208..4be056c777a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/intellij/828/TopicTest.java\n@@ -376,7 +376,8 @@ public class TopicTest {\n   public void testReplacePolicyAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    expect(pubsub.replaceTopicPolicyAsync(NAME, POLICY)).andReturn(ApiFutures.immediateFuture(POLICY));\n+    expect(pubsub.replaceTopicPolicyAsync(NAME, POLICY))\n+        .andReturn(ApiFutures.immediateFuture(POLICY));\n     replay(pubsub);\n     initializeTopic();\n     Policy policy = topic.replacePolicyAsync(POLICY).get();\n",
            "diff_size": 2
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "276",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "289",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "290",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "302",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "303",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "317",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 111).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "318",
                    "severity": "warning",
                    "message": "'new' has incorrect indentation level 4, expected level should be 8.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.indentation.IndentationCheck"
                },
                {
                    "line": "375",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/828/TopicTest.java\nindex e597fef4208..e413ac9a596 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/naturalize/828/TopicTest.java\n@@ -273,9 +273,8 @@ public class TopicTest {\n   public void testListSubscriptions() {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    final List<SubscriptionId> subscriptions = ImmutableList.of(\n-        new SubscriptionId(\"project\", \"subscription1\"),\n-        new SubscriptionId(\"project\", \"subscription2\"));\n+    final List<SubscriptionId> subscriptions = ImmutableList.of(new SubscriptionId(\"project\", \"subscription1\"),\n+    new SubscriptionId(\"project\", \"subscription2\"));\n     Page<SubscriptionId> result = new PageImpl<>(null, null, subscriptions);\n     expect(pubsub.listSubscriptions(NAME)).andReturn(result);\n     replay(pubsub);\n@@ -287,9 +286,8 @@ public class TopicTest {\n   public void testListSubscriptionsWithOptions() {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    final List<SubscriptionId> subscriptions = ImmutableList.of(\n-        new SubscriptionId(\"project\", \"subscription1\"),\n-        new SubscriptionId(\"project\", \"subscription2\"));\n+    final List<SubscriptionId> subscriptions = ImmutableList.of(new SubscriptionId(\"project\", \"subscription1\"),\n+    new SubscriptionId(\"project\", \"subscription2\"));\n     Page<SubscriptionId> result = new PageImpl<>(null, null, subscriptions);\n     expect(pubsub.listSubscriptions(NAME, ListOption.pageSize(42))).andReturn(result);\n     replay(pubsub);\n@@ -301,9 +299,8 @@ public class TopicTest {\n   public void testListSubscriptionsAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    final List<SubscriptionId> subscriptions = ImmutableList.of(\n-        new SubscriptionId(\"project\", \"subscription1\"),\n-        new SubscriptionId(\"project\", \"subscription2\"));\n+    final List<SubscriptionId> subscriptions = ImmutableList.of(new SubscriptionId(\"project\", \"subscription1\"),\n+    new SubscriptionId(\"project\", \"subscription2\"));\n     AsyncPage<SubscriptionId> result = new AsyncPageImpl<>(null, null, subscriptions);\n     expect(pubsub.listSubscriptionsAsync(NAME))\n         .andReturn(ApiFutures.immediateFuture(result));\n@@ -317,9 +314,8 @@ public class TopicTest {\n       throws ExecutionException, InterruptedException {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    final List<SubscriptionId> subscriptions = ImmutableList.of(\n-        new SubscriptionId(\"project\", \"subscription1\"),\n-        new SubscriptionId(\"project\", \"subscription2\"));\n+    final List<SubscriptionId> subscriptions = ImmutableList.of(new SubscriptionId(\"project\", \"subscription1\"),\n+    new SubscriptionId(\"project\", \"subscription2\"));\n     AsyncPage<SubscriptionId> result = new AsyncPageImpl<>(null, null, subscriptions);\n     expect(pubsub.listSubscriptionsAsync(NAME, ListOption.pageSize(42)))\n         .andReturn(ApiFutures.immediateFuture(result));\n@@ -413,4 +409,4 @@ public class TopicTest {\n     assertEquals(expected.getName(), value.getName());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 13
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "50",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 128).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "56",
                    "severity": "warning",
                    "message": "'METHOD_DEF' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "101",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "124",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "227",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 108).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "265",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "277",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "289",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "298",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "301",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 160).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "303",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 119).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "306",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 105).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "356",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 103).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "381",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 121).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/828/TopicTest.java\nindex e597fef4208..c954ace6248 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/codebuff/828/TopicTest.java\n@@ -37,27 +37,22 @@ import com.google.cloud.Policy;\n import com.google.cloud.Role;\n import com.google.cloud.pubsub.deprecated.PubSub.ListOption;\n import com.google.common.collect.ImmutableList;\n-\n import org.junit.After;\n import org.junit.Test;\n-\n import java.util.List;\n import java.util.concurrent.ExecutionException;\n \n+\n public class TopicTest {\n \n   private static final String NAME = \"topic\";\n   private static final TopicInfo TOPIC_INFO = TopicInfo.of(NAME);\n-  private static final Policy POLICY = Policy.newBuilder()\n-      .addIdentity(Role.viewer(), Identity.allAuthenticatedUsers())\n-      .build();\n-\n+  private static final Policy POLICY = Policy.newBuilder().addIdentity(Role.viewer(), Identity.allAuthenticatedUsers()).build();\n   private final PubSub serviceMockReturnsOptions = createStrictMock(PubSub.class);\n   private final PubSubOptions mockOptions = createMock(PubSubOptions.class);\n   private PubSub pubsub;\n   private Topic expectedTopic;\n   private Topic topic;\n-\n   private void initializeExpectedTopic(int optionsCalls) {\n     expect(serviceMockReturnsOptions.getOptions()).andReturn(mockOptions).times(optionsCalls);\n     replay(serviceMockReturnsOptions);\n@@ -103,8 +98,7 @@ public class TopicTest {\n   public void testReload() {\n     initializeExpectedTopic(2);\n     TopicInfo updatedInfo = TOPIC_INFO.toBuilder().setName(\"newTopic\").build();\n-    Topic expectedTopic =\n-        new Topic(serviceMockReturnsOptions, new TopicInfo.BuilderImpl(updatedInfo));\n+    Topic expectedTopic = new Topic(serviceMockReturnsOptions, new TopicInfo.BuilderImpl(updatedInfo));\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n     expect(pubsub.getTopic(NAME)).andReturn(expectedTopic);\n     replay(pubsub);\n@@ -127,11 +121,9 @@ public class TopicTest {\n   public void testReloadAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedTopic(2);\n     TopicInfo updatedInfo = TOPIC_INFO.toBuilder().setName(\"newTopic\").build();\n-    Topic expectedTopic =\n-        new Topic(serviceMockReturnsOptions, new TopicInfo.BuilderImpl(updatedInfo));\n+    Topic expectedTopic = new Topic(serviceMockReturnsOptions, new TopicInfo.BuilderImpl(updatedInfo));\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    expect(pubsub.getTopicAsync(NAME))\n-        .andReturn(ApiFutures.immediateFuture(expectedTopic));\n+    expect(pubsub.getTopicAsync(NAME)).andReturn(ApiFutures.immediateFuture(expectedTopic));\n     replay(pubsub);\n     initializeTopic();\n     Topic updatedTopic = topic.reloadAsync().get();\n@@ -206,8 +198,7 @@ public class TopicTest {\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n     Message message = Message.of(\"payload1\");\n     String messageId = \"messageId\";\n-    expect(pubsub.publishAsync(NAME, message))\n-        .andReturn(ApiFutures.immediateFuture(messageId));\n+    expect(pubsub.publishAsync(NAME, message)).andReturn(ApiFutures.immediateFuture(messageId));\n     replay(pubsub);\n     initializeTopic();\n     assertEquals(messageId, topic.publishAsync(message).get());\n@@ -233,8 +224,7 @@ public class TopicTest {\n     Message message1 = Message.of(\"payload1\");\n     Message message2 = Message.of(\"payload2\");\n     List<String> messageIds = ImmutableList.of(\"messageId1\", \"messageId2\");\n-    expect(pubsub.publishAsync(NAME, message1, message2))\n-        .andReturn(ApiFutures.immediateFuture(messageIds));\n+    expect(pubsub.publishAsync(NAME, message1, message2)).andReturn(ApiFutures.immediateFuture(messageIds));\n     replay(pubsub);\n     initializeTopic();\n     assertEquals(messageIds, topic.publishAsync(message1, message2).get());\n@@ -262,8 +252,7 @@ public class TopicTest {\n     Message message2 = Message.of(\"payload2\");\n     List<Message> messages = ImmutableList.of(message1, message2);\n     List<String> messageIds = ImmutableList.of(\"messageId1\", \"messageId2\");\n-    expect(pubsub.publishAsync(NAME, messages))\n-        .andReturn(ApiFutures.immediateFuture(messageIds));\n+    expect(pubsub.publishAsync(NAME, messages)).andReturn(ApiFutures.immediateFuture(messageIds));\n     replay(pubsub);\n     initializeTopic();\n     assertEquals(messageIds, topic.publishAsync(messages).get());\n@@ -273,9 +262,7 @@ public class TopicTest {\n   public void testListSubscriptions() {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    final List<SubscriptionId> subscriptions = ImmutableList.of(\n-        new SubscriptionId(\"project\", \"subscription1\"),\n-        new SubscriptionId(\"project\", \"subscription2\"));\n+    final List<SubscriptionId> subscriptions = ImmutableList.of(new SubscriptionId(\"project\", \"subscription1\"), new SubscriptionId(\"project\", \"subscription2\"));\n     Page<SubscriptionId> result = new PageImpl<>(null, null, subscriptions);\n     expect(pubsub.listSubscriptions(NAME)).andReturn(result);\n     replay(pubsub);\n@@ -287,9 +274,7 @@ public class TopicTest {\n   public void testListSubscriptionsWithOptions() {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    final List<SubscriptionId> subscriptions = ImmutableList.of(\n-        new SubscriptionId(\"project\", \"subscription1\"),\n-        new SubscriptionId(\"project\", \"subscription2\"));\n+    final List<SubscriptionId> subscriptions = ImmutableList.of(new SubscriptionId(\"project\", \"subscription1\"), new SubscriptionId(\"project\", \"subscription2\"));\n     Page<SubscriptionId> result = new PageImpl<>(null, null, subscriptions);\n     expect(pubsub.listSubscriptions(NAME, ListOption.pageSize(42))).andReturn(result);\n     replay(pubsub);\n@@ -301,32 +286,24 @@ public class TopicTest {\n   public void testListSubscriptionsAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    final List<SubscriptionId> subscriptions = ImmutableList.of(\n-        new SubscriptionId(\"project\", \"subscription1\"),\n-        new SubscriptionId(\"project\", \"subscription2\"));\n+    final List<SubscriptionId> subscriptions = ImmutableList.of(new SubscriptionId(\"project\", \"subscription1\"), new SubscriptionId(\"project\", \"subscription2\"));\n     AsyncPage<SubscriptionId> result = new AsyncPageImpl<>(null, null, subscriptions);\n-    expect(pubsub.listSubscriptionsAsync(NAME))\n-        .andReturn(ApiFutures.immediateFuture(result));\n+    expect(pubsub.listSubscriptionsAsync(NAME)).andReturn(ApiFutures.immediateFuture(result));\n     replay(pubsub);\n     initializeTopic();\n     assertEquals(subscriptions, topic.listSubscriptionsAsync().get().getValues());\n   }\n \n   @Test\n-  public void testListSubscriptionsAsyncWithOptions()\n-      throws ExecutionException, InterruptedException {\n+  public void testListSubscriptionsAsyncWithOptions() throws ExecutionException, InterruptedException {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    final List<SubscriptionId> subscriptions = ImmutableList.of(\n-        new SubscriptionId(\"project\", \"subscription1\"),\n-        new SubscriptionId(\"project\", \"subscription2\"));\n+    final List<SubscriptionId> subscriptions = ImmutableList.of(new SubscriptionId(\"project\", \"subscription1\"), new SubscriptionId(\"project\", \"subscription2\"));\n     AsyncPage<SubscriptionId> result = new AsyncPageImpl<>(null, null, subscriptions);\n-    expect(pubsub.listSubscriptionsAsync(NAME, ListOption.pageSize(42)))\n-        .andReturn(ApiFutures.immediateFuture(result));\n+    expect(pubsub.listSubscriptionsAsync(NAME, ListOption.pageSize(42))).andReturn(ApiFutures.immediateFuture(result));\n     replay(pubsub);\n     initializeTopic();\n-    assertEquals(subscriptions,\n-        topic.listSubscriptionsAsync(ListOption.pageSize(42)).get().getValues());\n+    assertEquals(subscriptions, topic.listSubscriptionsAsync(ListOption.pageSize(42)).get().getValues());\n   }\n \n   @Test\n@@ -401,8 +378,7 @@ public class TopicTest {\n     List<Boolean> permissionsResult = ImmutableList.of(true);\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    expect(pubsub.testTopicPermissionsAsync(NAME, permissions))\n-        .andReturn(ApiFutures.immediateFuture(permissionsResult));\n+    expect(pubsub.testTopicPermissionsAsync(NAME, permissions)).andReturn(ApiFutures.immediateFuture(permissionsResult));\n     replay(pubsub);\n     initializeTopic();\n     assertEquals(permissionsResult, topic.testPermissionsAsync(permissions).get());\n@@ -413,4 +389,4 @@ public class TopicTest {\n     assertEquals(expected.getName(), value.getName());\n     assertEquals(expected.hashCode(), value.hashCode());\n   }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 43
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/828/TopicTest.java\nindex e597fef4208..4be056c777a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_random/828/TopicTest.java\n@@ -376,7 +376,8 @@ public class TopicTest {\n   public void testReplacePolicyAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    expect(pubsub.replaceTopicPolicyAsync(NAME, POLICY)).andReturn(ApiFutures.immediateFuture(POLICY));\n+    expect(pubsub.replaceTopicPolicyAsync(NAME, POLICY))\n+        .andReturn(ApiFutures.immediateFuture(POLICY));\n     replay(pubsub);\n     initializeTopic();\n     Policy policy = topic.replacePolicyAsync(POLICY).get();\n",
            "diff_size": 2
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "379",
                    "severity": "warning",
                    "message": "Line is longer than 100 characters (found 101).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/828/TopicTest.java\nindex e597fef4208..b5da7027b28 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/errored/1/828/TopicTest.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/googleapis-google-cloud-java/styler_three_grams/828/TopicTest.java\n@@ -376,7 +376,8 @@ public class TopicTest {\n   public void testReplacePolicyAsync() throws ExecutionException, InterruptedException {\n     initializeExpectedTopic(1);\n     expect(pubsub.getOptions()).andReturn(mockOptions);\n-    expect(pubsub.replaceTopicPolicyAsync(NAME, POLICY)).andReturn(ApiFutures.immediateFuture(POLICY));\n+    expect(pubsub.replaceTopicPolicyAsync(NAME, POLICY)).andReturn(ApiFutures.immediateFuture(POLICY)\n+    );\n     replay(pubsub);\n     initializeTopic();\n     Policy policy = topic.replacePolicyAsync(POLICY).get();\n",
            "diff_size": 2
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff",
        "styler_three_grams"
    ]
}