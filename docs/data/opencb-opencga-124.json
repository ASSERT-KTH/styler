{
    "project_name": "opencb-opencga",
    "error_id": "124",
    "information": {
        "errors": [
            {
                "line": "177",
                "severity": "error",
                "message": "Line is longer than 140 characters (found 196).",
                "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
            }
        ]
    },
    "source_code": "    }\n\n    private void printSampleFileTsv(String sample, Map<String, Gene> knockoutGenes, Map<String, TranscriptKnockout> transcriptKnockoutCountMap, Trio trio, File file) throws FileNotFoundException {\n\n        try (PrintStream out = new PrintStream(new FileOutputStream(file))) {\n            out.println(\"##SAMPLE=\" + sample);",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/124/GeneKnockoutAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/124/GeneKnockoutAnalysisExecutor.java\nindex cbd916836e6..c05c6d1e4bc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/124/GeneKnockoutAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/intellij/124/GeneKnockoutAnalysisExecutor.java\n@@ -19,173 +19,175 @@ import static org.opencb.opencga.analysis.variant.genes.knockout.result.GeneKnoc\n \n public abstract class GeneKnockoutAnalysisExecutor extends OpenCgaToolExecutor {\n \n-    private String study;\n-    private List<String> samples;\n-    private Map<String, Trio> trios;\n-\n-    private Set<String> proteinCodingGenes;\n-    private Set<String> otherGenes;\n-    private String ct;\n-    private Set<String> cts;\n-    private String filter;\n-    private String qual;\n-\n-    private String disorder;\n-    private String fileNamePattern;\n-    private String biotype;\n-\n-    public String getStudy() {\n-        return study;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setStudy(String study) {\n-        this.study = study;\n-        return this;\n-    }\n-\n-    public List<String> getSamples() {\n-        return samples;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setSamples(List<String> samples) {\n-        this.samples = samples;\n-        return this;\n-    }\n-\n-    public Map<String, Trio> getTrios() {\n-        return trios;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setTrios(Map<String, Trio> trios) {\n-        this.trios = trios;\n-        return this;\n-    }\n-\n-    public Set<String> getProteinCodingGenes() {\n-        return proteinCodingGenes;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setProteinCodingGenes(Set<String> proteinCodingGenes) {\n-        this.proteinCodingGenes = proteinCodingGenes;\n-        return this;\n-    }\n-\n-    public Set<String> getOtherGenes() {\n-        return otherGenes;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setOtherGenes(Set<String> otherGenes) {\n-        this.otherGenes = otherGenes;\n-        return this;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setBiotype(String biotype) {\n-        this.biotype = biotype;\n-        return this;\n-    }\n-\n-    public String getBiotype() {\n-        return biotype;\n-    }\n-\n-    public String getCt() {\n-        return ct;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setCt(String ct) {\n-        this.ct = ct;\n-        if (ct != null && !ct.isEmpty()) {\n-            cts = new HashSet<>(VariantQueryUtils.parseConsequenceTypes(Arrays.asList(ct.split(\",\"))));\n-        } else {\n-            cts = Collections.emptySet();\n-        }\n-        return this;\n-    }\n-\n-    public Set<String> getCts() {\n-        return cts;\n-    }\n-\n-    public String getFilter() {\n-        return filter;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setFilter(String filter) {\n-        this.filter = filter;\n-        return this;\n-    }\n-\n-    public String getQual() {\n-        return qual;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setQual(String qual) {\n-        this.qual = qual;\n-        return this;\n-    }\n-\n-    public String getDisorder() {\n-        return disorder;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setDisorder(String disorder) {\n-        this.disorder = disorder;\n-        return this;\n-    }\n-\n-    public String getFileNamePattern() {\n-        return fileNamePattern;\n-    }\n-\n-    public GeneKnockoutAnalysisExecutor setFileNamePattern(String fileNamePattern) {\n-        this.fileNamePattern = fileNamePattern;\n-        return this;\n-    }\n-\n-    public Path getFileName(String sample) {\n-        return Paths.get(fileNamePattern.replace(\"{sample}\", sample));\n-    }\n-\n-    protected void printSampleFile(String sample, Map<String, GeneKnockout> knockoutGenes, Trio trio)\n-            throws IOException {\n-        Path path = getFileName(sample);\n-        printSampleFileJson(sample, knockoutGenes, trio, path.toFile());\n+  private String study;\n+  private List<String> samples;\n+  private Map<String, Trio> trios;\n+\n+  private Set<String> proteinCodingGenes;\n+  private Set<String> otherGenes;\n+  private String ct;\n+  private Set<String> cts;\n+  private String filter;\n+  private String qual;\n+\n+  private String disorder;\n+  private String fileNamePattern;\n+  private String biotype;\n+\n+  public String getStudy() {\n+    return study;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setStudy(String study) {\n+    this.study = study;\n+    return this;\n+  }\n+\n+  public List<String> getSamples() {\n+    return samples;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setSamples(List<String> samples) {\n+    this.samples = samples;\n+    return this;\n+  }\n+\n+  public Map<String, Trio> getTrios() {\n+    return trios;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setTrios(Map<String, Trio> trios) {\n+    this.trios = trios;\n+    return this;\n+  }\n+\n+  public Set<String> getProteinCodingGenes() {\n+    return proteinCodingGenes;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setProteinCodingGenes(Set<String> proteinCodingGenes) {\n+    this.proteinCodingGenes = proteinCodingGenes;\n+    return this;\n+  }\n+\n+  public Set<String> getOtherGenes() {\n+    return otherGenes;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setOtherGenes(Set<String> otherGenes) {\n+    this.otherGenes = otherGenes;\n+    return this;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setBiotype(String biotype) {\n+    this.biotype = biotype;\n+    return this;\n+  }\n+\n+  public String getBiotype() {\n+    return biotype;\n+  }\n+\n+  public String getCt() {\n+    return ct;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setCt(String ct) {\n+    this.ct = ct;\n+    if (ct != null && !ct.isEmpty()) {\n+      cts = new HashSet<>(VariantQueryUtils.parseConsequenceTypes(Arrays.asList(ct.split(\",\"))));\n+    } else {\n+      cts = Collections.emptySet();\n+    }\n+    return this;\n+  }\n+\n+  public Set<String> getCts() {\n+    return cts;\n+  }\n+\n+  public String getFilter() {\n+    return filter;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setFilter(String filter) {\n+    this.filter = filter;\n+    return this;\n+  }\n+\n+  public String getQual() {\n+    return qual;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setQual(String qual) {\n+    this.qual = qual;\n+    return this;\n+  }\n+\n+  public String getDisorder() {\n+    return disorder;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setDisorder(String disorder) {\n+    this.disorder = disorder;\n+    return this;\n+  }\n+\n+  public String getFileNamePattern() {\n+    return fileNamePattern;\n+  }\n+\n+  public GeneKnockoutAnalysisExecutor setFileNamePattern(String fileNamePattern) {\n+    this.fileNamePattern = fileNamePattern;\n+    return this;\n+  }\n+\n+  public Path getFileName(String sample) {\n+    return Paths.get(fileNamePattern.replace(\"{sample}\", sample));\n+  }\n+\n+  protected void printSampleFile(String sample, Map<String, GeneKnockout> knockoutGenes, Trio trio)\n+      throws IOException {\n+    Path path = getFileName(sample);\n+    printSampleFileJson(sample, knockoutGenes, trio, path.toFile());\n //            printSampleFileTsv(sample, knockoutGenes, transcriptKnockoutCountMap, trio, file.toFile());\n-    }\n-\n-    private void printSampleFileJson(String sample, Map<String, GeneKnockout> knockoutGenes, Trio trio, File file) throws IOException {\n-        GeneKnockoutBySample geneKnockoutBySample = new GeneKnockoutBySample()\n-                .setSample(sample)\n-                .setTrio(trio)\n-                .setCountByType(new CountByType(\n-                        knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n-                                .mapToInt(TranscriptKnockout::getHomAltCount).sum(),\n-                        knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n-                                .mapToInt(TranscriptKnockout::getMultiAllelicCount).sum(),\n-                        knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n-                                .mapToInt(TranscriptKnockout::getCompHetCount).sum(),\n-                        knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n-                                .mapToInt(TranscriptKnockout::getDeletionOverlapCount).sum()\n-                ))\n-                .setGenesCount(knockoutGenes.size())\n-                .setTranscriptsCount(knockoutGenes.values().stream().mapToInt(g -> g.getTranscripts().size()).sum())\n-                .setGenes(knockoutGenes.values());\n-\n-        JacksonUtils.getDefaultObjectMapper().writerWithDefaultPrettyPrinter().writeValue(file, geneKnockoutBySample);\n-    }\n-\n-    private void printSampleFileTsv(String sample, Map<String, Gene> knockoutGenes, Map<String, TranscriptKnockout> transcriptKnockoutCountMap, Trio trio, File file) throws FileNotFoundException {\n-\n-        try (PrintStream out = new PrintStream(new FileOutputStream(file))) {\n-            out.println(\"##SAMPLE=\" + sample);\n-            out.println(\"##DATE=\" + TimeUtils.getDate());\n-            if (trio != null) {\n-                out.println(\"##FAMILY=\" + trio.getId());\n-            }\n-            out.println(\"##num_genes=\" + knockoutGenes.size());\n-            out.println(\"##num_transcripts=\" + knockoutGenes.values().stream().mapToInt(g -> g.getTranscripts().size()).sum());\n-            out.println(\"#GENE\\tGENE_ID\\tTRANSCRIPT\\tHOM_ALT\\tMULTI_ALLELIC\\tCOMP_HET\\tDELETION_OVERLAP\");\n-            for (Gene gene : knockoutGenes.values()) {\n+  }\n+\n+  private void printSampleFileJson(String sample, Map<String, GeneKnockout> knockoutGenes, Trio trio, File file) throws IOException {\n+    GeneKnockoutBySample geneKnockoutBySample = new GeneKnockoutBySample()\n+        .setSample(sample)\n+        .setTrio(trio)\n+        .setCountByType(new CountByType(\n+            knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n+                .mapToInt(TranscriptKnockout::getHomAltCount).sum(),\n+            knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n+                .mapToInt(TranscriptKnockout::getMultiAllelicCount).sum(),\n+            knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n+                .mapToInt(TranscriptKnockout::getCompHetCount).sum(),\n+            knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n+                .mapToInt(TranscriptKnockout::getDeletionOverlapCount).sum()\n+        ))\n+        .setGenesCount(knockoutGenes.size())\n+        .setTranscriptsCount(knockoutGenes.values().stream().mapToInt(g -> g.getTranscripts().size()).sum())\n+        .setGenes(knockoutGenes.values());\n+\n+    JacksonUtils.getDefaultObjectMapper().writerWithDefaultPrettyPrinter().writeValue(file, geneKnockoutBySample);\n+  }\n+\n+  private void printSampleFileTsv(String sample, Map<String, Gene> knockoutGenes,\n+                                  Map<String, TranscriptKnockout> transcriptKnockoutCountMap, Trio trio, File file)\n+      throws FileNotFoundException {\n+\n+    try (PrintStream out = new PrintStream(new FileOutputStream(file))) {\n+      out.println(\"##SAMPLE=\" + sample);\n+      out.println(\"##DATE=\" + TimeUtils.getDate());\n+      if (trio != null) {\n+        out.println(\"##FAMILY=\" + trio.getId());\n+      }\n+      out.println(\"##num_genes=\" + knockoutGenes.size());\n+      out.println(\"##num_transcripts=\" + knockoutGenes.values().stream().mapToInt(g -> g.getTranscripts().size()).sum());\n+      out.println(\"#GENE\\tGENE_ID\\tTRANSCRIPT\\tHOM_ALT\\tMULTI_ALLELIC\\tCOMP_HET\\tDELETION_OVERLAP\");\n+      for (Gene gene : knockoutGenes.values()) {\n //                    out.print(gene.getName() + \"\\t\" + gene.getId() + \"\\t\");\n //                    int i = 0;\n //                    for (Transcript transcript : gene.getTranscripts()) {\n@@ -195,19 +197,19 @@ public abstract class GeneKnockoutAnalysisExecutor extends OpenCgaToolExecutor {\n //                        out.print(transcript.getId());\n //                    }\n //                    out.println();\n-                for (Transcript transcript : gene.getTranscripts()) {\n-                    TranscriptKnockout count = transcriptKnockoutCountMap.get(transcript.getId());\n-                    out.println(gene.getName()\n-                            + \"\\t\" + gene.getId()\n-                            + \"\\t\" + transcript.getId()\n-                            + \"\\t\" + count.getHomAltCount()\n-                            + \"\\t\" + count.getMultiAllelicCount()\n-                            + \"\\t\" + count.getCompHetCount()\n-                            + \"\\t\" + count.getDeletionOverlapCount());\n-                }\n-            }\n+        for (Transcript transcript : gene.getTranscripts()) {\n+          TranscriptKnockout count = transcriptKnockoutCountMap.get(transcript.getId());\n+          out.println(gene.getName()\n+              + \"\\t\" + gene.getId()\n+              + \"\\t\" + transcript.getId()\n+              + \"\\t\" + count.getHomAltCount()\n+              + \"\\t\" + count.getMultiAllelicCount()\n+              + \"\\t\" + count.getCompHetCount()\n+              + \"\\t\" + count.getDeletionOverlapCount());\n         }\n+      }\n     }\n+  }\n \n }\n \n",
            "diff_size": 181
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "176",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/124/GeneKnockoutAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/124/GeneKnockoutAnalysisExecutor.java\nindex cbd916836e6..03b6ce3bc65 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/124/GeneKnockoutAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/naturalize/124/GeneKnockoutAnalysisExecutor.java\n@@ -165,8 +165,7 @@ public abstract class GeneKnockoutAnalysisExecutor extends OpenCgaToolExecutor {\n                         knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n                                 .mapToInt(TranscriptKnockout::getCompHetCount).sum(),\n                         knockoutGenes.values().stream().flatMap(g -> g.getTranscripts().stream())\n-                                .mapToInt(TranscriptKnockout::getDeletionOverlapCount).sum()\n-                ))\n+                                .mapToInt(TranscriptKnockout::getDeletionOverlapCount).sum()))\n                 .setGenesCount(knockoutGenes.size())\n                 .setTranscriptsCount(knockoutGenes.values().stream().mapToInt(g -> g.getTranscripts().size()).sum())\n                 .setGenes(knockoutGenes.values());\n@@ -209,5 +208,4 @@ public abstract class GeneKnockoutAnalysisExecutor extends OpenCgaToolExecutor {\n         }\n     }\n \n-}\n-\n+}\n\\ No newline at end of file\n",
            "diff_size": 4
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "177",
                    "severity": "error",
                    "message": "Line is longer than 140 characters (found 196).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "177",
                    "column": "55",
                    "severity": "error",
                    "message": "'<' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "177",
                    "column": "63",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "177",
                    "column": "85",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "177",
                    "column": "87",
                    "severity": "error",
                    "message": "',' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.WhitespaceAfterCheck"
                },
                {
                    "line": "178",
                    "column": "14",
                    "severity": "error",
                    "message": "'<' is followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                },
                {
                    "line": "178",
                    "column": "21",
                    "severity": "error",
                    "message": "',' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.NoWhitespaceBeforeCheck"
                },
                {
                    "line": "179",
                    "column": "19",
                    "severity": "error",
                    "message": "'>' is preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.GenericWhitespaceCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/124/GeneKnockoutAnalysisExecutor.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/124/GeneKnockoutAnalysisExecutor.java\nindex cbd916836e6..dca9d26e1fa 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/errored/1/124/GeneKnockoutAnalysisExecutor.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/opencb-opencga/styler_three_grams/124/GeneKnockoutAnalysisExecutor.java\n@@ -174,9 +174,11 @@ public abstract class GeneKnockoutAnalysisExecutor extends OpenCgaToolExecutor {\n         JacksonUtils.getDefaultObjectMapper().writerWithDefaultPrettyPrinter().writeValue(file, geneKnockoutBySample);\n     }\n \n-    private void printSampleFileTsv(String sample, Map<String, Gene> knockoutGenes, Map<String, TranscriptKnockout> transcriptKnockoutCountMap, Trio trio, File file) throws FileNotFoundException {\n+    private void printSampleFileTsv(String sample, Map <String , Gene> knockoutGenes ,Map\n+            < String ,\n+TranscriptKnockout > transcriptKnockoutCountMap, Trio trio, File file) throws FileNotFoundException {\n \n-        try (PrintStream out = new PrintStream(new FileOutputStream(file))) {\n+         try (PrintStream out = new PrintStream(new FileOutputStream(file))) {\n             out.println(\"##SAMPLE=\" + sample);\n             out.println(\"##DATE=\" + TimeUtils.getDate());\n             if (trio != null) {\n",
            "diff_size": 4
        }
    ],
    "repaired_by": [
        "intellij"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}