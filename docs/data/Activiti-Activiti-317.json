{
    "project_name": "Activiti-Activiti",
    "error_id": "317",
    "information": {
        "errors": [
            {
                "line": "13",
                "severity": "error",
                "message": "'package' should be separated from previous statement.",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
            }
        ]
    },
    "source_code": " * limitations under the License.\n */\npackage org.activiti.bpmn.converter;\n\nimport org.activiti.bpmn.converter.util.BpmnXMLUtil;\nimport org.activiti.bpmn.model.BaseElement;",
    "results": [
        {
            "tool": "styler",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/317/StartEventXMLConverter.java\nindex 45ad8ed6a7e..84d233a4bdd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler/317/StartEventXMLConverter.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter;\n \n import org.activiti.bpmn.converter.util.BpmnXMLUtil;\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/317/StartEventXMLConverter.java\nindex 45ad8ed6a7e..13d132ab062 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/intellij/317/StartEventXMLConverter.java\n@@ -1,15 +1,16 @@\n /* Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter;\n \n import org.activiti.bpmn.converter.util.BpmnXMLUtil;\n@@ -38,7 +39,7 @@ public class StartEventXMLConverter extends BaseBpmnXMLConverter {\n     protected BaseElement convertXMLToElement(XMLStreamReader xtr,\n                                               BpmnModel model) throws Exception {\n         String formKey = xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                               ATTRIBUTE_FORM_FORMKEY);\n+                ATTRIBUTE_FORM_FORMKEY);\n         StartEvent startEvent = null;\n \n         if (StringUtils.isNotEmpty(formKey) && model.getStartEventFormTypes() != null && model.getStartEventFormTypes().contains(formKey)) {\n@@ -48,12 +49,12 @@ public class StartEventXMLConverter extends BaseBpmnXMLConverter {\n             startEvent = new StartEvent();\n         }\n         BpmnXMLUtil.addXMLLocation(startEvent,\n-                                   xtr);\n+                xtr);\n         startEvent.setInitiator(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                                      ATTRIBUTE_EVENT_START_INITIATOR));\n+                ATTRIBUTE_EVENT_START_INITIATOR));\n         boolean interrupting = true;\n         String interruptingAttribute = xtr.getAttributeValue(null,\n-                                                             ATTRIBUTE_EVENT_START_INTERRUPTING);\n+                ATTRIBUTE_EVENT_START_INTERRUPTING);\n         if (ATTRIBUTE_VALUE_FALSE.equalsIgnoreCase(interruptingAttribute)) {\n             interrupting = false;\n         }\n@@ -61,9 +62,9 @@ public class StartEventXMLConverter extends BaseBpmnXMLConverter {\n         startEvent.setFormKey(formKey);\n \n         parseChildElements(getXMLElementName(),\n-                           startEvent,\n-                           model,\n-                           xtr);\n+                startEvent,\n+                model,\n+                xtr);\n \n         return startEvent;\n     }\n@@ -74,16 +75,16 @@ public class StartEventXMLConverter extends BaseBpmnXMLConverter {\n                                              XMLStreamWriter xtw) throws Exception {\n         StartEvent startEvent = (StartEvent) element;\n         writeQualifiedAttribute(ATTRIBUTE_EVENT_START_INITIATOR,\n-                                startEvent.getInitiator(),\n-                                xtw);\n+                startEvent.getInitiator(),\n+                xtw);\n         writeQualifiedAttribute(ATTRIBUTE_FORM_FORMKEY,\n-                                startEvent.getFormKey(),\n-                                xtw);\n+                startEvent.getFormKey(),\n+                xtw);\n \n         if (startEvent.getEventDefinitions() != null && startEvent.getEventDefinitions().size() > 0) {\n             writeQualifiedAttribute(ATTRIBUTE_EVENT_START_INTERRUPTING,\n-                                    String.valueOf(startEvent.isInterrupting()),\n-                                    xtw);\n+                    String.valueOf(startEvent.isInterrupting()),\n+                    xtw);\n         }\n     }\n \n@@ -93,8 +94,8 @@ public class StartEventXMLConverter extends BaseBpmnXMLConverter {\n                                                   XMLStreamWriter xtw) throws Exception {\n         StartEvent startEvent = (StartEvent) element;\n         didWriteExtensionStartElement = writeFormProperties(startEvent,\n-                                                            didWriteExtensionStartElement,\n-                                                            xtw);\n+                didWriteExtensionStartElement,\n+                xtw);\n         return didWriteExtensionStartElement;\n     }\n \n@@ -102,12 +103,12 @@ public class StartEventXMLConverter extends BaseBpmnXMLConverter {\n     protected void writeAdditionalChildElements(BaseElement element,\n                                                 BpmnModel model,\n                                                 XMLStreamWriter xtw) throws Exception {\n-        BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode)element, xtw);\n+        BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode) element, xtw);\n         StartEvent startEvent = (StartEvent) element;\n         writeEventDefinitions(startEvent,\n-                              startEvent.getEventDefinitions(),\n-                              model,\n-                              xtw);\n+                startEvent.getEventDefinitions(),\n+                model,\n+                xtw);\n     }\n \n }\n",
            "diff_size": 22
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": [
                {
                    "line": "13",
                    "severity": "error",
                    "message": "'package' should be separated from previous statement.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                },
                {
                    "line": "26",
                    "severity": "error",
                    "message": "'CLASS_DEF' has more than 1 empty lines before.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyLineSeparatorCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/317/StartEventXMLConverter.java\nindex 45ad8ed6a7e..748bc86ba8d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/codebuff/317/StartEventXMLConverter.java\n@@ -19,95 +19,78 @@ import org.activiti.bpmn.model.FlowNode;\n import org.activiti.bpmn.model.StartEvent;\n import org.activiti.bpmn.model.alfresco.AlfrescoStartEvent;\n import org.apache.commons.lang3.StringUtils;\n-\n import javax.xml.stream.XMLStreamReader;\n import javax.xml.stream.XMLStreamWriter;\n \n-public class StartEventXMLConverter extends BaseBpmnXMLConverter {\n-\n-    public Class<? extends BaseElement> getBpmnElementType() {\n-        return StartEvent.class;\n-    }\n-\n-    @Override\n-    protected String getXMLElementName() {\n-        return ELEMENT_EVENT_START;\n-    }\n \n-    @Override\n-    protected BaseElement convertXMLToElement(XMLStreamReader xtr,\n-                                              BpmnModel model) throws Exception {\n-        String formKey = xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                               ATTRIBUTE_FORM_FORMKEY);\n-        StartEvent startEvent = null;\n+public class StartEventXMLConverter extends BaseBpmnXMLConverter {\n \n-        if (StringUtils.isNotEmpty(formKey) && model.getStartEventFormTypes() != null && model.getStartEventFormTypes().contains(formKey)) {\n-            startEvent = new AlfrescoStartEvent();\n-        }\n-        if (startEvent == null) {\n-            startEvent = new StartEvent();\n-        }\n-        BpmnXMLUtil.addXMLLocation(startEvent,\n-                                   xtr);\n-        startEvent.setInitiator(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n-                                                      ATTRIBUTE_EVENT_START_INITIATOR));\n-        boolean interrupting = true;\n-        String interruptingAttribute = xtr.getAttributeValue(null,\n-                                                             ATTRIBUTE_EVENT_START_INTERRUPTING);\n-        if (ATTRIBUTE_VALUE_FALSE.equalsIgnoreCase(interruptingAttribute)) {\n-            interrupting = false;\n-        }\n-        startEvent.setInterrupting(interrupting);\n-        startEvent.setFormKey(formKey);\n+  public Class<? extends BaseElement> getBpmnElementType() {\n+    return StartEvent.class;\n+  }\n \n-        parseChildElements(getXMLElementName(),\n-                           startEvent,\n-                           model,\n-                           xtr);\n+  @Override\n+  protected String getXMLElementName() {\n+    return ELEMENT_EVENT_START;\n+  }\n \n-        return startEvent;\n+  @Override\n+  protected BaseElement convertXMLToElement(XMLStreamReader xtr, BpmnModel model) throws Exception {\n+    String formKey = xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n+                                           ATTRIBUTE_FORM_FORMKEY);\n+    StartEvent startEvent = null;\n+    if (StringUtils.isNotEmpty(formKey) && model.getStartEventFormTypes() != null && model.getStartEventFormTypes().contains(formKey)) {\n+      startEvent = new AlfrescoStartEvent();\n     }\n-\n-    @Override\n-    protected void writeAdditionalAttributes(BaseElement element,\n-                                             BpmnModel model,\n-                                             XMLStreamWriter xtw) throws Exception {\n-        StartEvent startEvent = (StartEvent) element;\n-        writeQualifiedAttribute(ATTRIBUTE_EVENT_START_INITIATOR,\n-                                startEvent.getInitiator(),\n-                                xtw);\n-        writeQualifiedAttribute(ATTRIBUTE_FORM_FORMKEY,\n-                                startEvent.getFormKey(),\n-                                xtw);\n-\n-        if (startEvent.getEventDefinitions() != null && startEvent.getEventDefinitions().size() > 0) {\n-            writeQualifiedAttribute(ATTRIBUTE_EVENT_START_INTERRUPTING,\n-                                    String.valueOf(startEvent.isInterrupting()),\n-                                    xtw);\n-        }\n+    if (startEvent == null) {\n+      startEvent = new StartEvent();\n     }\n+    BpmnXMLUtil.addXMLLocation(startEvent, xtr);\n+    startEvent.setInitiator(xtr.getAttributeValue(ACTIVITI_EXTENSIONS_NAMESPACE,\n+                                                  ATTRIBUTE_EVENT_START_INITIATOR));\n \n-    @Override\n-    protected boolean writeExtensionChildElements(BaseElement element,\n-                                                  boolean didWriteExtensionStartElement,\n-                                                  XMLStreamWriter xtw) throws Exception {\n-        StartEvent startEvent = (StartEvent) element;\n-        didWriteExtensionStartElement = writeFormProperties(startEvent,\n-                                                            didWriteExtensionStartElement,\n-                                                            xtw);\n-        return didWriteExtensionStartElement;\n+    boolean interrupting = true;\n+    String interruptingAttribute = xtr.getAttributeValue(null, ATTRIBUTE_EVENT_START_INTERRUPTING);\n+    if (ATTRIBUTE_VALUE_FALSE.equalsIgnoreCase(interruptingAttribute)) {\n+      interrupting = false;\n     }\n+    startEvent.setInterrupting(interrupting);\n+    startEvent.setFormKey(formKey);\n+    parseChildElements(getXMLElementName(), startEvent, model, xtr);\n+    return startEvent;\n+  }\n \n-    @Override\n-    protected void writeAdditionalChildElements(BaseElement element,\n-                                                BpmnModel model,\n-                                                XMLStreamWriter xtw) throws Exception {\n-        BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode)element, xtw);\n-        StartEvent startEvent = (StartEvent) element;\n-        writeEventDefinitions(startEvent,\n-                              startEvent.getEventDefinitions(),\n-                              model,\n-                              xtw);\n+  @Override\n+  protected void writeAdditionalAttributes(BaseElement element, BpmnModel model, XMLStreamWriter xtw) throws Exception {\n+    StartEvent startEvent = (StartEvent) element;\n+    writeQualifiedAttribute(ATTRIBUTE_EVENT_START_INITIATOR,\n+                            startEvent.getInitiator(),\n+                            xtw);\n+    writeQualifiedAttribute(ATTRIBUTE_FORM_FORMKEY,\n+                            startEvent.getFormKey(),\n+                            xtw);\n+    if (startEvent.getEventDefinitions() != null && startEvent.getEventDefinitions().size() > 0) {\n+      writeQualifiedAttribute(ATTRIBUTE_EVENT_START_INTERRUPTING, String.valueOf(startEvent.isInterrupting()), xtw);\n     }\n+  }\n+\n+  @Override\n+  protected boolean writeExtensionChildElements(BaseElement element, boolean didWriteExtensionStartElement, XMLStreamWriter xtw) throws Exception {\n+    StartEvent startEvent = (StartEvent) element;\n+    didWriteExtensionStartElement = writeFormProperties(startEvent,\n+                                                        didWriteExtensionStartElement,\n+                                                        xtw);\n+    return didWriteExtensionStartElement;\n+  }\n+\n+  @Override\n+  protected void writeAdditionalChildElements(BaseElement element, BpmnModel model, XMLStreamWriter xtw) throws Exception {\n+    BpmnXMLUtil.writeIncomingAndOutgoingFlowElement((FlowNode) element, xtw);\n \n-}\n+    StartEvent startEvent = (StartEvent) element;\n+    writeEventDefinitions(startEvent,\n+                          startEvent.getEventDefinitions(),\n+                          model,\n+                          xtw);\n+  }\n+}\n\\ No newline at end of file\n",
            "diff_size": 113
        },
        {
            "tool": "styler_random",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/317/StartEventXMLConverter.java\nindex 45ad8ed6a7e..84d233a4bdd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_random/317/StartEventXMLConverter.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter;\n \n import org.activiti.bpmn.converter.util.BpmnXMLUtil;\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/317/StartEventXMLConverter.java\nindex 45ad8ed6a7e..84d233a4bdd 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/errored/1/317/StartEventXMLConverter.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/Activiti-Activiti/styler_three_grams/317/StartEventXMLConverter.java\n@@ -10,6 +10,7 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.activiti.bpmn.converter;\n \n import org.activiti.bpmn.converter.util.BpmnXMLUtil;\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "styler",
        "intellij",
        "styler_random",
        "styler_three_grams"
    ],
    "not_repaired_by": [
        "naturalize",
        "codebuff"
    ]
}