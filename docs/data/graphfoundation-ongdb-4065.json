{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4065",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "35",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "35",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "47",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "49",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "51",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "63",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "63",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "79",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "92",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "96",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "102",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "104",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "108",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "110",
                    "column": "76",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "127",
                    "column": "74",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "131",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "143",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "166",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "170",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "173",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "184",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "188",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "190",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "34",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "210",
                    "column": "89",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "212",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "218",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "220",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "229",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "233",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "235",
                    "column": "104",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "253",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "255",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "261",
                    "column": "28",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "263",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "270",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "272",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "272",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "276",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "278",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4065/Nodes.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4065/Nodes.java\nindex 23ec6b0a29a..02690f3357a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4065/Nodes.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4065/Nodes.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.internal.kernel.api.helpers;\n \n import org.neo4j.internal.kernel.api.CursorFactory;\n@@ -29,264 +30,258 @@ import org.neo4j.internal.kernel.api.RelationshipTraversalCursor;\n  */\n public final class Nodes\n {\n-    private Nodes()\n-    {\n-        throw new UnsupportedOperationException( \"Do not instantiate\" );\n-    }\n+  private Nodes()\n+  {\n+    throw new UnsupportedOperationException(\"Do not instantiate\");\n+  }\n \n-    /**\n-     * Counts the number of outgoing relationships from node where the cursor is positioned.\n-     * <p>\n-     * NOTE: The number of outgoing relationships also includes eventual loops.\n-     *\n-     * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n-     * @param cursors a factory for cursors\n-     * @return the number of outgoing - including loops - relationships from the node\n-     */\n-    public static int countOutgoing( NodeCursor nodeCursor, CursorFactory cursors )\n+  /**\n+   * Counts the number of outgoing relationships from node where the cursor is positioned.\n+   * <p>\n+   * NOTE: The number of outgoing relationships also includes eventual loops.\n+   *\n+   * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n+   * @param cursors    a factory for cursors\n+   * @return the number of outgoing - including loops - relationships from the node\n+   */\n+  public static int countOutgoing(NodeCursor nodeCursor, CursorFactory cursors)\n+  {\n+    if (nodeCursor.isDense())\n     {\n-        if ( nodeCursor.isDense() )\n+      try (RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor())\n+      {\n+        nodeCursor.relationships(group);\n+        int count = 0;\n+        while (group.next())\n         {\n-            try ( RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor() )\n-            {\n-                nodeCursor.relationships( group );\n-                int count = 0;\n-                while ( group.next() )\n-                {\n-                    count += group.outgoingCount() + group.loopCount();\n-                }\n-                return count;\n-            }\n+          count += group.outgoingCount() + group.loopCount();\n         }\n-        else\n+        return count;\n+      }\n+    } else\n+    {\n+      try (RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor())\n+      {\n+        int count = 0;\n+        nodeCursor.allRelationships(traversal);\n+        while (traversal.next())\n         {\n-            try ( RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor() )\n-            {\n-                int count = 0;\n-                nodeCursor.allRelationships( traversal );\n-                while ( traversal.next() )\n-                {\n-                    if ( traversal.sourceNodeReference() == nodeCursor.nodeReference() )\n-                    {\n-                        count++;\n-                    }\n-                }\n-                return count;\n-            }\n+          if (traversal.sourceNodeReference() == nodeCursor.nodeReference())\n+          {\n+            count++;\n+          }\n         }\n+        return count;\n+      }\n     }\n+  }\n \n-    /**\n-     * Counts the number of incoming relationships from node where the cursor is positioned.\n-     * <p>\n-     * NOTE: The number of incoming relationships also includes eventual loops.\n-     *\n-     * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n-     * @param cursors a factory for cursors\n-     * @return the number of incoming - including loops - relationships from the node\n-     */\n-    public static int countIncoming( NodeCursor nodeCursor, CursorFactory cursors )\n+  /**\n+   * Counts the number of incoming relationships from node where the cursor is positioned.\n+   * <p>\n+   * NOTE: The number of incoming relationships also includes eventual loops.\n+   *\n+   * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n+   * @param cursors    a factory for cursors\n+   * @return the number of incoming - including loops - relationships from the node\n+   */\n+  public static int countIncoming(NodeCursor nodeCursor, CursorFactory cursors)\n+  {\n+    if (nodeCursor.isDense())\n     {\n-        if ( nodeCursor.isDense() )\n+      try (RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor())\n+      {\n+        nodeCursor.relationships(group);\n+        int count = 0;\n+        while (group.next())\n         {\n-            try ( RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor() )\n-            {\n-                nodeCursor.relationships( group );\n-                int count = 0;\n-                while ( group.next() )\n-                {\n-                    count += group.incomingCount() + group.loopCount();\n-                }\n-                return count;\n-            }\n+          count += group.incomingCount() + group.loopCount();\n         }\n-        else\n+        return count;\n+      }\n+    } else\n+    {\n+      try (RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor())\n+      {\n+        int count = 0;\n+        nodeCursor.allRelationships(traversal);\n+        while (traversal.next())\n         {\n-            try ( RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor() )\n-            {\n-                int count = 0;\n-                nodeCursor.allRelationships( traversal );\n-                while ( traversal.next() )\n-                {\n-                    if ( traversal.targetNodeReference() == nodeCursor.nodeReference() )\n-                    {\n-                        count++;\n-                    }\n-                }\n-                return count;\n-            }\n+          if (traversal.targetNodeReference() == nodeCursor.nodeReference())\n+          {\n+            count++;\n+          }\n         }\n+        return count;\n+      }\n     }\n+  }\n \n-    /**\n-     * Counts all the relationships from node where the cursor is positioned.\n-     *\n-     * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n-     * @param cursors a factory for cursors\n-     * @return the number of relationships from the node\n-     */\n-    public static int countAll( NodeCursor nodeCursor, CursorFactory cursors )\n+  /**\n+   * Counts all the relationships from node where the cursor is positioned.\n+   *\n+   * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n+   * @param cursors    a factory for cursors\n+   * @return the number of relationships from the node\n+   */\n+  public static int countAll(NodeCursor nodeCursor, CursorFactory cursors)\n+  {\n+    if (nodeCursor.isDense())\n     {\n-        if ( nodeCursor.isDense() )\n+      try (RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor())\n+      {\n+        nodeCursor.relationships(group);\n+        int count = 0;\n+        while (group.next())\n         {\n-            try ( RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor() )\n-            {\n-                nodeCursor.relationships( group );\n-                int count = 0;\n-                while ( group.next() )\n-                {\n-                    count += group.totalCount();\n-                }\n-                return count;\n-            }\n+          count += group.totalCount();\n         }\n-        else\n+        return count;\n+      }\n+    } else\n+    {\n+      try (RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor())\n+      {\n+        int count = 0;\n+        nodeCursor.allRelationships(traversal);\n+        while (traversal.next())\n         {\n-            try ( RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor() )\n-            {\n-                int count = 0;\n-                nodeCursor.allRelationships( traversal );\n-                while ( traversal.next() )\n-                {\n-                    count++;\n-                }\n-                return count;\n-            }\n+          count++;\n         }\n+        return count;\n+      }\n     }\n+  }\n \n-    /**\n-     * Counts the number of outgoing relationships of the given type from node where the cursor is positioned.\n-     * <p>\n-     * NOTE: The number of outgoing relationships also includes eventual loops.\n-     *\n-     * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n-     * @param cursors a factory for cursors\n-     * @param type the type of the relationship we're counting\n-     * @return the number of outgoing - including loops - relationships from the node with the given type\n-     */\n-    public static int countOutgoing( NodeCursor nodeCursor, CursorFactory cursors, int type )\n+  /**\n+   * Counts the number of outgoing relationships of the given type from node where the cursor is positioned.\n+   * <p>\n+   * NOTE: The number of outgoing relationships also includes eventual loops.\n+   *\n+   * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n+   * @param cursors    a factory for cursors\n+   * @param type       the type of the relationship we're counting\n+   * @return the number of outgoing - including loops - relationships from the node with the given type\n+   */\n+  public static int countOutgoing(NodeCursor nodeCursor, CursorFactory cursors, int type)\n+  {\n+    if (nodeCursor.isDense())\n     {\n-        if ( nodeCursor.isDense() )\n+      try (RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor())\n+      {\n+        nodeCursor.relationships(group);\n+        while (group.next())\n         {\n-            try ( RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor() )\n-            {\n-                nodeCursor.relationships( group );\n-                while ( group.next() )\n-                {\n-                    if ( group.type() == type )\n-                    {\n-                        return group.outgoingCount() + group.loopCount();\n-                    }\n-                }\n-                return 0;\n-            }\n+          if (group.type() == type)\n+          {\n+            return group.outgoingCount() + group.loopCount();\n+          }\n         }\n-        else\n+        return 0;\n+      }\n+    } else\n+    {\n+      try (RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor())\n+      {\n+        int count = 0;\n+        nodeCursor.allRelationships(traversal);\n+        while (traversal.next())\n         {\n-            try ( RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor() )\n-            {\n-                int count = 0;\n-                nodeCursor.allRelationships( traversal );\n-                while ( traversal.next() )\n-                {\n-                    if ( traversal.sourceNodeReference() == nodeCursor.nodeReference() && traversal.type() == type )\n-                    {\n-                        count++;\n-                    }\n-                }\n-                return count;\n-            }\n+          if (traversal.sourceNodeReference() == nodeCursor.nodeReference() && traversal.type() == type)\n+          {\n+            count++;\n+          }\n         }\n+        return count;\n+      }\n     }\n+  }\n \n-    /**\n-     * Counts the number of incoming relationships of the given type from node where the cursor is positioned.\n-     * <p>\n-     * NOTE: The number of incoming relationships also includes eventual loops.\n-     *\n-     * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n-     * @param cursors a factory for cursors\n-     * @param type the type of the relationship we're counting\n-     * @return the number of incoming - including loops - relationships from the node with the given type\n-     */\n-    public static int countIncoming( NodeCursor nodeCursor, CursorFactory cursors, int type )\n+  /**\n+   * Counts the number of incoming relationships of the given type from node where the cursor is positioned.\n+   * <p>\n+   * NOTE: The number of incoming relationships also includes eventual loops.\n+   *\n+   * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n+   * @param cursors    a factory for cursors\n+   * @param type       the type of the relationship we're counting\n+   * @return the number of incoming - including loops - relationships from the node with the given type\n+   */\n+  public static int countIncoming(NodeCursor nodeCursor, CursorFactory cursors, int type)\n+  {\n+    if (nodeCursor.isDense())\n     {\n-        if ( nodeCursor.isDense() )\n+      try (RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor())\n+      {\n+        nodeCursor.relationships(group);\n+        int count = 0;\n+        while (group.next())\n         {\n-            try ( RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor() )\n-            {\n-                nodeCursor.relationships( group );\n-                int count = 0;\n-                while ( group.next() )\n-                {\n-                    if ( group.type() == type )\n-                    {\n-                        return group.incomingCount() + group.loopCount();\n-                    }\n-                }\n-                return count;\n-            }\n+          if (group.type() == type)\n+          {\n+            return group.incomingCount() + group.loopCount();\n+          }\n         }\n-        else\n+        return count;\n+      }\n+    } else\n+    {\n+      try (RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor())\n+      {\n+        int count = 0;\n+        nodeCursor.allRelationships(traversal);\n+        while (traversal.next())\n         {\n-            try ( RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor() )\n-            {\n-                int count = 0;\n-                nodeCursor.allRelationships( traversal );\n-                while ( traversal.next() )\n-                {\n-                    if ( traversal.targetNodeReference() == nodeCursor.nodeReference() && traversal.type() == type )\n-                    {\n-                        count++;\n-                    }\n-                }\n-                return count;\n-            }\n+          if (traversal.targetNodeReference() == nodeCursor.nodeReference() && traversal.type() == type)\n+          {\n+            count++;\n+          }\n         }\n+        return count;\n+      }\n     }\n+  }\n \n-    /**\n-     * Counts all the relationships of the given type from node where the cursor is positioned.\n-     *\n-     * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n-     * @param cursors a factory for cursors\n-     * @param type the type of the relationship we're counting\n-     * @return the number relationships from the node with the given type\n-     */\n-    public static int countAll( NodeCursor nodeCursor, CursorFactory cursors, int type )\n+  /**\n+   * Counts all the relationships of the given type from node where the cursor is positioned.\n+   *\n+   * @param nodeCursor a cursor positioned at the node whose relationships we're counting\n+   * @param cursors    a factory for cursors\n+   * @param type       the type of the relationship we're counting\n+   * @return the number relationships from the node with the given type\n+   */\n+  public static int countAll(NodeCursor nodeCursor, CursorFactory cursors, int type)\n+  {\n+    if (nodeCursor.isDense())\n     {\n-        if ( nodeCursor.isDense() )\n+      try (RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor())\n+      {\n+        nodeCursor.relationships(group);\n+        int count = 0;\n+        while (group.next())\n         {\n-            try ( RelationshipGroupCursor group = cursors.allocateRelationshipGroupCursor() )\n-            {\n-                nodeCursor.relationships( group );\n-                int count = 0;\n-                while ( group.next() )\n-                {\n-                    if ( group.type() == type )\n-                    {\n-                        return group.totalCount();\n-                    }\n-                }\n-                return count;\n-            }\n+          if (group.type() == type)\n+          {\n+            return group.totalCount();\n+          }\n         }\n-        else\n+        return count;\n+      }\n+    } else\n+    {\n+      try (RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor())\n+      {\n+        int count = 0;\n+        nodeCursor.allRelationships(traversal);\n+        while (traversal.next())\n         {\n-            try ( RelationshipTraversalCursor traversal = cursors.allocateRelationshipTraversalCursor() )\n-            {\n-                int count = 0;\n-                nodeCursor.allRelationships( traversal );\n-                while ( traversal.next() )\n-                {\n-                    if ( traversal.type() == type )\n-                    {\n-                        count++;\n-                    }\n-                }\n-                return count;\n-            }\n+          if (traversal.type() == type)\n+          {\n+            count++;\n+          }\n         }\n+        return count;\n+      }\n     }\n+  }\n }\n",
            "diff_size": 320
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4065/Nodes.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4065/Nodes.java\nindex 23ec6b0a29a..47dfa8e09fb 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4065/Nodes.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4065/Nodes.java\n@@ -55,7 +55,8 @@ public final class Nodes\n                 {\n                     count += group.outgoingCount() + group.loopCount();\n                 }\n-                return count;\n+\n+return count;\n             }\n         }\n         else\n@@ -97,7 +98,8 @@ public final class Nodes\n                 {\n                     count += group.incomingCount() + group.loopCount();\n                 }\n-                return count;\n+\n+return count;\n             }\n         }\n         else\n@@ -137,7 +139,8 @@ public final class Nodes\n                 {\n                     count += group.totalCount();\n                 }\n-                return count;\n+\n+return count;\n             }\n         }\n         else\n@@ -150,7 +153,8 @@ public final class Nodes\n                 {\n                     count++;\n                 }\n-                return count;\n+\n+return count;\n             }\n         }\n     }\n@@ -289,4 +293,4 @@ public final class Nodes\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 9
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}