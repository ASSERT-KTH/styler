{
    "project_name": "neo4j-neo4j",
    "error_id": "2086",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "42",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "42",
                    "column": "91",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "55",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "61",
                    "column": "19",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "61",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "70",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2086/StatementLocksFactorySelector.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2086/StatementLocksFactorySelector.java\nindex f1ed782894d..05e3da3016c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2086/StatementLocksFactorySelector.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2086/StatementLocksFactorySelector.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.factory;\n \n import java.util.Collection;\n@@ -38,11 +39,11 @@ public class StatementLocksFactorySelector\n     private final Config config;\n     private final Log log;\n \n-    public StatementLocksFactorySelector( Locks locks, Config config, LogService logService )\n+    public StatementLocksFactorySelector(Locks locks, Config config, LogService logService)\n     {\n         this.locks = locks;\n         this.config = config;\n-        this.log = logService.getInternalLog( getClass() );\n+        this.log = logService.getInternalLog(getClass());\n     }\n \n     public StatementLocksFactory select()\n@@ -51,27 +52,25 @@ public class StatementLocksFactorySelector\n \n         String serviceName = StatementLocksFactory.class.getSimpleName();\n         Collection<StatementLocksFactory> factories = serviceLoadFactories();\n-        if ( factories.isEmpty() )\n+        if (factories.isEmpty())\n         {\n             statementLocksFactory = new SimpleStatementLocksFactory();\n \n-            log.info( \"No services implementing \" + serviceName + \" found. \" +\n-                      \"Using \" + SimpleStatementLocksFactory.class.getSimpleName() );\n-        }\n-        else if ( factories.size() == 1 )\n+            log.info(\"No services implementing \" + serviceName + \" found. \" +\n+              \"Using \" + SimpleStatementLocksFactory.class.getSimpleName());\n+        } else if (factories.size() == 1)\n         {\n-            statementLocksFactory = Iterables.first( factories );\n+            statementLocksFactory = Iterables.first(factories);\n \n-            log.info( \"Found single implementation of \" + serviceName +\n-                      \". Namely \" + statementLocksFactory.getClass().getSimpleName() );\n-        }\n-        else\n+            log.info(\"Found single implementation of \" + serviceName +\n+              \". Namely \" + statementLocksFactory.getClass().getSimpleName());\n+        } else\n         {\n             throw new IllegalStateException(\n-                    \"Found more than one implementation of \" + serviceName + \": \" + factories );\n+              \"Found more than one implementation of \" + serviceName + \": \" + factories);\n         }\n \n-        statementLocksFactory.initialize( locks, config );\n+        statementLocksFactory.initialize(locks, config);\n \n         return statementLocksFactory;\n     }\n@@ -84,6 +83,6 @@ public class StatementLocksFactorySelector\n     @VisibleForTesting\n     Collection<StatementLocksFactory> serviceLoadFactories()\n     {\n-        return Services.loadAll( StatementLocksFactory.class );\n+        return Services.loadAll(StatementLocksFactory.class);\n     }\n }\n",
            "diff_size": 16
        },
        {
            "tool": "naturalize",
            "errors": null,
            "diff": null
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}