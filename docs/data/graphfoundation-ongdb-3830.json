{
    "project_name": "graphfoundation-ongdb",
    "error_id": "3830",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "58",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "65",
                    "column": "48",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "67",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "68",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "69",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "70",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "71",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "72",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "73",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "80",
                    "column": "102",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "82",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "83",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "85",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "87",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "88",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "89",
                    "column": "124",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "90",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "91",
                    "column": "90",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "103",
                    "column": "30",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "104",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "109",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "119",
                    "column": "52",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "37",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "129",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "135",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "135",
                    "column": "26",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "141",
                    "column": "29",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "143",
                    "column": "25",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "147",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "155",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "164",
                    "column": "60",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "167",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "175",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "177",
                    "column": "101",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "181",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "182",
                    "column": "35",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "184",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "187",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "193",
                    "column": "17",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "195",
                    "column": "18",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "198",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "207",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "207",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "213",
                    "column": "29",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "214",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "9",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "217",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "222",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "225",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "227",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "227",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "229",
                    "column": "86",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "237",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "240",
                    "column": "72",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "246",
                    "column": "14",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "249",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "257",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "260",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "266",
                    "column": "9",
                    "severity": "error",
                    "message": "'}' at column 9 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "272",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "275",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "275",
                    "column": "44",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "280",
                    "column": "32",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "283",
                    "column": "46",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "284",
                    "column": "47",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "293",
                    "column": "56",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "295",
                    "column": "77",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "301",
                    "column": "47",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "31",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "64",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "302",
                    "column": "65",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "23",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "319",
                    "column": "97",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "11",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "323",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "24",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "330",
                    "column": "42",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "334",
                    "column": "33",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "12",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "336",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "14",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "339",
                    "column": "67",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "351",
                    "column": "50",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "352",
                    "column": "123",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "354",
                    "column": "19",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "359",
                    "column": "5",
                    "severity": "error",
                    "message": "'}' at column 5 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "361",
                    "column": "10",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "361",
                    "column": "30",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "364",
                    "column": "7",
                    "severity": "error",
                    "message": "'}' at column 7 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "373",
                    "column": "41",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "374",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "36",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "382",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3830/Ls.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3830/Ls.java\nindex 12a4230ba20..0886a86468a 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3830/Ls.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/3830/Ls.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.shell.kernel.apps;\n \n import java.rmi.RemoteException;\n@@ -54,340 +55,332 @@ import org.neo4j.shell.ShellException;\n  * Mimics the POSIX application with the same name, i.e. lists\n  * properties/relationships on a node or a relationship.\n  */\n-@Service.Implementation( App.class )\n+@Service.Implementation(App.class)\n public class Ls extends TransactionProvidingApp\n {\n-    private static final int DEFAULT_MAX_RELS_PER_TYPE_LIMIT = 10;\n+  private static final int DEFAULT_MAX_RELS_PER_TYPE_LIMIT = 10;\n \n-    {\n-        addOptionDefinition( \"b\", new OptionDefinition( OptionValueType.NONE,\n-            \"Brief summary instead of full content\" ) );\n-        addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE,\n-            \"Verbose mode\" ) );\n-        addOptionDefinition( \"q\", new OptionDefinition( OptionValueType.NONE, \"Quiet mode\" ) );\n-        addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.NONE,\n-            \"Lists properties\" ) );\n-        addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE,\n-            \"Lists relationships\" ) );\n-        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.MUST,\n-            \"Filters property keys/values and relationship types. Supplied either as a single value \" +\n+  {\n+    addOptionDefinition(\"b\", new OptionDefinition(OptionValueType.NONE,\n+        \"Brief summary instead of full content\"));\n+    addOptionDefinition(\"v\", new OptionDefinition(OptionValueType.NONE,\n+        \"Verbose mode\"));\n+    addOptionDefinition(\"q\", new OptionDefinition(OptionValueType.NONE, \"Quiet mode\"));\n+    addOptionDefinition(\"p\", new OptionDefinition(OptionValueType.NONE,\n+        \"Lists properties\"));\n+    addOptionDefinition(\"r\", new OptionDefinition(OptionValueType.NONE,\n+        \"Lists relationships\"));\n+    addOptionDefinition(\"f\", new OptionDefinition(OptionValueType.MUST,\n+        \"Filters property keys/values and relationship types. Supplied either as a single value \" +\n             \"or as a JSON string where both keys and values can contain regex. \" +\n             \"Starting/ending {} brackets are optional. Examples:\\n\" +\n             \"  \\\"username\\\"\\n\\tproperty/relationship 'username' gets listed\\n\" +\n             \"  \\\".*name:ma.*, age:''\\\"\\n\\tproperties with keys matching '.*name' and values matching 'ma.*' \" +\n             \"gets listed,\\n\\tas well as the 'age' property. Also relationships matching '.*name' or 'age'\\n\\tgets listed\\n\" +\n-            \"  \\\"KNOWS:out,LOVES:in\\\"\\n\\toutgoing KNOWS and incoming LOVES relationships gets listed\" ) );\n-        addOptionDefinition( \"i\", new OptionDefinition( OptionValueType.NONE,\n-            \"Filters are case-insensitive (case-sensitive by default)\" ) );\n-        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.NONE,\n-            \"Filters matches more loosely, i.e. it's considered a match if just \" +\n-            \"a part of a value matches the pattern, not necessarily the whole value\" ) );\n-        addOptionDefinition( \"s\", new OptionDefinition( OptionValueType.NONE,\n-            \"Sorts relationships by type.\" ) );\n-        addOptionDefinition( \"m\", new OptionDefinition( OptionValueType.MAY,\n-            \"Display a maximum of M relationships per type (default \" + DEFAULT_MAX_RELS_PER_TYPE_LIMIT + \" if no value given)\" ) );\n-        addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE,\n-            \"Allows for cd:ing to a node not connected to the current node (e.g. 'absolute')\" ) );\n-    }\n+            \"  \\\"KNOWS:out,LOVES:in\\\"\\n\\toutgoing KNOWS and incoming LOVES relationships gets listed\"));\n+    addOptionDefinition(\"i\", new OptionDefinition(OptionValueType.NONE,\n+        \"Filters are case-insensitive (case-sensitive by default)\"));\n+    addOptionDefinition(\"l\", new OptionDefinition(OptionValueType.NONE,\n+        \"Filters matches more loosely, i.e. it's considered a match if just \" +\n+            \"a part of a value matches the pattern, not necessarily the whole value\"));\n+    addOptionDefinition(\"s\", new OptionDefinition(OptionValueType.NONE,\n+        \"Sorts relationships by type.\"));\n+    addOptionDefinition(\"m\", new OptionDefinition(OptionValueType.MAY,\n+        \"Display a maximum of M relationships per type (default \" + DEFAULT_MAX_RELS_PER_TYPE_LIMIT + \" if no value given)\"));\n+    addOptionDefinition(\"a\", new OptionDefinition(OptionValueType.NONE,\n+        \"Allows for cd:ing to a node not connected to the current node (e.g. 'absolute')\"));\n+  }\n \n-    @Override\n-    public String getDescription()\n+  @Override\n+  public String getDescription()\n+  {\n+    return \"Lists the contents of the current node or relationship. \" +\n+        \"Optionally supply\\n\" +\n+        \"node id for listing a certain node using \\\"ls <node-id>\\\"\";\n+  }\n+\n+  @Override\n+  protected Continuation exec(AppCommandParser parser, Session session,\n+                              Output out) throws ShellException, RemoteException\n+  {\n+    boolean brief = parser.options().containsKey(\"b\");\n+    boolean verbose = parser.options().containsKey(\"v\");\n+    boolean quiet = parser.options().containsKey(\"q\");\n+    if (verbose && quiet)\n     {\n-        return \"Lists the contents of the current node or relationship. \" +\n-            \"Optionally supply\\n\" +\n-            \"node id for listing a certain node using \\\"ls <node-id>\\\"\";\n+      verbose = false;\n+      quiet = false;\n     }\n-\n-    @Override\n-    protected Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws ShellException, RemoteException\n+    boolean displayProperties = parser.options().containsKey(\"p\");\n+    boolean displayRelationships = parser.options().containsKey(\"r\");\n+    boolean caseInsensitiveFilters = parser.options().containsKey(\"i\");\n+    boolean looseFilters = parser.options().containsKey(\"l\");\n+    Map<String, Object> filterMap = parseFilter(parser.options().get(\"f\"), out);\n+    if (!displayProperties && !displayRelationships)\n     {\n-        boolean brief = parser.options().containsKey( \"b\" );\n-        boolean verbose = parser.options().containsKey( \"v\" );\n-        boolean quiet = parser.options().containsKey( \"q\" );\n-        if ( verbose && quiet )\n-        {\n-            verbose = false;\n-            quiet = false;\n-        }\n-        boolean displayProperties = parser.options().containsKey( \"p\" );\n-        boolean displayRelationships = parser.options().containsKey( \"r\" );\n-        boolean caseInsensitiveFilters = parser.options().containsKey( \"i\" );\n-        boolean looseFilters = parser.options().containsKey( \"l\" );\n-        Map<String, Object> filterMap = parseFilter( parser.options().get( \"f\" ), out );\n-        if ( !displayProperties && !displayRelationships )\n-        {\n-            displayProperties = true;\n-            displayRelationships = true;\n-        }\n-\n-        NodeOrRelationship thing = null;\n-        if ( parser.arguments().isEmpty() )\n-        {\n-            thing = this.getCurrent( session );\n-        }\n-        else\n-        {\n-            thing = NodeOrRelationship.wrap( this.getNodeById( Long\n-                .parseLong( parser.arguments().get( 0 ) ) ) );\n-        }\n-\n-        if ( displayProperties )\n-        {\n-            displayLabels( thing, out, filterMap, caseInsensitiveFilters, looseFilters, brief );\n-            displayProperties( thing, out, verbose, quiet, filterMap, caseInsensitiveFilters,\n-                    looseFilters, brief );\n-        }\n-        if ( displayRelationships )\n-        {\n-            if ( thing.isNode() )\n-            {\n-                displayRelationships( parser, thing, session, out, verbose, quiet,\n-                        filterMap, caseInsensitiveFilters, looseFilters, brief );\n-            }\n-            else\n-            {\n-                displayNodes( parser, thing, session, out );\n-            }\n-        }\n-        return Continuation.INPUT_COMPLETE;\n+      displayProperties = true;\n+      displayRelationships = true;\n     }\n \n-    private void displayNodes( AppCommandParser parser, NodeOrRelationship thing,\n-            Session session, Output out ) throws RemoteException, ShellException\n+    NodeOrRelationship thing = null;\n+    if (parser.arguments().isEmpty())\n     {\n-        Relationship rel = thing.asRelationship();\n-        out.println( getDisplayName( getServer(), session, rel.getStartNode(), false ) +\n-                \" --\" + getDisplayName( getServer(), session, rel, true, false ) + \"-> \" +\n-                getDisplayName( getServer(), session, rel.getEndNode(), false ) );\n+      thing = this.getCurrent(session);\n+    } else\n+    {\n+      thing = NodeOrRelationship.wrap(this.getNodeById(Long\n+          .parseLong(parser.arguments().get(0))));\n     }\n \n-    private Iterable<String> sortKeys( Iterable<String> source )\n+    if (displayProperties)\n     {\n-        List<String> list = new ArrayList<>();\n-        for ( String item : source )\n-        {\n-            list.add( item );\n-        }\n-        list.sort( Comparator.comparing( String::toLowerCase ) );\n-        return list;\n+      displayLabels(thing, out, filterMap, caseInsensitiveFilters, looseFilters, brief);\n+      displayProperties(thing, out, verbose, quiet, filterMap, caseInsensitiveFilters,\n+          looseFilters, brief);\n     }\n-\n-    private void displayProperties( NodeOrRelationship thing, Output out,\n-        boolean verbose, boolean quiet, Map<String, Object> filterMap,\n-        boolean caseInsensitiveFilters, boolean looseFilters, boolean brief )\n-        throws RemoteException\n+    if (displayRelationships)\n     {\n-        ColumnPrinter columnPrinter = quiet ?\n-                new ColumnPrinter( \"*\" ) :\n-                new ColumnPrinter( \"*\", \"=\" );\n-        int count = 0;\n-        for ( String key : sortKeys( thing.getPropertyKeys() ) )\n-        {\n-            Object value = thing.getProperty( key );\n-            if ( !filterMatches( filterMap, caseInsensitiveFilters, looseFilters, key, value ) )\n-            {\n-                continue;\n-            }\n+      if (thing.isNode())\n+      {\n+        displayRelationships(parser, thing, session, out, verbose, quiet,\n+            filterMap, caseInsensitiveFilters, looseFilters, brief);\n+      } else\n+      {\n+        displayNodes(parser, thing, session, out);\n+      }\n+    }\n+    return Continuation.INPUT_COMPLETE;\n+  }\n \n-            count++;\n-            if ( !brief )\n-            {\n-                if ( quiet )\n-                {\n-                    columnPrinter.add( key );\n-                }\n-                else\n-                {\n-                    columnPrinter.add( key, verbose ?\n-                            format( value, true ) + \" (\" + getNiceType( value ) + \")\" :\n-                            format( value, true ) );\n-                }\n-            }\n-        }\n-        columnPrinter.print( out );\n-        if ( brief )\n-        {\n-            out.println( \"Property count: \" + count );\n-        }\n+  private void displayNodes(AppCommandParser parser, NodeOrRelationship thing,\n+                            Session session, Output out) throws RemoteException, ShellException\n+  {\n+    Relationship rel = thing.asRelationship();\n+    out.println(getDisplayName(getServer(), session, rel.getStartNode(), false) +\n+        \" --\" + getDisplayName(getServer(), session, rel, true, false) + \"-> \" +\n+        getDisplayName(getServer(), session, rel.getEndNode(), false));\n+  }\n+\n+  private Iterable<String> sortKeys(Iterable<String> source)\n+  {\n+    List<String> list = new ArrayList<>();\n+    for (String item : source)\n+    {\n+      list.add(item);\n     }\n+    list.sort(Comparator.comparing(String::toLowerCase));\n+    return list;\n+  }\n \n-    private void displayLabels( NodeOrRelationship thing, Output out, Map<String, Object> filterMap,\n-            boolean caseInsensitiveFilters, boolean looseFilters, boolean brief ) throws RemoteException\n+  private void displayProperties(NodeOrRelationship thing, Output out,\n+                                 boolean verbose, boolean quiet, Map<String, Object> filterMap,\n+                                 boolean caseInsensitiveFilters, boolean looseFilters, boolean brief)\n+      throws RemoteException\n+  {\n+    ColumnPrinter columnPrinter = quiet ?\n+        new ColumnPrinter(\"*\") :\n+        new ColumnPrinter(\"*\", \"=\");\n+    int count = 0;\n+    for (String key : sortKeys(thing.getPropertyKeys()))\n     {\n-        List<String> labelNames = new ArrayList<>();\n-        for ( Label label : thing.asNode().getLabels() )\n-        {\n-            labelNames.add( label.name() );\n-        }\n+      Object value = thing.getProperty(key);\n+      if (!filterMatches(filterMap, caseInsensitiveFilters, looseFilters, key, value))\n+      {\n+        continue;\n+      }\n \n-        if ( brief )\n+      count++;\n+      if (!brief)\n+      {\n+        if (quiet)\n         {\n-            out.println( \"Label count: \" + labelNames.size() );\n-        }\n-        else\n+          columnPrinter.add(key);\n+        } else\n         {\n-            for ( String label : sortKeys( labelNames ) )\n-            {\n-                if ( filterMatches( filterMap, caseInsensitiveFilters, looseFilters, label, \"\" ) )\n-                {\n-                    out.println( \":\" + label );\n-                }\n-            }\n+          columnPrinter.add(key, verbose ?\n+              format(value, true) + \" (\" + getNiceType(value) + \")\" :\n+              format(value, true));\n         }\n+      }\n+    }\n+    columnPrinter.print(out);\n+    if (brief)\n+    {\n+      out.println(\"Property count: \" + count);\n     }\n+  }\n \n-    private void displayRelationships( AppCommandParser parser, NodeOrRelationship thing,\n-        Session session, Output out, boolean verbose, boolean quiet,\n-        Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n-        boolean looseFilters, boolean brief ) throws ShellException, RemoteException\n+  private void displayLabels(NodeOrRelationship thing, Output out, Map<String, Object> filterMap,\n+                             boolean caseInsensitiveFilters, boolean looseFilters, boolean brief) throws RemoteException\n+  {\n+    List<String> labelNames = new ArrayList<>();\n+    for (Label label : thing.asNode().getLabels())\n     {\n-        boolean sortByType = parser.options().containsKey( \"s\" );\n-        Node node = thing.asNode();\n-        Iterable<Relationship> relationships = getRelationships( node, filterMap,\n-                caseInsensitiveFilters, looseFilters, sortByType | brief );\n-        if ( brief )\n-        {\n-            Iterator<Relationship> iterator = relationships.iterator();\n-            if ( !iterator.hasNext() )\n-            {\n-                return;\n-            }\n+      labelNames.add(label.name());\n+    }\n \n-            Relationship sampleRelationship = iterator.next();\n-            RelationshipType lastType = sampleRelationship.getType();\n-            int currentCounter = 1;\n-            while ( iterator.hasNext() )\n-            {\n-                Relationship rel = iterator.next();\n-                if ( !rel.isType( lastType ) )\n-                {\n-                    displayBriefRelationships( thing, session, out, sampleRelationship, currentCounter );\n-                    sampleRelationship = rel;\n-                    lastType = sampleRelationship.getType();\n-                    currentCounter = 1;\n-                }\n-                else\n-                {\n-                    currentCounter++;\n-                }\n-            }\n-            displayBriefRelationships( thing, session, out, sampleRelationship, currentCounter );\n-        }\n-        else\n+    if (brief)\n+    {\n+      out.println(\"Label count: \" + labelNames.size());\n+    } else\n+    {\n+      for (String label : sortKeys(labelNames))\n+      {\n+        if (filterMatches(filterMap, caseInsensitiveFilters, looseFilters, label, \"\"))\n         {\n-            Iterator<Relationship> iterator = relationships.iterator();\n-            if ( parser.options().containsKey( \"m\" ) )\n-            {\n-                iterator = wrapInLimitingIterator( parser, iterator, filterMap, caseInsensitiveFilters, looseFilters );\n-            }\n-\n-            while ( iterator.hasNext() )\n-            {\n-                Relationship rel = iterator.next();\n-                StringBuilder buf = new StringBuilder( getDisplayName(\n-                        getServer(), session, thing, true ) );\n-                String relDisplay = quiet ? \"\" : getDisplayName( getServer(), session, rel, verbose, true );\n-                buf.append( withArrows( rel, relDisplay, thing.asNode() ) );\n-                buf.append( getDisplayName( getServer(), session, rel.getOtherNode( node ), true ) );\n-                out.println( buf );\n-            }\n+          out.println(\":\" + label);\n         }\n+      }\n     }\n+  }\n \n-    private Iterator<Relationship> wrapInLimitingIterator( AppCommandParser parser,\n-            Iterator<Relationship> iterator, Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n-            boolean looseFilters )\n+  private void displayRelationships(AppCommandParser parser, NodeOrRelationship thing,\n+                                    Session session, Output out, boolean verbose, boolean quiet,\n+                                    Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n+                                    boolean looseFilters, boolean brief) throws ShellException, RemoteException\n+  {\n+    boolean sortByType = parser.options().containsKey(\"s\");\n+    Node node = thing.asNode();\n+    Iterable<Relationship> relationships = getRelationships(node, filterMap,\n+        caseInsensitiveFilters, looseFilters, sortByType | brief);\n+    if (brief)\n     {\n-        final AtomicBoolean handBreak = new AtomicBoolean();\n-        int maxRelsPerType = parser.optionAsNumber( \"m\", DEFAULT_MAX_RELS_PER_TYPE_LIMIT ).intValue();\n-        Map<String, Direction> types = filterMapToTypes( getServer().getDb(),\n-                Direction.BOTH, filterMap, caseInsensitiveFilters, looseFilters );\n-        return new FilteringIterator<Relationship>( iterator,\n-                new LimitPerTypeFilter( maxRelsPerType, types, handBreak ) )\n+      Iterator<Relationship> iterator = relationships.iterator();\n+      if (!iterator.hasNext())\n+      {\n+        return;\n+      }\n+\n+      Relationship sampleRelationship = iterator.next();\n+      RelationshipType lastType = sampleRelationship.getType();\n+      int currentCounter = 1;\n+      while (iterator.hasNext())\n+      {\n+        Relationship rel = iterator.next();\n+        if (!rel.isType(lastType))\n+        {\n+          displayBriefRelationships(thing, session, out, sampleRelationship, currentCounter);\n+          sampleRelationship = rel;\n+          lastType = sampleRelationship.getType();\n+          currentCounter = 1;\n+        } else\n         {\n-            @Override\n-            protected Relationship fetchNextOrNull()\n-            {\n-                return handBreak.get() ? null : super.fetchNextOrNull();\n-            }\n-        };\n+          currentCounter++;\n+        }\n+      }\n+      displayBriefRelationships(thing, session, out, sampleRelationship, currentCounter);\n+    } else\n+    {\n+      Iterator<Relationship> iterator = relationships.iterator();\n+      if (parser.options().containsKey(\"m\"))\n+      {\n+        iterator = wrapInLimitingIterator(parser, iterator, filterMap, caseInsensitiveFilters, looseFilters);\n+      }\n+\n+      while (iterator.hasNext())\n+      {\n+        Relationship rel = iterator.next();\n+        StringBuilder buf = new StringBuilder(getDisplayName(\n+            getServer(), session, thing, true));\n+        String relDisplay = quiet ? \"\" : getDisplayName(getServer(), session, rel, verbose, true);\n+        buf.append(withArrows(rel, relDisplay, thing.asNode()));\n+        buf.append(getDisplayName(getServer(), session, rel.getOtherNode(node), true));\n+        out.println(buf);\n+      }\n     }\n+  }\n \n-    private static class LimitPerTypeFilter implements Predicate<Relationship>\n+  private Iterator<Relationship> wrapInLimitingIterator(AppCommandParser parser,\n+                                                        Iterator<Relationship> iterator, Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n+                                                        boolean looseFilters)\n+  {\n+    final AtomicBoolean handBreak = new AtomicBoolean();\n+    int maxRelsPerType = parser.optionAsNumber(\"m\", DEFAULT_MAX_RELS_PER_TYPE_LIMIT).intValue();\n+    Map<String, Direction> types = filterMapToTypes(getServer().getDb(),\n+        Direction.BOTH, filterMap, caseInsensitiveFilters, looseFilters);\n+    return new FilteringIterator<Relationship>(iterator,\n+        new LimitPerTypeFilter(maxRelsPerType, types, handBreak))\n     {\n-        private final int maxRelsPerType;\n-        private final Map<String, AtomicInteger> encounteredRelationships = new HashMap<>();\n-        private int typesMaxedOut;\n-        private final AtomicBoolean iterationHalted;\n+      @Override\n+      protected Relationship fetchNextOrNull()\n+      {\n+        return handBreak.get() ? null : super.fetchNextOrNull();\n+      }\n+    };\n+  }\n \n-        LimitPerTypeFilter( int maxRelsPerType, Map<String,Direction> types, AtomicBoolean handBreak )\n-        {\n-            this.maxRelsPerType = maxRelsPerType;\n-            this.iterationHalted = handBreak;\n-            for ( String type : types.keySet() )\n-            {\n-                encounteredRelationships.put( type, new AtomicInteger() );\n-            }\n-        }\n+  private static class LimitPerTypeFilter implements Predicate<Relationship>\n+  {\n+    private final int maxRelsPerType;\n+    private final Map<String, AtomicInteger> encounteredRelationships = new HashMap<>();\n+    private int typesMaxedOut;\n+    private final AtomicBoolean iterationHalted;\n \n-        @Override\n-        public boolean test( Relationship item )\n-        {\n-            AtomicInteger counter = encounteredRelationships.get( item.getType().name() );\n-            int count = counter.get();\n-            if ( count < maxRelsPerType )\n-            {\n-                if ( counter.incrementAndGet() == maxRelsPerType )\n-                {\n-                    counter.incrementAndGet();\n-                    if ( (++typesMaxedOut) >= encounteredRelationships.size() )\n-                    {\n-                        iterationHalted.set( true );\n-                    }\n-                    return true;\n-                }\n-                return true;\n-            }\n-            return false;\n-        }\n+    LimitPerTypeFilter(int maxRelsPerType, Map<String, Direction> types, AtomicBoolean handBreak)\n+    {\n+      this.maxRelsPerType = maxRelsPerType;\n+      this.iterationHalted = handBreak;\n+      for (String type : types.keySet())\n+      {\n+        encounteredRelationships.put(type, new AtomicInteger());\n+      }\n     }\n \n-    private Iterable<Relationship> getRelationships( final Node node, Map<String, Object> filterMap,\n-            boolean caseInsensitiveFilters, boolean looseFilters, boolean sortByType )\n+    @Override\n+    public boolean test(Relationship item)\n     {\n-        if ( sortByType )\n-        {\n-            Path nodeAsPath = Paths.singleNodePath( node );\n-            return toSortedExpander( getServer().getDb(), Direction.BOTH, filterMap,\n-                    caseInsensitiveFilters, looseFilters ).expand( nodeAsPath, BranchState.NO_STATE );\n-        }\n-        else\n+      AtomicInteger counter = encounteredRelationships.get(item.getType().name());\n+      int count = counter.get();\n+      if (count < maxRelsPerType)\n+      {\n+        if (counter.incrementAndGet() == maxRelsPerType)\n         {\n-            if ( filterMap.isEmpty() )\n-            {\n-                return node.getRelationships();\n-            }\n-            else\n-            {\n-                Path nodeAsPath = Paths.singleNodePath( node );\n-                return toExpander( getServer().getDb(), Direction.BOTH, filterMap, caseInsensitiveFilters,\n-                        looseFilters ).expand( nodeAsPath, BranchState.NO_STATE );\n-            }\n+          counter.incrementAndGet();\n+          if ((++typesMaxedOut) >= encounteredRelationships.size())\n+          {\n+            iterationHalted.set(true);\n+          }\n+          return true;\n         }\n+        return true;\n+      }\n+      return false;\n     }\n+  }\n \n-    private void displayBriefRelationships( NodeOrRelationship thing, Session session, Output out,\n-            Relationship sampleRelationship, int count ) throws ShellException,\n-            RemoteException\n+  private Iterable<Relationship> getRelationships(final Node node, Map<String, Object> filterMap,\n+                                                  boolean caseInsensitiveFilters, boolean looseFilters, boolean sortByType)\n+  {\n+    if (sortByType)\n     {\n-        String relDisplay = withArrows( sampleRelationship, getDisplayName( getServer(), session,\n-                sampleRelationship, false, true ), thing.asNode() );\n-        out.println( getDisplayName( getServer(), session, thing, true ) + relDisplay + \" x\" + count );\n-    }\n-\n-    private static String getNiceType( Object value )\n+      Path nodeAsPath = Paths.singleNodePath(node);\n+      return toSortedExpander(getServer().getDb(), Direction.BOTH, filterMap,\n+          caseInsensitiveFilters, looseFilters).expand(nodeAsPath, BranchState.NO_STATE);\n+    } else\n     {\n-        return Set.getValueTypeName( value.getClass() );\n+      if (filterMap.isEmpty())\n+      {\n+        return node.getRelationships();\n+      } else\n+      {\n+        Path nodeAsPath = Paths.singleNodePath(node);\n+        return toExpander(getServer().getDb(), Direction.BOTH, filterMap, caseInsensitiveFilters,\n+            looseFilters).expand(nodeAsPath, BranchState.NO_STATE);\n+      }\n     }\n+  }\n+\n+  private void displayBriefRelationships(NodeOrRelationship thing, Session session, Output out,\n+                                         Relationship sampleRelationship, int count) throws ShellException,\n+      RemoteException\n+  {\n+    String relDisplay = withArrows(sampleRelationship, getDisplayName(getServer(), session,\n+        sampleRelationship, false, true), thing.asNode());\n+    out.println(getDisplayName(getServer(), session, thing, true) + relDisplay + \" x\" + count);\n+  }\n+\n+  private static String getNiceType(Object value)\n+  {\n+    return Set.getValueTypeName(value.getClass());\n+  }\n }\n",
            "diff_size": 402
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "68",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 676).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "70",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 227).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "72",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 197).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "73",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 164).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "140",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 230).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "212",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 212).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                },
                {
                    "line": "268",
                    "severity": "error",
                    "message": "Line is longer than 160 characters (found 178).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.sizes.LineLengthCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3830/Ls.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3830/Ls.java\nindex 12a4230ba20..a3efbf0dfbe 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/3830/Ls.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/3830/Ls.java\n@@ -60,48 +60,28 @@ public class Ls extends TransactionProvidingApp\n     private static final int DEFAULT_MAX_RELS_PER_TYPE_LIMIT = 10;\n \n     {\n-        addOptionDefinition( \"b\", new OptionDefinition( OptionValueType.NONE,\n-            \"Brief summary instead of full content\" ) );\n-        addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE,\n-            \"Verbose mode\" ) );\n+        addOptionDefinition( \"b\", new OptionDefinition( OptionValueType.NONE, \"Brief summary instead of full content\" ) );\n+        addOptionDefinition( \"v\", new OptionDefinition( OptionValueType.NONE, \"Verbose mode\" ) );\n         addOptionDefinition( \"q\", new OptionDefinition( OptionValueType.NONE, \"Quiet mode\" ) );\n-        addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.NONE,\n-            \"Lists properties\" ) );\n-        addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE,\n-            \"Lists relationships\" ) );\n-        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.MUST,\n-            \"Filters property keys/values and relationship types. Supplied either as a single value \" +\n-            \"or as a JSON string where both keys and values can contain regex. \" +\n-            \"Starting/ending {} brackets are optional. Examples:\\n\" +\n-            \"  \\\"username\\\"\\n\\tproperty/relationship 'username' gets listed\\n\" +\n-            \"  \\\".*name:ma.*, age:''\\\"\\n\\tproperties with keys matching '.*name' and values matching 'ma.*' \" +\n-            \"gets listed,\\n\\tas well as the 'age' property. Also relationships matching '.*name' or 'age'\\n\\tgets listed\\n\" +\n-            \"  \\\"KNOWS:out,LOVES:in\\\"\\n\\toutgoing KNOWS and incoming LOVES relationships gets listed\" ) );\n-        addOptionDefinition( \"i\", new OptionDefinition( OptionValueType.NONE,\n-            \"Filters are case-insensitive (case-sensitive by default)\" ) );\n-        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.NONE,\n-            \"Filters matches more loosely, i.e. it's considered a match if just \" +\n-            \"a part of a value matches the pattern, not necessarily the whole value\" ) );\n-        addOptionDefinition( \"s\", new OptionDefinition( OptionValueType.NONE,\n-            \"Sorts relationships by type.\" ) );\n-        addOptionDefinition( \"m\", new OptionDefinition( OptionValueType.MAY,\n-            \"Display a maximum of M relationships per type (default \" + DEFAULT_MAX_RELS_PER_TYPE_LIMIT + \" if no value given)\" ) );\n-        addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE,\n-            \"Allows for cd:ing to a node not connected to the current node (e.g. 'absolute')\" ) );\n+        addOptionDefinition( \"p\", new OptionDefinition( OptionValueType.NONE, \"Lists properties\" ) );\n+        addOptionDefinition( \"r\", new OptionDefinition( OptionValueType.NONE, \"Lists relationships\" ) );\n+        addOptionDefinition( \"f\", new OptionDefinition( OptionValueType.MUST, \"Filters property keys/values and relationship types. Supplied either as a single value \" + \"or as a JSON string where both keys and values can contain regex. \" + \"Starting/ending {} brackets are optional. Examples:\\n\" + \"  \\\"username\\\"\\n\\tproperty/relationship 'username' gets listed\\n\" + \"  \\\".*name:ma.*, age:''\\\"\\n\\tproperties with keys matching '.*name' and values matching 'ma.*' \" + \"gets listed,\\n\\tas well as the 'age' property. Also relationships matching '.*name' or 'age'\\n\\tgets listed\\n\" + \"  \\\"KNOWS:out,LOVES:in\\\"\\n\\toutgoing KNOWS and incoming LOVES relationships gets listed\" ) );\n+        addOptionDefinition( \"i\", new OptionDefinition( OptionValueType.NONE, \"Filters are case-insensitive (case-sensitive by default)\" ) );\n+        addOptionDefinition( \"l\", new OptionDefinition( OptionValueType.NONE, \"Filters matches more loosely, i.e. it's considered a match if just \" + \"a part of a value matches the pattern, not necessarily the whole value\" ) );\n+        addOptionDefinition( \"s\", new OptionDefinition( OptionValueType.NONE, \"Sorts relationships by type.\" ) );\n+        addOptionDefinition( \"m\", new OptionDefinition( OptionValueType.MAY, \"Display a maximum of M relationships per type (default \" + DEFAULT_MAX_RELS_PER_TYPE_LIMIT + \" if no value given)\" ) );\n+        addOptionDefinition( \"a\", new OptionDefinition( OptionValueType.NONE, \"Allows for cd:ing to a node not connected to the current node (e.g. 'absolute')\" ) );\n     }\n \n     @Override\n     public String getDescription()\n     {\n-        return \"Lists the contents of the current node or relationship. \" +\n-            \"Optionally supply\\n\" +\n-            \"node id for listing a certain node using \\\"ls <node-id>\\\"\";\n+        return \"Lists the contents of the current node or relationship. \" + \"Optionally supply\\n\" + \"node id for listing a certain node using \\\"ls <node-id>\\\"\";\n     }\n \n     @Override\n-    protected Continuation exec( AppCommandParser parser, Session session,\n-        Output out ) throws ShellException, RemoteException\n-    {\n+    protected Continuation exec( AppCommandParser parser, Session session, Output out ) throws ShellException, RemoteException\n+{\n         boolean brief = parser.options().containsKey( \"b\" );\n         boolean verbose = parser.options().containsKey( \"v\" );\n         boolean quiet = parser.options().containsKey( \"q\" );\n@@ -114,7 +94,7 @@ public class Ls extends TransactionProvidingApp\n         boolean displayRelationships = parser.options().containsKey( \"r\" );\n         boolean caseInsensitiveFilters = parser.options().containsKey( \"i\" );\n         boolean looseFilters = parser.options().containsKey( \"l\" );\n-        Map<String, Object> filterMap = parseFilter( parser.options().get( \"f\" ), out );\n+        Map<String,Object> filterMap = parseFilter( parser.options().get( \"f\" ), out );\n         if ( !displayProperties && !displayRelationships )\n         {\n             displayProperties = true;\n@@ -128,9 +108,8 @@ public class Ls extends TransactionProvidingApp\n         }\n         else\n         {\n-            thing = NodeOrRelationship.wrap( this.getNodeById( Long\n-                .parseLong( parser.arguments().get( 0 ) ) ) );\n-        }\n+            thing = NodeOrRelationship.wrap( this.getNodeById( Long.parseLong( parser.arguments().get( 0 ) ) ) );\n+    }\n \n         if ( displayProperties )\n         {\n@@ -138,7 +117,8 @@ public class Ls extends TransactionProvidingApp\n             displayProperties( thing, out, verbose, quiet, filterMap, caseInsensitiveFilters,\n                     looseFilters, brief );\n         }\n-        if ( displayRelationships )\n+\n+if ( displayRelationships )\n         {\n             if ( thing.isNode() )\n             {\n@@ -155,11 +135,9 @@ public class Ls extends TransactionProvidingApp\n \n     private void displayNodes( AppCommandParser parser, NodeOrRelationship thing,\n             Session session, Output out ) throws RemoteException, ShellException\n-    {\n+{\n         Relationship rel = thing.asRelationship();\n-        out.println( getDisplayName( getServer(), session, rel.getStartNode(), false ) +\n-                \" --\" + getDisplayName( getServer(), session, rel, true, false ) + \"-> \" +\n-                getDisplayName( getServer(), session, rel.getEndNode(), false ) );\n+        out.println( getDisplayName( getServer(), session, rel.getStartNode(), false ) + \" --\" + getDisplayName( getServer(), session, rel, true, false ) + \"-> \" + getDisplayName( getServer(), session, rel.getEndNode(), false ) );\n     }\n \n     private Iterable<String> sortKeys( Iterable<String> source )\n@@ -173,15 +151,11 @@ public class Ls extends TransactionProvidingApp\n         return list;\n     }\n \n-    private void displayProperties( NodeOrRelationship thing, Output out,\n-        boolean verbose, boolean quiet, Map<String, Object> filterMap,\n-        boolean caseInsensitiveFilters, boolean looseFilters, boolean brief )\n-        throws RemoteException\n-    {\n-        ColumnPrinter columnPrinter = quiet ?\n-                new ColumnPrinter( \"*\" ) :\n-                new ColumnPrinter( \"*\", \"=\" );\n-        int count = 0;\n+    private void displayProperties( NodeOrRelationship thing, Output out, boolean verbose, boolean quiet, Map<String,Object> filterMap,\n+        boolean caseInsensitiveFilters, boolean looseFilters, boolean brief ) throws RemoteException\n+{\n+        ColumnPrinter columnPrinter = quiet ? new ColumnPrinter( \"*\" ) : new ColumnPrinter( \"*\", \"=\" );\n+    int count = 0;\n         for ( String key : sortKeys( thing.getPropertyKeys() ) )\n         {\n             Object value = thing.getProperty( key );\n@@ -199,10 +173,8 @@ public class Ls extends TransactionProvidingApp\n                 }\n                 else\n                 {\n-                    columnPrinter.add( key, verbose ?\n-                            format( value, true ) + \" (\" + getNiceType( value ) + \")\" :\n-                            format( value, true ) );\n-                }\n+                    columnPrinter.add( key, verbose ? format( value, true ) + \" (\" + getNiceType( value ) + \")\" : format( value, true ) );\n+    }\n             }\n         }\n         columnPrinter.print( out );\n@@ -212,9 +184,9 @@ public class Ls extends TransactionProvidingApp\n         }\n     }\n \n-    private void displayLabels( NodeOrRelationship thing, Output out, Map<String, Object> filterMap,\n+    private void displayLabels( NodeOrRelationship thing, Output out, Map<String,Object> filterMap,\n             boolean caseInsensitiveFilters, boolean looseFilters, boolean brief ) throws RemoteException\n-    {\n+{\n         List<String> labelNames = new ArrayList<>();\n         for ( Label label : thing.asNode().getLabels() )\n         {\n@@ -237,16 +209,14 @@ public class Ls extends TransactionProvidingApp\n         }\n     }\n \n-    private void displayRelationships( AppCommandParser parser, NodeOrRelationship thing,\n-        Session session, Output out, boolean verbose, boolean quiet,\n-        Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n+    private void displayRelationships( AppCommandParser parser, NodeOrRelationship thing, Session session, Output out, boolean verbose, boolean quiet, Map<String,Object> filterMap, boolean caseInsensitiveFilters,\n         boolean looseFilters, boolean brief ) throws ShellException, RemoteException\n-    {\n+{\n         boolean sortByType = parser.options().containsKey( \"s\" );\n         Node node = thing.asNode();\n         Iterable<Relationship> relationships = getRelationships( node, filterMap,\n                 caseInsensitiveFilters, looseFilters, sortByType | brief );\n-        if ( brief )\n+if ( brief )\n         {\n             Iterator<Relationship> iterator = relationships.iterator();\n             if ( !iterator.hasNext() )\n@@ -272,7 +242,8 @@ public class Ls extends TransactionProvidingApp\n                     currentCounter++;\n                 }\n             }\n-            displayBriefRelationships( thing, session, out, sampleRelationship, currentCounter );\n+\n+displayBriefRelationships( thing, session, out, sampleRelationship, currentCounter );\n         }\n         else\n         {\n@@ -285,9 +256,8 @@ public class Ls extends TransactionProvidingApp\n             while ( iterator.hasNext() )\n             {\n                 Relationship rel = iterator.next();\n-                StringBuilder buf = new StringBuilder( getDisplayName(\n-                        getServer(), session, thing, true ) );\n-                String relDisplay = quiet ? \"\" : getDisplayName( getServer(), session, rel, verbose, true );\n+                StringBuilder buf = new StringBuilder( getDisplayName( getServer(), session, thing, true ) );\n+String relDisplay = quiet ? \"\" : getDisplayName( getServer(), session, rel, verbose, true );\n                 buf.append( withArrows( rel, relDisplay, thing.asNode() ) );\n                 buf.append( getDisplayName( getServer(), session, rel.getOtherNode( node ), true ) );\n                 out.println( buf );\n@@ -295,16 +265,13 @@ public class Ls extends TransactionProvidingApp\n         }\n     }\n \n-    private Iterator<Relationship> wrapInLimitingIterator( AppCommandParser parser,\n-            Iterator<Relationship> iterator, Map<String, Object> filterMap, boolean caseInsensitiveFilters,\n+    private Iterator<Relationship> wrapInLimitingIterator( AppCommandParser parser, Iterator<Relationship> iterator, Map<String,Object> filterMap, boolean caseInsensitiveFilters,\n             boolean looseFilters )\n     {\n         final AtomicBoolean handBreak = new AtomicBoolean();\n         int maxRelsPerType = parser.optionAsNumber( \"m\", DEFAULT_MAX_RELS_PER_TYPE_LIMIT ).intValue();\n-        Map<String, Direction> types = filterMapToTypes( getServer().getDb(),\n-                Direction.BOTH, filterMap, caseInsensitiveFilters, looseFilters );\n-        return new FilteringIterator<Relationship>( iterator,\n-                new LimitPerTypeFilter( maxRelsPerType, types, handBreak ) )\n+        Map<String,Direction> types = filterMapToTypes( getServer().getDb(), Direction.BOTH, filterMap, caseInsensitiveFilters, looseFilters );\n+return new FilteringIterator<Relationship>( iterator, new LimitPerTypeFilter( maxRelsPerType, types, handBreak ) )\n         {\n             @Override\n             protected Relationship fetchNextOrNull()\n@@ -317,7 +284,7 @@ public class Ls extends TransactionProvidingApp\n     private static class LimitPerTypeFilter implements Predicate<Relationship>\n     {\n         private final int maxRelsPerType;\n-        private final Map<String, AtomicInteger> encounteredRelationships = new HashMap<>();\n+        private final Map<String,AtomicInteger> encounteredRelationships = new HashMap<>();\n         private int typesMaxedOut;\n         private final AtomicBoolean iterationHalted;\n \n@@ -353,7 +320,7 @@ public class Ls extends TransactionProvidingApp\n         }\n     }\n \n-    private Iterable<Relationship> getRelationships( final Node node, Map<String, Object> filterMap,\n+    private Iterable<Relationship> getRelationships( final Node node, Map<String,Object> filterMap,\n             boolean caseInsensitiveFilters, boolean looseFilters, boolean sortByType )\n     {\n         if ( sortByType )\n@@ -373,21 +340,21 @@ public class Ls extends TransactionProvidingApp\n                 Path nodeAsPath = Paths.singleNodePath( node );\n                 return toExpander( getServer().getDb(), Direction.BOTH, filterMap, caseInsensitiveFilters,\n                         looseFilters ).expand( nodeAsPath, BranchState.NO_STATE );\n-            }\n+    }\n         }\n     }\n \n     private void displayBriefRelationships( NodeOrRelationship thing, Session session, Output out,\n             Relationship sampleRelationship, int count ) throws ShellException,\n             RemoteException\n-    {\n+{\n         String relDisplay = withArrows( sampleRelationship, getDisplayName( getServer(), session,\n                 sampleRelationship, false, true ), thing.asNode() );\n-        out.println( getDisplayName( getServer(), session, thing, true ) + relDisplay + \" x\" + count );\n+out.println( getDisplayName( getServer(), session, thing, true ) + relDisplay + \" x\" + count );\n     }\n \n     private static String getNiceType( Object value )\n     {\n         return Set.getValueTypeName( value.getClass() );\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 80
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}