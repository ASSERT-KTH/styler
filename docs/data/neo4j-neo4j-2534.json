{
    "project_name": "neo4j-neo4j",
    "error_id": "2534",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2020 \"Neo4j,\"\n * Neo4j Sweden AB [http://neo4j.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "54",
                    "column": "28",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "54",
                    "column": "81",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "64",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "26",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "81",
                    "column": "40",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "86",
                    "column": "41",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "25",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "107",
                    "column": "39",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "35",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "114",
                    "column": "83",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "49",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "116",
                    "column": "56",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "118",
                    "column": "49",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "120",
                    "column": "23",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "126",
                    "column": "34",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "21",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "128",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "133",
                    "column": "13",
                    "severity": "error",
                    "message": "'}' at column 13 should be alone on a line.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck"
                },
                {
                    "line": "151",
                    "column": "27",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "151",
                    "column": "88",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "15",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "153",
                    "column": "27",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "156",
                    "column": "58",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "33",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "165",
                    "column": "50",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "13",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "168",
                    "column": "46",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "16",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "171",
                    "column": "36",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2534/EntityTokenRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2534/EntityTokenRange.java\nindex 95f419e2fe5..1c7466065e7 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2534/EntityTokenRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/intellij/2534/EntityTokenRange.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU General Public License\n  * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.kernel.impl.index.schema;\n \n import org.eclipse.collections.api.list.primitive.LongList;\n@@ -46,11 +47,11 @@ public class EntityTokenRange\n \n     /**\n      * @param idRange entity id range, e.g. in which id span the entities are.\n-     * @param tokens long[][] where first dimension is relative entity id in this range, i.e. 0-rangeSize\n-     * and second the token ids for that entity, potentially empty if there are none for that entity.\n-     * The first dimension must be the size of the range.\n+     * @param tokens  long[][] where first dimension is relative entity id in this range, i.e. 0-rangeSize\n+     *                and second the token ids for that entity, potentially empty if there are none for that entity.\n+     *                The first dimension must be the size of the range.\n      */\n-    public EntityTokenRange( long idRange, long[][] tokens, EntityType entityType )\n+    public EntityTokenRange(long idRange, long[][] tokens, EntityType entityType)\n     {\n         this.idRange = idRange;\n         this.tokens = tokens;\n@@ -60,7 +61,7 @@ public class EntityTokenRange\n         this.highRangeId = lowRangeId + rangeSize - 1;\n \n         this.entities = new long[rangeSize];\n-        for ( int i = 0; i < rangeSize; i++ )\n+        for (int i = 0; i < rangeSize; i++)\n         {\n             entities[i] = lowRangeId + i;\n         }\n@@ -77,12 +78,12 @@ public class EntityTokenRange\n         return idRange;\n     }\n \n-    public boolean covers( long entityId )\n+    public boolean covers(long entityId)\n     {\n         return entityId >= lowRangeId && entityId <= highRangeId;\n     }\n \n-    public boolean isBelow( long entityId )\n+    public boolean isBelow(long entityId)\n     {\n         return highRangeId < entityId;\n     }\n@@ -103,40 +104,39 @@ public class EntityTokenRange\n      * @param entityId the entity id to return tokens for.\n      * @return token ids for the given {@code entityId}.\n      */\n-    public long[] tokens( long entityId )\n+    public long[] tokens(long entityId)\n     {\n-        int index = toIntExact( entityId - lowRangeId );\n+        int index = toIntExact(entityId - lowRangeId);\n         assert index >= 0 && index < tokens.length : \"entityId:\" + entityId + \", idRange:\" + idRange;\n         return tokens[index] != null ? tokens[index] : EMPTY_LONG_ARRAY;\n     }\n \n-    private static String toString( String prefix, long[] entities, long[][] tokens )\n+    private static String toString(String prefix, long[] entities, long[][] tokens)\n     {\n-        StringBuilder result = new StringBuilder( prefix );\n-        result.append( \"; {\" );\n-        for ( int i = 0; i < entities.length; i++ )\n+        StringBuilder result = new StringBuilder(prefix);\n+        result.append(\"; {\");\n+        for (int i = 0; i < entities.length; i++)\n         {\n-            if ( i != 0 )\n+            if (i != 0)\n             {\n-                result.append( \", \" );\n+                result.append(\", \");\n             }\n-            result.append( \"Entity[\" ).append( entities[i] ).append( \"]: Tokens[\" );\n+            result.append(\"Entity[\").append(entities[i]).append(\"]: Tokens[\");\n             String sep = \"\";\n-            if ( tokens[i] != null )\n+            if (tokens[i] != null)\n             {\n-                for ( long tokenId : tokens[i] )\n+                for (long tokenId : tokens[i])\n                 {\n-                    result.append( sep ).append( tokenId );\n+                    result.append(sep).append(tokenId);\n                     sep = \", \";\n                 }\n-            }\n-            else\n+            } else\n             {\n-                result.append( \"null\" );\n+                result.append(\"null\");\n             }\n-            result.append( ']' );\n+            result.append(']');\n         }\n-        return result.append( \"}]\" ).toString();\n+        return result.append(\"}]\").toString();\n     }\n \n     @Override\n@@ -145,30 +145,30 @@ public class EntityTokenRange\n         String rangeName = entityType == EntityType.NODE ? \"NodeLabelRange\" : \"RelationshipTypeRange\";\n         String rangeString = lowRangeId + \"-\" + (highRangeId + 1);\n         String prefix = rangeName + \"[idRange=\" + rangeString;\n-        return toString( prefix, entities, tokens );\n+        return toString(prefix, entities, tokens);\n     }\n \n-    static void readBitmap( long bitmap, long tokenId, MutableLongList[] tokensPerEntity )\n+    static void readBitmap(long bitmap, long tokenId, MutableLongList[] tokensPerEntity)\n     {\n-        while ( bitmap != 0 )\n+        while (bitmap != 0)\n         {\n-            int relativeEntityId = Long.numberOfTrailingZeros( bitmap );\n-            if ( tokensPerEntity[relativeEntityId] == null )\n+            int relativeEntityId = Long.numberOfTrailingZeros(bitmap);\n+            if (tokensPerEntity[relativeEntityId] == null)\n             {\n                 tokensPerEntity[relativeEntityId] = new LongArrayList();\n             }\n-            tokensPerEntity[relativeEntityId].add( tokenId );\n+            tokensPerEntity[relativeEntityId].add(tokenId);\n             bitmap &= bitmap - 1;\n         }\n     }\n \n-    static long[][] convertState( LongList[] state )\n+    static long[][] convertState(LongList[] state)\n     {\n         long[][] tokenIdsByEntityIndex = new long[state.length][];\n-        for ( int i = 0; i < state.length; i++ )\n+        for (int i = 0; i < state.length; i++)\n         {\n             final LongList tokenIdList = state[i];\n-            if ( tokenIdList != null )\n+            if (tokenIdList != null)\n             {\n                 tokenIdsByEntityIndex[i] = tokenIdList.toArray();\n             }\n",
            "diff_size": 34
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2534/EntityTokenRange.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2534/EntityTokenRange.java\nindex 95f419e2fe5..fd1c1f516e0 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/errored/1/2534/EntityTokenRange.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/neo4j-neo4j/naturalize/2534/EntityTokenRange.java\n@@ -175,4 +175,4 @@ public class EntityTokenRange\n         }\n         return tokenIdsByEntityIndex;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 1
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}