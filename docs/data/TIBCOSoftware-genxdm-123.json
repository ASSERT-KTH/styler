{
    "project_name": "TIBCOSoftware-genxdm",
    "error_id": "123",
    "information": {
        "errors": [
            {
                "line": "157",
                "column": "5",
                "severity": "warning",
                "message": "File contains tab characters (this is the first instance).",
                "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
            }
        ]
    },
    "source_code": "    public <A> List<A> validate(String initialValue, PrefixResolver resolver, AtomBridge<A> atomBridge) throws DatatypeException\n    {\n    \tPreCondition.assertArgumentNotNull(resolver, \"resolver\");\n    \t\n    \tString prefix;\n    \tString localName;",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "158",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/123/QNameType.java\nindex 3a831a689e3..d47b28dd1c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler/123/QNameType.java\n@@ -154,7 +154,7 @@ public final class QNameType extends AbstractAtomType\n \r\n     public <A> List<A> validate(String initialValue, PrefixResolver resolver, AtomBridge<A> atomBridge) throws DatatypeException\r\n     {\r\n-    \tPreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n+    PreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n     \t\r\n     \tString prefix;\r\n     \tString localName;\r\n",
            "diff_size": 1
        },
        {
            "tool": "intellij",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/123/QNameType.java\nindex 3a831a689e3..939a61a138c 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/intellij/123/QNameType.java\n@@ -1,18 +1,19 @@\n /**\r\n  * Copyright (c) 2009-2010 TIBCO Software Inc.\r\n- *\r\n+ * <p>\r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n  * You may obtain a copy of the License at\r\n- *\r\n- *    http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n+ * <p>\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ * <p>\r\n  * Unless required by applicable law or agreed to in writing, software\r\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n+\r\n package org.genxdm.bridgekit.xs.simple;\r\n \r\n import java.util.Collections;\r\n@@ -36,157 +37,129 @@ import org.genxdm.xs.types.NativeType;\n import org.genxdm.xs.types.SequenceTypeVisitor;\r\n import org.genxdm.xs.types.SimpleType;\r\n \r\n-public final class QNameType extends AbstractAtomType\r\n-{\r\n-    public QNameType(final QName name, final SimpleType baseType)\r\n-    {\r\n+public final class QNameType extends AbstractAtomType {\r\n+    public QNameType(final QName name, final SimpleType baseType) {\r\n         super(name, baseType);\r\n     }\r\n \r\n-    public void accept(SequenceTypeVisitor visitor)\r\n-    {\r\n+    public void accept(SequenceTypeVisitor visitor) {\r\n         // TODO Auto-generated method stub\r\n         throw new UnsupportedOperationException(\"TODO\");\r\n     }\r\n \r\n-    public boolean derivedFrom(String namespace, String name, Set<DerivationMethod> derivationMethods)\r\n-    {\r\n+    public boolean derivedFrom(String namespace, String name,\r\n+                               Set<DerivationMethod> derivationMethods) {\r\n         // TODO Auto-generated method stub\r\n         throw new UnsupportedOperationException(\"TODO\");\r\n     }\r\n \r\n-    public Iterable<EnumerationDefinition> getEnumerations()\r\n-    {\r\n+    public Iterable<EnumerationDefinition> getEnumerations() {\r\n         // TODO Auto-generated method stub\r\n         throw new UnsupportedOperationException(\"TODO\");\r\n     }\r\n \r\n-    public Facet getFacetOfKind(FacetKind facetKind)\r\n-    {\r\n+    public Facet getFacetOfKind(FacetKind facetKind) {\r\n         // TODO Auto-generated method stub\r\n         throw new UnsupportedOperationException(\"TODO\");\r\n     }\r\n \r\n-    public Iterable<Facet> getFacets()\r\n-    {\r\n+    public Iterable<Facet> getFacets() {\r\n         return Collections.emptyList();\r\n     }\r\n \r\n-    public Set<DerivationMethod> getFinal()\r\n-    {\r\n+    public Set<DerivationMethod> getFinal() {\r\n         return Collections.emptySet();\r\n     }\r\n \r\n-    public NativeType getNativeType()\r\n-    {\r\n+    public NativeType getNativeType() {\r\n         return NativeType.QNAME;\r\n     }\r\n \r\n-    public Iterable<Pattern> getPatterns()\r\n-    {\r\n+    public Iterable<Pattern> getPatterns() {\r\n         // TODO Auto-generated method stub\r\n         throw new UnsupportedOperationException(\"TODO\");\r\n     }\r\n \r\n-    public ScopeExtent getScopeExtent()\r\n-    {\r\n+    public ScopeExtent getScopeExtent() {\r\n         // TODO Auto-generated method stub\r\n         throw new UnsupportedOperationException(\"TODO\");\r\n     }\r\n \r\n-    public WhiteSpacePolicy getWhiteSpacePolicy()\r\n-    {\r\n+    public WhiteSpacePolicy getWhiteSpacePolicy() {\r\n         return WhiteSpacePolicy.COLLAPSE;\r\n     }\r\n \r\n-    public boolean hasEnumerations()\r\n-    {\r\n+    public boolean hasEnumerations() {\r\n         return false;\r\n     }\r\n \r\n-    public boolean hasFacetOfKind(final FacetKind facetKind)\r\n-    {\r\n+    public boolean hasFacetOfKind(final FacetKind facetKind) {\r\n         return false;\r\n     }\r\n \r\n-    public boolean hasFacets()\r\n-    {\r\n+    public boolean hasFacets() {\r\n         return false;\r\n     }\r\n \r\n-    public boolean hasPatterns()\r\n-    {\r\n+    public boolean hasPatterns() {\r\n         return false;\r\n     }\r\n \r\n-    public boolean isAbstract()\r\n-    {\r\n+    public boolean isAbstract() {\r\n         return false;\r\n     }\r\n \r\n-    public boolean isID()\r\n-    {\r\n+    public boolean isID() {\r\n         return false;\r\n     }\r\n \r\n-    public boolean isIDREF()\r\n-    {\r\n+    public boolean isIDREF() {\r\n         return false;\r\n     }\r\n \r\n-    public <A> List<A> validate(final String initialValue, AtomBridge<A> atomBridge) throws DatatypeException\r\n-    {\r\n+    public <A> List<A> validate(final String initialValue, AtomBridge<A> atomBridge)\r\n+        throws DatatypeException {\r\n         final String qualifiedName = normalize(initialValue);\r\n         final int index = qualifiedName.indexOf(':');\r\n-        if (index == -1)\r\n-        {\r\n+        if (index == -1) {\r\n             final String localName = NCNameType.castAsNCName(qualifiedName, this);\r\n             return atomBridge.wrapAtom(atomBridge.createQName(\"\", localName, \"\"));\r\n-        }\r\n-        else\r\n-        {\r\n+        } else {\r\n             final String prefix = NCNameType.castAsNCName(qualifiedName.substring(0, index), this);\r\n-            final String localName = NCNameType.castAsNCName(qualifiedName.substring(index + 1), this);\r\n+            final String localName =\r\n+                NCNameType.castAsNCName(qualifiedName.substring(index + 1), this);\r\n             // We don't have a resolver so we just leave the namespace-uri empty.\r\n             return atomBridge.wrapAtom(atomBridge.createQName(\"\", localName, prefix));\r\n         }\r\n     }\r\n \r\n-    public <A> List<A> validate(String initialValue, PrefixResolver resolver, AtomBridge<A> atomBridge) throws DatatypeException\r\n-    {\r\n-    \tPreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n-    \t\r\n-    \tString prefix;\r\n-    \tString localName;\r\n-    \tString ns;\r\n-    \t\r\n+    public <A> List<A> validate(String initialValue, PrefixResolver resolver,\r\n+                                AtomBridge<A> atomBridge) throws DatatypeException {\r\n+        PreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n+\r\n+        String prefix;\r\n+        String localName;\r\n+        String ns;\r\n+\r\n         final String qualifiedName = normalize(initialValue);\r\n         final int index = qualifiedName.indexOf(':');\r\n-        if (index == -1)\r\n-        {\r\n+        if (index == -1) {\r\n             prefix = \"\";\r\n             localName = NCNameType.castAsNCName(qualifiedName, this);\r\n             ns = resolver.getNamespace(\"\");\r\n-            if(ns == null)\r\n-            {\r\n-        \t\tns = \"\";\r\n+            if (ns == null) {\r\n+                ns = \"\";\r\n             }\r\n-        }\r\n-        else\r\n-        {\r\n+        } else {\r\n             prefix = NCNameType.castAsNCName(qualifiedName.substring(0, index), this);\r\n             localName = NCNameType.castAsNCName(qualifiedName.substring(index + 1), this);\r\n             ns = resolver.getNamespace(prefix);\r\n-            if(ns == null)\r\n-            {\r\n-            \tif(prefix != null && prefix.length() == 0)\r\n-            \t{\r\n-            \t\tns = \"\";\r\n-            \t}\r\n-            \telse\r\n-            \t{\r\n-    \t\t\t\tthrow new AssertionError(\"Unable to resolve prefix: '\" + prefix + \"'\");\r\n-            \t}\r\n+            if (ns == null) {\r\n+                if (prefix != null && prefix.length() == 0) {\r\n+                    ns = \"\";\r\n+                } else {\r\n+                    throw new AssertionError(\"Unable to resolve prefix: '\" + prefix + \"'\");\r\n+                }\r\n             }\r\n         }\r\n         return atomBridge.wrapAtom(atomBridge.createQName(ns, localName, prefix));\r\n",
            "diff_size": 78
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "159",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/123/QNameType.java\nindex 3a831a689e3..e72519f21dc 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/naturalize/123/QNameType.java\n@@ -153,42 +153,39 @@ public final class QNameType extends AbstractAtomType\n     }\r\n \r\n     public <A> List<A> validate(String initialValue, PrefixResolver resolver, AtomBridge<A> atomBridge) throws DatatypeException\r\n-    {\r\n-    \tPreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n-    \t\r\n-    \tString prefix;\r\n-    \tString localName;\r\n-    \tString ns;\r\n-    \t\r\n-        final String qualifiedName = normalize(initialValue);\r\n-        final int index = qualifiedName.indexOf(':');\r\n+    {\n+    PreCondition.assertArgumentNotNull(resolver, \"resolver\");\n+String prefix; String localName;\r\n+    \tString ns;\n+final String qualifiedName = normalize(initialValue);\n+final int index = qualifiedName.indexOf(':');\r\n         if (index == -1)\r\n         {\r\n             prefix = \"\";\r\n             localName = NCNameType.castAsNCName(qualifiedName, this);\r\n             ns = resolver.getNamespace(\"\");\r\n-            if(ns == null)\r\n-            {\r\n-        \t\tns = \"\";\r\n-            }\r\n+            if (ns == null)\r\n+            {\n+    ns = \"\";\n+    }\r\n         }\r\n         else\r\n         {\r\n             prefix = NCNameType.castAsNCName(qualifiedName.substring(0, index), this);\r\n             localName = NCNameType.castAsNCName(qualifiedName.substring(index + 1), this);\r\n             ns = resolver.getNamespace(prefix);\r\n-            if(ns == null)\r\n-            {\r\n-            \tif(prefix != null && prefix.length() == 0)\r\n-            \t{\r\n-            \t\tns = \"\";\r\n-            \t}\r\n+            if (ns == null)\r\n+            {\n+    if (prefix != null && prefix.length() == 0)\r\n+            \t{\n+    ns = \"\";\n+    }\r\n             \telse\r\n-            \t{\r\n-    \t\t\t\tthrow new AssertionError(\"Unable to resolve prefix: '\" + prefix + \"'\");\r\n-            \t}\r\n-            }\r\n+            \t{\n+    throw new AssertionError(\"Unable to resolve prefix: '\" + prefix + \"'\");\n+    }\n+    }\r\n         }\r\n         return atomBridge.wrapAtom(atomBridge.createQName(ns, localName, prefix));\r\n     }\r\n-}\r\n+}\n\\ No newline at end of file\n",
            "diff_size": 24
        },
        {
            "tool": "codebuff",
            "errors": [],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/123/QNameType.java\nindex 3a831a689e3..caf70dc428d 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/codebuff/123/QNameType.java\n@@ -13,182 +13,178 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n-package org.genxdm.bridgekit.xs.simple;\r\n-\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-import java.util.Set;\r\n-\r\n-import javax.xml.namespace.QName;\r\n-\r\n-import org.genxdm.exceptions.PreCondition;\r\n-import org.genxdm.names.PrefixResolver;\r\n-import org.genxdm.typed.types.AtomBridge;\r\n-import org.genxdm.xs.components.EnumerationDefinition;\r\n-import org.genxdm.xs.enums.DerivationMethod;\r\n-import org.genxdm.xs.enums.ScopeExtent;\r\n-import org.genxdm.xs.enums.WhiteSpacePolicy;\r\n-import org.genxdm.xs.exceptions.DatatypeException;\r\n-import org.genxdm.xs.facets.Facet;\r\n-import org.genxdm.xs.facets.FacetKind;\r\n-import org.genxdm.xs.facets.Pattern;\r\n-import org.genxdm.xs.types.NativeType;\r\n-import org.genxdm.xs.types.SequenceTypeVisitor;\r\n-import org.genxdm.xs.types.SimpleType;\r\n-\r\n-public final class QNameType extends AbstractAtomType\r\n-{\r\n-    public QNameType(final QName name, final SimpleType baseType)\r\n-    {\r\n-        super(name, baseType);\r\n-    }\r\n-\r\n-    public void accept(SequenceTypeVisitor visitor)\r\n-    {\r\n-        // TODO Auto-generated method stub\r\n-        throw new UnsupportedOperationException(\"TODO\");\r\n-    }\r\n-\r\n-    public boolean derivedFrom(String namespace, String name, Set<DerivationMethod> derivationMethods)\r\n-    {\r\n-        // TODO Auto-generated method stub\r\n-        throw new UnsupportedOperationException(\"TODO\");\r\n-    }\r\n-\r\n-    public Iterable<EnumerationDefinition> getEnumerations()\r\n-    {\r\n-        // TODO Auto-generated method stub\r\n-        throw new UnsupportedOperationException(\"TODO\");\r\n-    }\r\n-\r\n-    public Facet getFacetOfKind(FacetKind facetKind)\r\n-    {\r\n-        // TODO Auto-generated method stub\r\n-        throw new UnsupportedOperationException(\"TODO\");\r\n-    }\r\n-\r\n-    public Iterable<Facet> getFacets()\r\n-    {\r\n-        return Collections.emptyList();\r\n-    }\r\n-\r\n-    public Set<DerivationMethod> getFinal()\r\n-    {\r\n-        return Collections.emptySet();\r\n-    }\r\n-\r\n-    public NativeType getNativeType()\r\n-    {\r\n-        return NativeType.QNAME;\r\n-    }\r\n-\r\n-    public Iterable<Pattern> getPatterns()\r\n-    {\r\n-        // TODO Auto-generated method stub\r\n-        throw new UnsupportedOperationException(\"TODO\");\r\n-    }\r\n-\r\n-    public ScopeExtent getScopeExtent()\r\n-    {\r\n-        // TODO Auto-generated method stub\r\n-        throw new UnsupportedOperationException(\"TODO\");\r\n-    }\r\n-\r\n-    public WhiteSpacePolicy getWhiteSpacePolicy()\r\n-    {\r\n-        return WhiteSpacePolicy.COLLAPSE;\r\n-    }\r\n-\r\n-    public boolean hasEnumerations()\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean hasFacetOfKind(final FacetKind facetKind)\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean hasFacets()\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean hasPatterns()\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean isAbstract()\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean isID()\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public boolean isIDREF()\r\n-    {\r\n-        return false;\r\n-    }\r\n-\r\n-    public <A> List<A> validate(final String initialValue, AtomBridge<A> atomBridge) throws DatatypeException\r\n-    {\r\n-        final String qualifiedName = normalize(initialValue);\r\n-        final int index = qualifiedName.indexOf(':');\r\n-        if (index == -1)\r\n-        {\r\n-            final String localName = NCNameType.castAsNCName(qualifiedName, this);\r\n-            return atomBridge.wrapAtom(atomBridge.createQName(\"\", localName, \"\"));\r\n-        }\r\n-        else\r\n-        {\r\n-            final String prefix = NCNameType.castAsNCName(qualifiedName.substring(0, index), this);\r\n+package org.genxdm.bridgekit.xs.simple;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import javax.xml.namespace.QName;\n+import org.genxdm.exceptions.PreCondition;\n+import org.genxdm.names.PrefixResolver;\n+import org.genxdm.typed.types.AtomBridge;\n+import org.genxdm.xs.components.EnumerationDefinition;\n+import org.genxdm.xs.enums.DerivationMethod;\n+import org.genxdm.xs.enums.ScopeExtent;\n+import org.genxdm.xs.enums.WhiteSpacePolicy;\n+import org.genxdm.xs.exceptions.DatatypeException;\n+import org.genxdm.xs.facets.Facet;\n+import org.genxdm.xs.facets.FacetKind;\n+import org.genxdm.xs.facets.Pattern;\n+import org.genxdm.xs.types.NativeType;\n+import org.genxdm.xs.types.SequenceTypeVisitor;\n+import org.genxdm.xs.types.SimpleType;\n+\n+public final class QNameType extends AbstractAtomType\n+{\n+    public QNameType(final QName name, final SimpleType baseType)\n+    {\n+        super(name, baseType);\n+    }\n+\n+    public void accept(SequenceTypeVisitor visitor)\n+    {\r\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"TODO\");\n+    }\n+\n+    public boolean derivedFrom(String namespace, String name, Set<DerivationMethod> derivationMethods)\n+    {\r\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"TODO\");\n+    }\n+\n+    public Iterable<EnumerationDefinition> getEnumerations()\n+    {\r\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"TODO\");\n+    }\n+\n+    public Facet getFacetOfKind(FacetKind facetKind)\n+    {\r\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"TODO\");\n+    }\n+\n+    public Iterable<Facet> getFacets()\n+    {\n+        return Collections.emptyList();\n+    }\n+\n+    public Set<DerivationMethod> getFinal()\n+    {\n+        return Collections.emptySet();\n+    }\n+\n+    public NativeType getNativeType()\n+    {\n+        return NativeType.QNAME;\n+    }\n+\n+    public Iterable<Pattern> getPatterns()\n+    {\r\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"TODO\");\n+    }\n+\n+    public ScopeExtent getScopeExtent()\n+    {\r\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"TODO\");\n+    }\n+\n+    public WhiteSpacePolicy getWhiteSpacePolicy()\n+    {\n+        return WhiteSpacePolicy.COLLAPSE;\n+    }\n+\n+    public boolean hasEnumerations()\n+    {\n+        return false;\n+    }\n+\n+    public boolean hasFacetOfKind(final FacetKind facetKind)\n+    {\n+        return false;\n+    }\n+\n+    public boolean hasFacets()\n+    {\n+        return false;\n+    }\n+\n+    public boolean hasPatterns()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isAbstract()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isID()\n+    {\n+        return false;\n+    }\n+\n+    public boolean isIDREF()\n+    {\n+        return false;\n+    }\n+\n+    public <A> List<A> validate(final String initialValue, AtomBridge<A> atomBridge) throws DatatypeException\n+    {\n+        final String qualifiedName = normalize(initialValue);\n+        final int index = qualifiedName.indexOf(':');\n+        if (index == -1)\n+        {\n+            final String localName = NCNameType.castAsNCName(qualifiedName, this);\n+            return atomBridge.wrapAtom(atomBridge.createQName(\"\", localName, \"\"));\n+        }\n+        else\n+        {\n+            final String prefix = NCNameType.castAsNCName(qualifiedName.substring(0, index), this);\n             final String localName = NCNameType.castAsNCName(qualifiedName.substring(index + 1), this);\r\n-            // We don't have a resolver so we just leave the namespace-uri empty.\r\n-            return atomBridge.wrapAtom(atomBridge.createQName(\"\", localName, prefix));\r\n-        }\r\n-    }\r\n-\r\n-    public <A> List<A> validate(String initialValue, PrefixResolver resolver, AtomBridge<A> atomBridge) throws DatatypeException\r\n-    {\r\n-    \tPreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n-    \t\r\n-    \tString prefix;\r\n-    \tString localName;\r\n-    \tString ns;\r\n-    \t\r\n-        final String qualifiedName = normalize(initialValue);\r\n-        final int index = qualifiedName.indexOf(':');\r\n-        if (index == -1)\r\n-        {\r\n-            prefix = \"\";\r\n-            localName = NCNameType.castAsNCName(qualifiedName, this);\r\n-            ns = resolver.getNamespace(\"\");\r\n-            if(ns == null)\r\n-            {\r\n-        \t\tns = \"\";\r\n-            }\r\n-        }\r\n-        else\r\n-        {\r\n-            prefix = NCNameType.castAsNCName(qualifiedName.substring(0, index), this);\r\n-            localName = NCNameType.castAsNCName(qualifiedName.substring(index + 1), this);\r\n-            ns = resolver.getNamespace(prefix);\r\n-            if(ns == null)\r\n-            {\r\n-            \tif(prefix != null && prefix.length() == 0)\r\n-            \t{\r\n-            \t\tns = \"\";\r\n-            \t}\r\n-            \telse\r\n-            \t{\r\n-    \t\t\t\tthrow new AssertionError(\"Unable to resolve prefix: '\" + prefix + \"'\");\r\n-            \t}\r\n-            }\r\n-        }\r\n-        return atomBridge.wrapAtom(atomBridge.createQName(ns, localName, prefix));\r\n-    }\r\n-}\r\n+            // We don't have a resolver so we just leave the namespace-uri empty.\n+            return atomBridge.wrapAtom(atomBridge.createQName(\"\", localName, prefix));\n+        }\n+    }\n+\n+    public <A> List<A> validate(String initialValue, PrefixResolver resolver, AtomBridge<A> atomBridge) throws DatatypeException\n+    {\n+        PreCondition.assertArgumentNotNull(resolver, \"resolver\");\n+        String prefix;\n+        String localName;\n+        String ns;\n+        final String qualifiedName = normalize(initialValue);\n+        final int index = qualifiedName.indexOf(':');\n+        if (index == -1)\n+        {\n+            prefix = \"\";\n+            localName = NCNameType.castAsNCName(qualifiedName, this);\n+            ns = resolver.getNamespace(\"\");\n+            if (ns == null)\n+            {\n+                ns = \"\";\n+            }\n+        }\n+        else\n+        {\n+            prefix = NCNameType.castAsNCName(qualifiedName.substring(0, index), this);\n+            localName = NCNameType.castAsNCName(qualifiedName.substring(index + 1), this);\n+            ns = resolver.getNamespace(prefix);\n+            if (ns == null)\n+            {\n+                if (prefix != null && prefix.length() == 0)\n+                {\n+                    ns = \"\";\n+                }\n+                else\n+                {\n+                    throw new AssertionError(\"Unable to resolve prefix: '\" + prefix + \"'\");\n+                }\n+            }\n+        }\n+        return atomBridge.wrapAtom(atomBridge.createQName(ns, localName, prefix));\n+    }\n+}\n\\ No newline at end of file\n",
            "diff_size": 178
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "158",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/123/QNameType.java\nindex 3a831a689e3..d47b28dd1c3 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_random/123/QNameType.java\n@@ -154,7 +154,7 @@ public final class QNameType extends AbstractAtomType\n \r\n     public <A> List<A> validate(String initialValue, PrefixResolver resolver, AtomBridge<A> atomBridge) throws DatatypeException\r\n     {\r\n-    \tPreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n+    PreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n     \t\r\n     \tString prefix;\r\n     \tString localName;\r\n",
            "diff_size": 1
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "158",
                    "column": "5",
                    "severity": "warning",
                    "message": "File contains tab characters (this is the first instance).",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.FileTabCharacterCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/123/QNameType.java\nindex 3a831a689e3..aaa8cdbbc1e 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/errored/1/123/QNameType.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/TIBCOSoftware-genxdm/styler_three_grams/123/QNameType.java\n@@ -154,7 +154,7 @@ public final class QNameType extends AbstractAtomType\n \r\n     public <A> List<A> validate(String initialValue, PrefixResolver resolver, AtomBridge<A> atomBridge) throws DatatypeException\r\n     {\r\n-    \tPreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n+        PreCondition.assertArgumentNotNull(resolver, \"resolver\");\r\n     \t\r\n     \tString prefix;\r\n     \tString localName;\r\n",
            "diff_size": 1
        }
    ],
    "repaired_by": [
        "intellij",
        "codebuff"
    ],
    "not_repaired_by": [
        "styler",
        "naturalize",
        "styler_random",
        "styler_three_grams"
    ]
}