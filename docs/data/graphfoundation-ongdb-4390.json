{
    "project_name": "graphfoundation-ongdb",
    "error_id": "4390",
    "information": {
        "errors": [
            {
                "line": "1",
                "severity": "error",
                "message": "Missing, wrong or duplicated license header",
                "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
            }
        ]
    },
    "source_code": "/*\n * Copyright (c) 2002-2018 \"Neo Technology,\"\n * Network Engine for Objects in Lund AB [http://neotechnology.com]\n *",
    "results": [
        {
            "tool": "styler",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "intellij",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                },
                {
                    "line": "39",
                    "column": "44",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "39",
                    "column": "84",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "45",
                    "column": "40",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "46",
                    "column": "66",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "48",
                    "column": "43",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "58",
                    "column": "24",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "37",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "66",
                    "column": "51",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "8",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "85",
                    "column": "22",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "43",
                    "severity": "error",
                    "message": "'(' is not followed by whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                },
                {
                    "line": "97",
                    "column": "70",
                    "severity": "error",
                    "message": "')' is not preceded with whitespace.",
                    "source": "com.puppycrawl.tools.checkstyle.checks.whitespace.ParenPadCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4390/ReplicatedIdAllocationStateMachine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4390/ReplicatedIdAllocationStateMachine.java\nindex 504c3d4bb5c..72b4612c76b 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4390/ReplicatedIdAllocationStateMachine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/intellij/4390/ReplicatedIdAllocationStateMachine.java\n@@ -17,6 +17,7 @@\n  * You should have received a copy of the GNU Affero General Public License\n  * along with this program. If not, see <http://www.gnu.org/licenses/>.\n  */\n+\n package org.neo4j.causalclustering.core.state.machines.id;\n \n import java.io.IOException;\n@@ -32,69 +33,69 @@ import org.neo4j.kernel.impl.store.id.IdType;\n  */\n public class ReplicatedIdAllocationStateMachine implements StateMachine<ReplicatedIdAllocationRequest>\n {\n-    private final StateStorage<IdAllocationState> storage;\n-    private IdAllocationState state;\n+  private final StateStorage<IdAllocationState> storage;\n+  private IdAllocationState state;\n \n-    public ReplicatedIdAllocationStateMachine( StateStorage<IdAllocationState> storage )\n-    {\n-        this.storage = storage;\n-    }\n+  public ReplicatedIdAllocationStateMachine(StateStorage<IdAllocationState> storage)\n+  {\n+    this.storage = storage;\n+  }\n \n-    @Override\n-    public synchronized void applyCommand( ReplicatedIdAllocationRequest request, long commandIndex,\n-            Consumer<Result> callback )\n+  @Override\n+  public synchronized void applyCommand(ReplicatedIdAllocationRequest request, long commandIndex,\n+                                        Consumer<Result> callback)\n+  {\n+    if (commandIndex <= state().logIndex())\n     {\n-        if ( commandIndex <= state().logIndex() )\n-        {\n-            return;\n-        }\n-\n-        state().logIndex( commandIndex );\n-\n-        IdType idType = request.idType();\n+      return;\n+    }\n \n-        boolean requestAccepted = request.idRangeStart() == firstUnallocated( idType );\n-        if ( requestAccepted )\n-        {\n-            state().firstUnallocated( idType, request.idRangeStart() + request.idRangeLength() );\n-        }\n+    state().logIndex(commandIndex);\n \n-        callback.accept( Result.of( requestAccepted ) );\n-    }\n+    IdType idType = request.idType();\n \n-    synchronized long firstUnallocated( IdType idType )\n+    boolean requestAccepted = request.idRangeStart() == firstUnallocated(idType);\n+    if (requestAccepted)\n     {\n-        return state().firstUnallocated( idType );\n+      state().firstUnallocated(idType, request.idRangeStart() + request.idRangeLength());\n     }\n \n-    @Override\n-    public void flush() throws IOException\n-    {\n-        storage.persistStoreData( state() );\n-    }\n+    callback.accept(Result.of(requestAccepted));\n+  }\n \n-    @Override\n-    public long lastAppliedIndex()\n-    {\n-        return state().logIndex();\n-    }\n+  synchronized long firstUnallocated(IdType idType)\n+  {\n+    return state().firstUnallocated(idType);\n+  }\n \n-    private IdAllocationState state()\n-    {\n-        if ( state == null )\n-        {\n-            state = storage.getInitialState();\n-        }\n-        return state;\n-    }\n+  @Override\n+  public void flush() throws IOException\n+  {\n+    storage.persistStoreData(state());\n+  }\n \n-    public synchronized IdAllocationState snapshot()\n-    {\n-        return state().newInstance();\n-    }\n+  @Override\n+  public long lastAppliedIndex()\n+  {\n+    return state().logIndex();\n+  }\n \n-    public synchronized void installSnapshot( IdAllocationState snapshot )\n+  private IdAllocationState state()\n+  {\n+    if (state == null)\n     {\n-        state = snapshot;\n+      state = storage.getInitialState();\n     }\n+    return state;\n+  }\n+\n+  public synchronized IdAllocationState snapshot()\n+  {\n+    return state().newInstance();\n+  }\n+\n+  public synchronized void installSnapshot(IdAllocationState snapshot)\n+  {\n+    state = snapshot;\n+  }\n }\n",
            "diff_size": 69
        },
        {
            "tool": "naturalize",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "diff --git a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4390/ReplicatedIdAllocationStateMachine.java b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4390/ReplicatedIdAllocationStateMachine.java\nindex 504c3d4bb5c..ab33bd91892 100644\n--- a/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/errored/1/4390/ReplicatedIdAllocationStateMachine.java\n+++ b/home/fernanda/mnt/fernanda/git-styler/styler/python/experiments/results/graphfoundation-ongdb/naturalize/4390/ReplicatedIdAllocationStateMachine.java\n@@ -41,8 +41,7 @@ public class ReplicatedIdAllocationStateMachine implements StateMachine<Replicat\n     }\n \n     @Override\n-    public synchronized void applyCommand( ReplicatedIdAllocationRequest request, long commandIndex,\n-            Consumer<Result> callback )\n+    public synchronized void applyCommand( ReplicatedIdAllocationRequest request, long commandIndex, Consumer<Result> callback )\n     {\n         if ( commandIndex <= state().logIndex() )\n         {\n@@ -50,8 +49,7 @@ public class ReplicatedIdAllocationStateMachine implements StateMachine<Replicat\n         }\n \n         state().logIndex( commandIndex );\n-\n-        IdType idType = request.idType();\n+IdType idType = request.idType();\n \n         boolean requestAccepted = request.idRangeStart() == firstUnallocated( idType );\n         if ( requestAccepted )\n@@ -85,7 +83,8 @@ public class ReplicatedIdAllocationStateMachine implements StateMachine<Replicat\n         {\n             state = storage.getInitialState();\n         }\n-        return state;\n+\n+return state;\n     }\n \n     public synchronized IdAllocationState snapshot()\n@@ -97,4 +96,4 @@ public class ReplicatedIdAllocationStateMachine implements StateMachine<Replicat\n     {\n         state = snapshot;\n     }\n-}\n+}\n\\ No newline at end of file\n",
            "diff_size": 7
        },
        {
            "tool": "codebuff",
            "errors": null,
            "diff": null
        },
        {
            "tool": "styler_random",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        },
        {
            "tool": "styler_three_grams",
            "errors": [
                {
                    "line": "1",
                    "severity": "error",
                    "message": "Missing, wrong or duplicated license header",
                    "source": "com.puppycrawl.tools.checkstyle.checks.regexp.RegexpSinglelineCheck"
                }
            ],
            "diff": "",
            "diff_size": 0
        }
    ],
    "repaired_by": [],
    "not_repaired_by": [
        "styler",
        "intellij",
        "naturalize",
        "codebuff",
        "styler_random",
        "styler_three_grams"
    ]
}